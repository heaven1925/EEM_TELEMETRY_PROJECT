
TELEMETRY.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000075d4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000144  08007774  08007774  00017774  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080078b8  080078b8  00021010  2**0
                  CONTENTS
  4 .ARM          00000008  080078b8  080078b8  000178b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080078c0  080078c0  00021010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080078c0  080078c0  000178c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080078c4  080078c4  000178c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080078c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ARM.__at_0x20000000 00001000  20000010  080078d8  00020010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00009634  20001010  080088d8  00021010  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000a644  080088d8  0002a644  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00021010  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ddfd  00000000  00000000  00021040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003c35  00000000  00000000  0003ee3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001be8  00000000  00000000  00042a78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001a58  00000000  00000000  00044660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00006589  00000000  00000000  000460b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00023633  00000000  00000000  0004c641  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000aa289  00000000  00000000  0006fc74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00119efd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007508  00000000  00000000  00119f50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20001010 	.word	0x20001010
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800775c 	.word	0x0800775c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20001014 	.word	0x20001014
 80001dc:	0800775c 	.word	0x0800775c

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b974 	b.w	80004e0 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468e      	mov	lr, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14d      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021e:	428a      	cmp	r2, r1
 8000220:	4694      	mov	ip, r2
 8000222:	d969      	bls.n	80002f8 <__udivmoddi4+0xe8>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b152      	cbz	r2, 8000240 <__udivmoddi4+0x30>
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	f1c2 0120 	rsb	r1, r2, #32
 8000232:	fa20 f101 	lsr.w	r1, r0, r1
 8000236:	fa0c fc02 	lsl.w	ip, ip, r2
 800023a:	ea41 0e03 	orr.w	lr, r1, r3
 800023e:	4094      	lsls	r4, r2
 8000240:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000244:	0c21      	lsrs	r1, r4, #16
 8000246:	fbbe f6f8 	udiv	r6, lr, r8
 800024a:	fa1f f78c 	uxth.w	r7, ip
 800024e:	fb08 e316 	mls	r3, r8, r6, lr
 8000252:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000256:	fb06 f107 	mul.w	r1, r6, r7
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f106 30ff 	add.w	r0, r6, #4294967295
 8000266:	f080 811f 	bcs.w	80004a8 <__udivmoddi4+0x298>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 811c 	bls.w	80004a8 <__udivmoddi4+0x298>
 8000270:	3e02      	subs	r6, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0f8 	udiv	r0, r3, r8
 800027c:	fb08 3310 	mls	r3, r8, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 f707 	mul.w	r7, r0, r7
 8000288:	42a7      	cmp	r7, r4
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x92>
 800028c:	eb1c 0404 	adds.w	r4, ip, r4
 8000290:	f100 33ff 	add.w	r3, r0, #4294967295
 8000294:	f080 810a 	bcs.w	80004ac <__udivmoddi4+0x29c>
 8000298:	42a7      	cmp	r7, r4
 800029a:	f240 8107 	bls.w	80004ac <__udivmoddi4+0x29c>
 800029e:	4464      	add	r4, ip
 80002a0:	3802      	subs	r0, #2
 80002a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a6:	1be4      	subs	r4, r4, r7
 80002a8:	2600      	movs	r6, #0
 80002aa:	b11d      	cbz	r5, 80002b4 <__udivmoddi4+0xa4>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c5 4300 	strd	r4, r3, [r5]
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0xc2>
 80002be:	2d00      	cmp	r5, #0
 80002c0:	f000 80ef 	beq.w	80004a2 <__udivmoddi4+0x292>
 80002c4:	2600      	movs	r6, #0
 80002c6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ca:	4630      	mov	r0, r6
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	fab3 f683 	clz	r6, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d14a      	bne.n	8000370 <__udivmoddi4+0x160>
 80002da:	428b      	cmp	r3, r1
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xd4>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80f9 	bhi.w	80004d6 <__udivmoddi4+0x2c6>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	469e      	mov	lr, r3
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e0      	beq.n	80002b4 <__udivmoddi4+0xa4>
 80002f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002f6:	e7dd      	b.n	80002b4 <__udivmoddi4+0xa4>
 80002f8:	b902      	cbnz	r2, 80002fc <__udivmoddi4+0xec>
 80002fa:	deff      	udf	#255	; 0xff
 80002fc:	fab2 f282 	clz	r2, r2
 8000300:	2a00      	cmp	r2, #0
 8000302:	f040 8092 	bne.w	800042a <__udivmoddi4+0x21a>
 8000306:	eba1 010c 	sub.w	r1, r1, ip
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2601      	movs	r6, #1
 8000314:	0c20      	lsrs	r0, r4, #16
 8000316:	fbb1 f3f7 	udiv	r3, r1, r7
 800031a:	fb07 1113 	mls	r1, r7, r3, r1
 800031e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000322:	fb0e f003 	mul.w	r0, lr, r3
 8000326:	4288      	cmp	r0, r1
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x12c>
 800032a:	eb1c 0101 	adds.w	r1, ip, r1
 800032e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x12a>
 8000334:	4288      	cmp	r0, r1
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2c0>
 800033a:	4643      	mov	r3, r8
 800033c:	1a09      	subs	r1, r1, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb1 f0f7 	udiv	r0, r1, r7
 8000344:	fb07 1110 	mls	r1, r7, r0, r1
 8000348:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x156>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 31ff 	add.w	r1, r0, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x154>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2ca>
 8000364:	4608      	mov	r0, r1
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800036e:	e79c      	b.n	80002aa <__udivmoddi4+0x9a>
 8000370:	f1c6 0720 	rsb	r7, r6, #32
 8000374:	40b3      	lsls	r3, r6
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa20 f407 	lsr.w	r4, r0, r7
 8000382:	fa01 f306 	lsl.w	r3, r1, r6
 8000386:	431c      	orrs	r4, r3
 8000388:	40f9      	lsrs	r1, r7
 800038a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038e:	fa00 f306 	lsl.w	r3, r0, r6
 8000392:	fbb1 f8f9 	udiv	r8, r1, r9
 8000396:	0c20      	lsrs	r0, r4, #16
 8000398:	fa1f fe8c 	uxth.w	lr, ip
 800039c:	fb09 1118 	mls	r1, r9, r8, r1
 80003a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a4:	fb08 f00e 	mul.w	r0, r8, lr
 80003a8:	4288      	cmp	r0, r1
 80003aa:	fa02 f206 	lsl.w	r2, r2, r6
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b8>
 80003b0:	eb1c 0101 	adds.w	r1, ip, r1
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2bc>
 80003bc:	4288      	cmp	r0, r1
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2bc>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4461      	add	r1, ip
 80003c8:	1a09      	subs	r1, r1, r0
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d0:	fb09 1110 	mls	r1, r9, r0, r1
 80003d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003dc:	458e      	cmp	lr, r1
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1e2>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2b4>
 80003ea:	458e      	cmp	lr, r1
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2b4>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4461      	add	r1, ip
 80003f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003f6:	fba0 9402 	umull	r9, r4, r0, r2
 80003fa:	eba1 010e 	sub.w	r1, r1, lr
 80003fe:	42a1      	cmp	r1, r4
 8000400:	46c8      	mov	r8, r9
 8000402:	46a6      	mov	lr, r4
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x2a4>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x2a0>
 8000408:	b15d      	cbz	r5, 8000422 <__udivmoddi4+0x212>
 800040a:	ebb3 0208 	subs.w	r2, r3, r8
 800040e:	eb61 010e 	sbc.w	r1, r1, lr
 8000412:	fa01 f707 	lsl.w	r7, r1, r7
 8000416:	fa22 f306 	lsr.w	r3, r2, r6
 800041a:	40f1      	lsrs	r1, r6
 800041c:	431f      	orrs	r7, r3
 800041e:	e9c5 7100 	strd	r7, r1, [r5]
 8000422:	2600      	movs	r6, #0
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	f1c2 0320 	rsb	r3, r2, #32
 800042e:	40d8      	lsrs	r0, r3
 8000430:	fa0c fc02 	lsl.w	ip, ip, r2
 8000434:	fa21 f303 	lsr.w	r3, r1, r3
 8000438:	4091      	lsls	r1, r2
 800043a:	4301      	orrs	r1, r0
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb3 f0f7 	udiv	r0, r3, r7
 8000448:	fb07 3610 	mls	r6, r7, r0, r3
 800044c:	0c0b      	lsrs	r3, r1, #16
 800044e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000452:	fb00 f60e 	mul.w	r6, r0, lr
 8000456:	429e      	cmp	r6, r3
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x260>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b8>
 8000468:	429e      	cmp	r6, r3
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b8>
 800046c:	3802      	subs	r0, #2
 800046e:	4463      	add	r3, ip
 8000470:	1b9b      	subs	r3, r3, r6
 8000472:	b289      	uxth	r1, r1
 8000474:	fbb3 f6f7 	udiv	r6, r3, r7
 8000478:	fb07 3316 	mls	r3, r7, r6, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb06 f30e 	mul.w	r3, r6, lr
 8000484:	428b      	cmp	r3, r1
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x28a>
 8000488:	eb1c 0101 	adds.w	r1, ip, r1
 800048c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000492:	428b      	cmp	r3, r1
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000496:	3e02      	subs	r6, #2
 8000498:	4461      	add	r1, ip
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0x104>
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e705      	b.n	80002b4 <__udivmoddi4+0xa4>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e3      	b.n	8000274 <__udivmoddi4+0x64>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6f8      	b.n	80002a2 <__udivmoddi4+0x92>
 80004b0:	454b      	cmp	r3, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f8>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004bc:	3801      	subs	r0, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f8>
 80004c0:	4646      	mov	r6, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x28a>
 80004c4:	4620      	mov	r0, r4
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1e2>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x260>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b8>
 80004d0:	3b02      	subs	r3, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x12c>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e709      	b.n	80002ee <__udivmoddi4+0xde>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x156>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e8:	f001 f848 	bl	800157c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ec:	f000 f830 	bl	8000550 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f0:	f000 fb54 	bl	8000b9c <MX_GPIO_Init>
  MX_ADC1_Init();
 80004f4:	f000 f898 	bl	8000628 <MX_ADC1_Init>
  MX_I2C1_Init();
 80004f8:	f000 f8e8 	bl	80006cc <MX_I2C1_Init>
  MX_I2C2_Init();
 80004fc:	f000 f914 	bl	8000728 <MX_I2C2_Init>
  MX_I2C3_Init();
 8000500:	f000 f940 	bl	8000784 <MX_I2C3_Init>
  MX_SPI1_Init();
 8000504:	f000 f96c 	bl	80007e0 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000508:	f000 f9a0 	bl	800084c <MX_SPI2_Init>
  MX_SPI3_Init();
 800050c:	f000 f9d4 	bl	80008b8 <MX_SPI3_Init>
  MX_TIM3_Init();
 8000510:	f000 fa08 	bl	8000924 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000514:	f000 fa6a 	bl	80009ec <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8000518:	f000 fac2 	bl	8000aa0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800051c:	f000 faea 	bl	8000af4 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8000520:	f000 fb12 	bl	8000b48 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */

  MAIN_App(); /* Jump Into Telemetry Code */
 8000524:	f006 fca2 	bl	8006e6c <MAIN_App>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000528:	f003 fab6 	bl	8003a98 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800052c:	4a05      	ldr	r2, [pc, #20]	; (8000544 <main+0x60>)
 800052e:	2100      	movs	r1, #0
 8000530:	4805      	ldr	r0, [pc, #20]	; (8000548 <main+0x64>)
 8000532:	f003 fafb 	bl	8003b2c <osThreadNew>
 8000536:	4603      	mov	r3, r0
 8000538:	4a04      	ldr	r2, [pc, #16]	; (800054c <main+0x68>)
 800053a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800053c:	f003 fad0 	bl	8003ae0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000540:	e7fe      	b.n	8000540 <main+0x5c>
 8000542:	bf00      	nop
 8000544:	0800785c 	.word	0x0800785c
 8000548:	08000d61 	.word	0x08000d61
 800054c:	200013d4 	.word	0x200013d4

08000550 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b094      	sub	sp, #80	; 0x50
 8000554:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000556:	f107 0320 	add.w	r3, r7, #32
 800055a:	2230      	movs	r2, #48	; 0x30
 800055c:	2100      	movs	r1, #0
 800055e:	4618      	mov	r0, r3
 8000560:	f007 f8f4 	bl	800774c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000564:	f107 030c 	add.w	r3, r7, #12
 8000568:	2200      	movs	r2, #0
 800056a:	601a      	str	r2, [r3, #0]
 800056c:	605a      	str	r2, [r3, #4]
 800056e:	609a      	str	r2, [r3, #8]
 8000570:	60da      	str	r2, [r3, #12]
 8000572:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000574:	2300      	movs	r3, #0
 8000576:	60bb      	str	r3, [r7, #8]
 8000578:	4b29      	ldr	r3, [pc, #164]	; (8000620 <SystemClock_Config+0xd0>)
 800057a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800057c:	4a28      	ldr	r2, [pc, #160]	; (8000620 <SystemClock_Config+0xd0>)
 800057e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000582:	6413      	str	r3, [r2, #64]	; 0x40
 8000584:	4b26      	ldr	r3, [pc, #152]	; (8000620 <SystemClock_Config+0xd0>)
 8000586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000588:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800058c:	60bb      	str	r3, [r7, #8]
 800058e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000590:	2300      	movs	r3, #0
 8000592:	607b      	str	r3, [r7, #4]
 8000594:	4b23      	ldr	r3, [pc, #140]	; (8000624 <SystemClock_Config+0xd4>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800059c:	4a21      	ldr	r2, [pc, #132]	; (8000624 <SystemClock_Config+0xd4>)
 800059e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80005a2:	6013      	str	r3, [r2, #0]
 80005a4:	4b1f      	ldr	r3, [pc, #124]	; (8000624 <SystemClock_Config+0xd4>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005ac:	607b      	str	r3, [r7, #4]
 80005ae:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005b0:	2301      	movs	r3, #1
 80005b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005b8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ba:	2302      	movs	r3, #2
 80005bc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005be:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005c4:	2304      	movs	r3, #4
 80005c6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 80005c8:	2354      	movs	r3, #84	; 0x54
 80005ca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005cc:	2302      	movs	r3, #2
 80005ce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005d0:	2304      	movs	r3, #4
 80005d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d4:	f107 0320 	add.w	r3, r7, #32
 80005d8:	4618      	mov	r0, r3
 80005da:	f001 febb 	bl	8002354 <HAL_RCC_OscConfig>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d001      	beq.n	80005e8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80005e4:	f000 fbc4 	bl	8000d70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005e8:	230f      	movs	r3, #15
 80005ea:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ec:	2302      	movs	r3, #2
 80005ee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f0:	2300      	movs	r3, #0
 80005f2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005f8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005fe:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000600:	f107 030c 	add.w	r3, r7, #12
 8000604:	2102      	movs	r1, #2
 8000606:	4618      	mov	r0, r3
 8000608:	f002 f91c 	bl	8002844 <HAL_RCC_ClockConfig>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000612:	f000 fbad 	bl	8000d70 <Error_Handler>
  }
}
 8000616:	bf00      	nop
 8000618:	3750      	adds	r7, #80	; 0x50
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	40023800 	.word	0x40023800
 8000624:	40007000 	.word	0x40007000

08000628 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b084      	sub	sp, #16
 800062c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800062e:	463b      	mov	r3, r7
 8000630:	2200      	movs	r2, #0
 8000632:	601a      	str	r2, [r3, #0]
 8000634:	605a      	str	r2, [r3, #4]
 8000636:	609a      	str	r2, [r3, #8]
 8000638:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800063a:	4b21      	ldr	r3, [pc, #132]	; (80006c0 <MX_ADC1_Init+0x98>)
 800063c:	4a21      	ldr	r2, [pc, #132]	; (80006c4 <MX_ADC1_Init+0x9c>)
 800063e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000640:	4b1f      	ldr	r3, [pc, #124]	; (80006c0 <MX_ADC1_Init+0x98>)
 8000642:	2200      	movs	r2, #0
 8000644:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000646:	4b1e      	ldr	r3, [pc, #120]	; (80006c0 <MX_ADC1_Init+0x98>)
 8000648:	2200      	movs	r2, #0
 800064a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800064c:	4b1c      	ldr	r3, [pc, #112]	; (80006c0 <MX_ADC1_Init+0x98>)
 800064e:	2200      	movs	r2, #0
 8000650:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000652:	4b1b      	ldr	r3, [pc, #108]	; (80006c0 <MX_ADC1_Init+0x98>)
 8000654:	2200      	movs	r2, #0
 8000656:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000658:	4b19      	ldr	r3, [pc, #100]	; (80006c0 <MX_ADC1_Init+0x98>)
 800065a:	2200      	movs	r2, #0
 800065c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000660:	4b17      	ldr	r3, [pc, #92]	; (80006c0 <MX_ADC1_Init+0x98>)
 8000662:	2200      	movs	r2, #0
 8000664:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000666:	4b16      	ldr	r3, [pc, #88]	; (80006c0 <MX_ADC1_Init+0x98>)
 8000668:	4a17      	ldr	r2, [pc, #92]	; (80006c8 <MX_ADC1_Init+0xa0>)
 800066a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800066c:	4b14      	ldr	r3, [pc, #80]	; (80006c0 <MX_ADC1_Init+0x98>)
 800066e:	2200      	movs	r2, #0
 8000670:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000672:	4b13      	ldr	r3, [pc, #76]	; (80006c0 <MX_ADC1_Init+0x98>)
 8000674:	2201      	movs	r2, #1
 8000676:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000678:	4b11      	ldr	r3, [pc, #68]	; (80006c0 <MX_ADC1_Init+0x98>)
 800067a:	2200      	movs	r2, #0
 800067c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000680:	4b0f      	ldr	r3, [pc, #60]	; (80006c0 <MX_ADC1_Init+0x98>)
 8000682:	2201      	movs	r2, #1
 8000684:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000686:	480e      	ldr	r0, [pc, #56]	; (80006c0 <MX_ADC1_Init+0x98>)
 8000688:	f000 ffea 	bl	8001660 <HAL_ADC_Init>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000692:	f000 fb6d 	bl	8000d70 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000696:	2301      	movs	r3, #1
 8000698:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800069a:	2301      	movs	r3, #1
 800069c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800069e:	2300      	movs	r3, #0
 80006a0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006a2:	463b      	mov	r3, r7
 80006a4:	4619      	mov	r1, r3
 80006a6:	4806      	ldr	r0, [pc, #24]	; (80006c0 <MX_ADC1_Init+0x98>)
 80006a8:	f001 f81e 	bl	80016e8 <HAL_ADC_ConfigChannel>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80006b2:	f000 fb5d 	bl	8000d70 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006b6:	bf00      	nop
 80006b8:	3710      	adds	r7, #16
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	2000102c 	.word	0x2000102c
 80006c4:	40012000 	.word	0x40012000
 80006c8:	0f000001 	.word	0x0f000001

080006cc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006d0:	4b12      	ldr	r3, [pc, #72]	; (800071c <MX_I2C1_Init+0x50>)
 80006d2:	4a13      	ldr	r2, [pc, #76]	; (8000720 <MX_I2C1_Init+0x54>)
 80006d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006d6:	4b11      	ldr	r3, [pc, #68]	; (800071c <MX_I2C1_Init+0x50>)
 80006d8:	4a12      	ldr	r2, [pc, #72]	; (8000724 <MX_I2C1_Init+0x58>)
 80006da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006dc:	4b0f      	ldr	r3, [pc, #60]	; (800071c <MX_I2C1_Init+0x50>)
 80006de:	2200      	movs	r2, #0
 80006e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006e2:	4b0e      	ldr	r3, [pc, #56]	; (800071c <MX_I2C1_Init+0x50>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006e8:	4b0c      	ldr	r3, [pc, #48]	; (800071c <MX_I2C1_Init+0x50>)
 80006ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006ee:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006f0:	4b0a      	ldr	r3, [pc, #40]	; (800071c <MX_I2C1_Init+0x50>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006f6:	4b09      	ldr	r3, [pc, #36]	; (800071c <MX_I2C1_Init+0x50>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006fc:	4b07      	ldr	r3, [pc, #28]	; (800071c <MX_I2C1_Init+0x50>)
 80006fe:	2200      	movs	r2, #0
 8000700:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000702:	4b06      	ldr	r3, [pc, #24]	; (800071c <MX_I2C1_Init+0x50>)
 8000704:	2200      	movs	r2, #0
 8000706:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000708:	4804      	ldr	r0, [pc, #16]	; (800071c <MX_I2C1_Init+0x50>)
 800070a:	f001 fcdf 	bl	80020cc <HAL_I2C_Init>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000714:	f000 fb2c 	bl	8000d70 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000718:	bf00      	nop
 800071a:	bd80      	pop	{r7, pc}
 800071c:	20001074 	.word	0x20001074
 8000720:	40005400 	.word	0x40005400
 8000724:	000186a0 	.word	0x000186a0

08000728 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800072c:	4b12      	ldr	r3, [pc, #72]	; (8000778 <MX_I2C2_Init+0x50>)
 800072e:	4a13      	ldr	r2, [pc, #76]	; (800077c <MX_I2C2_Init+0x54>)
 8000730:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000732:	4b11      	ldr	r3, [pc, #68]	; (8000778 <MX_I2C2_Init+0x50>)
 8000734:	4a12      	ldr	r2, [pc, #72]	; (8000780 <MX_I2C2_Init+0x58>)
 8000736:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000738:	4b0f      	ldr	r3, [pc, #60]	; (8000778 <MX_I2C2_Init+0x50>)
 800073a:	2200      	movs	r2, #0
 800073c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800073e:	4b0e      	ldr	r3, [pc, #56]	; (8000778 <MX_I2C2_Init+0x50>)
 8000740:	2200      	movs	r2, #0
 8000742:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000744:	4b0c      	ldr	r3, [pc, #48]	; (8000778 <MX_I2C2_Init+0x50>)
 8000746:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800074a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800074c:	4b0a      	ldr	r3, [pc, #40]	; (8000778 <MX_I2C2_Init+0x50>)
 800074e:	2200      	movs	r2, #0
 8000750:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000752:	4b09      	ldr	r3, [pc, #36]	; (8000778 <MX_I2C2_Init+0x50>)
 8000754:	2200      	movs	r2, #0
 8000756:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000758:	4b07      	ldr	r3, [pc, #28]	; (8000778 <MX_I2C2_Init+0x50>)
 800075a:	2200      	movs	r2, #0
 800075c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800075e:	4b06      	ldr	r3, [pc, #24]	; (8000778 <MX_I2C2_Init+0x50>)
 8000760:	2200      	movs	r2, #0
 8000762:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000764:	4804      	ldr	r0, [pc, #16]	; (8000778 <MX_I2C2_Init+0x50>)
 8000766:	f001 fcb1 	bl	80020cc <HAL_I2C_Init>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000770:	f000 fafe 	bl	8000d70 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000774:	bf00      	nop
 8000776:	bd80      	pop	{r7, pc}
 8000778:	200010c8 	.word	0x200010c8
 800077c:	40005800 	.word	0x40005800
 8000780:	000186a0 	.word	0x000186a0

08000784 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000788:	4b12      	ldr	r3, [pc, #72]	; (80007d4 <MX_I2C3_Init+0x50>)
 800078a:	4a13      	ldr	r2, [pc, #76]	; (80007d8 <MX_I2C3_Init+0x54>)
 800078c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800078e:	4b11      	ldr	r3, [pc, #68]	; (80007d4 <MX_I2C3_Init+0x50>)
 8000790:	4a12      	ldr	r2, [pc, #72]	; (80007dc <MX_I2C3_Init+0x58>)
 8000792:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000794:	4b0f      	ldr	r3, [pc, #60]	; (80007d4 <MX_I2C3_Init+0x50>)
 8000796:	2200      	movs	r2, #0
 8000798:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800079a:	4b0e      	ldr	r3, [pc, #56]	; (80007d4 <MX_I2C3_Init+0x50>)
 800079c:	2200      	movs	r2, #0
 800079e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007a0:	4b0c      	ldr	r3, [pc, #48]	; (80007d4 <MX_I2C3_Init+0x50>)
 80007a2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007a6:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007a8:	4b0a      	ldr	r3, [pc, #40]	; (80007d4 <MX_I2C3_Init+0x50>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80007ae:	4b09      	ldr	r3, [pc, #36]	; (80007d4 <MX_I2C3_Init+0x50>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007b4:	4b07      	ldr	r3, [pc, #28]	; (80007d4 <MX_I2C3_Init+0x50>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007ba:	4b06      	ldr	r3, [pc, #24]	; (80007d4 <MX_I2C3_Init+0x50>)
 80007bc:	2200      	movs	r2, #0
 80007be:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80007c0:	4804      	ldr	r0, [pc, #16]	; (80007d4 <MX_I2C3_Init+0x50>)
 80007c2:	f001 fc83 	bl	80020cc <HAL_I2C_Init>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80007cc:	f000 fad0 	bl	8000d70 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80007d0:	bf00      	nop
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	2000111c 	.word	0x2000111c
 80007d8:	40005c00 	.word	0x40005c00
 80007dc:	000186a0 	.word	0x000186a0

080007e0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007e4:	4b17      	ldr	r3, [pc, #92]	; (8000844 <MX_SPI1_Init+0x64>)
 80007e6:	4a18      	ldr	r2, [pc, #96]	; (8000848 <MX_SPI1_Init+0x68>)
 80007e8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007ea:	4b16      	ldr	r3, [pc, #88]	; (8000844 <MX_SPI1_Init+0x64>)
 80007ec:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007f0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007f2:	4b14      	ldr	r3, [pc, #80]	; (8000844 <MX_SPI1_Init+0x64>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007f8:	4b12      	ldr	r3, [pc, #72]	; (8000844 <MX_SPI1_Init+0x64>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007fe:	4b11      	ldr	r3, [pc, #68]	; (8000844 <MX_SPI1_Init+0x64>)
 8000800:	2200      	movs	r2, #0
 8000802:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000804:	4b0f      	ldr	r3, [pc, #60]	; (8000844 <MX_SPI1_Init+0x64>)
 8000806:	2200      	movs	r2, #0
 8000808:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800080a:	4b0e      	ldr	r3, [pc, #56]	; (8000844 <MX_SPI1_Init+0x64>)
 800080c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000810:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000812:	4b0c      	ldr	r3, [pc, #48]	; (8000844 <MX_SPI1_Init+0x64>)
 8000814:	2200      	movs	r2, #0
 8000816:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000818:	4b0a      	ldr	r3, [pc, #40]	; (8000844 <MX_SPI1_Init+0x64>)
 800081a:	2200      	movs	r2, #0
 800081c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800081e:	4b09      	ldr	r3, [pc, #36]	; (8000844 <MX_SPI1_Init+0x64>)
 8000820:	2200      	movs	r2, #0
 8000822:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000824:	4b07      	ldr	r3, [pc, #28]	; (8000844 <MX_SPI1_Init+0x64>)
 8000826:	2200      	movs	r2, #0
 8000828:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800082a:	4b06      	ldr	r3, [pc, #24]	; (8000844 <MX_SPI1_Init+0x64>)
 800082c:	220a      	movs	r2, #10
 800082e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000830:	4804      	ldr	r0, [pc, #16]	; (8000844 <MX_SPI1_Init+0x64>)
 8000832:	f002 fa27 	bl	8002c84 <HAL_SPI_Init>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800083c:	f000 fa98 	bl	8000d70 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000840:	bf00      	nop
 8000842:	bd80      	pop	{r7, pc}
 8000844:	20001170 	.word	0x20001170
 8000848:	40013000 	.word	0x40013000

0800084c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000850:	4b17      	ldr	r3, [pc, #92]	; (80008b0 <MX_SPI2_Init+0x64>)
 8000852:	4a18      	ldr	r2, [pc, #96]	; (80008b4 <MX_SPI2_Init+0x68>)
 8000854:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000856:	4b16      	ldr	r3, [pc, #88]	; (80008b0 <MX_SPI2_Init+0x64>)
 8000858:	f44f 7282 	mov.w	r2, #260	; 0x104
 800085c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800085e:	4b14      	ldr	r3, [pc, #80]	; (80008b0 <MX_SPI2_Init+0x64>)
 8000860:	2200      	movs	r2, #0
 8000862:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000864:	4b12      	ldr	r3, [pc, #72]	; (80008b0 <MX_SPI2_Init+0x64>)
 8000866:	2200      	movs	r2, #0
 8000868:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800086a:	4b11      	ldr	r3, [pc, #68]	; (80008b0 <MX_SPI2_Init+0x64>)
 800086c:	2200      	movs	r2, #0
 800086e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000870:	4b0f      	ldr	r3, [pc, #60]	; (80008b0 <MX_SPI2_Init+0x64>)
 8000872:	2200      	movs	r2, #0
 8000874:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000876:	4b0e      	ldr	r3, [pc, #56]	; (80008b0 <MX_SPI2_Init+0x64>)
 8000878:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800087c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800087e:	4b0c      	ldr	r3, [pc, #48]	; (80008b0 <MX_SPI2_Init+0x64>)
 8000880:	2200      	movs	r2, #0
 8000882:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000884:	4b0a      	ldr	r3, [pc, #40]	; (80008b0 <MX_SPI2_Init+0x64>)
 8000886:	2200      	movs	r2, #0
 8000888:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800088a:	4b09      	ldr	r3, [pc, #36]	; (80008b0 <MX_SPI2_Init+0x64>)
 800088c:	2200      	movs	r2, #0
 800088e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000890:	4b07      	ldr	r3, [pc, #28]	; (80008b0 <MX_SPI2_Init+0x64>)
 8000892:	2200      	movs	r2, #0
 8000894:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000896:	4b06      	ldr	r3, [pc, #24]	; (80008b0 <MX_SPI2_Init+0x64>)
 8000898:	220a      	movs	r2, #10
 800089a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800089c:	4804      	ldr	r0, [pc, #16]	; (80008b0 <MX_SPI2_Init+0x64>)
 800089e:	f002 f9f1 	bl	8002c84 <HAL_SPI_Init>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80008a8:	f000 fa62 	bl	8000d70 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80008ac:	bf00      	nop
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	200011c8 	.word	0x200011c8
 80008b4:	40003800 	.word	0x40003800

080008b8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80008bc:	4b17      	ldr	r3, [pc, #92]	; (800091c <MX_SPI3_Init+0x64>)
 80008be:	4a18      	ldr	r2, [pc, #96]	; (8000920 <MX_SPI3_Init+0x68>)
 80008c0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80008c2:	4b16      	ldr	r3, [pc, #88]	; (800091c <MX_SPI3_Init+0x64>)
 80008c4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008c8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80008ca:	4b14      	ldr	r3, [pc, #80]	; (800091c <MX_SPI3_Init+0x64>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80008d0:	4b12      	ldr	r3, [pc, #72]	; (800091c <MX_SPI3_Init+0x64>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008d6:	4b11      	ldr	r3, [pc, #68]	; (800091c <MX_SPI3_Init+0x64>)
 80008d8:	2200      	movs	r2, #0
 80008da:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008dc:	4b0f      	ldr	r3, [pc, #60]	; (800091c <MX_SPI3_Init+0x64>)
 80008de:	2200      	movs	r2, #0
 80008e0:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80008e2:	4b0e      	ldr	r3, [pc, #56]	; (800091c <MX_SPI3_Init+0x64>)
 80008e4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80008e8:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008ea:	4b0c      	ldr	r3, [pc, #48]	; (800091c <MX_SPI3_Init+0x64>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008f0:	4b0a      	ldr	r3, [pc, #40]	; (800091c <MX_SPI3_Init+0x64>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80008f6:	4b09      	ldr	r3, [pc, #36]	; (800091c <MX_SPI3_Init+0x64>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008fc:	4b07      	ldr	r3, [pc, #28]	; (800091c <MX_SPI3_Init+0x64>)
 80008fe:	2200      	movs	r2, #0
 8000900:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000902:	4b06      	ldr	r3, [pc, #24]	; (800091c <MX_SPI3_Init+0x64>)
 8000904:	220a      	movs	r2, #10
 8000906:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000908:	4804      	ldr	r0, [pc, #16]	; (800091c <MX_SPI3_Init+0x64>)
 800090a:	f002 f9bb 	bl	8002c84 <HAL_SPI_Init>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8000914:	f000 fa2c 	bl	8000d70 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000918:	bf00      	nop
 800091a:	bd80      	pop	{r7, pc}
 800091c:	20001220 	.word	0x20001220
 8000920:	40003c00 	.word	0x40003c00

08000924 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b08a      	sub	sp, #40	; 0x28
 8000928:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800092a:	f107 0320 	add.w	r3, r7, #32
 800092e:	2200      	movs	r2, #0
 8000930:	601a      	str	r2, [r3, #0]
 8000932:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000934:	1d3b      	adds	r3, r7, #4
 8000936:	2200      	movs	r2, #0
 8000938:	601a      	str	r2, [r3, #0]
 800093a:	605a      	str	r2, [r3, #4]
 800093c:	609a      	str	r2, [r3, #8]
 800093e:	60da      	str	r2, [r3, #12]
 8000940:	611a      	str	r2, [r3, #16]
 8000942:	615a      	str	r2, [r3, #20]
 8000944:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000946:	4b27      	ldr	r3, [pc, #156]	; (80009e4 <MX_TIM3_Init+0xc0>)
 8000948:	4a27      	ldr	r2, [pc, #156]	; (80009e8 <MX_TIM3_Init+0xc4>)
 800094a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800094c:	4b25      	ldr	r3, [pc, #148]	; (80009e4 <MX_TIM3_Init+0xc0>)
 800094e:	2200      	movs	r2, #0
 8000950:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000952:	4b24      	ldr	r3, [pc, #144]	; (80009e4 <MX_TIM3_Init+0xc0>)
 8000954:	2200      	movs	r2, #0
 8000956:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000958:	4b22      	ldr	r3, [pc, #136]	; (80009e4 <MX_TIM3_Init+0xc0>)
 800095a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800095e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000960:	4b20      	ldr	r3, [pc, #128]	; (80009e4 <MX_TIM3_Init+0xc0>)
 8000962:	2200      	movs	r2, #0
 8000964:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000966:	4b1f      	ldr	r3, [pc, #124]	; (80009e4 <MX_TIM3_Init+0xc0>)
 8000968:	2200      	movs	r2, #0
 800096a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800096c:	481d      	ldr	r0, [pc, #116]	; (80009e4 <MX_TIM3_Init+0xc0>)
 800096e:	f002 fa12 	bl	8002d96 <HAL_TIM_PWM_Init>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000978:	f000 f9fa 	bl	8000d70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800097c:	2300      	movs	r3, #0
 800097e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000980:	2300      	movs	r3, #0
 8000982:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000984:	f107 0320 	add.w	r3, r7, #32
 8000988:	4619      	mov	r1, r3
 800098a:	4816      	ldr	r0, [pc, #88]	; (80009e4 <MX_TIM3_Init+0xc0>)
 800098c:	f002 fd20 	bl	80033d0 <HAL_TIMEx_MasterConfigSynchronization>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000996:	f000 f9eb 	bl	8000d70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800099a:	2360      	movs	r3, #96	; 0x60
 800099c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800099e:	2300      	movs	r3, #0
 80009a0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009a2:	2300      	movs	r3, #0
 80009a4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009a6:	2300      	movs	r3, #0
 80009a8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80009aa:	1d3b      	adds	r3, r7, #4
 80009ac:	2208      	movs	r2, #8
 80009ae:	4619      	mov	r1, r3
 80009b0:	480c      	ldr	r0, [pc, #48]	; (80009e4 <MX_TIM3_Init+0xc0>)
 80009b2:	f002 fa3f 	bl	8002e34 <HAL_TIM_PWM_ConfigChannel>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80009bc:	f000 f9d8 	bl	8000d70 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80009c0:	1d3b      	adds	r3, r7, #4
 80009c2:	220c      	movs	r2, #12
 80009c4:	4619      	mov	r1, r3
 80009c6:	4807      	ldr	r0, [pc, #28]	; (80009e4 <MX_TIM3_Init+0xc0>)
 80009c8:	f002 fa34 	bl	8002e34 <HAL_TIM_PWM_ConfigChannel>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80009d2:	f000 f9cd 	bl	8000d70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80009d6:	4803      	ldr	r0, [pc, #12]	; (80009e4 <MX_TIM3_Init+0xc0>)
 80009d8:	f000 fc50 	bl	800127c <HAL_TIM_MspPostInit>

}
 80009dc:	bf00      	nop
 80009de:	3728      	adds	r7, #40	; 0x28
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	20001278 	.word	0x20001278
 80009e8:	40000400 	.word	0x40000400

080009ec <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b08a      	sub	sp, #40	; 0x28
 80009f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009f2:	f107 0320 	add.w	r3, r7, #32
 80009f6:	2200      	movs	r2, #0
 80009f8:	601a      	str	r2, [r3, #0]
 80009fa:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009fc:	1d3b      	adds	r3, r7, #4
 80009fe:	2200      	movs	r2, #0
 8000a00:	601a      	str	r2, [r3, #0]
 8000a02:	605a      	str	r2, [r3, #4]
 8000a04:	609a      	str	r2, [r3, #8]
 8000a06:	60da      	str	r2, [r3, #12]
 8000a08:	611a      	str	r2, [r3, #16]
 8000a0a:	615a      	str	r2, [r3, #20]
 8000a0c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000a0e:	4b22      	ldr	r3, [pc, #136]	; (8000a98 <MX_TIM4_Init+0xac>)
 8000a10:	4a22      	ldr	r2, [pc, #136]	; (8000a9c <MX_TIM4_Init+0xb0>)
 8000a12:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000a14:	4b20      	ldr	r3, [pc, #128]	; (8000a98 <MX_TIM4_Init+0xac>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a1a:	4b1f      	ldr	r3, [pc, #124]	; (8000a98 <MX_TIM4_Init+0xac>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000a20:	4b1d      	ldr	r3, [pc, #116]	; (8000a98 <MX_TIM4_Init+0xac>)
 8000a22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a26:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a28:	4b1b      	ldr	r3, [pc, #108]	; (8000a98 <MX_TIM4_Init+0xac>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a2e:	4b1a      	ldr	r3, [pc, #104]	; (8000a98 <MX_TIM4_Init+0xac>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000a34:	4818      	ldr	r0, [pc, #96]	; (8000a98 <MX_TIM4_Init+0xac>)
 8000a36:	f002 f9ae 	bl	8002d96 <HAL_TIM_PWM_Init>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8000a40:	f000 f996 	bl	8000d70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a44:	2300      	movs	r3, #0
 8000a46:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000a4c:	f107 0320 	add.w	r3, r7, #32
 8000a50:	4619      	mov	r1, r3
 8000a52:	4811      	ldr	r0, [pc, #68]	; (8000a98 <MX_TIM4_Init+0xac>)
 8000a54:	f002 fcbc 	bl	80033d0 <HAL_TIMEx_MasterConfigSynchronization>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8000a5e:	f000 f987 	bl	8000d70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a62:	2360      	movs	r3, #96	; 0x60
 8000a64:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000a66:	2300      	movs	r3, #0
 8000a68:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a72:	1d3b      	adds	r3, r7, #4
 8000a74:	2200      	movs	r2, #0
 8000a76:	4619      	mov	r1, r3
 8000a78:	4807      	ldr	r0, [pc, #28]	; (8000a98 <MX_TIM4_Init+0xac>)
 8000a7a:	f002 f9db 	bl	8002e34 <HAL_TIM_PWM_ConfigChannel>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8000a84:	f000 f974 	bl	8000d70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000a88:	4803      	ldr	r0, [pc, #12]	; (8000a98 <MX_TIM4_Init+0xac>)
 8000a8a:	f000 fbf7 	bl	800127c <HAL_TIM_MspPostInit>

}
 8000a8e:	bf00      	nop
 8000a90:	3728      	adds	r7, #40	; 0x28
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	200012c0 	.word	0x200012c0
 8000a9c:	40000800 	.word	0x40000800

08000aa0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000aa4:	4b11      	ldr	r3, [pc, #68]	; (8000aec <MX_USART1_UART_Init+0x4c>)
 8000aa6:	4a12      	ldr	r2, [pc, #72]	; (8000af0 <MX_USART1_UART_Init+0x50>)
 8000aa8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000aaa:	4b10      	ldr	r3, [pc, #64]	; (8000aec <MX_USART1_UART_Init+0x4c>)
 8000aac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ab0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ab2:	4b0e      	ldr	r3, [pc, #56]	; (8000aec <MX_USART1_UART_Init+0x4c>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ab8:	4b0c      	ldr	r3, [pc, #48]	; (8000aec <MX_USART1_UART_Init+0x4c>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000abe:	4b0b      	ldr	r3, [pc, #44]	; (8000aec <MX_USART1_UART_Init+0x4c>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ac4:	4b09      	ldr	r3, [pc, #36]	; (8000aec <MX_USART1_UART_Init+0x4c>)
 8000ac6:	220c      	movs	r2, #12
 8000ac8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aca:	4b08      	ldr	r3, [pc, #32]	; (8000aec <MX_USART1_UART_Init+0x4c>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ad0:	4b06      	ldr	r3, [pc, #24]	; (8000aec <MX_USART1_UART_Init+0x4c>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ad6:	4805      	ldr	r0, [pc, #20]	; (8000aec <MX_USART1_UART_Init+0x4c>)
 8000ad8:	f002 fce8 	bl	80034ac <HAL_UART_Init>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000ae2:	f000 f945 	bl	8000d70 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ae6:	bf00      	nop
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	20001308 	.word	0x20001308
 8000af0:	40011000 	.word	0x40011000

08000af4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000af8:	4b11      	ldr	r3, [pc, #68]	; (8000b40 <MX_USART2_UART_Init+0x4c>)
 8000afa:	4a12      	ldr	r2, [pc, #72]	; (8000b44 <MX_USART2_UART_Init+0x50>)
 8000afc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000afe:	4b10      	ldr	r3, [pc, #64]	; (8000b40 <MX_USART2_UART_Init+0x4c>)
 8000b00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b04:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b06:	4b0e      	ldr	r3, [pc, #56]	; (8000b40 <MX_USART2_UART_Init+0x4c>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b0c:	4b0c      	ldr	r3, [pc, #48]	; (8000b40 <MX_USART2_UART_Init+0x4c>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b12:	4b0b      	ldr	r3, [pc, #44]	; (8000b40 <MX_USART2_UART_Init+0x4c>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b18:	4b09      	ldr	r3, [pc, #36]	; (8000b40 <MX_USART2_UART_Init+0x4c>)
 8000b1a:	220c      	movs	r2, #12
 8000b1c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b1e:	4b08      	ldr	r3, [pc, #32]	; (8000b40 <MX_USART2_UART_Init+0x4c>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b24:	4b06      	ldr	r3, [pc, #24]	; (8000b40 <MX_USART2_UART_Init+0x4c>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b2a:	4805      	ldr	r0, [pc, #20]	; (8000b40 <MX_USART2_UART_Init+0x4c>)
 8000b2c:	f002 fcbe 	bl	80034ac <HAL_UART_Init>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b36:	f000 f91b 	bl	8000d70 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b3a:	bf00      	nop
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	2000134c 	.word	0x2000134c
 8000b44:	40004400 	.word	0x40004400

08000b48 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000b4c:	4b11      	ldr	r3, [pc, #68]	; (8000b94 <MX_USART6_UART_Init+0x4c>)
 8000b4e:	4a12      	ldr	r2, [pc, #72]	; (8000b98 <MX_USART6_UART_Init+0x50>)
 8000b50:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000b52:	4b10      	ldr	r3, [pc, #64]	; (8000b94 <MX_USART6_UART_Init+0x4c>)
 8000b54:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b58:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000b5a:	4b0e      	ldr	r3, [pc, #56]	; (8000b94 <MX_USART6_UART_Init+0x4c>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000b60:	4b0c      	ldr	r3, [pc, #48]	; (8000b94 <MX_USART6_UART_Init+0x4c>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000b66:	4b0b      	ldr	r3, [pc, #44]	; (8000b94 <MX_USART6_UART_Init+0x4c>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000b6c:	4b09      	ldr	r3, [pc, #36]	; (8000b94 <MX_USART6_UART_Init+0x4c>)
 8000b6e:	220c      	movs	r2, #12
 8000b70:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b72:	4b08      	ldr	r3, [pc, #32]	; (8000b94 <MX_USART6_UART_Init+0x4c>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b78:	4b06      	ldr	r3, [pc, #24]	; (8000b94 <MX_USART6_UART_Init+0x4c>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000b7e:	4805      	ldr	r0, [pc, #20]	; (8000b94 <MX_USART6_UART_Init+0x4c>)
 8000b80:	f002 fc94 	bl	80034ac <HAL_UART_Init>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000b8a:	f000 f8f1 	bl	8000d70 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000b8e:	bf00      	nop
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	20001390 	.word	0x20001390
 8000b98:	40011400 	.word	0x40011400

08000b9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b08a      	sub	sp, #40	; 0x28
 8000ba0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba2:	f107 0314 	add.w	r3, r7, #20
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	601a      	str	r2, [r3, #0]
 8000baa:	605a      	str	r2, [r3, #4]
 8000bac:	609a      	str	r2, [r3, #8]
 8000bae:	60da      	str	r2, [r3, #12]
 8000bb0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	613b      	str	r3, [r7, #16]
 8000bb6:	4b65      	ldr	r3, [pc, #404]	; (8000d4c <MX_GPIO_Init+0x1b0>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bba:	4a64      	ldr	r2, [pc, #400]	; (8000d4c <MX_GPIO_Init+0x1b0>)
 8000bbc:	f043 0304 	orr.w	r3, r3, #4
 8000bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc2:	4b62      	ldr	r3, [pc, #392]	; (8000d4c <MX_GPIO_Init+0x1b0>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	f003 0304 	and.w	r3, r3, #4
 8000bca:	613b      	str	r3, [r7, #16]
 8000bcc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bce:	2300      	movs	r3, #0
 8000bd0:	60fb      	str	r3, [r7, #12]
 8000bd2:	4b5e      	ldr	r3, [pc, #376]	; (8000d4c <MX_GPIO_Init+0x1b0>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	4a5d      	ldr	r2, [pc, #372]	; (8000d4c <MX_GPIO_Init+0x1b0>)
 8000bd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bde:	4b5b      	ldr	r3, [pc, #364]	; (8000d4c <MX_GPIO_Init+0x1b0>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000be6:	60fb      	str	r3, [r7, #12]
 8000be8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bea:	2300      	movs	r3, #0
 8000bec:	60bb      	str	r3, [r7, #8]
 8000bee:	4b57      	ldr	r3, [pc, #348]	; (8000d4c <MX_GPIO_Init+0x1b0>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf2:	4a56      	ldr	r2, [pc, #344]	; (8000d4c <MX_GPIO_Init+0x1b0>)
 8000bf4:	f043 0301 	orr.w	r3, r3, #1
 8000bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bfa:	4b54      	ldr	r3, [pc, #336]	; (8000d4c <MX_GPIO_Init+0x1b0>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfe:	f003 0301 	and.w	r3, r3, #1
 8000c02:	60bb      	str	r3, [r7, #8]
 8000c04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c06:	2300      	movs	r3, #0
 8000c08:	607b      	str	r3, [r7, #4]
 8000c0a:	4b50      	ldr	r3, [pc, #320]	; (8000d4c <MX_GPIO_Init+0x1b0>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	4a4f      	ldr	r2, [pc, #316]	; (8000d4c <MX_GPIO_Init+0x1b0>)
 8000c10:	f043 0302 	orr.w	r3, r3, #2
 8000c14:	6313      	str	r3, [r2, #48]	; 0x30
 8000c16:	4b4d      	ldr	r3, [pc, #308]	; (8000d4c <MX_GPIO_Init+0x1b0>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1a:	f003 0302 	and.w	r3, r3, #2
 8000c1e:	607b      	str	r3, [r7, #4]
 8000c20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c22:	2300      	movs	r3, #0
 8000c24:	603b      	str	r3, [r7, #0]
 8000c26:	4b49      	ldr	r3, [pc, #292]	; (8000d4c <MX_GPIO_Init+0x1b0>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2a:	4a48      	ldr	r2, [pc, #288]	; (8000d4c <MX_GPIO_Init+0x1b0>)
 8000c2c:	f043 0308 	orr.w	r3, r3, #8
 8000c30:	6313      	str	r3, [r2, #48]	; 0x30
 8000c32:	4b46      	ldr	r3, [pc, #280]	; (8000d4c <MX_GPIO_Init+0x1b0>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c36:	f003 0308 	and.w	r3, r3, #8
 8000c3a:	603b      	str	r3, [r7, #0]
 8000c3c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, S0_Pin|S1_Pin|S2_Pin|GPIO_PIN_1
 8000c3e:	2200      	movs	r2, #0
 8000c40:	f24e 11a2 	movw	r1, #57762	; 0xe1a2
 8000c44:	4842      	ldr	r0, [pc, #264]	; (8000d50 <MX_GPIO_Init+0x1b4>)
 8000c46:	f001 fa03 	bl	8002050 <HAL_GPIO_WritePin>
                          |RESET_Pin|TXEN_Pin|SET_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DIO2_Pin|DIO1_Pin|DS_Pin|SQ_Pin
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	f24c 2130 	movw	r1, #49712	; 0xc230
 8000c50:	4840      	ldr	r0, [pc, #256]	; (8000d54 <MX_GPIO_Init+0x1b8>)
 8000c52:	f001 f9fd 	bl	8002050 <HAL_GPIO_WritePin>
                          |LED_RESET_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8000c56:	2200      	movs	r2, #0
 8000c58:	2104      	movs	r1, #4
 8000c5a:	483f      	ldr	r0, [pc, #252]	; (8000d58 <MX_GPIO_Init+0x1bc>)
 8000c5c:	f001 f9f8 	bl	8002050 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : S0_Pin S1_Pin S2_Pin PC1
                           RESET_Pin TXEN_Pin SET_Pin */
  GPIO_InitStruct.Pin = S0_Pin|S1_Pin|S2_Pin|GPIO_PIN_1
 8000c60:	f24e 13a2 	movw	r3, #57762	; 0xe1a2
 8000c64:	617b      	str	r3, [r7, #20]
                          |RESET_Pin|TXEN_Pin|SET_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c66:	2301      	movs	r3, #1
 8000c68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c72:	f107 0314 	add.w	r3, r7, #20
 8000c76:	4619      	mov	r1, r3
 8000c78:	4835      	ldr	r0, [pc, #212]	; (8000d50 <MX_GPIO_Init+0x1b4>)
 8000c7a:	f001 f865 	bl	8001d48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c82:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c8c:	f107 0314 	add.w	r3, r7, #20
 8000c90:	4619      	mov	r1, r3
 8000c92:	482f      	ldr	r0, [pc, #188]	; (8000d50 <MX_GPIO_Init+0x1b4>)
 8000c94:	f001 f858 	bl	8001d48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c98:	2301      	movs	r3, #1
 8000c9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9c:	2302      	movs	r3, #2
 8000c9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000ca8:	2301      	movs	r3, #1
 8000caa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cac:	f107 0314 	add.w	r3, r7, #20
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	482a      	ldr	r0, [pc, #168]	; (8000d5c <MX_GPIO_Init+0x1c0>)
 8000cb4:	f001 f848 	bl	8001d48 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUSY_Pin RXEN_Pin */
  GPIO_InitStruct.Pin = BUSY_Pin|RXEN_Pin;
 8000cb8:	2350      	movs	r3, #80	; 0x50
 8000cba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cbc:	2303      	movs	r3, #3
 8000cbe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cc4:	f107 0314 	add.w	r3, r7, #20
 8000cc8:	4619      	mov	r1, r3
 8000cca:	4821      	ldr	r0, [pc, #132]	; (8000d50 <MX_GPIO_Init+0x1b4>)
 8000ccc:	f001 f83c 	bl	8001d48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000cd0:	2304      	movs	r3, #4
 8000cd2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cd4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000cd8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cde:	f107 0314 	add.w	r3, r7, #20
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	481b      	ldr	r0, [pc, #108]	; (8000d54 <MX_GPIO_Init+0x1b8>)
 8000ce6:	f001 f82f 	bl	8001d48 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIO2_Pin DIO1_Pin DS_Pin SQ_Pin
                           LED_RESET_Pin */
  GPIO_InitStruct.Pin = DIO2_Pin|DIO1_Pin|DS_Pin|SQ_Pin
 8000cea:	f24c 2330 	movw	r3, #49712	; 0xc230
 8000cee:	617b      	str	r3, [r7, #20]
                          |LED_RESET_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cfc:	f107 0314 	add.w	r3, r7, #20
 8000d00:	4619      	mov	r1, r3
 8000d02:	4814      	ldr	r0, [pc, #80]	; (8000d54 <MX_GPIO_Init+0x1b8>)
 8000d04:	f001 f820 	bl	8001d48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000d08:	2304      	movs	r3, #4
 8000d0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d10:	2300      	movs	r3, #0
 8000d12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d14:	2300      	movs	r3, #0
 8000d16:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d18:	f107 0314 	add.w	r3, r7, #20
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	480e      	ldr	r0, [pc, #56]	; (8000d58 <MX_GPIO_Init+0x1bc>)
 8000d20:	f001 f812 	bl	8001d48 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000d24:	2200      	movs	r2, #0
 8000d26:	2105      	movs	r1, #5
 8000d28:	2006      	movs	r0, #6
 8000d2a:	f000 ffd6 	bl	8001cda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000d2e:	2006      	movs	r0, #6
 8000d30:	f000 ffef 	bl	8001d12 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8000d34:	2200      	movs	r2, #0
 8000d36:	2105      	movs	r1, #5
 8000d38:	2008      	movs	r0, #8
 8000d3a:	f000 ffce 	bl	8001cda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000d3e:	2008      	movs	r0, #8
 8000d40:	f000 ffe7 	bl	8001d12 <HAL_NVIC_EnableIRQ>

}
 8000d44:	bf00      	nop
 8000d46:	3728      	adds	r7, #40	; 0x28
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	40023800 	.word	0x40023800
 8000d50:	40020800 	.word	0x40020800
 8000d54:	40020400 	.word	0x40020400
 8000d58:	40020c00 	.word	0x40020c00
 8000d5c:	40020000 	.word	0x40020000

08000d60 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000d68:	2001      	movs	r0, #1
 8000d6a:	f002 ff71 	bl	8003c50 <osDelay>
 8000d6e:	e7fb      	b.n	8000d68 <StartDefaultTask+0x8>

08000d70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d74:	b672      	cpsid	i
}
 8000d76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d78:	e7fe      	b.n	8000d78 <Error_Handler+0x8>
	...

08000d7c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d82:	2300      	movs	r3, #0
 8000d84:	607b      	str	r3, [r7, #4]
 8000d86:	4b12      	ldr	r3, [pc, #72]	; (8000dd0 <HAL_MspInit+0x54>)
 8000d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d8a:	4a11      	ldr	r2, [pc, #68]	; (8000dd0 <HAL_MspInit+0x54>)
 8000d8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d90:	6453      	str	r3, [r2, #68]	; 0x44
 8000d92:	4b0f      	ldr	r3, [pc, #60]	; (8000dd0 <HAL_MspInit+0x54>)
 8000d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d9a:	607b      	str	r3, [r7, #4]
 8000d9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d9e:	2300      	movs	r3, #0
 8000da0:	603b      	str	r3, [r7, #0]
 8000da2:	4b0b      	ldr	r3, [pc, #44]	; (8000dd0 <HAL_MspInit+0x54>)
 8000da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da6:	4a0a      	ldr	r2, [pc, #40]	; (8000dd0 <HAL_MspInit+0x54>)
 8000da8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dac:	6413      	str	r3, [r2, #64]	; 0x40
 8000dae:	4b08      	ldr	r3, [pc, #32]	; (8000dd0 <HAL_MspInit+0x54>)
 8000db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000db6:	603b      	str	r3, [r7, #0]
 8000db8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000dba:	2200      	movs	r2, #0
 8000dbc:	210f      	movs	r1, #15
 8000dbe:	f06f 0001 	mvn.w	r0, #1
 8000dc2:	f000 ff8a 	bl	8001cda <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dc6:	bf00      	nop
 8000dc8:	3708      	adds	r7, #8
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	40023800 	.word	0x40023800

08000dd4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b08a      	sub	sp, #40	; 0x28
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ddc:	f107 0314 	add.w	r3, r7, #20
 8000de0:	2200      	movs	r2, #0
 8000de2:	601a      	str	r2, [r3, #0]
 8000de4:	605a      	str	r2, [r3, #4]
 8000de6:	609a      	str	r2, [r3, #8]
 8000de8:	60da      	str	r2, [r3, #12]
 8000dea:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a17      	ldr	r2, [pc, #92]	; (8000e50 <HAL_ADC_MspInit+0x7c>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d127      	bne.n	8000e46 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000df6:	2300      	movs	r3, #0
 8000df8:	613b      	str	r3, [r7, #16]
 8000dfa:	4b16      	ldr	r3, [pc, #88]	; (8000e54 <HAL_ADC_MspInit+0x80>)
 8000dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dfe:	4a15      	ldr	r2, [pc, #84]	; (8000e54 <HAL_ADC_MspInit+0x80>)
 8000e00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e04:	6453      	str	r3, [r2, #68]	; 0x44
 8000e06:	4b13      	ldr	r3, [pc, #76]	; (8000e54 <HAL_ADC_MspInit+0x80>)
 8000e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e0e:	613b      	str	r3, [r7, #16]
 8000e10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e12:	2300      	movs	r3, #0
 8000e14:	60fb      	str	r3, [r7, #12]
 8000e16:	4b0f      	ldr	r3, [pc, #60]	; (8000e54 <HAL_ADC_MspInit+0x80>)
 8000e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1a:	4a0e      	ldr	r2, [pc, #56]	; (8000e54 <HAL_ADC_MspInit+0x80>)
 8000e1c:	f043 0301 	orr.w	r3, r3, #1
 8000e20:	6313      	str	r3, [r2, #48]	; 0x30
 8000e22:	4b0c      	ldr	r3, [pc, #48]	; (8000e54 <HAL_ADC_MspInit+0x80>)
 8000e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e26:	f003 0301 	and.w	r3, r3, #1
 8000e2a:	60fb      	str	r3, [r7, #12]
 8000e2c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000e2e:	2302      	movs	r3, #2
 8000e30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e32:	2303      	movs	r3, #3
 8000e34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e36:	2300      	movs	r3, #0
 8000e38:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e3a:	f107 0314 	add.w	r3, r7, #20
 8000e3e:	4619      	mov	r1, r3
 8000e40:	4805      	ldr	r0, [pc, #20]	; (8000e58 <HAL_ADC_MspInit+0x84>)
 8000e42:	f000 ff81 	bl	8001d48 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e46:	bf00      	nop
 8000e48:	3728      	adds	r7, #40	; 0x28
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	40012000 	.word	0x40012000
 8000e54:	40023800 	.word	0x40023800
 8000e58:	40020000 	.word	0x40020000

08000e5c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b08e      	sub	sp, #56	; 0x38
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e68:	2200      	movs	r2, #0
 8000e6a:	601a      	str	r2, [r3, #0]
 8000e6c:	605a      	str	r2, [r3, #4]
 8000e6e:	609a      	str	r2, [r3, #8]
 8000e70:	60da      	str	r2, [r3, #12]
 8000e72:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a64      	ldr	r2, [pc, #400]	; (800100c <HAL_I2C_MspInit+0x1b0>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d12d      	bne.n	8000eda <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e7e:	2300      	movs	r3, #0
 8000e80:	623b      	str	r3, [r7, #32]
 8000e82:	4b63      	ldr	r3, [pc, #396]	; (8001010 <HAL_I2C_MspInit+0x1b4>)
 8000e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e86:	4a62      	ldr	r2, [pc, #392]	; (8001010 <HAL_I2C_MspInit+0x1b4>)
 8000e88:	f043 0302 	orr.w	r3, r3, #2
 8000e8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e8e:	4b60      	ldr	r3, [pc, #384]	; (8001010 <HAL_I2C_MspInit+0x1b4>)
 8000e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e92:	f003 0302 	and.w	r3, r3, #2
 8000e96:	623b      	str	r3, [r7, #32]
 8000e98:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000e9a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000e9e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ea0:	2312      	movs	r3, #18
 8000ea2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ea8:	2303      	movs	r3, #3
 8000eaa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000eac:	2304      	movs	r3, #4
 8000eae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	4857      	ldr	r0, [pc, #348]	; (8001014 <HAL_I2C_MspInit+0x1b8>)
 8000eb8:	f000 ff46 	bl	8001d48 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	61fb      	str	r3, [r7, #28]
 8000ec0:	4b53      	ldr	r3, [pc, #332]	; (8001010 <HAL_I2C_MspInit+0x1b4>)
 8000ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec4:	4a52      	ldr	r2, [pc, #328]	; (8001010 <HAL_I2C_MspInit+0x1b4>)
 8000ec6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000eca:	6413      	str	r3, [r2, #64]	; 0x40
 8000ecc:	4b50      	ldr	r3, [pc, #320]	; (8001010 <HAL_I2C_MspInit+0x1b4>)
 8000ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ed4:	61fb      	str	r3, [r7, #28]
 8000ed6:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8000ed8:	e093      	b.n	8001002 <HAL_I2C_MspInit+0x1a6>
  else if(hi2c->Instance==I2C2)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4a4e      	ldr	r2, [pc, #312]	; (8001018 <HAL_I2C_MspInit+0x1bc>)
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d13d      	bne.n	8000f60 <HAL_I2C_MspInit+0x104>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	61bb      	str	r3, [r7, #24]
 8000ee8:	4b49      	ldr	r3, [pc, #292]	; (8001010 <HAL_I2C_MspInit+0x1b4>)
 8000eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eec:	4a48      	ldr	r2, [pc, #288]	; (8001010 <HAL_I2C_MspInit+0x1b4>)
 8000eee:	f043 0302 	orr.w	r3, r3, #2
 8000ef2:	6313      	str	r3, [r2, #48]	; 0x30
 8000ef4:	4b46      	ldr	r3, [pc, #280]	; (8001010 <HAL_I2C_MspInit+0x1b4>)
 8000ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef8:	f003 0302 	and.w	r3, r3, #2
 8000efc:	61bb      	str	r3, [r7, #24]
 8000efe:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000f00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f04:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f06:	2312      	movs	r3, #18
 8000f08:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f0e:	2303      	movs	r3, #3
 8000f10:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000f12:	2304      	movs	r3, #4
 8000f14:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	483d      	ldr	r0, [pc, #244]	; (8001014 <HAL_I2C_MspInit+0x1b8>)
 8000f1e:	f000 ff13 	bl	8001d48 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000f22:	2308      	movs	r3, #8
 8000f24:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f26:	2312      	movs	r3, #18
 8000f28:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f2e:	2303      	movs	r3, #3
 8000f30:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8000f32:	2309      	movs	r3, #9
 8000f34:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	4835      	ldr	r0, [pc, #212]	; (8001014 <HAL_I2C_MspInit+0x1b8>)
 8000f3e:	f000 ff03 	bl	8001d48 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000f42:	2300      	movs	r3, #0
 8000f44:	617b      	str	r3, [r7, #20]
 8000f46:	4b32      	ldr	r3, [pc, #200]	; (8001010 <HAL_I2C_MspInit+0x1b4>)
 8000f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4a:	4a31      	ldr	r2, [pc, #196]	; (8001010 <HAL_I2C_MspInit+0x1b4>)
 8000f4c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f50:	6413      	str	r3, [r2, #64]	; 0x40
 8000f52:	4b2f      	ldr	r3, [pc, #188]	; (8001010 <HAL_I2C_MspInit+0x1b4>)
 8000f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f5a:	617b      	str	r3, [r7, #20]
 8000f5c:	697b      	ldr	r3, [r7, #20]
}
 8000f5e:	e050      	b.n	8001002 <HAL_I2C_MspInit+0x1a6>
  else if(hi2c->Instance==I2C3)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a2d      	ldr	r2, [pc, #180]	; (800101c <HAL_I2C_MspInit+0x1c0>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d14b      	bne.n	8001002 <HAL_I2C_MspInit+0x1a6>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	613b      	str	r3, [r7, #16]
 8000f6e:	4b28      	ldr	r3, [pc, #160]	; (8001010 <HAL_I2C_MspInit+0x1b4>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f72:	4a27      	ldr	r2, [pc, #156]	; (8001010 <HAL_I2C_MspInit+0x1b4>)
 8000f74:	f043 0304 	orr.w	r3, r3, #4
 8000f78:	6313      	str	r3, [r2, #48]	; 0x30
 8000f7a:	4b25      	ldr	r3, [pc, #148]	; (8001010 <HAL_I2C_MspInit+0x1b4>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7e:	f003 0304 	and.w	r3, r3, #4
 8000f82:	613b      	str	r3, [r7, #16]
 8000f84:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f86:	2300      	movs	r3, #0
 8000f88:	60fb      	str	r3, [r7, #12]
 8000f8a:	4b21      	ldr	r3, [pc, #132]	; (8001010 <HAL_I2C_MspInit+0x1b4>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8e:	4a20      	ldr	r2, [pc, #128]	; (8001010 <HAL_I2C_MspInit+0x1b4>)
 8000f90:	f043 0301 	orr.w	r3, r3, #1
 8000f94:	6313      	str	r3, [r2, #48]	; 0x30
 8000f96:	4b1e      	ldr	r3, [pc, #120]	; (8001010 <HAL_I2C_MspInit+0x1b4>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9a:	f003 0301 	and.w	r3, r3, #1
 8000f9e:	60fb      	str	r3, [r7, #12]
 8000fa0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000fa2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fa6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fa8:	2312      	movs	r3, #18
 8000faa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fac:	2300      	movs	r3, #0
 8000fae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fb0:	2303      	movs	r3, #3
 8000fb2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000fb4:	2304      	movs	r3, #4
 8000fb6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	4818      	ldr	r0, [pc, #96]	; (8001020 <HAL_I2C_MspInit+0x1c4>)
 8000fc0:	f000 fec2 	bl	8001d48 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000fc4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fc8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fca:	2312      	movs	r3, #18
 8000fcc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fd2:	2303      	movs	r3, #3
 8000fd4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000fd6:	2304      	movs	r3, #4
 8000fd8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fde:	4619      	mov	r1, r3
 8000fe0:	4810      	ldr	r0, [pc, #64]	; (8001024 <HAL_I2C_MspInit+0x1c8>)
 8000fe2:	f000 feb1 	bl	8001d48 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	60bb      	str	r3, [r7, #8]
 8000fea:	4b09      	ldr	r3, [pc, #36]	; (8001010 <HAL_I2C_MspInit+0x1b4>)
 8000fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fee:	4a08      	ldr	r2, [pc, #32]	; (8001010 <HAL_I2C_MspInit+0x1b4>)
 8000ff0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000ff4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ff6:	4b06      	ldr	r3, [pc, #24]	; (8001010 <HAL_I2C_MspInit+0x1b4>)
 8000ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000ffe:	60bb      	str	r3, [r7, #8]
 8001000:	68bb      	ldr	r3, [r7, #8]
}
 8001002:	bf00      	nop
 8001004:	3738      	adds	r7, #56	; 0x38
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	40005400 	.word	0x40005400
 8001010:	40023800 	.word	0x40023800
 8001014:	40020400 	.word	0x40020400
 8001018:	40005800 	.word	0x40005800
 800101c:	40005c00 	.word	0x40005c00
 8001020:	40020800 	.word	0x40020800
 8001024:	40020000 	.word	0x40020000

08001028 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b090      	sub	sp, #64	; 0x40
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001030:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
 8001038:	605a      	str	r2, [r3, #4]
 800103a:	609a      	str	r2, [r3, #8]
 800103c:	60da      	str	r2, [r3, #12]
 800103e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a6a      	ldr	r2, [pc, #424]	; (80011f0 <HAL_SPI_MspInit+0x1c8>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d12c      	bne.n	80010a4 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800104a:	2300      	movs	r3, #0
 800104c:	62bb      	str	r3, [r7, #40]	; 0x28
 800104e:	4b69      	ldr	r3, [pc, #420]	; (80011f4 <HAL_SPI_MspInit+0x1cc>)
 8001050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001052:	4a68      	ldr	r2, [pc, #416]	; (80011f4 <HAL_SPI_MspInit+0x1cc>)
 8001054:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001058:	6453      	str	r3, [r2, #68]	; 0x44
 800105a:	4b66      	ldr	r3, [pc, #408]	; (80011f4 <HAL_SPI_MspInit+0x1cc>)
 800105c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800105e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001062:	62bb      	str	r3, [r7, #40]	; 0x28
 8001064:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001066:	2300      	movs	r3, #0
 8001068:	627b      	str	r3, [r7, #36]	; 0x24
 800106a:	4b62      	ldr	r3, [pc, #392]	; (80011f4 <HAL_SPI_MspInit+0x1cc>)
 800106c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106e:	4a61      	ldr	r2, [pc, #388]	; (80011f4 <HAL_SPI_MspInit+0x1cc>)
 8001070:	f043 0301 	orr.w	r3, r3, #1
 8001074:	6313      	str	r3, [r2, #48]	; 0x30
 8001076:	4b5f      	ldr	r3, [pc, #380]	; (80011f4 <HAL_SPI_MspInit+0x1cc>)
 8001078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107a:	f003 0301 	and.w	r3, r3, #1
 800107e:	627b      	str	r3, [r7, #36]	; 0x24
 8001080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001082:	23f0      	movs	r3, #240	; 0xf0
 8001084:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001086:	2302      	movs	r3, #2
 8001088:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108a:	2300      	movs	r3, #0
 800108c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800108e:	2303      	movs	r3, #3
 8001090:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001092:	2305      	movs	r3, #5
 8001094:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001096:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800109a:	4619      	mov	r1, r3
 800109c:	4856      	ldr	r0, [pc, #344]	; (80011f8 <HAL_SPI_MspInit+0x1d0>)
 800109e:	f000 fe53 	bl	8001d48 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80010a2:	e0a1      	b.n	80011e8 <HAL_SPI_MspInit+0x1c0>
  else if(hspi->Instance==SPI2)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a54      	ldr	r2, [pc, #336]	; (80011fc <HAL_SPI_MspInit+0x1d4>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d14b      	bne.n	8001146 <HAL_SPI_MspInit+0x11e>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80010ae:	2300      	movs	r3, #0
 80010b0:	623b      	str	r3, [r7, #32]
 80010b2:	4b50      	ldr	r3, [pc, #320]	; (80011f4 <HAL_SPI_MspInit+0x1cc>)
 80010b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b6:	4a4f      	ldr	r2, [pc, #316]	; (80011f4 <HAL_SPI_MspInit+0x1cc>)
 80010b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010bc:	6413      	str	r3, [r2, #64]	; 0x40
 80010be:	4b4d      	ldr	r3, [pc, #308]	; (80011f4 <HAL_SPI_MspInit+0x1cc>)
 80010c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010c6:	623b      	str	r3, [r7, #32]
 80010c8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010ca:	2300      	movs	r3, #0
 80010cc:	61fb      	str	r3, [r7, #28]
 80010ce:	4b49      	ldr	r3, [pc, #292]	; (80011f4 <HAL_SPI_MspInit+0x1cc>)
 80010d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d2:	4a48      	ldr	r2, [pc, #288]	; (80011f4 <HAL_SPI_MspInit+0x1cc>)
 80010d4:	f043 0304 	orr.w	r3, r3, #4
 80010d8:	6313      	str	r3, [r2, #48]	; 0x30
 80010da:	4b46      	ldr	r3, [pc, #280]	; (80011f4 <HAL_SPI_MspInit+0x1cc>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010de:	f003 0304 	and.w	r3, r3, #4
 80010e2:	61fb      	str	r3, [r7, #28]
 80010e4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010e6:	2300      	movs	r3, #0
 80010e8:	61bb      	str	r3, [r7, #24]
 80010ea:	4b42      	ldr	r3, [pc, #264]	; (80011f4 <HAL_SPI_MspInit+0x1cc>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ee:	4a41      	ldr	r2, [pc, #260]	; (80011f4 <HAL_SPI_MspInit+0x1cc>)
 80010f0:	f043 0302 	orr.w	r3, r3, #2
 80010f4:	6313      	str	r3, [r2, #48]	; 0x30
 80010f6:	4b3f      	ldr	r3, [pc, #252]	; (80011f4 <HAL_SPI_MspInit+0x1cc>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fa:	f003 0302 	and.w	r3, r3, #2
 80010fe:	61bb      	str	r3, [r7, #24]
 8001100:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001102:	230c      	movs	r3, #12
 8001104:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001106:	2302      	movs	r3, #2
 8001108:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110a:	2300      	movs	r3, #0
 800110c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800110e:	2303      	movs	r3, #3
 8001110:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001112:	2305      	movs	r3, #5
 8001114:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001116:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800111a:	4619      	mov	r1, r3
 800111c:	4838      	ldr	r0, [pc, #224]	; (8001200 <HAL_SPI_MspInit+0x1d8>)
 800111e:	f000 fe13 	bl	8001d48 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001122:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001126:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001128:	2302      	movs	r3, #2
 800112a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112c:	2300      	movs	r3, #0
 800112e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001130:	2303      	movs	r3, #3
 8001132:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001134:	2305      	movs	r3, #5
 8001136:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001138:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800113c:	4619      	mov	r1, r3
 800113e:	4831      	ldr	r0, [pc, #196]	; (8001204 <HAL_SPI_MspInit+0x1dc>)
 8001140:	f000 fe02 	bl	8001d48 <HAL_GPIO_Init>
}
 8001144:	e050      	b.n	80011e8 <HAL_SPI_MspInit+0x1c0>
  else if(hspi->Instance==SPI3)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4a2f      	ldr	r2, [pc, #188]	; (8001208 <HAL_SPI_MspInit+0x1e0>)
 800114c:	4293      	cmp	r3, r2
 800114e:	d14b      	bne.n	80011e8 <HAL_SPI_MspInit+0x1c0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001150:	2300      	movs	r3, #0
 8001152:	617b      	str	r3, [r7, #20]
 8001154:	4b27      	ldr	r3, [pc, #156]	; (80011f4 <HAL_SPI_MspInit+0x1cc>)
 8001156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001158:	4a26      	ldr	r2, [pc, #152]	; (80011f4 <HAL_SPI_MspInit+0x1cc>)
 800115a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800115e:	6413      	str	r3, [r2, #64]	; 0x40
 8001160:	4b24      	ldr	r3, [pc, #144]	; (80011f4 <HAL_SPI_MspInit+0x1cc>)
 8001162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001164:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001168:	617b      	str	r3, [r7, #20]
 800116a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800116c:	2300      	movs	r3, #0
 800116e:	613b      	str	r3, [r7, #16]
 8001170:	4b20      	ldr	r3, [pc, #128]	; (80011f4 <HAL_SPI_MspInit+0x1cc>)
 8001172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001174:	4a1f      	ldr	r2, [pc, #124]	; (80011f4 <HAL_SPI_MspInit+0x1cc>)
 8001176:	f043 0301 	orr.w	r3, r3, #1
 800117a:	6313      	str	r3, [r2, #48]	; 0x30
 800117c:	4b1d      	ldr	r3, [pc, #116]	; (80011f4 <HAL_SPI_MspInit+0x1cc>)
 800117e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001180:	f003 0301 	and.w	r3, r3, #1
 8001184:	613b      	str	r3, [r7, #16]
 8001186:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001188:	2300      	movs	r3, #0
 800118a:	60fb      	str	r3, [r7, #12]
 800118c:	4b19      	ldr	r3, [pc, #100]	; (80011f4 <HAL_SPI_MspInit+0x1cc>)
 800118e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001190:	4a18      	ldr	r2, [pc, #96]	; (80011f4 <HAL_SPI_MspInit+0x1cc>)
 8001192:	f043 0304 	orr.w	r3, r3, #4
 8001196:	6313      	str	r3, [r2, #48]	; 0x30
 8001198:	4b16      	ldr	r3, [pc, #88]	; (80011f4 <HAL_SPI_MspInit+0x1cc>)
 800119a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119c:	f003 0304 	and.w	r3, r3, #4
 80011a0:	60fb      	str	r3, [r7, #12]
 80011a2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80011a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80011a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011aa:	2302      	movs	r3, #2
 80011ac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ae:	2300      	movs	r3, #0
 80011b0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011b2:	2303      	movs	r3, #3
 80011b4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80011b6:	2306      	movs	r3, #6
 80011b8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011be:	4619      	mov	r1, r3
 80011c0:	480d      	ldr	r0, [pc, #52]	; (80011f8 <HAL_SPI_MspInit+0x1d0>)
 80011c2:	f000 fdc1 	bl	8001d48 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80011c6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80011ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011cc:	2302      	movs	r3, #2
 80011ce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d0:	2300      	movs	r3, #0
 80011d2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011d4:	2303      	movs	r3, #3
 80011d6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80011d8:	2306      	movs	r3, #6
 80011da:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011e0:	4619      	mov	r1, r3
 80011e2:	4807      	ldr	r0, [pc, #28]	; (8001200 <HAL_SPI_MspInit+0x1d8>)
 80011e4:	f000 fdb0 	bl	8001d48 <HAL_GPIO_Init>
}
 80011e8:	bf00      	nop
 80011ea:	3740      	adds	r7, #64	; 0x40
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	40013000 	.word	0x40013000
 80011f4:	40023800 	.word	0x40023800
 80011f8:	40020000 	.word	0x40020000
 80011fc:	40003800 	.word	0x40003800
 8001200:	40020800 	.word	0x40020800
 8001204:	40020400 	.word	0x40020400
 8001208:	40003c00 	.word	0x40003c00

0800120c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800120c:	b480      	push	{r7}
 800120e:	b085      	sub	sp, #20
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a15      	ldr	r2, [pc, #84]	; (8001270 <HAL_TIM_PWM_MspInit+0x64>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d10e      	bne.n	800123c <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800121e:	2300      	movs	r3, #0
 8001220:	60fb      	str	r3, [r7, #12]
 8001222:	4b14      	ldr	r3, [pc, #80]	; (8001274 <HAL_TIM_PWM_MspInit+0x68>)
 8001224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001226:	4a13      	ldr	r2, [pc, #76]	; (8001274 <HAL_TIM_PWM_MspInit+0x68>)
 8001228:	f043 0302 	orr.w	r3, r3, #2
 800122c:	6413      	str	r3, [r2, #64]	; 0x40
 800122e:	4b11      	ldr	r3, [pc, #68]	; (8001274 <HAL_TIM_PWM_MspInit+0x68>)
 8001230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001232:	f003 0302 	and.w	r3, r3, #2
 8001236:	60fb      	str	r3, [r7, #12]
 8001238:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800123a:	e012      	b.n	8001262 <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM4)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a0d      	ldr	r2, [pc, #52]	; (8001278 <HAL_TIM_PWM_MspInit+0x6c>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d10d      	bne.n	8001262 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001246:	2300      	movs	r3, #0
 8001248:	60bb      	str	r3, [r7, #8]
 800124a:	4b0a      	ldr	r3, [pc, #40]	; (8001274 <HAL_TIM_PWM_MspInit+0x68>)
 800124c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124e:	4a09      	ldr	r2, [pc, #36]	; (8001274 <HAL_TIM_PWM_MspInit+0x68>)
 8001250:	f043 0304 	orr.w	r3, r3, #4
 8001254:	6413      	str	r3, [r2, #64]	; 0x40
 8001256:	4b07      	ldr	r3, [pc, #28]	; (8001274 <HAL_TIM_PWM_MspInit+0x68>)
 8001258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800125a:	f003 0304 	and.w	r3, r3, #4
 800125e:	60bb      	str	r3, [r7, #8]
 8001260:	68bb      	ldr	r3, [r7, #8]
}
 8001262:	bf00      	nop
 8001264:	3714      	adds	r7, #20
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	40000400 	.word	0x40000400
 8001274:	40023800 	.word	0x40023800
 8001278:	40000800 	.word	0x40000800

0800127c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b08a      	sub	sp, #40	; 0x28
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001284:	f107 0314 	add.w	r3, r7, #20
 8001288:	2200      	movs	r2, #0
 800128a:	601a      	str	r2, [r3, #0]
 800128c:	605a      	str	r2, [r3, #4]
 800128e:	609a      	str	r2, [r3, #8]
 8001290:	60da      	str	r2, [r3, #12]
 8001292:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a24      	ldr	r2, [pc, #144]	; (800132c <HAL_TIM_MspPostInit+0xb0>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d11e      	bne.n	80012dc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800129e:	2300      	movs	r3, #0
 80012a0:	613b      	str	r3, [r7, #16]
 80012a2:	4b23      	ldr	r3, [pc, #140]	; (8001330 <HAL_TIM_MspPostInit+0xb4>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a6:	4a22      	ldr	r2, [pc, #136]	; (8001330 <HAL_TIM_MspPostInit+0xb4>)
 80012a8:	f043 0302 	orr.w	r3, r3, #2
 80012ac:	6313      	str	r3, [r2, #48]	; 0x30
 80012ae:	4b20      	ldr	r3, [pc, #128]	; (8001330 <HAL_TIM_MspPostInit+0xb4>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b2:	f003 0302 	and.w	r3, r3, #2
 80012b6:	613b      	str	r3, [r7, #16]
 80012b8:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80012ba:	2303      	movs	r3, #3
 80012bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012be:	2302      	movs	r3, #2
 80012c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c2:	2300      	movs	r3, #0
 80012c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c6:	2300      	movs	r3, #0
 80012c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80012ca:	2302      	movs	r3, #2
 80012cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ce:	f107 0314 	add.w	r3, r7, #20
 80012d2:	4619      	mov	r1, r3
 80012d4:	4817      	ldr	r0, [pc, #92]	; (8001334 <HAL_TIM_MspPostInit+0xb8>)
 80012d6:	f000 fd37 	bl	8001d48 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80012da:	e022      	b.n	8001322 <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM4)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a15      	ldr	r2, [pc, #84]	; (8001338 <HAL_TIM_MspPostInit+0xbc>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d11d      	bne.n	8001322 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012e6:	2300      	movs	r3, #0
 80012e8:	60fb      	str	r3, [r7, #12]
 80012ea:	4b11      	ldr	r3, [pc, #68]	; (8001330 <HAL_TIM_MspPostInit+0xb4>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	4a10      	ldr	r2, [pc, #64]	; (8001330 <HAL_TIM_MspPostInit+0xb4>)
 80012f0:	f043 0302 	orr.w	r3, r3, #2
 80012f4:	6313      	str	r3, [r2, #48]	; 0x30
 80012f6:	4b0e      	ldr	r3, [pc, #56]	; (8001330 <HAL_TIM_MspPostInit+0xb4>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fa:	f003 0302 	and.w	r3, r3, #2
 80012fe:	60fb      	str	r3, [r7, #12]
 8001300:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001302:	2340      	movs	r3, #64	; 0x40
 8001304:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001306:	2302      	movs	r3, #2
 8001308:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130a:	2300      	movs	r3, #0
 800130c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800130e:	2300      	movs	r3, #0
 8001310:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001312:	2302      	movs	r3, #2
 8001314:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001316:	f107 0314 	add.w	r3, r7, #20
 800131a:	4619      	mov	r1, r3
 800131c:	4805      	ldr	r0, [pc, #20]	; (8001334 <HAL_TIM_MspPostInit+0xb8>)
 800131e:	f000 fd13 	bl	8001d48 <HAL_GPIO_Init>
}
 8001322:	bf00      	nop
 8001324:	3728      	adds	r7, #40	; 0x28
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	40000400 	.word	0x40000400
 8001330:	40023800 	.word	0x40023800
 8001334:	40020400 	.word	0x40020400
 8001338:	40000800 	.word	0x40000800

0800133c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b08e      	sub	sp, #56	; 0x38
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001344:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]
 800134c:	605a      	str	r2, [r3, #4]
 800134e:	609a      	str	r2, [r3, #8]
 8001350:	60da      	str	r2, [r3, #12]
 8001352:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a4c      	ldr	r2, [pc, #304]	; (800148c <HAL_UART_MspInit+0x150>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d12d      	bne.n	80013ba <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800135e:	2300      	movs	r3, #0
 8001360:	623b      	str	r3, [r7, #32]
 8001362:	4b4b      	ldr	r3, [pc, #300]	; (8001490 <HAL_UART_MspInit+0x154>)
 8001364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001366:	4a4a      	ldr	r2, [pc, #296]	; (8001490 <HAL_UART_MspInit+0x154>)
 8001368:	f043 0310 	orr.w	r3, r3, #16
 800136c:	6453      	str	r3, [r2, #68]	; 0x44
 800136e:	4b48      	ldr	r3, [pc, #288]	; (8001490 <HAL_UART_MspInit+0x154>)
 8001370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001372:	f003 0310 	and.w	r3, r3, #16
 8001376:	623b      	str	r3, [r7, #32]
 8001378:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800137a:	2300      	movs	r3, #0
 800137c:	61fb      	str	r3, [r7, #28]
 800137e:	4b44      	ldr	r3, [pc, #272]	; (8001490 <HAL_UART_MspInit+0x154>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001382:	4a43      	ldr	r2, [pc, #268]	; (8001490 <HAL_UART_MspInit+0x154>)
 8001384:	f043 0301 	orr.w	r3, r3, #1
 8001388:	6313      	str	r3, [r2, #48]	; 0x30
 800138a:	4b41      	ldr	r3, [pc, #260]	; (8001490 <HAL_UART_MspInit+0x154>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138e:	f003 0301 	and.w	r3, r3, #1
 8001392:	61fb      	str	r3, [r7, #28]
 8001394:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001396:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800139a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800139c:	2302      	movs	r3, #2
 800139e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a0:	2300      	movs	r3, #0
 80013a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013a4:	2303      	movs	r3, #3
 80013a6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80013a8:	2307      	movs	r3, #7
 80013aa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013b0:	4619      	mov	r1, r3
 80013b2:	4838      	ldr	r0, [pc, #224]	; (8001494 <HAL_UART_MspInit+0x158>)
 80013b4:	f000 fcc8 	bl	8001d48 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80013b8:	e063      	b.n	8001482 <HAL_UART_MspInit+0x146>
  else if(huart->Instance==USART2)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4a36      	ldr	r2, [pc, #216]	; (8001498 <HAL_UART_MspInit+0x15c>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d12c      	bne.n	800141e <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART2_CLK_ENABLE();
 80013c4:	2300      	movs	r3, #0
 80013c6:	61bb      	str	r3, [r7, #24]
 80013c8:	4b31      	ldr	r3, [pc, #196]	; (8001490 <HAL_UART_MspInit+0x154>)
 80013ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013cc:	4a30      	ldr	r2, [pc, #192]	; (8001490 <HAL_UART_MspInit+0x154>)
 80013ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013d2:	6413      	str	r3, [r2, #64]	; 0x40
 80013d4:	4b2e      	ldr	r3, [pc, #184]	; (8001490 <HAL_UART_MspInit+0x154>)
 80013d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013dc:	61bb      	str	r3, [r7, #24]
 80013de:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013e0:	2300      	movs	r3, #0
 80013e2:	617b      	str	r3, [r7, #20]
 80013e4:	4b2a      	ldr	r3, [pc, #168]	; (8001490 <HAL_UART_MspInit+0x154>)
 80013e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e8:	4a29      	ldr	r2, [pc, #164]	; (8001490 <HAL_UART_MspInit+0x154>)
 80013ea:	f043 0301 	orr.w	r3, r3, #1
 80013ee:	6313      	str	r3, [r2, #48]	; 0x30
 80013f0:	4b27      	ldr	r3, [pc, #156]	; (8001490 <HAL_UART_MspInit+0x154>)
 80013f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f4:	f003 0301 	and.w	r3, r3, #1
 80013f8:	617b      	str	r3, [r7, #20]
 80013fa:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80013fc:	230c      	movs	r3, #12
 80013fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001400:	2302      	movs	r3, #2
 8001402:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001404:	2300      	movs	r3, #0
 8001406:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001408:	2303      	movs	r3, #3
 800140a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800140c:	2307      	movs	r3, #7
 800140e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001410:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001414:	4619      	mov	r1, r3
 8001416:	481f      	ldr	r0, [pc, #124]	; (8001494 <HAL_UART_MspInit+0x158>)
 8001418:	f000 fc96 	bl	8001d48 <HAL_GPIO_Init>
}
 800141c:	e031      	b.n	8001482 <HAL_UART_MspInit+0x146>
  else if(huart->Instance==USART6)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4a1e      	ldr	r2, [pc, #120]	; (800149c <HAL_UART_MspInit+0x160>)
 8001424:	4293      	cmp	r3, r2
 8001426:	d12c      	bne.n	8001482 <HAL_UART_MspInit+0x146>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001428:	2300      	movs	r3, #0
 800142a:	613b      	str	r3, [r7, #16]
 800142c:	4b18      	ldr	r3, [pc, #96]	; (8001490 <HAL_UART_MspInit+0x154>)
 800142e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001430:	4a17      	ldr	r2, [pc, #92]	; (8001490 <HAL_UART_MspInit+0x154>)
 8001432:	f043 0320 	orr.w	r3, r3, #32
 8001436:	6453      	str	r3, [r2, #68]	; 0x44
 8001438:	4b15      	ldr	r3, [pc, #84]	; (8001490 <HAL_UART_MspInit+0x154>)
 800143a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800143c:	f003 0320 	and.w	r3, r3, #32
 8001440:	613b      	str	r3, [r7, #16]
 8001442:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001444:	2300      	movs	r3, #0
 8001446:	60fb      	str	r3, [r7, #12]
 8001448:	4b11      	ldr	r3, [pc, #68]	; (8001490 <HAL_UART_MspInit+0x154>)
 800144a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144c:	4a10      	ldr	r2, [pc, #64]	; (8001490 <HAL_UART_MspInit+0x154>)
 800144e:	f043 0301 	orr.w	r3, r3, #1
 8001452:	6313      	str	r3, [r2, #48]	; 0x30
 8001454:	4b0e      	ldr	r3, [pc, #56]	; (8001490 <HAL_UART_MspInit+0x154>)
 8001456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001458:	f003 0301 	and.w	r3, r3, #1
 800145c:	60fb      	str	r3, [r7, #12]
 800145e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001460:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001464:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001466:	2302      	movs	r3, #2
 8001468:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146a:	2300      	movs	r3, #0
 800146c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800146e:	2303      	movs	r3, #3
 8001470:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001472:	2308      	movs	r3, #8
 8001474:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001476:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800147a:	4619      	mov	r1, r3
 800147c:	4805      	ldr	r0, [pc, #20]	; (8001494 <HAL_UART_MspInit+0x158>)
 800147e:	f000 fc63 	bl	8001d48 <HAL_GPIO_Init>
}
 8001482:	bf00      	nop
 8001484:	3738      	adds	r7, #56	; 0x38
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	40011000 	.word	0x40011000
 8001490:	40023800 	.word	0x40023800
 8001494:	40020000 	.word	0x40020000
 8001498:	40004400 	.word	0x40004400
 800149c:	40011400 	.word	0x40011400

080014a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014a4:	e7fe      	b.n	80014a4 <NMI_Handler+0x4>

080014a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014a6:	b480      	push	{r7}
 80014a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014aa:	e7fe      	b.n	80014aa <HardFault_Handler+0x4>

080014ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014b0:	e7fe      	b.n	80014b0 <MemManage_Handler+0x4>

080014b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014b2:	b480      	push	{r7}
 80014b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014b6:	e7fe      	b.n	80014b6 <BusFault_Handler+0x4>

080014b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014bc:	e7fe      	b.n	80014bc <UsageFault_Handler+0x4>

080014be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014be:	b480      	push	{r7}
 80014c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014c2:	bf00      	nop
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr

080014cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014d0:	f000 f8a6 	bl	8001620 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80014d4:	f004 f97e 	bl	80057d4 <xTaskGetSchedulerState>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b01      	cmp	r3, #1
 80014dc:	d001      	beq.n	80014e2 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80014de:	f005 f91b 	bl	8006718 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014e2:	bf00      	nop
 80014e4:	bd80      	pop	{r7, pc}

080014e6 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80014e6:	b580      	push	{r7, lr}
 80014e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80014ea:	2001      	movs	r0, #1
 80014ec:	f000 fdca 	bl	8002084 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80014f0:	bf00      	nop
 80014f2:	bd80      	pop	{r7, pc}

080014f4 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80014f8:	2004      	movs	r0, #4
 80014fa:	f000 fdc3 	bl	8002084 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80014fe:	bf00      	nop
 8001500:	bd80      	pop	{r7, pc}
	...

08001504 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001508:	4b06      	ldr	r3, [pc, #24]	; (8001524 <SystemInit+0x20>)
 800150a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800150e:	4a05      	ldr	r2, [pc, #20]	; (8001524 <SystemInit+0x20>)
 8001510:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001514:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001518:	bf00      	nop
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	e000ed00 	.word	0xe000ed00

08001528 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001528:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001560 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800152c:	480d      	ldr	r0, [pc, #52]	; (8001564 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800152e:	490e      	ldr	r1, [pc, #56]	; (8001568 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001530:	4a0e      	ldr	r2, [pc, #56]	; (800156c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001532:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001534:	e002      	b.n	800153c <LoopCopyDataInit>

08001536 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001536:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001538:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800153a:	3304      	adds	r3, #4

0800153c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800153c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800153e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001540:	d3f9      	bcc.n	8001536 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001542:	4a0b      	ldr	r2, [pc, #44]	; (8001570 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001544:	4c0b      	ldr	r4, [pc, #44]	; (8001574 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001546:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001548:	e001      	b.n	800154e <LoopFillZerobss>

0800154a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800154a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800154c:	3204      	adds	r2, #4

0800154e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800154e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001550:	d3fb      	bcc.n	800154a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001552:	f7ff ffd7 	bl	8001504 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001556:	f006 f8c7 	bl	80076e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800155a:	f7fe ffc3 	bl	80004e4 <main>
  bx  lr    
 800155e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001560:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001564:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001568:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 800156c:	080078c8 	.word	0x080078c8
  ldr r2, =_sbss
 8001570:	20001010 	.word	0x20001010
  ldr r4, =_ebss
 8001574:	2000a644 	.word	0x2000a644

08001578 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001578:	e7fe      	b.n	8001578 <ADC_IRQHandler>
	...

0800157c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001580:	4b0e      	ldr	r3, [pc, #56]	; (80015bc <HAL_Init+0x40>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a0d      	ldr	r2, [pc, #52]	; (80015bc <HAL_Init+0x40>)
 8001586:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800158a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800158c:	4b0b      	ldr	r3, [pc, #44]	; (80015bc <HAL_Init+0x40>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a0a      	ldr	r2, [pc, #40]	; (80015bc <HAL_Init+0x40>)
 8001592:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001596:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001598:	4b08      	ldr	r3, [pc, #32]	; (80015bc <HAL_Init+0x40>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a07      	ldr	r2, [pc, #28]	; (80015bc <HAL_Init+0x40>)
 800159e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015a4:	2003      	movs	r0, #3
 80015a6:	f000 fb8d 	bl	8001cc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015aa:	200f      	movs	r0, #15
 80015ac:	f000 f808 	bl	80015c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015b0:	f7ff fbe4 	bl	8000d7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015b4:	2300      	movs	r3, #0
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	40023c00 	.word	0x40023c00

080015c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015c8:	4b12      	ldr	r3, [pc, #72]	; (8001614 <HAL_InitTick+0x54>)
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	4b12      	ldr	r3, [pc, #72]	; (8001618 <HAL_InitTick+0x58>)
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	4619      	mov	r1, r3
 80015d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80015da:	fbb2 f3f3 	udiv	r3, r2, r3
 80015de:	4618      	mov	r0, r3
 80015e0:	f000 fba5 	bl	8001d2e <HAL_SYSTICK_Config>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
 80015ec:	e00e      	b.n	800160c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2b0f      	cmp	r3, #15
 80015f2:	d80a      	bhi.n	800160a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015f4:	2200      	movs	r2, #0
 80015f6:	6879      	ldr	r1, [r7, #4]
 80015f8:	f04f 30ff 	mov.w	r0, #4294967295
 80015fc:	f000 fb6d 	bl	8001cda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001600:	4a06      	ldr	r2, [pc, #24]	; (800161c <HAL_InitTick+0x5c>)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001606:	2300      	movs	r3, #0
 8001608:	e000      	b.n	800160c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
}
 800160c:	4618      	mov	r0, r3
 800160e:	3708      	adds	r7, #8
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	20000000 	.word	0x20000000
 8001618:	20000008 	.word	0x20000008
 800161c:	20000004 	.word	0x20000004

08001620 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001624:	4b06      	ldr	r3, [pc, #24]	; (8001640 <HAL_IncTick+0x20>)
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	461a      	mov	r2, r3
 800162a:	4b06      	ldr	r3, [pc, #24]	; (8001644 <HAL_IncTick+0x24>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4413      	add	r3, r2
 8001630:	4a04      	ldr	r2, [pc, #16]	; (8001644 <HAL_IncTick+0x24>)
 8001632:	6013      	str	r3, [r2, #0]
}
 8001634:	bf00      	nop
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
 800163e:	bf00      	nop
 8001640:	20000008 	.word	0x20000008
 8001644:	200013d8 	.word	0x200013d8

08001648 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  return uwTick;
 800164c:	4b03      	ldr	r3, [pc, #12]	; (800165c <HAL_GetTick+0x14>)
 800164e:	681b      	ldr	r3, [r3, #0]
}
 8001650:	4618      	mov	r0, r3
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	200013d8 	.word	0x200013d8

08001660 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b084      	sub	sp, #16
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001668:	2300      	movs	r3, #0
 800166a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d101      	bne.n	8001676 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001672:	2301      	movs	r3, #1
 8001674:	e033      	b.n	80016de <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167a:	2b00      	cmp	r3, #0
 800167c:	d109      	bne.n	8001692 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800167e:	6878      	ldr	r0, [r7, #4]
 8001680:	f7ff fba8 	bl	8000dd4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2200      	movs	r2, #0
 8001688:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2200      	movs	r2, #0
 800168e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001696:	f003 0310 	and.w	r3, r3, #16
 800169a:	2b00      	cmp	r3, #0
 800169c:	d118      	bne.n	80016d0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80016a6:	f023 0302 	bic.w	r3, r3, #2
 80016aa:	f043 0202 	orr.w	r2, r3, #2
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80016b2:	6878      	ldr	r0, [r7, #4]
 80016b4:	f000 f93a 	bl	800192c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2200      	movs	r2, #0
 80016bc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c2:	f023 0303 	bic.w	r3, r3, #3
 80016c6:	f043 0201 	orr.w	r2, r3, #1
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	641a      	str	r2, [r3, #64]	; 0x40
 80016ce:	e001      	b.n	80016d4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80016d0:	2301      	movs	r3, #1
 80016d2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2200      	movs	r2, #0
 80016d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80016dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3710      	adds	r7, #16
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
	...

080016e8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b085      	sub	sp, #20
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
 80016f0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80016f2:	2300      	movs	r3, #0
 80016f4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80016fc:	2b01      	cmp	r3, #1
 80016fe:	d101      	bne.n	8001704 <HAL_ADC_ConfigChannel+0x1c>
 8001700:	2302      	movs	r3, #2
 8001702:	e105      	b.n	8001910 <HAL_ADC_ConfigChannel+0x228>
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2201      	movs	r2, #1
 8001708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	2b09      	cmp	r3, #9
 8001712:	d925      	bls.n	8001760 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	68d9      	ldr	r1, [r3, #12]
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	b29b      	uxth	r3, r3
 8001720:	461a      	mov	r2, r3
 8001722:	4613      	mov	r3, r2
 8001724:	005b      	lsls	r3, r3, #1
 8001726:	4413      	add	r3, r2
 8001728:	3b1e      	subs	r3, #30
 800172a:	2207      	movs	r2, #7
 800172c:	fa02 f303 	lsl.w	r3, r2, r3
 8001730:	43da      	mvns	r2, r3
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	400a      	ands	r2, r1
 8001738:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	68d9      	ldr	r1, [r3, #12]
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	689a      	ldr	r2, [r3, #8]
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	b29b      	uxth	r3, r3
 800174a:	4618      	mov	r0, r3
 800174c:	4603      	mov	r3, r0
 800174e:	005b      	lsls	r3, r3, #1
 8001750:	4403      	add	r3, r0
 8001752:	3b1e      	subs	r3, #30
 8001754:	409a      	lsls	r2, r3
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	430a      	orrs	r2, r1
 800175c:	60da      	str	r2, [r3, #12]
 800175e:	e022      	b.n	80017a6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	6919      	ldr	r1, [r3, #16]
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	b29b      	uxth	r3, r3
 800176c:	461a      	mov	r2, r3
 800176e:	4613      	mov	r3, r2
 8001770:	005b      	lsls	r3, r3, #1
 8001772:	4413      	add	r3, r2
 8001774:	2207      	movs	r2, #7
 8001776:	fa02 f303 	lsl.w	r3, r2, r3
 800177a:	43da      	mvns	r2, r3
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	400a      	ands	r2, r1
 8001782:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	6919      	ldr	r1, [r3, #16]
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	689a      	ldr	r2, [r3, #8]
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	b29b      	uxth	r3, r3
 8001794:	4618      	mov	r0, r3
 8001796:	4603      	mov	r3, r0
 8001798:	005b      	lsls	r3, r3, #1
 800179a:	4403      	add	r3, r0
 800179c:	409a      	lsls	r2, r3
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	430a      	orrs	r2, r1
 80017a4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	2b06      	cmp	r3, #6
 80017ac:	d824      	bhi.n	80017f8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	685a      	ldr	r2, [r3, #4]
 80017b8:	4613      	mov	r3, r2
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	4413      	add	r3, r2
 80017be:	3b05      	subs	r3, #5
 80017c0:	221f      	movs	r2, #31
 80017c2:	fa02 f303 	lsl.w	r3, r2, r3
 80017c6:	43da      	mvns	r2, r3
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	400a      	ands	r2, r1
 80017ce:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	b29b      	uxth	r3, r3
 80017dc:	4618      	mov	r0, r3
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	685a      	ldr	r2, [r3, #4]
 80017e2:	4613      	mov	r3, r2
 80017e4:	009b      	lsls	r3, r3, #2
 80017e6:	4413      	add	r3, r2
 80017e8:	3b05      	subs	r3, #5
 80017ea:	fa00 f203 	lsl.w	r2, r0, r3
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	430a      	orrs	r2, r1
 80017f4:	635a      	str	r2, [r3, #52]	; 0x34
 80017f6:	e04c      	b.n	8001892 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	2b0c      	cmp	r3, #12
 80017fe:	d824      	bhi.n	800184a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	685a      	ldr	r2, [r3, #4]
 800180a:	4613      	mov	r3, r2
 800180c:	009b      	lsls	r3, r3, #2
 800180e:	4413      	add	r3, r2
 8001810:	3b23      	subs	r3, #35	; 0x23
 8001812:	221f      	movs	r2, #31
 8001814:	fa02 f303 	lsl.w	r3, r2, r3
 8001818:	43da      	mvns	r2, r3
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	400a      	ands	r2, r1
 8001820:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	b29b      	uxth	r3, r3
 800182e:	4618      	mov	r0, r3
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	685a      	ldr	r2, [r3, #4]
 8001834:	4613      	mov	r3, r2
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	4413      	add	r3, r2
 800183a:	3b23      	subs	r3, #35	; 0x23
 800183c:	fa00 f203 	lsl.w	r2, r0, r3
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	430a      	orrs	r2, r1
 8001846:	631a      	str	r2, [r3, #48]	; 0x30
 8001848:	e023      	b.n	8001892 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	685a      	ldr	r2, [r3, #4]
 8001854:	4613      	mov	r3, r2
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	4413      	add	r3, r2
 800185a:	3b41      	subs	r3, #65	; 0x41
 800185c:	221f      	movs	r2, #31
 800185e:	fa02 f303 	lsl.w	r3, r2, r3
 8001862:	43da      	mvns	r2, r3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	400a      	ands	r2, r1
 800186a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	b29b      	uxth	r3, r3
 8001878:	4618      	mov	r0, r3
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	685a      	ldr	r2, [r3, #4]
 800187e:	4613      	mov	r3, r2
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	4413      	add	r3, r2
 8001884:	3b41      	subs	r3, #65	; 0x41
 8001886:	fa00 f203 	lsl.w	r2, r0, r3
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	430a      	orrs	r2, r1
 8001890:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001892:	4b22      	ldr	r3, [pc, #136]	; (800191c <HAL_ADC_ConfigChannel+0x234>)
 8001894:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a21      	ldr	r2, [pc, #132]	; (8001920 <HAL_ADC_ConfigChannel+0x238>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d109      	bne.n	80018b4 <HAL_ADC_ConfigChannel+0x1cc>
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	2b12      	cmp	r3, #18
 80018a6:	d105      	bne.n	80018b4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a19      	ldr	r2, [pc, #100]	; (8001920 <HAL_ADC_ConfigChannel+0x238>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d123      	bne.n	8001906 <HAL_ADC_ConfigChannel+0x21e>
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	2b10      	cmp	r3, #16
 80018c4:	d003      	beq.n	80018ce <HAL_ADC_ConfigChannel+0x1e6>
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	2b11      	cmp	r3, #17
 80018cc:	d11b      	bne.n	8001906 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	2b10      	cmp	r3, #16
 80018e0:	d111      	bne.n	8001906 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80018e2:	4b10      	ldr	r3, [pc, #64]	; (8001924 <HAL_ADC_ConfigChannel+0x23c>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a10      	ldr	r2, [pc, #64]	; (8001928 <HAL_ADC_ConfigChannel+0x240>)
 80018e8:	fba2 2303 	umull	r2, r3, r2, r3
 80018ec:	0c9a      	lsrs	r2, r3, #18
 80018ee:	4613      	mov	r3, r2
 80018f0:	009b      	lsls	r3, r3, #2
 80018f2:	4413      	add	r3, r2
 80018f4:	005b      	lsls	r3, r3, #1
 80018f6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80018f8:	e002      	b.n	8001900 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80018fa:	68bb      	ldr	r3, [r7, #8]
 80018fc:	3b01      	subs	r3, #1
 80018fe:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d1f9      	bne.n	80018fa <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2200      	movs	r2, #0
 800190a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800190e:	2300      	movs	r3, #0
}
 8001910:	4618      	mov	r0, r3
 8001912:	3714      	adds	r7, #20
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr
 800191c:	40012300 	.word	0x40012300
 8001920:	40012000 	.word	0x40012000
 8001924:	20000000 	.word	0x20000000
 8001928:	431bde83 	.word	0x431bde83

0800192c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800192c:	b480      	push	{r7}
 800192e:	b085      	sub	sp, #20
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001934:	4b79      	ldr	r3, [pc, #484]	; (8001b1c <ADC_Init+0x1f0>)
 8001936:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	685a      	ldr	r2, [r3, #4]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	431a      	orrs	r2, r3
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	685a      	ldr	r2, [r3, #4]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001960:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	6859      	ldr	r1, [r3, #4]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	691b      	ldr	r3, [r3, #16]
 800196c:	021a      	lsls	r2, r3, #8
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	430a      	orrs	r2, r1
 8001974:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	685a      	ldr	r2, [r3, #4]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001984:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	6859      	ldr	r1, [r3, #4]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	689a      	ldr	r2, [r3, #8]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	430a      	orrs	r2, r1
 8001996:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	689a      	ldr	r2, [r3, #8]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80019a6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	6899      	ldr	r1, [r3, #8]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	68da      	ldr	r2, [r3, #12]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	430a      	orrs	r2, r1
 80019b8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019be:	4a58      	ldr	r2, [pc, #352]	; (8001b20 <ADC_Init+0x1f4>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d022      	beq.n	8001a0a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	689a      	ldr	r2, [r3, #8]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80019d2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	6899      	ldr	r1, [r3, #8]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	430a      	orrs	r2, r1
 80019e4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	689a      	ldr	r2, [r3, #8]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80019f4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	6899      	ldr	r1, [r3, #8]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	430a      	orrs	r2, r1
 8001a06:	609a      	str	r2, [r3, #8]
 8001a08:	e00f      	b.n	8001a2a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	689a      	ldr	r2, [r3, #8]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001a18:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	689a      	ldr	r2, [r3, #8]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001a28:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	689a      	ldr	r2, [r3, #8]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f022 0202 	bic.w	r2, r2, #2
 8001a38:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	6899      	ldr	r1, [r3, #8]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	7e1b      	ldrb	r3, [r3, #24]
 8001a44:	005a      	lsls	r2, r3, #1
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	430a      	orrs	r2, r1
 8001a4c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d01b      	beq.n	8001a90 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	685a      	ldr	r2, [r3, #4]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001a66:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	685a      	ldr	r2, [r3, #4]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001a76:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	6859      	ldr	r1, [r3, #4]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a82:	3b01      	subs	r3, #1
 8001a84:	035a      	lsls	r2, r3, #13
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	430a      	orrs	r2, r1
 8001a8c:	605a      	str	r2, [r3, #4]
 8001a8e:	e007      	b.n	8001aa0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	685a      	ldr	r2, [r3, #4]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a9e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001aae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	69db      	ldr	r3, [r3, #28]
 8001aba:	3b01      	subs	r3, #1
 8001abc:	051a      	lsls	r2, r3, #20
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	430a      	orrs	r2, r1
 8001ac4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	689a      	ldr	r2, [r3, #8]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001ad4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	6899      	ldr	r1, [r3, #8]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001ae2:	025a      	lsls	r2, r3, #9
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	430a      	orrs	r2, r1
 8001aea:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	689a      	ldr	r2, [r3, #8]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001afa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	6899      	ldr	r1, [r3, #8]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	695b      	ldr	r3, [r3, #20]
 8001b06:	029a      	lsls	r2, r3, #10
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	430a      	orrs	r2, r1
 8001b0e:	609a      	str	r2, [r3, #8]
}
 8001b10:	bf00      	nop
 8001b12:	3714      	adds	r7, #20
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr
 8001b1c:	40012300 	.word	0x40012300
 8001b20:	0f000001 	.word	0x0f000001

08001b24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b085      	sub	sp, #20
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	f003 0307 	and.w	r3, r3, #7
 8001b32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b34:	4b0c      	ldr	r3, [pc, #48]	; (8001b68 <__NVIC_SetPriorityGrouping+0x44>)
 8001b36:	68db      	ldr	r3, [r3, #12]
 8001b38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b3a:	68ba      	ldr	r2, [r7, #8]
 8001b3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b40:	4013      	ands	r3, r2
 8001b42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b56:	4a04      	ldr	r2, [pc, #16]	; (8001b68 <__NVIC_SetPriorityGrouping+0x44>)
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	60d3      	str	r3, [r2, #12]
}
 8001b5c:	bf00      	nop
 8001b5e:	3714      	adds	r7, #20
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr
 8001b68:	e000ed00 	.word	0xe000ed00

08001b6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b70:	4b04      	ldr	r3, [pc, #16]	; (8001b84 <__NVIC_GetPriorityGrouping+0x18>)
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	0a1b      	lsrs	r3, r3, #8
 8001b76:	f003 0307 	and.w	r3, r3, #7
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr
 8001b84:	e000ed00 	.word	0xe000ed00

08001b88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	4603      	mov	r3, r0
 8001b90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	db0b      	blt.n	8001bb2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b9a:	79fb      	ldrb	r3, [r7, #7]
 8001b9c:	f003 021f 	and.w	r2, r3, #31
 8001ba0:	4907      	ldr	r1, [pc, #28]	; (8001bc0 <__NVIC_EnableIRQ+0x38>)
 8001ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba6:	095b      	lsrs	r3, r3, #5
 8001ba8:	2001      	movs	r0, #1
 8001baa:	fa00 f202 	lsl.w	r2, r0, r2
 8001bae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001bb2:	bf00      	nop
 8001bb4:	370c      	adds	r7, #12
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop
 8001bc0:	e000e100 	.word	0xe000e100

08001bc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	4603      	mov	r3, r0
 8001bcc:	6039      	str	r1, [r7, #0]
 8001bce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	db0a      	blt.n	8001bee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	b2da      	uxtb	r2, r3
 8001bdc:	490c      	ldr	r1, [pc, #48]	; (8001c10 <__NVIC_SetPriority+0x4c>)
 8001bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be2:	0112      	lsls	r2, r2, #4
 8001be4:	b2d2      	uxtb	r2, r2
 8001be6:	440b      	add	r3, r1
 8001be8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bec:	e00a      	b.n	8001c04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	b2da      	uxtb	r2, r3
 8001bf2:	4908      	ldr	r1, [pc, #32]	; (8001c14 <__NVIC_SetPriority+0x50>)
 8001bf4:	79fb      	ldrb	r3, [r7, #7]
 8001bf6:	f003 030f 	and.w	r3, r3, #15
 8001bfa:	3b04      	subs	r3, #4
 8001bfc:	0112      	lsls	r2, r2, #4
 8001bfe:	b2d2      	uxtb	r2, r2
 8001c00:	440b      	add	r3, r1
 8001c02:	761a      	strb	r2, [r3, #24]
}
 8001c04:	bf00      	nop
 8001c06:	370c      	adds	r7, #12
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr
 8001c10:	e000e100 	.word	0xe000e100
 8001c14:	e000ed00 	.word	0xe000ed00

08001c18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b089      	sub	sp, #36	; 0x24
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	60f8      	str	r0, [r7, #12]
 8001c20:	60b9      	str	r1, [r7, #8]
 8001c22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	f003 0307 	and.w	r3, r3, #7
 8001c2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	f1c3 0307 	rsb	r3, r3, #7
 8001c32:	2b04      	cmp	r3, #4
 8001c34:	bf28      	it	cs
 8001c36:	2304      	movcs	r3, #4
 8001c38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	3304      	adds	r3, #4
 8001c3e:	2b06      	cmp	r3, #6
 8001c40:	d902      	bls.n	8001c48 <NVIC_EncodePriority+0x30>
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	3b03      	subs	r3, #3
 8001c46:	e000      	b.n	8001c4a <NVIC_EncodePriority+0x32>
 8001c48:	2300      	movs	r3, #0
 8001c4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c4c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c50:	69bb      	ldr	r3, [r7, #24]
 8001c52:	fa02 f303 	lsl.w	r3, r2, r3
 8001c56:	43da      	mvns	r2, r3
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	401a      	ands	r2, r3
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c60:	f04f 31ff 	mov.w	r1, #4294967295
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	fa01 f303 	lsl.w	r3, r1, r3
 8001c6a:	43d9      	mvns	r1, r3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c70:	4313      	orrs	r3, r2
         );
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3724      	adds	r7, #36	; 0x24
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
	...

08001c80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	3b01      	subs	r3, #1
 8001c8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c90:	d301      	bcc.n	8001c96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c92:	2301      	movs	r3, #1
 8001c94:	e00f      	b.n	8001cb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c96:	4a0a      	ldr	r2, [pc, #40]	; (8001cc0 <SysTick_Config+0x40>)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	3b01      	subs	r3, #1
 8001c9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c9e:	210f      	movs	r1, #15
 8001ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ca4:	f7ff ff8e 	bl	8001bc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ca8:	4b05      	ldr	r3, [pc, #20]	; (8001cc0 <SysTick_Config+0x40>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cae:	4b04      	ldr	r3, [pc, #16]	; (8001cc0 <SysTick_Config+0x40>)
 8001cb0:	2207      	movs	r2, #7
 8001cb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cb4:	2300      	movs	r3, #0
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3708      	adds	r7, #8
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	e000e010 	.word	0xe000e010

08001cc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ccc:	6878      	ldr	r0, [r7, #4]
 8001cce:	f7ff ff29 	bl	8001b24 <__NVIC_SetPriorityGrouping>
}
 8001cd2:	bf00      	nop
 8001cd4:	3708      	adds	r7, #8
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}

08001cda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cda:	b580      	push	{r7, lr}
 8001cdc:	b086      	sub	sp, #24
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	60b9      	str	r1, [r7, #8]
 8001ce4:	607a      	str	r2, [r7, #4]
 8001ce6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cec:	f7ff ff3e 	bl	8001b6c <__NVIC_GetPriorityGrouping>
 8001cf0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cf2:	687a      	ldr	r2, [r7, #4]
 8001cf4:	68b9      	ldr	r1, [r7, #8]
 8001cf6:	6978      	ldr	r0, [r7, #20]
 8001cf8:	f7ff ff8e 	bl	8001c18 <NVIC_EncodePriority>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d02:	4611      	mov	r1, r2
 8001d04:	4618      	mov	r0, r3
 8001d06:	f7ff ff5d 	bl	8001bc4 <__NVIC_SetPriority>
}
 8001d0a:	bf00      	nop
 8001d0c:	3718      	adds	r7, #24
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}

08001d12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d12:	b580      	push	{r7, lr}
 8001d14:	b082      	sub	sp, #8
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	4603      	mov	r3, r0
 8001d1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d20:	4618      	mov	r0, r3
 8001d22:	f7ff ff31 	bl	8001b88 <__NVIC_EnableIRQ>
}
 8001d26:	bf00      	nop
 8001d28:	3708      	adds	r7, #8
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}

08001d2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d2e:	b580      	push	{r7, lr}
 8001d30:	b082      	sub	sp, #8
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f7ff ffa2 	bl	8001c80 <SysTick_Config>
 8001d3c:	4603      	mov	r3, r0
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3708      	adds	r7, #8
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
	...

08001d48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b089      	sub	sp, #36	; 0x24
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
 8001d50:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d52:	2300      	movs	r3, #0
 8001d54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d56:	2300      	movs	r3, #0
 8001d58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d5e:	2300      	movs	r3, #0
 8001d60:	61fb      	str	r3, [r7, #28]
 8001d62:	e159      	b.n	8002018 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d64:	2201      	movs	r2, #1
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	697a      	ldr	r2, [r7, #20]
 8001d74:	4013      	ands	r3, r2
 8001d76:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d78:	693a      	ldr	r2, [r7, #16]
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	f040 8148 	bne.w	8002012 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	f003 0303 	and.w	r3, r3, #3
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d005      	beq.n	8001d9a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d96:	2b02      	cmp	r3, #2
 8001d98:	d130      	bne.n	8001dfc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001da0:	69fb      	ldr	r3, [r7, #28]
 8001da2:	005b      	lsls	r3, r3, #1
 8001da4:	2203      	movs	r2, #3
 8001da6:	fa02 f303 	lsl.w	r3, r2, r3
 8001daa:	43db      	mvns	r3, r3
 8001dac:	69ba      	ldr	r2, [r7, #24]
 8001dae:	4013      	ands	r3, r2
 8001db0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	68da      	ldr	r2, [r3, #12]
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	005b      	lsls	r3, r3, #1
 8001dba:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbe:	69ba      	ldr	r2, [r7, #24]
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	69ba      	ldr	r2, [r7, #24]
 8001dc8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd8:	43db      	mvns	r3, r3
 8001dda:	69ba      	ldr	r2, [r7, #24]
 8001ddc:	4013      	ands	r3, r2
 8001dde:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	091b      	lsrs	r3, r3, #4
 8001de6:	f003 0201 	and.w	r2, r3, #1
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	fa02 f303 	lsl.w	r3, r2, r3
 8001df0:	69ba      	ldr	r2, [r7, #24]
 8001df2:	4313      	orrs	r3, r2
 8001df4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	69ba      	ldr	r2, [r7, #24]
 8001dfa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f003 0303 	and.w	r3, r3, #3
 8001e04:	2b03      	cmp	r3, #3
 8001e06:	d017      	beq.n	8001e38 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	005b      	lsls	r3, r3, #1
 8001e12:	2203      	movs	r2, #3
 8001e14:	fa02 f303 	lsl.w	r3, r2, r3
 8001e18:	43db      	mvns	r3, r3
 8001e1a:	69ba      	ldr	r2, [r7, #24]
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	689a      	ldr	r2, [r3, #8]
 8001e24:	69fb      	ldr	r3, [r7, #28]
 8001e26:	005b      	lsls	r3, r3, #1
 8001e28:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2c:	69ba      	ldr	r2, [r7, #24]
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	69ba      	ldr	r2, [r7, #24]
 8001e36:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	f003 0303 	and.w	r3, r3, #3
 8001e40:	2b02      	cmp	r3, #2
 8001e42:	d123      	bne.n	8001e8c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e44:	69fb      	ldr	r3, [r7, #28]
 8001e46:	08da      	lsrs	r2, r3, #3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	3208      	adds	r2, #8
 8001e4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e50:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e52:	69fb      	ldr	r3, [r7, #28]
 8001e54:	f003 0307 	and.w	r3, r3, #7
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	220f      	movs	r2, #15
 8001e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e60:	43db      	mvns	r3, r3
 8001e62:	69ba      	ldr	r2, [r7, #24]
 8001e64:	4013      	ands	r3, r2
 8001e66:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	691a      	ldr	r2, [r3, #16]
 8001e6c:	69fb      	ldr	r3, [r7, #28]
 8001e6e:	f003 0307 	and.w	r3, r3, #7
 8001e72:	009b      	lsls	r3, r3, #2
 8001e74:	fa02 f303 	lsl.w	r3, r2, r3
 8001e78:	69ba      	ldr	r2, [r7, #24]
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	08da      	lsrs	r2, r3, #3
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	3208      	adds	r2, #8
 8001e86:	69b9      	ldr	r1, [r7, #24]
 8001e88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	005b      	lsls	r3, r3, #1
 8001e96:	2203      	movs	r2, #3
 8001e98:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9c:	43db      	mvns	r3, r3
 8001e9e:	69ba      	ldr	r2, [r7, #24]
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f003 0203 	and.w	r2, r3, #3
 8001eac:	69fb      	ldr	r3, [r7, #28]
 8001eae:	005b      	lsls	r3, r3, #1
 8001eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb4:	69ba      	ldr	r2, [r7, #24]
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	69ba      	ldr	r2, [r7, #24]
 8001ebe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	f000 80a2 	beq.w	8002012 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ece:	2300      	movs	r3, #0
 8001ed0:	60fb      	str	r3, [r7, #12]
 8001ed2:	4b57      	ldr	r3, [pc, #348]	; (8002030 <HAL_GPIO_Init+0x2e8>)
 8001ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ed6:	4a56      	ldr	r2, [pc, #344]	; (8002030 <HAL_GPIO_Init+0x2e8>)
 8001ed8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001edc:	6453      	str	r3, [r2, #68]	; 0x44
 8001ede:	4b54      	ldr	r3, [pc, #336]	; (8002030 <HAL_GPIO_Init+0x2e8>)
 8001ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ee2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ee6:	60fb      	str	r3, [r7, #12]
 8001ee8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001eea:	4a52      	ldr	r2, [pc, #328]	; (8002034 <HAL_GPIO_Init+0x2ec>)
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	089b      	lsrs	r3, r3, #2
 8001ef0:	3302      	adds	r3, #2
 8001ef2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ef8:	69fb      	ldr	r3, [r7, #28]
 8001efa:	f003 0303 	and.w	r3, r3, #3
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	220f      	movs	r2, #15
 8001f02:	fa02 f303 	lsl.w	r3, r2, r3
 8001f06:	43db      	mvns	r3, r3
 8001f08:	69ba      	ldr	r2, [r7, #24]
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4a49      	ldr	r2, [pc, #292]	; (8002038 <HAL_GPIO_Init+0x2f0>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d019      	beq.n	8001f4a <HAL_GPIO_Init+0x202>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4a48      	ldr	r2, [pc, #288]	; (800203c <HAL_GPIO_Init+0x2f4>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d013      	beq.n	8001f46 <HAL_GPIO_Init+0x1fe>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4a47      	ldr	r2, [pc, #284]	; (8002040 <HAL_GPIO_Init+0x2f8>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d00d      	beq.n	8001f42 <HAL_GPIO_Init+0x1fa>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4a46      	ldr	r2, [pc, #280]	; (8002044 <HAL_GPIO_Init+0x2fc>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d007      	beq.n	8001f3e <HAL_GPIO_Init+0x1f6>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4a45      	ldr	r2, [pc, #276]	; (8002048 <HAL_GPIO_Init+0x300>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d101      	bne.n	8001f3a <HAL_GPIO_Init+0x1f2>
 8001f36:	2304      	movs	r3, #4
 8001f38:	e008      	b.n	8001f4c <HAL_GPIO_Init+0x204>
 8001f3a:	2307      	movs	r3, #7
 8001f3c:	e006      	b.n	8001f4c <HAL_GPIO_Init+0x204>
 8001f3e:	2303      	movs	r3, #3
 8001f40:	e004      	b.n	8001f4c <HAL_GPIO_Init+0x204>
 8001f42:	2302      	movs	r3, #2
 8001f44:	e002      	b.n	8001f4c <HAL_GPIO_Init+0x204>
 8001f46:	2301      	movs	r3, #1
 8001f48:	e000      	b.n	8001f4c <HAL_GPIO_Init+0x204>
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	69fa      	ldr	r2, [r7, #28]
 8001f4e:	f002 0203 	and.w	r2, r2, #3
 8001f52:	0092      	lsls	r2, r2, #2
 8001f54:	4093      	lsls	r3, r2
 8001f56:	69ba      	ldr	r2, [r7, #24]
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f5c:	4935      	ldr	r1, [pc, #212]	; (8002034 <HAL_GPIO_Init+0x2ec>)
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	089b      	lsrs	r3, r3, #2
 8001f62:	3302      	adds	r3, #2
 8001f64:	69ba      	ldr	r2, [r7, #24]
 8001f66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f6a:	4b38      	ldr	r3, [pc, #224]	; (800204c <HAL_GPIO_Init+0x304>)
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	43db      	mvns	r3, r3
 8001f74:	69ba      	ldr	r2, [r7, #24]
 8001f76:	4013      	ands	r3, r2
 8001f78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d003      	beq.n	8001f8e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001f86:	69ba      	ldr	r2, [r7, #24]
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f8e:	4a2f      	ldr	r2, [pc, #188]	; (800204c <HAL_GPIO_Init+0x304>)
 8001f90:	69bb      	ldr	r3, [r7, #24]
 8001f92:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f94:	4b2d      	ldr	r3, [pc, #180]	; (800204c <HAL_GPIO_Init+0x304>)
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	43db      	mvns	r3, r3
 8001f9e:	69ba      	ldr	r2, [r7, #24]
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d003      	beq.n	8001fb8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001fb0:	69ba      	ldr	r2, [r7, #24]
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001fb8:	4a24      	ldr	r2, [pc, #144]	; (800204c <HAL_GPIO_Init+0x304>)
 8001fba:	69bb      	ldr	r3, [r7, #24]
 8001fbc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001fbe:	4b23      	ldr	r3, [pc, #140]	; (800204c <HAL_GPIO_Init+0x304>)
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	43db      	mvns	r3, r3
 8001fc8:	69ba      	ldr	r2, [r7, #24]
 8001fca:	4013      	ands	r3, r2
 8001fcc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d003      	beq.n	8001fe2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001fda:	69ba      	ldr	r2, [r7, #24]
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001fe2:	4a1a      	ldr	r2, [pc, #104]	; (800204c <HAL_GPIO_Init+0x304>)
 8001fe4:	69bb      	ldr	r3, [r7, #24]
 8001fe6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fe8:	4b18      	ldr	r3, [pc, #96]	; (800204c <HAL_GPIO_Init+0x304>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	43db      	mvns	r3, r3
 8001ff2:	69ba      	ldr	r2, [r7, #24]
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002000:	2b00      	cmp	r3, #0
 8002002:	d003      	beq.n	800200c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002004:	69ba      	ldr	r2, [r7, #24]
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	4313      	orrs	r3, r2
 800200a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800200c:	4a0f      	ldr	r2, [pc, #60]	; (800204c <HAL_GPIO_Init+0x304>)
 800200e:	69bb      	ldr	r3, [r7, #24]
 8002010:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	3301      	adds	r3, #1
 8002016:	61fb      	str	r3, [r7, #28]
 8002018:	69fb      	ldr	r3, [r7, #28]
 800201a:	2b0f      	cmp	r3, #15
 800201c:	f67f aea2 	bls.w	8001d64 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002020:	bf00      	nop
 8002022:	bf00      	nop
 8002024:	3724      	adds	r7, #36	; 0x24
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr
 800202e:	bf00      	nop
 8002030:	40023800 	.word	0x40023800
 8002034:	40013800 	.word	0x40013800
 8002038:	40020000 	.word	0x40020000
 800203c:	40020400 	.word	0x40020400
 8002040:	40020800 	.word	0x40020800
 8002044:	40020c00 	.word	0x40020c00
 8002048:	40021000 	.word	0x40021000
 800204c:	40013c00 	.word	0x40013c00

08002050 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002050:	b480      	push	{r7}
 8002052:	b083      	sub	sp, #12
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
 8002058:	460b      	mov	r3, r1
 800205a:	807b      	strh	r3, [r7, #2]
 800205c:	4613      	mov	r3, r2
 800205e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002060:	787b      	ldrb	r3, [r7, #1]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d003      	beq.n	800206e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002066:	887a      	ldrh	r2, [r7, #2]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800206c:	e003      	b.n	8002076 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800206e:	887b      	ldrh	r3, [r7, #2]
 8002070:	041a      	lsls	r2, r3, #16
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	619a      	str	r2, [r3, #24]
}
 8002076:	bf00      	nop
 8002078:	370c      	adds	r7, #12
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr
	...

08002084 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	4603      	mov	r3, r0
 800208c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800208e:	4b08      	ldr	r3, [pc, #32]	; (80020b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002090:	695a      	ldr	r2, [r3, #20]
 8002092:	88fb      	ldrh	r3, [r7, #6]
 8002094:	4013      	ands	r3, r2
 8002096:	2b00      	cmp	r3, #0
 8002098:	d006      	beq.n	80020a8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800209a:	4a05      	ldr	r2, [pc, #20]	; (80020b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800209c:	88fb      	ldrh	r3, [r7, #6]
 800209e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80020a0:	88fb      	ldrh	r3, [r7, #6]
 80020a2:	4618      	mov	r0, r3
 80020a4:	f000 f806 	bl	80020b4 <HAL_GPIO_EXTI_Callback>
  }
}
 80020a8:	bf00      	nop
 80020aa:	3708      	adds	r7, #8
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	40013c00 	.word	0x40013c00

080020b4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	4603      	mov	r3, r0
 80020bc:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80020be:	bf00      	nop
 80020c0:	370c      	adds	r7, #12
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr
	...

080020cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b084      	sub	sp, #16
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d101      	bne.n	80020de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e12b      	b.n	8002336 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d106      	bne.n	80020f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2200      	movs	r2, #0
 80020ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	f7fe feb2 	bl	8000e5c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2224      	movs	r2, #36	; 0x24
 80020fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f022 0201 	bic.w	r2, r2, #1
 800210e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800211e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800212e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002130:	f000 fd80 	bl	8002c34 <HAL_RCC_GetPCLK1Freq>
 8002134:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	4a81      	ldr	r2, [pc, #516]	; (8002340 <HAL_I2C_Init+0x274>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d807      	bhi.n	8002150 <HAL_I2C_Init+0x84>
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	4a80      	ldr	r2, [pc, #512]	; (8002344 <HAL_I2C_Init+0x278>)
 8002144:	4293      	cmp	r3, r2
 8002146:	bf94      	ite	ls
 8002148:	2301      	movls	r3, #1
 800214a:	2300      	movhi	r3, #0
 800214c:	b2db      	uxtb	r3, r3
 800214e:	e006      	b.n	800215e <HAL_I2C_Init+0x92>
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	4a7d      	ldr	r2, [pc, #500]	; (8002348 <HAL_I2C_Init+0x27c>)
 8002154:	4293      	cmp	r3, r2
 8002156:	bf94      	ite	ls
 8002158:	2301      	movls	r3, #1
 800215a:	2300      	movhi	r3, #0
 800215c:	b2db      	uxtb	r3, r3
 800215e:	2b00      	cmp	r3, #0
 8002160:	d001      	beq.n	8002166 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	e0e7      	b.n	8002336 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	4a78      	ldr	r2, [pc, #480]	; (800234c <HAL_I2C_Init+0x280>)
 800216a:	fba2 2303 	umull	r2, r3, r2, r3
 800216e:	0c9b      	lsrs	r3, r3, #18
 8002170:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	68ba      	ldr	r2, [r7, #8]
 8002182:	430a      	orrs	r2, r1
 8002184:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	6a1b      	ldr	r3, [r3, #32]
 800218c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	4a6a      	ldr	r2, [pc, #424]	; (8002340 <HAL_I2C_Init+0x274>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d802      	bhi.n	80021a0 <HAL_I2C_Init+0xd4>
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	3301      	adds	r3, #1
 800219e:	e009      	b.n	80021b4 <HAL_I2C_Init+0xe8>
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80021a6:	fb02 f303 	mul.w	r3, r2, r3
 80021aa:	4a69      	ldr	r2, [pc, #420]	; (8002350 <HAL_I2C_Init+0x284>)
 80021ac:	fba2 2303 	umull	r2, r3, r2, r3
 80021b0:	099b      	lsrs	r3, r3, #6
 80021b2:	3301      	adds	r3, #1
 80021b4:	687a      	ldr	r2, [r7, #4]
 80021b6:	6812      	ldr	r2, [r2, #0]
 80021b8:	430b      	orrs	r3, r1
 80021ba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	69db      	ldr	r3, [r3, #28]
 80021c2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80021c6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	495c      	ldr	r1, [pc, #368]	; (8002340 <HAL_I2C_Init+0x274>)
 80021d0:	428b      	cmp	r3, r1
 80021d2:	d819      	bhi.n	8002208 <HAL_I2C_Init+0x13c>
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	1e59      	subs	r1, r3, #1
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	005b      	lsls	r3, r3, #1
 80021de:	fbb1 f3f3 	udiv	r3, r1, r3
 80021e2:	1c59      	adds	r1, r3, #1
 80021e4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80021e8:	400b      	ands	r3, r1
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d00a      	beq.n	8002204 <HAL_I2C_Init+0x138>
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	1e59      	subs	r1, r3, #1
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	005b      	lsls	r3, r3, #1
 80021f8:	fbb1 f3f3 	udiv	r3, r1, r3
 80021fc:	3301      	adds	r3, #1
 80021fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002202:	e051      	b.n	80022a8 <HAL_I2C_Init+0x1dc>
 8002204:	2304      	movs	r3, #4
 8002206:	e04f      	b.n	80022a8 <HAL_I2C_Init+0x1dc>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d111      	bne.n	8002234 <HAL_I2C_Init+0x168>
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	1e58      	subs	r0, r3, #1
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6859      	ldr	r1, [r3, #4]
 8002218:	460b      	mov	r3, r1
 800221a:	005b      	lsls	r3, r3, #1
 800221c:	440b      	add	r3, r1
 800221e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002222:	3301      	adds	r3, #1
 8002224:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002228:	2b00      	cmp	r3, #0
 800222a:	bf0c      	ite	eq
 800222c:	2301      	moveq	r3, #1
 800222e:	2300      	movne	r3, #0
 8002230:	b2db      	uxtb	r3, r3
 8002232:	e012      	b.n	800225a <HAL_I2C_Init+0x18e>
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	1e58      	subs	r0, r3, #1
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6859      	ldr	r1, [r3, #4]
 800223c:	460b      	mov	r3, r1
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	440b      	add	r3, r1
 8002242:	0099      	lsls	r1, r3, #2
 8002244:	440b      	add	r3, r1
 8002246:	fbb0 f3f3 	udiv	r3, r0, r3
 800224a:	3301      	adds	r3, #1
 800224c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002250:	2b00      	cmp	r3, #0
 8002252:	bf0c      	ite	eq
 8002254:	2301      	moveq	r3, #1
 8002256:	2300      	movne	r3, #0
 8002258:	b2db      	uxtb	r3, r3
 800225a:	2b00      	cmp	r3, #0
 800225c:	d001      	beq.n	8002262 <HAL_I2C_Init+0x196>
 800225e:	2301      	movs	r3, #1
 8002260:	e022      	b.n	80022a8 <HAL_I2C_Init+0x1dc>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d10e      	bne.n	8002288 <HAL_I2C_Init+0x1bc>
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	1e58      	subs	r0, r3, #1
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6859      	ldr	r1, [r3, #4]
 8002272:	460b      	mov	r3, r1
 8002274:	005b      	lsls	r3, r3, #1
 8002276:	440b      	add	r3, r1
 8002278:	fbb0 f3f3 	udiv	r3, r0, r3
 800227c:	3301      	adds	r3, #1
 800227e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002282:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002286:	e00f      	b.n	80022a8 <HAL_I2C_Init+0x1dc>
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	1e58      	subs	r0, r3, #1
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6859      	ldr	r1, [r3, #4]
 8002290:	460b      	mov	r3, r1
 8002292:	009b      	lsls	r3, r3, #2
 8002294:	440b      	add	r3, r1
 8002296:	0099      	lsls	r1, r3, #2
 8002298:	440b      	add	r3, r1
 800229a:	fbb0 f3f3 	udiv	r3, r0, r3
 800229e:	3301      	adds	r3, #1
 80022a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80022a8:	6879      	ldr	r1, [r7, #4]
 80022aa:	6809      	ldr	r1, [r1, #0]
 80022ac:	4313      	orrs	r3, r2
 80022ae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	69da      	ldr	r2, [r3, #28]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6a1b      	ldr	r3, [r3, #32]
 80022c2:	431a      	orrs	r2, r3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	430a      	orrs	r2, r1
 80022ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80022d6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80022da:	687a      	ldr	r2, [r7, #4]
 80022dc:	6911      	ldr	r1, [r2, #16]
 80022de:	687a      	ldr	r2, [r7, #4]
 80022e0:	68d2      	ldr	r2, [r2, #12]
 80022e2:	4311      	orrs	r1, r2
 80022e4:	687a      	ldr	r2, [r7, #4]
 80022e6:	6812      	ldr	r2, [r2, #0]
 80022e8:	430b      	orrs	r3, r1
 80022ea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	68db      	ldr	r3, [r3, #12]
 80022f2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	695a      	ldr	r2, [r3, #20]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	699b      	ldr	r3, [r3, #24]
 80022fe:	431a      	orrs	r2, r3
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	430a      	orrs	r2, r1
 8002306:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f042 0201 	orr.w	r2, r2, #1
 8002316:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2200      	movs	r2, #0
 800231c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2220      	movs	r2, #32
 8002322:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2200      	movs	r2, #0
 800232a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2200      	movs	r2, #0
 8002330:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002334:	2300      	movs	r3, #0
}
 8002336:	4618      	mov	r0, r3
 8002338:	3710      	adds	r7, #16
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	000186a0 	.word	0x000186a0
 8002344:	001e847f 	.word	0x001e847f
 8002348:	003d08ff 	.word	0x003d08ff
 800234c:	431bde83 	.word	0x431bde83
 8002350:	10624dd3 	.word	0x10624dd3

08002354 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b086      	sub	sp, #24
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d101      	bne.n	8002366 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e267      	b.n	8002836 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 0301 	and.w	r3, r3, #1
 800236e:	2b00      	cmp	r3, #0
 8002370:	d075      	beq.n	800245e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002372:	4b88      	ldr	r3, [pc, #544]	; (8002594 <HAL_RCC_OscConfig+0x240>)
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	f003 030c 	and.w	r3, r3, #12
 800237a:	2b04      	cmp	r3, #4
 800237c:	d00c      	beq.n	8002398 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800237e:	4b85      	ldr	r3, [pc, #532]	; (8002594 <HAL_RCC_OscConfig+0x240>)
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002386:	2b08      	cmp	r3, #8
 8002388:	d112      	bne.n	80023b0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800238a:	4b82      	ldr	r3, [pc, #520]	; (8002594 <HAL_RCC_OscConfig+0x240>)
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002392:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002396:	d10b      	bne.n	80023b0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002398:	4b7e      	ldr	r3, [pc, #504]	; (8002594 <HAL_RCC_OscConfig+0x240>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d05b      	beq.n	800245c <HAL_RCC_OscConfig+0x108>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d157      	bne.n	800245c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	e242      	b.n	8002836 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023b8:	d106      	bne.n	80023c8 <HAL_RCC_OscConfig+0x74>
 80023ba:	4b76      	ldr	r3, [pc, #472]	; (8002594 <HAL_RCC_OscConfig+0x240>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a75      	ldr	r2, [pc, #468]	; (8002594 <HAL_RCC_OscConfig+0x240>)
 80023c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023c4:	6013      	str	r3, [r2, #0]
 80023c6:	e01d      	b.n	8002404 <HAL_RCC_OscConfig+0xb0>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023d0:	d10c      	bne.n	80023ec <HAL_RCC_OscConfig+0x98>
 80023d2:	4b70      	ldr	r3, [pc, #448]	; (8002594 <HAL_RCC_OscConfig+0x240>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a6f      	ldr	r2, [pc, #444]	; (8002594 <HAL_RCC_OscConfig+0x240>)
 80023d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023dc:	6013      	str	r3, [r2, #0]
 80023de:	4b6d      	ldr	r3, [pc, #436]	; (8002594 <HAL_RCC_OscConfig+0x240>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a6c      	ldr	r2, [pc, #432]	; (8002594 <HAL_RCC_OscConfig+0x240>)
 80023e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023e8:	6013      	str	r3, [r2, #0]
 80023ea:	e00b      	b.n	8002404 <HAL_RCC_OscConfig+0xb0>
 80023ec:	4b69      	ldr	r3, [pc, #420]	; (8002594 <HAL_RCC_OscConfig+0x240>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a68      	ldr	r2, [pc, #416]	; (8002594 <HAL_RCC_OscConfig+0x240>)
 80023f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023f6:	6013      	str	r3, [r2, #0]
 80023f8:	4b66      	ldr	r3, [pc, #408]	; (8002594 <HAL_RCC_OscConfig+0x240>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a65      	ldr	r2, [pc, #404]	; (8002594 <HAL_RCC_OscConfig+0x240>)
 80023fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002402:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d013      	beq.n	8002434 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800240c:	f7ff f91c 	bl	8001648 <HAL_GetTick>
 8002410:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002412:	e008      	b.n	8002426 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002414:	f7ff f918 	bl	8001648 <HAL_GetTick>
 8002418:	4602      	mov	r2, r0
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	2b64      	cmp	r3, #100	; 0x64
 8002420:	d901      	bls.n	8002426 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002422:	2303      	movs	r3, #3
 8002424:	e207      	b.n	8002836 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002426:	4b5b      	ldr	r3, [pc, #364]	; (8002594 <HAL_RCC_OscConfig+0x240>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d0f0      	beq.n	8002414 <HAL_RCC_OscConfig+0xc0>
 8002432:	e014      	b.n	800245e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002434:	f7ff f908 	bl	8001648 <HAL_GetTick>
 8002438:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800243a:	e008      	b.n	800244e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800243c:	f7ff f904 	bl	8001648 <HAL_GetTick>
 8002440:	4602      	mov	r2, r0
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	2b64      	cmp	r3, #100	; 0x64
 8002448:	d901      	bls.n	800244e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800244a:	2303      	movs	r3, #3
 800244c:	e1f3      	b.n	8002836 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800244e:	4b51      	ldr	r3, [pc, #324]	; (8002594 <HAL_RCC_OscConfig+0x240>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002456:	2b00      	cmp	r3, #0
 8002458:	d1f0      	bne.n	800243c <HAL_RCC_OscConfig+0xe8>
 800245a:	e000      	b.n	800245e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800245c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 0302 	and.w	r3, r3, #2
 8002466:	2b00      	cmp	r3, #0
 8002468:	d063      	beq.n	8002532 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800246a:	4b4a      	ldr	r3, [pc, #296]	; (8002594 <HAL_RCC_OscConfig+0x240>)
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	f003 030c 	and.w	r3, r3, #12
 8002472:	2b00      	cmp	r3, #0
 8002474:	d00b      	beq.n	800248e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002476:	4b47      	ldr	r3, [pc, #284]	; (8002594 <HAL_RCC_OscConfig+0x240>)
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800247e:	2b08      	cmp	r3, #8
 8002480:	d11c      	bne.n	80024bc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002482:	4b44      	ldr	r3, [pc, #272]	; (8002594 <HAL_RCC_OscConfig+0x240>)
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800248a:	2b00      	cmp	r3, #0
 800248c:	d116      	bne.n	80024bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800248e:	4b41      	ldr	r3, [pc, #260]	; (8002594 <HAL_RCC_OscConfig+0x240>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 0302 	and.w	r3, r3, #2
 8002496:	2b00      	cmp	r3, #0
 8002498:	d005      	beq.n	80024a6 <HAL_RCC_OscConfig+0x152>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	68db      	ldr	r3, [r3, #12]
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d001      	beq.n	80024a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e1c7      	b.n	8002836 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024a6:	4b3b      	ldr	r3, [pc, #236]	; (8002594 <HAL_RCC_OscConfig+0x240>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	691b      	ldr	r3, [r3, #16]
 80024b2:	00db      	lsls	r3, r3, #3
 80024b4:	4937      	ldr	r1, [pc, #220]	; (8002594 <HAL_RCC_OscConfig+0x240>)
 80024b6:	4313      	orrs	r3, r2
 80024b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024ba:	e03a      	b.n	8002532 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d020      	beq.n	8002506 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024c4:	4b34      	ldr	r3, [pc, #208]	; (8002598 <HAL_RCC_OscConfig+0x244>)
 80024c6:	2201      	movs	r2, #1
 80024c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ca:	f7ff f8bd 	bl	8001648 <HAL_GetTick>
 80024ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024d0:	e008      	b.n	80024e4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024d2:	f7ff f8b9 	bl	8001648 <HAL_GetTick>
 80024d6:	4602      	mov	r2, r0
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	1ad3      	subs	r3, r2, r3
 80024dc:	2b02      	cmp	r3, #2
 80024de:	d901      	bls.n	80024e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80024e0:	2303      	movs	r3, #3
 80024e2:	e1a8      	b.n	8002836 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024e4:	4b2b      	ldr	r3, [pc, #172]	; (8002594 <HAL_RCC_OscConfig+0x240>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 0302 	and.w	r3, r3, #2
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d0f0      	beq.n	80024d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024f0:	4b28      	ldr	r3, [pc, #160]	; (8002594 <HAL_RCC_OscConfig+0x240>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	691b      	ldr	r3, [r3, #16]
 80024fc:	00db      	lsls	r3, r3, #3
 80024fe:	4925      	ldr	r1, [pc, #148]	; (8002594 <HAL_RCC_OscConfig+0x240>)
 8002500:	4313      	orrs	r3, r2
 8002502:	600b      	str	r3, [r1, #0]
 8002504:	e015      	b.n	8002532 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002506:	4b24      	ldr	r3, [pc, #144]	; (8002598 <HAL_RCC_OscConfig+0x244>)
 8002508:	2200      	movs	r2, #0
 800250a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800250c:	f7ff f89c 	bl	8001648 <HAL_GetTick>
 8002510:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002512:	e008      	b.n	8002526 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002514:	f7ff f898 	bl	8001648 <HAL_GetTick>
 8002518:	4602      	mov	r2, r0
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	2b02      	cmp	r3, #2
 8002520:	d901      	bls.n	8002526 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002522:	2303      	movs	r3, #3
 8002524:	e187      	b.n	8002836 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002526:	4b1b      	ldr	r3, [pc, #108]	; (8002594 <HAL_RCC_OscConfig+0x240>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 0302 	and.w	r3, r3, #2
 800252e:	2b00      	cmp	r3, #0
 8002530:	d1f0      	bne.n	8002514 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 0308 	and.w	r3, r3, #8
 800253a:	2b00      	cmp	r3, #0
 800253c:	d036      	beq.n	80025ac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	695b      	ldr	r3, [r3, #20]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d016      	beq.n	8002574 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002546:	4b15      	ldr	r3, [pc, #84]	; (800259c <HAL_RCC_OscConfig+0x248>)
 8002548:	2201      	movs	r2, #1
 800254a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800254c:	f7ff f87c 	bl	8001648 <HAL_GetTick>
 8002550:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002552:	e008      	b.n	8002566 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002554:	f7ff f878 	bl	8001648 <HAL_GetTick>
 8002558:	4602      	mov	r2, r0
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	2b02      	cmp	r3, #2
 8002560:	d901      	bls.n	8002566 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002562:	2303      	movs	r3, #3
 8002564:	e167      	b.n	8002836 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002566:	4b0b      	ldr	r3, [pc, #44]	; (8002594 <HAL_RCC_OscConfig+0x240>)
 8002568:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800256a:	f003 0302 	and.w	r3, r3, #2
 800256e:	2b00      	cmp	r3, #0
 8002570:	d0f0      	beq.n	8002554 <HAL_RCC_OscConfig+0x200>
 8002572:	e01b      	b.n	80025ac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002574:	4b09      	ldr	r3, [pc, #36]	; (800259c <HAL_RCC_OscConfig+0x248>)
 8002576:	2200      	movs	r2, #0
 8002578:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800257a:	f7ff f865 	bl	8001648 <HAL_GetTick>
 800257e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002580:	e00e      	b.n	80025a0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002582:	f7ff f861 	bl	8001648 <HAL_GetTick>
 8002586:	4602      	mov	r2, r0
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	1ad3      	subs	r3, r2, r3
 800258c:	2b02      	cmp	r3, #2
 800258e:	d907      	bls.n	80025a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002590:	2303      	movs	r3, #3
 8002592:	e150      	b.n	8002836 <HAL_RCC_OscConfig+0x4e2>
 8002594:	40023800 	.word	0x40023800
 8002598:	42470000 	.word	0x42470000
 800259c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025a0:	4b88      	ldr	r3, [pc, #544]	; (80027c4 <HAL_RCC_OscConfig+0x470>)
 80025a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025a4:	f003 0302 	and.w	r3, r3, #2
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d1ea      	bne.n	8002582 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0304 	and.w	r3, r3, #4
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	f000 8097 	beq.w	80026e8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025ba:	2300      	movs	r3, #0
 80025bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025be:	4b81      	ldr	r3, [pc, #516]	; (80027c4 <HAL_RCC_OscConfig+0x470>)
 80025c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d10f      	bne.n	80025ea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025ca:	2300      	movs	r3, #0
 80025cc:	60bb      	str	r3, [r7, #8]
 80025ce:	4b7d      	ldr	r3, [pc, #500]	; (80027c4 <HAL_RCC_OscConfig+0x470>)
 80025d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d2:	4a7c      	ldr	r2, [pc, #496]	; (80027c4 <HAL_RCC_OscConfig+0x470>)
 80025d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025d8:	6413      	str	r3, [r2, #64]	; 0x40
 80025da:	4b7a      	ldr	r3, [pc, #488]	; (80027c4 <HAL_RCC_OscConfig+0x470>)
 80025dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025e2:	60bb      	str	r3, [r7, #8]
 80025e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025e6:	2301      	movs	r3, #1
 80025e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025ea:	4b77      	ldr	r3, [pc, #476]	; (80027c8 <HAL_RCC_OscConfig+0x474>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d118      	bne.n	8002628 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025f6:	4b74      	ldr	r3, [pc, #464]	; (80027c8 <HAL_RCC_OscConfig+0x474>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a73      	ldr	r2, [pc, #460]	; (80027c8 <HAL_RCC_OscConfig+0x474>)
 80025fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002600:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002602:	f7ff f821 	bl	8001648 <HAL_GetTick>
 8002606:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002608:	e008      	b.n	800261c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800260a:	f7ff f81d 	bl	8001648 <HAL_GetTick>
 800260e:	4602      	mov	r2, r0
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	1ad3      	subs	r3, r2, r3
 8002614:	2b02      	cmp	r3, #2
 8002616:	d901      	bls.n	800261c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002618:	2303      	movs	r3, #3
 800261a:	e10c      	b.n	8002836 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800261c:	4b6a      	ldr	r3, [pc, #424]	; (80027c8 <HAL_RCC_OscConfig+0x474>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002624:	2b00      	cmp	r3, #0
 8002626:	d0f0      	beq.n	800260a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	2b01      	cmp	r3, #1
 800262e:	d106      	bne.n	800263e <HAL_RCC_OscConfig+0x2ea>
 8002630:	4b64      	ldr	r3, [pc, #400]	; (80027c4 <HAL_RCC_OscConfig+0x470>)
 8002632:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002634:	4a63      	ldr	r2, [pc, #396]	; (80027c4 <HAL_RCC_OscConfig+0x470>)
 8002636:	f043 0301 	orr.w	r3, r3, #1
 800263a:	6713      	str	r3, [r2, #112]	; 0x70
 800263c:	e01c      	b.n	8002678 <HAL_RCC_OscConfig+0x324>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	2b05      	cmp	r3, #5
 8002644:	d10c      	bne.n	8002660 <HAL_RCC_OscConfig+0x30c>
 8002646:	4b5f      	ldr	r3, [pc, #380]	; (80027c4 <HAL_RCC_OscConfig+0x470>)
 8002648:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800264a:	4a5e      	ldr	r2, [pc, #376]	; (80027c4 <HAL_RCC_OscConfig+0x470>)
 800264c:	f043 0304 	orr.w	r3, r3, #4
 8002650:	6713      	str	r3, [r2, #112]	; 0x70
 8002652:	4b5c      	ldr	r3, [pc, #368]	; (80027c4 <HAL_RCC_OscConfig+0x470>)
 8002654:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002656:	4a5b      	ldr	r2, [pc, #364]	; (80027c4 <HAL_RCC_OscConfig+0x470>)
 8002658:	f043 0301 	orr.w	r3, r3, #1
 800265c:	6713      	str	r3, [r2, #112]	; 0x70
 800265e:	e00b      	b.n	8002678 <HAL_RCC_OscConfig+0x324>
 8002660:	4b58      	ldr	r3, [pc, #352]	; (80027c4 <HAL_RCC_OscConfig+0x470>)
 8002662:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002664:	4a57      	ldr	r2, [pc, #348]	; (80027c4 <HAL_RCC_OscConfig+0x470>)
 8002666:	f023 0301 	bic.w	r3, r3, #1
 800266a:	6713      	str	r3, [r2, #112]	; 0x70
 800266c:	4b55      	ldr	r3, [pc, #340]	; (80027c4 <HAL_RCC_OscConfig+0x470>)
 800266e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002670:	4a54      	ldr	r2, [pc, #336]	; (80027c4 <HAL_RCC_OscConfig+0x470>)
 8002672:	f023 0304 	bic.w	r3, r3, #4
 8002676:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d015      	beq.n	80026ac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002680:	f7fe ffe2 	bl	8001648 <HAL_GetTick>
 8002684:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002686:	e00a      	b.n	800269e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002688:	f7fe ffde 	bl	8001648 <HAL_GetTick>
 800268c:	4602      	mov	r2, r0
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	f241 3288 	movw	r2, #5000	; 0x1388
 8002696:	4293      	cmp	r3, r2
 8002698:	d901      	bls.n	800269e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	e0cb      	b.n	8002836 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800269e:	4b49      	ldr	r3, [pc, #292]	; (80027c4 <HAL_RCC_OscConfig+0x470>)
 80026a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026a2:	f003 0302 	and.w	r3, r3, #2
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d0ee      	beq.n	8002688 <HAL_RCC_OscConfig+0x334>
 80026aa:	e014      	b.n	80026d6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026ac:	f7fe ffcc 	bl	8001648 <HAL_GetTick>
 80026b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026b2:	e00a      	b.n	80026ca <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026b4:	f7fe ffc8 	bl	8001648 <HAL_GetTick>
 80026b8:	4602      	mov	r2, r0
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	f241 3288 	movw	r2, #5000	; 0x1388
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d901      	bls.n	80026ca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80026c6:	2303      	movs	r3, #3
 80026c8:	e0b5      	b.n	8002836 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026ca:	4b3e      	ldr	r3, [pc, #248]	; (80027c4 <HAL_RCC_OscConfig+0x470>)
 80026cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ce:	f003 0302 	and.w	r3, r3, #2
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d1ee      	bne.n	80026b4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026d6:	7dfb      	ldrb	r3, [r7, #23]
 80026d8:	2b01      	cmp	r3, #1
 80026da:	d105      	bne.n	80026e8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026dc:	4b39      	ldr	r3, [pc, #228]	; (80027c4 <HAL_RCC_OscConfig+0x470>)
 80026de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e0:	4a38      	ldr	r2, [pc, #224]	; (80027c4 <HAL_RCC_OscConfig+0x470>)
 80026e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026e6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	699b      	ldr	r3, [r3, #24]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	f000 80a1 	beq.w	8002834 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80026f2:	4b34      	ldr	r3, [pc, #208]	; (80027c4 <HAL_RCC_OscConfig+0x470>)
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	f003 030c 	and.w	r3, r3, #12
 80026fa:	2b08      	cmp	r3, #8
 80026fc:	d05c      	beq.n	80027b8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	699b      	ldr	r3, [r3, #24]
 8002702:	2b02      	cmp	r3, #2
 8002704:	d141      	bne.n	800278a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002706:	4b31      	ldr	r3, [pc, #196]	; (80027cc <HAL_RCC_OscConfig+0x478>)
 8002708:	2200      	movs	r2, #0
 800270a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800270c:	f7fe ff9c 	bl	8001648 <HAL_GetTick>
 8002710:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002712:	e008      	b.n	8002726 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002714:	f7fe ff98 	bl	8001648 <HAL_GetTick>
 8002718:	4602      	mov	r2, r0
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	2b02      	cmp	r3, #2
 8002720:	d901      	bls.n	8002726 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002722:	2303      	movs	r3, #3
 8002724:	e087      	b.n	8002836 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002726:	4b27      	ldr	r3, [pc, #156]	; (80027c4 <HAL_RCC_OscConfig+0x470>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d1f0      	bne.n	8002714 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	69da      	ldr	r2, [r3, #28]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6a1b      	ldr	r3, [r3, #32]
 800273a:	431a      	orrs	r2, r3
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002740:	019b      	lsls	r3, r3, #6
 8002742:	431a      	orrs	r2, r3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002748:	085b      	lsrs	r3, r3, #1
 800274a:	3b01      	subs	r3, #1
 800274c:	041b      	lsls	r3, r3, #16
 800274e:	431a      	orrs	r2, r3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002754:	061b      	lsls	r3, r3, #24
 8002756:	491b      	ldr	r1, [pc, #108]	; (80027c4 <HAL_RCC_OscConfig+0x470>)
 8002758:	4313      	orrs	r3, r2
 800275a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800275c:	4b1b      	ldr	r3, [pc, #108]	; (80027cc <HAL_RCC_OscConfig+0x478>)
 800275e:	2201      	movs	r2, #1
 8002760:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002762:	f7fe ff71 	bl	8001648 <HAL_GetTick>
 8002766:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002768:	e008      	b.n	800277c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800276a:	f7fe ff6d 	bl	8001648 <HAL_GetTick>
 800276e:	4602      	mov	r2, r0
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	1ad3      	subs	r3, r2, r3
 8002774:	2b02      	cmp	r3, #2
 8002776:	d901      	bls.n	800277c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002778:	2303      	movs	r3, #3
 800277a:	e05c      	b.n	8002836 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800277c:	4b11      	ldr	r3, [pc, #68]	; (80027c4 <HAL_RCC_OscConfig+0x470>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002784:	2b00      	cmp	r3, #0
 8002786:	d0f0      	beq.n	800276a <HAL_RCC_OscConfig+0x416>
 8002788:	e054      	b.n	8002834 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800278a:	4b10      	ldr	r3, [pc, #64]	; (80027cc <HAL_RCC_OscConfig+0x478>)
 800278c:	2200      	movs	r2, #0
 800278e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002790:	f7fe ff5a 	bl	8001648 <HAL_GetTick>
 8002794:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002796:	e008      	b.n	80027aa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002798:	f7fe ff56 	bl	8001648 <HAL_GetTick>
 800279c:	4602      	mov	r2, r0
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	2b02      	cmp	r3, #2
 80027a4:	d901      	bls.n	80027aa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80027a6:	2303      	movs	r3, #3
 80027a8:	e045      	b.n	8002836 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027aa:	4b06      	ldr	r3, [pc, #24]	; (80027c4 <HAL_RCC_OscConfig+0x470>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d1f0      	bne.n	8002798 <HAL_RCC_OscConfig+0x444>
 80027b6:	e03d      	b.n	8002834 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	699b      	ldr	r3, [r3, #24]
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d107      	bne.n	80027d0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	e038      	b.n	8002836 <HAL_RCC_OscConfig+0x4e2>
 80027c4:	40023800 	.word	0x40023800
 80027c8:	40007000 	.word	0x40007000
 80027cc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80027d0:	4b1b      	ldr	r3, [pc, #108]	; (8002840 <HAL_RCC_OscConfig+0x4ec>)
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	699b      	ldr	r3, [r3, #24]
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d028      	beq.n	8002830 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d121      	bne.n	8002830 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027f6:	429a      	cmp	r2, r3
 80027f8:	d11a      	bne.n	8002830 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027fa:	68fa      	ldr	r2, [r7, #12]
 80027fc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002800:	4013      	ands	r3, r2
 8002802:	687a      	ldr	r2, [r7, #4]
 8002804:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002806:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002808:	4293      	cmp	r3, r2
 800280a:	d111      	bne.n	8002830 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002816:	085b      	lsrs	r3, r3, #1
 8002818:	3b01      	subs	r3, #1
 800281a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800281c:	429a      	cmp	r2, r3
 800281e:	d107      	bne.n	8002830 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800282a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800282c:	429a      	cmp	r2, r3
 800282e:	d001      	beq.n	8002834 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002830:	2301      	movs	r3, #1
 8002832:	e000      	b.n	8002836 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002834:	2300      	movs	r3, #0
}
 8002836:	4618      	mov	r0, r3
 8002838:	3718      	adds	r7, #24
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	40023800 	.word	0x40023800

08002844 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b084      	sub	sp, #16
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
 800284c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d101      	bne.n	8002858 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	e0cc      	b.n	80029f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002858:	4b68      	ldr	r3, [pc, #416]	; (80029fc <HAL_RCC_ClockConfig+0x1b8>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 0307 	and.w	r3, r3, #7
 8002860:	683a      	ldr	r2, [r7, #0]
 8002862:	429a      	cmp	r2, r3
 8002864:	d90c      	bls.n	8002880 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002866:	4b65      	ldr	r3, [pc, #404]	; (80029fc <HAL_RCC_ClockConfig+0x1b8>)
 8002868:	683a      	ldr	r2, [r7, #0]
 800286a:	b2d2      	uxtb	r2, r2
 800286c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800286e:	4b63      	ldr	r3, [pc, #396]	; (80029fc <HAL_RCC_ClockConfig+0x1b8>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 0307 	and.w	r3, r3, #7
 8002876:	683a      	ldr	r2, [r7, #0]
 8002878:	429a      	cmp	r2, r3
 800287a:	d001      	beq.n	8002880 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	e0b8      	b.n	80029f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f003 0302 	and.w	r3, r3, #2
 8002888:	2b00      	cmp	r3, #0
 800288a:	d020      	beq.n	80028ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 0304 	and.w	r3, r3, #4
 8002894:	2b00      	cmp	r3, #0
 8002896:	d005      	beq.n	80028a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002898:	4b59      	ldr	r3, [pc, #356]	; (8002a00 <HAL_RCC_ClockConfig+0x1bc>)
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	4a58      	ldr	r2, [pc, #352]	; (8002a00 <HAL_RCC_ClockConfig+0x1bc>)
 800289e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80028a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 0308 	and.w	r3, r3, #8
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d005      	beq.n	80028bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028b0:	4b53      	ldr	r3, [pc, #332]	; (8002a00 <HAL_RCC_ClockConfig+0x1bc>)
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	4a52      	ldr	r2, [pc, #328]	; (8002a00 <HAL_RCC_ClockConfig+0x1bc>)
 80028b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80028ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028bc:	4b50      	ldr	r3, [pc, #320]	; (8002a00 <HAL_RCC_ClockConfig+0x1bc>)
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	494d      	ldr	r1, [pc, #308]	; (8002a00 <HAL_RCC_ClockConfig+0x1bc>)
 80028ca:	4313      	orrs	r3, r2
 80028cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 0301 	and.w	r3, r3, #1
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d044      	beq.n	8002964 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d107      	bne.n	80028f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028e2:	4b47      	ldr	r3, [pc, #284]	; (8002a00 <HAL_RCC_ClockConfig+0x1bc>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d119      	bne.n	8002922 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e07f      	b.n	80029f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	2b02      	cmp	r3, #2
 80028f8:	d003      	beq.n	8002902 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028fe:	2b03      	cmp	r3, #3
 8002900:	d107      	bne.n	8002912 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002902:	4b3f      	ldr	r3, [pc, #252]	; (8002a00 <HAL_RCC_ClockConfig+0x1bc>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800290a:	2b00      	cmp	r3, #0
 800290c:	d109      	bne.n	8002922 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e06f      	b.n	80029f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002912:	4b3b      	ldr	r3, [pc, #236]	; (8002a00 <HAL_RCC_ClockConfig+0x1bc>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 0302 	and.w	r3, r3, #2
 800291a:	2b00      	cmp	r3, #0
 800291c:	d101      	bne.n	8002922 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e067      	b.n	80029f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002922:	4b37      	ldr	r3, [pc, #220]	; (8002a00 <HAL_RCC_ClockConfig+0x1bc>)
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	f023 0203 	bic.w	r2, r3, #3
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	4934      	ldr	r1, [pc, #208]	; (8002a00 <HAL_RCC_ClockConfig+0x1bc>)
 8002930:	4313      	orrs	r3, r2
 8002932:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002934:	f7fe fe88 	bl	8001648 <HAL_GetTick>
 8002938:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800293a:	e00a      	b.n	8002952 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800293c:	f7fe fe84 	bl	8001648 <HAL_GetTick>
 8002940:	4602      	mov	r2, r0
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	f241 3288 	movw	r2, #5000	; 0x1388
 800294a:	4293      	cmp	r3, r2
 800294c:	d901      	bls.n	8002952 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	e04f      	b.n	80029f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002952:	4b2b      	ldr	r3, [pc, #172]	; (8002a00 <HAL_RCC_ClockConfig+0x1bc>)
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	f003 020c 	and.w	r2, r3, #12
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	429a      	cmp	r2, r3
 8002962:	d1eb      	bne.n	800293c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002964:	4b25      	ldr	r3, [pc, #148]	; (80029fc <HAL_RCC_ClockConfig+0x1b8>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0307 	and.w	r3, r3, #7
 800296c:	683a      	ldr	r2, [r7, #0]
 800296e:	429a      	cmp	r2, r3
 8002970:	d20c      	bcs.n	800298c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002972:	4b22      	ldr	r3, [pc, #136]	; (80029fc <HAL_RCC_ClockConfig+0x1b8>)
 8002974:	683a      	ldr	r2, [r7, #0]
 8002976:	b2d2      	uxtb	r2, r2
 8002978:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800297a:	4b20      	ldr	r3, [pc, #128]	; (80029fc <HAL_RCC_ClockConfig+0x1b8>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 0307 	and.w	r3, r3, #7
 8002982:	683a      	ldr	r2, [r7, #0]
 8002984:	429a      	cmp	r2, r3
 8002986:	d001      	beq.n	800298c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	e032      	b.n	80029f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f003 0304 	and.w	r3, r3, #4
 8002994:	2b00      	cmp	r3, #0
 8002996:	d008      	beq.n	80029aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002998:	4b19      	ldr	r3, [pc, #100]	; (8002a00 <HAL_RCC_ClockConfig+0x1bc>)
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	4916      	ldr	r1, [pc, #88]	; (8002a00 <HAL_RCC_ClockConfig+0x1bc>)
 80029a6:	4313      	orrs	r3, r2
 80029a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 0308 	and.w	r3, r3, #8
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d009      	beq.n	80029ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029b6:	4b12      	ldr	r3, [pc, #72]	; (8002a00 <HAL_RCC_ClockConfig+0x1bc>)
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	691b      	ldr	r3, [r3, #16]
 80029c2:	00db      	lsls	r3, r3, #3
 80029c4:	490e      	ldr	r1, [pc, #56]	; (8002a00 <HAL_RCC_ClockConfig+0x1bc>)
 80029c6:	4313      	orrs	r3, r2
 80029c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80029ca:	f000 f821 	bl	8002a10 <HAL_RCC_GetSysClockFreq>
 80029ce:	4602      	mov	r2, r0
 80029d0:	4b0b      	ldr	r3, [pc, #44]	; (8002a00 <HAL_RCC_ClockConfig+0x1bc>)
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	091b      	lsrs	r3, r3, #4
 80029d6:	f003 030f 	and.w	r3, r3, #15
 80029da:	490a      	ldr	r1, [pc, #40]	; (8002a04 <HAL_RCC_ClockConfig+0x1c0>)
 80029dc:	5ccb      	ldrb	r3, [r1, r3]
 80029de:	fa22 f303 	lsr.w	r3, r2, r3
 80029e2:	4a09      	ldr	r2, [pc, #36]	; (8002a08 <HAL_RCC_ClockConfig+0x1c4>)
 80029e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80029e6:	4b09      	ldr	r3, [pc, #36]	; (8002a0c <HAL_RCC_ClockConfig+0x1c8>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4618      	mov	r0, r3
 80029ec:	f7fe fde8 	bl	80015c0 <HAL_InitTick>

  return HAL_OK;
 80029f0:	2300      	movs	r3, #0
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3710      	adds	r7, #16
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	40023c00 	.word	0x40023c00
 8002a00:	40023800 	.word	0x40023800
 8002a04:	08007880 	.word	0x08007880
 8002a08:	20000000 	.word	0x20000000
 8002a0c:	20000004 	.word	0x20000004

08002a10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a14:	b094      	sub	sp, #80	; 0x50
 8002a16:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	647b      	str	r3, [r7, #68]	; 0x44
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a20:	2300      	movs	r3, #0
 8002a22:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002a24:	2300      	movs	r3, #0
 8002a26:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a28:	4b79      	ldr	r3, [pc, #484]	; (8002c10 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	f003 030c 	and.w	r3, r3, #12
 8002a30:	2b08      	cmp	r3, #8
 8002a32:	d00d      	beq.n	8002a50 <HAL_RCC_GetSysClockFreq+0x40>
 8002a34:	2b08      	cmp	r3, #8
 8002a36:	f200 80e1 	bhi.w	8002bfc <HAL_RCC_GetSysClockFreq+0x1ec>
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d002      	beq.n	8002a44 <HAL_RCC_GetSysClockFreq+0x34>
 8002a3e:	2b04      	cmp	r3, #4
 8002a40:	d003      	beq.n	8002a4a <HAL_RCC_GetSysClockFreq+0x3a>
 8002a42:	e0db      	b.n	8002bfc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a44:	4b73      	ldr	r3, [pc, #460]	; (8002c14 <HAL_RCC_GetSysClockFreq+0x204>)
 8002a46:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002a48:	e0db      	b.n	8002c02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a4a:	4b73      	ldr	r3, [pc, #460]	; (8002c18 <HAL_RCC_GetSysClockFreq+0x208>)
 8002a4c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a4e:	e0d8      	b.n	8002c02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a50:	4b6f      	ldr	r3, [pc, #444]	; (8002c10 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a58:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a5a:	4b6d      	ldr	r3, [pc, #436]	; (8002c10 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d063      	beq.n	8002b2e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a66:	4b6a      	ldr	r3, [pc, #424]	; (8002c10 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	099b      	lsrs	r3, r3, #6
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a70:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a78:	633b      	str	r3, [r7, #48]	; 0x30
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	637b      	str	r3, [r7, #52]	; 0x34
 8002a7e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002a82:	4622      	mov	r2, r4
 8002a84:	462b      	mov	r3, r5
 8002a86:	f04f 0000 	mov.w	r0, #0
 8002a8a:	f04f 0100 	mov.w	r1, #0
 8002a8e:	0159      	lsls	r1, r3, #5
 8002a90:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a94:	0150      	lsls	r0, r2, #5
 8002a96:	4602      	mov	r2, r0
 8002a98:	460b      	mov	r3, r1
 8002a9a:	4621      	mov	r1, r4
 8002a9c:	1a51      	subs	r1, r2, r1
 8002a9e:	6139      	str	r1, [r7, #16]
 8002aa0:	4629      	mov	r1, r5
 8002aa2:	eb63 0301 	sbc.w	r3, r3, r1
 8002aa6:	617b      	str	r3, [r7, #20]
 8002aa8:	f04f 0200 	mov.w	r2, #0
 8002aac:	f04f 0300 	mov.w	r3, #0
 8002ab0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ab4:	4659      	mov	r1, fp
 8002ab6:	018b      	lsls	r3, r1, #6
 8002ab8:	4651      	mov	r1, sl
 8002aba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002abe:	4651      	mov	r1, sl
 8002ac0:	018a      	lsls	r2, r1, #6
 8002ac2:	4651      	mov	r1, sl
 8002ac4:	ebb2 0801 	subs.w	r8, r2, r1
 8002ac8:	4659      	mov	r1, fp
 8002aca:	eb63 0901 	sbc.w	r9, r3, r1
 8002ace:	f04f 0200 	mov.w	r2, #0
 8002ad2:	f04f 0300 	mov.w	r3, #0
 8002ad6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ada:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002ade:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002ae2:	4690      	mov	r8, r2
 8002ae4:	4699      	mov	r9, r3
 8002ae6:	4623      	mov	r3, r4
 8002ae8:	eb18 0303 	adds.w	r3, r8, r3
 8002aec:	60bb      	str	r3, [r7, #8]
 8002aee:	462b      	mov	r3, r5
 8002af0:	eb49 0303 	adc.w	r3, r9, r3
 8002af4:	60fb      	str	r3, [r7, #12]
 8002af6:	f04f 0200 	mov.w	r2, #0
 8002afa:	f04f 0300 	mov.w	r3, #0
 8002afe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002b02:	4629      	mov	r1, r5
 8002b04:	024b      	lsls	r3, r1, #9
 8002b06:	4621      	mov	r1, r4
 8002b08:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002b0c:	4621      	mov	r1, r4
 8002b0e:	024a      	lsls	r2, r1, #9
 8002b10:	4610      	mov	r0, r2
 8002b12:	4619      	mov	r1, r3
 8002b14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b16:	2200      	movs	r2, #0
 8002b18:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b1a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002b1c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002b20:	f7fd fb5e 	bl	80001e0 <__aeabi_uldivmod>
 8002b24:	4602      	mov	r2, r0
 8002b26:	460b      	mov	r3, r1
 8002b28:	4613      	mov	r3, r2
 8002b2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b2c:	e058      	b.n	8002be0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b2e:	4b38      	ldr	r3, [pc, #224]	; (8002c10 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	099b      	lsrs	r3, r3, #6
 8002b34:	2200      	movs	r2, #0
 8002b36:	4618      	mov	r0, r3
 8002b38:	4611      	mov	r1, r2
 8002b3a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002b3e:	623b      	str	r3, [r7, #32]
 8002b40:	2300      	movs	r3, #0
 8002b42:	627b      	str	r3, [r7, #36]	; 0x24
 8002b44:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002b48:	4642      	mov	r2, r8
 8002b4a:	464b      	mov	r3, r9
 8002b4c:	f04f 0000 	mov.w	r0, #0
 8002b50:	f04f 0100 	mov.w	r1, #0
 8002b54:	0159      	lsls	r1, r3, #5
 8002b56:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b5a:	0150      	lsls	r0, r2, #5
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	460b      	mov	r3, r1
 8002b60:	4641      	mov	r1, r8
 8002b62:	ebb2 0a01 	subs.w	sl, r2, r1
 8002b66:	4649      	mov	r1, r9
 8002b68:	eb63 0b01 	sbc.w	fp, r3, r1
 8002b6c:	f04f 0200 	mov.w	r2, #0
 8002b70:	f04f 0300 	mov.w	r3, #0
 8002b74:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002b78:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002b7c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002b80:	ebb2 040a 	subs.w	r4, r2, sl
 8002b84:	eb63 050b 	sbc.w	r5, r3, fp
 8002b88:	f04f 0200 	mov.w	r2, #0
 8002b8c:	f04f 0300 	mov.w	r3, #0
 8002b90:	00eb      	lsls	r3, r5, #3
 8002b92:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b96:	00e2      	lsls	r2, r4, #3
 8002b98:	4614      	mov	r4, r2
 8002b9a:	461d      	mov	r5, r3
 8002b9c:	4643      	mov	r3, r8
 8002b9e:	18e3      	adds	r3, r4, r3
 8002ba0:	603b      	str	r3, [r7, #0]
 8002ba2:	464b      	mov	r3, r9
 8002ba4:	eb45 0303 	adc.w	r3, r5, r3
 8002ba8:	607b      	str	r3, [r7, #4]
 8002baa:	f04f 0200 	mov.w	r2, #0
 8002bae:	f04f 0300 	mov.w	r3, #0
 8002bb2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002bb6:	4629      	mov	r1, r5
 8002bb8:	028b      	lsls	r3, r1, #10
 8002bba:	4621      	mov	r1, r4
 8002bbc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002bc0:	4621      	mov	r1, r4
 8002bc2:	028a      	lsls	r2, r1, #10
 8002bc4:	4610      	mov	r0, r2
 8002bc6:	4619      	mov	r1, r3
 8002bc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bca:	2200      	movs	r2, #0
 8002bcc:	61bb      	str	r3, [r7, #24]
 8002bce:	61fa      	str	r2, [r7, #28]
 8002bd0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002bd4:	f7fd fb04 	bl	80001e0 <__aeabi_uldivmod>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	460b      	mov	r3, r1
 8002bdc:	4613      	mov	r3, r2
 8002bde:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002be0:	4b0b      	ldr	r3, [pc, #44]	; (8002c10 <HAL_RCC_GetSysClockFreq+0x200>)
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	0c1b      	lsrs	r3, r3, #16
 8002be6:	f003 0303 	and.w	r3, r3, #3
 8002bea:	3301      	adds	r3, #1
 8002bec:	005b      	lsls	r3, r3, #1
 8002bee:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002bf0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002bf2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bf8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002bfa:	e002      	b.n	8002c02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002bfc:	4b05      	ldr	r3, [pc, #20]	; (8002c14 <HAL_RCC_GetSysClockFreq+0x204>)
 8002bfe:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	3750      	adds	r7, #80	; 0x50
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c0e:	bf00      	nop
 8002c10:	40023800 	.word	0x40023800
 8002c14:	00f42400 	.word	0x00f42400
 8002c18:	007a1200 	.word	0x007a1200

08002c1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c20:	4b03      	ldr	r3, [pc, #12]	; (8002c30 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c22:	681b      	ldr	r3, [r3, #0]
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	46bd      	mov	sp, r7
 8002c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2c:	4770      	bx	lr
 8002c2e:	bf00      	nop
 8002c30:	20000000 	.word	0x20000000

08002c34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002c38:	f7ff fff0 	bl	8002c1c <HAL_RCC_GetHCLKFreq>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	4b05      	ldr	r3, [pc, #20]	; (8002c54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	0a9b      	lsrs	r3, r3, #10
 8002c44:	f003 0307 	and.w	r3, r3, #7
 8002c48:	4903      	ldr	r1, [pc, #12]	; (8002c58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c4a:	5ccb      	ldrb	r3, [r1, r3]
 8002c4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	40023800 	.word	0x40023800
 8002c58:	08007890 	.word	0x08007890

08002c5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002c60:	f7ff ffdc 	bl	8002c1c <HAL_RCC_GetHCLKFreq>
 8002c64:	4602      	mov	r2, r0
 8002c66:	4b05      	ldr	r3, [pc, #20]	; (8002c7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	0b5b      	lsrs	r3, r3, #13
 8002c6c:	f003 0307 	and.w	r3, r3, #7
 8002c70:	4903      	ldr	r1, [pc, #12]	; (8002c80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c72:	5ccb      	ldrb	r3, [r1, r3]
 8002c74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	40023800 	.word	0x40023800
 8002c80:	08007890 	.word	0x08007890

08002c84 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b082      	sub	sp, #8
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d101      	bne.n	8002c96 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e07b      	b.n	8002d8e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d108      	bne.n	8002cb0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ca6:	d009      	beq.n	8002cbc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2200      	movs	r2, #0
 8002cac:	61da      	str	r2, [r3, #28]
 8002cae:	e005      	b.n	8002cbc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d106      	bne.n	8002cdc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f7fe f9a6 	bl	8001028 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2202      	movs	r2, #2
 8002ce0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002cf2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002d04:	431a      	orrs	r2, r3
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	68db      	ldr	r3, [r3, #12]
 8002d0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d0e:	431a      	orrs	r2, r3
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	691b      	ldr	r3, [r3, #16]
 8002d14:	f003 0302 	and.w	r3, r3, #2
 8002d18:	431a      	orrs	r2, r3
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	695b      	ldr	r3, [r3, #20]
 8002d1e:	f003 0301 	and.w	r3, r3, #1
 8002d22:	431a      	orrs	r2, r3
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	699b      	ldr	r3, [r3, #24]
 8002d28:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d2c:	431a      	orrs	r2, r3
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	69db      	ldr	r3, [r3, #28]
 8002d32:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002d36:	431a      	orrs	r2, r3
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6a1b      	ldr	r3, [r3, #32]
 8002d3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d40:	ea42 0103 	orr.w	r1, r2, r3
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d48:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	430a      	orrs	r2, r1
 8002d52:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	699b      	ldr	r3, [r3, #24]
 8002d58:	0c1b      	lsrs	r3, r3, #16
 8002d5a:	f003 0104 	and.w	r1, r3, #4
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d62:	f003 0210 	and.w	r2, r3, #16
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	430a      	orrs	r2, r1
 8002d6c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	69da      	ldr	r2, [r3, #28]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d7c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2200      	movs	r2, #0
 8002d82:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2201      	movs	r2, #1
 8002d88:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002d8c:	2300      	movs	r3, #0
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3708      	adds	r7, #8
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}

08002d96 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002d96:	b580      	push	{r7, lr}
 8002d98:	b082      	sub	sp, #8
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d101      	bne.n	8002da8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	e041      	b.n	8002e2c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dae:	b2db      	uxtb	r3, r3
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d106      	bne.n	8002dc2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2200      	movs	r2, #0
 8002db8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002dbc:	6878      	ldr	r0, [r7, #4]
 8002dbe:	f7fe fa25 	bl	800120c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2202      	movs	r2, #2
 8002dc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	3304      	adds	r3, #4
 8002dd2:	4619      	mov	r1, r3
 8002dd4:	4610      	mov	r0, r2
 8002dd6:	f000 f8ef 	bl	8002fb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2201      	movs	r2, #1
 8002dde:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2201      	movs	r2, #1
 8002de6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2201      	movs	r2, #1
 8002dee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2201      	movs	r2, #1
 8002df6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2201      	movs	r2, #1
 8002e06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2201      	movs	r2, #1
 8002e16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2201      	movs	r2, #1
 8002e26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e2a:	2300      	movs	r3, #0
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	3708      	adds	r7, #8
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}

08002e34 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b086      	sub	sp, #24
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	60f8      	str	r0, [r7, #12]
 8002e3c:	60b9      	str	r1, [r7, #8]
 8002e3e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e40:	2300      	movs	r3, #0
 8002e42:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	d101      	bne.n	8002e52 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002e4e:	2302      	movs	r3, #2
 8002e50:	e0ae      	b.n	8002fb0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2201      	movs	r2, #1
 8002e56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2b0c      	cmp	r3, #12
 8002e5e:	f200 809f 	bhi.w	8002fa0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002e62:	a201      	add	r2, pc, #4	; (adr r2, 8002e68 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002e64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e68:	08002e9d 	.word	0x08002e9d
 8002e6c:	08002fa1 	.word	0x08002fa1
 8002e70:	08002fa1 	.word	0x08002fa1
 8002e74:	08002fa1 	.word	0x08002fa1
 8002e78:	08002edd 	.word	0x08002edd
 8002e7c:	08002fa1 	.word	0x08002fa1
 8002e80:	08002fa1 	.word	0x08002fa1
 8002e84:	08002fa1 	.word	0x08002fa1
 8002e88:	08002f1f 	.word	0x08002f1f
 8002e8c:	08002fa1 	.word	0x08002fa1
 8002e90:	08002fa1 	.word	0x08002fa1
 8002e94:	08002fa1 	.word	0x08002fa1
 8002e98:	08002f5f 	.word	0x08002f5f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	68b9      	ldr	r1, [r7, #8]
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f000 f908 	bl	80030b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	699a      	ldr	r2, [r3, #24]
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f042 0208 	orr.w	r2, r2, #8
 8002eb6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	699a      	ldr	r2, [r3, #24]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f022 0204 	bic.w	r2, r2, #4
 8002ec6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	6999      	ldr	r1, [r3, #24]
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	691a      	ldr	r2, [r3, #16]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	430a      	orrs	r2, r1
 8002ed8:	619a      	str	r2, [r3, #24]
      break;
 8002eda:	e064      	b.n	8002fa6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	68b9      	ldr	r1, [r7, #8]
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f000 f94e 	bl	8003184 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	699a      	ldr	r2, [r3, #24]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ef6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	699a      	ldr	r2, [r3, #24]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	6999      	ldr	r1, [r3, #24]
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	691b      	ldr	r3, [r3, #16]
 8002f12:	021a      	lsls	r2, r3, #8
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	430a      	orrs	r2, r1
 8002f1a:	619a      	str	r2, [r3, #24]
      break;
 8002f1c:	e043      	b.n	8002fa6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	68b9      	ldr	r1, [r7, #8]
 8002f24:	4618      	mov	r0, r3
 8002f26:	f000 f999 	bl	800325c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	69da      	ldr	r2, [r3, #28]
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f042 0208 	orr.w	r2, r2, #8
 8002f38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	69da      	ldr	r2, [r3, #28]
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f022 0204 	bic.w	r2, r2, #4
 8002f48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	69d9      	ldr	r1, [r3, #28]
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	691a      	ldr	r2, [r3, #16]
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	430a      	orrs	r2, r1
 8002f5a:	61da      	str	r2, [r3, #28]
      break;
 8002f5c:	e023      	b.n	8002fa6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	68b9      	ldr	r1, [r7, #8]
 8002f64:	4618      	mov	r0, r3
 8002f66:	f000 f9e3 	bl	8003330 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	69da      	ldr	r2, [r3, #28]
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	69da      	ldr	r2, [r3, #28]
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	69d9      	ldr	r1, [r3, #28]
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	691b      	ldr	r3, [r3, #16]
 8002f94:	021a      	lsls	r2, r3, #8
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	430a      	orrs	r2, r1
 8002f9c:	61da      	str	r2, [r3, #28]
      break;
 8002f9e:	e002      	b.n	8002fa6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	75fb      	strb	r3, [r7, #23]
      break;
 8002fa4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002fae:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3718      	adds	r7, #24
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}

08002fb8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b085      	sub	sp, #20
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
 8002fc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	4a34      	ldr	r2, [pc, #208]	; (800309c <TIM_Base_SetConfig+0xe4>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d00f      	beq.n	8002ff0 <TIM_Base_SetConfig+0x38>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fd6:	d00b      	beq.n	8002ff0 <TIM_Base_SetConfig+0x38>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	4a31      	ldr	r2, [pc, #196]	; (80030a0 <TIM_Base_SetConfig+0xe8>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d007      	beq.n	8002ff0 <TIM_Base_SetConfig+0x38>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	4a30      	ldr	r2, [pc, #192]	; (80030a4 <TIM_Base_SetConfig+0xec>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d003      	beq.n	8002ff0 <TIM_Base_SetConfig+0x38>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	4a2f      	ldr	r2, [pc, #188]	; (80030a8 <TIM_Base_SetConfig+0xf0>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d108      	bne.n	8003002 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ff6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	68fa      	ldr	r2, [r7, #12]
 8002ffe:	4313      	orrs	r3, r2
 8003000:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	4a25      	ldr	r2, [pc, #148]	; (800309c <TIM_Base_SetConfig+0xe4>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d01b      	beq.n	8003042 <TIM_Base_SetConfig+0x8a>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003010:	d017      	beq.n	8003042 <TIM_Base_SetConfig+0x8a>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	4a22      	ldr	r2, [pc, #136]	; (80030a0 <TIM_Base_SetConfig+0xe8>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d013      	beq.n	8003042 <TIM_Base_SetConfig+0x8a>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	4a21      	ldr	r2, [pc, #132]	; (80030a4 <TIM_Base_SetConfig+0xec>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d00f      	beq.n	8003042 <TIM_Base_SetConfig+0x8a>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	4a20      	ldr	r2, [pc, #128]	; (80030a8 <TIM_Base_SetConfig+0xf0>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d00b      	beq.n	8003042 <TIM_Base_SetConfig+0x8a>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	4a1f      	ldr	r2, [pc, #124]	; (80030ac <TIM_Base_SetConfig+0xf4>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d007      	beq.n	8003042 <TIM_Base_SetConfig+0x8a>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	4a1e      	ldr	r2, [pc, #120]	; (80030b0 <TIM_Base_SetConfig+0xf8>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d003      	beq.n	8003042 <TIM_Base_SetConfig+0x8a>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	4a1d      	ldr	r2, [pc, #116]	; (80030b4 <TIM_Base_SetConfig+0xfc>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d108      	bne.n	8003054 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003048:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	68db      	ldr	r3, [r3, #12]
 800304e:	68fa      	ldr	r2, [r7, #12]
 8003050:	4313      	orrs	r3, r2
 8003052:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	695b      	ldr	r3, [r3, #20]
 800305e:	4313      	orrs	r3, r2
 8003060:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	68fa      	ldr	r2, [r7, #12]
 8003066:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	689a      	ldr	r2, [r3, #8]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	4a08      	ldr	r2, [pc, #32]	; (800309c <TIM_Base_SetConfig+0xe4>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d103      	bne.n	8003088 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	691a      	ldr	r2, [r3, #16]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2201      	movs	r2, #1
 800308c:	615a      	str	r2, [r3, #20]
}
 800308e:	bf00      	nop
 8003090:	3714      	adds	r7, #20
 8003092:	46bd      	mov	sp, r7
 8003094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003098:	4770      	bx	lr
 800309a:	bf00      	nop
 800309c:	40010000 	.word	0x40010000
 80030a0:	40000400 	.word	0x40000400
 80030a4:	40000800 	.word	0x40000800
 80030a8:	40000c00 	.word	0x40000c00
 80030ac:	40014000 	.word	0x40014000
 80030b0:	40014400 	.word	0x40014400
 80030b4:	40014800 	.word	0x40014800

080030b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b087      	sub	sp, #28
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6a1b      	ldr	r3, [r3, #32]
 80030c6:	f023 0201 	bic.w	r2, r3, #1
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6a1b      	ldr	r3, [r3, #32]
 80030d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	699b      	ldr	r3, [r3, #24]
 80030de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	f023 0303 	bic.w	r3, r3, #3
 80030ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	68fa      	ldr	r2, [r7, #12]
 80030f6:	4313      	orrs	r3, r2
 80030f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	f023 0302 	bic.w	r3, r3, #2
 8003100:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	697a      	ldr	r2, [r7, #20]
 8003108:	4313      	orrs	r3, r2
 800310a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	4a1c      	ldr	r2, [pc, #112]	; (8003180 <TIM_OC1_SetConfig+0xc8>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d10c      	bne.n	800312e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	f023 0308 	bic.w	r3, r3, #8
 800311a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	697a      	ldr	r2, [r7, #20]
 8003122:	4313      	orrs	r3, r2
 8003124:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	f023 0304 	bic.w	r3, r3, #4
 800312c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	4a13      	ldr	r2, [pc, #76]	; (8003180 <TIM_OC1_SetConfig+0xc8>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d111      	bne.n	800315a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800313c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003144:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	695b      	ldr	r3, [r3, #20]
 800314a:	693a      	ldr	r2, [r7, #16]
 800314c:	4313      	orrs	r3, r2
 800314e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	699b      	ldr	r3, [r3, #24]
 8003154:	693a      	ldr	r2, [r7, #16]
 8003156:	4313      	orrs	r3, r2
 8003158:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	693a      	ldr	r2, [r7, #16]
 800315e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	68fa      	ldr	r2, [r7, #12]
 8003164:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	685a      	ldr	r2, [r3, #4]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	697a      	ldr	r2, [r7, #20]
 8003172:	621a      	str	r2, [r3, #32]
}
 8003174:	bf00      	nop
 8003176:	371c      	adds	r7, #28
 8003178:	46bd      	mov	sp, r7
 800317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317e:	4770      	bx	lr
 8003180:	40010000 	.word	0x40010000

08003184 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003184:	b480      	push	{r7}
 8003186:	b087      	sub	sp, #28
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
 800318c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6a1b      	ldr	r3, [r3, #32]
 8003192:	f023 0210 	bic.w	r2, r3, #16
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6a1b      	ldr	r3, [r3, #32]
 800319e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	699b      	ldr	r3, [r3, #24]
 80031aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	021b      	lsls	r3, r3, #8
 80031c2:	68fa      	ldr	r2, [r7, #12]
 80031c4:	4313      	orrs	r3, r2
 80031c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	f023 0320 	bic.w	r3, r3, #32
 80031ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	011b      	lsls	r3, r3, #4
 80031d6:	697a      	ldr	r2, [r7, #20]
 80031d8:	4313      	orrs	r3, r2
 80031da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	4a1e      	ldr	r2, [pc, #120]	; (8003258 <TIM_OC2_SetConfig+0xd4>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d10d      	bne.n	8003200 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80031e4:	697b      	ldr	r3, [r7, #20]
 80031e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	68db      	ldr	r3, [r3, #12]
 80031f0:	011b      	lsls	r3, r3, #4
 80031f2:	697a      	ldr	r2, [r7, #20]
 80031f4:	4313      	orrs	r3, r2
 80031f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031fe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	4a15      	ldr	r2, [pc, #84]	; (8003258 <TIM_OC2_SetConfig+0xd4>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d113      	bne.n	8003230 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800320e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003216:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	695b      	ldr	r3, [r3, #20]
 800321c:	009b      	lsls	r3, r3, #2
 800321e:	693a      	ldr	r2, [r7, #16]
 8003220:	4313      	orrs	r3, r2
 8003222:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	699b      	ldr	r3, [r3, #24]
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	693a      	ldr	r2, [r7, #16]
 800322c:	4313      	orrs	r3, r2
 800322e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	693a      	ldr	r2, [r7, #16]
 8003234:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	68fa      	ldr	r2, [r7, #12]
 800323a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	685a      	ldr	r2, [r3, #4]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	697a      	ldr	r2, [r7, #20]
 8003248:	621a      	str	r2, [r3, #32]
}
 800324a:	bf00      	nop
 800324c:	371c      	adds	r7, #28
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr
 8003256:	bf00      	nop
 8003258:	40010000 	.word	0x40010000

0800325c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800325c:	b480      	push	{r7}
 800325e:	b087      	sub	sp, #28
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6a1b      	ldr	r3, [r3, #32]
 800326a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6a1b      	ldr	r3, [r3, #32]
 8003276:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	69db      	ldr	r3, [r3, #28]
 8003282:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800328a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	f023 0303 	bic.w	r3, r3, #3
 8003292:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	68fa      	ldr	r2, [r7, #12]
 800329a:	4313      	orrs	r3, r2
 800329c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80032a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	021b      	lsls	r3, r3, #8
 80032ac:	697a      	ldr	r2, [r7, #20]
 80032ae:	4313      	orrs	r3, r2
 80032b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4a1d      	ldr	r2, [pc, #116]	; (800332c <TIM_OC3_SetConfig+0xd0>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d10d      	bne.n	80032d6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80032c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	68db      	ldr	r3, [r3, #12]
 80032c6:	021b      	lsls	r3, r3, #8
 80032c8:	697a      	ldr	r2, [r7, #20]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80032d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	4a14      	ldr	r2, [pc, #80]	; (800332c <TIM_OC3_SetConfig+0xd0>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d113      	bne.n	8003306 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80032e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80032ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	695b      	ldr	r3, [r3, #20]
 80032f2:	011b      	lsls	r3, r3, #4
 80032f4:	693a      	ldr	r2, [r7, #16]
 80032f6:	4313      	orrs	r3, r2
 80032f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	699b      	ldr	r3, [r3, #24]
 80032fe:	011b      	lsls	r3, r3, #4
 8003300:	693a      	ldr	r2, [r7, #16]
 8003302:	4313      	orrs	r3, r2
 8003304:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	693a      	ldr	r2, [r7, #16]
 800330a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	68fa      	ldr	r2, [r7, #12]
 8003310:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	685a      	ldr	r2, [r3, #4]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	697a      	ldr	r2, [r7, #20]
 800331e:	621a      	str	r2, [r3, #32]
}
 8003320:	bf00      	nop
 8003322:	371c      	adds	r7, #28
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr
 800332c:	40010000 	.word	0x40010000

08003330 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003330:	b480      	push	{r7}
 8003332:	b087      	sub	sp, #28
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
 8003338:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6a1b      	ldr	r3, [r3, #32]
 800333e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6a1b      	ldr	r3, [r3, #32]
 800334a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	69db      	ldr	r3, [r3, #28]
 8003356:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800335e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003366:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	021b      	lsls	r3, r3, #8
 800336e:	68fa      	ldr	r2, [r7, #12]
 8003370:	4313      	orrs	r3, r2
 8003372:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800337a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	031b      	lsls	r3, r3, #12
 8003382:	693a      	ldr	r2, [r7, #16]
 8003384:	4313      	orrs	r3, r2
 8003386:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	4a10      	ldr	r2, [pc, #64]	; (80033cc <TIM_OC4_SetConfig+0x9c>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d109      	bne.n	80033a4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003396:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	695b      	ldr	r3, [r3, #20]
 800339c:	019b      	lsls	r3, r3, #6
 800339e:	697a      	ldr	r2, [r7, #20]
 80033a0:	4313      	orrs	r3, r2
 80033a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	697a      	ldr	r2, [r7, #20]
 80033a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	68fa      	ldr	r2, [r7, #12]
 80033ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	685a      	ldr	r2, [r3, #4]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	693a      	ldr	r2, [r7, #16]
 80033bc:	621a      	str	r2, [r3, #32]
}
 80033be:	bf00      	nop
 80033c0:	371c      	adds	r7, #28
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr
 80033ca:	bf00      	nop
 80033cc:	40010000 	.word	0x40010000

080033d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b085      	sub	sp, #20
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
 80033d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	d101      	bne.n	80033e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80033e4:	2302      	movs	r3, #2
 80033e6:	e050      	b.n	800348a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2201      	movs	r2, #1
 80033ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2202      	movs	r2, #2
 80033f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800340e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	68fa      	ldr	r2, [r7, #12]
 8003416:	4313      	orrs	r3, r2
 8003418:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	68fa      	ldr	r2, [r7, #12]
 8003420:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a1c      	ldr	r2, [pc, #112]	; (8003498 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d018      	beq.n	800345e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003434:	d013      	beq.n	800345e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a18      	ldr	r2, [pc, #96]	; (800349c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d00e      	beq.n	800345e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a16      	ldr	r2, [pc, #88]	; (80034a0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d009      	beq.n	800345e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a15      	ldr	r2, [pc, #84]	; (80034a4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d004      	beq.n	800345e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a13      	ldr	r2, [pc, #76]	; (80034a8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d10c      	bne.n	8003478 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003464:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	68ba      	ldr	r2, [r7, #8]
 800346c:	4313      	orrs	r3, r2
 800346e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	68ba      	ldr	r2, [r7, #8]
 8003476:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2201      	movs	r2, #1
 800347c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2200      	movs	r2, #0
 8003484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003488:	2300      	movs	r3, #0
}
 800348a:	4618      	mov	r0, r3
 800348c:	3714      	adds	r7, #20
 800348e:	46bd      	mov	sp, r7
 8003490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003494:	4770      	bx	lr
 8003496:	bf00      	nop
 8003498:	40010000 	.word	0x40010000
 800349c:	40000400 	.word	0x40000400
 80034a0:	40000800 	.word	0x40000800
 80034a4:	40000c00 	.word	0x40000c00
 80034a8:	40014000 	.word	0x40014000

080034ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b082      	sub	sp, #8
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d101      	bne.n	80034be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e03f      	b.n	800353e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d106      	bne.n	80034d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2200      	movs	r2, #0
 80034ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f7fd ff32 	bl	800133c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2224      	movs	r2, #36	; 0x24
 80034dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	68da      	ldr	r2, [r3, #12]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80034ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80034f0:	6878      	ldr	r0, [r7, #4]
 80034f2:	f000 f829 	bl	8003548 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	691a      	ldr	r2, [r3, #16]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003504:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	695a      	ldr	r2, [r3, #20]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003514:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	68da      	ldr	r2, [r3, #12]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003524:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2200      	movs	r2, #0
 800352a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2220      	movs	r2, #32
 8003530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2220      	movs	r2, #32
 8003538:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800353c:	2300      	movs	r3, #0
}
 800353e:	4618      	mov	r0, r3
 8003540:	3708      	adds	r7, #8
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}
	...

08003548 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003548:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800354c:	b0c0      	sub	sp, #256	; 0x100
 800354e:	af00      	add	r7, sp, #0
 8003550:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003554:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	691b      	ldr	r3, [r3, #16]
 800355c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003560:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003564:	68d9      	ldr	r1, [r3, #12]
 8003566:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	ea40 0301 	orr.w	r3, r0, r1
 8003570:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003572:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003576:	689a      	ldr	r2, [r3, #8]
 8003578:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800357c:	691b      	ldr	r3, [r3, #16]
 800357e:	431a      	orrs	r2, r3
 8003580:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003584:	695b      	ldr	r3, [r3, #20]
 8003586:	431a      	orrs	r2, r3
 8003588:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800358c:	69db      	ldr	r3, [r3, #28]
 800358e:	4313      	orrs	r3, r2
 8003590:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003594:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	68db      	ldr	r3, [r3, #12]
 800359c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80035a0:	f021 010c 	bic.w	r1, r1, #12
 80035a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80035ae:	430b      	orrs	r3, r1
 80035b0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80035b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	695b      	ldr	r3, [r3, #20]
 80035ba:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80035be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035c2:	6999      	ldr	r1, [r3, #24]
 80035c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	ea40 0301 	orr.w	r3, r0, r1
 80035ce:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80035d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	4b8f      	ldr	r3, [pc, #572]	; (8003814 <UART_SetConfig+0x2cc>)
 80035d8:	429a      	cmp	r2, r3
 80035da:	d005      	beq.n	80035e8 <UART_SetConfig+0xa0>
 80035dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035e0:	681a      	ldr	r2, [r3, #0]
 80035e2:	4b8d      	ldr	r3, [pc, #564]	; (8003818 <UART_SetConfig+0x2d0>)
 80035e4:	429a      	cmp	r2, r3
 80035e6:	d104      	bne.n	80035f2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80035e8:	f7ff fb38 	bl	8002c5c <HAL_RCC_GetPCLK2Freq>
 80035ec:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80035f0:	e003      	b.n	80035fa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80035f2:	f7ff fb1f 	bl	8002c34 <HAL_RCC_GetPCLK1Freq>
 80035f6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80035fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035fe:	69db      	ldr	r3, [r3, #28]
 8003600:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003604:	f040 810c 	bne.w	8003820 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003608:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800360c:	2200      	movs	r2, #0
 800360e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003612:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003616:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800361a:	4622      	mov	r2, r4
 800361c:	462b      	mov	r3, r5
 800361e:	1891      	adds	r1, r2, r2
 8003620:	65b9      	str	r1, [r7, #88]	; 0x58
 8003622:	415b      	adcs	r3, r3
 8003624:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003626:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800362a:	4621      	mov	r1, r4
 800362c:	eb12 0801 	adds.w	r8, r2, r1
 8003630:	4629      	mov	r1, r5
 8003632:	eb43 0901 	adc.w	r9, r3, r1
 8003636:	f04f 0200 	mov.w	r2, #0
 800363a:	f04f 0300 	mov.w	r3, #0
 800363e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003642:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003646:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800364a:	4690      	mov	r8, r2
 800364c:	4699      	mov	r9, r3
 800364e:	4623      	mov	r3, r4
 8003650:	eb18 0303 	adds.w	r3, r8, r3
 8003654:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003658:	462b      	mov	r3, r5
 800365a:	eb49 0303 	adc.w	r3, r9, r3
 800365e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003662:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	2200      	movs	r2, #0
 800366a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800366e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003672:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003676:	460b      	mov	r3, r1
 8003678:	18db      	adds	r3, r3, r3
 800367a:	653b      	str	r3, [r7, #80]	; 0x50
 800367c:	4613      	mov	r3, r2
 800367e:	eb42 0303 	adc.w	r3, r2, r3
 8003682:	657b      	str	r3, [r7, #84]	; 0x54
 8003684:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003688:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800368c:	f7fc fda8 	bl	80001e0 <__aeabi_uldivmod>
 8003690:	4602      	mov	r2, r0
 8003692:	460b      	mov	r3, r1
 8003694:	4b61      	ldr	r3, [pc, #388]	; (800381c <UART_SetConfig+0x2d4>)
 8003696:	fba3 2302 	umull	r2, r3, r3, r2
 800369a:	095b      	lsrs	r3, r3, #5
 800369c:	011c      	lsls	r4, r3, #4
 800369e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036a2:	2200      	movs	r2, #0
 80036a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80036a8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80036ac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80036b0:	4642      	mov	r2, r8
 80036b2:	464b      	mov	r3, r9
 80036b4:	1891      	adds	r1, r2, r2
 80036b6:	64b9      	str	r1, [r7, #72]	; 0x48
 80036b8:	415b      	adcs	r3, r3
 80036ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80036bc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80036c0:	4641      	mov	r1, r8
 80036c2:	eb12 0a01 	adds.w	sl, r2, r1
 80036c6:	4649      	mov	r1, r9
 80036c8:	eb43 0b01 	adc.w	fp, r3, r1
 80036cc:	f04f 0200 	mov.w	r2, #0
 80036d0:	f04f 0300 	mov.w	r3, #0
 80036d4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80036d8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80036dc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80036e0:	4692      	mov	sl, r2
 80036e2:	469b      	mov	fp, r3
 80036e4:	4643      	mov	r3, r8
 80036e6:	eb1a 0303 	adds.w	r3, sl, r3
 80036ea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80036ee:	464b      	mov	r3, r9
 80036f0:	eb4b 0303 	adc.w	r3, fp, r3
 80036f4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80036f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	2200      	movs	r2, #0
 8003700:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003704:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003708:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800370c:	460b      	mov	r3, r1
 800370e:	18db      	adds	r3, r3, r3
 8003710:	643b      	str	r3, [r7, #64]	; 0x40
 8003712:	4613      	mov	r3, r2
 8003714:	eb42 0303 	adc.w	r3, r2, r3
 8003718:	647b      	str	r3, [r7, #68]	; 0x44
 800371a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800371e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003722:	f7fc fd5d 	bl	80001e0 <__aeabi_uldivmod>
 8003726:	4602      	mov	r2, r0
 8003728:	460b      	mov	r3, r1
 800372a:	4611      	mov	r1, r2
 800372c:	4b3b      	ldr	r3, [pc, #236]	; (800381c <UART_SetConfig+0x2d4>)
 800372e:	fba3 2301 	umull	r2, r3, r3, r1
 8003732:	095b      	lsrs	r3, r3, #5
 8003734:	2264      	movs	r2, #100	; 0x64
 8003736:	fb02 f303 	mul.w	r3, r2, r3
 800373a:	1acb      	subs	r3, r1, r3
 800373c:	00db      	lsls	r3, r3, #3
 800373e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003742:	4b36      	ldr	r3, [pc, #216]	; (800381c <UART_SetConfig+0x2d4>)
 8003744:	fba3 2302 	umull	r2, r3, r3, r2
 8003748:	095b      	lsrs	r3, r3, #5
 800374a:	005b      	lsls	r3, r3, #1
 800374c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003750:	441c      	add	r4, r3
 8003752:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003756:	2200      	movs	r2, #0
 8003758:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800375c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003760:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003764:	4642      	mov	r2, r8
 8003766:	464b      	mov	r3, r9
 8003768:	1891      	adds	r1, r2, r2
 800376a:	63b9      	str	r1, [r7, #56]	; 0x38
 800376c:	415b      	adcs	r3, r3
 800376e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003770:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003774:	4641      	mov	r1, r8
 8003776:	1851      	adds	r1, r2, r1
 8003778:	6339      	str	r1, [r7, #48]	; 0x30
 800377a:	4649      	mov	r1, r9
 800377c:	414b      	adcs	r3, r1
 800377e:	637b      	str	r3, [r7, #52]	; 0x34
 8003780:	f04f 0200 	mov.w	r2, #0
 8003784:	f04f 0300 	mov.w	r3, #0
 8003788:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800378c:	4659      	mov	r1, fp
 800378e:	00cb      	lsls	r3, r1, #3
 8003790:	4651      	mov	r1, sl
 8003792:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003796:	4651      	mov	r1, sl
 8003798:	00ca      	lsls	r2, r1, #3
 800379a:	4610      	mov	r0, r2
 800379c:	4619      	mov	r1, r3
 800379e:	4603      	mov	r3, r0
 80037a0:	4642      	mov	r2, r8
 80037a2:	189b      	adds	r3, r3, r2
 80037a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80037a8:	464b      	mov	r3, r9
 80037aa:	460a      	mov	r2, r1
 80037ac:	eb42 0303 	adc.w	r3, r2, r3
 80037b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80037b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	2200      	movs	r2, #0
 80037bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80037c0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80037c4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80037c8:	460b      	mov	r3, r1
 80037ca:	18db      	adds	r3, r3, r3
 80037cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80037ce:	4613      	mov	r3, r2
 80037d0:	eb42 0303 	adc.w	r3, r2, r3
 80037d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037d6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80037da:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80037de:	f7fc fcff 	bl	80001e0 <__aeabi_uldivmod>
 80037e2:	4602      	mov	r2, r0
 80037e4:	460b      	mov	r3, r1
 80037e6:	4b0d      	ldr	r3, [pc, #52]	; (800381c <UART_SetConfig+0x2d4>)
 80037e8:	fba3 1302 	umull	r1, r3, r3, r2
 80037ec:	095b      	lsrs	r3, r3, #5
 80037ee:	2164      	movs	r1, #100	; 0x64
 80037f0:	fb01 f303 	mul.w	r3, r1, r3
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	00db      	lsls	r3, r3, #3
 80037f8:	3332      	adds	r3, #50	; 0x32
 80037fa:	4a08      	ldr	r2, [pc, #32]	; (800381c <UART_SetConfig+0x2d4>)
 80037fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003800:	095b      	lsrs	r3, r3, #5
 8003802:	f003 0207 	and.w	r2, r3, #7
 8003806:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4422      	add	r2, r4
 800380e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003810:	e105      	b.n	8003a1e <UART_SetConfig+0x4d6>
 8003812:	bf00      	nop
 8003814:	40011000 	.word	0x40011000
 8003818:	40011400 	.word	0x40011400
 800381c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003820:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003824:	2200      	movs	r2, #0
 8003826:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800382a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800382e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003832:	4642      	mov	r2, r8
 8003834:	464b      	mov	r3, r9
 8003836:	1891      	adds	r1, r2, r2
 8003838:	6239      	str	r1, [r7, #32]
 800383a:	415b      	adcs	r3, r3
 800383c:	627b      	str	r3, [r7, #36]	; 0x24
 800383e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003842:	4641      	mov	r1, r8
 8003844:	1854      	adds	r4, r2, r1
 8003846:	4649      	mov	r1, r9
 8003848:	eb43 0501 	adc.w	r5, r3, r1
 800384c:	f04f 0200 	mov.w	r2, #0
 8003850:	f04f 0300 	mov.w	r3, #0
 8003854:	00eb      	lsls	r3, r5, #3
 8003856:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800385a:	00e2      	lsls	r2, r4, #3
 800385c:	4614      	mov	r4, r2
 800385e:	461d      	mov	r5, r3
 8003860:	4643      	mov	r3, r8
 8003862:	18e3      	adds	r3, r4, r3
 8003864:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003868:	464b      	mov	r3, r9
 800386a:	eb45 0303 	adc.w	r3, r5, r3
 800386e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003872:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	2200      	movs	r2, #0
 800387a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800387e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003882:	f04f 0200 	mov.w	r2, #0
 8003886:	f04f 0300 	mov.w	r3, #0
 800388a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800388e:	4629      	mov	r1, r5
 8003890:	008b      	lsls	r3, r1, #2
 8003892:	4621      	mov	r1, r4
 8003894:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003898:	4621      	mov	r1, r4
 800389a:	008a      	lsls	r2, r1, #2
 800389c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80038a0:	f7fc fc9e 	bl	80001e0 <__aeabi_uldivmod>
 80038a4:	4602      	mov	r2, r0
 80038a6:	460b      	mov	r3, r1
 80038a8:	4b60      	ldr	r3, [pc, #384]	; (8003a2c <UART_SetConfig+0x4e4>)
 80038aa:	fba3 2302 	umull	r2, r3, r3, r2
 80038ae:	095b      	lsrs	r3, r3, #5
 80038b0:	011c      	lsls	r4, r3, #4
 80038b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80038b6:	2200      	movs	r2, #0
 80038b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80038bc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80038c0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80038c4:	4642      	mov	r2, r8
 80038c6:	464b      	mov	r3, r9
 80038c8:	1891      	adds	r1, r2, r2
 80038ca:	61b9      	str	r1, [r7, #24]
 80038cc:	415b      	adcs	r3, r3
 80038ce:	61fb      	str	r3, [r7, #28]
 80038d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80038d4:	4641      	mov	r1, r8
 80038d6:	1851      	adds	r1, r2, r1
 80038d8:	6139      	str	r1, [r7, #16]
 80038da:	4649      	mov	r1, r9
 80038dc:	414b      	adcs	r3, r1
 80038de:	617b      	str	r3, [r7, #20]
 80038e0:	f04f 0200 	mov.w	r2, #0
 80038e4:	f04f 0300 	mov.w	r3, #0
 80038e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80038ec:	4659      	mov	r1, fp
 80038ee:	00cb      	lsls	r3, r1, #3
 80038f0:	4651      	mov	r1, sl
 80038f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80038f6:	4651      	mov	r1, sl
 80038f8:	00ca      	lsls	r2, r1, #3
 80038fa:	4610      	mov	r0, r2
 80038fc:	4619      	mov	r1, r3
 80038fe:	4603      	mov	r3, r0
 8003900:	4642      	mov	r2, r8
 8003902:	189b      	adds	r3, r3, r2
 8003904:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003908:	464b      	mov	r3, r9
 800390a:	460a      	mov	r2, r1
 800390c:	eb42 0303 	adc.w	r3, r2, r3
 8003910:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003914:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	2200      	movs	r2, #0
 800391c:	67bb      	str	r3, [r7, #120]	; 0x78
 800391e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003920:	f04f 0200 	mov.w	r2, #0
 8003924:	f04f 0300 	mov.w	r3, #0
 8003928:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800392c:	4649      	mov	r1, r9
 800392e:	008b      	lsls	r3, r1, #2
 8003930:	4641      	mov	r1, r8
 8003932:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003936:	4641      	mov	r1, r8
 8003938:	008a      	lsls	r2, r1, #2
 800393a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800393e:	f7fc fc4f 	bl	80001e0 <__aeabi_uldivmod>
 8003942:	4602      	mov	r2, r0
 8003944:	460b      	mov	r3, r1
 8003946:	4b39      	ldr	r3, [pc, #228]	; (8003a2c <UART_SetConfig+0x4e4>)
 8003948:	fba3 1302 	umull	r1, r3, r3, r2
 800394c:	095b      	lsrs	r3, r3, #5
 800394e:	2164      	movs	r1, #100	; 0x64
 8003950:	fb01 f303 	mul.w	r3, r1, r3
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	011b      	lsls	r3, r3, #4
 8003958:	3332      	adds	r3, #50	; 0x32
 800395a:	4a34      	ldr	r2, [pc, #208]	; (8003a2c <UART_SetConfig+0x4e4>)
 800395c:	fba2 2303 	umull	r2, r3, r2, r3
 8003960:	095b      	lsrs	r3, r3, #5
 8003962:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003966:	441c      	add	r4, r3
 8003968:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800396c:	2200      	movs	r2, #0
 800396e:	673b      	str	r3, [r7, #112]	; 0x70
 8003970:	677a      	str	r2, [r7, #116]	; 0x74
 8003972:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003976:	4642      	mov	r2, r8
 8003978:	464b      	mov	r3, r9
 800397a:	1891      	adds	r1, r2, r2
 800397c:	60b9      	str	r1, [r7, #8]
 800397e:	415b      	adcs	r3, r3
 8003980:	60fb      	str	r3, [r7, #12]
 8003982:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003986:	4641      	mov	r1, r8
 8003988:	1851      	adds	r1, r2, r1
 800398a:	6039      	str	r1, [r7, #0]
 800398c:	4649      	mov	r1, r9
 800398e:	414b      	adcs	r3, r1
 8003990:	607b      	str	r3, [r7, #4]
 8003992:	f04f 0200 	mov.w	r2, #0
 8003996:	f04f 0300 	mov.w	r3, #0
 800399a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800399e:	4659      	mov	r1, fp
 80039a0:	00cb      	lsls	r3, r1, #3
 80039a2:	4651      	mov	r1, sl
 80039a4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80039a8:	4651      	mov	r1, sl
 80039aa:	00ca      	lsls	r2, r1, #3
 80039ac:	4610      	mov	r0, r2
 80039ae:	4619      	mov	r1, r3
 80039b0:	4603      	mov	r3, r0
 80039b2:	4642      	mov	r2, r8
 80039b4:	189b      	adds	r3, r3, r2
 80039b6:	66bb      	str	r3, [r7, #104]	; 0x68
 80039b8:	464b      	mov	r3, r9
 80039ba:	460a      	mov	r2, r1
 80039bc:	eb42 0303 	adc.w	r3, r2, r3
 80039c0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80039c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	2200      	movs	r2, #0
 80039ca:	663b      	str	r3, [r7, #96]	; 0x60
 80039cc:	667a      	str	r2, [r7, #100]	; 0x64
 80039ce:	f04f 0200 	mov.w	r2, #0
 80039d2:	f04f 0300 	mov.w	r3, #0
 80039d6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80039da:	4649      	mov	r1, r9
 80039dc:	008b      	lsls	r3, r1, #2
 80039de:	4641      	mov	r1, r8
 80039e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80039e4:	4641      	mov	r1, r8
 80039e6:	008a      	lsls	r2, r1, #2
 80039e8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80039ec:	f7fc fbf8 	bl	80001e0 <__aeabi_uldivmod>
 80039f0:	4602      	mov	r2, r0
 80039f2:	460b      	mov	r3, r1
 80039f4:	4b0d      	ldr	r3, [pc, #52]	; (8003a2c <UART_SetConfig+0x4e4>)
 80039f6:	fba3 1302 	umull	r1, r3, r3, r2
 80039fa:	095b      	lsrs	r3, r3, #5
 80039fc:	2164      	movs	r1, #100	; 0x64
 80039fe:	fb01 f303 	mul.w	r3, r1, r3
 8003a02:	1ad3      	subs	r3, r2, r3
 8003a04:	011b      	lsls	r3, r3, #4
 8003a06:	3332      	adds	r3, #50	; 0x32
 8003a08:	4a08      	ldr	r2, [pc, #32]	; (8003a2c <UART_SetConfig+0x4e4>)
 8003a0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a0e:	095b      	lsrs	r3, r3, #5
 8003a10:	f003 020f 	and.w	r2, r3, #15
 8003a14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4422      	add	r2, r4
 8003a1c:	609a      	str	r2, [r3, #8]
}
 8003a1e:	bf00      	nop
 8003a20:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003a24:	46bd      	mov	sp, r7
 8003a26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a2a:	bf00      	nop
 8003a2c:	51eb851f 	.word	0x51eb851f

08003a30 <__NVIC_SetPriority>:
{
 8003a30:	b480      	push	{r7}
 8003a32:	b083      	sub	sp, #12
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	4603      	mov	r3, r0
 8003a38:	6039      	str	r1, [r7, #0]
 8003a3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	db0a      	blt.n	8003a5a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	b2da      	uxtb	r2, r3
 8003a48:	490c      	ldr	r1, [pc, #48]	; (8003a7c <__NVIC_SetPriority+0x4c>)
 8003a4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a4e:	0112      	lsls	r2, r2, #4
 8003a50:	b2d2      	uxtb	r2, r2
 8003a52:	440b      	add	r3, r1
 8003a54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003a58:	e00a      	b.n	8003a70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	b2da      	uxtb	r2, r3
 8003a5e:	4908      	ldr	r1, [pc, #32]	; (8003a80 <__NVIC_SetPriority+0x50>)
 8003a60:	79fb      	ldrb	r3, [r7, #7]
 8003a62:	f003 030f 	and.w	r3, r3, #15
 8003a66:	3b04      	subs	r3, #4
 8003a68:	0112      	lsls	r2, r2, #4
 8003a6a:	b2d2      	uxtb	r2, r2
 8003a6c:	440b      	add	r3, r1
 8003a6e:	761a      	strb	r2, [r3, #24]
}
 8003a70:	bf00      	nop
 8003a72:	370c      	adds	r7, #12
 8003a74:	46bd      	mov	sp, r7
 8003a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7a:	4770      	bx	lr
 8003a7c:	e000e100 	.word	0xe000e100
 8003a80:	e000ed00 	.word	0xe000ed00

08003a84 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003a84:	b580      	push	{r7, lr}
 8003a86:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003a88:	2100      	movs	r1, #0
 8003a8a:	f06f 0004 	mvn.w	r0, #4
 8003a8e:	f7ff ffcf 	bl	8003a30 <__NVIC_SetPriority>
#endif
}
 8003a92:	bf00      	nop
 8003a94:	bd80      	pop	{r7, pc}
	...

08003a98 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003a98:	b480      	push	{r7}
 8003a9a:	b083      	sub	sp, #12
 8003a9c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a9e:	f3ef 8305 	mrs	r3, IPSR
 8003aa2:	603b      	str	r3, [r7, #0]
  return(result);
 8003aa4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d003      	beq.n	8003ab2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003aaa:	f06f 0305 	mvn.w	r3, #5
 8003aae:	607b      	str	r3, [r7, #4]
 8003ab0:	e00c      	b.n	8003acc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003ab2:	4b0a      	ldr	r3, [pc, #40]	; (8003adc <osKernelInitialize+0x44>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d105      	bne.n	8003ac6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003aba:	4b08      	ldr	r3, [pc, #32]	; (8003adc <osKernelInitialize+0x44>)
 8003abc:	2201      	movs	r2, #1
 8003abe:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	607b      	str	r3, [r7, #4]
 8003ac4:	e002      	b.n	8003acc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003ac6:	f04f 33ff 	mov.w	r3, #4294967295
 8003aca:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003acc:	687b      	ldr	r3, [r7, #4]
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	370c      	adds	r7, #12
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad8:	4770      	bx	lr
 8003ada:	bf00      	nop
 8003adc:	200013dc 	.word	0x200013dc

08003ae0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b082      	sub	sp, #8
 8003ae4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ae6:	f3ef 8305 	mrs	r3, IPSR
 8003aea:	603b      	str	r3, [r7, #0]
  return(result);
 8003aec:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d003      	beq.n	8003afa <osKernelStart+0x1a>
    stat = osErrorISR;
 8003af2:	f06f 0305 	mvn.w	r3, #5
 8003af6:	607b      	str	r3, [r7, #4]
 8003af8:	e010      	b.n	8003b1c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003afa:	4b0b      	ldr	r3, [pc, #44]	; (8003b28 <osKernelStart+0x48>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	2b01      	cmp	r3, #1
 8003b00:	d109      	bne.n	8003b16 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003b02:	f7ff ffbf 	bl	8003a84 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003b06:	4b08      	ldr	r3, [pc, #32]	; (8003b28 <osKernelStart+0x48>)
 8003b08:	2202      	movs	r2, #2
 8003b0a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003b0c:	f001 fa1a 	bl	8004f44 <vTaskStartScheduler>
      stat = osOK;
 8003b10:	2300      	movs	r3, #0
 8003b12:	607b      	str	r3, [r7, #4]
 8003b14:	e002      	b.n	8003b1c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003b16:	f04f 33ff 	mov.w	r3, #4294967295
 8003b1a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003b1c:	687b      	ldr	r3, [r7, #4]
}
 8003b1e:	4618      	mov	r0, r3
 8003b20:	3708      	adds	r7, #8
 8003b22:	46bd      	mov	sp, r7
 8003b24:	bd80      	pop	{r7, pc}
 8003b26:	bf00      	nop
 8003b28:	200013dc 	.word	0x200013dc

08003b2c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b08e      	sub	sp, #56	; 0x38
 8003b30:	af04      	add	r7, sp, #16
 8003b32:	60f8      	str	r0, [r7, #12]
 8003b34:	60b9      	str	r1, [r7, #8]
 8003b36:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003b3c:	f3ef 8305 	mrs	r3, IPSR
 8003b40:	617b      	str	r3, [r7, #20]
  return(result);
 8003b42:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d17e      	bne.n	8003c46 <osThreadNew+0x11a>
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d07b      	beq.n	8003c46 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003b4e:	2380      	movs	r3, #128	; 0x80
 8003b50:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003b52:	2318      	movs	r3, #24
 8003b54:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003b56:	2300      	movs	r3, #0
 8003b58:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8003b5a:	f04f 33ff 	mov.w	r3, #4294967295
 8003b5e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d045      	beq.n	8003bf2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d002      	beq.n	8003b74 <osThreadNew+0x48>
        name = attr->name;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	699b      	ldr	r3, [r3, #24]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d002      	beq.n	8003b82 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	699b      	ldr	r3, [r3, #24]
 8003b80:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003b82:	69fb      	ldr	r3, [r7, #28]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d008      	beq.n	8003b9a <osThreadNew+0x6e>
 8003b88:	69fb      	ldr	r3, [r7, #28]
 8003b8a:	2b38      	cmp	r3, #56	; 0x38
 8003b8c:	d805      	bhi.n	8003b9a <osThreadNew+0x6e>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	f003 0301 	and.w	r3, r3, #1
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d001      	beq.n	8003b9e <osThreadNew+0x72>
        return (NULL);
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	e054      	b.n	8003c48 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	695b      	ldr	r3, [r3, #20]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d003      	beq.n	8003bae <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	695b      	ldr	r3, [r3, #20]
 8003baa:	089b      	lsrs	r3, r3, #2
 8003bac:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d00e      	beq.n	8003bd4 <osThreadNew+0xa8>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	68db      	ldr	r3, [r3, #12]
 8003bba:	2b5b      	cmp	r3, #91	; 0x5b
 8003bbc:	d90a      	bls.n	8003bd4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d006      	beq.n	8003bd4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	695b      	ldr	r3, [r3, #20]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d002      	beq.n	8003bd4 <osThreadNew+0xa8>
        mem = 1;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	61bb      	str	r3, [r7, #24]
 8003bd2:	e010      	b.n	8003bf6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d10c      	bne.n	8003bf6 <osThreadNew+0xca>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	68db      	ldr	r3, [r3, #12]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d108      	bne.n	8003bf6 <osThreadNew+0xca>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	691b      	ldr	r3, [r3, #16]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d104      	bne.n	8003bf6 <osThreadNew+0xca>
          mem = 0;
 8003bec:	2300      	movs	r3, #0
 8003bee:	61bb      	str	r3, [r7, #24]
 8003bf0:	e001      	b.n	8003bf6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003bf6:	69bb      	ldr	r3, [r7, #24]
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d110      	bne.n	8003c1e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003c00:	687a      	ldr	r2, [r7, #4]
 8003c02:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003c04:	9202      	str	r2, [sp, #8]
 8003c06:	9301      	str	r3, [sp, #4]
 8003c08:	69fb      	ldr	r3, [r7, #28]
 8003c0a:	9300      	str	r3, [sp, #0]
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	6a3a      	ldr	r2, [r7, #32]
 8003c10:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003c12:	68f8      	ldr	r0, [r7, #12]
 8003c14:	f000 ffc0 	bl	8004b98 <xTaskCreateStatic>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	613b      	str	r3, [r7, #16]
 8003c1c:	e013      	b.n	8003c46 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003c1e:	69bb      	ldr	r3, [r7, #24]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d110      	bne.n	8003c46 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003c24:	6a3b      	ldr	r3, [r7, #32]
 8003c26:	b29a      	uxth	r2, r3
 8003c28:	f107 0310 	add.w	r3, r7, #16
 8003c2c:	9301      	str	r3, [sp, #4]
 8003c2e:	69fb      	ldr	r3, [r7, #28]
 8003c30:	9300      	str	r3, [sp, #0]
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003c36:	68f8      	ldr	r0, [r7, #12]
 8003c38:	f001 f80b 	bl	8004c52 <xTaskCreate>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	2b01      	cmp	r3, #1
 8003c40:	d001      	beq.n	8003c46 <osThreadNew+0x11a>
            hTask = NULL;
 8003c42:	2300      	movs	r3, #0
 8003c44:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003c46:	693b      	ldr	r3, [r7, #16]
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	3728      	adds	r7, #40	; 0x28
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}

08003c50 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b084      	sub	sp, #16
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003c58:	f3ef 8305 	mrs	r3, IPSR
 8003c5c:	60bb      	str	r3, [r7, #8]
  return(result);
 8003c5e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d003      	beq.n	8003c6c <osDelay+0x1c>
    stat = osErrorISR;
 8003c64:	f06f 0305 	mvn.w	r3, #5
 8003c68:	60fb      	str	r3, [r7, #12]
 8003c6a:	e007      	b.n	8003c7c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d002      	beq.n	8003c7c <osDelay+0x2c>
      vTaskDelay(ticks);
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	f001 f930 	bl	8004edc <vTaskDelay>
    }
  }

  return (stat);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3710      	adds	r7, #16
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}

08003c86 <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 8003c86:	b580      	push	{r7, lr}
 8003c88:	b084      	sub	sp, #16
 8003c8a:	af00      	add	r7, sp, #0
 8003c8c:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f002 fb66 	bl	8006360 <pvTimerGetTimerID>
 8003c94:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d005      	beq.n	8003ca8 <TimerCallback+0x22>
    callb->func (callb->arg);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	68fa      	ldr	r2, [r7, #12]
 8003ca2:	6852      	ldr	r2, [r2, #4]
 8003ca4:	4610      	mov	r0, r2
 8003ca6:	4798      	blx	r3
  }
}
 8003ca8:	bf00      	nop
 8003caa:	3710      	adds	r7, #16
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}

08003cb0 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b08c      	sub	sp, #48	; 0x30
 8003cb4:	af02      	add	r7, sp, #8
 8003cb6:	60f8      	str	r0, [r7, #12]
 8003cb8:	607a      	str	r2, [r7, #4]
 8003cba:	603b      	str	r3, [r7, #0]
 8003cbc:	460b      	mov	r3, r1
 8003cbe:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003cc4:	f3ef 8305 	mrs	r3, IPSR
 8003cc8:	613b      	str	r3, [r7, #16]
  return(result);
 8003cca:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d163      	bne.n	8003d98 <osTimerNew+0xe8>
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d060      	beq.n	8003d98 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8003cd6:	2008      	movs	r0, #8
 8003cd8:	f002 fdae 	bl	8006838 <pvPortMalloc>
 8003cdc:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d059      	beq.n	8003d98 <osTimerNew+0xe8>
      callb->func = func;
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	68fa      	ldr	r2, [r7, #12]
 8003ce8:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	687a      	ldr	r2, [r7, #4]
 8003cee:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8003cf0:	7afb      	ldrb	r3, [r7, #11]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d102      	bne.n	8003cfc <osTimerNew+0x4c>
        reload = pdFALSE;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	61fb      	str	r3, [r7, #28]
 8003cfa:	e001      	b.n	8003d00 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 8003d00:	f04f 33ff 	mov.w	r3, #4294967295
 8003d04:	61bb      	str	r3, [r7, #24]
      name = NULL;
 8003d06:	2300      	movs	r3, #0
 8003d08:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d01c      	beq.n	8003d4a <osTimerNew+0x9a>
        if (attr->name != NULL) {
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d002      	beq.n	8003d1e <osTimerNew+0x6e>
          name = attr->name;
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d006      	beq.n	8003d34 <osTimerNew+0x84>
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	68db      	ldr	r3, [r3, #12]
 8003d2a:	2b2b      	cmp	r3, #43	; 0x2b
 8003d2c:	d902      	bls.n	8003d34 <osTimerNew+0x84>
          mem = 1;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	61bb      	str	r3, [r7, #24]
 8003d32:	e00c      	b.n	8003d4e <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d108      	bne.n	8003d4e <osTimerNew+0x9e>
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	68db      	ldr	r3, [r3, #12]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d104      	bne.n	8003d4e <osTimerNew+0x9e>
            mem = 0;
 8003d44:	2300      	movs	r3, #0
 8003d46:	61bb      	str	r3, [r7, #24]
 8003d48:	e001      	b.n	8003d4e <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8003d4e:	69bb      	ldr	r3, [r7, #24]
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d10c      	bne.n	8003d6e <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	9301      	str	r3, [sp, #4]
 8003d5a:	4b12      	ldr	r3, [pc, #72]	; (8003da4 <osTimerNew+0xf4>)
 8003d5c:	9300      	str	r3, [sp, #0]
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	69fa      	ldr	r2, [r7, #28]
 8003d62:	2101      	movs	r1, #1
 8003d64:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003d66:	f001 ff7c 	bl	8005c62 <xTimerCreateStatic>
 8003d6a:	6238      	str	r0, [r7, #32]
 8003d6c:	e00b      	b.n	8003d86 <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 8003d6e:	69bb      	ldr	r3, [r7, #24]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d108      	bne.n	8003d86 <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8003d74:	4b0b      	ldr	r3, [pc, #44]	; (8003da4 <osTimerNew+0xf4>)
 8003d76:	9300      	str	r3, [sp, #0]
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	69fa      	ldr	r2, [r7, #28]
 8003d7c:	2101      	movs	r1, #1
 8003d7e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003d80:	f001 ff4e 	bl	8005c20 <xTimerCreate>
 8003d84:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 8003d86:	6a3b      	ldr	r3, [r7, #32]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d105      	bne.n	8003d98 <osTimerNew+0xe8>
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d002      	beq.n	8003d98 <osTimerNew+0xe8>
        vPortFree (callb);
 8003d92:	6978      	ldr	r0, [r7, #20]
 8003d94:	f002 fe1c 	bl	80069d0 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8003d98:	6a3b      	ldr	r3, [r7, #32]
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3728      	adds	r7, #40	; 0x28
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	bf00      	nop
 8003da4:	08003c87 	.word	0x08003c87

08003da8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003da8:	b480      	push	{r7}
 8003daa:	b085      	sub	sp, #20
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	60f8      	str	r0, [r7, #12]
 8003db0:	60b9      	str	r1, [r7, #8]
 8003db2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	4a07      	ldr	r2, [pc, #28]	; (8003dd4 <vApplicationGetIdleTaskMemory+0x2c>)
 8003db8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	4a06      	ldr	r2, [pc, #24]	; (8003dd8 <vApplicationGetIdleTaskMemory+0x30>)
 8003dbe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2280      	movs	r2, #128	; 0x80
 8003dc4:	601a      	str	r2, [r3, #0]
}
 8003dc6:	bf00      	nop
 8003dc8:	3714      	adds	r7, #20
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd0:	4770      	bx	lr
 8003dd2:	bf00      	nop
 8003dd4:	200013e0 	.word	0x200013e0
 8003dd8:	2000143c 	.word	0x2000143c

08003ddc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003ddc:	b480      	push	{r7}
 8003dde:	b085      	sub	sp, #20
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	60f8      	str	r0, [r7, #12]
 8003de4:	60b9      	str	r1, [r7, #8]
 8003de6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	4a07      	ldr	r2, [pc, #28]	; (8003e08 <vApplicationGetTimerTaskMemory+0x2c>)
 8003dec:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	4a06      	ldr	r2, [pc, #24]	; (8003e0c <vApplicationGetTimerTaskMemory+0x30>)
 8003df2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003dfa:	601a      	str	r2, [r3, #0]
}
 8003dfc:	bf00      	nop
 8003dfe:	3714      	adds	r7, #20
 8003e00:	46bd      	mov	sp, r7
 8003e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e06:	4770      	bx	lr
 8003e08:	2000163c 	.word	0x2000163c
 8003e0c:	20001698 	.word	0x20001698

08003e10 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003e10:	b480      	push	{r7}
 8003e12:	b083      	sub	sp, #12
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	f103 0208 	add.w	r2, r3, #8
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	f04f 32ff 	mov.w	r2, #4294967295
 8003e28:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	f103 0208 	add.w	r2, r3, #8
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	f103 0208 	add.w	r2, r3, #8
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2200      	movs	r2, #0
 8003e42:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003e44:	bf00      	nop
 8003e46:	370c      	adds	r7, #12
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4e:	4770      	bx	lr

08003e50 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003e50:	b480      	push	{r7}
 8003e52:	b083      	sub	sp, #12
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003e5e:	bf00      	nop
 8003e60:	370c      	adds	r7, #12
 8003e62:	46bd      	mov	sp, r7
 8003e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e68:	4770      	bx	lr

08003e6a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003e6a:	b480      	push	{r7}
 8003e6c:	b085      	sub	sp, #20
 8003e6e:	af00      	add	r7, sp, #0
 8003e70:	6078      	str	r0, [r7, #4]
 8003e72:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	68fa      	ldr	r2, [r7, #12]
 8003e7e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	689a      	ldr	r2, [r3, #8]
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	683a      	ldr	r2, [r7, #0]
 8003e8e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	683a      	ldr	r2, [r7, #0]
 8003e94:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	687a      	ldr	r2, [r7, #4]
 8003e9a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	1c5a      	adds	r2, r3, #1
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	601a      	str	r2, [r3, #0]
}
 8003ea6:	bf00      	nop
 8003ea8:	3714      	adds	r7, #20
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr

08003eb2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003eb2:	b480      	push	{r7}
 8003eb4:	b085      	sub	sp, #20
 8003eb6:	af00      	add	r7, sp, #0
 8003eb8:	6078      	str	r0, [r7, #4]
 8003eba:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ec8:	d103      	bne.n	8003ed2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	691b      	ldr	r3, [r3, #16]
 8003ece:	60fb      	str	r3, [r7, #12]
 8003ed0:	e00c      	b.n	8003eec <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	3308      	adds	r3, #8
 8003ed6:	60fb      	str	r3, [r7, #12]
 8003ed8:	e002      	b.n	8003ee0 <vListInsert+0x2e>
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	60fb      	str	r3, [r7, #12]
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	68ba      	ldr	r2, [r7, #8]
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d2f6      	bcs.n	8003eda <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	685a      	ldr	r2, [r3, #4]
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	683a      	ldr	r2, [r7, #0]
 8003efa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	68fa      	ldr	r2, [r7, #12]
 8003f00:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	683a      	ldr	r2, [r7, #0]
 8003f06:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	687a      	ldr	r2, [r7, #4]
 8003f0c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	1c5a      	adds	r2, r3, #1
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	601a      	str	r2, [r3, #0]
}
 8003f18:	bf00      	nop
 8003f1a:	3714      	adds	r7, #20
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f22:	4770      	bx	lr

08003f24 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003f24:	b480      	push	{r7}
 8003f26:	b085      	sub	sp, #20
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	691b      	ldr	r3, [r3, #16]
 8003f30:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	687a      	ldr	r2, [r7, #4]
 8003f38:	6892      	ldr	r2, [r2, #8]
 8003f3a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	687a      	ldr	r2, [r7, #4]
 8003f42:	6852      	ldr	r2, [r2, #4]
 8003f44:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	687a      	ldr	r2, [r7, #4]
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d103      	bne.n	8003f58 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	689a      	ldr	r2, [r3, #8]
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	1e5a      	subs	r2, r3, #1
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	3714      	adds	r7, #20
 8003f70:	46bd      	mov	sp, r7
 8003f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f76:	4770      	bx	lr

08003f78 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b084      	sub	sp, #16
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
 8003f80:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d10a      	bne.n	8003fa2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f90:	f383 8811 	msr	BASEPRI, r3
 8003f94:	f3bf 8f6f 	isb	sy
 8003f98:	f3bf 8f4f 	dsb	sy
 8003f9c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003f9e:	bf00      	nop
 8003fa0:	e7fe      	b.n	8003fa0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003fa2:	f002 fb27 	bl	80065f4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681a      	ldr	r2, [r3, #0]
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fae:	68f9      	ldr	r1, [r7, #12]
 8003fb0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003fb2:	fb01 f303 	mul.w	r3, r1, r3
 8003fb6:	441a      	add	r2, r3
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fd2:	3b01      	subs	r3, #1
 8003fd4:	68f9      	ldr	r1, [r7, #12]
 8003fd6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003fd8:	fb01 f303 	mul.w	r3, r1, r3
 8003fdc:	441a      	add	r2, r3
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	22ff      	movs	r2, #255	; 0xff
 8003fe6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	22ff      	movs	r2, #255	; 0xff
 8003fee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d114      	bne.n	8004022 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	691b      	ldr	r3, [r3, #16]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d01a      	beq.n	8004036 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	3310      	adds	r3, #16
 8004004:	4618      	mov	r0, r3
 8004006:	f001 fa27 	bl	8005458 <xTaskRemoveFromEventList>
 800400a:	4603      	mov	r3, r0
 800400c:	2b00      	cmp	r3, #0
 800400e:	d012      	beq.n	8004036 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004010:	4b0c      	ldr	r3, [pc, #48]	; (8004044 <xQueueGenericReset+0xcc>)
 8004012:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004016:	601a      	str	r2, [r3, #0]
 8004018:	f3bf 8f4f 	dsb	sy
 800401c:	f3bf 8f6f 	isb	sy
 8004020:	e009      	b.n	8004036 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	3310      	adds	r3, #16
 8004026:	4618      	mov	r0, r3
 8004028:	f7ff fef2 	bl	8003e10 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	3324      	adds	r3, #36	; 0x24
 8004030:	4618      	mov	r0, r3
 8004032:	f7ff feed 	bl	8003e10 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004036:	f002 fb0d 	bl	8006654 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800403a:	2301      	movs	r3, #1
}
 800403c:	4618      	mov	r0, r3
 800403e:	3710      	adds	r7, #16
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}
 8004044:	e000ed04 	.word	0xe000ed04

08004048 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004048:	b580      	push	{r7, lr}
 800404a:	b08e      	sub	sp, #56	; 0x38
 800404c:	af02      	add	r7, sp, #8
 800404e:	60f8      	str	r0, [r7, #12]
 8004050:	60b9      	str	r1, [r7, #8]
 8004052:	607a      	str	r2, [r7, #4]
 8004054:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d10a      	bne.n	8004072 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800405c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004060:	f383 8811 	msr	BASEPRI, r3
 8004064:	f3bf 8f6f 	isb	sy
 8004068:	f3bf 8f4f 	dsb	sy
 800406c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800406e:	bf00      	nop
 8004070:	e7fe      	b.n	8004070 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d10a      	bne.n	800408e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800407c:	f383 8811 	msr	BASEPRI, r3
 8004080:	f3bf 8f6f 	isb	sy
 8004084:	f3bf 8f4f 	dsb	sy
 8004088:	627b      	str	r3, [r7, #36]	; 0x24
}
 800408a:	bf00      	nop
 800408c:	e7fe      	b.n	800408c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d002      	beq.n	800409a <xQueueGenericCreateStatic+0x52>
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d001      	beq.n	800409e <xQueueGenericCreateStatic+0x56>
 800409a:	2301      	movs	r3, #1
 800409c:	e000      	b.n	80040a0 <xQueueGenericCreateStatic+0x58>
 800409e:	2300      	movs	r3, #0
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d10a      	bne.n	80040ba <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80040a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040a8:	f383 8811 	msr	BASEPRI, r3
 80040ac:	f3bf 8f6f 	isb	sy
 80040b0:	f3bf 8f4f 	dsb	sy
 80040b4:	623b      	str	r3, [r7, #32]
}
 80040b6:	bf00      	nop
 80040b8:	e7fe      	b.n	80040b8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d102      	bne.n	80040c6 <xQueueGenericCreateStatic+0x7e>
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d101      	bne.n	80040ca <xQueueGenericCreateStatic+0x82>
 80040c6:	2301      	movs	r3, #1
 80040c8:	e000      	b.n	80040cc <xQueueGenericCreateStatic+0x84>
 80040ca:	2300      	movs	r3, #0
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d10a      	bne.n	80040e6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80040d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040d4:	f383 8811 	msr	BASEPRI, r3
 80040d8:	f3bf 8f6f 	isb	sy
 80040dc:	f3bf 8f4f 	dsb	sy
 80040e0:	61fb      	str	r3, [r7, #28]
}
 80040e2:	bf00      	nop
 80040e4:	e7fe      	b.n	80040e4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80040e6:	2350      	movs	r3, #80	; 0x50
 80040e8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	2b50      	cmp	r3, #80	; 0x50
 80040ee:	d00a      	beq.n	8004106 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80040f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040f4:	f383 8811 	msr	BASEPRI, r3
 80040f8:	f3bf 8f6f 	isb	sy
 80040fc:	f3bf 8f4f 	dsb	sy
 8004100:	61bb      	str	r3, [r7, #24]
}
 8004102:	bf00      	nop
 8004104:	e7fe      	b.n	8004104 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004106:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800410c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800410e:	2b00      	cmp	r3, #0
 8004110:	d00d      	beq.n	800412e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004114:	2201      	movs	r2, #1
 8004116:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800411a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800411e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004120:	9300      	str	r3, [sp, #0]
 8004122:	4613      	mov	r3, r2
 8004124:	687a      	ldr	r2, [r7, #4]
 8004126:	68b9      	ldr	r1, [r7, #8]
 8004128:	68f8      	ldr	r0, [r7, #12]
 800412a:	f000 f805 	bl	8004138 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800412e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004130:	4618      	mov	r0, r3
 8004132:	3730      	adds	r7, #48	; 0x30
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}

08004138 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b084      	sub	sp, #16
 800413c:	af00      	add	r7, sp, #0
 800413e:	60f8      	str	r0, [r7, #12]
 8004140:	60b9      	str	r1, [r7, #8]
 8004142:	607a      	str	r2, [r7, #4]
 8004144:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d103      	bne.n	8004154 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800414c:	69bb      	ldr	r3, [r7, #24]
 800414e:	69ba      	ldr	r2, [r7, #24]
 8004150:	601a      	str	r2, [r3, #0]
 8004152:	e002      	b.n	800415a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004154:	69bb      	ldr	r3, [r7, #24]
 8004156:	687a      	ldr	r2, [r7, #4]
 8004158:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800415a:	69bb      	ldr	r3, [r7, #24]
 800415c:	68fa      	ldr	r2, [r7, #12]
 800415e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004160:	69bb      	ldr	r3, [r7, #24]
 8004162:	68ba      	ldr	r2, [r7, #8]
 8004164:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004166:	2101      	movs	r1, #1
 8004168:	69b8      	ldr	r0, [r7, #24]
 800416a:	f7ff ff05 	bl	8003f78 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800416e:	69bb      	ldr	r3, [r7, #24]
 8004170:	78fa      	ldrb	r2, [r7, #3]
 8004172:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004176:	bf00      	nop
 8004178:	3710      	adds	r7, #16
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}
	...

08004180 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b08e      	sub	sp, #56	; 0x38
 8004184:	af00      	add	r7, sp, #0
 8004186:	60f8      	str	r0, [r7, #12]
 8004188:	60b9      	str	r1, [r7, #8]
 800418a:	607a      	str	r2, [r7, #4]
 800418c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800418e:	2300      	movs	r3, #0
 8004190:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004198:	2b00      	cmp	r3, #0
 800419a:	d10a      	bne.n	80041b2 <xQueueGenericSend+0x32>
	__asm volatile
 800419c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041a0:	f383 8811 	msr	BASEPRI, r3
 80041a4:	f3bf 8f6f 	isb	sy
 80041a8:	f3bf 8f4f 	dsb	sy
 80041ac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80041ae:	bf00      	nop
 80041b0:	e7fe      	b.n	80041b0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d103      	bne.n	80041c0 <xQueueGenericSend+0x40>
 80041b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d101      	bne.n	80041c4 <xQueueGenericSend+0x44>
 80041c0:	2301      	movs	r3, #1
 80041c2:	e000      	b.n	80041c6 <xQueueGenericSend+0x46>
 80041c4:	2300      	movs	r3, #0
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d10a      	bne.n	80041e0 <xQueueGenericSend+0x60>
	__asm volatile
 80041ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ce:	f383 8811 	msr	BASEPRI, r3
 80041d2:	f3bf 8f6f 	isb	sy
 80041d6:	f3bf 8f4f 	dsb	sy
 80041da:	627b      	str	r3, [r7, #36]	; 0x24
}
 80041dc:	bf00      	nop
 80041de:	e7fe      	b.n	80041de <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	2b02      	cmp	r3, #2
 80041e4:	d103      	bne.n	80041ee <xQueueGenericSend+0x6e>
 80041e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	d101      	bne.n	80041f2 <xQueueGenericSend+0x72>
 80041ee:	2301      	movs	r3, #1
 80041f0:	e000      	b.n	80041f4 <xQueueGenericSend+0x74>
 80041f2:	2300      	movs	r3, #0
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d10a      	bne.n	800420e <xQueueGenericSend+0x8e>
	__asm volatile
 80041f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041fc:	f383 8811 	msr	BASEPRI, r3
 8004200:	f3bf 8f6f 	isb	sy
 8004204:	f3bf 8f4f 	dsb	sy
 8004208:	623b      	str	r3, [r7, #32]
}
 800420a:	bf00      	nop
 800420c:	e7fe      	b.n	800420c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800420e:	f001 fae1 	bl	80057d4 <xTaskGetSchedulerState>
 8004212:	4603      	mov	r3, r0
 8004214:	2b00      	cmp	r3, #0
 8004216:	d102      	bne.n	800421e <xQueueGenericSend+0x9e>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d101      	bne.n	8004222 <xQueueGenericSend+0xa2>
 800421e:	2301      	movs	r3, #1
 8004220:	e000      	b.n	8004224 <xQueueGenericSend+0xa4>
 8004222:	2300      	movs	r3, #0
 8004224:	2b00      	cmp	r3, #0
 8004226:	d10a      	bne.n	800423e <xQueueGenericSend+0xbe>
	__asm volatile
 8004228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800422c:	f383 8811 	msr	BASEPRI, r3
 8004230:	f3bf 8f6f 	isb	sy
 8004234:	f3bf 8f4f 	dsb	sy
 8004238:	61fb      	str	r3, [r7, #28]
}
 800423a:	bf00      	nop
 800423c:	e7fe      	b.n	800423c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800423e:	f002 f9d9 	bl	80065f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004244:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004248:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800424a:	429a      	cmp	r2, r3
 800424c:	d302      	bcc.n	8004254 <xQueueGenericSend+0xd4>
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	2b02      	cmp	r3, #2
 8004252:	d129      	bne.n	80042a8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004254:	683a      	ldr	r2, [r7, #0]
 8004256:	68b9      	ldr	r1, [r7, #8]
 8004258:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800425a:	f000 fb2f 	bl	80048bc <prvCopyDataToQueue>
 800425e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004264:	2b00      	cmp	r3, #0
 8004266:	d010      	beq.n	800428a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800426a:	3324      	adds	r3, #36	; 0x24
 800426c:	4618      	mov	r0, r3
 800426e:	f001 f8f3 	bl	8005458 <xTaskRemoveFromEventList>
 8004272:	4603      	mov	r3, r0
 8004274:	2b00      	cmp	r3, #0
 8004276:	d013      	beq.n	80042a0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004278:	4b3f      	ldr	r3, [pc, #252]	; (8004378 <xQueueGenericSend+0x1f8>)
 800427a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800427e:	601a      	str	r2, [r3, #0]
 8004280:	f3bf 8f4f 	dsb	sy
 8004284:	f3bf 8f6f 	isb	sy
 8004288:	e00a      	b.n	80042a0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800428a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800428c:	2b00      	cmp	r3, #0
 800428e:	d007      	beq.n	80042a0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004290:	4b39      	ldr	r3, [pc, #228]	; (8004378 <xQueueGenericSend+0x1f8>)
 8004292:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004296:	601a      	str	r2, [r3, #0]
 8004298:	f3bf 8f4f 	dsb	sy
 800429c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80042a0:	f002 f9d8 	bl	8006654 <vPortExitCritical>
				return pdPASS;
 80042a4:	2301      	movs	r3, #1
 80042a6:	e063      	b.n	8004370 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d103      	bne.n	80042b6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80042ae:	f002 f9d1 	bl	8006654 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80042b2:	2300      	movs	r3, #0
 80042b4:	e05c      	b.n	8004370 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80042b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d106      	bne.n	80042ca <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80042bc:	f107 0314 	add.w	r3, r7, #20
 80042c0:	4618      	mov	r0, r3
 80042c2:	f001 f92d 	bl	8005520 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80042c6:	2301      	movs	r3, #1
 80042c8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80042ca:	f002 f9c3 	bl	8006654 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80042ce:	f000 fe9f 	bl	8005010 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80042d2:	f002 f98f 	bl	80065f4 <vPortEnterCritical>
 80042d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80042dc:	b25b      	sxtb	r3, r3
 80042de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042e2:	d103      	bne.n	80042ec <xQueueGenericSend+0x16c>
 80042e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042e6:	2200      	movs	r2, #0
 80042e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80042f2:	b25b      	sxtb	r3, r3
 80042f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042f8:	d103      	bne.n	8004302 <xQueueGenericSend+0x182>
 80042fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042fc:	2200      	movs	r2, #0
 80042fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004302:	f002 f9a7 	bl	8006654 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004306:	1d3a      	adds	r2, r7, #4
 8004308:	f107 0314 	add.w	r3, r7, #20
 800430c:	4611      	mov	r1, r2
 800430e:	4618      	mov	r0, r3
 8004310:	f001 f91c 	bl	800554c <xTaskCheckForTimeOut>
 8004314:	4603      	mov	r3, r0
 8004316:	2b00      	cmp	r3, #0
 8004318:	d124      	bne.n	8004364 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800431a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800431c:	f000 fbc6 	bl	8004aac <prvIsQueueFull>
 8004320:	4603      	mov	r3, r0
 8004322:	2b00      	cmp	r3, #0
 8004324:	d018      	beq.n	8004358 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004328:	3310      	adds	r3, #16
 800432a:	687a      	ldr	r2, [r7, #4]
 800432c:	4611      	mov	r1, r2
 800432e:	4618      	mov	r0, r3
 8004330:	f001 f842 	bl	80053b8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004334:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004336:	f000 fb51 	bl	80049dc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800433a:	f000 fe77 	bl	800502c <xTaskResumeAll>
 800433e:	4603      	mov	r3, r0
 8004340:	2b00      	cmp	r3, #0
 8004342:	f47f af7c 	bne.w	800423e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004346:	4b0c      	ldr	r3, [pc, #48]	; (8004378 <xQueueGenericSend+0x1f8>)
 8004348:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800434c:	601a      	str	r2, [r3, #0]
 800434e:	f3bf 8f4f 	dsb	sy
 8004352:	f3bf 8f6f 	isb	sy
 8004356:	e772      	b.n	800423e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004358:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800435a:	f000 fb3f 	bl	80049dc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800435e:	f000 fe65 	bl	800502c <xTaskResumeAll>
 8004362:	e76c      	b.n	800423e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004364:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004366:	f000 fb39 	bl	80049dc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800436a:	f000 fe5f 	bl	800502c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800436e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004370:	4618      	mov	r0, r3
 8004372:	3738      	adds	r7, #56	; 0x38
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}
 8004378:	e000ed04 	.word	0xe000ed04

0800437c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b090      	sub	sp, #64	; 0x40
 8004380:	af00      	add	r7, sp, #0
 8004382:	60f8      	str	r0, [r7, #12]
 8004384:	60b9      	str	r1, [r7, #8]
 8004386:	607a      	str	r2, [r7, #4]
 8004388:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800438e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004390:	2b00      	cmp	r3, #0
 8004392:	d10a      	bne.n	80043aa <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004398:	f383 8811 	msr	BASEPRI, r3
 800439c:	f3bf 8f6f 	isb	sy
 80043a0:	f3bf 8f4f 	dsb	sy
 80043a4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80043a6:	bf00      	nop
 80043a8:	e7fe      	b.n	80043a8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d103      	bne.n	80043b8 <xQueueGenericSendFromISR+0x3c>
 80043b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d101      	bne.n	80043bc <xQueueGenericSendFromISR+0x40>
 80043b8:	2301      	movs	r3, #1
 80043ba:	e000      	b.n	80043be <xQueueGenericSendFromISR+0x42>
 80043bc:	2300      	movs	r3, #0
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d10a      	bne.n	80043d8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80043c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043c6:	f383 8811 	msr	BASEPRI, r3
 80043ca:	f3bf 8f6f 	isb	sy
 80043ce:	f3bf 8f4f 	dsb	sy
 80043d2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80043d4:	bf00      	nop
 80043d6:	e7fe      	b.n	80043d6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	2b02      	cmp	r3, #2
 80043dc:	d103      	bne.n	80043e6 <xQueueGenericSendFromISR+0x6a>
 80043de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043e2:	2b01      	cmp	r3, #1
 80043e4:	d101      	bne.n	80043ea <xQueueGenericSendFromISR+0x6e>
 80043e6:	2301      	movs	r3, #1
 80043e8:	e000      	b.n	80043ec <xQueueGenericSendFromISR+0x70>
 80043ea:	2300      	movs	r3, #0
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d10a      	bne.n	8004406 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80043f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043f4:	f383 8811 	msr	BASEPRI, r3
 80043f8:	f3bf 8f6f 	isb	sy
 80043fc:	f3bf 8f4f 	dsb	sy
 8004400:	623b      	str	r3, [r7, #32]
}
 8004402:	bf00      	nop
 8004404:	e7fe      	b.n	8004404 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004406:	f002 f9d7 	bl	80067b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800440a:	f3ef 8211 	mrs	r2, BASEPRI
 800440e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004412:	f383 8811 	msr	BASEPRI, r3
 8004416:	f3bf 8f6f 	isb	sy
 800441a:	f3bf 8f4f 	dsb	sy
 800441e:	61fa      	str	r2, [r7, #28]
 8004420:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004422:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004424:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004428:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800442a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800442c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800442e:	429a      	cmp	r2, r3
 8004430:	d302      	bcc.n	8004438 <xQueueGenericSendFromISR+0xbc>
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	2b02      	cmp	r3, #2
 8004436:	d12f      	bne.n	8004498 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800443a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800443e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004446:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004448:	683a      	ldr	r2, [r7, #0]
 800444a:	68b9      	ldr	r1, [r7, #8]
 800444c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800444e:	f000 fa35 	bl	80048bc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004452:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004456:	f1b3 3fff 	cmp.w	r3, #4294967295
 800445a:	d112      	bne.n	8004482 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800445c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800445e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004460:	2b00      	cmp	r3, #0
 8004462:	d016      	beq.n	8004492 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004466:	3324      	adds	r3, #36	; 0x24
 8004468:	4618      	mov	r0, r3
 800446a:	f000 fff5 	bl	8005458 <xTaskRemoveFromEventList>
 800446e:	4603      	mov	r3, r0
 8004470:	2b00      	cmp	r3, #0
 8004472:	d00e      	beq.n	8004492 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d00b      	beq.n	8004492 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2201      	movs	r2, #1
 800447e:	601a      	str	r2, [r3, #0]
 8004480:	e007      	b.n	8004492 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004482:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004486:	3301      	adds	r3, #1
 8004488:	b2db      	uxtb	r3, r3
 800448a:	b25a      	sxtb	r2, r3
 800448c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800448e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004492:	2301      	movs	r3, #1
 8004494:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004496:	e001      	b.n	800449c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004498:	2300      	movs	r3, #0
 800449a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800449c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800449e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80044a6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80044a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3740      	adds	r7, #64	; 0x40
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}
	...

080044b4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b08c      	sub	sp, #48	; 0x30
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	60f8      	str	r0, [r7, #12]
 80044bc:	60b9      	str	r1, [r7, #8]
 80044be:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80044c0:	2300      	movs	r3, #0
 80044c2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80044c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d10a      	bne.n	80044e4 <xQueueReceive+0x30>
	__asm volatile
 80044ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044d2:	f383 8811 	msr	BASEPRI, r3
 80044d6:	f3bf 8f6f 	isb	sy
 80044da:	f3bf 8f4f 	dsb	sy
 80044de:	623b      	str	r3, [r7, #32]
}
 80044e0:	bf00      	nop
 80044e2:	e7fe      	b.n	80044e2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d103      	bne.n	80044f2 <xQueueReceive+0x3e>
 80044ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d101      	bne.n	80044f6 <xQueueReceive+0x42>
 80044f2:	2301      	movs	r3, #1
 80044f4:	e000      	b.n	80044f8 <xQueueReceive+0x44>
 80044f6:	2300      	movs	r3, #0
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d10a      	bne.n	8004512 <xQueueReceive+0x5e>
	__asm volatile
 80044fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004500:	f383 8811 	msr	BASEPRI, r3
 8004504:	f3bf 8f6f 	isb	sy
 8004508:	f3bf 8f4f 	dsb	sy
 800450c:	61fb      	str	r3, [r7, #28]
}
 800450e:	bf00      	nop
 8004510:	e7fe      	b.n	8004510 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004512:	f001 f95f 	bl	80057d4 <xTaskGetSchedulerState>
 8004516:	4603      	mov	r3, r0
 8004518:	2b00      	cmp	r3, #0
 800451a:	d102      	bne.n	8004522 <xQueueReceive+0x6e>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d101      	bne.n	8004526 <xQueueReceive+0x72>
 8004522:	2301      	movs	r3, #1
 8004524:	e000      	b.n	8004528 <xQueueReceive+0x74>
 8004526:	2300      	movs	r3, #0
 8004528:	2b00      	cmp	r3, #0
 800452a:	d10a      	bne.n	8004542 <xQueueReceive+0x8e>
	__asm volatile
 800452c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004530:	f383 8811 	msr	BASEPRI, r3
 8004534:	f3bf 8f6f 	isb	sy
 8004538:	f3bf 8f4f 	dsb	sy
 800453c:	61bb      	str	r3, [r7, #24]
}
 800453e:	bf00      	nop
 8004540:	e7fe      	b.n	8004540 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004542:	f002 f857 	bl	80065f4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800454a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800454c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800454e:	2b00      	cmp	r3, #0
 8004550:	d01f      	beq.n	8004592 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004552:	68b9      	ldr	r1, [r7, #8]
 8004554:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004556:	f000 fa1b 	bl	8004990 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800455a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800455c:	1e5a      	subs	r2, r3, #1
 800455e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004560:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004564:	691b      	ldr	r3, [r3, #16]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d00f      	beq.n	800458a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800456a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800456c:	3310      	adds	r3, #16
 800456e:	4618      	mov	r0, r3
 8004570:	f000 ff72 	bl	8005458 <xTaskRemoveFromEventList>
 8004574:	4603      	mov	r3, r0
 8004576:	2b00      	cmp	r3, #0
 8004578:	d007      	beq.n	800458a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800457a:	4b3d      	ldr	r3, [pc, #244]	; (8004670 <xQueueReceive+0x1bc>)
 800457c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004580:	601a      	str	r2, [r3, #0]
 8004582:	f3bf 8f4f 	dsb	sy
 8004586:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800458a:	f002 f863 	bl	8006654 <vPortExitCritical>
				return pdPASS;
 800458e:	2301      	movs	r3, #1
 8004590:	e069      	b.n	8004666 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d103      	bne.n	80045a0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004598:	f002 f85c 	bl	8006654 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800459c:	2300      	movs	r3, #0
 800459e:	e062      	b.n	8004666 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80045a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d106      	bne.n	80045b4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80045a6:	f107 0310 	add.w	r3, r7, #16
 80045aa:	4618      	mov	r0, r3
 80045ac:	f000 ffb8 	bl	8005520 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80045b0:	2301      	movs	r3, #1
 80045b2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80045b4:	f002 f84e 	bl	8006654 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80045b8:	f000 fd2a 	bl	8005010 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80045bc:	f002 f81a 	bl	80065f4 <vPortEnterCritical>
 80045c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045c2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80045c6:	b25b      	sxtb	r3, r3
 80045c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045cc:	d103      	bne.n	80045d6 <xQueueReceive+0x122>
 80045ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045d0:	2200      	movs	r2, #0
 80045d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80045dc:	b25b      	sxtb	r3, r3
 80045de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045e2:	d103      	bne.n	80045ec <xQueueReceive+0x138>
 80045e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045e6:	2200      	movs	r2, #0
 80045e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80045ec:	f002 f832 	bl	8006654 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80045f0:	1d3a      	adds	r2, r7, #4
 80045f2:	f107 0310 	add.w	r3, r7, #16
 80045f6:	4611      	mov	r1, r2
 80045f8:	4618      	mov	r0, r3
 80045fa:	f000 ffa7 	bl	800554c <xTaskCheckForTimeOut>
 80045fe:	4603      	mov	r3, r0
 8004600:	2b00      	cmp	r3, #0
 8004602:	d123      	bne.n	800464c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004604:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004606:	f000 fa3b 	bl	8004a80 <prvIsQueueEmpty>
 800460a:	4603      	mov	r3, r0
 800460c:	2b00      	cmp	r3, #0
 800460e:	d017      	beq.n	8004640 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004612:	3324      	adds	r3, #36	; 0x24
 8004614:	687a      	ldr	r2, [r7, #4]
 8004616:	4611      	mov	r1, r2
 8004618:	4618      	mov	r0, r3
 800461a:	f000 fecd 	bl	80053b8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800461e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004620:	f000 f9dc 	bl	80049dc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004624:	f000 fd02 	bl	800502c <xTaskResumeAll>
 8004628:	4603      	mov	r3, r0
 800462a:	2b00      	cmp	r3, #0
 800462c:	d189      	bne.n	8004542 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800462e:	4b10      	ldr	r3, [pc, #64]	; (8004670 <xQueueReceive+0x1bc>)
 8004630:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004634:	601a      	str	r2, [r3, #0]
 8004636:	f3bf 8f4f 	dsb	sy
 800463a:	f3bf 8f6f 	isb	sy
 800463e:	e780      	b.n	8004542 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004640:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004642:	f000 f9cb 	bl	80049dc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004646:	f000 fcf1 	bl	800502c <xTaskResumeAll>
 800464a:	e77a      	b.n	8004542 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800464c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800464e:	f000 f9c5 	bl	80049dc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004652:	f000 fceb 	bl	800502c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004656:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004658:	f000 fa12 	bl	8004a80 <prvIsQueueEmpty>
 800465c:	4603      	mov	r3, r0
 800465e:	2b00      	cmp	r3, #0
 8004660:	f43f af6f 	beq.w	8004542 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004664:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004666:	4618      	mov	r0, r3
 8004668:	3730      	adds	r7, #48	; 0x30
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}
 800466e:	bf00      	nop
 8004670:	e000ed04 	.word	0xe000ed04

08004674 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b08e      	sub	sp, #56	; 0x38
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
 800467c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800467e:	2300      	movs	r3, #0
 8004680:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004686:	2300      	movs	r3, #0
 8004688:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800468a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800468c:	2b00      	cmp	r3, #0
 800468e:	d10a      	bne.n	80046a6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8004690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004694:	f383 8811 	msr	BASEPRI, r3
 8004698:	f3bf 8f6f 	isb	sy
 800469c:	f3bf 8f4f 	dsb	sy
 80046a0:	623b      	str	r3, [r7, #32]
}
 80046a2:	bf00      	nop
 80046a4:	e7fe      	b.n	80046a4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80046a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d00a      	beq.n	80046c4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80046ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046b2:	f383 8811 	msr	BASEPRI, r3
 80046b6:	f3bf 8f6f 	isb	sy
 80046ba:	f3bf 8f4f 	dsb	sy
 80046be:	61fb      	str	r3, [r7, #28]
}
 80046c0:	bf00      	nop
 80046c2:	e7fe      	b.n	80046c2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80046c4:	f001 f886 	bl	80057d4 <xTaskGetSchedulerState>
 80046c8:	4603      	mov	r3, r0
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d102      	bne.n	80046d4 <xQueueSemaphoreTake+0x60>
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d101      	bne.n	80046d8 <xQueueSemaphoreTake+0x64>
 80046d4:	2301      	movs	r3, #1
 80046d6:	e000      	b.n	80046da <xQueueSemaphoreTake+0x66>
 80046d8:	2300      	movs	r3, #0
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d10a      	bne.n	80046f4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80046de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046e2:	f383 8811 	msr	BASEPRI, r3
 80046e6:	f3bf 8f6f 	isb	sy
 80046ea:	f3bf 8f4f 	dsb	sy
 80046ee:	61bb      	str	r3, [r7, #24]
}
 80046f0:	bf00      	nop
 80046f2:	e7fe      	b.n	80046f2 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80046f4:	f001 ff7e 	bl	80065f4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80046f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046fc:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80046fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004700:	2b00      	cmp	r3, #0
 8004702:	d024      	beq.n	800474e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004706:	1e5a      	subs	r2, r3, #1
 8004708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800470a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800470c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d104      	bne.n	800471e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8004714:	f001 f9d4 	bl	8005ac0 <pvTaskIncrementMutexHeldCount>
 8004718:	4602      	mov	r2, r0
 800471a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800471c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800471e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004720:	691b      	ldr	r3, [r3, #16]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d00f      	beq.n	8004746 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004728:	3310      	adds	r3, #16
 800472a:	4618      	mov	r0, r3
 800472c:	f000 fe94 	bl	8005458 <xTaskRemoveFromEventList>
 8004730:	4603      	mov	r3, r0
 8004732:	2b00      	cmp	r3, #0
 8004734:	d007      	beq.n	8004746 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004736:	4b54      	ldr	r3, [pc, #336]	; (8004888 <xQueueSemaphoreTake+0x214>)
 8004738:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800473c:	601a      	str	r2, [r3, #0]
 800473e:	f3bf 8f4f 	dsb	sy
 8004742:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004746:	f001 ff85 	bl	8006654 <vPortExitCritical>
				return pdPASS;
 800474a:	2301      	movs	r3, #1
 800474c:	e097      	b.n	800487e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d111      	bne.n	8004778 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004756:	2b00      	cmp	r3, #0
 8004758:	d00a      	beq.n	8004770 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800475a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800475e:	f383 8811 	msr	BASEPRI, r3
 8004762:	f3bf 8f6f 	isb	sy
 8004766:	f3bf 8f4f 	dsb	sy
 800476a:	617b      	str	r3, [r7, #20]
}
 800476c:	bf00      	nop
 800476e:	e7fe      	b.n	800476e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004770:	f001 ff70 	bl	8006654 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004774:	2300      	movs	r3, #0
 8004776:	e082      	b.n	800487e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004778:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800477a:	2b00      	cmp	r3, #0
 800477c:	d106      	bne.n	800478c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800477e:	f107 030c 	add.w	r3, r7, #12
 8004782:	4618      	mov	r0, r3
 8004784:	f000 fecc 	bl	8005520 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004788:	2301      	movs	r3, #1
 800478a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800478c:	f001 ff62 	bl	8006654 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004790:	f000 fc3e 	bl	8005010 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004794:	f001 ff2e 	bl	80065f4 <vPortEnterCritical>
 8004798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800479a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800479e:	b25b      	sxtb	r3, r3
 80047a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047a4:	d103      	bne.n	80047ae <xQueueSemaphoreTake+0x13a>
 80047a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047a8:	2200      	movs	r2, #0
 80047aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80047b4:	b25b      	sxtb	r3, r3
 80047b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047ba:	d103      	bne.n	80047c4 <xQueueSemaphoreTake+0x150>
 80047bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047be:	2200      	movs	r2, #0
 80047c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80047c4:	f001 ff46 	bl	8006654 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80047c8:	463a      	mov	r2, r7
 80047ca:	f107 030c 	add.w	r3, r7, #12
 80047ce:	4611      	mov	r1, r2
 80047d0:	4618      	mov	r0, r3
 80047d2:	f000 febb 	bl	800554c <xTaskCheckForTimeOut>
 80047d6:	4603      	mov	r3, r0
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d132      	bne.n	8004842 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80047dc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80047de:	f000 f94f 	bl	8004a80 <prvIsQueueEmpty>
 80047e2:	4603      	mov	r3, r0
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d026      	beq.n	8004836 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80047e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d109      	bne.n	8004804 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80047f0:	f001 ff00 	bl	80065f4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80047f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	4618      	mov	r0, r3
 80047fa:	f001 f809 	bl	8005810 <xTaskPriorityInherit>
 80047fe:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8004800:	f001 ff28 	bl	8006654 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004806:	3324      	adds	r3, #36	; 0x24
 8004808:	683a      	ldr	r2, [r7, #0]
 800480a:	4611      	mov	r1, r2
 800480c:	4618      	mov	r0, r3
 800480e:	f000 fdd3 	bl	80053b8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004812:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004814:	f000 f8e2 	bl	80049dc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004818:	f000 fc08 	bl	800502c <xTaskResumeAll>
 800481c:	4603      	mov	r3, r0
 800481e:	2b00      	cmp	r3, #0
 8004820:	f47f af68 	bne.w	80046f4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8004824:	4b18      	ldr	r3, [pc, #96]	; (8004888 <xQueueSemaphoreTake+0x214>)
 8004826:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800482a:	601a      	str	r2, [r3, #0]
 800482c:	f3bf 8f4f 	dsb	sy
 8004830:	f3bf 8f6f 	isb	sy
 8004834:	e75e      	b.n	80046f4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8004836:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004838:	f000 f8d0 	bl	80049dc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800483c:	f000 fbf6 	bl	800502c <xTaskResumeAll>
 8004840:	e758      	b.n	80046f4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004842:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004844:	f000 f8ca 	bl	80049dc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004848:	f000 fbf0 	bl	800502c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800484c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800484e:	f000 f917 	bl	8004a80 <prvIsQueueEmpty>
 8004852:	4603      	mov	r3, r0
 8004854:	2b00      	cmp	r3, #0
 8004856:	f43f af4d 	beq.w	80046f4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800485a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800485c:	2b00      	cmp	r3, #0
 800485e:	d00d      	beq.n	800487c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8004860:	f001 fec8 	bl	80065f4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004864:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004866:	f000 f811 	bl	800488c <prvGetDisinheritPriorityAfterTimeout>
 800486a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800486c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004872:	4618      	mov	r0, r3
 8004874:	f001 f8a2 	bl	80059bc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004878:	f001 feec 	bl	8006654 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800487c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800487e:	4618      	mov	r0, r3
 8004880:	3738      	adds	r7, #56	; 0x38
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}
 8004886:	bf00      	nop
 8004888:	e000ed04 	.word	0xe000ed04

0800488c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800488c:	b480      	push	{r7}
 800488e:	b085      	sub	sp, #20
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004898:	2b00      	cmp	r3, #0
 800489a:	d006      	beq.n	80048aa <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80048a6:	60fb      	str	r3, [r7, #12]
 80048a8:	e001      	b.n	80048ae <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80048aa:	2300      	movs	r3, #0
 80048ac:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80048ae:	68fb      	ldr	r3, [r7, #12]
	}
 80048b0:	4618      	mov	r0, r3
 80048b2:	3714      	adds	r7, #20
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr

080048bc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b086      	sub	sp, #24
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	60f8      	str	r0, [r7, #12]
 80048c4:	60b9      	str	r1, [r7, #8]
 80048c6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80048c8:	2300      	movs	r3, #0
 80048ca:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048d0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d10d      	bne.n	80048f6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d14d      	bne.n	800497e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	4618      	mov	r0, r3
 80048e8:	f000 fffa 	bl	80058e0 <xTaskPriorityDisinherit>
 80048ec:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	2200      	movs	r2, #0
 80048f2:	609a      	str	r2, [r3, #8]
 80048f4:	e043      	b.n	800497e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d119      	bne.n	8004930 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	6858      	ldr	r0, [r3, #4]
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004904:	461a      	mov	r2, r3
 8004906:	68b9      	ldr	r1, [r7, #8]
 8004908:	f002 ff12 	bl	8007730 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	685a      	ldr	r2, [r3, #4]
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004914:	441a      	add	r2, r3
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	685a      	ldr	r2, [r3, #4]
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	429a      	cmp	r2, r3
 8004924:	d32b      	bcc.n	800497e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681a      	ldr	r2, [r3, #0]
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	605a      	str	r2, [r3, #4]
 800492e:	e026      	b.n	800497e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	68d8      	ldr	r0, [r3, #12]
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004938:	461a      	mov	r2, r3
 800493a:	68b9      	ldr	r1, [r7, #8]
 800493c:	f002 fef8 	bl	8007730 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	68da      	ldr	r2, [r3, #12]
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004948:	425b      	negs	r3, r3
 800494a:	441a      	add	r2, r3
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	68da      	ldr	r2, [r3, #12]
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	429a      	cmp	r2, r3
 800495a:	d207      	bcs.n	800496c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	689a      	ldr	r2, [r3, #8]
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004964:	425b      	negs	r3, r3
 8004966:	441a      	add	r2, r3
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2b02      	cmp	r3, #2
 8004970:	d105      	bne.n	800497e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d002      	beq.n	800497e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004978:	693b      	ldr	r3, [r7, #16]
 800497a:	3b01      	subs	r3, #1
 800497c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	1c5a      	adds	r2, r3, #1
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004986:	697b      	ldr	r3, [r7, #20]
}
 8004988:	4618      	mov	r0, r3
 800498a:	3718      	adds	r7, #24
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}

08004990 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b082      	sub	sp, #8
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
 8004998:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d018      	beq.n	80049d4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	68da      	ldr	r2, [r3, #12]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049aa:	441a      	add	r2, r3
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	68da      	ldr	r2, [r3, #12]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	689b      	ldr	r3, [r3, #8]
 80049b8:	429a      	cmp	r2, r3
 80049ba:	d303      	bcc.n	80049c4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	68d9      	ldr	r1, [r3, #12]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049cc:	461a      	mov	r2, r3
 80049ce:	6838      	ldr	r0, [r7, #0]
 80049d0:	f002 feae 	bl	8007730 <memcpy>
	}
}
 80049d4:	bf00      	nop
 80049d6:	3708      	adds	r7, #8
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}

080049dc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b084      	sub	sp, #16
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80049e4:	f001 fe06 	bl	80065f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80049ee:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80049f0:	e011      	b.n	8004a16 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d012      	beq.n	8004a20 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	3324      	adds	r3, #36	; 0x24
 80049fe:	4618      	mov	r0, r3
 8004a00:	f000 fd2a 	bl	8005458 <xTaskRemoveFromEventList>
 8004a04:	4603      	mov	r3, r0
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d001      	beq.n	8004a0e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004a0a:	f000 fe01 	bl	8005610 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004a0e:	7bfb      	ldrb	r3, [r7, #15]
 8004a10:	3b01      	subs	r3, #1
 8004a12:	b2db      	uxtb	r3, r3
 8004a14:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004a16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	dce9      	bgt.n	80049f2 <prvUnlockQueue+0x16>
 8004a1e:	e000      	b.n	8004a22 <prvUnlockQueue+0x46>
					break;
 8004a20:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	22ff      	movs	r2, #255	; 0xff
 8004a26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004a2a:	f001 fe13 	bl	8006654 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004a2e:	f001 fde1 	bl	80065f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004a38:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004a3a:	e011      	b.n	8004a60 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	691b      	ldr	r3, [r3, #16]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d012      	beq.n	8004a6a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	3310      	adds	r3, #16
 8004a48:	4618      	mov	r0, r3
 8004a4a:	f000 fd05 	bl	8005458 <xTaskRemoveFromEventList>
 8004a4e:	4603      	mov	r3, r0
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d001      	beq.n	8004a58 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004a54:	f000 fddc 	bl	8005610 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004a58:	7bbb      	ldrb	r3, [r7, #14]
 8004a5a:	3b01      	subs	r3, #1
 8004a5c:	b2db      	uxtb	r3, r3
 8004a5e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004a60:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	dce9      	bgt.n	8004a3c <prvUnlockQueue+0x60>
 8004a68:	e000      	b.n	8004a6c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004a6a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	22ff      	movs	r2, #255	; 0xff
 8004a70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004a74:	f001 fdee 	bl	8006654 <vPortExitCritical>
}
 8004a78:	bf00      	nop
 8004a7a:	3710      	adds	r7, #16
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}

08004a80 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b084      	sub	sp, #16
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004a88:	f001 fdb4 	bl	80065f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d102      	bne.n	8004a9a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004a94:	2301      	movs	r3, #1
 8004a96:	60fb      	str	r3, [r7, #12]
 8004a98:	e001      	b.n	8004a9e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004a9e:	f001 fdd9 	bl	8006654 <vPortExitCritical>

	return xReturn;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
}
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	3710      	adds	r7, #16
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bd80      	pop	{r7, pc}

08004aac <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b084      	sub	sp, #16
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004ab4:	f001 fd9e 	bl	80065f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ac0:	429a      	cmp	r2, r3
 8004ac2:	d102      	bne.n	8004aca <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	60fb      	str	r3, [r7, #12]
 8004ac8:	e001      	b.n	8004ace <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004aca:	2300      	movs	r3, #0
 8004acc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004ace:	f001 fdc1 	bl	8006654 <vPortExitCritical>

	return xReturn;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	3710      	adds	r7, #16
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bd80      	pop	{r7, pc}

08004adc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004adc:	b480      	push	{r7}
 8004ade:	b085      	sub	sp, #20
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
 8004ae4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	60fb      	str	r3, [r7, #12]
 8004aea:	e014      	b.n	8004b16 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004aec:	4a0f      	ldr	r2, [pc, #60]	; (8004b2c <vQueueAddToRegistry+0x50>)
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d10b      	bne.n	8004b10 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004af8:	490c      	ldr	r1, [pc, #48]	; (8004b2c <vQueueAddToRegistry+0x50>)
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	683a      	ldr	r2, [r7, #0]
 8004afe:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004b02:	4a0a      	ldr	r2, [pc, #40]	; (8004b2c <vQueueAddToRegistry+0x50>)
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	00db      	lsls	r3, r3, #3
 8004b08:	4413      	add	r3, r2
 8004b0a:	687a      	ldr	r2, [r7, #4]
 8004b0c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004b0e:	e006      	b.n	8004b1e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	3301      	adds	r3, #1
 8004b14:	60fb      	str	r3, [r7, #12]
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	2b07      	cmp	r3, #7
 8004b1a:	d9e7      	bls.n	8004aec <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004b1c:	bf00      	nop
 8004b1e:	bf00      	nop
 8004b20:	3714      	adds	r7, #20
 8004b22:	46bd      	mov	sp, r7
 8004b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b28:	4770      	bx	lr
 8004b2a:	bf00      	nop
 8004b2c:	20001a98 	.word	0x20001a98

08004b30 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b086      	sub	sp, #24
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	60f8      	str	r0, [r7, #12]
 8004b38:	60b9      	str	r1, [r7, #8]
 8004b3a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004b40:	f001 fd58 	bl	80065f4 <vPortEnterCritical>
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004b4a:	b25b      	sxtb	r3, r3
 8004b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b50:	d103      	bne.n	8004b5a <vQueueWaitForMessageRestricted+0x2a>
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	2200      	movs	r2, #0
 8004b56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b60:	b25b      	sxtb	r3, r3
 8004b62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b66:	d103      	bne.n	8004b70 <vQueueWaitForMessageRestricted+0x40>
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b70:	f001 fd70 	bl	8006654 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d106      	bne.n	8004b8a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	3324      	adds	r3, #36	; 0x24
 8004b80:	687a      	ldr	r2, [r7, #4]
 8004b82:	68b9      	ldr	r1, [r7, #8]
 8004b84:	4618      	mov	r0, r3
 8004b86:	f000 fc3b 	bl	8005400 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004b8a:	6978      	ldr	r0, [r7, #20]
 8004b8c:	f7ff ff26 	bl	80049dc <prvUnlockQueue>
	}
 8004b90:	bf00      	nop
 8004b92:	3718      	adds	r7, #24
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bd80      	pop	{r7, pc}

08004b98 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b08e      	sub	sp, #56	; 0x38
 8004b9c:	af04      	add	r7, sp, #16
 8004b9e:	60f8      	str	r0, [r7, #12]
 8004ba0:	60b9      	str	r1, [r7, #8]
 8004ba2:	607a      	str	r2, [r7, #4]
 8004ba4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004ba6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d10a      	bne.n	8004bc2 <xTaskCreateStatic+0x2a>
	__asm volatile
 8004bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bb0:	f383 8811 	msr	BASEPRI, r3
 8004bb4:	f3bf 8f6f 	isb	sy
 8004bb8:	f3bf 8f4f 	dsb	sy
 8004bbc:	623b      	str	r3, [r7, #32]
}
 8004bbe:	bf00      	nop
 8004bc0:	e7fe      	b.n	8004bc0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004bc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d10a      	bne.n	8004bde <xTaskCreateStatic+0x46>
	__asm volatile
 8004bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bcc:	f383 8811 	msr	BASEPRI, r3
 8004bd0:	f3bf 8f6f 	isb	sy
 8004bd4:	f3bf 8f4f 	dsb	sy
 8004bd8:	61fb      	str	r3, [r7, #28]
}
 8004bda:	bf00      	nop
 8004bdc:	e7fe      	b.n	8004bdc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004bde:	235c      	movs	r3, #92	; 0x5c
 8004be0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	2b5c      	cmp	r3, #92	; 0x5c
 8004be6:	d00a      	beq.n	8004bfe <xTaskCreateStatic+0x66>
	__asm volatile
 8004be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bec:	f383 8811 	msr	BASEPRI, r3
 8004bf0:	f3bf 8f6f 	isb	sy
 8004bf4:	f3bf 8f4f 	dsb	sy
 8004bf8:	61bb      	str	r3, [r7, #24]
}
 8004bfa:	bf00      	nop
 8004bfc:	e7fe      	b.n	8004bfc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004bfe:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004c00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d01e      	beq.n	8004c44 <xTaskCreateStatic+0xac>
 8004c06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d01b      	beq.n	8004c44 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004c0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c0e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c12:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c14:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c18:	2202      	movs	r2, #2
 8004c1a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004c1e:	2300      	movs	r3, #0
 8004c20:	9303      	str	r3, [sp, #12]
 8004c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c24:	9302      	str	r3, [sp, #8]
 8004c26:	f107 0314 	add.w	r3, r7, #20
 8004c2a:	9301      	str	r3, [sp, #4]
 8004c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c2e:	9300      	str	r3, [sp, #0]
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	687a      	ldr	r2, [r7, #4]
 8004c34:	68b9      	ldr	r1, [r7, #8]
 8004c36:	68f8      	ldr	r0, [r7, #12]
 8004c38:	f000 f850 	bl	8004cdc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004c3c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004c3e:	f000 f8dd 	bl	8004dfc <prvAddNewTaskToReadyList>
 8004c42:	e001      	b.n	8004c48 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004c44:	2300      	movs	r3, #0
 8004c46:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004c48:	697b      	ldr	r3, [r7, #20]
	}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3728      	adds	r7, #40	; 0x28
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}

08004c52 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004c52:	b580      	push	{r7, lr}
 8004c54:	b08c      	sub	sp, #48	; 0x30
 8004c56:	af04      	add	r7, sp, #16
 8004c58:	60f8      	str	r0, [r7, #12]
 8004c5a:	60b9      	str	r1, [r7, #8]
 8004c5c:	603b      	str	r3, [r7, #0]
 8004c5e:	4613      	mov	r3, r2
 8004c60:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004c62:	88fb      	ldrh	r3, [r7, #6]
 8004c64:	009b      	lsls	r3, r3, #2
 8004c66:	4618      	mov	r0, r3
 8004c68:	f001 fde6 	bl	8006838 <pvPortMalloc>
 8004c6c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d00e      	beq.n	8004c92 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004c74:	205c      	movs	r0, #92	; 0x5c
 8004c76:	f001 fddf 	bl	8006838 <pvPortMalloc>
 8004c7a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004c7c:	69fb      	ldr	r3, [r7, #28]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d003      	beq.n	8004c8a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004c82:	69fb      	ldr	r3, [r7, #28]
 8004c84:	697a      	ldr	r2, [r7, #20]
 8004c86:	631a      	str	r2, [r3, #48]	; 0x30
 8004c88:	e005      	b.n	8004c96 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004c8a:	6978      	ldr	r0, [r7, #20]
 8004c8c:	f001 fea0 	bl	80069d0 <vPortFree>
 8004c90:	e001      	b.n	8004c96 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004c92:	2300      	movs	r3, #0
 8004c94:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004c96:	69fb      	ldr	r3, [r7, #28]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d017      	beq.n	8004ccc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004c9c:	69fb      	ldr	r3, [r7, #28]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004ca4:	88fa      	ldrh	r2, [r7, #6]
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	9303      	str	r3, [sp, #12]
 8004caa:	69fb      	ldr	r3, [r7, #28]
 8004cac:	9302      	str	r3, [sp, #8]
 8004cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cb0:	9301      	str	r3, [sp, #4]
 8004cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cb4:	9300      	str	r3, [sp, #0]
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	68b9      	ldr	r1, [r7, #8]
 8004cba:	68f8      	ldr	r0, [r7, #12]
 8004cbc:	f000 f80e 	bl	8004cdc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004cc0:	69f8      	ldr	r0, [r7, #28]
 8004cc2:	f000 f89b 	bl	8004dfc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	61bb      	str	r3, [r7, #24]
 8004cca:	e002      	b.n	8004cd2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004ccc:	f04f 33ff 	mov.w	r3, #4294967295
 8004cd0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004cd2:	69bb      	ldr	r3, [r7, #24]
	}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	3720      	adds	r7, #32
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}

08004cdc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b088      	sub	sp, #32
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	60f8      	str	r0, [r7, #12]
 8004ce4:	60b9      	str	r1, [r7, #8]
 8004ce6:	607a      	str	r2, [r7, #4]
 8004ce8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cec:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	009b      	lsls	r3, r3, #2
 8004cf2:	461a      	mov	r2, r3
 8004cf4:	21a5      	movs	r1, #165	; 0xa5
 8004cf6:	f002 fd29 	bl	800774c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cfc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004d04:	3b01      	subs	r3, #1
 8004d06:	009b      	lsls	r3, r3, #2
 8004d08:	4413      	add	r3, r2
 8004d0a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004d0c:	69bb      	ldr	r3, [r7, #24]
 8004d0e:	f023 0307 	bic.w	r3, r3, #7
 8004d12:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004d14:	69bb      	ldr	r3, [r7, #24]
 8004d16:	f003 0307 	and.w	r3, r3, #7
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d00a      	beq.n	8004d34 <prvInitialiseNewTask+0x58>
	__asm volatile
 8004d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d22:	f383 8811 	msr	BASEPRI, r3
 8004d26:	f3bf 8f6f 	isb	sy
 8004d2a:	f3bf 8f4f 	dsb	sy
 8004d2e:	617b      	str	r3, [r7, #20]
}
 8004d30:	bf00      	nop
 8004d32:	e7fe      	b.n	8004d32 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d01f      	beq.n	8004d7a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	61fb      	str	r3, [r7, #28]
 8004d3e:	e012      	b.n	8004d66 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004d40:	68ba      	ldr	r2, [r7, #8]
 8004d42:	69fb      	ldr	r3, [r7, #28]
 8004d44:	4413      	add	r3, r2
 8004d46:	7819      	ldrb	r1, [r3, #0]
 8004d48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d4a:	69fb      	ldr	r3, [r7, #28]
 8004d4c:	4413      	add	r3, r2
 8004d4e:	3334      	adds	r3, #52	; 0x34
 8004d50:	460a      	mov	r2, r1
 8004d52:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004d54:	68ba      	ldr	r2, [r7, #8]
 8004d56:	69fb      	ldr	r3, [r7, #28]
 8004d58:	4413      	add	r3, r2
 8004d5a:	781b      	ldrb	r3, [r3, #0]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d006      	beq.n	8004d6e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004d60:	69fb      	ldr	r3, [r7, #28]
 8004d62:	3301      	adds	r3, #1
 8004d64:	61fb      	str	r3, [r7, #28]
 8004d66:	69fb      	ldr	r3, [r7, #28]
 8004d68:	2b0f      	cmp	r3, #15
 8004d6a:	d9e9      	bls.n	8004d40 <prvInitialiseNewTask+0x64>
 8004d6c:	e000      	b.n	8004d70 <prvInitialiseNewTask+0x94>
			{
				break;
 8004d6e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d72:	2200      	movs	r2, #0
 8004d74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004d78:	e003      	b.n	8004d82 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d84:	2b37      	cmp	r3, #55	; 0x37
 8004d86:	d901      	bls.n	8004d8c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004d88:	2337      	movs	r3, #55	; 0x37
 8004d8a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d90:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d96:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004da0:	3304      	adds	r3, #4
 8004da2:	4618      	mov	r0, r3
 8004da4:	f7ff f854 	bl	8003e50 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004daa:	3318      	adds	r3, #24
 8004dac:	4618      	mov	r0, r3
 8004dae:	f7ff f84f 	bl	8003e50 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004db4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004db6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dba:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dc0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004dc6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dca:	2200      	movs	r2, #0
 8004dcc:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004dd6:	683a      	ldr	r2, [r7, #0]
 8004dd8:	68f9      	ldr	r1, [r7, #12]
 8004dda:	69b8      	ldr	r0, [r7, #24]
 8004ddc:	f001 fae0 	bl	80063a0 <pxPortInitialiseStack>
 8004de0:	4602      	mov	r2, r0
 8004de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004de4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d002      	beq.n	8004df2 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004df0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004df2:	bf00      	nop
 8004df4:	3720      	adds	r7, #32
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bd80      	pop	{r7, pc}
	...

08004dfc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b082      	sub	sp, #8
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004e04:	f001 fbf6 	bl	80065f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004e08:	4b2d      	ldr	r3, [pc, #180]	; (8004ec0 <prvAddNewTaskToReadyList+0xc4>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	3301      	adds	r3, #1
 8004e0e:	4a2c      	ldr	r2, [pc, #176]	; (8004ec0 <prvAddNewTaskToReadyList+0xc4>)
 8004e10:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004e12:	4b2c      	ldr	r3, [pc, #176]	; (8004ec4 <prvAddNewTaskToReadyList+0xc8>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d109      	bne.n	8004e2e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004e1a:	4a2a      	ldr	r2, [pc, #168]	; (8004ec4 <prvAddNewTaskToReadyList+0xc8>)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004e20:	4b27      	ldr	r3, [pc, #156]	; (8004ec0 <prvAddNewTaskToReadyList+0xc4>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	2b01      	cmp	r3, #1
 8004e26:	d110      	bne.n	8004e4a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004e28:	f000 fc16 	bl	8005658 <prvInitialiseTaskLists>
 8004e2c:	e00d      	b.n	8004e4a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004e2e:	4b26      	ldr	r3, [pc, #152]	; (8004ec8 <prvAddNewTaskToReadyList+0xcc>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d109      	bne.n	8004e4a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004e36:	4b23      	ldr	r3, [pc, #140]	; (8004ec4 <prvAddNewTaskToReadyList+0xc8>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e40:	429a      	cmp	r2, r3
 8004e42:	d802      	bhi.n	8004e4a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004e44:	4a1f      	ldr	r2, [pc, #124]	; (8004ec4 <prvAddNewTaskToReadyList+0xc8>)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004e4a:	4b20      	ldr	r3, [pc, #128]	; (8004ecc <prvAddNewTaskToReadyList+0xd0>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	3301      	adds	r3, #1
 8004e50:	4a1e      	ldr	r2, [pc, #120]	; (8004ecc <prvAddNewTaskToReadyList+0xd0>)
 8004e52:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004e54:	4b1d      	ldr	r3, [pc, #116]	; (8004ecc <prvAddNewTaskToReadyList+0xd0>)
 8004e56:	681a      	ldr	r2, [r3, #0]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e60:	4b1b      	ldr	r3, [pc, #108]	; (8004ed0 <prvAddNewTaskToReadyList+0xd4>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	429a      	cmp	r2, r3
 8004e66:	d903      	bls.n	8004e70 <prvAddNewTaskToReadyList+0x74>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e6c:	4a18      	ldr	r2, [pc, #96]	; (8004ed0 <prvAddNewTaskToReadyList+0xd4>)
 8004e6e:	6013      	str	r3, [r2, #0]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e74:	4613      	mov	r3, r2
 8004e76:	009b      	lsls	r3, r3, #2
 8004e78:	4413      	add	r3, r2
 8004e7a:	009b      	lsls	r3, r3, #2
 8004e7c:	4a15      	ldr	r2, [pc, #84]	; (8004ed4 <prvAddNewTaskToReadyList+0xd8>)
 8004e7e:	441a      	add	r2, r3
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	3304      	adds	r3, #4
 8004e84:	4619      	mov	r1, r3
 8004e86:	4610      	mov	r0, r2
 8004e88:	f7fe ffef 	bl	8003e6a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004e8c:	f001 fbe2 	bl	8006654 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004e90:	4b0d      	ldr	r3, [pc, #52]	; (8004ec8 <prvAddNewTaskToReadyList+0xcc>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d00e      	beq.n	8004eb6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004e98:	4b0a      	ldr	r3, [pc, #40]	; (8004ec4 <prvAddNewTaskToReadyList+0xc8>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ea2:	429a      	cmp	r2, r3
 8004ea4:	d207      	bcs.n	8004eb6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004ea6:	4b0c      	ldr	r3, [pc, #48]	; (8004ed8 <prvAddNewTaskToReadyList+0xdc>)
 8004ea8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004eac:	601a      	str	r2, [r3, #0]
 8004eae:	f3bf 8f4f 	dsb	sy
 8004eb2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004eb6:	bf00      	nop
 8004eb8:	3708      	adds	r7, #8
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}
 8004ebe:	bf00      	nop
 8004ec0:	20001fac 	.word	0x20001fac
 8004ec4:	20001ad8 	.word	0x20001ad8
 8004ec8:	20001fb8 	.word	0x20001fb8
 8004ecc:	20001fc8 	.word	0x20001fc8
 8004ed0:	20001fb4 	.word	0x20001fb4
 8004ed4:	20001adc 	.word	0x20001adc
 8004ed8:	e000ed04 	.word	0xe000ed04

08004edc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b084      	sub	sp, #16
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d017      	beq.n	8004f1e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004eee:	4b13      	ldr	r3, [pc, #76]	; (8004f3c <vTaskDelay+0x60>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d00a      	beq.n	8004f0c <vTaskDelay+0x30>
	__asm volatile
 8004ef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004efa:	f383 8811 	msr	BASEPRI, r3
 8004efe:	f3bf 8f6f 	isb	sy
 8004f02:	f3bf 8f4f 	dsb	sy
 8004f06:	60bb      	str	r3, [r7, #8]
}
 8004f08:	bf00      	nop
 8004f0a:	e7fe      	b.n	8004f0a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004f0c:	f000 f880 	bl	8005010 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004f10:	2100      	movs	r1, #0
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f000 fde8 	bl	8005ae8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004f18:	f000 f888 	bl	800502c <xTaskResumeAll>
 8004f1c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d107      	bne.n	8004f34 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004f24:	4b06      	ldr	r3, [pc, #24]	; (8004f40 <vTaskDelay+0x64>)
 8004f26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f2a:	601a      	str	r2, [r3, #0]
 8004f2c:	f3bf 8f4f 	dsb	sy
 8004f30:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004f34:	bf00      	nop
 8004f36:	3710      	adds	r7, #16
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bd80      	pop	{r7, pc}
 8004f3c:	20001fd4 	.word	0x20001fd4
 8004f40:	e000ed04 	.word	0xe000ed04

08004f44 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b08a      	sub	sp, #40	; 0x28
 8004f48:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004f52:	463a      	mov	r2, r7
 8004f54:	1d39      	adds	r1, r7, #4
 8004f56:	f107 0308 	add.w	r3, r7, #8
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	f7fe ff24 	bl	8003da8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004f60:	6839      	ldr	r1, [r7, #0]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	68ba      	ldr	r2, [r7, #8]
 8004f66:	9202      	str	r2, [sp, #8]
 8004f68:	9301      	str	r3, [sp, #4]
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	9300      	str	r3, [sp, #0]
 8004f6e:	2300      	movs	r3, #0
 8004f70:	460a      	mov	r2, r1
 8004f72:	4921      	ldr	r1, [pc, #132]	; (8004ff8 <vTaskStartScheduler+0xb4>)
 8004f74:	4821      	ldr	r0, [pc, #132]	; (8004ffc <vTaskStartScheduler+0xb8>)
 8004f76:	f7ff fe0f 	bl	8004b98 <xTaskCreateStatic>
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	4a20      	ldr	r2, [pc, #128]	; (8005000 <vTaskStartScheduler+0xbc>)
 8004f7e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004f80:	4b1f      	ldr	r3, [pc, #124]	; (8005000 <vTaskStartScheduler+0xbc>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d002      	beq.n	8004f8e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	617b      	str	r3, [r7, #20]
 8004f8c:	e001      	b.n	8004f92 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004f8e:	2300      	movs	r3, #0
 8004f90:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	d102      	bne.n	8004f9e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004f98:	f000 fdfa 	bl	8005b90 <xTimerCreateTimerTask>
 8004f9c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	d116      	bne.n	8004fd2 <vTaskStartScheduler+0x8e>
	__asm volatile
 8004fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fa8:	f383 8811 	msr	BASEPRI, r3
 8004fac:	f3bf 8f6f 	isb	sy
 8004fb0:	f3bf 8f4f 	dsb	sy
 8004fb4:	613b      	str	r3, [r7, #16]
}
 8004fb6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004fb8:	4b12      	ldr	r3, [pc, #72]	; (8005004 <vTaskStartScheduler+0xc0>)
 8004fba:	f04f 32ff 	mov.w	r2, #4294967295
 8004fbe:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004fc0:	4b11      	ldr	r3, [pc, #68]	; (8005008 <vTaskStartScheduler+0xc4>)
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004fc6:	4b11      	ldr	r3, [pc, #68]	; (800500c <vTaskStartScheduler+0xc8>)
 8004fc8:	2200      	movs	r2, #0
 8004fca:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004fcc:	f001 fa70 	bl	80064b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004fd0:	e00e      	b.n	8004ff0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fd8:	d10a      	bne.n	8004ff0 <vTaskStartScheduler+0xac>
	__asm volatile
 8004fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fde:	f383 8811 	msr	BASEPRI, r3
 8004fe2:	f3bf 8f6f 	isb	sy
 8004fe6:	f3bf 8f4f 	dsb	sy
 8004fea:	60fb      	str	r3, [r7, #12]
}
 8004fec:	bf00      	nop
 8004fee:	e7fe      	b.n	8004fee <vTaskStartScheduler+0xaa>
}
 8004ff0:	bf00      	nop
 8004ff2:	3718      	adds	r7, #24
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bd80      	pop	{r7, pc}
 8004ff8:	08007780 	.word	0x08007780
 8004ffc:	08005629 	.word	0x08005629
 8005000:	20001fd0 	.word	0x20001fd0
 8005004:	20001fcc 	.word	0x20001fcc
 8005008:	20001fb8 	.word	0x20001fb8
 800500c:	20001fb0 	.word	0x20001fb0

08005010 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005010:	b480      	push	{r7}
 8005012:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005014:	4b04      	ldr	r3, [pc, #16]	; (8005028 <vTaskSuspendAll+0x18>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	3301      	adds	r3, #1
 800501a:	4a03      	ldr	r2, [pc, #12]	; (8005028 <vTaskSuspendAll+0x18>)
 800501c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800501e:	bf00      	nop
 8005020:	46bd      	mov	sp, r7
 8005022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005026:	4770      	bx	lr
 8005028:	20001fd4 	.word	0x20001fd4

0800502c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b084      	sub	sp, #16
 8005030:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005032:	2300      	movs	r3, #0
 8005034:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005036:	2300      	movs	r3, #0
 8005038:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800503a:	4b42      	ldr	r3, [pc, #264]	; (8005144 <xTaskResumeAll+0x118>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d10a      	bne.n	8005058 <xTaskResumeAll+0x2c>
	__asm volatile
 8005042:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005046:	f383 8811 	msr	BASEPRI, r3
 800504a:	f3bf 8f6f 	isb	sy
 800504e:	f3bf 8f4f 	dsb	sy
 8005052:	603b      	str	r3, [r7, #0]
}
 8005054:	bf00      	nop
 8005056:	e7fe      	b.n	8005056 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005058:	f001 facc 	bl	80065f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800505c:	4b39      	ldr	r3, [pc, #228]	; (8005144 <xTaskResumeAll+0x118>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	3b01      	subs	r3, #1
 8005062:	4a38      	ldr	r2, [pc, #224]	; (8005144 <xTaskResumeAll+0x118>)
 8005064:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005066:	4b37      	ldr	r3, [pc, #220]	; (8005144 <xTaskResumeAll+0x118>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d162      	bne.n	8005134 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800506e:	4b36      	ldr	r3, [pc, #216]	; (8005148 <xTaskResumeAll+0x11c>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d05e      	beq.n	8005134 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005076:	e02f      	b.n	80050d8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005078:	4b34      	ldr	r3, [pc, #208]	; (800514c <xTaskResumeAll+0x120>)
 800507a:	68db      	ldr	r3, [r3, #12]
 800507c:	68db      	ldr	r3, [r3, #12]
 800507e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	3318      	adds	r3, #24
 8005084:	4618      	mov	r0, r3
 8005086:	f7fe ff4d 	bl	8003f24 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	3304      	adds	r3, #4
 800508e:	4618      	mov	r0, r3
 8005090:	f7fe ff48 	bl	8003f24 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005098:	4b2d      	ldr	r3, [pc, #180]	; (8005150 <xTaskResumeAll+0x124>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	429a      	cmp	r2, r3
 800509e:	d903      	bls.n	80050a8 <xTaskResumeAll+0x7c>
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050a4:	4a2a      	ldr	r2, [pc, #168]	; (8005150 <xTaskResumeAll+0x124>)
 80050a6:	6013      	str	r3, [r2, #0]
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050ac:	4613      	mov	r3, r2
 80050ae:	009b      	lsls	r3, r3, #2
 80050b0:	4413      	add	r3, r2
 80050b2:	009b      	lsls	r3, r3, #2
 80050b4:	4a27      	ldr	r2, [pc, #156]	; (8005154 <xTaskResumeAll+0x128>)
 80050b6:	441a      	add	r2, r3
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	3304      	adds	r3, #4
 80050bc:	4619      	mov	r1, r3
 80050be:	4610      	mov	r0, r2
 80050c0:	f7fe fed3 	bl	8003e6a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050c8:	4b23      	ldr	r3, [pc, #140]	; (8005158 <xTaskResumeAll+0x12c>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ce:	429a      	cmp	r2, r3
 80050d0:	d302      	bcc.n	80050d8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80050d2:	4b22      	ldr	r3, [pc, #136]	; (800515c <xTaskResumeAll+0x130>)
 80050d4:	2201      	movs	r2, #1
 80050d6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80050d8:	4b1c      	ldr	r3, [pc, #112]	; (800514c <xTaskResumeAll+0x120>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d1cb      	bne.n	8005078 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d001      	beq.n	80050ea <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80050e6:	f000 fb55 	bl	8005794 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80050ea:	4b1d      	ldr	r3, [pc, #116]	; (8005160 <xTaskResumeAll+0x134>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d010      	beq.n	8005118 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80050f6:	f000 f847 	bl	8005188 <xTaskIncrementTick>
 80050fa:	4603      	mov	r3, r0
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d002      	beq.n	8005106 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005100:	4b16      	ldr	r3, [pc, #88]	; (800515c <xTaskResumeAll+0x130>)
 8005102:	2201      	movs	r2, #1
 8005104:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	3b01      	subs	r3, #1
 800510a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d1f1      	bne.n	80050f6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005112:	4b13      	ldr	r3, [pc, #76]	; (8005160 <xTaskResumeAll+0x134>)
 8005114:	2200      	movs	r2, #0
 8005116:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005118:	4b10      	ldr	r3, [pc, #64]	; (800515c <xTaskResumeAll+0x130>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d009      	beq.n	8005134 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005120:	2301      	movs	r3, #1
 8005122:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005124:	4b0f      	ldr	r3, [pc, #60]	; (8005164 <xTaskResumeAll+0x138>)
 8005126:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800512a:	601a      	str	r2, [r3, #0]
 800512c:	f3bf 8f4f 	dsb	sy
 8005130:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005134:	f001 fa8e 	bl	8006654 <vPortExitCritical>

	return xAlreadyYielded;
 8005138:	68bb      	ldr	r3, [r7, #8]
}
 800513a:	4618      	mov	r0, r3
 800513c:	3710      	adds	r7, #16
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}
 8005142:	bf00      	nop
 8005144:	20001fd4 	.word	0x20001fd4
 8005148:	20001fac 	.word	0x20001fac
 800514c:	20001f6c 	.word	0x20001f6c
 8005150:	20001fb4 	.word	0x20001fb4
 8005154:	20001adc 	.word	0x20001adc
 8005158:	20001ad8 	.word	0x20001ad8
 800515c:	20001fc0 	.word	0x20001fc0
 8005160:	20001fbc 	.word	0x20001fbc
 8005164:	e000ed04 	.word	0xe000ed04

08005168 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005168:	b480      	push	{r7}
 800516a:	b083      	sub	sp, #12
 800516c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800516e:	4b05      	ldr	r3, [pc, #20]	; (8005184 <xTaskGetTickCount+0x1c>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005174:	687b      	ldr	r3, [r7, #4]
}
 8005176:	4618      	mov	r0, r3
 8005178:	370c      	adds	r7, #12
 800517a:	46bd      	mov	sp, r7
 800517c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005180:	4770      	bx	lr
 8005182:	bf00      	nop
 8005184:	20001fb0 	.word	0x20001fb0

08005188 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b086      	sub	sp, #24
 800518c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800518e:	2300      	movs	r3, #0
 8005190:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005192:	4b4f      	ldr	r3, [pc, #316]	; (80052d0 <xTaskIncrementTick+0x148>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	2b00      	cmp	r3, #0
 8005198:	f040 808f 	bne.w	80052ba <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800519c:	4b4d      	ldr	r3, [pc, #308]	; (80052d4 <xTaskIncrementTick+0x14c>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	3301      	adds	r3, #1
 80051a2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80051a4:	4a4b      	ldr	r2, [pc, #300]	; (80052d4 <xTaskIncrementTick+0x14c>)
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80051aa:	693b      	ldr	r3, [r7, #16]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d120      	bne.n	80051f2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80051b0:	4b49      	ldr	r3, [pc, #292]	; (80052d8 <xTaskIncrementTick+0x150>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d00a      	beq.n	80051d0 <xTaskIncrementTick+0x48>
	__asm volatile
 80051ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051be:	f383 8811 	msr	BASEPRI, r3
 80051c2:	f3bf 8f6f 	isb	sy
 80051c6:	f3bf 8f4f 	dsb	sy
 80051ca:	603b      	str	r3, [r7, #0]
}
 80051cc:	bf00      	nop
 80051ce:	e7fe      	b.n	80051ce <xTaskIncrementTick+0x46>
 80051d0:	4b41      	ldr	r3, [pc, #260]	; (80052d8 <xTaskIncrementTick+0x150>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	60fb      	str	r3, [r7, #12]
 80051d6:	4b41      	ldr	r3, [pc, #260]	; (80052dc <xTaskIncrementTick+0x154>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a3f      	ldr	r2, [pc, #252]	; (80052d8 <xTaskIncrementTick+0x150>)
 80051dc:	6013      	str	r3, [r2, #0]
 80051de:	4a3f      	ldr	r2, [pc, #252]	; (80052dc <xTaskIncrementTick+0x154>)
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	6013      	str	r3, [r2, #0]
 80051e4:	4b3e      	ldr	r3, [pc, #248]	; (80052e0 <xTaskIncrementTick+0x158>)
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	3301      	adds	r3, #1
 80051ea:	4a3d      	ldr	r2, [pc, #244]	; (80052e0 <xTaskIncrementTick+0x158>)
 80051ec:	6013      	str	r3, [r2, #0]
 80051ee:	f000 fad1 	bl	8005794 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80051f2:	4b3c      	ldr	r3, [pc, #240]	; (80052e4 <xTaskIncrementTick+0x15c>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	693a      	ldr	r2, [r7, #16]
 80051f8:	429a      	cmp	r2, r3
 80051fa:	d349      	bcc.n	8005290 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80051fc:	4b36      	ldr	r3, [pc, #216]	; (80052d8 <xTaskIncrementTick+0x150>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d104      	bne.n	8005210 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005206:	4b37      	ldr	r3, [pc, #220]	; (80052e4 <xTaskIncrementTick+0x15c>)
 8005208:	f04f 32ff 	mov.w	r2, #4294967295
 800520c:	601a      	str	r2, [r3, #0]
					break;
 800520e:	e03f      	b.n	8005290 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005210:	4b31      	ldr	r3, [pc, #196]	; (80052d8 <xTaskIncrementTick+0x150>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	68db      	ldr	r3, [r3, #12]
 8005216:	68db      	ldr	r3, [r3, #12]
 8005218:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005220:	693a      	ldr	r2, [r7, #16]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	429a      	cmp	r2, r3
 8005226:	d203      	bcs.n	8005230 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005228:	4a2e      	ldr	r2, [pc, #184]	; (80052e4 <xTaskIncrementTick+0x15c>)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800522e:	e02f      	b.n	8005290 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	3304      	adds	r3, #4
 8005234:	4618      	mov	r0, r3
 8005236:	f7fe fe75 	bl	8003f24 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800523e:	2b00      	cmp	r3, #0
 8005240:	d004      	beq.n	800524c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	3318      	adds	r3, #24
 8005246:	4618      	mov	r0, r3
 8005248:	f7fe fe6c 	bl	8003f24 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005250:	4b25      	ldr	r3, [pc, #148]	; (80052e8 <xTaskIncrementTick+0x160>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	429a      	cmp	r2, r3
 8005256:	d903      	bls.n	8005260 <xTaskIncrementTick+0xd8>
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800525c:	4a22      	ldr	r2, [pc, #136]	; (80052e8 <xTaskIncrementTick+0x160>)
 800525e:	6013      	str	r3, [r2, #0]
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005264:	4613      	mov	r3, r2
 8005266:	009b      	lsls	r3, r3, #2
 8005268:	4413      	add	r3, r2
 800526a:	009b      	lsls	r3, r3, #2
 800526c:	4a1f      	ldr	r2, [pc, #124]	; (80052ec <xTaskIncrementTick+0x164>)
 800526e:	441a      	add	r2, r3
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	3304      	adds	r3, #4
 8005274:	4619      	mov	r1, r3
 8005276:	4610      	mov	r0, r2
 8005278:	f7fe fdf7 	bl	8003e6a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005280:	4b1b      	ldr	r3, [pc, #108]	; (80052f0 <xTaskIncrementTick+0x168>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005286:	429a      	cmp	r2, r3
 8005288:	d3b8      	bcc.n	80051fc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800528a:	2301      	movs	r3, #1
 800528c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800528e:	e7b5      	b.n	80051fc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005290:	4b17      	ldr	r3, [pc, #92]	; (80052f0 <xTaskIncrementTick+0x168>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005296:	4915      	ldr	r1, [pc, #84]	; (80052ec <xTaskIncrementTick+0x164>)
 8005298:	4613      	mov	r3, r2
 800529a:	009b      	lsls	r3, r3, #2
 800529c:	4413      	add	r3, r2
 800529e:	009b      	lsls	r3, r3, #2
 80052a0:	440b      	add	r3, r1
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	d901      	bls.n	80052ac <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80052a8:	2301      	movs	r3, #1
 80052aa:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80052ac:	4b11      	ldr	r3, [pc, #68]	; (80052f4 <xTaskIncrementTick+0x16c>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d007      	beq.n	80052c4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80052b4:	2301      	movs	r3, #1
 80052b6:	617b      	str	r3, [r7, #20]
 80052b8:	e004      	b.n	80052c4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80052ba:	4b0f      	ldr	r3, [pc, #60]	; (80052f8 <xTaskIncrementTick+0x170>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	3301      	adds	r3, #1
 80052c0:	4a0d      	ldr	r2, [pc, #52]	; (80052f8 <xTaskIncrementTick+0x170>)
 80052c2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80052c4:	697b      	ldr	r3, [r7, #20]
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	3718      	adds	r7, #24
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}
 80052ce:	bf00      	nop
 80052d0:	20001fd4 	.word	0x20001fd4
 80052d4:	20001fb0 	.word	0x20001fb0
 80052d8:	20001f64 	.word	0x20001f64
 80052dc:	20001f68 	.word	0x20001f68
 80052e0:	20001fc4 	.word	0x20001fc4
 80052e4:	20001fcc 	.word	0x20001fcc
 80052e8:	20001fb4 	.word	0x20001fb4
 80052ec:	20001adc 	.word	0x20001adc
 80052f0:	20001ad8 	.word	0x20001ad8
 80052f4:	20001fc0 	.word	0x20001fc0
 80052f8:	20001fbc 	.word	0x20001fbc

080052fc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80052fc:	b480      	push	{r7}
 80052fe:	b085      	sub	sp, #20
 8005300:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005302:	4b28      	ldr	r3, [pc, #160]	; (80053a4 <vTaskSwitchContext+0xa8>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d003      	beq.n	8005312 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800530a:	4b27      	ldr	r3, [pc, #156]	; (80053a8 <vTaskSwitchContext+0xac>)
 800530c:	2201      	movs	r2, #1
 800530e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005310:	e041      	b.n	8005396 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8005312:	4b25      	ldr	r3, [pc, #148]	; (80053a8 <vTaskSwitchContext+0xac>)
 8005314:	2200      	movs	r2, #0
 8005316:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005318:	4b24      	ldr	r3, [pc, #144]	; (80053ac <vTaskSwitchContext+0xb0>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	60fb      	str	r3, [r7, #12]
 800531e:	e010      	b.n	8005342 <vTaskSwitchContext+0x46>
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d10a      	bne.n	800533c <vTaskSwitchContext+0x40>
	__asm volatile
 8005326:	f04f 0350 	mov.w	r3, #80	; 0x50
 800532a:	f383 8811 	msr	BASEPRI, r3
 800532e:	f3bf 8f6f 	isb	sy
 8005332:	f3bf 8f4f 	dsb	sy
 8005336:	607b      	str	r3, [r7, #4]
}
 8005338:	bf00      	nop
 800533a:	e7fe      	b.n	800533a <vTaskSwitchContext+0x3e>
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	3b01      	subs	r3, #1
 8005340:	60fb      	str	r3, [r7, #12]
 8005342:	491b      	ldr	r1, [pc, #108]	; (80053b0 <vTaskSwitchContext+0xb4>)
 8005344:	68fa      	ldr	r2, [r7, #12]
 8005346:	4613      	mov	r3, r2
 8005348:	009b      	lsls	r3, r3, #2
 800534a:	4413      	add	r3, r2
 800534c:	009b      	lsls	r3, r3, #2
 800534e:	440b      	add	r3, r1
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d0e4      	beq.n	8005320 <vTaskSwitchContext+0x24>
 8005356:	68fa      	ldr	r2, [r7, #12]
 8005358:	4613      	mov	r3, r2
 800535a:	009b      	lsls	r3, r3, #2
 800535c:	4413      	add	r3, r2
 800535e:	009b      	lsls	r3, r3, #2
 8005360:	4a13      	ldr	r2, [pc, #76]	; (80053b0 <vTaskSwitchContext+0xb4>)
 8005362:	4413      	add	r3, r2
 8005364:	60bb      	str	r3, [r7, #8]
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	685a      	ldr	r2, [r3, #4]
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	605a      	str	r2, [r3, #4]
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	685a      	ldr	r2, [r3, #4]
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	3308      	adds	r3, #8
 8005378:	429a      	cmp	r2, r3
 800537a:	d104      	bne.n	8005386 <vTaskSwitchContext+0x8a>
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	685a      	ldr	r2, [r3, #4]
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	605a      	str	r2, [r3, #4]
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	68db      	ldr	r3, [r3, #12]
 800538c:	4a09      	ldr	r2, [pc, #36]	; (80053b4 <vTaskSwitchContext+0xb8>)
 800538e:	6013      	str	r3, [r2, #0]
 8005390:	4a06      	ldr	r2, [pc, #24]	; (80053ac <vTaskSwitchContext+0xb0>)
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	6013      	str	r3, [r2, #0]
}
 8005396:	bf00      	nop
 8005398:	3714      	adds	r7, #20
 800539a:	46bd      	mov	sp, r7
 800539c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a0:	4770      	bx	lr
 80053a2:	bf00      	nop
 80053a4:	20001fd4 	.word	0x20001fd4
 80053a8:	20001fc0 	.word	0x20001fc0
 80053ac:	20001fb4 	.word	0x20001fb4
 80053b0:	20001adc 	.word	0x20001adc
 80053b4:	20001ad8 	.word	0x20001ad8

080053b8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b084      	sub	sp, #16
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
 80053c0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d10a      	bne.n	80053de <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80053c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053cc:	f383 8811 	msr	BASEPRI, r3
 80053d0:	f3bf 8f6f 	isb	sy
 80053d4:	f3bf 8f4f 	dsb	sy
 80053d8:	60fb      	str	r3, [r7, #12]
}
 80053da:	bf00      	nop
 80053dc:	e7fe      	b.n	80053dc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80053de:	4b07      	ldr	r3, [pc, #28]	; (80053fc <vTaskPlaceOnEventList+0x44>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	3318      	adds	r3, #24
 80053e4:	4619      	mov	r1, r3
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f7fe fd63 	bl	8003eb2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80053ec:	2101      	movs	r1, #1
 80053ee:	6838      	ldr	r0, [r7, #0]
 80053f0:	f000 fb7a 	bl	8005ae8 <prvAddCurrentTaskToDelayedList>
}
 80053f4:	bf00      	nop
 80053f6:	3710      	adds	r7, #16
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bd80      	pop	{r7, pc}
 80053fc:	20001ad8 	.word	0x20001ad8

08005400 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005400:	b580      	push	{r7, lr}
 8005402:	b086      	sub	sp, #24
 8005404:	af00      	add	r7, sp, #0
 8005406:	60f8      	str	r0, [r7, #12]
 8005408:	60b9      	str	r1, [r7, #8]
 800540a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d10a      	bne.n	8005428 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005416:	f383 8811 	msr	BASEPRI, r3
 800541a:	f3bf 8f6f 	isb	sy
 800541e:	f3bf 8f4f 	dsb	sy
 8005422:	617b      	str	r3, [r7, #20]
}
 8005424:	bf00      	nop
 8005426:	e7fe      	b.n	8005426 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005428:	4b0a      	ldr	r3, [pc, #40]	; (8005454 <vTaskPlaceOnEventListRestricted+0x54>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	3318      	adds	r3, #24
 800542e:	4619      	mov	r1, r3
 8005430:	68f8      	ldr	r0, [r7, #12]
 8005432:	f7fe fd1a 	bl	8003e6a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d002      	beq.n	8005442 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800543c:	f04f 33ff 	mov.w	r3, #4294967295
 8005440:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005442:	6879      	ldr	r1, [r7, #4]
 8005444:	68b8      	ldr	r0, [r7, #8]
 8005446:	f000 fb4f 	bl	8005ae8 <prvAddCurrentTaskToDelayedList>
	}
 800544a:	bf00      	nop
 800544c:	3718      	adds	r7, #24
 800544e:	46bd      	mov	sp, r7
 8005450:	bd80      	pop	{r7, pc}
 8005452:	bf00      	nop
 8005454:	20001ad8 	.word	0x20001ad8

08005458 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b086      	sub	sp, #24
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	68db      	ldr	r3, [r3, #12]
 8005464:	68db      	ldr	r3, [r3, #12]
 8005466:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005468:	693b      	ldr	r3, [r7, #16]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d10a      	bne.n	8005484 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800546e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005472:	f383 8811 	msr	BASEPRI, r3
 8005476:	f3bf 8f6f 	isb	sy
 800547a:	f3bf 8f4f 	dsb	sy
 800547e:	60fb      	str	r3, [r7, #12]
}
 8005480:	bf00      	nop
 8005482:	e7fe      	b.n	8005482 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005484:	693b      	ldr	r3, [r7, #16]
 8005486:	3318      	adds	r3, #24
 8005488:	4618      	mov	r0, r3
 800548a:	f7fe fd4b 	bl	8003f24 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800548e:	4b1e      	ldr	r3, [pc, #120]	; (8005508 <xTaskRemoveFromEventList+0xb0>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d11d      	bne.n	80054d2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	3304      	adds	r3, #4
 800549a:	4618      	mov	r0, r3
 800549c:	f7fe fd42 	bl	8003f24 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054a4:	4b19      	ldr	r3, [pc, #100]	; (800550c <xTaskRemoveFromEventList+0xb4>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	429a      	cmp	r2, r3
 80054aa:	d903      	bls.n	80054b4 <xTaskRemoveFromEventList+0x5c>
 80054ac:	693b      	ldr	r3, [r7, #16]
 80054ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054b0:	4a16      	ldr	r2, [pc, #88]	; (800550c <xTaskRemoveFromEventList+0xb4>)
 80054b2:	6013      	str	r3, [r2, #0]
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054b8:	4613      	mov	r3, r2
 80054ba:	009b      	lsls	r3, r3, #2
 80054bc:	4413      	add	r3, r2
 80054be:	009b      	lsls	r3, r3, #2
 80054c0:	4a13      	ldr	r2, [pc, #76]	; (8005510 <xTaskRemoveFromEventList+0xb8>)
 80054c2:	441a      	add	r2, r3
 80054c4:	693b      	ldr	r3, [r7, #16]
 80054c6:	3304      	adds	r3, #4
 80054c8:	4619      	mov	r1, r3
 80054ca:	4610      	mov	r0, r2
 80054cc:	f7fe fccd 	bl	8003e6a <vListInsertEnd>
 80054d0:	e005      	b.n	80054de <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80054d2:	693b      	ldr	r3, [r7, #16]
 80054d4:	3318      	adds	r3, #24
 80054d6:	4619      	mov	r1, r3
 80054d8:	480e      	ldr	r0, [pc, #56]	; (8005514 <xTaskRemoveFromEventList+0xbc>)
 80054da:	f7fe fcc6 	bl	8003e6a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80054de:	693b      	ldr	r3, [r7, #16]
 80054e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054e2:	4b0d      	ldr	r3, [pc, #52]	; (8005518 <xTaskRemoveFromEventList+0xc0>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054e8:	429a      	cmp	r2, r3
 80054ea:	d905      	bls.n	80054f8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80054ec:	2301      	movs	r3, #1
 80054ee:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80054f0:	4b0a      	ldr	r3, [pc, #40]	; (800551c <xTaskRemoveFromEventList+0xc4>)
 80054f2:	2201      	movs	r2, #1
 80054f4:	601a      	str	r2, [r3, #0]
 80054f6:	e001      	b.n	80054fc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80054f8:	2300      	movs	r3, #0
 80054fa:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80054fc:	697b      	ldr	r3, [r7, #20]
}
 80054fe:	4618      	mov	r0, r3
 8005500:	3718      	adds	r7, #24
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}
 8005506:	bf00      	nop
 8005508:	20001fd4 	.word	0x20001fd4
 800550c:	20001fb4 	.word	0x20001fb4
 8005510:	20001adc 	.word	0x20001adc
 8005514:	20001f6c 	.word	0x20001f6c
 8005518:	20001ad8 	.word	0x20001ad8
 800551c:	20001fc0 	.word	0x20001fc0

08005520 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005520:	b480      	push	{r7}
 8005522:	b083      	sub	sp, #12
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005528:	4b06      	ldr	r3, [pc, #24]	; (8005544 <vTaskInternalSetTimeOutState+0x24>)
 800552a:	681a      	ldr	r2, [r3, #0]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005530:	4b05      	ldr	r3, [pc, #20]	; (8005548 <vTaskInternalSetTimeOutState+0x28>)
 8005532:	681a      	ldr	r2, [r3, #0]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	605a      	str	r2, [r3, #4]
}
 8005538:	bf00      	nop
 800553a:	370c      	adds	r7, #12
 800553c:	46bd      	mov	sp, r7
 800553e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005542:	4770      	bx	lr
 8005544:	20001fc4 	.word	0x20001fc4
 8005548:	20001fb0 	.word	0x20001fb0

0800554c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b088      	sub	sp, #32
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
 8005554:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d10a      	bne.n	8005572 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800555c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005560:	f383 8811 	msr	BASEPRI, r3
 8005564:	f3bf 8f6f 	isb	sy
 8005568:	f3bf 8f4f 	dsb	sy
 800556c:	613b      	str	r3, [r7, #16]
}
 800556e:	bf00      	nop
 8005570:	e7fe      	b.n	8005570 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d10a      	bne.n	800558e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800557c:	f383 8811 	msr	BASEPRI, r3
 8005580:	f3bf 8f6f 	isb	sy
 8005584:	f3bf 8f4f 	dsb	sy
 8005588:	60fb      	str	r3, [r7, #12]
}
 800558a:	bf00      	nop
 800558c:	e7fe      	b.n	800558c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800558e:	f001 f831 	bl	80065f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005592:	4b1d      	ldr	r3, [pc, #116]	; (8005608 <xTaskCheckForTimeOut+0xbc>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	69ba      	ldr	r2, [r7, #24]
 800559e:	1ad3      	subs	r3, r2, r3
 80055a0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055aa:	d102      	bne.n	80055b2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80055ac:	2300      	movs	r3, #0
 80055ae:	61fb      	str	r3, [r7, #28]
 80055b0:	e023      	b.n	80055fa <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681a      	ldr	r2, [r3, #0]
 80055b6:	4b15      	ldr	r3, [pc, #84]	; (800560c <xTaskCheckForTimeOut+0xc0>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	429a      	cmp	r2, r3
 80055bc:	d007      	beq.n	80055ce <xTaskCheckForTimeOut+0x82>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	685b      	ldr	r3, [r3, #4]
 80055c2:	69ba      	ldr	r2, [r7, #24]
 80055c4:	429a      	cmp	r2, r3
 80055c6:	d302      	bcc.n	80055ce <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80055c8:	2301      	movs	r3, #1
 80055ca:	61fb      	str	r3, [r7, #28]
 80055cc:	e015      	b.n	80055fa <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	697a      	ldr	r2, [r7, #20]
 80055d4:	429a      	cmp	r2, r3
 80055d6:	d20b      	bcs.n	80055f0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	681a      	ldr	r2, [r3, #0]
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	1ad2      	subs	r2, r2, r3
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80055e4:	6878      	ldr	r0, [r7, #4]
 80055e6:	f7ff ff9b 	bl	8005520 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80055ea:	2300      	movs	r3, #0
 80055ec:	61fb      	str	r3, [r7, #28]
 80055ee:	e004      	b.n	80055fa <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	2200      	movs	r2, #0
 80055f4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80055f6:	2301      	movs	r3, #1
 80055f8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80055fa:	f001 f82b 	bl	8006654 <vPortExitCritical>

	return xReturn;
 80055fe:	69fb      	ldr	r3, [r7, #28]
}
 8005600:	4618      	mov	r0, r3
 8005602:	3720      	adds	r7, #32
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}
 8005608:	20001fb0 	.word	0x20001fb0
 800560c:	20001fc4 	.word	0x20001fc4

08005610 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005610:	b480      	push	{r7}
 8005612:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005614:	4b03      	ldr	r3, [pc, #12]	; (8005624 <vTaskMissedYield+0x14>)
 8005616:	2201      	movs	r2, #1
 8005618:	601a      	str	r2, [r3, #0]
}
 800561a:	bf00      	nop
 800561c:	46bd      	mov	sp, r7
 800561e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005622:	4770      	bx	lr
 8005624:	20001fc0 	.word	0x20001fc0

08005628 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b082      	sub	sp, #8
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005630:	f000 f852 	bl	80056d8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005634:	4b06      	ldr	r3, [pc, #24]	; (8005650 <prvIdleTask+0x28>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	2b01      	cmp	r3, #1
 800563a:	d9f9      	bls.n	8005630 <prvIdleTask+0x8>
			{
				taskYIELD();
 800563c:	4b05      	ldr	r3, [pc, #20]	; (8005654 <prvIdleTask+0x2c>)
 800563e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005642:	601a      	str	r2, [r3, #0]
 8005644:	f3bf 8f4f 	dsb	sy
 8005648:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800564c:	e7f0      	b.n	8005630 <prvIdleTask+0x8>
 800564e:	bf00      	nop
 8005650:	20001adc 	.word	0x20001adc
 8005654:	e000ed04 	.word	0xe000ed04

08005658 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b082      	sub	sp, #8
 800565c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800565e:	2300      	movs	r3, #0
 8005660:	607b      	str	r3, [r7, #4]
 8005662:	e00c      	b.n	800567e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005664:	687a      	ldr	r2, [r7, #4]
 8005666:	4613      	mov	r3, r2
 8005668:	009b      	lsls	r3, r3, #2
 800566a:	4413      	add	r3, r2
 800566c:	009b      	lsls	r3, r3, #2
 800566e:	4a12      	ldr	r2, [pc, #72]	; (80056b8 <prvInitialiseTaskLists+0x60>)
 8005670:	4413      	add	r3, r2
 8005672:	4618      	mov	r0, r3
 8005674:	f7fe fbcc 	bl	8003e10 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	3301      	adds	r3, #1
 800567c:	607b      	str	r3, [r7, #4]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2b37      	cmp	r3, #55	; 0x37
 8005682:	d9ef      	bls.n	8005664 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005684:	480d      	ldr	r0, [pc, #52]	; (80056bc <prvInitialiseTaskLists+0x64>)
 8005686:	f7fe fbc3 	bl	8003e10 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800568a:	480d      	ldr	r0, [pc, #52]	; (80056c0 <prvInitialiseTaskLists+0x68>)
 800568c:	f7fe fbc0 	bl	8003e10 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005690:	480c      	ldr	r0, [pc, #48]	; (80056c4 <prvInitialiseTaskLists+0x6c>)
 8005692:	f7fe fbbd 	bl	8003e10 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005696:	480c      	ldr	r0, [pc, #48]	; (80056c8 <prvInitialiseTaskLists+0x70>)
 8005698:	f7fe fbba 	bl	8003e10 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800569c:	480b      	ldr	r0, [pc, #44]	; (80056cc <prvInitialiseTaskLists+0x74>)
 800569e:	f7fe fbb7 	bl	8003e10 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80056a2:	4b0b      	ldr	r3, [pc, #44]	; (80056d0 <prvInitialiseTaskLists+0x78>)
 80056a4:	4a05      	ldr	r2, [pc, #20]	; (80056bc <prvInitialiseTaskLists+0x64>)
 80056a6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80056a8:	4b0a      	ldr	r3, [pc, #40]	; (80056d4 <prvInitialiseTaskLists+0x7c>)
 80056aa:	4a05      	ldr	r2, [pc, #20]	; (80056c0 <prvInitialiseTaskLists+0x68>)
 80056ac:	601a      	str	r2, [r3, #0]
}
 80056ae:	bf00      	nop
 80056b0:	3708      	adds	r7, #8
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}
 80056b6:	bf00      	nop
 80056b8:	20001adc 	.word	0x20001adc
 80056bc:	20001f3c 	.word	0x20001f3c
 80056c0:	20001f50 	.word	0x20001f50
 80056c4:	20001f6c 	.word	0x20001f6c
 80056c8:	20001f80 	.word	0x20001f80
 80056cc:	20001f98 	.word	0x20001f98
 80056d0:	20001f64 	.word	0x20001f64
 80056d4:	20001f68 	.word	0x20001f68

080056d8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b082      	sub	sp, #8
 80056dc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80056de:	e019      	b.n	8005714 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80056e0:	f000 ff88 	bl	80065f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056e4:	4b10      	ldr	r3, [pc, #64]	; (8005728 <prvCheckTasksWaitingTermination+0x50>)
 80056e6:	68db      	ldr	r3, [r3, #12]
 80056e8:	68db      	ldr	r3, [r3, #12]
 80056ea:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	3304      	adds	r3, #4
 80056f0:	4618      	mov	r0, r3
 80056f2:	f7fe fc17 	bl	8003f24 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80056f6:	4b0d      	ldr	r3, [pc, #52]	; (800572c <prvCheckTasksWaitingTermination+0x54>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	3b01      	subs	r3, #1
 80056fc:	4a0b      	ldr	r2, [pc, #44]	; (800572c <prvCheckTasksWaitingTermination+0x54>)
 80056fe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005700:	4b0b      	ldr	r3, [pc, #44]	; (8005730 <prvCheckTasksWaitingTermination+0x58>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	3b01      	subs	r3, #1
 8005706:	4a0a      	ldr	r2, [pc, #40]	; (8005730 <prvCheckTasksWaitingTermination+0x58>)
 8005708:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800570a:	f000 ffa3 	bl	8006654 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	f000 f810 	bl	8005734 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005714:	4b06      	ldr	r3, [pc, #24]	; (8005730 <prvCheckTasksWaitingTermination+0x58>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d1e1      	bne.n	80056e0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800571c:	bf00      	nop
 800571e:	bf00      	nop
 8005720:	3708      	adds	r7, #8
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}
 8005726:	bf00      	nop
 8005728:	20001f80 	.word	0x20001f80
 800572c:	20001fac 	.word	0x20001fac
 8005730:	20001f94 	.word	0x20001f94

08005734 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005734:	b580      	push	{r7, lr}
 8005736:	b084      	sub	sp, #16
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005742:	2b00      	cmp	r3, #0
 8005744:	d108      	bne.n	8005758 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800574a:	4618      	mov	r0, r3
 800574c:	f001 f940 	bl	80069d0 <vPortFree>
				vPortFree( pxTCB );
 8005750:	6878      	ldr	r0, [r7, #4]
 8005752:	f001 f93d 	bl	80069d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005756:	e018      	b.n	800578a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800575e:	2b01      	cmp	r3, #1
 8005760:	d103      	bne.n	800576a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	f001 f934 	bl	80069d0 <vPortFree>
	}
 8005768:	e00f      	b.n	800578a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005770:	2b02      	cmp	r3, #2
 8005772:	d00a      	beq.n	800578a <prvDeleteTCB+0x56>
	__asm volatile
 8005774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005778:	f383 8811 	msr	BASEPRI, r3
 800577c:	f3bf 8f6f 	isb	sy
 8005780:	f3bf 8f4f 	dsb	sy
 8005784:	60fb      	str	r3, [r7, #12]
}
 8005786:	bf00      	nop
 8005788:	e7fe      	b.n	8005788 <prvDeleteTCB+0x54>
	}
 800578a:	bf00      	nop
 800578c:	3710      	adds	r7, #16
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}
	...

08005794 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005794:	b480      	push	{r7}
 8005796:	b083      	sub	sp, #12
 8005798:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800579a:	4b0c      	ldr	r3, [pc, #48]	; (80057cc <prvResetNextTaskUnblockTime+0x38>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d104      	bne.n	80057ae <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80057a4:	4b0a      	ldr	r3, [pc, #40]	; (80057d0 <prvResetNextTaskUnblockTime+0x3c>)
 80057a6:	f04f 32ff 	mov.w	r2, #4294967295
 80057aa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80057ac:	e008      	b.n	80057c0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057ae:	4b07      	ldr	r3, [pc, #28]	; (80057cc <prvResetNextTaskUnblockTime+0x38>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	68db      	ldr	r3, [r3, #12]
 80057b4:	68db      	ldr	r3, [r3, #12]
 80057b6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	685b      	ldr	r3, [r3, #4]
 80057bc:	4a04      	ldr	r2, [pc, #16]	; (80057d0 <prvResetNextTaskUnblockTime+0x3c>)
 80057be:	6013      	str	r3, [r2, #0]
}
 80057c0:	bf00      	nop
 80057c2:	370c      	adds	r7, #12
 80057c4:	46bd      	mov	sp, r7
 80057c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ca:	4770      	bx	lr
 80057cc:	20001f64 	.word	0x20001f64
 80057d0:	20001fcc 	.word	0x20001fcc

080057d4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80057d4:	b480      	push	{r7}
 80057d6:	b083      	sub	sp, #12
 80057d8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80057da:	4b0b      	ldr	r3, [pc, #44]	; (8005808 <xTaskGetSchedulerState+0x34>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d102      	bne.n	80057e8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80057e2:	2301      	movs	r3, #1
 80057e4:	607b      	str	r3, [r7, #4]
 80057e6:	e008      	b.n	80057fa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80057e8:	4b08      	ldr	r3, [pc, #32]	; (800580c <xTaskGetSchedulerState+0x38>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d102      	bne.n	80057f6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80057f0:	2302      	movs	r3, #2
 80057f2:	607b      	str	r3, [r7, #4]
 80057f4:	e001      	b.n	80057fa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80057f6:	2300      	movs	r3, #0
 80057f8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80057fa:	687b      	ldr	r3, [r7, #4]
	}
 80057fc:	4618      	mov	r0, r3
 80057fe:	370c      	adds	r7, #12
 8005800:	46bd      	mov	sp, r7
 8005802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005806:	4770      	bx	lr
 8005808:	20001fb8 	.word	0x20001fb8
 800580c:	20001fd4 	.word	0x20001fd4

08005810 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005810:	b580      	push	{r7, lr}
 8005812:	b084      	sub	sp, #16
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800581c:	2300      	movs	r3, #0
 800581e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d051      	beq.n	80058ca <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800582a:	4b2a      	ldr	r3, [pc, #168]	; (80058d4 <xTaskPriorityInherit+0xc4>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005830:	429a      	cmp	r2, r3
 8005832:	d241      	bcs.n	80058b8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	699b      	ldr	r3, [r3, #24]
 8005838:	2b00      	cmp	r3, #0
 800583a:	db06      	blt.n	800584a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800583c:	4b25      	ldr	r3, [pc, #148]	; (80058d4 <xTaskPriorityInherit+0xc4>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005842:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	6959      	ldr	r1, [r3, #20]
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005852:	4613      	mov	r3, r2
 8005854:	009b      	lsls	r3, r3, #2
 8005856:	4413      	add	r3, r2
 8005858:	009b      	lsls	r3, r3, #2
 800585a:	4a1f      	ldr	r2, [pc, #124]	; (80058d8 <xTaskPriorityInherit+0xc8>)
 800585c:	4413      	add	r3, r2
 800585e:	4299      	cmp	r1, r3
 8005860:	d122      	bne.n	80058a8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	3304      	adds	r3, #4
 8005866:	4618      	mov	r0, r3
 8005868:	f7fe fb5c 	bl	8003f24 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800586c:	4b19      	ldr	r3, [pc, #100]	; (80058d4 <xTaskPriorityInherit+0xc4>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800587a:	4b18      	ldr	r3, [pc, #96]	; (80058dc <xTaskPriorityInherit+0xcc>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	429a      	cmp	r2, r3
 8005880:	d903      	bls.n	800588a <xTaskPriorityInherit+0x7a>
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005886:	4a15      	ldr	r2, [pc, #84]	; (80058dc <xTaskPriorityInherit+0xcc>)
 8005888:	6013      	str	r3, [r2, #0]
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800588e:	4613      	mov	r3, r2
 8005890:	009b      	lsls	r3, r3, #2
 8005892:	4413      	add	r3, r2
 8005894:	009b      	lsls	r3, r3, #2
 8005896:	4a10      	ldr	r2, [pc, #64]	; (80058d8 <xTaskPriorityInherit+0xc8>)
 8005898:	441a      	add	r2, r3
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	3304      	adds	r3, #4
 800589e:	4619      	mov	r1, r3
 80058a0:	4610      	mov	r0, r2
 80058a2:	f7fe fae2 	bl	8003e6a <vListInsertEnd>
 80058a6:	e004      	b.n	80058b2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80058a8:	4b0a      	ldr	r3, [pc, #40]	; (80058d4 <xTaskPriorityInherit+0xc4>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80058b2:	2301      	movs	r3, #1
 80058b4:	60fb      	str	r3, [r7, #12]
 80058b6:	e008      	b.n	80058ca <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80058bc:	4b05      	ldr	r3, [pc, #20]	; (80058d4 <xTaskPriorityInherit+0xc4>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058c2:	429a      	cmp	r2, r3
 80058c4:	d201      	bcs.n	80058ca <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80058c6:	2301      	movs	r3, #1
 80058c8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80058ca:	68fb      	ldr	r3, [r7, #12]
	}
 80058cc:	4618      	mov	r0, r3
 80058ce:	3710      	adds	r7, #16
 80058d0:	46bd      	mov	sp, r7
 80058d2:	bd80      	pop	{r7, pc}
 80058d4:	20001ad8 	.word	0x20001ad8
 80058d8:	20001adc 	.word	0x20001adc
 80058dc:	20001fb4 	.word	0x20001fb4

080058e0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b086      	sub	sp, #24
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80058ec:	2300      	movs	r3, #0
 80058ee:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d056      	beq.n	80059a4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80058f6:	4b2e      	ldr	r3, [pc, #184]	; (80059b0 <xTaskPriorityDisinherit+0xd0>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	693a      	ldr	r2, [r7, #16]
 80058fc:	429a      	cmp	r2, r3
 80058fe:	d00a      	beq.n	8005916 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005904:	f383 8811 	msr	BASEPRI, r3
 8005908:	f3bf 8f6f 	isb	sy
 800590c:	f3bf 8f4f 	dsb	sy
 8005910:	60fb      	str	r3, [r7, #12]
}
 8005912:	bf00      	nop
 8005914:	e7fe      	b.n	8005914 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005916:	693b      	ldr	r3, [r7, #16]
 8005918:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800591a:	2b00      	cmp	r3, #0
 800591c:	d10a      	bne.n	8005934 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800591e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005922:	f383 8811 	msr	BASEPRI, r3
 8005926:	f3bf 8f6f 	isb	sy
 800592a:	f3bf 8f4f 	dsb	sy
 800592e:	60bb      	str	r3, [r7, #8]
}
 8005930:	bf00      	nop
 8005932:	e7fe      	b.n	8005932 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005934:	693b      	ldr	r3, [r7, #16]
 8005936:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005938:	1e5a      	subs	r2, r3, #1
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800593e:	693b      	ldr	r3, [r7, #16]
 8005940:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005942:	693b      	ldr	r3, [r7, #16]
 8005944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005946:	429a      	cmp	r2, r3
 8005948:	d02c      	beq.n	80059a4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800594a:	693b      	ldr	r3, [r7, #16]
 800594c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800594e:	2b00      	cmp	r3, #0
 8005950:	d128      	bne.n	80059a4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005952:	693b      	ldr	r3, [r7, #16]
 8005954:	3304      	adds	r3, #4
 8005956:	4618      	mov	r0, r3
 8005958:	f7fe fae4 	bl	8003f24 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005968:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005974:	4b0f      	ldr	r3, [pc, #60]	; (80059b4 <xTaskPriorityDisinherit+0xd4>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	429a      	cmp	r2, r3
 800597a:	d903      	bls.n	8005984 <xTaskPriorityDisinherit+0xa4>
 800597c:	693b      	ldr	r3, [r7, #16]
 800597e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005980:	4a0c      	ldr	r2, [pc, #48]	; (80059b4 <xTaskPriorityDisinherit+0xd4>)
 8005982:	6013      	str	r3, [r2, #0]
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005988:	4613      	mov	r3, r2
 800598a:	009b      	lsls	r3, r3, #2
 800598c:	4413      	add	r3, r2
 800598e:	009b      	lsls	r3, r3, #2
 8005990:	4a09      	ldr	r2, [pc, #36]	; (80059b8 <xTaskPriorityDisinherit+0xd8>)
 8005992:	441a      	add	r2, r3
 8005994:	693b      	ldr	r3, [r7, #16]
 8005996:	3304      	adds	r3, #4
 8005998:	4619      	mov	r1, r3
 800599a:	4610      	mov	r0, r2
 800599c:	f7fe fa65 	bl	8003e6a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80059a0:	2301      	movs	r3, #1
 80059a2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80059a4:	697b      	ldr	r3, [r7, #20]
	}
 80059a6:	4618      	mov	r0, r3
 80059a8:	3718      	adds	r7, #24
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}
 80059ae:	bf00      	nop
 80059b0:	20001ad8 	.word	0x20001ad8
 80059b4:	20001fb4 	.word	0x20001fb4
 80059b8:	20001adc 	.word	0x20001adc

080059bc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b088      	sub	sp, #32
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
 80059c4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80059ca:	2301      	movs	r3, #1
 80059cc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d06a      	beq.n	8005aaa <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80059d4:	69bb      	ldr	r3, [r7, #24]
 80059d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d10a      	bne.n	80059f2 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80059dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059e0:	f383 8811 	msr	BASEPRI, r3
 80059e4:	f3bf 8f6f 	isb	sy
 80059e8:	f3bf 8f4f 	dsb	sy
 80059ec:	60fb      	str	r3, [r7, #12]
}
 80059ee:	bf00      	nop
 80059f0:	e7fe      	b.n	80059f0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80059f2:	69bb      	ldr	r3, [r7, #24]
 80059f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059f6:	683a      	ldr	r2, [r7, #0]
 80059f8:	429a      	cmp	r2, r3
 80059fa:	d902      	bls.n	8005a02 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	61fb      	str	r3, [r7, #28]
 8005a00:	e002      	b.n	8005a08 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005a02:	69bb      	ldr	r3, [r7, #24]
 8005a04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a06:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005a08:	69bb      	ldr	r3, [r7, #24]
 8005a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a0c:	69fa      	ldr	r2, [r7, #28]
 8005a0e:	429a      	cmp	r2, r3
 8005a10:	d04b      	beq.n	8005aaa <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005a12:	69bb      	ldr	r3, [r7, #24]
 8005a14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a16:	697a      	ldr	r2, [r7, #20]
 8005a18:	429a      	cmp	r2, r3
 8005a1a:	d146      	bne.n	8005aaa <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005a1c:	4b25      	ldr	r3, [pc, #148]	; (8005ab4 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	69ba      	ldr	r2, [r7, #24]
 8005a22:	429a      	cmp	r2, r3
 8005a24:	d10a      	bne.n	8005a3c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8005a26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a2a:	f383 8811 	msr	BASEPRI, r3
 8005a2e:	f3bf 8f6f 	isb	sy
 8005a32:	f3bf 8f4f 	dsb	sy
 8005a36:	60bb      	str	r3, [r7, #8]
}
 8005a38:	bf00      	nop
 8005a3a:	e7fe      	b.n	8005a3a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005a3c:	69bb      	ldr	r3, [r7, #24]
 8005a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a40:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005a42:	69bb      	ldr	r3, [r7, #24]
 8005a44:	69fa      	ldr	r2, [r7, #28]
 8005a46:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005a48:	69bb      	ldr	r3, [r7, #24]
 8005a4a:	699b      	ldr	r3, [r3, #24]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	db04      	blt.n	8005a5a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a50:	69fb      	ldr	r3, [r7, #28]
 8005a52:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005a56:	69bb      	ldr	r3, [r7, #24]
 8005a58:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005a5a:	69bb      	ldr	r3, [r7, #24]
 8005a5c:	6959      	ldr	r1, [r3, #20]
 8005a5e:	693a      	ldr	r2, [r7, #16]
 8005a60:	4613      	mov	r3, r2
 8005a62:	009b      	lsls	r3, r3, #2
 8005a64:	4413      	add	r3, r2
 8005a66:	009b      	lsls	r3, r3, #2
 8005a68:	4a13      	ldr	r2, [pc, #76]	; (8005ab8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8005a6a:	4413      	add	r3, r2
 8005a6c:	4299      	cmp	r1, r3
 8005a6e:	d11c      	bne.n	8005aaa <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005a70:	69bb      	ldr	r3, [r7, #24]
 8005a72:	3304      	adds	r3, #4
 8005a74:	4618      	mov	r0, r3
 8005a76:	f7fe fa55 	bl	8003f24 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005a7a:	69bb      	ldr	r3, [r7, #24]
 8005a7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a7e:	4b0f      	ldr	r3, [pc, #60]	; (8005abc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	429a      	cmp	r2, r3
 8005a84:	d903      	bls.n	8005a8e <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8005a86:	69bb      	ldr	r3, [r7, #24]
 8005a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a8a:	4a0c      	ldr	r2, [pc, #48]	; (8005abc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8005a8c:	6013      	str	r3, [r2, #0]
 8005a8e:	69bb      	ldr	r3, [r7, #24]
 8005a90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a92:	4613      	mov	r3, r2
 8005a94:	009b      	lsls	r3, r3, #2
 8005a96:	4413      	add	r3, r2
 8005a98:	009b      	lsls	r3, r3, #2
 8005a9a:	4a07      	ldr	r2, [pc, #28]	; (8005ab8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8005a9c:	441a      	add	r2, r3
 8005a9e:	69bb      	ldr	r3, [r7, #24]
 8005aa0:	3304      	adds	r3, #4
 8005aa2:	4619      	mov	r1, r3
 8005aa4:	4610      	mov	r0, r2
 8005aa6:	f7fe f9e0 	bl	8003e6a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005aaa:	bf00      	nop
 8005aac:	3720      	adds	r7, #32
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}
 8005ab2:	bf00      	nop
 8005ab4:	20001ad8 	.word	0x20001ad8
 8005ab8:	20001adc 	.word	0x20001adc
 8005abc:	20001fb4 	.word	0x20001fb4

08005ac0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8005ac0:	b480      	push	{r7}
 8005ac2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005ac4:	4b07      	ldr	r3, [pc, #28]	; (8005ae4 <pvTaskIncrementMutexHeldCount+0x24>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d004      	beq.n	8005ad6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005acc:	4b05      	ldr	r3, [pc, #20]	; (8005ae4 <pvTaskIncrementMutexHeldCount+0x24>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005ad2:	3201      	adds	r2, #1
 8005ad4:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8005ad6:	4b03      	ldr	r3, [pc, #12]	; (8005ae4 <pvTaskIncrementMutexHeldCount+0x24>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
	}
 8005ada:	4618      	mov	r0, r3
 8005adc:	46bd      	mov	sp, r7
 8005ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae2:	4770      	bx	lr
 8005ae4:	20001ad8 	.word	0x20001ad8

08005ae8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b084      	sub	sp, #16
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
 8005af0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005af2:	4b21      	ldr	r3, [pc, #132]	; (8005b78 <prvAddCurrentTaskToDelayedList+0x90>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005af8:	4b20      	ldr	r3, [pc, #128]	; (8005b7c <prvAddCurrentTaskToDelayedList+0x94>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	3304      	adds	r3, #4
 8005afe:	4618      	mov	r0, r3
 8005b00:	f7fe fa10 	bl	8003f24 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b0a:	d10a      	bne.n	8005b22 <prvAddCurrentTaskToDelayedList+0x3a>
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d007      	beq.n	8005b22 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005b12:	4b1a      	ldr	r3, [pc, #104]	; (8005b7c <prvAddCurrentTaskToDelayedList+0x94>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	3304      	adds	r3, #4
 8005b18:	4619      	mov	r1, r3
 8005b1a:	4819      	ldr	r0, [pc, #100]	; (8005b80 <prvAddCurrentTaskToDelayedList+0x98>)
 8005b1c:	f7fe f9a5 	bl	8003e6a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005b20:	e026      	b.n	8005b70 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005b22:	68fa      	ldr	r2, [r7, #12]
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	4413      	add	r3, r2
 8005b28:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005b2a:	4b14      	ldr	r3, [pc, #80]	; (8005b7c <prvAddCurrentTaskToDelayedList+0x94>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	68ba      	ldr	r2, [r7, #8]
 8005b30:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005b32:	68ba      	ldr	r2, [r7, #8]
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	429a      	cmp	r2, r3
 8005b38:	d209      	bcs.n	8005b4e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005b3a:	4b12      	ldr	r3, [pc, #72]	; (8005b84 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005b3c:	681a      	ldr	r2, [r3, #0]
 8005b3e:	4b0f      	ldr	r3, [pc, #60]	; (8005b7c <prvAddCurrentTaskToDelayedList+0x94>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	3304      	adds	r3, #4
 8005b44:	4619      	mov	r1, r3
 8005b46:	4610      	mov	r0, r2
 8005b48:	f7fe f9b3 	bl	8003eb2 <vListInsert>
}
 8005b4c:	e010      	b.n	8005b70 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005b4e:	4b0e      	ldr	r3, [pc, #56]	; (8005b88 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005b50:	681a      	ldr	r2, [r3, #0]
 8005b52:	4b0a      	ldr	r3, [pc, #40]	; (8005b7c <prvAddCurrentTaskToDelayedList+0x94>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	3304      	adds	r3, #4
 8005b58:	4619      	mov	r1, r3
 8005b5a:	4610      	mov	r0, r2
 8005b5c:	f7fe f9a9 	bl	8003eb2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005b60:	4b0a      	ldr	r3, [pc, #40]	; (8005b8c <prvAddCurrentTaskToDelayedList+0xa4>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	68ba      	ldr	r2, [r7, #8]
 8005b66:	429a      	cmp	r2, r3
 8005b68:	d202      	bcs.n	8005b70 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005b6a:	4a08      	ldr	r2, [pc, #32]	; (8005b8c <prvAddCurrentTaskToDelayedList+0xa4>)
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	6013      	str	r3, [r2, #0]
}
 8005b70:	bf00      	nop
 8005b72:	3710      	adds	r7, #16
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bd80      	pop	{r7, pc}
 8005b78:	20001fb0 	.word	0x20001fb0
 8005b7c:	20001ad8 	.word	0x20001ad8
 8005b80:	20001f98 	.word	0x20001f98
 8005b84:	20001f68 	.word	0x20001f68
 8005b88:	20001f64 	.word	0x20001f64
 8005b8c:	20001fcc 	.word	0x20001fcc

08005b90 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b08a      	sub	sp, #40	; 0x28
 8005b94:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005b96:	2300      	movs	r3, #0
 8005b98:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005b9a:	f000 fba1 	bl	80062e0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005b9e:	4b1c      	ldr	r3, [pc, #112]	; (8005c10 <xTimerCreateTimerTask+0x80>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d021      	beq.n	8005bea <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005baa:	2300      	movs	r3, #0
 8005bac:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005bae:	1d3a      	adds	r2, r7, #4
 8005bb0:	f107 0108 	add.w	r1, r7, #8
 8005bb4:	f107 030c 	add.w	r3, r7, #12
 8005bb8:	4618      	mov	r0, r3
 8005bba:	f7fe f90f 	bl	8003ddc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005bbe:	6879      	ldr	r1, [r7, #4]
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	68fa      	ldr	r2, [r7, #12]
 8005bc4:	9202      	str	r2, [sp, #8]
 8005bc6:	9301      	str	r3, [sp, #4]
 8005bc8:	2302      	movs	r3, #2
 8005bca:	9300      	str	r3, [sp, #0]
 8005bcc:	2300      	movs	r3, #0
 8005bce:	460a      	mov	r2, r1
 8005bd0:	4910      	ldr	r1, [pc, #64]	; (8005c14 <xTimerCreateTimerTask+0x84>)
 8005bd2:	4811      	ldr	r0, [pc, #68]	; (8005c18 <xTimerCreateTimerTask+0x88>)
 8005bd4:	f7fe ffe0 	bl	8004b98 <xTaskCreateStatic>
 8005bd8:	4603      	mov	r3, r0
 8005bda:	4a10      	ldr	r2, [pc, #64]	; (8005c1c <xTimerCreateTimerTask+0x8c>)
 8005bdc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005bde:	4b0f      	ldr	r3, [pc, #60]	; (8005c1c <xTimerCreateTimerTask+0x8c>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d001      	beq.n	8005bea <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005be6:	2301      	movs	r3, #1
 8005be8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d10a      	bne.n	8005c06 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bf4:	f383 8811 	msr	BASEPRI, r3
 8005bf8:	f3bf 8f6f 	isb	sy
 8005bfc:	f3bf 8f4f 	dsb	sy
 8005c00:	613b      	str	r3, [r7, #16]
}
 8005c02:	bf00      	nop
 8005c04:	e7fe      	b.n	8005c04 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005c06:	697b      	ldr	r3, [r7, #20]
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	3718      	adds	r7, #24
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}
 8005c10:	20002008 	.word	0x20002008
 8005c14:	08007788 	.word	0x08007788
 8005c18:	08005e89 	.word	0x08005e89
 8005c1c:	2000200c 	.word	0x2000200c

08005c20 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b088      	sub	sp, #32
 8005c24:	af02      	add	r7, sp, #8
 8005c26:	60f8      	str	r0, [r7, #12]
 8005c28:	60b9      	str	r1, [r7, #8]
 8005c2a:	607a      	str	r2, [r7, #4]
 8005c2c:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8005c2e:	202c      	movs	r0, #44	; 0x2c
 8005c30:	f000 fe02 	bl	8006838 <pvPortMalloc>
 8005c34:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d00d      	beq.n	8005c58 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	9301      	str	r3, [sp, #4]
 8005c48:	6a3b      	ldr	r3, [r7, #32]
 8005c4a:	9300      	str	r3, [sp, #0]
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	687a      	ldr	r2, [r7, #4]
 8005c50:	68b9      	ldr	r1, [r7, #8]
 8005c52:	68f8      	ldr	r0, [r7, #12]
 8005c54:	f000 f843 	bl	8005cde <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8005c58:	697b      	ldr	r3, [r7, #20]
	}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	3718      	adds	r7, #24
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bd80      	pop	{r7, pc}

08005c62 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8005c62:	b580      	push	{r7, lr}
 8005c64:	b08a      	sub	sp, #40	; 0x28
 8005c66:	af02      	add	r7, sp, #8
 8005c68:	60f8      	str	r0, [r7, #12]
 8005c6a:	60b9      	str	r1, [r7, #8]
 8005c6c:	607a      	str	r2, [r7, #4]
 8005c6e:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8005c70:	232c      	movs	r3, #44	; 0x2c
 8005c72:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8005c74:	693b      	ldr	r3, [r7, #16]
 8005c76:	2b2c      	cmp	r3, #44	; 0x2c
 8005c78:	d00a      	beq.n	8005c90 <xTimerCreateStatic+0x2e>
	__asm volatile
 8005c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c7e:	f383 8811 	msr	BASEPRI, r3
 8005c82:	f3bf 8f6f 	isb	sy
 8005c86:	f3bf 8f4f 	dsb	sy
 8005c8a:	61bb      	str	r3, [r7, #24]
}
 8005c8c:	bf00      	nop
 8005c8e:	e7fe      	b.n	8005c8e <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005c90:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8005c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d10a      	bne.n	8005cae <xTimerCreateStatic+0x4c>
	__asm volatile
 8005c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c9c:	f383 8811 	msr	BASEPRI, r3
 8005ca0:	f3bf 8f6f 	isb	sy
 8005ca4:	f3bf 8f4f 	dsb	sy
 8005ca8:	617b      	str	r3, [r7, #20]
}
 8005caa:	bf00      	nop
 8005cac:	e7fe      	b.n	8005cac <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8005cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cb0:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8005cb2:	69fb      	ldr	r3, [r7, #28]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d00d      	beq.n	8005cd4 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8005cb8:	69fb      	ldr	r3, [r7, #28]
 8005cba:	2202      	movs	r2, #2
 8005cbc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8005cc0:	69fb      	ldr	r3, [r7, #28]
 8005cc2:	9301      	str	r3, [sp, #4]
 8005cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cc6:	9300      	str	r3, [sp, #0]
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	687a      	ldr	r2, [r7, #4]
 8005ccc:	68b9      	ldr	r1, [r7, #8]
 8005cce:	68f8      	ldr	r0, [r7, #12]
 8005cd0:	f000 f805 	bl	8005cde <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8005cd4:	69fb      	ldr	r3, [r7, #28]
	}
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	3720      	adds	r7, #32
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	bd80      	pop	{r7, pc}

08005cde <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8005cde:	b580      	push	{r7, lr}
 8005ce0:	b086      	sub	sp, #24
 8005ce2:	af00      	add	r7, sp, #0
 8005ce4:	60f8      	str	r0, [r7, #12]
 8005ce6:	60b9      	str	r1, [r7, #8]
 8005ce8:	607a      	str	r2, [r7, #4]
 8005cea:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d10a      	bne.n	8005d08 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8005cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cf6:	f383 8811 	msr	BASEPRI, r3
 8005cfa:	f3bf 8f6f 	isb	sy
 8005cfe:	f3bf 8f4f 	dsb	sy
 8005d02:	617b      	str	r3, [r7, #20]
}
 8005d04:	bf00      	nop
 8005d06:	e7fe      	b.n	8005d06 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8005d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d01e      	beq.n	8005d4c <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8005d0e:	f000 fae7 	bl	80062e0 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8005d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d14:	68fa      	ldr	r2, [r7, #12]
 8005d16:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8005d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d1a:	68ba      	ldr	r2, [r7, #8]
 8005d1c:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8005d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d20:	683a      	ldr	r2, [r7, #0]
 8005d22:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8005d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d26:	6a3a      	ldr	r2, [r7, #32]
 8005d28:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8005d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d2c:	3304      	adds	r3, #4
 8005d2e:	4618      	mov	r0, r3
 8005d30:	f7fe f88e 	bl	8003e50 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d008      	beq.n	8005d4c <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8005d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d3c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005d40:	f043 0304 	orr.w	r3, r3, #4
 8005d44:	b2da      	uxtb	r2, r3
 8005d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d48:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8005d4c:	bf00      	nop
 8005d4e:	3718      	adds	r7, #24
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bd80      	pop	{r7, pc}

08005d54 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b08a      	sub	sp, #40	; 0x28
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	60f8      	str	r0, [r7, #12]
 8005d5c:	60b9      	str	r1, [r7, #8]
 8005d5e:	607a      	str	r2, [r7, #4]
 8005d60:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005d62:	2300      	movs	r3, #0
 8005d64:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d10a      	bne.n	8005d82 <xTimerGenericCommand+0x2e>
	__asm volatile
 8005d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d70:	f383 8811 	msr	BASEPRI, r3
 8005d74:	f3bf 8f6f 	isb	sy
 8005d78:	f3bf 8f4f 	dsb	sy
 8005d7c:	623b      	str	r3, [r7, #32]
}
 8005d7e:	bf00      	nop
 8005d80:	e7fe      	b.n	8005d80 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005d82:	4b1a      	ldr	r3, [pc, #104]	; (8005dec <xTimerGenericCommand+0x98>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d02a      	beq.n	8005de0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	2b05      	cmp	r3, #5
 8005d9a:	dc18      	bgt.n	8005dce <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005d9c:	f7ff fd1a 	bl	80057d4 <xTaskGetSchedulerState>
 8005da0:	4603      	mov	r3, r0
 8005da2:	2b02      	cmp	r3, #2
 8005da4:	d109      	bne.n	8005dba <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005da6:	4b11      	ldr	r3, [pc, #68]	; (8005dec <xTimerGenericCommand+0x98>)
 8005da8:	6818      	ldr	r0, [r3, #0]
 8005daa:	f107 0110 	add.w	r1, r7, #16
 8005dae:	2300      	movs	r3, #0
 8005db0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005db2:	f7fe f9e5 	bl	8004180 <xQueueGenericSend>
 8005db6:	6278      	str	r0, [r7, #36]	; 0x24
 8005db8:	e012      	b.n	8005de0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005dba:	4b0c      	ldr	r3, [pc, #48]	; (8005dec <xTimerGenericCommand+0x98>)
 8005dbc:	6818      	ldr	r0, [r3, #0]
 8005dbe:	f107 0110 	add.w	r1, r7, #16
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	f7fe f9db 	bl	8004180 <xQueueGenericSend>
 8005dca:	6278      	str	r0, [r7, #36]	; 0x24
 8005dcc:	e008      	b.n	8005de0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005dce:	4b07      	ldr	r3, [pc, #28]	; (8005dec <xTimerGenericCommand+0x98>)
 8005dd0:	6818      	ldr	r0, [r3, #0]
 8005dd2:	f107 0110 	add.w	r1, r7, #16
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	683a      	ldr	r2, [r7, #0]
 8005dda:	f7fe facf 	bl	800437c <xQueueGenericSendFromISR>
 8005dde:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005de2:	4618      	mov	r0, r3
 8005de4:	3728      	adds	r7, #40	; 0x28
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bd80      	pop	{r7, pc}
 8005dea:	bf00      	nop
 8005dec:	20002008 	.word	0x20002008

08005df0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b088      	sub	sp, #32
 8005df4:	af02      	add	r7, sp, #8
 8005df6:	6078      	str	r0, [r7, #4]
 8005df8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005dfa:	4b22      	ldr	r3, [pc, #136]	; (8005e84 <prvProcessExpiredTimer+0x94>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	68db      	ldr	r3, [r3, #12]
 8005e00:	68db      	ldr	r3, [r3, #12]
 8005e02:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005e04:	697b      	ldr	r3, [r7, #20]
 8005e06:	3304      	adds	r3, #4
 8005e08:	4618      	mov	r0, r3
 8005e0a:	f7fe f88b 	bl	8003f24 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005e0e:	697b      	ldr	r3, [r7, #20]
 8005e10:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005e14:	f003 0304 	and.w	r3, r3, #4
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d022      	beq.n	8005e62 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005e1c:	697b      	ldr	r3, [r7, #20]
 8005e1e:	699a      	ldr	r2, [r3, #24]
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	18d1      	adds	r1, r2, r3
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	683a      	ldr	r2, [r7, #0]
 8005e28:	6978      	ldr	r0, [r7, #20]
 8005e2a:	f000 f8d1 	bl	8005fd0 <prvInsertTimerInActiveList>
 8005e2e:	4603      	mov	r3, r0
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d01f      	beq.n	8005e74 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005e34:	2300      	movs	r3, #0
 8005e36:	9300      	str	r3, [sp, #0]
 8005e38:	2300      	movs	r3, #0
 8005e3a:	687a      	ldr	r2, [r7, #4]
 8005e3c:	2100      	movs	r1, #0
 8005e3e:	6978      	ldr	r0, [r7, #20]
 8005e40:	f7ff ff88 	bl	8005d54 <xTimerGenericCommand>
 8005e44:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d113      	bne.n	8005e74 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e50:	f383 8811 	msr	BASEPRI, r3
 8005e54:	f3bf 8f6f 	isb	sy
 8005e58:	f3bf 8f4f 	dsb	sy
 8005e5c:	60fb      	str	r3, [r7, #12]
}
 8005e5e:	bf00      	nop
 8005e60:	e7fe      	b.n	8005e60 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005e68:	f023 0301 	bic.w	r3, r3, #1
 8005e6c:	b2da      	uxtb	r2, r3
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005e74:	697b      	ldr	r3, [r7, #20]
 8005e76:	6a1b      	ldr	r3, [r3, #32]
 8005e78:	6978      	ldr	r0, [r7, #20]
 8005e7a:	4798      	blx	r3
}
 8005e7c:	bf00      	nop
 8005e7e:	3718      	adds	r7, #24
 8005e80:	46bd      	mov	sp, r7
 8005e82:	bd80      	pop	{r7, pc}
 8005e84:	20002000 	.word	0x20002000

08005e88 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b084      	sub	sp, #16
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005e90:	f107 0308 	add.w	r3, r7, #8
 8005e94:	4618      	mov	r0, r3
 8005e96:	f000 f857 	bl	8005f48 <prvGetNextExpireTime>
 8005e9a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	4619      	mov	r1, r3
 8005ea0:	68f8      	ldr	r0, [r7, #12]
 8005ea2:	f000 f803 	bl	8005eac <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005ea6:	f000 f8d5 	bl	8006054 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005eaa:	e7f1      	b.n	8005e90 <prvTimerTask+0x8>

08005eac <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b084      	sub	sp, #16
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
 8005eb4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005eb6:	f7ff f8ab 	bl	8005010 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005eba:	f107 0308 	add.w	r3, r7, #8
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	f000 f866 	bl	8005f90 <prvSampleTimeNow>
 8005ec4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d130      	bne.n	8005f2e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d10a      	bne.n	8005ee8 <prvProcessTimerOrBlockTask+0x3c>
 8005ed2:	687a      	ldr	r2, [r7, #4]
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	429a      	cmp	r2, r3
 8005ed8:	d806      	bhi.n	8005ee8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005eda:	f7ff f8a7 	bl	800502c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005ede:	68f9      	ldr	r1, [r7, #12]
 8005ee0:	6878      	ldr	r0, [r7, #4]
 8005ee2:	f7ff ff85 	bl	8005df0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005ee6:	e024      	b.n	8005f32 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d008      	beq.n	8005f00 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005eee:	4b13      	ldr	r3, [pc, #76]	; (8005f3c <prvProcessTimerOrBlockTask+0x90>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d101      	bne.n	8005efc <prvProcessTimerOrBlockTask+0x50>
 8005ef8:	2301      	movs	r3, #1
 8005efa:	e000      	b.n	8005efe <prvProcessTimerOrBlockTask+0x52>
 8005efc:	2300      	movs	r3, #0
 8005efe:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005f00:	4b0f      	ldr	r3, [pc, #60]	; (8005f40 <prvProcessTimerOrBlockTask+0x94>)
 8005f02:	6818      	ldr	r0, [r3, #0]
 8005f04:	687a      	ldr	r2, [r7, #4]
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	1ad3      	subs	r3, r2, r3
 8005f0a:	683a      	ldr	r2, [r7, #0]
 8005f0c:	4619      	mov	r1, r3
 8005f0e:	f7fe fe0f 	bl	8004b30 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005f12:	f7ff f88b 	bl	800502c <xTaskResumeAll>
 8005f16:	4603      	mov	r3, r0
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d10a      	bne.n	8005f32 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005f1c:	4b09      	ldr	r3, [pc, #36]	; (8005f44 <prvProcessTimerOrBlockTask+0x98>)
 8005f1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f22:	601a      	str	r2, [r3, #0]
 8005f24:	f3bf 8f4f 	dsb	sy
 8005f28:	f3bf 8f6f 	isb	sy
}
 8005f2c:	e001      	b.n	8005f32 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005f2e:	f7ff f87d 	bl	800502c <xTaskResumeAll>
}
 8005f32:	bf00      	nop
 8005f34:	3710      	adds	r7, #16
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bd80      	pop	{r7, pc}
 8005f3a:	bf00      	nop
 8005f3c:	20002004 	.word	0x20002004
 8005f40:	20002008 	.word	0x20002008
 8005f44:	e000ed04 	.word	0xe000ed04

08005f48 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b085      	sub	sp, #20
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005f50:	4b0e      	ldr	r3, [pc, #56]	; (8005f8c <prvGetNextExpireTime+0x44>)
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d101      	bne.n	8005f5e <prvGetNextExpireTime+0x16>
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	e000      	b.n	8005f60 <prvGetNextExpireTime+0x18>
 8005f5e:	2200      	movs	r2, #0
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d105      	bne.n	8005f78 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005f6c:	4b07      	ldr	r3, [pc, #28]	; (8005f8c <prvGetNextExpireTime+0x44>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	68db      	ldr	r3, [r3, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	60fb      	str	r3, [r7, #12]
 8005f76:	e001      	b.n	8005f7c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005f78:	2300      	movs	r3, #0
 8005f7a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
}
 8005f7e:	4618      	mov	r0, r3
 8005f80:	3714      	adds	r7, #20
 8005f82:	46bd      	mov	sp, r7
 8005f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f88:	4770      	bx	lr
 8005f8a:	bf00      	nop
 8005f8c:	20002000 	.word	0x20002000

08005f90 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b084      	sub	sp, #16
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005f98:	f7ff f8e6 	bl	8005168 <xTaskGetTickCount>
 8005f9c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005f9e:	4b0b      	ldr	r3, [pc, #44]	; (8005fcc <prvSampleTimeNow+0x3c>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	68fa      	ldr	r2, [r7, #12]
 8005fa4:	429a      	cmp	r2, r3
 8005fa6:	d205      	bcs.n	8005fb4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005fa8:	f000 f936 	bl	8006218 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2201      	movs	r2, #1
 8005fb0:	601a      	str	r2, [r3, #0]
 8005fb2:	e002      	b.n	8005fba <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005fba:	4a04      	ldr	r2, [pc, #16]	; (8005fcc <prvSampleTimeNow+0x3c>)
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
}
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	3710      	adds	r7, #16
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bd80      	pop	{r7, pc}
 8005fca:	bf00      	nop
 8005fcc:	20002010 	.word	0x20002010

08005fd0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b086      	sub	sp, #24
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	60f8      	str	r0, [r7, #12]
 8005fd8:	60b9      	str	r1, [r7, #8]
 8005fda:	607a      	str	r2, [r7, #4]
 8005fdc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005fde:	2300      	movs	r3, #0
 8005fe0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	68ba      	ldr	r2, [r7, #8]
 8005fe6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	68fa      	ldr	r2, [r7, #12]
 8005fec:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005fee:	68ba      	ldr	r2, [r7, #8]
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	429a      	cmp	r2, r3
 8005ff4:	d812      	bhi.n	800601c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ff6:	687a      	ldr	r2, [r7, #4]
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	1ad2      	subs	r2, r2, r3
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	699b      	ldr	r3, [r3, #24]
 8006000:	429a      	cmp	r2, r3
 8006002:	d302      	bcc.n	800600a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006004:	2301      	movs	r3, #1
 8006006:	617b      	str	r3, [r7, #20]
 8006008:	e01b      	b.n	8006042 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800600a:	4b10      	ldr	r3, [pc, #64]	; (800604c <prvInsertTimerInActiveList+0x7c>)
 800600c:	681a      	ldr	r2, [r3, #0]
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	3304      	adds	r3, #4
 8006012:	4619      	mov	r1, r3
 8006014:	4610      	mov	r0, r2
 8006016:	f7fd ff4c 	bl	8003eb2 <vListInsert>
 800601a:	e012      	b.n	8006042 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800601c:	687a      	ldr	r2, [r7, #4]
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	429a      	cmp	r2, r3
 8006022:	d206      	bcs.n	8006032 <prvInsertTimerInActiveList+0x62>
 8006024:	68ba      	ldr	r2, [r7, #8]
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	429a      	cmp	r2, r3
 800602a:	d302      	bcc.n	8006032 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800602c:	2301      	movs	r3, #1
 800602e:	617b      	str	r3, [r7, #20]
 8006030:	e007      	b.n	8006042 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006032:	4b07      	ldr	r3, [pc, #28]	; (8006050 <prvInsertTimerInActiveList+0x80>)
 8006034:	681a      	ldr	r2, [r3, #0]
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	3304      	adds	r3, #4
 800603a:	4619      	mov	r1, r3
 800603c:	4610      	mov	r0, r2
 800603e:	f7fd ff38 	bl	8003eb2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006042:	697b      	ldr	r3, [r7, #20]
}
 8006044:	4618      	mov	r0, r3
 8006046:	3718      	adds	r7, #24
 8006048:	46bd      	mov	sp, r7
 800604a:	bd80      	pop	{r7, pc}
 800604c:	20002004 	.word	0x20002004
 8006050:	20002000 	.word	0x20002000

08006054 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b08e      	sub	sp, #56	; 0x38
 8006058:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800605a:	e0ca      	b.n	80061f2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2b00      	cmp	r3, #0
 8006060:	da18      	bge.n	8006094 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006062:	1d3b      	adds	r3, r7, #4
 8006064:	3304      	adds	r3, #4
 8006066:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800606a:	2b00      	cmp	r3, #0
 800606c:	d10a      	bne.n	8006084 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800606e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006072:	f383 8811 	msr	BASEPRI, r3
 8006076:	f3bf 8f6f 	isb	sy
 800607a:	f3bf 8f4f 	dsb	sy
 800607e:	61fb      	str	r3, [r7, #28]
}
 8006080:	bf00      	nop
 8006082:	e7fe      	b.n	8006082 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800608a:	6850      	ldr	r0, [r2, #4]
 800608c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800608e:	6892      	ldr	r2, [r2, #8]
 8006090:	4611      	mov	r1, r2
 8006092:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2b00      	cmp	r3, #0
 8006098:	f2c0 80aa 	blt.w	80061f0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80060a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060a2:	695b      	ldr	r3, [r3, #20]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d004      	beq.n	80060b2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80060a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060aa:	3304      	adds	r3, #4
 80060ac:	4618      	mov	r0, r3
 80060ae:	f7fd ff39 	bl	8003f24 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80060b2:	463b      	mov	r3, r7
 80060b4:	4618      	mov	r0, r3
 80060b6:	f7ff ff6b 	bl	8005f90 <prvSampleTimeNow>
 80060ba:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2b09      	cmp	r3, #9
 80060c0:	f200 8097 	bhi.w	80061f2 <prvProcessReceivedCommands+0x19e>
 80060c4:	a201      	add	r2, pc, #4	; (adr r2, 80060cc <prvProcessReceivedCommands+0x78>)
 80060c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060ca:	bf00      	nop
 80060cc:	080060f5 	.word	0x080060f5
 80060d0:	080060f5 	.word	0x080060f5
 80060d4:	080060f5 	.word	0x080060f5
 80060d8:	08006169 	.word	0x08006169
 80060dc:	0800617d 	.word	0x0800617d
 80060e0:	080061c7 	.word	0x080061c7
 80060e4:	080060f5 	.word	0x080060f5
 80060e8:	080060f5 	.word	0x080060f5
 80060ec:	08006169 	.word	0x08006169
 80060f0:	0800617d 	.word	0x0800617d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80060f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80060fa:	f043 0301 	orr.w	r3, r3, #1
 80060fe:	b2da      	uxtb	r2, r3
 8006100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006102:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006106:	68ba      	ldr	r2, [r7, #8]
 8006108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800610a:	699b      	ldr	r3, [r3, #24]
 800610c:	18d1      	adds	r1, r2, r3
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006112:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006114:	f7ff ff5c 	bl	8005fd0 <prvInsertTimerInActiveList>
 8006118:	4603      	mov	r3, r0
 800611a:	2b00      	cmp	r3, #0
 800611c:	d069      	beq.n	80061f2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800611e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006120:	6a1b      	ldr	r3, [r3, #32]
 8006122:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006124:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006128:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800612c:	f003 0304 	and.w	r3, r3, #4
 8006130:	2b00      	cmp	r3, #0
 8006132:	d05e      	beq.n	80061f2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006134:	68ba      	ldr	r2, [r7, #8]
 8006136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006138:	699b      	ldr	r3, [r3, #24]
 800613a:	441a      	add	r2, r3
 800613c:	2300      	movs	r3, #0
 800613e:	9300      	str	r3, [sp, #0]
 8006140:	2300      	movs	r3, #0
 8006142:	2100      	movs	r1, #0
 8006144:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006146:	f7ff fe05 	bl	8005d54 <xTimerGenericCommand>
 800614a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800614c:	6a3b      	ldr	r3, [r7, #32]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d14f      	bne.n	80061f2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8006152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006156:	f383 8811 	msr	BASEPRI, r3
 800615a:	f3bf 8f6f 	isb	sy
 800615e:	f3bf 8f4f 	dsb	sy
 8006162:	61bb      	str	r3, [r7, #24]
}
 8006164:	bf00      	nop
 8006166:	e7fe      	b.n	8006166 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800616a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800616e:	f023 0301 	bic.w	r3, r3, #1
 8006172:	b2da      	uxtb	r2, r3
 8006174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006176:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800617a:	e03a      	b.n	80061f2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800617c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800617e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006182:	f043 0301 	orr.w	r3, r3, #1
 8006186:	b2da      	uxtb	r2, r3
 8006188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800618a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800618e:	68ba      	ldr	r2, [r7, #8]
 8006190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006192:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006196:	699b      	ldr	r3, [r3, #24]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d10a      	bne.n	80061b2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800619c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061a0:	f383 8811 	msr	BASEPRI, r3
 80061a4:	f3bf 8f6f 	isb	sy
 80061a8:	f3bf 8f4f 	dsb	sy
 80061ac:	617b      	str	r3, [r7, #20]
}
 80061ae:	bf00      	nop
 80061b0:	e7fe      	b.n	80061b0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80061b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061b4:	699a      	ldr	r2, [r3, #24]
 80061b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b8:	18d1      	adds	r1, r2, r3
 80061ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061c0:	f7ff ff06 	bl	8005fd0 <prvInsertTimerInActiveList>
					break;
 80061c4:	e015      	b.n	80061f2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80061c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80061cc:	f003 0302 	and.w	r3, r3, #2
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d103      	bne.n	80061dc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80061d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061d6:	f000 fbfb 	bl	80069d0 <vPortFree>
 80061da:	e00a      	b.n	80061f2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80061dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80061e2:	f023 0301 	bic.w	r3, r3, #1
 80061e6:	b2da      	uxtb	r2, r3
 80061e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80061ee:	e000      	b.n	80061f2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80061f0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80061f2:	4b08      	ldr	r3, [pc, #32]	; (8006214 <prvProcessReceivedCommands+0x1c0>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	1d39      	adds	r1, r7, #4
 80061f8:	2200      	movs	r2, #0
 80061fa:	4618      	mov	r0, r3
 80061fc:	f7fe f95a 	bl	80044b4 <xQueueReceive>
 8006200:	4603      	mov	r3, r0
 8006202:	2b00      	cmp	r3, #0
 8006204:	f47f af2a 	bne.w	800605c <prvProcessReceivedCommands+0x8>
	}
}
 8006208:	bf00      	nop
 800620a:	bf00      	nop
 800620c:	3730      	adds	r7, #48	; 0x30
 800620e:	46bd      	mov	sp, r7
 8006210:	bd80      	pop	{r7, pc}
 8006212:	bf00      	nop
 8006214:	20002008 	.word	0x20002008

08006218 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b088      	sub	sp, #32
 800621c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800621e:	e048      	b.n	80062b2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006220:	4b2d      	ldr	r3, [pc, #180]	; (80062d8 <prvSwitchTimerLists+0xc0>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	68db      	ldr	r3, [r3, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800622a:	4b2b      	ldr	r3, [pc, #172]	; (80062d8 <prvSwitchTimerLists+0xc0>)
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	68db      	ldr	r3, [r3, #12]
 8006230:	68db      	ldr	r3, [r3, #12]
 8006232:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	3304      	adds	r3, #4
 8006238:	4618      	mov	r0, r3
 800623a:	f7fd fe73 	bl	8003f24 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	6a1b      	ldr	r3, [r3, #32]
 8006242:	68f8      	ldr	r0, [r7, #12]
 8006244:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800624c:	f003 0304 	and.w	r3, r3, #4
 8006250:	2b00      	cmp	r3, #0
 8006252:	d02e      	beq.n	80062b2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	699b      	ldr	r3, [r3, #24]
 8006258:	693a      	ldr	r2, [r7, #16]
 800625a:	4413      	add	r3, r2
 800625c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800625e:	68ba      	ldr	r2, [r7, #8]
 8006260:	693b      	ldr	r3, [r7, #16]
 8006262:	429a      	cmp	r2, r3
 8006264:	d90e      	bls.n	8006284 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	68ba      	ldr	r2, [r7, #8]
 800626a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	68fa      	ldr	r2, [r7, #12]
 8006270:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006272:	4b19      	ldr	r3, [pc, #100]	; (80062d8 <prvSwitchTimerLists+0xc0>)
 8006274:	681a      	ldr	r2, [r3, #0]
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	3304      	adds	r3, #4
 800627a:	4619      	mov	r1, r3
 800627c:	4610      	mov	r0, r2
 800627e:	f7fd fe18 	bl	8003eb2 <vListInsert>
 8006282:	e016      	b.n	80062b2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006284:	2300      	movs	r3, #0
 8006286:	9300      	str	r3, [sp, #0]
 8006288:	2300      	movs	r3, #0
 800628a:	693a      	ldr	r2, [r7, #16]
 800628c:	2100      	movs	r1, #0
 800628e:	68f8      	ldr	r0, [r7, #12]
 8006290:	f7ff fd60 	bl	8005d54 <xTimerGenericCommand>
 8006294:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d10a      	bne.n	80062b2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800629c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062a0:	f383 8811 	msr	BASEPRI, r3
 80062a4:	f3bf 8f6f 	isb	sy
 80062a8:	f3bf 8f4f 	dsb	sy
 80062ac:	603b      	str	r3, [r7, #0]
}
 80062ae:	bf00      	nop
 80062b0:	e7fe      	b.n	80062b0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80062b2:	4b09      	ldr	r3, [pc, #36]	; (80062d8 <prvSwitchTimerLists+0xc0>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d1b1      	bne.n	8006220 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80062bc:	4b06      	ldr	r3, [pc, #24]	; (80062d8 <prvSwitchTimerLists+0xc0>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80062c2:	4b06      	ldr	r3, [pc, #24]	; (80062dc <prvSwitchTimerLists+0xc4>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4a04      	ldr	r2, [pc, #16]	; (80062d8 <prvSwitchTimerLists+0xc0>)
 80062c8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80062ca:	4a04      	ldr	r2, [pc, #16]	; (80062dc <prvSwitchTimerLists+0xc4>)
 80062cc:	697b      	ldr	r3, [r7, #20]
 80062ce:	6013      	str	r3, [r2, #0]
}
 80062d0:	bf00      	nop
 80062d2:	3718      	adds	r7, #24
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bd80      	pop	{r7, pc}
 80062d8:	20002000 	.word	0x20002000
 80062dc:	20002004 	.word	0x20002004

080062e0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b082      	sub	sp, #8
 80062e4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80062e6:	f000 f985 	bl	80065f4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80062ea:	4b15      	ldr	r3, [pc, #84]	; (8006340 <prvCheckForValidListAndQueue+0x60>)
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d120      	bne.n	8006334 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80062f2:	4814      	ldr	r0, [pc, #80]	; (8006344 <prvCheckForValidListAndQueue+0x64>)
 80062f4:	f7fd fd8c 	bl	8003e10 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80062f8:	4813      	ldr	r0, [pc, #76]	; (8006348 <prvCheckForValidListAndQueue+0x68>)
 80062fa:	f7fd fd89 	bl	8003e10 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80062fe:	4b13      	ldr	r3, [pc, #76]	; (800634c <prvCheckForValidListAndQueue+0x6c>)
 8006300:	4a10      	ldr	r2, [pc, #64]	; (8006344 <prvCheckForValidListAndQueue+0x64>)
 8006302:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006304:	4b12      	ldr	r3, [pc, #72]	; (8006350 <prvCheckForValidListAndQueue+0x70>)
 8006306:	4a10      	ldr	r2, [pc, #64]	; (8006348 <prvCheckForValidListAndQueue+0x68>)
 8006308:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800630a:	2300      	movs	r3, #0
 800630c:	9300      	str	r3, [sp, #0]
 800630e:	4b11      	ldr	r3, [pc, #68]	; (8006354 <prvCheckForValidListAndQueue+0x74>)
 8006310:	4a11      	ldr	r2, [pc, #68]	; (8006358 <prvCheckForValidListAndQueue+0x78>)
 8006312:	2110      	movs	r1, #16
 8006314:	200a      	movs	r0, #10
 8006316:	f7fd fe97 	bl	8004048 <xQueueGenericCreateStatic>
 800631a:	4603      	mov	r3, r0
 800631c:	4a08      	ldr	r2, [pc, #32]	; (8006340 <prvCheckForValidListAndQueue+0x60>)
 800631e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006320:	4b07      	ldr	r3, [pc, #28]	; (8006340 <prvCheckForValidListAndQueue+0x60>)
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d005      	beq.n	8006334 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006328:	4b05      	ldr	r3, [pc, #20]	; (8006340 <prvCheckForValidListAndQueue+0x60>)
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	490b      	ldr	r1, [pc, #44]	; (800635c <prvCheckForValidListAndQueue+0x7c>)
 800632e:	4618      	mov	r0, r3
 8006330:	f7fe fbd4 	bl	8004adc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006334:	f000 f98e 	bl	8006654 <vPortExitCritical>
}
 8006338:	bf00      	nop
 800633a:	46bd      	mov	sp, r7
 800633c:	bd80      	pop	{r7, pc}
 800633e:	bf00      	nop
 8006340:	20002008 	.word	0x20002008
 8006344:	20001fd8 	.word	0x20001fd8
 8006348:	20001fec 	.word	0x20001fec
 800634c:	20002000 	.word	0x20002000
 8006350:	20002004 	.word	0x20002004
 8006354:	200020b4 	.word	0x200020b4
 8006358:	20002014 	.word	0x20002014
 800635c:	08007790 	.word	0x08007790

08006360 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b086      	sub	sp, #24
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d10a      	bne.n	8006388 <pvTimerGetTimerID+0x28>
	__asm volatile
 8006372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006376:	f383 8811 	msr	BASEPRI, r3
 800637a:	f3bf 8f6f 	isb	sy
 800637e:	f3bf 8f4f 	dsb	sy
 8006382:	60fb      	str	r3, [r7, #12]
}
 8006384:	bf00      	nop
 8006386:	e7fe      	b.n	8006386 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 8006388:	f000 f934 	bl	80065f4 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800638c:	697b      	ldr	r3, [r7, #20]
 800638e:	69db      	ldr	r3, [r3, #28]
 8006390:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8006392:	f000 f95f 	bl	8006654 <vPortExitCritical>

	return pvReturn;
 8006396:	693b      	ldr	r3, [r7, #16]
}
 8006398:	4618      	mov	r0, r3
 800639a:	3718      	adds	r7, #24
 800639c:	46bd      	mov	sp, r7
 800639e:	bd80      	pop	{r7, pc}

080063a0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80063a0:	b480      	push	{r7}
 80063a2:	b085      	sub	sp, #20
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	60f8      	str	r0, [r7, #12]
 80063a8:	60b9      	str	r1, [r7, #8]
 80063aa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	3b04      	subs	r3, #4
 80063b0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80063b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	3b04      	subs	r3, #4
 80063be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	f023 0201 	bic.w	r2, r3, #1
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	3b04      	subs	r3, #4
 80063ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80063d0:	4a0c      	ldr	r2, [pc, #48]	; (8006404 <pxPortInitialiseStack+0x64>)
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	3b14      	subs	r3, #20
 80063da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80063dc:	687a      	ldr	r2, [r7, #4]
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	3b04      	subs	r3, #4
 80063e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	f06f 0202 	mvn.w	r2, #2
 80063ee:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	3b20      	subs	r3, #32
 80063f4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80063f6:	68fb      	ldr	r3, [r7, #12]
}
 80063f8:	4618      	mov	r0, r3
 80063fa:	3714      	adds	r7, #20
 80063fc:	46bd      	mov	sp, r7
 80063fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006402:	4770      	bx	lr
 8006404:	08006409 	.word	0x08006409

08006408 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006408:	b480      	push	{r7}
 800640a:	b085      	sub	sp, #20
 800640c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800640e:	2300      	movs	r3, #0
 8006410:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006412:	4b12      	ldr	r3, [pc, #72]	; (800645c <prvTaskExitError+0x54>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f1b3 3fff 	cmp.w	r3, #4294967295
 800641a:	d00a      	beq.n	8006432 <prvTaskExitError+0x2a>
	__asm volatile
 800641c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006420:	f383 8811 	msr	BASEPRI, r3
 8006424:	f3bf 8f6f 	isb	sy
 8006428:	f3bf 8f4f 	dsb	sy
 800642c:	60fb      	str	r3, [r7, #12]
}
 800642e:	bf00      	nop
 8006430:	e7fe      	b.n	8006430 <prvTaskExitError+0x28>
	__asm volatile
 8006432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006436:	f383 8811 	msr	BASEPRI, r3
 800643a:	f3bf 8f6f 	isb	sy
 800643e:	f3bf 8f4f 	dsb	sy
 8006442:	60bb      	str	r3, [r7, #8]
}
 8006444:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006446:	bf00      	nop
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d0fc      	beq.n	8006448 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800644e:	bf00      	nop
 8006450:	bf00      	nop
 8006452:	3714      	adds	r7, #20
 8006454:	46bd      	mov	sp, r7
 8006456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645a:	4770      	bx	lr
 800645c:	2000000c 	.word	0x2000000c

08006460 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006460:	4b07      	ldr	r3, [pc, #28]	; (8006480 <pxCurrentTCBConst2>)
 8006462:	6819      	ldr	r1, [r3, #0]
 8006464:	6808      	ldr	r0, [r1, #0]
 8006466:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800646a:	f380 8809 	msr	PSP, r0
 800646e:	f3bf 8f6f 	isb	sy
 8006472:	f04f 0000 	mov.w	r0, #0
 8006476:	f380 8811 	msr	BASEPRI, r0
 800647a:	4770      	bx	lr
 800647c:	f3af 8000 	nop.w

08006480 <pxCurrentTCBConst2>:
 8006480:	20001ad8 	.word	0x20001ad8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006484:	bf00      	nop
 8006486:	bf00      	nop

08006488 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006488:	4808      	ldr	r0, [pc, #32]	; (80064ac <prvPortStartFirstTask+0x24>)
 800648a:	6800      	ldr	r0, [r0, #0]
 800648c:	6800      	ldr	r0, [r0, #0]
 800648e:	f380 8808 	msr	MSP, r0
 8006492:	f04f 0000 	mov.w	r0, #0
 8006496:	f380 8814 	msr	CONTROL, r0
 800649a:	b662      	cpsie	i
 800649c:	b661      	cpsie	f
 800649e:	f3bf 8f4f 	dsb	sy
 80064a2:	f3bf 8f6f 	isb	sy
 80064a6:	df00      	svc	0
 80064a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80064aa:	bf00      	nop
 80064ac:	e000ed08 	.word	0xe000ed08

080064b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b086      	sub	sp, #24
 80064b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80064b6:	4b46      	ldr	r3, [pc, #280]	; (80065d0 <xPortStartScheduler+0x120>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	4a46      	ldr	r2, [pc, #280]	; (80065d4 <xPortStartScheduler+0x124>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d10a      	bne.n	80064d6 <xPortStartScheduler+0x26>
	__asm volatile
 80064c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064c4:	f383 8811 	msr	BASEPRI, r3
 80064c8:	f3bf 8f6f 	isb	sy
 80064cc:	f3bf 8f4f 	dsb	sy
 80064d0:	613b      	str	r3, [r7, #16]
}
 80064d2:	bf00      	nop
 80064d4:	e7fe      	b.n	80064d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80064d6:	4b3e      	ldr	r3, [pc, #248]	; (80065d0 <xPortStartScheduler+0x120>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4a3f      	ldr	r2, [pc, #252]	; (80065d8 <xPortStartScheduler+0x128>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d10a      	bne.n	80064f6 <xPortStartScheduler+0x46>
	__asm volatile
 80064e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064e4:	f383 8811 	msr	BASEPRI, r3
 80064e8:	f3bf 8f6f 	isb	sy
 80064ec:	f3bf 8f4f 	dsb	sy
 80064f0:	60fb      	str	r3, [r7, #12]
}
 80064f2:	bf00      	nop
 80064f4:	e7fe      	b.n	80064f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80064f6:	4b39      	ldr	r3, [pc, #228]	; (80065dc <xPortStartScheduler+0x12c>)
 80064f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	781b      	ldrb	r3, [r3, #0]
 80064fe:	b2db      	uxtb	r3, r3
 8006500:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006502:	697b      	ldr	r3, [r7, #20]
 8006504:	22ff      	movs	r2, #255	; 0xff
 8006506:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006508:	697b      	ldr	r3, [r7, #20]
 800650a:	781b      	ldrb	r3, [r3, #0]
 800650c:	b2db      	uxtb	r3, r3
 800650e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006510:	78fb      	ldrb	r3, [r7, #3]
 8006512:	b2db      	uxtb	r3, r3
 8006514:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006518:	b2da      	uxtb	r2, r3
 800651a:	4b31      	ldr	r3, [pc, #196]	; (80065e0 <xPortStartScheduler+0x130>)
 800651c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800651e:	4b31      	ldr	r3, [pc, #196]	; (80065e4 <xPortStartScheduler+0x134>)
 8006520:	2207      	movs	r2, #7
 8006522:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006524:	e009      	b.n	800653a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006526:	4b2f      	ldr	r3, [pc, #188]	; (80065e4 <xPortStartScheduler+0x134>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	3b01      	subs	r3, #1
 800652c:	4a2d      	ldr	r2, [pc, #180]	; (80065e4 <xPortStartScheduler+0x134>)
 800652e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006530:	78fb      	ldrb	r3, [r7, #3]
 8006532:	b2db      	uxtb	r3, r3
 8006534:	005b      	lsls	r3, r3, #1
 8006536:	b2db      	uxtb	r3, r3
 8006538:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800653a:	78fb      	ldrb	r3, [r7, #3]
 800653c:	b2db      	uxtb	r3, r3
 800653e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006542:	2b80      	cmp	r3, #128	; 0x80
 8006544:	d0ef      	beq.n	8006526 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006546:	4b27      	ldr	r3, [pc, #156]	; (80065e4 <xPortStartScheduler+0x134>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f1c3 0307 	rsb	r3, r3, #7
 800654e:	2b04      	cmp	r3, #4
 8006550:	d00a      	beq.n	8006568 <xPortStartScheduler+0xb8>
	__asm volatile
 8006552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006556:	f383 8811 	msr	BASEPRI, r3
 800655a:	f3bf 8f6f 	isb	sy
 800655e:	f3bf 8f4f 	dsb	sy
 8006562:	60bb      	str	r3, [r7, #8]
}
 8006564:	bf00      	nop
 8006566:	e7fe      	b.n	8006566 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006568:	4b1e      	ldr	r3, [pc, #120]	; (80065e4 <xPortStartScheduler+0x134>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	021b      	lsls	r3, r3, #8
 800656e:	4a1d      	ldr	r2, [pc, #116]	; (80065e4 <xPortStartScheduler+0x134>)
 8006570:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006572:	4b1c      	ldr	r3, [pc, #112]	; (80065e4 <xPortStartScheduler+0x134>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800657a:	4a1a      	ldr	r2, [pc, #104]	; (80065e4 <xPortStartScheduler+0x134>)
 800657c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	b2da      	uxtb	r2, r3
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006586:	4b18      	ldr	r3, [pc, #96]	; (80065e8 <xPortStartScheduler+0x138>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	4a17      	ldr	r2, [pc, #92]	; (80065e8 <xPortStartScheduler+0x138>)
 800658c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006590:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006592:	4b15      	ldr	r3, [pc, #84]	; (80065e8 <xPortStartScheduler+0x138>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4a14      	ldr	r2, [pc, #80]	; (80065e8 <xPortStartScheduler+0x138>)
 8006598:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800659c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800659e:	f000 f8dd 	bl	800675c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80065a2:	4b12      	ldr	r3, [pc, #72]	; (80065ec <xPortStartScheduler+0x13c>)
 80065a4:	2200      	movs	r2, #0
 80065a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80065a8:	f000 f8fc 	bl	80067a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80065ac:	4b10      	ldr	r3, [pc, #64]	; (80065f0 <xPortStartScheduler+0x140>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	4a0f      	ldr	r2, [pc, #60]	; (80065f0 <xPortStartScheduler+0x140>)
 80065b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80065b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80065b8:	f7ff ff66 	bl	8006488 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80065bc:	f7fe fe9e 	bl	80052fc <vTaskSwitchContext>
	prvTaskExitError();
 80065c0:	f7ff ff22 	bl	8006408 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80065c4:	2300      	movs	r3, #0
}
 80065c6:	4618      	mov	r0, r3
 80065c8:	3718      	adds	r7, #24
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bd80      	pop	{r7, pc}
 80065ce:	bf00      	nop
 80065d0:	e000ed00 	.word	0xe000ed00
 80065d4:	410fc271 	.word	0x410fc271
 80065d8:	410fc270 	.word	0x410fc270
 80065dc:	e000e400 	.word	0xe000e400
 80065e0:	20002104 	.word	0x20002104
 80065e4:	20002108 	.word	0x20002108
 80065e8:	e000ed20 	.word	0xe000ed20
 80065ec:	2000000c 	.word	0x2000000c
 80065f0:	e000ef34 	.word	0xe000ef34

080065f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80065f4:	b480      	push	{r7}
 80065f6:	b083      	sub	sp, #12
 80065f8:	af00      	add	r7, sp, #0
	__asm volatile
 80065fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065fe:	f383 8811 	msr	BASEPRI, r3
 8006602:	f3bf 8f6f 	isb	sy
 8006606:	f3bf 8f4f 	dsb	sy
 800660a:	607b      	str	r3, [r7, #4]
}
 800660c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800660e:	4b0f      	ldr	r3, [pc, #60]	; (800664c <vPortEnterCritical+0x58>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	3301      	adds	r3, #1
 8006614:	4a0d      	ldr	r2, [pc, #52]	; (800664c <vPortEnterCritical+0x58>)
 8006616:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006618:	4b0c      	ldr	r3, [pc, #48]	; (800664c <vPortEnterCritical+0x58>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	2b01      	cmp	r3, #1
 800661e:	d10f      	bne.n	8006640 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006620:	4b0b      	ldr	r3, [pc, #44]	; (8006650 <vPortEnterCritical+0x5c>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	b2db      	uxtb	r3, r3
 8006626:	2b00      	cmp	r3, #0
 8006628:	d00a      	beq.n	8006640 <vPortEnterCritical+0x4c>
	__asm volatile
 800662a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800662e:	f383 8811 	msr	BASEPRI, r3
 8006632:	f3bf 8f6f 	isb	sy
 8006636:	f3bf 8f4f 	dsb	sy
 800663a:	603b      	str	r3, [r7, #0]
}
 800663c:	bf00      	nop
 800663e:	e7fe      	b.n	800663e <vPortEnterCritical+0x4a>
	}
}
 8006640:	bf00      	nop
 8006642:	370c      	adds	r7, #12
 8006644:	46bd      	mov	sp, r7
 8006646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664a:	4770      	bx	lr
 800664c:	2000000c 	.word	0x2000000c
 8006650:	e000ed04 	.word	0xe000ed04

08006654 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006654:	b480      	push	{r7}
 8006656:	b083      	sub	sp, #12
 8006658:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800665a:	4b12      	ldr	r3, [pc, #72]	; (80066a4 <vPortExitCritical+0x50>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d10a      	bne.n	8006678 <vPortExitCritical+0x24>
	__asm volatile
 8006662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006666:	f383 8811 	msr	BASEPRI, r3
 800666a:	f3bf 8f6f 	isb	sy
 800666e:	f3bf 8f4f 	dsb	sy
 8006672:	607b      	str	r3, [r7, #4]
}
 8006674:	bf00      	nop
 8006676:	e7fe      	b.n	8006676 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006678:	4b0a      	ldr	r3, [pc, #40]	; (80066a4 <vPortExitCritical+0x50>)
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	3b01      	subs	r3, #1
 800667e:	4a09      	ldr	r2, [pc, #36]	; (80066a4 <vPortExitCritical+0x50>)
 8006680:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006682:	4b08      	ldr	r3, [pc, #32]	; (80066a4 <vPortExitCritical+0x50>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d105      	bne.n	8006696 <vPortExitCritical+0x42>
 800668a:	2300      	movs	r3, #0
 800668c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	f383 8811 	msr	BASEPRI, r3
}
 8006694:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006696:	bf00      	nop
 8006698:	370c      	adds	r7, #12
 800669a:	46bd      	mov	sp, r7
 800669c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a0:	4770      	bx	lr
 80066a2:	bf00      	nop
 80066a4:	2000000c 	.word	0x2000000c
	...

080066b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80066b0:	f3ef 8009 	mrs	r0, PSP
 80066b4:	f3bf 8f6f 	isb	sy
 80066b8:	4b15      	ldr	r3, [pc, #84]	; (8006710 <pxCurrentTCBConst>)
 80066ba:	681a      	ldr	r2, [r3, #0]
 80066bc:	f01e 0f10 	tst.w	lr, #16
 80066c0:	bf08      	it	eq
 80066c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80066c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066ca:	6010      	str	r0, [r2, #0]
 80066cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80066d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80066d4:	f380 8811 	msr	BASEPRI, r0
 80066d8:	f3bf 8f4f 	dsb	sy
 80066dc:	f3bf 8f6f 	isb	sy
 80066e0:	f7fe fe0c 	bl	80052fc <vTaskSwitchContext>
 80066e4:	f04f 0000 	mov.w	r0, #0
 80066e8:	f380 8811 	msr	BASEPRI, r0
 80066ec:	bc09      	pop	{r0, r3}
 80066ee:	6819      	ldr	r1, [r3, #0]
 80066f0:	6808      	ldr	r0, [r1, #0]
 80066f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066f6:	f01e 0f10 	tst.w	lr, #16
 80066fa:	bf08      	it	eq
 80066fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006700:	f380 8809 	msr	PSP, r0
 8006704:	f3bf 8f6f 	isb	sy
 8006708:	4770      	bx	lr
 800670a:	bf00      	nop
 800670c:	f3af 8000 	nop.w

08006710 <pxCurrentTCBConst>:
 8006710:	20001ad8 	.word	0x20001ad8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006714:	bf00      	nop
 8006716:	bf00      	nop

08006718 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b082      	sub	sp, #8
 800671c:	af00      	add	r7, sp, #0
	__asm volatile
 800671e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006722:	f383 8811 	msr	BASEPRI, r3
 8006726:	f3bf 8f6f 	isb	sy
 800672a:	f3bf 8f4f 	dsb	sy
 800672e:	607b      	str	r3, [r7, #4]
}
 8006730:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006732:	f7fe fd29 	bl	8005188 <xTaskIncrementTick>
 8006736:	4603      	mov	r3, r0
 8006738:	2b00      	cmp	r3, #0
 800673a:	d003      	beq.n	8006744 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800673c:	4b06      	ldr	r3, [pc, #24]	; (8006758 <xPortSysTickHandler+0x40>)
 800673e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006742:	601a      	str	r2, [r3, #0]
 8006744:	2300      	movs	r3, #0
 8006746:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	f383 8811 	msr	BASEPRI, r3
}
 800674e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006750:	bf00      	nop
 8006752:	3708      	adds	r7, #8
 8006754:	46bd      	mov	sp, r7
 8006756:	bd80      	pop	{r7, pc}
 8006758:	e000ed04 	.word	0xe000ed04

0800675c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800675c:	b480      	push	{r7}
 800675e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006760:	4b0b      	ldr	r3, [pc, #44]	; (8006790 <vPortSetupTimerInterrupt+0x34>)
 8006762:	2200      	movs	r2, #0
 8006764:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006766:	4b0b      	ldr	r3, [pc, #44]	; (8006794 <vPortSetupTimerInterrupt+0x38>)
 8006768:	2200      	movs	r2, #0
 800676a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800676c:	4b0a      	ldr	r3, [pc, #40]	; (8006798 <vPortSetupTimerInterrupt+0x3c>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4a0a      	ldr	r2, [pc, #40]	; (800679c <vPortSetupTimerInterrupt+0x40>)
 8006772:	fba2 2303 	umull	r2, r3, r2, r3
 8006776:	099b      	lsrs	r3, r3, #6
 8006778:	4a09      	ldr	r2, [pc, #36]	; (80067a0 <vPortSetupTimerInterrupt+0x44>)
 800677a:	3b01      	subs	r3, #1
 800677c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800677e:	4b04      	ldr	r3, [pc, #16]	; (8006790 <vPortSetupTimerInterrupt+0x34>)
 8006780:	2207      	movs	r2, #7
 8006782:	601a      	str	r2, [r3, #0]
}
 8006784:	bf00      	nop
 8006786:	46bd      	mov	sp, r7
 8006788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678c:	4770      	bx	lr
 800678e:	bf00      	nop
 8006790:	e000e010 	.word	0xe000e010
 8006794:	e000e018 	.word	0xe000e018
 8006798:	20000000 	.word	0x20000000
 800679c:	10624dd3 	.word	0x10624dd3
 80067a0:	e000e014 	.word	0xe000e014

080067a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80067a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80067b4 <vPortEnableVFP+0x10>
 80067a8:	6801      	ldr	r1, [r0, #0]
 80067aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80067ae:	6001      	str	r1, [r0, #0]
 80067b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80067b2:	bf00      	nop
 80067b4:	e000ed88 	.word	0xe000ed88

080067b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80067b8:	b480      	push	{r7}
 80067ba:	b085      	sub	sp, #20
 80067bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80067be:	f3ef 8305 	mrs	r3, IPSR
 80067c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	2b0f      	cmp	r3, #15
 80067c8:	d914      	bls.n	80067f4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80067ca:	4a17      	ldr	r2, [pc, #92]	; (8006828 <vPortValidateInterruptPriority+0x70>)
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	4413      	add	r3, r2
 80067d0:	781b      	ldrb	r3, [r3, #0]
 80067d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80067d4:	4b15      	ldr	r3, [pc, #84]	; (800682c <vPortValidateInterruptPriority+0x74>)
 80067d6:	781b      	ldrb	r3, [r3, #0]
 80067d8:	7afa      	ldrb	r2, [r7, #11]
 80067da:	429a      	cmp	r2, r3
 80067dc:	d20a      	bcs.n	80067f4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80067de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067e2:	f383 8811 	msr	BASEPRI, r3
 80067e6:	f3bf 8f6f 	isb	sy
 80067ea:	f3bf 8f4f 	dsb	sy
 80067ee:	607b      	str	r3, [r7, #4]
}
 80067f0:	bf00      	nop
 80067f2:	e7fe      	b.n	80067f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80067f4:	4b0e      	ldr	r3, [pc, #56]	; (8006830 <vPortValidateInterruptPriority+0x78>)
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80067fc:	4b0d      	ldr	r3, [pc, #52]	; (8006834 <vPortValidateInterruptPriority+0x7c>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	429a      	cmp	r2, r3
 8006802:	d90a      	bls.n	800681a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006808:	f383 8811 	msr	BASEPRI, r3
 800680c:	f3bf 8f6f 	isb	sy
 8006810:	f3bf 8f4f 	dsb	sy
 8006814:	603b      	str	r3, [r7, #0]
}
 8006816:	bf00      	nop
 8006818:	e7fe      	b.n	8006818 <vPortValidateInterruptPriority+0x60>
	}
 800681a:	bf00      	nop
 800681c:	3714      	adds	r7, #20
 800681e:	46bd      	mov	sp, r7
 8006820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006824:	4770      	bx	lr
 8006826:	bf00      	nop
 8006828:	e000e3f0 	.word	0xe000e3f0
 800682c:	20002104 	.word	0x20002104
 8006830:	e000ed0c 	.word	0xe000ed0c
 8006834:	20002108 	.word	0x20002108

08006838 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b08a      	sub	sp, #40	; 0x28
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006840:	2300      	movs	r3, #0
 8006842:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006844:	f7fe fbe4 	bl	8005010 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006848:	4b5b      	ldr	r3, [pc, #364]	; (80069b8 <pvPortMalloc+0x180>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d101      	bne.n	8006854 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006850:	f000 f920 	bl	8006a94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006854:	4b59      	ldr	r3, [pc, #356]	; (80069bc <pvPortMalloc+0x184>)
 8006856:	681a      	ldr	r2, [r3, #0]
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	4013      	ands	r3, r2
 800685c:	2b00      	cmp	r3, #0
 800685e:	f040 8093 	bne.w	8006988 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d01d      	beq.n	80068a4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006868:	2208      	movs	r2, #8
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	4413      	add	r3, r2
 800686e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	f003 0307 	and.w	r3, r3, #7
 8006876:	2b00      	cmp	r3, #0
 8006878:	d014      	beq.n	80068a4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	f023 0307 	bic.w	r3, r3, #7
 8006880:	3308      	adds	r3, #8
 8006882:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	f003 0307 	and.w	r3, r3, #7
 800688a:	2b00      	cmp	r3, #0
 800688c:	d00a      	beq.n	80068a4 <pvPortMalloc+0x6c>
	__asm volatile
 800688e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006892:	f383 8811 	msr	BASEPRI, r3
 8006896:	f3bf 8f6f 	isb	sy
 800689a:	f3bf 8f4f 	dsb	sy
 800689e:	617b      	str	r3, [r7, #20]
}
 80068a0:	bf00      	nop
 80068a2:	e7fe      	b.n	80068a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d06e      	beq.n	8006988 <pvPortMalloc+0x150>
 80068aa:	4b45      	ldr	r3, [pc, #276]	; (80069c0 <pvPortMalloc+0x188>)
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	687a      	ldr	r2, [r7, #4]
 80068b0:	429a      	cmp	r2, r3
 80068b2:	d869      	bhi.n	8006988 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80068b4:	4b43      	ldr	r3, [pc, #268]	; (80069c4 <pvPortMalloc+0x18c>)
 80068b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80068b8:	4b42      	ldr	r3, [pc, #264]	; (80069c4 <pvPortMalloc+0x18c>)
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80068be:	e004      	b.n	80068ca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80068c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80068c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80068ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068cc:	685b      	ldr	r3, [r3, #4]
 80068ce:	687a      	ldr	r2, [r7, #4]
 80068d0:	429a      	cmp	r2, r3
 80068d2:	d903      	bls.n	80068dc <pvPortMalloc+0xa4>
 80068d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d1f1      	bne.n	80068c0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80068dc:	4b36      	ldr	r3, [pc, #216]	; (80069b8 <pvPortMalloc+0x180>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068e2:	429a      	cmp	r2, r3
 80068e4:	d050      	beq.n	8006988 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80068e6:	6a3b      	ldr	r3, [r7, #32]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	2208      	movs	r2, #8
 80068ec:	4413      	add	r3, r2
 80068ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80068f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f2:	681a      	ldr	r2, [r3, #0]
 80068f4:	6a3b      	ldr	r3, [r7, #32]
 80068f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80068f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068fa:	685a      	ldr	r2, [r3, #4]
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	1ad2      	subs	r2, r2, r3
 8006900:	2308      	movs	r3, #8
 8006902:	005b      	lsls	r3, r3, #1
 8006904:	429a      	cmp	r2, r3
 8006906:	d91f      	bls.n	8006948 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006908:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	4413      	add	r3, r2
 800690e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006910:	69bb      	ldr	r3, [r7, #24]
 8006912:	f003 0307 	and.w	r3, r3, #7
 8006916:	2b00      	cmp	r3, #0
 8006918:	d00a      	beq.n	8006930 <pvPortMalloc+0xf8>
	__asm volatile
 800691a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800691e:	f383 8811 	msr	BASEPRI, r3
 8006922:	f3bf 8f6f 	isb	sy
 8006926:	f3bf 8f4f 	dsb	sy
 800692a:	613b      	str	r3, [r7, #16]
}
 800692c:	bf00      	nop
 800692e:	e7fe      	b.n	800692e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006932:	685a      	ldr	r2, [r3, #4]
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	1ad2      	subs	r2, r2, r3
 8006938:	69bb      	ldr	r3, [r7, #24]
 800693a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800693c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800693e:	687a      	ldr	r2, [r7, #4]
 8006940:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006942:	69b8      	ldr	r0, [r7, #24]
 8006944:	f000 f908 	bl	8006b58 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006948:	4b1d      	ldr	r3, [pc, #116]	; (80069c0 <pvPortMalloc+0x188>)
 800694a:	681a      	ldr	r2, [r3, #0]
 800694c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800694e:	685b      	ldr	r3, [r3, #4]
 8006950:	1ad3      	subs	r3, r2, r3
 8006952:	4a1b      	ldr	r2, [pc, #108]	; (80069c0 <pvPortMalloc+0x188>)
 8006954:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006956:	4b1a      	ldr	r3, [pc, #104]	; (80069c0 <pvPortMalloc+0x188>)
 8006958:	681a      	ldr	r2, [r3, #0]
 800695a:	4b1b      	ldr	r3, [pc, #108]	; (80069c8 <pvPortMalloc+0x190>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	429a      	cmp	r2, r3
 8006960:	d203      	bcs.n	800696a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006962:	4b17      	ldr	r3, [pc, #92]	; (80069c0 <pvPortMalloc+0x188>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4a18      	ldr	r2, [pc, #96]	; (80069c8 <pvPortMalloc+0x190>)
 8006968:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800696a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800696c:	685a      	ldr	r2, [r3, #4]
 800696e:	4b13      	ldr	r3, [pc, #76]	; (80069bc <pvPortMalloc+0x184>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	431a      	orrs	r2, r3
 8006974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006976:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800697a:	2200      	movs	r2, #0
 800697c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800697e:	4b13      	ldr	r3, [pc, #76]	; (80069cc <pvPortMalloc+0x194>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	3301      	adds	r3, #1
 8006984:	4a11      	ldr	r2, [pc, #68]	; (80069cc <pvPortMalloc+0x194>)
 8006986:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006988:	f7fe fb50 	bl	800502c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800698c:	69fb      	ldr	r3, [r7, #28]
 800698e:	f003 0307 	and.w	r3, r3, #7
 8006992:	2b00      	cmp	r3, #0
 8006994:	d00a      	beq.n	80069ac <pvPortMalloc+0x174>
	__asm volatile
 8006996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800699a:	f383 8811 	msr	BASEPRI, r3
 800699e:	f3bf 8f6f 	isb	sy
 80069a2:	f3bf 8f4f 	dsb	sy
 80069a6:	60fb      	str	r3, [r7, #12]
}
 80069a8:	bf00      	nop
 80069aa:	e7fe      	b.n	80069aa <pvPortMalloc+0x172>
	return pvReturn;
 80069ac:	69fb      	ldr	r3, [r7, #28]
}
 80069ae:	4618      	mov	r0, r3
 80069b0:	3728      	adds	r7, #40	; 0x28
 80069b2:	46bd      	mov	sp, r7
 80069b4:	bd80      	pop	{r7, pc}
 80069b6:	bf00      	nop
 80069b8:	20005d14 	.word	0x20005d14
 80069bc:	20005d28 	.word	0x20005d28
 80069c0:	20005d18 	.word	0x20005d18
 80069c4:	20005d0c 	.word	0x20005d0c
 80069c8:	20005d1c 	.word	0x20005d1c
 80069cc:	20005d20 	.word	0x20005d20

080069d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b086      	sub	sp, #24
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d04d      	beq.n	8006a7e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80069e2:	2308      	movs	r3, #8
 80069e4:	425b      	negs	r3, r3
 80069e6:	697a      	ldr	r2, [r7, #20]
 80069e8:	4413      	add	r3, r2
 80069ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80069f0:	693b      	ldr	r3, [r7, #16]
 80069f2:	685a      	ldr	r2, [r3, #4]
 80069f4:	4b24      	ldr	r3, [pc, #144]	; (8006a88 <vPortFree+0xb8>)
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4013      	ands	r3, r2
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d10a      	bne.n	8006a14 <vPortFree+0x44>
	__asm volatile
 80069fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a02:	f383 8811 	msr	BASEPRI, r3
 8006a06:	f3bf 8f6f 	isb	sy
 8006a0a:	f3bf 8f4f 	dsb	sy
 8006a0e:	60fb      	str	r3, [r7, #12]
}
 8006a10:	bf00      	nop
 8006a12:	e7fe      	b.n	8006a12 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006a14:	693b      	ldr	r3, [r7, #16]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d00a      	beq.n	8006a32 <vPortFree+0x62>
	__asm volatile
 8006a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a20:	f383 8811 	msr	BASEPRI, r3
 8006a24:	f3bf 8f6f 	isb	sy
 8006a28:	f3bf 8f4f 	dsb	sy
 8006a2c:	60bb      	str	r3, [r7, #8]
}
 8006a2e:	bf00      	nop
 8006a30:	e7fe      	b.n	8006a30 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006a32:	693b      	ldr	r3, [r7, #16]
 8006a34:	685a      	ldr	r2, [r3, #4]
 8006a36:	4b14      	ldr	r3, [pc, #80]	; (8006a88 <vPortFree+0xb8>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4013      	ands	r3, r2
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d01e      	beq.n	8006a7e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006a40:	693b      	ldr	r3, [r7, #16]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d11a      	bne.n	8006a7e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006a48:	693b      	ldr	r3, [r7, #16]
 8006a4a:	685a      	ldr	r2, [r3, #4]
 8006a4c:	4b0e      	ldr	r3, [pc, #56]	; (8006a88 <vPortFree+0xb8>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	43db      	mvns	r3, r3
 8006a52:	401a      	ands	r2, r3
 8006a54:	693b      	ldr	r3, [r7, #16]
 8006a56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006a58:	f7fe fada 	bl	8005010 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006a5c:	693b      	ldr	r3, [r7, #16]
 8006a5e:	685a      	ldr	r2, [r3, #4]
 8006a60:	4b0a      	ldr	r3, [pc, #40]	; (8006a8c <vPortFree+0xbc>)
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4413      	add	r3, r2
 8006a66:	4a09      	ldr	r2, [pc, #36]	; (8006a8c <vPortFree+0xbc>)
 8006a68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006a6a:	6938      	ldr	r0, [r7, #16]
 8006a6c:	f000 f874 	bl	8006b58 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006a70:	4b07      	ldr	r3, [pc, #28]	; (8006a90 <vPortFree+0xc0>)
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	3301      	adds	r3, #1
 8006a76:	4a06      	ldr	r2, [pc, #24]	; (8006a90 <vPortFree+0xc0>)
 8006a78:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006a7a:	f7fe fad7 	bl	800502c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006a7e:	bf00      	nop
 8006a80:	3718      	adds	r7, #24
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bd80      	pop	{r7, pc}
 8006a86:	bf00      	nop
 8006a88:	20005d28 	.word	0x20005d28
 8006a8c:	20005d18 	.word	0x20005d18
 8006a90:	20005d24 	.word	0x20005d24

08006a94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006a94:	b480      	push	{r7}
 8006a96:	b085      	sub	sp, #20
 8006a98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006a9a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006a9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006aa0:	4b27      	ldr	r3, [pc, #156]	; (8006b40 <prvHeapInit+0xac>)
 8006aa2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	f003 0307 	and.w	r3, r3, #7
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d00c      	beq.n	8006ac8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	3307      	adds	r3, #7
 8006ab2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	f023 0307 	bic.w	r3, r3, #7
 8006aba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006abc:	68ba      	ldr	r2, [r7, #8]
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	1ad3      	subs	r3, r2, r3
 8006ac2:	4a1f      	ldr	r2, [pc, #124]	; (8006b40 <prvHeapInit+0xac>)
 8006ac4:	4413      	add	r3, r2
 8006ac6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006acc:	4a1d      	ldr	r2, [pc, #116]	; (8006b44 <prvHeapInit+0xb0>)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006ad2:	4b1c      	ldr	r3, [pc, #112]	; (8006b44 <prvHeapInit+0xb0>)
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	68ba      	ldr	r2, [r7, #8]
 8006adc:	4413      	add	r3, r2
 8006ade:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006ae0:	2208      	movs	r2, #8
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	1a9b      	subs	r3, r3, r2
 8006ae6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	f023 0307 	bic.w	r3, r3, #7
 8006aee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	4a15      	ldr	r2, [pc, #84]	; (8006b48 <prvHeapInit+0xb4>)
 8006af4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006af6:	4b14      	ldr	r3, [pc, #80]	; (8006b48 <prvHeapInit+0xb4>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	2200      	movs	r2, #0
 8006afc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006afe:	4b12      	ldr	r3, [pc, #72]	; (8006b48 <prvHeapInit+0xb4>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	2200      	movs	r2, #0
 8006b04:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	68fa      	ldr	r2, [r7, #12]
 8006b0e:	1ad2      	subs	r2, r2, r3
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006b14:	4b0c      	ldr	r3, [pc, #48]	; (8006b48 <prvHeapInit+0xb4>)
 8006b16:	681a      	ldr	r2, [r3, #0]
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	685b      	ldr	r3, [r3, #4]
 8006b20:	4a0a      	ldr	r2, [pc, #40]	; (8006b4c <prvHeapInit+0xb8>)
 8006b22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	685b      	ldr	r3, [r3, #4]
 8006b28:	4a09      	ldr	r2, [pc, #36]	; (8006b50 <prvHeapInit+0xbc>)
 8006b2a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006b2c:	4b09      	ldr	r3, [pc, #36]	; (8006b54 <prvHeapInit+0xc0>)
 8006b2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006b32:	601a      	str	r2, [r3, #0]
}
 8006b34:	bf00      	nop
 8006b36:	3714      	adds	r7, #20
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3e:	4770      	bx	lr
 8006b40:	2000210c 	.word	0x2000210c
 8006b44:	20005d0c 	.word	0x20005d0c
 8006b48:	20005d14 	.word	0x20005d14
 8006b4c:	20005d1c 	.word	0x20005d1c
 8006b50:	20005d18 	.word	0x20005d18
 8006b54:	20005d28 	.word	0x20005d28

08006b58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006b58:	b480      	push	{r7}
 8006b5a:	b085      	sub	sp, #20
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006b60:	4b28      	ldr	r3, [pc, #160]	; (8006c04 <prvInsertBlockIntoFreeList+0xac>)
 8006b62:	60fb      	str	r3, [r7, #12]
 8006b64:	e002      	b.n	8006b6c <prvInsertBlockIntoFreeList+0x14>
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	60fb      	str	r3, [r7, #12]
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	687a      	ldr	r2, [r7, #4]
 8006b72:	429a      	cmp	r2, r3
 8006b74:	d8f7      	bhi.n	8006b66 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	685b      	ldr	r3, [r3, #4]
 8006b7e:	68ba      	ldr	r2, [r7, #8]
 8006b80:	4413      	add	r3, r2
 8006b82:	687a      	ldr	r2, [r7, #4]
 8006b84:	429a      	cmp	r2, r3
 8006b86:	d108      	bne.n	8006b9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	685a      	ldr	r2, [r3, #4]
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	685b      	ldr	r3, [r3, #4]
 8006b90:	441a      	add	r2, r3
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	685b      	ldr	r3, [r3, #4]
 8006ba2:	68ba      	ldr	r2, [r7, #8]
 8006ba4:	441a      	add	r2, r3
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	429a      	cmp	r2, r3
 8006bac:	d118      	bne.n	8006be0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681a      	ldr	r2, [r3, #0]
 8006bb2:	4b15      	ldr	r3, [pc, #84]	; (8006c08 <prvInsertBlockIntoFreeList+0xb0>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	429a      	cmp	r2, r3
 8006bb8:	d00d      	beq.n	8006bd6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	685a      	ldr	r2, [r3, #4]
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	685b      	ldr	r3, [r3, #4]
 8006bc4:	441a      	add	r2, r3
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	681a      	ldr	r2, [r3, #0]
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	601a      	str	r2, [r3, #0]
 8006bd4:	e008      	b.n	8006be8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006bd6:	4b0c      	ldr	r3, [pc, #48]	; (8006c08 <prvInsertBlockIntoFreeList+0xb0>)
 8006bd8:	681a      	ldr	r2, [r3, #0]
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	601a      	str	r2, [r3, #0]
 8006bde:	e003      	b.n	8006be8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681a      	ldr	r2, [r3, #0]
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006be8:	68fa      	ldr	r2, [r7, #12]
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	429a      	cmp	r2, r3
 8006bee:	d002      	beq.n	8006bf6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	687a      	ldr	r2, [r7, #4]
 8006bf4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006bf6:	bf00      	nop
 8006bf8:	3714      	adds	r7, #20
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c00:	4770      	bx	lr
 8006c02:	bf00      	nop
 8006c04:	20005d0c 	.word	0x20005d0c
 8006c08:	20005d14 	.word	0x20005d14

08006c0c <APP_timeoutTimerIRQHandler>:
/********************************************************************************/

#if 1 /* Software Timer IRQ Handlers */

void APP_timeoutTimerIRQHandler(void* param)
{
 8006c0c:	b480      	push	{r7}
 8006c0e:	b083      	sub	sp, #12
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]

}
 8006c14:	bf00      	nop
 8006c16:	370c      	adds	r7, #12
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1e:	4770      	bx	lr

08006c20 <APP_periodicTimerIRQHandler>:

void APP_periodicTimerIRQHandler(void* param)
{
 8006c20:	b480      	push	{r7}
 8006c22:	b083      	sub	sp, #12
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]

}
 8006c28:	bf00      	nop
 8006c2a:	370c      	adds	r7, #12
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c32:	4770      	bx	lr

08006c34 <Initilialise_App>:

#endif


void Initilialise_App(void)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b084      	sub	sp, #16
 8006c38:	af04      	add	r7, sp, #16
	/***************** Create Static Threads ******************************/

	/* Create Static TelemetryMAIN Thread */
#ifdef BSP_PROCESS_TELEMETRYMAIN

	xHandle.Process_TelemetryMAIN = xTaskCreateStatic
 8006c3a:	4b63      	ldr	r3, [pc, #396]	; (8006dc8 <Initilialise_App+0x194>)
 8006c3c:	9302      	str	r3, [sp, #8]
 8006c3e:	4b63      	ldr	r3, [pc, #396]	; (8006dcc <Initilialise_App+0x198>)
 8006c40:	9301      	str	r3, [sp, #4]
 8006c42:	2301      	movs	r3, #1
 8006c44:	9300      	str	r3, [sp, #0]
 8006c46:	2301      	movs	r3, #1
 8006c48:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006c4c:	4960      	ldr	r1, [pc, #384]	; (8006dd0 <Initilialise_App+0x19c>)
 8006c4e:	4861      	ldr	r0, [pc, #388]	; (8006dd4 <Initilialise_App+0x1a0>)
 8006c50:	f7fd ffa2 	bl	8004b98 <xTaskCreateStatic>
 8006c54:	4603      	mov	r3, r0
 8006c56:	4a60      	ldr	r2, [pc, #384]	; (8006dd8 <Initilialise_App+0x1a4>)
 8006c58:	6013      	str	r3, [r2, #0]
#endif


#ifdef BSP_PROCESS_FLASH
	/* Create Static Flash Task	*/
    xHandle.Process_Flash = xTaskCreateStatic(
 8006c5a:	4b60      	ldr	r3, [pc, #384]	; (8006ddc <Initilialise_App+0x1a8>)
 8006c5c:	9302      	str	r3, [sp, #8]
 8006c5e:	4b60      	ldr	r3, [pc, #384]	; (8006de0 <Initilialise_App+0x1ac>)
 8006c60:	9301      	str	r3, [sp, #4]
 8006c62:	2303      	movs	r3, #3
 8006c64:	9300      	str	r3, [sp, #0]
 8006c66:	2301      	movs	r3, #1
 8006c68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006c6c:	495d      	ldr	r1, [pc, #372]	; (8006de4 <Initilialise_App+0x1b0>)
 8006c6e:	485e      	ldr	r0, [pc, #376]	; (8006de8 <Initilialise_App+0x1b4>)
 8006c70:	f7fd ff92 	bl	8004b98 <xTaskCreateStatic>
 8006c74:	4603      	mov	r3, r0
 8006c76:	4a58      	ldr	r2, [pc, #352]	; (8006dd8 <Initilialise_App+0x1a4>)
 8006c78:	6053      	str	r3, [r2, #4]
#endif


#ifdef BSP_PROCESS_CAN
    /* Create Static can Task	*/
    xHandle.Process_CAN = xTaskCreateStatic(
 8006c7a:	4b5c      	ldr	r3, [pc, #368]	; (8006dec <Initilialise_App+0x1b8>)
 8006c7c:	9302      	str	r3, [sp, #8]
 8006c7e:	4b5c      	ldr	r3, [pc, #368]	; (8006df0 <Initilialise_App+0x1bc>)
 8006c80:	9301      	str	r3, [sp, #4]
 8006c82:	2302      	movs	r3, #2
 8006c84:	9300      	str	r3, [sp, #0]
 8006c86:	2301      	movs	r3, #1
 8006c88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006c8c:	4959      	ldr	r1, [pc, #356]	; (8006df4 <Initilialise_App+0x1c0>)
 8006c8e:	485a      	ldr	r0, [pc, #360]	; (8006df8 <Initilialise_App+0x1c4>)
 8006c90:	f7fd ff82 	bl	8004b98 <xTaskCreateStatic>
 8006c94:	4603      	mov	r3, r0
 8006c96:	4a50      	ldr	r2, [pc, #320]	; (8006dd8 <Initilialise_App+0x1a4>)
 8006c98:	6093      	str	r3, [r2, #8]
#endif


#ifdef BSP_PROCESS_RTC
    /* Create Static RTC Task	*/
    xHandle.Process_RTC = xTaskCreateStatic(
 8006c9a:	4b58      	ldr	r3, [pc, #352]	; (8006dfc <Initilialise_App+0x1c8>)
 8006c9c:	9302      	str	r3, [sp, #8]
 8006c9e:	4b58      	ldr	r3, [pc, #352]	; (8006e00 <Initilialise_App+0x1cc>)
 8006ca0:	9301      	str	r3, [sp, #4]
 8006ca2:	2304      	movs	r3, #4
 8006ca4:	9300      	str	r3, [sp, #0]
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006cac:	4955      	ldr	r1, [pc, #340]	; (8006e04 <Initilialise_App+0x1d0>)
 8006cae:	4856      	ldr	r0, [pc, #344]	; (8006e08 <Initilialise_App+0x1d4>)
 8006cb0:	f7fd ff72 	bl	8004b98 <xTaskCreateStatic>
 8006cb4:	4603      	mov	r3, r0
 8006cb6:	4a48      	ldr	r2, [pc, #288]	; (8006dd8 <Initilialise_App+0x1a4>)
 8006cb8:	60d3      	str	r3, [r2, #12]

#endif

#ifdef BSP_PROCESS_SDCARD
    /* Create Static sdcard Task	*/
    xHandle.Process_SDCARD = xTaskCreateStatic(
 8006cba:	4b54      	ldr	r3, [pc, #336]	; (8006e0c <Initilialise_App+0x1d8>)
 8006cbc:	9302      	str	r3, [sp, #8]
 8006cbe:	4b54      	ldr	r3, [pc, #336]	; (8006e10 <Initilialise_App+0x1dc>)
 8006cc0:	9301      	str	r3, [sp, #4]
 8006cc2:	2307      	movs	r3, #7
 8006cc4:	9300      	str	r3, [sp, #0]
 8006cc6:	2301      	movs	r3, #1
 8006cc8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006ccc:	4951      	ldr	r1, [pc, #324]	; (8006e14 <Initilialise_App+0x1e0>)
 8006cce:	4852      	ldr	r0, [pc, #328]	; (8006e18 <Initilialise_App+0x1e4>)
 8006cd0:	f7fd ff62 	bl	8004b98 <xTaskCreateStatic>
 8006cd4:	4603      	mov	r3, r0
 8006cd6:	4a40      	ldr	r2, [pc, #256]	; (8006dd8 <Initilialise_App+0x1a4>)
 8006cd8:	6113      	str	r3, [r2, #16]

#endif

#ifdef BSP_PROCESS_WIFI
    /* Create Static wifi Task	*/
    xHandle.Process_WIFI = xTaskCreateStatic(
 8006cda:	4b50      	ldr	r3, [pc, #320]	; (8006e1c <Initilialise_App+0x1e8>)
 8006cdc:	9302      	str	r3, [sp, #8]
 8006cde:	4b50      	ldr	r3, [pc, #320]	; (8006e20 <Initilialise_App+0x1ec>)
 8006ce0:	9301      	str	r3, [sp, #4]
 8006ce2:	2306      	movs	r3, #6
 8006ce4:	9300      	str	r3, [sp, #0]
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006cec:	494d      	ldr	r1, [pc, #308]	; (8006e24 <Initilialise_App+0x1f0>)
 8006cee:	484e      	ldr	r0, [pc, #312]	; (8006e28 <Initilialise_App+0x1f4>)
 8006cf0:	f7fd ff52 	bl	8004b98 <xTaskCreateStatic>
 8006cf4:	4603      	mov	r3, r0
 8006cf6:	4a38      	ldr	r2, [pc, #224]	; (8006dd8 <Initilialise_App+0x1a4>)
 8006cf8:	6153      	str	r3, [r2, #20]

#endif

#ifdef BSP_PROCESS_NEXTION
    /* Create Static nextion Task	*/
    xHandle.Process_NEXTION = xTaskCreateStatic(
 8006cfa:	4b4c      	ldr	r3, [pc, #304]	; (8006e2c <Initilialise_App+0x1f8>)
 8006cfc:	9302      	str	r3, [sp, #8]
 8006cfe:	4b4c      	ldr	r3, [pc, #304]	; (8006e30 <Initilialise_App+0x1fc>)
 8006d00:	9301      	str	r3, [sp, #4]
 8006d02:	2305      	movs	r3, #5
 8006d04:	9300      	str	r3, [sp, #0]
 8006d06:	2301      	movs	r3, #1
 8006d08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006d0c:	4949      	ldr	r1, [pc, #292]	; (8006e34 <Initilialise_App+0x200>)
 8006d0e:	484a      	ldr	r0, [pc, #296]	; (8006e38 <Initilialise_App+0x204>)
 8006d10:	f7fd ff42 	bl	8004b98 <xTaskCreateStatic>
 8006d14:	4603      	mov	r3, r0
 8006d16:	4a30      	ldr	r2, [pc, #192]	; (8006dd8 <Initilialise_App+0x1a4>)
 8006d18:	6193      	str	r3, [r2, #24]

/********************* Binary Semaphore Create **********************/

#ifdef BSP_PROCESS_FLASH
	/* Create Static Flash Semaphore	*/
	xSemHandle.Process_Flash 	 = xSemaphoreCreateBinaryStatic(&xSemaphore.Process_Flash		);
 8006d1a:	2303      	movs	r3, #3
 8006d1c:	9300      	str	r3, [sp, #0]
 8006d1e:	4b47      	ldr	r3, [pc, #284]	; (8006e3c <Initilialise_App+0x208>)
 8006d20:	2200      	movs	r2, #0
 8006d22:	2100      	movs	r1, #0
 8006d24:	2001      	movs	r0, #1
 8006d26:	f7fd f98f 	bl	8004048 <xQueueGenericCreateStatic>
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	4a44      	ldr	r2, [pc, #272]	; (8006e40 <Initilialise_App+0x20c>)
 8006d2e:	6013      	str	r3, [r2, #0]
#endif


#ifdef BSP_PROCESS_CAN
    /* Create Static can Semaphore	*/
	xSemHandle.Process_CAN 		  = xSemaphoreCreateBinaryStatic(&xSemaphore.Process_CAN		);
 8006d30:	2303      	movs	r3, #3
 8006d32:	9300      	str	r3, [sp, #0]
 8006d34:	4b43      	ldr	r3, [pc, #268]	; (8006e44 <Initilialise_App+0x210>)
 8006d36:	2200      	movs	r2, #0
 8006d38:	2100      	movs	r1, #0
 8006d3a:	2001      	movs	r0, #1
 8006d3c:	f7fd f984 	bl	8004048 <xQueueGenericCreateStatic>
 8006d40:	4603      	mov	r3, r0
 8006d42:	4a3f      	ldr	r2, [pc, #252]	; (8006e40 <Initilialise_App+0x20c>)
 8006d44:	6053      	str	r3, [r2, #4]
#endif


#ifdef BSP_PROCESS_RTC
    /* Create Static RTC Semaphore	*/
	xSemHandle.Process_RTC 		  = xSemaphoreCreateBinaryStatic(&xSemaphore.Process_RTC		);
 8006d46:	2303      	movs	r3, #3
 8006d48:	9300      	str	r3, [sp, #0]
 8006d4a:	4b3f      	ldr	r3, [pc, #252]	; (8006e48 <Initilialise_App+0x214>)
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	2100      	movs	r1, #0
 8006d50:	2001      	movs	r0, #1
 8006d52:	f7fd f979 	bl	8004048 <xQueueGenericCreateStatic>
 8006d56:	4603      	mov	r3, r0
 8006d58:	4a39      	ldr	r2, [pc, #228]	; (8006e40 <Initilialise_App+0x20c>)
 8006d5a:	6093      	str	r3, [r2, #8]
#endif

#ifdef BSP_PROCESS_SDCARD
    /* Create Static sdcard Semaphore	*/
	xSemHandle.Process_SDCARD 	  = xSemaphoreCreateBinaryStatic(&xSemaphore.Process_SDCARD		);
 8006d5c:	2303      	movs	r3, #3
 8006d5e:	9300      	str	r3, [sp, #0]
 8006d60:	4b3a      	ldr	r3, [pc, #232]	; (8006e4c <Initilialise_App+0x218>)
 8006d62:	2200      	movs	r2, #0
 8006d64:	2100      	movs	r1, #0
 8006d66:	2001      	movs	r0, #1
 8006d68:	f7fd f96e 	bl	8004048 <xQueueGenericCreateStatic>
 8006d6c:	4603      	mov	r3, r0
 8006d6e:	4a34      	ldr	r2, [pc, #208]	; (8006e40 <Initilialise_App+0x20c>)
 8006d70:	60d3      	str	r3, [r2, #12]
#endif

#ifdef BSP_PROCESS_WIFI
    /* Create Static wifi Semaphore	*/
	xSemHandle.Process_WIFI 	  = xSemaphoreCreateBinaryStatic(&xSemaphore.Process_WIFI		);
 8006d72:	2303      	movs	r3, #3
 8006d74:	9300      	str	r3, [sp, #0]
 8006d76:	4b36      	ldr	r3, [pc, #216]	; (8006e50 <Initilialise_App+0x21c>)
 8006d78:	2200      	movs	r2, #0
 8006d7a:	2100      	movs	r1, #0
 8006d7c:	2001      	movs	r0, #1
 8006d7e:	f7fd f963 	bl	8004048 <xQueueGenericCreateStatic>
 8006d82:	4603      	mov	r3, r0
 8006d84:	4a2e      	ldr	r2, [pc, #184]	; (8006e40 <Initilialise_App+0x20c>)
 8006d86:	6113      	str	r3, [r2, #16]
#endif

#ifdef BSP_PROCESS_NEXTION
    /* Create Static nextion Semaphore	*/
	xSemHandle.Process_NEXTION 	  = xSemaphoreCreateBinaryStatic(&xSemaphore.Process_NEXTION	);
 8006d88:	2303      	movs	r3, #3
 8006d8a:	9300      	str	r3, [sp, #0]
 8006d8c:	4b31      	ldr	r3, [pc, #196]	; (8006e54 <Initilialise_App+0x220>)
 8006d8e:	2200      	movs	r2, #0
 8006d90:	2100      	movs	r1, #0
 8006d92:	2001      	movs	r0, #1
 8006d94:	f7fd f958 	bl	8004048 <xQueueGenericCreateStatic>
 8006d98:	4603      	mov	r3, r0
 8006d9a:	4a29      	ldr	r2, [pc, #164]	; (8006e40 <Initilialise_App+0x20c>)
 8006d9c:	6153      	str	r3, [r2, #20]
#endif

	/************************ Create  Software Timers ***********************************/

    xTimerID.periodic = 	osTimerNew( APP_periodicTimerIRQHandler			,
 8006d9e:	4b2e      	ldr	r3, [pc, #184]	; (8006e58 <Initilialise_App+0x224>)
 8006da0:	2200      	movs	r2, #0
 8006da2:	2101      	movs	r1, #1
 8006da4:	482d      	ldr	r0, [pc, #180]	; (8006e5c <Initilialise_App+0x228>)
 8006da6:	f7fc ff83 	bl	8003cb0 <osTimerNew>
 8006daa:	4603      	mov	r3, r0
 8006dac:	4a2c      	ldr	r2, [pc, #176]	; (8006e60 <Initilialise_App+0x22c>)
 8006dae:	6013      	str	r3, [r2, #0]
    									osTimerPeriodic						,
										NULL								,
										&APP_periodic_attributes			);

    xTimerID.timeout  = 	osTimerNew( APP_timeoutTimerIRQHandler			,
 8006db0:	4b2c      	ldr	r3, [pc, #176]	; (8006e64 <Initilialise_App+0x230>)
 8006db2:	2200      	movs	r2, #0
 8006db4:	2100      	movs	r1, #0
 8006db6:	482c      	ldr	r0, [pc, #176]	; (8006e68 <Initilialise_App+0x234>)
 8006db8:	f7fc ff7a 	bl	8003cb0 <osTimerNew>
 8006dbc:	4603      	mov	r3, r0
 8006dbe:	4a28      	ldr	r2, [pc, #160]	; (8006e60 <Initilialise_App+0x22c>)
 8006dc0:	6053      	str	r3, [r2, #4]

#ifdef DEBUG_MODE
    HAL_UART_Receive_DMA(&huart1, (U8 *)&__GL.DEBUG_Buffer[0], (U8)DEBUG_MSG_SIZE);
#endif

}
 8006dc2:	bf00      	nop
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	bd80      	pop	{r7, pc}
 8006dc8:	20005d2c 	.word	0x20005d2c
 8006dcc:	20005fb0 	.word	0x20005fb0
 8006dd0:	080077c4 	.word	0x080077c4
 8006dd4:	08006e7d 	.word	0x08006e7d
 8006dd8:	2000a3b0 	.word	0x2000a3b0
 8006ddc:	20005d88 	.word	0x20005d88
 8006de0:	20006fb0 	.word	0x20006fb0
 8006de4:	080077e0 	.word	0x080077e0
 8006de8:	08006ea9 	.word	0x08006ea9
 8006dec:	20005de4 	.word	0x20005de4
 8006df0:	200077b0 	.word	0x200077b0
 8006df4:	080077f4 	.word	0x080077f4
 8006df8:	08006efd 	.word	0x08006efd
 8006dfc:	20005e40 	.word	0x20005e40
 8006e00:	20007fb0 	.word	0x20007fb0
 8006e04:	08007808 	.word	0x08007808
 8006e08:	08006f51 	.word	0x08006f51
 8006e0c:	20005e9c 	.word	0x20005e9c
 8006e10:	200083b0 	.word	0x200083b0
 8006e14:	0800781c 	.word	0x0800781c
 8006e18:	08006fa5 	.word	0x08006fa5
 8006e1c:	20005ef8 	.word	0x20005ef8
 8006e20:	20008bb0 	.word	0x20008bb0
 8006e24:	08007830 	.word	0x08007830
 8006e28:	08006ff9 	.word	0x08006ff9
 8006e2c:	20005f54 	.word	0x20005f54
 8006e30:	20009bb0 	.word	0x20009bb0
 8006e34:	08007844 	.word	0x08007844
 8006e38:	0800704d 	.word	0x0800704d
 8006e3c:	2000a3cc 	.word	0x2000a3cc
 8006e40:	2000a5ac 	.word	0x2000a5ac
 8006e44:	2000a41c 	.word	0x2000a41c
 8006e48:	2000a46c 	.word	0x2000a46c
 8006e4c:	2000a4bc 	.word	0x2000a4bc
 8006e50:	2000a50c 	.word	0x2000a50c
 8006e54:	2000a55c 	.word	0x2000a55c
 8006e58:	08007898 	.word	0x08007898
 8006e5c:	08006c21 	.word	0x08006c21
 8006e60:	2000a5dc 	.word	0x2000a5dc
 8006e64:	080078a8 	.word	0x080078a8
 8006e68:	08006c0d 	.word	0x08006c0d

08006e6c <MAIN_App>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void MAIN_App(void)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	af00      	add	r7, sp, #0
	/* Create Threads, Semph, SW Timers */
    Initilialise_App();
 8006e70:	f7ff fee0 	bl	8006c34 <Initilialise_App>
    /* Start Scheduler */
    vTaskStartScheduler();
 8006e74:	f7fe f866 	bl	8004f44 <vTaskStartScheduler>

}
 8006e78:	bf00      	nop
 8006e7a:	bd80      	pop	{r7, pc}

08006e7c <Process_TelemetryMAIN_TaskHandler>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void Process_TelemetryMAIN_TaskHandler(void* param)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b082      	sub	sp, #8
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]

	TelemetryMain_StartUP();
 8006e84:	f000 fbf2 	bl	800766c <TelemetryMain_StartUP>
#ifdef DEBUG_THREAD
        DEBUG_printThread((char *)PROCESS_TELEMETRYMAIN_THREADNAME, "STARTED");
#endif
        // [[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[

        TelemetyMain_MAIN(); /* Main Application */
 8006e88:	f000 fc06 	bl	8007698 <TelemetyMain_MAIN>

        Process_Can_Run();
 8006e8c:	f000 f93e 	bl	800710c <Process_Can_Run>

        Process_Flash_Run();
 8006e90:	f000 f906 	bl	80070a0 <Process_Flash_Run>

        Process_NEXTION_Run();
 8006e94:	f000 f9dc 	bl	8007250 <Process_NEXTION_Run>

        Process_SDCARD_Run();
 8006e98:	f000 f96e 	bl	8007178 <Process_SDCARD_Run>

        Process_WIFI_Run();
 8006e9c:	f000 f9a2 	bl	80071e4 <Process_WIFI_Run>


		vTaskDelay(10);  /* Main Thread Checkout every 10ms tick */
 8006ea0:	200a      	movs	r0, #10
 8006ea2:	f7fe f81b 	bl	8004edc <vTaskDelay>
        TelemetyMain_MAIN(); /* Main Application */
 8006ea6:	e7ef      	b.n	8006e88 <Process_TelemetryMAIN_TaskHandler+0xc>

08006ea8 <Process_Flash_TaskHandler>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void Process_Flash_TaskHandler(void* param)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b084      	sub	sp, #16
 8006eac:	af02      	add	r7, sp, #8
 8006eae:	6078      	str	r0, [r7, #4]

	ModuleFlash_StartUP();
 8006eb0:	f000 fa60 	bl	8007374 <ModuleFlash_StartUP>

	while(1)
	{

	/* Semaphore Wait */
	xSemResult.Process_Flash = xQueueSemaphoreTake(xSemHandle.Process_Flash, osWaitForever);
 8006eb4:	4b0e      	ldr	r3, [pc, #56]	; (8006ef0 <Process_Flash_TaskHandler+0x48>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f04f 31ff 	mov.w	r1, #4294967295
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	f7fd fbd9 	bl	8004674 <xQueueSemaphoreTake>
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	4a0b      	ldr	r2, [pc, #44]	; (8006ef4 <Process_Flash_TaskHandler+0x4c>)
 8006ec6:	6013      	str	r3, [r2, #0]
	if (pdTRUE == xSemResult.Process_Flash)
 8006ec8:	4b0a      	ldr	r3, [pc, #40]	; (8006ef4 <Process_Flash_TaskHandler+0x4c>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	2b01      	cmp	r3, #1
 8006ece:	d102      	bne.n	8006ed6 <Process_Flash_TaskHandler+0x2e>
#ifdef DEBUG_THREAD
        DEBUG_printThread((char *)PROCESS_FLASH_THREADNAME, "STARTED");
#endif
        // [[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[

        ModuleFlash_MAIN(); /* Main Application */
 8006ed0:	f000 fa66 	bl	80073a0 <ModuleFlash_MAIN>
 8006ed4:	e7ee      	b.n	8006eb4 <Process_Flash_TaskHandler+0xc>


	else
	{
		/* Semaphore fail / Create Again                                                             */
		xSemHandle.Process_Flash = xSemaphoreCreateBinaryStatic(&xSemaphore.Process_Flash);
 8006ed6:	2303      	movs	r3, #3
 8006ed8:	9300      	str	r3, [sp, #0]
 8006eda:	4b07      	ldr	r3, [pc, #28]	; (8006ef8 <Process_Flash_TaskHandler+0x50>)
 8006edc:	2200      	movs	r2, #0
 8006ede:	2100      	movs	r1, #0
 8006ee0:	2001      	movs	r0, #1
 8006ee2:	f7fd f8b1 	bl	8004048 <xQueueGenericCreateStatic>
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	4a01      	ldr	r2, [pc, #4]	; (8006ef0 <Process_Flash_TaskHandler+0x48>)
 8006eea:	6013      	str	r3, [r2, #0]
	xSemResult.Process_Flash = xQueueSemaphoreTake(xSemHandle.Process_Flash, osWaitForever);
 8006eec:	e7e2      	b.n	8006eb4 <Process_Flash_TaskHandler+0xc>
 8006eee:	bf00      	nop
 8006ef0:	2000a5ac 	.word	0x2000a5ac
 8006ef4:	2000a5c4 	.word	0x2000a5c4
 8006ef8:	2000a3cc 	.word	0x2000a3cc

08006efc <Process_CAN_TaskHandler>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void Process_CAN_TaskHandler(void* param)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b084      	sub	sp, #16
 8006f00:	af02      	add	r7, sp, #8
 8006f02:	6078      	str	r0, [r7, #4]
	ModuleCAN_StartUP();
 8006f04:	f000 f9e8 	bl	80072d8 <ModuleCAN_StartUP>

while(1)
    {
	/* Semaphore Wait */
	xSemResult.Process_CAN = xQueueSemaphoreTake(xSemHandle.Process_CAN, osWaitForever);
 8006f08:	4b0e      	ldr	r3, [pc, #56]	; (8006f44 <Process_CAN_TaskHandler+0x48>)
 8006f0a:	685b      	ldr	r3, [r3, #4]
 8006f0c:	f04f 31ff 	mov.w	r1, #4294967295
 8006f10:	4618      	mov	r0, r3
 8006f12:	f7fd fbaf 	bl	8004674 <xQueueSemaphoreTake>
 8006f16:	4603      	mov	r3, r0
 8006f18:	4a0b      	ldr	r2, [pc, #44]	; (8006f48 <Process_CAN_TaskHandler+0x4c>)
 8006f1a:	6053      	str	r3, [r2, #4]
	if (pdTRUE == xSemResult.Process_CAN)
 8006f1c:	4b0a      	ldr	r3, [pc, #40]	; (8006f48 <Process_CAN_TaskHandler+0x4c>)
 8006f1e:	685b      	ldr	r3, [r3, #4]
 8006f20:	2b01      	cmp	r3, #1
 8006f22:	d102      	bne.n	8006f2a <Process_CAN_TaskHandler+0x2e>
#ifdef DEBUG_THREAD
        DEBUG_printThread((char *)PROCESS_CAN_THREADNAME, "STARTED");
#endif
        // [[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[

        ModuleCAN_MAIN(); /* Main Application */
 8006f24:	f000 f9ee 	bl	8007304 <ModuleCAN_MAIN>
 8006f28:	e7ee      	b.n	8006f08 <Process_CAN_TaskHandler+0xc>

	}
	else
	{
		/* Semaphore fail / Create Again                                                             */
		xSemHandle.Process_CAN = xSemaphoreCreateBinaryStatic(&xSemaphore.Process_CAN);
 8006f2a:	2303      	movs	r3, #3
 8006f2c:	9300      	str	r3, [sp, #0]
 8006f2e:	4b07      	ldr	r3, [pc, #28]	; (8006f4c <Process_CAN_TaskHandler+0x50>)
 8006f30:	2200      	movs	r2, #0
 8006f32:	2100      	movs	r1, #0
 8006f34:	2001      	movs	r0, #1
 8006f36:	f7fd f887 	bl	8004048 <xQueueGenericCreateStatic>
 8006f3a:	4603      	mov	r3, r0
 8006f3c:	4a01      	ldr	r2, [pc, #4]	; (8006f44 <Process_CAN_TaskHandler+0x48>)
 8006f3e:	6053      	str	r3, [r2, #4]
	xSemResult.Process_CAN = xQueueSemaphoreTake(xSemHandle.Process_CAN, osWaitForever);
 8006f40:	e7e2      	b.n	8006f08 <Process_CAN_TaskHandler+0xc>
 8006f42:	bf00      	nop
 8006f44:	2000a5ac 	.word	0x2000a5ac
 8006f48:	2000a5c4 	.word	0x2000a5c4
 8006f4c:	2000a41c 	.word	0x2000a41c

08006f50 <Process_RTC_TaskHandler>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void Process_RTC_TaskHandler(void* param)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b084      	sub	sp, #16
 8006f54:	af02      	add	r7, sp, #8
 8006f56:	6078      	str	r0, [r7, #4]
	ModuleRTC_StartUP();
 8006f58:	f000 faa4 	bl	80074a4 <ModuleRTC_StartUP>

	while(1)
	{

	/* Semaphore Wait */
	xSemResult.Process_RTC = xQueueSemaphoreTake(xSemHandle.Process_RTC, osWaitForever);
 8006f5c:	4b0e      	ldr	r3, [pc, #56]	; (8006f98 <Process_RTC_TaskHandler+0x48>)
 8006f5e:	689b      	ldr	r3, [r3, #8]
 8006f60:	f04f 31ff 	mov.w	r1, #4294967295
 8006f64:	4618      	mov	r0, r3
 8006f66:	f7fd fb85 	bl	8004674 <xQueueSemaphoreTake>
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	4a0b      	ldr	r2, [pc, #44]	; (8006f9c <Process_RTC_TaskHandler+0x4c>)
 8006f6e:	6093      	str	r3, [r2, #8]
	if (pdTRUE == xSemResult.Process_RTC)
 8006f70:	4b0a      	ldr	r3, [pc, #40]	; (8006f9c <Process_RTC_TaskHandler+0x4c>)
 8006f72:	689b      	ldr	r3, [r3, #8]
 8006f74:	2b01      	cmp	r3, #1
 8006f76:	d102      	bne.n	8006f7e <Process_RTC_TaskHandler+0x2e>
#ifdef DEBUG_THREAD
        DEBUG_printThread((char *)PROCESS_RTC_THREADNAME, "STARTED");
#endif
        // [[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[

        ModuleRTC_MAIN(); /* Main Application */
 8006f78:	f000 faaa 	bl	80074d0 <ModuleRTC_MAIN>
 8006f7c:	e7ee      	b.n	8006f5c <Process_RTC_TaskHandler+0xc>


	else
	{
		/* Semaphore fail / Create Again  */
		xSemHandle.Process_RTC = xSemaphoreCreateBinaryStatic(&xSemaphore.Process_RTC);
 8006f7e:	2303      	movs	r3, #3
 8006f80:	9300      	str	r3, [sp, #0]
 8006f82:	4b07      	ldr	r3, [pc, #28]	; (8006fa0 <Process_RTC_TaskHandler+0x50>)
 8006f84:	2200      	movs	r2, #0
 8006f86:	2100      	movs	r1, #0
 8006f88:	2001      	movs	r0, #1
 8006f8a:	f7fd f85d 	bl	8004048 <xQueueGenericCreateStatic>
 8006f8e:	4603      	mov	r3, r0
 8006f90:	4a01      	ldr	r2, [pc, #4]	; (8006f98 <Process_RTC_TaskHandler+0x48>)
 8006f92:	6093      	str	r3, [r2, #8]
	xSemResult.Process_RTC = xQueueSemaphoreTake(xSemHandle.Process_RTC, osWaitForever);
 8006f94:	e7e2      	b.n	8006f5c <Process_RTC_TaskHandler+0xc>
 8006f96:	bf00      	nop
 8006f98:	2000a5ac 	.word	0x2000a5ac
 8006f9c:	2000a5c4 	.word	0x2000a5c4
 8006fa0:	2000a46c 	.word	0x2000a46c

08006fa4 <Process_SDCARD_TaskHandler>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void Process_SDCARD_TaskHandler(void* param)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b084      	sub	sp, #16
 8006fa8:	af02      	add	r7, sp, #8
 8006faa:	6078      	str	r0, [r7, #4]
	ModuleSDCard_StartUP();
 8006fac:	f000 fac6 	bl	800753c <ModuleSDCard_StartUP>

	while(1)
	{

	/* Semaphore Wait */
	xSemResult.Process_SDCARD = xQueueSemaphoreTake(xSemHandle.Process_SDCARD, osWaitForever);
 8006fb0:	4b0e      	ldr	r3, [pc, #56]	; (8006fec <Process_SDCARD_TaskHandler+0x48>)
 8006fb2:	68db      	ldr	r3, [r3, #12]
 8006fb4:	f04f 31ff 	mov.w	r1, #4294967295
 8006fb8:	4618      	mov	r0, r3
 8006fba:	f7fd fb5b 	bl	8004674 <xQueueSemaphoreTake>
 8006fbe:	4603      	mov	r3, r0
 8006fc0:	4a0b      	ldr	r2, [pc, #44]	; (8006ff0 <Process_SDCARD_TaskHandler+0x4c>)
 8006fc2:	60d3      	str	r3, [r2, #12]
	if (pdTRUE == xSemResult.Process_SDCARD)
 8006fc4:	4b0a      	ldr	r3, [pc, #40]	; (8006ff0 <Process_SDCARD_TaskHandler+0x4c>)
 8006fc6:	68db      	ldr	r3, [r3, #12]
 8006fc8:	2b01      	cmp	r3, #1
 8006fca:	d102      	bne.n	8006fd2 <Process_SDCARD_TaskHandler+0x2e>
#ifdef DEBUG_THREAD
        DEBUG_printThread((char *)PROCESS_SDCARD_THREADNAME, "STARTED");
#endif
        // [[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[

        ModuleSDCard_MAIN(); /* Main Application */
 8006fcc:	f000 facc 	bl	8007568 <ModuleSDCard_MAIN>
 8006fd0:	e7ee      	b.n	8006fb0 <Process_SDCARD_TaskHandler+0xc>


	else
	{
		/* Semaphore fail / Create Again  */
		xSemHandle.Process_SDCARD = xSemaphoreCreateBinaryStatic(&xSemaphore.Process_SDCARD);
 8006fd2:	2303      	movs	r3, #3
 8006fd4:	9300      	str	r3, [sp, #0]
 8006fd6:	4b07      	ldr	r3, [pc, #28]	; (8006ff4 <Process_SDCARD_TaskHandler+0x50>)
 8006fd8:	2200      	movs	r2, #0
 8006fda:	2100      	movs	r1, #0
 8006fdc:	2001      	movs	r0, #1
 8006fde:	f7fd f833 	bl	8004048 <xQueueGenericCreateStatic>
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	4a01      	ldr	r2, [pc, #4]	; (8006fec <Process_SDCARD_TaskHandler+0x48>)
 8006fe6:	60d3      	str	r3, [r2, #12]
	xSemResult.Process_SDCARD = xQueueSemaphoreTake(xSemHandle.Process_SDCARD, osWaitForever);
 8006fe8:	e7e2      	b.n	8006fb0 <Process_SDCARD_TaskHandler+0xc>
 8006fea:	bf00      	nop
 8006fec:	2000a5ac 	.word	0x2000a5ac
 8006ff0:	2000a5c4 	.word	0x2000a5c4
 8006ff4:	2000a4bc 	.word	0x2000a4bc

08006ff8 <Process_WIFI_TaskHandler>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void Process_WIFI_TaskHandler(void* param)
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b084      	sub	sp, #16
 8006ffc:	af02      	add	r7, sp, #8
 8006ffe:	6078      	str	r0, [r7, #4]
	ModuleWIFI_StartUP();
 8007000:	f000 fae8 	bl	80075d4 <ModuleWIFI_StartUP>

	while(1)
	{

	/* Semaphore Wait */
	xSemResult.Process_WIFI = xQueueSemaphoreTake(xSemHandle.Process_WIFI, osWaitForever);
 8007004:	4b0e      	ldr	r3, [pc, #56]	; (8007040 <Process_WIFI_TaskHandler+0x48>)
 8007006:	691b      	ldr	r3, [r3, #16]
 8007008:	f04f 31ff 	mov.w	r1, #4294967295
 800700c:	4618      	mov	r0, r3
 800700e:	f7fd fb31 	bl	8004674 <xQueueSemaphoreTake>
 8007012:	4603      	mov	r3, r0
 8007014:	4a0b      	ldr	r2, [pc, #44]	; (8007044 <Process_WIFI_TaskHandler+0x4c>)
 8007016:	6113      	str	r3, [r2, #16]
	if (pdTRUE == xSemResult.Process_WIFI)
 8007018:	4b0a      	ldr	r3, [pc, #40]	; (8007044 <Process_WIFI_TaskHandler+0x4c>)
 800701a:	691b      	ldr	r3, [r3, #16]
 800701c:	2b01      	cmp	r3, #1
 800701e:	d102      	bne.n	8007026 <Process_WIFI_TaskHandler+0x2e>
#ifdef DEBUG_THREAD
        DEBUG_printThread((char *)PROCESS_WIFI_THREADNAME, "STARTED");
#endif
        // [[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[

        ModuleWIFI_MAIN(); /* Main Application */
 8007020:	f000 faee 	bl	8007600 <ModuleWIFI_MAIN>
 8007024:	e7ee      	b.n	8007004 <Process_WIFI_TaskHandler+0xc>


	else
	{
		/* Semaphore fail / Create Again  */
		xSemHandle.Process_WIFI = xSemaphoreCreateBinaryStatic(&xSemaphore.Process_WIFI);
 8007026:	2303      	movs	r3, #3
 8007028:	9300      	str	r3, [sp, #0]
 800702a:	4b07      	ldr	r3, [pc, #28]	; (8007048 <Process_WIFI_TaskHandler+0x50>)
 800702c:	2200      	movs	r2, #0
 800702e:	2100      	movs	r1, #0
 8007030:	2001      	movs	r0, #1
 8007032:	f7fd f809 	bl	8004048 <xQueueGenericCreateStatic>
 8007036:	4603      	mov	r3, r0
 8007038:	4a01      	ldr	r2, [pc, #4]	; (8007040 <Process_WIFI_TaskHandler+0x48>)
 800703a:	6113      	str	r3, [r2, #16]
	xSemResult.Process_WIFI = xQueueSemaphoreTake(xSemHandle.Process_WIFI, osWaitForever);
 800703c:	e7e2      	b.n	8007004 <Process_WIFI_TaskHandler+0xc>
 800703e:	bf00      	nop
 8007040:	2000a5ac 	.word	0x2000a5ac
 8007044:	2000a5c4 	.word	0x2000a5c4
 8007048:	2000a50c 	.word	0x2000a50c

0800704c <Process_NEXTION_TaskHandler>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void Process_NEXTION_TaskHandler(void* param)
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b084      	sub	sp, #16
 8007050:	af02      	add	r7, sp, #8
 8007052:	6078      	str	r0, [r7, #4]
	ModuleNEXTION_StartUP();
 8007054:	f000 f9d9 	bl	800740a <ModuleNEXTION_StartUP>


	while(1)
	{
	/* Semaphore Wait */
	xSemResult.Process_NEXTION = xQueueSemaphoreTake(xSemHandle.Process_NEXTION, osWaitForever);
 8007058:	4b0e      	ldr	r3, [pc, #56]	; (8007094 <Process_NEXTION_TaskHandler+0x48>)
 800705a:	695b      	ldr	r3, [r3, #20]
 800705c:	f04f 31ff 	mov.w	r1, #4294967295
 8007060:	4618      	mov	r0, r3
 8007062:	f7fd fb07 	bl	8004674 <xQueueSemaphoreTake>
 8007066:	4603      	mov	r3, r0
 8007068:	4a0b      	ldr	r2, [pc, #44]	; (8007098 <Process_NEXTION_TaskHandler+0x4c>)
 800706a:	6153      	str	r3, [r2, #20]
	if (pdTRUE == xSemResult.Process_NEXTION)
 800706c:	4b0a      	ldr	r3, [pc, #40]	; (8007098 <Process_NEXTION_TaskHandler+0x4c>)
 800706e:	695b      	ldr	r3, [r3, #20]
 8007070:	2b01      	cmp	r3, #1
 8007072:	d102      	bne.n	800707a <Process_NEXTION_TaskHandler+0x2e>
#ifdef DEBUG_THREAD
        DEBUG_printThread((char *)PROCESS_NEXTION_THREADNAME, "STARTED");
#endif
        // [[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[

        ModuleNEXTION_MAIN(); /* Main Application */
 8007074:	f000 f9e0 	bl	8007438 <ModuleNEXTION_MAIN>
 8007078:	e7ee      	b.n	8007058 <Process_NEXTION_TaskHandler+0xc>
		}

	else
	{
		/* Semaphore fail / Create Again  */
		xSemHandle.Process_NEXTION = xSemaphoreCreateBinaryStatic(&xSemaphore.Process_NEXTION);
 800707a:	2303      	movs	r3, #3
 800707c:	9300      	str	r3, [sp, #0]
 800707e:	4b07      	ldr	r3, [pc, #28]	; (800709c <Process_NEXTION_TaskHandler+0x50>)
 8007080:	2200      	movs	r2, #0
 8007082:	2100      	movs	r1, #0
 8007084:	2001      	movs	r0, #1
 8007086:	f7fc ffdf 	bl	8004048 <xQueueGenericCreateStatic>
 800708a:	4603      	mov	r3, r0
 800708c:	4a01      	ldr	r2, [pc, #4]	; (8007094 <Process_NEXTION_TaskHandler+0x48>)
 800708e:	6153      	str	r3, [r2, #20]
	xSemResult.Process_NEXTION = xQueueSemaphoreTake(xSemHandle.Process_NEXTION, osWaitForever);
 8007090:	e7e2      	b.n	8007058 <Process_NEXTION_TaskHandler+0xc>
 8007092:	bf00      	nop
 8007094:	2000a5ac 	.word	0x2000a5ac
 8007098:	2000a5c4 	.word	0x2000a5c4
 800709c:	2000a55c 	.word	0x2000a55c

080070a0 <Process_Flash_Run>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void     Process_Flash_Run(void)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b082      	sub	sp, #8
 80070a4:	af02      	add	r7, sp, #8

#ifdef DEBUG_THREAD
    DEBUG_printThread((char *)PROCESS_FLASH_SEMAPHORENAME, "RELEASED");
#endif

    xSemResult.Process_Flash = xSemaphoreGive(xSemHandle.Process_Flash);
 80070a6:	4b15      	ldr	r3, [pc, #84]	; (80070fc <Process_Flash_Run+0x5c>)
 80070a8:	6818      	ldr	r0, [r3, #0]
 80070aa:	2300      	movs	r3, #0
 80070ac:	2200      	movs	r2, #0
 80070ae:	2100      	movs	r1, #0
 80070b0:	f7fd f866 	bl	8004180 <xQueueGenericSend>
 80070b4:	4603      	mov	r3, r0
 80070b6:	4a12      	ldr	r2, [pc, #72]	; (8007100 <Process_Flash_Run+0x60>)
 80070b8:	6013      	str	r3, [r2, #0]

    if (pdPASS == xSemResult.Process_Flash)
 80070ba:	4b11      	ldr	r3, [pc, #68]	; (8007100 <Process_Flash_Run+0x60>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	2b01      	cmp	r3, #1
 80070c0:	d107      	bne.n	80070d2 <Process_Flash_Run+0x32>
    {
        /* Bootloader Semaphore is Passed */
    	__GL.itc.flag.flash = TRUE;
 80070c2:	4a10      	ldr	r2, [pc, #64]	; (8007104 <Process_Flash_Run+0x64>)
 80070c4:	f892 3b00 	ldrb.w	r3, [r2, #2816]	; 0xb00
 80070c8:	f043 0301 	orr.w	r3, r3, #1
 80070cc:	f882 3b00 	strb.w	r3, [r2, #2816]	; 0xb00
#endif

        xSemHandle.Process_Flash = xSemaphoreCreateBinaryStatic(&xSemaphore.Process_Flash);
    }
#endif
}
 80070d0:	e011      	b.n	80070f6 <Process_Flash_Run+0x56>
    	__GL.itc.flag.flash = FALSE;
 80070d2:	4a0c      	ldr	r2, [pc, #48]	; (8007104 <Process_Flash_Run+0x64>)
 80070d4:	f892 3b00 	ldrb.w	r3, [r2, #2816]	; 0xb00
 80070d8:	f36f 0300 	bfc	r3, #0, #1
 80070dc:	f882 3b00 	strb.w	r3, [r2, #2816]	; 0xb00
        xSemHandle.Process_Flash = xSemaphoreCreateBinaryStatic(&xSemaphore.Process_Flash);
 80070e0:	2303      	movs	r3, #3
 80070e2:	9300      	str	r3, [sp, #0]
 80070e4:	4b08      	ldr	r3, [pc, #32]	; (8007108 <Process_Flash_Run+0x68>)
 80070e6:	2200      	movs	r2, #0
 80070e8:	2100      	movs	r1, #0
 80070ea:	2001      	movs	r0, #1
 80070ec:	f7fc ffac 	bl	8004048 <xQueueGenericCreateStatic>
 80070f0:	4603      	mov	r3, r0
 80070f2:	4a02      	ldr	r2, [pc, #8]	; (80070fc <Process_Flash_Run+0x5c>)
 80070f4:	6013      	str	r3, [r2, #0]
}
 80070f6:	bf00      	nop
 80070f8:	46bd      	mov	sp, r7
 80070fa:	bd80      	pop	{r7, pc}
 80070fc:	2000a5ac 	.word	0x2000a5ac
 8007100:	2000a5c4 	.word	0x2000a5c4
 8007104:	20000010 	.word	0x20000010
 8007108:	2000a3cc 	.word	0x2000a3cc

0800710c <Process_Can_Run>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void     Process_Can_Run(void)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b082      	sub	sp, #8
 8007110:	af02      	add	r7, sp, #8

#ifdef DEBUG_THREAD
    DEBUG_printThread((char *)PROCESS_CAN_SEMAPHORENAME, "RELEASED");
#endif

    xSemResult.Process_CAN = xSemaphoreGive(xSemHandle.Process_CAN);
 8007112:	4b15      	ldr	r3, [pc, #84]	; (8007168 <Process_Can_Run+0x5c>)
 8007114:	6858      	ldr	r0, [r3, #4]
 8007116:	2300      	movs	r3, #0
 8007118:	2200      	movs	r2, #0
 800711a:	2100      	movs	r1, #0
 800711c:	f7fd f830 	bl	8004180 <xQueueGenericSend>
 8007120:	4603      	mov	r3, r0
 8007122:	4a12      	ldr	r2, [pc, #72]	; (800716c <Process_Can_Run+0x60>)
 8007124:	6053      	str	r3, [r2, #4]

    if (pdPASS == xSemResult.Process_CAN)
 8007126:	4b11      	ldr	r3, [pc, #68]	; (800716c <Process_Can_Run+0x60>)
 8007128:	685b      	ldr	r3, [r3, #4]
 800712a:	2b01      	cmp	r3, #1
 800712c:	d107      	bne.n	800713e <Process_Can_Run+0x32>
    {
        /* Bootloader Semaphore is Passed */
    	__GL.itc.flag.can = TRUE;
 800712e:	4a10      	ldr	r2, [pc, #64]	; (8007170 <Process_Can_Run+0x64>)
 8007130:	f892 3b00 	ldrb.w	r3, [r2, #2816]	; 0xb00
 8007134:	f043 0302 	orr.w	r3, r3, #2
 8007138:	f882 3b00 	strb.w	r3, [r2, #2816]	; 0xb00
#endif

        xSemHandle.Process_CAN = xSemaphoreCreateBinaryStatic(&xSemaphore.Process_CAN);
    }
#endif
}
 800713c:	e011      	b.n	8007162 <Process_Can_Run+0x56>
    	__GL.itc.flag.can = FALSE;
 800713e:	4a0c      	ldr	r2, [pc, #48]	; (8007170 <Process_Can_Run+0x64>)
 8007140:	f892 3b00 	ldrb.w	r3, [r2, #2816]	; 0xb00
 8007144:	f36f 0341 	bfc	r3, #1, #1
 8007148:	f882 3b00 	strb.w	r3, [r2, #2816]	; 0xb00
        xSemHandle.Process_CAN = xSemaphoreCreateBinaryStatic(&xSemaphore.Process_CAN);
 800714c:	2303      	movs	r3, #3
 800714e:	9300      	str	r3, [sp, #0]
 8007150:	4b08      	ldr	r3, [pc, #32]	; (8007174 <Process_Can_Run+0x68>)
 8007152:	2200      	movs	r2, #0
 8007154:	2100      	movs	r1, #0
 8007156:	2001      	movs	r0, #1
 8007158:	f7fc ff76 	bl	8004048 <xQueueGenericCreateStatic>
 800715c:	4603      	mov	r3, r0
 800715e:	4a02      	ldr	r2, [pc, #8]	; (8007168 <Process_Can_Run+0x5c>)
 8007160:	6053      	str	r3, [r2, #4]
}
 8007162:	bf00      	nop
 8007164:	46bd      	mov	sp, r7
 8007166:	bd80      	pop	{r7, pc}
 8007168:	2000a5ac 	.word	0x2000a5ac
 800716c:	2000a5c4 	.word	0x2000a5c4
 8007170:	20000010 	.word	0x20000010
 8007174:	2000a41c 	.word	0x2000a41c

08007178 <Process_SDCARD_Run>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void     Process_SDCARD_Run(void)
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b082      	sub	sp, #8
 800717c:	af02      	add	r7, sp, #8

#ifdef DEBUG_THREAD
    DEBUG_printThread((char *)PROCESS_SDCARD_SEMAPHORENAME, "RELEASED");
#endif

    xSemResult.Process_SDCARD = xSemaphoreGive(xSemHandle.Process_SDCARD);
 800717e:	4b15      	ldr	r3, [pc, #84]	; (80071d4 <Process_SDCARD_Run+0x5c>)
 8007180:	68d8      	ldr	r0, [r3, #12]
 8007182:	2300      	movs	r3, #0
 8007184:	2200      	movs	r2, #0
 8007186:	2100      	movs	r1, #0
 8007188:	f7fc fffa 	bl	8004180 <xQueueGenericSend>
 800718c:	4603      	mov	r3, r0
 800718e:	4a12      	ldr	r2, [pc, #72]	; (80071d8 <Process_SDCARD_Run+0x60>)
 8007190:	60d3      	str	r3, [r2, #12]

    if (pdPASS == xSemResult.Process_SDCARD)
 8007192:	4b11      	ldr	r3, [pc, #68]	; (80071d8 <Process_SDCARD_Run+0x60>)
 8007194:	68db      	ldr	r3, [r3, #12]
 8007196:	2b01      	cmp	r3, #1
 8007198:	d107      	bne.n	80071aa <Process_SDCARD_Run+0x32>
    {
        /* Bootloader Semaphore is Passed */
    	__GL.itc.flag.sdcard = TRUE;
 800719a:	4a10      	ldr	r2, [pc, #64]	; (80071dc <Process_SDCARD_Run+0x64>)
 800719c:	f892 3b00 	ldrb.w	r3, [r2, #2816]	; 0xb00
 80071a0:	f043 0308 	orr.w	r3, r3, #8
 80071a4:	f882 3b00 	strb.w	r3, [r2, #2816]	; 0xb00
#endif

        xSemHandle.Process_SDCARD = xSemaphoreCreateBinaryStatic(&xSemaphore.Process_SDCARD);
    }
#endif
}
 80071a8:	e011      	b.n	80071ce <Process_SDCARD_Run+0x56>
    	__GL.itc.flag.sdcard = FALSE;
 80071aa:	4a0c      	ldr	r2, [pc, #48]	; (80071dc <Process_SDCARD_Run+0x64>)
 80071ac:	f892 3b00 	ldrb.w	r3, [r2, #2816]	; 0xb00
 80071b0:	f36f 03c3 	bfc	r3, #3, #1
 80071b4:	f882 3b00 	strb.w	r3, [r2, #2816]	; 0xb00
        xSemHandle.Process_SDCARD = xSemaphoreCreateBinaryStatic(&xSemaphore.Process_SDCARD);
 80071b8:	2303      	movs	r3, #3
 80071ba:	9300      	str	r3, [sp, #0]
 80071bc:	4b08      	ldr	r3, [pc, #32]	; (80071e0 <Process_SDCARD_Run+0x68>)
 80071be:	2200      	movs	r2, #0
 80071c0:	2100      	movs	r1, #0
 80071c2:	2001      	movs	r0, #1
 80071c4:	f7fc ff40 	bl	8004048 <xQueueGenericCreateStatic>
 80071c8:	4603      	mov	r3, r0
 80071ca:	4a02      	ldr	r2, [pc, #8]	; (80071d4 <Process_SDCARD_Run+0x5c>)
 80071cc:	60d3      	str	r3, [r2, #12]
}
 80071ce:	bf00      	nop
 80071d0:	46bd      	mov	sp, r7
 80071d2:	bd80      	pop	{r7, pc}
 80071d4:	2000a5ac 	.word	0x2000a5ac
 80071d8:	2000a5c4 	.word	0x2000a5c4
 80071dc:	20000010 	.word	0x20000010
 80071e0:	2000a4bc 	.word	0x2000a4bc

080071e4 <Process_WIFI_Run>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void     Process_WIFI_Run(void)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b082      	sub	sp, #8
 80071e8:	af02      	add	r7, sp, #8

#ifdef DEBUG_THREAD
    DEBUG_printThread((char *)PROCESS_WIFI_SEMAPHORENAME, "RELEASED");
#endif

    xSemResult.Process_WIFI = xSemaphoreGive(xSemHandle.Process_WIFI);
 80071ea:	4b15      	ldr	r3, [pc, #84]	; (8007240 <Process_WIFI_Run+0x5c>)
 80071ec:	6918      	ldr	r0, [r3, #16]
 80071ee:	2300      	movs	r3, #0
 80071f0:	2200      	movs	r2, #0
 80071f2:	2100      	movs	r1, #0
 80071f4:	f7fc ffc4 	bl	8004180 <xQueueGenericSend>
 80071f8:	4603      	mov	r3, r0
 80071fa:	4a12      	ldr	r2, [pc, #72]	; (8007244 <Process_WIFI_Run+0x60>)
 80071fc:	6113      	str	r3, [r2, #16]

    if (pdPASS == xSemResult.Process_WIFI)
 80071fe:	4b11      	ldr	r3, [pc, #68]	; (8007244 <Process_WIFI_Run+0x60>)
 8007200:	691b      	ldr	r3, [r3, #16]
 8007202:	2b01      	cmp	r3, #1
 8007204:	d107      	bne.n	8007216 <Process_WIFI_Run+0x32>
    {
        /* Bootloader Semaphore is Passed */
    	__GL.itc.flag.wifi = TRUE;
 8007206:	4a10      	ldr	r2, [pc, #64]	; (8007248 <Process_WIFI_Run+0x64>)
 8007208:	f892 3b00 	ldrb.w	r3, [r2, #2816]	; 0xb00
 800720c:	f043 0310 	orr.w	r3, r3, #16
 8007210:	f882 3b00 	strb.w	r3, [r2, #2816]	; 0xb00
#endif

        xSemHandle.Process_WIFI = xSemaphoreCreateBinaryStatic(&xSemaphore.Process_WIFI);
    }
#endif
}
 8007214:	e011      	b.n	800723a <Process_WIFI_Run+0x56>
    	__GL.itc.flag.wifi = FALSE;
 8007216:	4a0c      	ldr	r2, [pc, #48]	; (8007248 <Process_WIFI_Run+0x64>)
 8007218:	f892 3b00 	ldrb.w	r3, [r2, #2816]	; 0xb00
 800721c:	f36f 1304 	bfc	r3, #4, #1
 8007220:	f882 3b00 	strb.w	r3, [r2, #2816]	; 0xb00
        xSemHandle.Process_WIFI = xSemaphoreCreateBinaryStatic(&xSemaphore.Process_WIFI);
 8007224:	2303      	movs	r3, #3
 8007226:	9300      	str	r3, [sp, #0]
 8007228:	4b08      	ldr	r3, [pc, #32]	; (800724c <Process_WIFI_Run+0x68>)
 800722a:	2200      	movs	r2, #0
 800722c:	2100      	movs	r1, #0
 800722e:	2001      	movs	r0, #1
 8007230:	f7fc ff0a 	bl	8004048 <xQueueGenericCreateStatic>
 8007234:	4603      	mov	r3, r0
 8007236:	4a02      	ldr	r2, [pc, #8]	; (8007240 <Process_WIFI_Run+0x5c>)
 8007238:	6113      	str	r3, [r2, #16]
}
 800723a:	bf00      	nop
 800723c:	46bd      	mov	sp, r7
 800723e:	bd80      	pop	{r7, pc}
 8007240:	2000a5ac 	.word	0x2000a5ac
 8007244:	2000a5c4 	.word	0x2000a5c4
 8007248:	20000010 	.word	0x20000010
 800724c:	2000a50c 	.word	0x2000a50c

08007250 <Process_NEXTION_Run>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void     Process_NEXTION_Run(void)
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b082      	sub	sp, #8
 8007254:	af02      	add	r7, sp, #8

#ifdef DEBUG_THREAD
    DEBUG_printThread((char *)PROCESS_NEXTION_SEMAPHORENAME, "RELEASED");
#endif

    xSemResult.Process_NEXTION = xSemaphoreGive(xSemHandle.Process_NEXTION);
 8007256:	4b15      	ldr	r3, [pc, #84]	; (80072ac <Process_NEXTION_Run+0x5c>)
 8007258:	6958      	ldr	r0, [r3, #20]
 800725a:	2300      	movs	r3, #0
 800725c:	2200      	movs	r2, #0
 800725e:	2100      	movs	r1, #0
 8007260:	f7fc ff8e 	bl	8004180 <xQueueGenericSend>
 8007264:	4603      	mov	r3, r0
 8007266:	4a12      	ldr	r2, [pc, #72]	; (80072b0 <Process_NEXTION_Run+0x60>)
 8007268:	6153      	str	r3, [r2, #20]

    if (pdPASS == xSemResult.Process_NEXTION)
 800726a:	4b11      	ldr	r3, [pc, #68]	; (80072b0 <Process_NEXTION_Run+0x60>)
 800726c:	695b      	ldr	r3, [r3, #20]
 800726e:	2b01      	cmp	r3, #1
 8007270:	d107      	bne.n	8007282 <Process_NEXTION_Run+0x32>
    {
        /* Bootloader Semaphore is Passed */
    	__GL.itc.flag.wifi = TRUE;
 8007272:	4a10      	ldr	r2, [pc, #64]	; (80072b4 <Process_NEXTION_Run+0x64>)
 8007274:	f892 3b00 	ldrb.w	r3, [r2, #2816]	; 0xb00
 8007278:	f043 0310 	orr.w	r3, r3, #16
 800727c:	f882 3b00 	strb.w	r3, [r2, #2816]	; 0xb00
#endif

        xSemHandle.Process_NEXTION = xSemaphoreCreateBinaryStatic(&xSemaphore.Process_NEXTION);
    }
#endif
}
 8007280:	e011      	b.n	80072a6 <Process_NEXTION_Run+0x56>
    	__GL.itc.flag.wifi = FALSE;
 8007282:	4a0c      	ldr	r2, [pc, #48]	; (80072b4 <Process_NEXTION_Run+0x64>)
 8007284:	f892 3b00 	ldrb.w	r3, [r2, #2816]	; 0xb00
 8007288:	f36f 1304 	bfc	r3, #4, #1
 800728c:	f882 3b00 	strb.w	r3, [r2, #2816]	; 0xb00
        xSemHandle.Process_NEXTION = xSemaphoreCreateBinaryStatic(&xSemaphore.Process_NEXTION);
 8007290:	2303      	movs	r3, #3
 8007292:	9300      	str	r3, [sp, #0]
 8007294:	4b08      	ldr	r3, [pc, #32]	; (80072b8 <Process_NEXTION_Run+0x68>)
 8007296:	2200      	movs	r2, #0
 8007298:	2100      	movs	r1, #0
 800729a:	2001      	movs	r0, #1
 800729c:	f7fc fed4 	bl	8004048 <xQueueGenericCreateStatic>
 80072a0:	4603      	mov	r3, r0
 80072a2:	4a02      	ldr	r2, [pc, #8]	; (80072ac <Process_NEXTION_Run+0x5c>)
 80072a4:	6153      	str	r3, [r2, #20]
}
 80072a6:	bf00      	nop
 80072a8:	46bd      	mov	sp, r7
 80072aa:	bd80      	pop	{r7, pc}
 80072ac:	2000a5ac 	.word	0x2000a5ac
 80072b0:	2000a5c4 	.word	0x2000a5c4
 80072b4:	20000010 	.word	0x20000010
 80072b8:	2000a55c 	.word	0x2000a55c

080072bc <ModuleCAN_HWInit>:
	 @return  : 
	 @date	  : 
	 @INFO		:	
********************************************************************************/
void ModuleCAN_HWInit(void)
{
 80072bc:	b480      	push	{r7}
 80072be:	af00      	add	r7, sp, #0
	//@INFO: WIFI thread'ine ait donanımsal init fonksiyonları
}
 80072c0:	bf00      	nop
 80072c2:	46bd      	mov	sp, r7
 80072c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c8:	4770      	bx	lr

080072ca <ModuleCAN_SWInit>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModuleCAN_SWInit(void)
{
 80072ca:	b480      	push	{r7}
 80072cc:	af00      	add	r7, sp, #0
	//@INFO: WIFI thread'ine ait yazilimsal init fonksiyonları
}
 80072ce:	bf00      	nop
 80072d0:	46bd      	mov	sp, r7
 80072d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d6:	4770      	bx	lr

080072d8 <ModuleCAN_StartUP>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModuleCAN_StartUP(void)
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	af00      	add	r7, sp, #0
	ModuleCAN_HWInit();
 80072dc:	f7ff ffee 	bl	80072bc <ModuleCAN_HWInit>
	ModuleCAN_SWInit();
 80072e0:	f7ff fff3 	bl	80072ca <ModuleCAN_SWInit>
}
 80072e4:	bf00      	nop
 80072e6:	bd80      	pop	{r7, pc}

080072e8 <ModuleCAN_MAIN_Routine>:
	 @date	  :
	 @INFO		:
********************************************************************************/

void ModuleCAN_MAIN_Routine(void)
{
 80072e8:	b480      	push	{r7}
 80072ea:	af00      	add	r7, sp, #0

}
 80072ec:	bf00      	nop
 80072ee:	46bd      	mov	sp, r7
 80072f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f4:	4770      	bx	lr

080072f6 <ModuleCAN_MAIN_Process>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModuleCAN_MAIN_Process(void)
{
 80072f6:	b480      	push	{r7}
 80072f8:	af00      	add	r7, sp, #0

}
 80072fa:	bf00      	nop
 80072fc:	46bd      	mov	sp, r7
 80072fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007302:	4770      	bx	lr

08007304 <ModuleCAN_MAIN>:
	 @date	  :
	 @INFO		:
********************************************************************************/

void ModuleCAN_MAIN(void)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	af00      	add	r7, sp, #0
	ModuleCAN_StartUP();
 8007308:	f7ff ffe6 	bl	80072d8 <ModuleCAN_StartUP>


		switch(ModuleCAN_MAIN_State)
 800730c:	4b11      	ldr	r3, [pc, #68]	; (8007354 <ModuleCAN_MAIN+0x50>)
 800730e:	781b      	ldrb	r3, [r3, #0]
 8007310:	2b03      	cmp	r3, #3
 8007312:	d819      	bhi.n	8007348 <ModuleCAN_MAIN+0x44>
 8007314:	a201      	add	r2, pc, #4	; (adr r2, 800731c <ModuleCAN_MAIN+0x18>)
 8007316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800731a:	bf00      	nop
 800731c:	0800732d 	.word	0x0800732d
 8007320:	08007335 	.word	0x08007335
 8007324:	0800733b 	.word	0x0800733b
 8007328:	08007341 	.word	0x08007341
		{
		    case ModuleCAN_MAIN_State_IDLE:
		    	//@INFO: IDLE Operations ..
		    	ModuleCAN_MAIN_State = ModuleCAN_MAIN_State_ROUTINE;
 800732c:	4b09      	ldr	r3, [pc, #36]	; (8007354 <ModuleCAN_MAIN+0x50>)
 800732e:	2201      	movs	r2, #1
 8007330:	701a      	strb	r2, [r3, #0]
		    break;
 8007332:	e00d      	b.n	8007350 <ModuleCAN_MAIN+0x4c>

		    case ModuleCAN_MAIN_State_ROUTINE:

		    	ModuleCAN_MAIN_Routine();
 8007334:	f7ff ffd8 	bl	80072e8 <ModuleCAN_MAIN_Routine>
		    break;
 8007338:	e00a      	b.n	8007350 <ModuleCAN_MAIN+0x4c>

		    case ModuleCAN_MAIN_State_PROCESS:

		    	ModuleCAN_MAIN_Process();
 800733a:	f7ff ffdc 	bl	80072f6 <ModuleCAN_MAIN_Process>

		    break;
 800733e:	e007      	b.n	8007350 <ModuleCAN_MAIN+0x4c>

		    case ModuleCAN_MAIN_State_SUSPEND:
		    	ModuleCAN_MAIN_State = ModuleCAN_MAIN_State_IDLE;
 8007340:	4b04      	ldr	r3, [pc, #16]	; (8007354 <ModuleCAN_MAIN+0x50>)
 8007342:	2200      	movs	r2, #0
 8007344:	701a      	strb	r2, [r3, #0]
		    break;
 8007346:	e003      	b.n	8007350 <ModuleCAN_MAIN+0x4c>

		    default:
		    	ModuleCAN_MAIN_State = ModuleCAN_MAIN_State_SUSPEND;
 8007348:	4b02      	ldr	r3, [pc, #8]	; (8007354 <ModuleCAN_MAIN+0x50>)
 800734a:	2203      	movs	r2, #3
 800734c:	701a      	strb	r2, [r3, #0]
		    break;
 800734e:	bf00      	nop

		}

}
 8007350:	bf00      	nop
 8007352:	bd80      	pop	{r7, pc}
 8007354:	2000a63c 	.word	0x2000a63c

08007358 <ModuleFlash_HWInit>:
	 @return  : 
	 @date	  : 
	 @INFO		:	
********************************************************************************/
void ModuleFlash_HWInit(void)
{
 8007358:	b480      	push	{r7}
 800735a:	af00      	add	r7, sp, #0
	//@INFO: WIFI thread'ine ait donanımsal init fonksiyonları
}
 800735c:	bf00      	nop
 800735e:	46bd      	mov	sp, r7
 8007360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007364:	4770      	bx	lr

08007366 <ModuleFlash_SWInit>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModuleFlash_SWInit(void)
{
 8007366:	b480      	push	{r7}
 8007368:	af00      	add	r7, sp, #0
	//@INFO: WIFI thread'ine ait yazilimsal init fonksiyonları
}
 800736a:	bf00      	nop
 800736c:	46bd      	mov	sp, r7
 800736e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007372:	4770      	bx	lr

08007374 <ModuleFlash_StartUP>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModuleFlash_StartUP(void)
{
 8007374:	b580      	push	{r7, lr}
 8007376:	af00      	add	r7, sp, #0
	ModuleFlash_HWInit();
 8007378:	f7ff ffee 	bl	8007358 <ModuleFlash_HWInit>
	ModuleFlash_SWInit();
 800737c:	f7ff fff3 	bl	8007366 <ModuleFlash_SWInit>
}
 8007380:	bf00      	nop
 8007382:	bd80      	pop	{r7, pc}

08007384 <ModuleFlash_MAIN_Routine>:
	 @date	  :
	 @INFO		:
********************************************************************************/

void ModuleFlash_MAIN_Routine(void)
{
 8007384:	b480      	push	{r7}
 8007386:	af00      	add	r7, sp, #0

}
 8007388:	bf00      	nop
 800738a:	46bd      	mov	sp, r7
 800738c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007390:	4770      	bx	lr

08007392 <ModuleFlash_MAIN_Process>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModuleFlash_MAIN_Process(void)
{
 8007392:	b480      	push	{r7}
 8007394:	af00      	add	r7, sp, #0

}
 8007396:	bf00      	nop
 8007398:	46bd      	mov	sp, r7
 800739a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739e:	4770      	bx	lr

080073a0 <ModuleFlash_MAIN>:
	 @date	  :
	 @INFO		:
********************************************************************************/

void ModuleFlash_MAIN(void)
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	af00      	add	r7, sp, #0

	switch(ModuleFlash_MAIN_State)
 80073a4:	4b11      	ldr	r3, [pc, #68]	; (80073ec <ModuleFlash_MAIN+0x4c>)
 80073a6:	781b      	ldrb	r3, [r3, #0]
 80073a8:	2b03      	cmp	r3, #3
 80073aa:	d819      	bhi.n	80073e0 <ModuleFlash_MAIN+0x40>
 80073ac:	a201      	add	r2, pc, #4	; (adr r2, 80073b4 <ModuleFlash_MAIN+0x14>)
 80073ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073b2:	bf00      	nop
 80073b4:	080073c5 	.word	0x080073c5
 80073b8:	080073cd 	.word	0x080073cd
 80073bc:	080073d3 	.word	0x080073d3
 80073c0:	080073d9 	.word	0x080073d9
	{
	    case ModuleFlash_MAIN_State_IDLE:
	    	//@INFO: IDLE Operations ..
	    	ModuleFlash_MAIN_State = ModuleFlash_MAIN_State_ROUTINE;
 80073c4:	4b09      	ldr	r3, [pc, #36]	; (80073ec <ModuleFlash_MAIN+0x4c>)
 80073c6:	2201      	movs	r2, #1
 80073c8:	701a      	strb	r2, [r3, #0]
	    break;
 80073ca:	e00d      	b.n	80073e8 <ModuleFlash_MAIN+0x48>

	    case ModuleFlash_MAIN_State_ROUTINE:

	    	ModuleFlash_MAIN_Routine();
 80073cc:	f7ff ffda 	bl	8007384 <ModuleFlash_MAIN_Routine>
	    break;
 80073d0:	e00a      	b.n	80073e8 <ModuleFlash_MAIN+0x48>

	    case ModuleFlash_MAIN_State_PROCESS:

	    	ModuleFlash_MAIN_Process();
 80073d2:	f7ff ffde 	bl	8007392 <ModuleFlash_MAIN_Process>

	    break;
 80073d6:	e007      	b.n	80073e8 <ModuleFlash_MAIN+0x48>

	    case ModuleFlash_MAIN_State_SUSPEND:
	    	ModuleFlash_MAIN_State = ModuleFlash_MAIN_State_IDLE;
 80073d8:	4b04      	ldr	r3, [pc, #16]	; (80073ec <ModuleFlash_MAIN+0x4c>)
 80073da:	2200      	movs	r2, #0
 80073dc:	701a      	strb	r2, [r3, #0]
	    break;
 80073de:	e003      	b.n	80073e8 <ModuleFlash_MAIN+0x48>

	    default:
	    	ModuleFlash_MAIN_State = ModuleFlash_MAIN_State_SUSPEND;
 80073e0:	4b02      	ldr	r3, [pc, #8]	; (80073ec <ModuleFlash_MAIN+0x4c>)
 80073e2:	2203      	movs	r2, #3
 80073e4:	701a      	strb	r2, [r3, #0]
	    break;
 80073e6:	bf00      	nop

	}

}
 80073e8:	bf00      	nop
 80073ea:	bd80      	pop	{r7, pc}
 80073ec:	2000a63d 	.word	0x2000a63d

080073f0 <ModuleNEXTION_HWInit>:
	 @return  : 
	 @date	  : 
	 @INFO		:	
********************************************************************************/
void ModuleNEXTION_HWInit(void)
{
 80073f0:	b480      	push	{r7}
 80073f2:	af00      	add	r7, sp, #0
	//@INFO: WIFI thread'ine ait donanımsal init fonksiyonları
}
 80073f4:	bf00      	nop
 80073f6:	46bd      	mov	sp, r7
 80073f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fc:	4770      	bx	lr

080073fe <ModuleNEXTION_SWInit>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModuleNEXTION_SWInit(void)
{
 80073fe:	b580      	push	{r7, lr}
 8007400:	af00      	add	r7, sp, #0
	ModuleFlash_HWInit();
 8007402:	f7ff ffa9 	bl	8007358 <ModuleFlash_HWInit>
	//@INFO: WIFI thread'ine ait yazilimsal init fonksiyonları
}
 8007406:	bf00      	nop
 8007408:	bd80      	pop	{r7, pc}

0800740a <ModuleNEXTION_StartUP>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModuleNEXTION_StartUP(void)
{
 800740a:	b580      	push	{r7, lr}
 800740c:	af00      	add	r7, sp, #0
	ModuleNEXTION_HWInit();
 800740e:	f7ff ffef 	bl	80073f0 <ModuleNEXTION_HWInit>
	ModuleNEXTION_SWInit();
 8007412:	f7ff fff4 	bl	80073fe <ModuleNEXTION_SWInit>
}
 8007416:	bf00      	nop
 8007418:	bd80      	pop	{r7, pc}

0800741a <ModuleNEXTION_MAIN_Routine>:
	 @date	  :
	 @INFO		:
********************************************************************************/

void ModuleNEXTION_MAIN_Routine(void)
{
 800741a:	b480      	push	{r7}
 800741c:	af00      	add	r7, sp, #0

}
 800741e:	bf00      	nop
 8007420:	46bd      	mov	sp, r7
 8007422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007426:	4770      	bx	lr

08007428 <ModuleNEXTION_MAIN_Process>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModuleNEXTION_MAIN_Process(void)
{
 8007428:	b480      	push	{r7}
 800742a:	af00      	add	r7, sp, #0

}
 800742c:	bf00      	nop
 800742e:	46bd      	mov	sp, r7
 8007430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007434:	4770      	bx	lr
	...

08007438 <ModuleNEXTION_MAIN>:
	 @date	  :
	 @INFO		:
********************************************************************************/

void ModuleNEXTION_MAIN(void)
{
 8007438:	b580      	push	{r7, lr}
 800743a:	af00      	add	r7, sp, #0
	switch(ModuleNEXTION_MAIN_State)
 800743c:	4b11      	ldr	r3, [pc, #68]	; (8007484 <ModuleNEXTION_MAIN+0x4c>)
 800743e:	781b      	ldrb	r3, [r3, #0]
 8007440:	2b03      	cmp	r3, #3
 8007442:	d819      	bhi.n	8007478 <ModuleNEXTION_MAIN+0x40>
 8007444:	a201      	add	r2, pc, #4	; (adr r2, 800744c <ModuleNEXTION_MAIN+0x14>)
 8007446:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800744a:	bf00      	nop
 800744c:	0800745d 	.word	0x0800745d
 8007450:	08007465 	.word	0x08007465
 8007454:	0800746b 	.word	0x0800746b
 8007458:	08007471 	.word	0x08007471
	{
	    case ModuleNEXTION_MAIN_State_IDLE:
	    	//@INFO: IDLE Operations ..
	    	ModuleNEXTION_MAIN_State = ModuleNEXTION_MAIN_State_ROUTINE;
 800745c:	4b09      	ldr	r3, [pc, #36]	; (8007484 <ModuleNEXTION_MAIN+0x4c>)
 800745e:	2201      	movs	r2, #1
 8007460:	701a      	strb	r2, [r3, #0]
	    break;
 8007462:	e00d      	b.n	8007480 <ModuleNEXTION_MAIN+0x48>

	    case ModuleNEXTION_MAIN_State_ROUTINE:

	    	ModuleNEXTION_MAIN_Routine();
 8007464:	f7ff ffd9 	bl	800741a <ModuleNEXTION_MAIN_Routine>
	    break;
 8007468:	e00a      	b.n	8007480 <ModuleNEXTION_MAIN+0x48>

	    case ModuleNEXTION_MAIN_State_PROCESS:

	    	ModuleNEXTION_MAIN_Process();
 800746a:	f7ff ffdd 	bl	8007428 <ModuleNEXTION_MAIN_Process>

	    break;
 800746e:	e007      	b.n	8007480 <ModuleNEXTION_MAIN+0x48>

	    case ModuleNEXTION_MAIN_State_SUSPEND:
	    	ModuleNEXTION_MAIN_State = ModuleNEXTION_MAIN_State_IDLE;
 8007470:	4b04      	ldr	r3, [pc, #16]	; (8007484 <ModuleNEXTION_MAIN+0x4c>)
 8007472:	2200      	movs	r2, #0
 8007474:	701a      	strb	r2, [r3, #0]
	    break;
 8007476:	e003      	b.n	8007480 <ModuleNEXTION_MAIN+0x48>

	    default:
	    	ModuleNEXTION_MAIN_State = ModuleNEXTION_MAIN_State_SUSPEND;
 8007478:	4b02      	ldr	r3, [pc, #8]	; (8007484 <ModuleNEXTION_MAIN+0x4c>)
 800747a:	2203      	movs	r2, #3
 800747c:	701a      	strb	r2, [r3, #0]
	    break;
 800747e:	bf00      	nop

	}

}
 8007480:	bf00      	nop
 8007482:	bd80      	pop	{r7, pc}
 8007484:	2000a63e 	.word	0x2000a63e

08007488 <ModuleRTC_HWInit>:
	 @return  : 
	 @date	  : 
	 @INFO		:	
********************************************************************************/
void ModuleRTC_HWInit(void)
{
 8007488:	b480      	push	{r7}
 800748a:	af00      	add	r7, sp, #0
	//@INFO: WIFI thread'ine ait donanımsal init fonksiyonları
}
 800748c:	bf00      	nop
 800748e:	46bd      	mov	sp, r7
 8007490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007494:	4770      	bx	lr

08007496 <ModuleRTC_SWInit>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModuleRTC_SWInit(void)
{
 8007496:	b480      	push	{r7}
 8007498:	af00      	add	r7, sp, #0
	//@INFO: WIFI thread'ine ait yazilimsal init fonksiyonları
}
 800749a:	bf00      	nop
 800749c:	46bd      	mov	sp, r7
 800749e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a2:	4770      	bx	lr

080074a4 <ModuleRTC_StartUP>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModuleRTC_StartUP(void)
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	af00      	add	r7, sp, #0
	ModuleRTC_HWInit();
 80074a8:	f7ff ffee 	bl	8007488 <ModuleRTC_HWInit>
	ModuleRTC_SWInit();
 80074ac:	f7ff fff3 	bl	8007496 <ModuleRTC_SWInit>
}
 80074b0:	bf00      	nop
 80074b2:	bd80      	pop	{r7, pc}

080074b4 <ModuleRTC_MAIN_Routine>:
	 @date	  :
	 @INFO		:
********************************************************************************/

void ModuleRTC_MAIN_Routine(void)
{
 80074b4:	b480      	push	{r7}
 80074b6:	af00      	add	r7, sp, #0

}
 80074b8:	bf00      	nop
 80074ba:	46bd      	mov	sp, r7
 80074bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c0:	4770      	bx	lr

080074c2 <ModuleRTC_MAIN_Process>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModuleRTC_MAIN_Process(void)
{
 80074c2:	b480      	push	{r7}
 80074c4:	af00      	add	r7, sp, #0

}
 80074c6:	bf00      	nop
 80074c8:	46bd      	mov	sp, r7
 80074ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ce:	4770      	bx	lr

080074d0 <ModuleRTC_MAIN>:
	 @date	  :
	 @INFO		:
********************************************************************************/

void ModuleRTC_MAIN(void)
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	af00      	add	r7, sp, #0
	switch(ModuleRTC_MAIN_State)
 80074d4:	4b11      	ldr	r3, [pc, #68]	; (800751c <ModuleRTC_MAIN+0x4c>)
 80074d6:	781b      	ldrb	r3, [r3, #0]
 80074d8:	2b03      	cmp	r3, #3
 80074da:	d819      	bhi.n	8007510 <ModuleRTC_MAIN+0x40>
 80074dc:	a201      	add	r2, pc, #4	; (adr r2, 80074e4 <ModuleRTC_MAIN+0x14>)
 80074de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074e2:	bf00      	nop
 80074e4:	080074f5 	.word	0x080074f5
 80074e8:	080074fd 	.word	0x080074fd
 80074ec:	08007503 	.word	0x08007503
 80074f0:	08007509 	.word	0x08007509
	{
	    case ModuleRTC_MAIN_State_IDLE:
	    	//@INFO: IDLE Operations ..
	    	ModuleRTC_MAIN_State = ModuleRTC_MAIN_State_ROUTINE;
 80074f4:	4b09      	ldr	r3, [pc, #36]	; (800751c <ModuleRTC_MAIN+0x4c>)
 80074f6:	2201      	movs	r2, #1
 80074f8:	701a      	strb	r2, [r3, #0]
	    break;
 80074fa:	e00d      	b.n	8007518 <ModuleRTC_MAIN+0x48>

	    case ModuleRTC_MAIN_State_ROUTINE:

	    	ModuleRTC_MAIN_Routine();
 80074fc:	f7ff ffda 	bl	80074b4 <ModuleRTC_MAIN_Routine>
	    break;
 8007500:	e00a      	b.n	8007518 <ModuleRTC_MAIN+0x48>

	    case ModuleRTC_MAIN_State_PROCESS:

	    	ModuleRTC_MAIN_Process();
 8007502:	f7ff ffde 	bl	80074c2 <ModuleRTC_MAIN_Process>

	    break;
 8007506:	e007      	b.n	8007518 <ModuleRTC_MAIN+0x48>

	    case ModuleRTC_MAIN_State_SUSPEND:
	    	ModuleRTC_MAIN_State = ModuleRTC_MAIN_State_IDLE;
 8007508:	4b04      	ldr	r3, [pc, #16]	; (800751c <ModuleRTC_MAIN+0x4c>)
 800750a:	2200      	movs	r2, #0
 800750c:	701a      	strb	r2, [r3, #0]
	    break;
 800750e:	e003      	b.n	8007518 <ModuleRTC_MAIN+0x48>

	    default:
	    	ModuleRTC_MAIN_State = ModuleRTC_MAIN_State_SUSPEND;
 8007510:	4b02      	ldr	r3, [pc, #8]	; (800751c <ModuleRTC_MAIN+0x4c>)
 8007512:	2203      	movs	r2, #3
 8007514:	701a      	strb	r2, [r3, #0]
	    break;
 8007516:	bf00      	nop

	}
}
 8007518:	bf00      	nop
 800751a:	bd80      	pop	{r7, pc}
 800751c:	2000a63f 	.word	0x2000a63f

08007520 <ModuleSDCard_HWInit>:
	 @return  : 
	 @date	  : 
	 @INFO		:	
********************************************************************************/
void ModuleSDCard_HWInit(void)
{
 8007520:	b480      	push	{r7}
 8007522:	af00      	add	r7, sp, #0
//	/* Close file */
//	fresult = f_close(&file);


	//@INFO: SDCard thread'ine ait donanımsal init fonksiyonları
}
 8007524:	bf00      	nop
 8007526:	46bd      	mov	sp, r7
 8007528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752c:	4770      	bx	lr

0800752e <ModuleSDCard_SWInit>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModuleSDCard_SWInit(void)
{
 800752e:	b480      	push	{r7}
 8007530:	af00      	add	r7, sp, #0
	//@INFO: WIFI thread'ine ait yazilimsal init fonksiyonları
}
 8007532:	bf00      	nop
 8007534:	46bd      	mov	sp, r7
 8007536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753a:	4770      	bx	lr

0800753c <ModuleSDCard_StartUP>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModuleSDCard_StartUP(void)
{
 800753c:	b580      	push	{r7, lr}
 800753e:	af00      	add	r7, sp, #0
	ModuleSDCard_HWInit();
 8007540:	f7ff ffee 	bl	8007520 <ModuleSDCard_HWInit>
	ModuleSDCard_SWInit();
 8007544:	f7ff fff3 	bl	800752e <ModuleSDCard_SWInit>
}
 8007548:	bf00      	nop
 800754a:	bd80      	pop	{r7, pc}

0800754c <ModuleSDCard_MAIN_Routine>:
	 @date	  :
	 @INFO		:
********************************************************************************/

void ModuleSDCard_MAIN_Routine(void)
{
 800754c:	b480      	push	{r7}
 800754e:	af00      	add	r7, sp, #0

}
 8007550:	bf00      	nop
 8007552:	46bd      	mov	sp, r7
 8007554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007558:	4770      	bx	lr

0800755a <ModuleSDCard_MAIN_Process>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModuleSDCard_MAIN_Process(void)
{
 800755a:	b480      	push	{r7}
 800755c:	af00      	add	r7, sp, #0

}
 800755e:	bf00      	nop
 8007560:	46bd      	mov	sp, r7
 8007562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007566:	4770      	bx	lr

08007568 <ModuleSDCard_MAIN>:
	 @date	  :
	 @INFO		:
********************************************************************************/

void ModuleSDCard_MAIN(void)
{
 8007568:	b580      	push	{r7, lr}
 800756a:	af00      	add	r7, sp, #0
	switch(ModuleSDCard_MAIN_State)
 800756c:	4b11      	ldr	r3, [pc, #68]	; (80075b4 <ModuleSDCard_MAIN+0x4c>)
 800756e:	781b      	ldrb	r3, [r3, #0]
 8007570:	2b03      	cmp	r3, #3
 8007572:	d819      	bhi.n	80075a8 <ModuleSDCard_MAIN+0x40>
 8007574:	a201      	add	r2, pc, #4	; (adr r2, 800757c <ModuleSDCard_MAIN+0x14>)
 8007576:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800757a:	bf00      	nop
 800757c:	0800758d 	.word	0x0800758d
 8007580:	08007595 	.word	0x08007595
 8007584:	0800759b 	.word	0x0800759b
 8007588:	080075a1 	.word	0x080075a1
	{
	    case ModuleSDCard_MAIN_State_IDLE:
	    	//@INFO: IDLE Operations ..
	    	ModuleSDCard_MAIN_State = ModuleSDCard_MAIN_State_ROUTINE;
 800758c:	4b09      	ldr	r3, [pc, #36]	; (80075b4 <ModuleSDCard_MAIN+0x4c>)
 800758e:	2201      	movs	r2, #1
 8007590:	701a      	strb	r2, [r3, #0]
	    break;
 8007592:	e00d      	b.n	80075b0 <ModuleSDCard_MAIN+0x48>

	    case ModuleSDCard_MAIN_State_ROUTINE:

	    	ModuleSDCard_MAIN_Routine();
 8007594:	f7ff ffda 	bl	800754c <ModuleSDCard_MAIN_Routine>
	    break;
 8007598:	e00a      	b.n	80075b0 <ModuleSDCard_MAIN+0x48>

	    case ModuleSDCard_MAIN_State_PROCESS:

	    	ModuleSDCard_MAIN_Process();
 800759a:	f7ff ffde 	bl	800755a <ModuleSDCard_MAIN_Process>

	    break;
 800759e:	e007      	b.n	80075b0 <ModuleSDCard_MAIN+0x48>

	    case ModuleSDCard_MAIN_State_SUSPEND:
	    	ModuleSDCard_MAIN_State = ModuleSDCard_MAIN_State_IDLE;
 80075a0:	4b04      	ldr	r3, [pc, #16]	; (80075b4 <ModuleSDCard_MAIN+0x4c>)
 80075a2:	2200      	movs	r2, #0
 80075a4:	701a      	strb	r2, [r3, #0]
	    break;
 80075a6:	e003      	b.n	80075b0 <ModuleSDCard_MAIN+0x48>

	    default:
	    	ModuleSDCard_MAIN_State = ModuleSDCard_MAIN_State_SUSPEND;
 80075a8:	4b02      	ldr	r3, [pc, #8]	; (80075b4 <ModuleSDCard_MAIN+0x4c>)
 80075aa:	2203      	movs	r2, #3
 80075ac:	701a      	strb	r2, [r3, #0]
	    break;
 80075ae:	bf00      	nop

	}

}
 80075b0:	bf00      	nop
 80075b2:	bd80      	pop	{r7, pc}
 80075b4:	2000a640 	.word	0x2000a640

080075b8 <ModuleWIFI_HWInit>:
	 @return  : 
	 @date	  : 
	 @INFO		:	
********************************************************************************/
void ModuleWIFI_HWInit(void)
{
 80075b8:	b480      	push	{r7}
 80075ba:	af00      	add	r7, sp, #0
	//@INFO: WIFI thread'ine ait donanımsal init fonksiyonları
}
 80075bc:	bf00      	nop
 80075be:	46bd      	mov	sp, r7
 80075c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c4:	4770      	bx	lr

080075c6 <ModuleWIFI_SWInit>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModuleWIFI_SWInit(void)
{
 80075c6:	b480      	push	{r7}
 80075c8:	af00      	add	r7, sp, #0
	//@INFO: WIFI thread'ine ait yazilimsal init fonksiyonları
}
 80075ca:	bf00      	nop
 80075cc:	46bd      	mov	sp, r7
 80075ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d2:	4770      	bx	lr

080075d4 <ModuleWIFI_StartUP>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModuleWIFI_StartUP(void)
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	af00      	add	r7, sp, #0
	ModuleWIFI_HWInit();
 80075d8:	f7ff ffee 	bl	80075b8 <ModuleWIFI_HWInit>
	ModuleWIFI_SWInit();
 80075dc:	f7ff fff3 	bl	80075c6 <ModuleWIFI_SWInit>
}
 80075e0:	bf00      	nop
 80075e2:	bd80      	pop	{r7, pc}

080075e4 <ModuleWIFI_MAIN_Routine>:
	 @date	  :
	 @INFO		:
********************************************************************************/

void ModuleWIFI_MAIN_Routine(void)
{
 80075e4:	b480      	push	{r7}
 80075e6:	af00      	add	r7, sp, #0

}
 80075e8:	bf00      	nop
 80075ea:	46bd      	mov	sp, r7
 80075ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f0:	4770      	bx	lr

080075f2 <ModuleWIFI_MAIN_Process>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModuleWIFI_MAIN_Process(void)
{
 80075f2:	b480      	push	{r7}
 80075f4:	af00      	add	r7, sp, #0

}
 80075f6:	bf00      	nop
 80075f8:	46bd      	mov	sp, r7
 80075fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fe:	4770      	bx	lr

08007600 <ModuleWIFI_MAIN>:
	 @date	  :
	 @INFO		:
********************************************************************************/

void ModuleWIFI_MAIN(void)
{
 8007600:	b580      	push	{r7, lr}
 8007602:	af00      	add	r7, sp, #0
	switch(ModuleWIFI_MAIN_State)
 8007604:	4b11      	ldr	r3, [pc, #68]	; (800764c <ModuleWIFI_MAIN+0x4c>)
 8007606:	781b      	ldrb	r3, [r3, #0]
 8007608:	2b03      	cmp	r3, #3
 800760a:	d819      	bhi.n	8007640 <ModuleWIFI_MAIN+0x40>
 800760c:	a201      	add	r2, pc, #4	; (adr r2, 8007614 <ModuleWIFI_MAIN+0x14>)
 800760e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007612:	bf00      	nop
 8007614:	08007625 	.word	0x08007625
 8007618:	0800762d 	.word	0x0800762d
 800761c:	08007633 	.word	0x08007633
 8007620:	08007639 	.word	0x08007639
	{
	    case ModuleWIFI_MAIN_State_IDLE:
	    	//@INFO: IDLE Operations ..
	    	ModuleWIFI_MAIN_State = ModuleWIFI_MAIN_State_ROUTINE;
 8007624:	4b09      	ldr	r3, [pc, #36]	; (800764c <ModuleWIFI_MAIN+0x4c>)
 8007626:	2201      	movs	r2, #1
 8007628:	701a      	strb	r2, [r3, #0]
	    break;
 800762a:	e00d      	b.n	8007648 <ModuleWIFI_MAIN+0x48>

	    case ModuleWIFI_MAIN_State_ROUTINE:

	    	ModuleWIFI_MAIN_Routine();
 800762c:	f7ff ffda 	bl	80075e4 <ModuleWIFI_MAIN_Routine>
	    break;
 8007630:	e00a      	b.n	8007648 <ModuleWIFI_MAIN+0x48>

	    case ModuleWIFI_MAIN_State_PROCESS:

	    	ModuleWIFI_MAIN_Process();
 8007632:	f7ff ffde 	bl	80075f2 <ModuleWIFI_MAIN_Process>

	    break;
 8007636:	e007      	b.n	8007648 <ModuleWIFI_MAIN+0x48>

	    case ModuleWIFI_MAIN_State_SUSPEND:
	    	ModuleWIFI_MAIN_State = ModuleWIFI_MAIN_State_IDLE;
 8007638:	4b04      	ldr	r3, [pc, #16]	; (800764c <ModuleWIFI_MAIN+0x4c>)
 800763a:	2200      	movs	r2, #0
 800763c:	701a      	strb	r2, [r3, #0]
	    break;
 800763e:	e003      	b.n	8007648 <ModuleWIFI_MAIN+0x48>

	    default:
	    	ModuleWIFI_MAIN_State = ModuleWIFI_MAIN_State_SUSPEND;
 8007640:	4b02      	ldr	r3, [pc, #8]	; (800764c <ModuleWIFI_MAIN+0x4c>)
 8007642:	2203      	movs	r2, #3
 8007644:	701a      	strb	r2, [r3, #0]
	    break;
 8007646:	bf00      	nop

	}
}
 8007648:	bf00      	nop
 800764a:	bd80      	pop	{r7, pc}
 800764c:	2000a641 	.word	0x2000a641

08007650 <TelemetryMain_HWInit>:
	 @return  : 
	 @date	  : 
	 @INFO		:	
********************************************************************************/
void TelemetryMain_HWInit(void)
{
 8007650:	b480      	push	{r7}
 8007652:	af00      	add	r7, sp, #0
	//@INFO: Telemetry thread'ine ait donanımsal init fonksiyonları
}
 8007654:	bf00      	nop
 8007656:	46bd      	mov	sp, r7
 8007658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765c:	4770      	bx	lr

0800765e <TelemetryMain_SWInit>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void TelemetryMain_SWInit(void)
{
 800765e:	b480      	push	{r7}
 8007660:	af00      	add	r7, sp, #0
	//@INFO: Telemetry thread'ine ait yazilimsal init fonksiyonları
}
 8007662:	bf00      	nop
 8007664:	46bd      	mov	sp, r7
 8007666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766a:	4770      	bx	lr

0800766c <TelemetryMain_StartUP>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void TelemetryMain_StartUP(void)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	af00      	add	r7, sp, #0
	TelemetryMain_HWInit();
 8007670:	f7ff ffee 	bl	8007650 <TelemetryMain_HWInit>
	TelemetryMain_SWInit();
 8007674:	f7ff fff3 	bl	800765e <TelemetryMain_SWInit>
}
 8007678:	bf00      	nop
 800767a:	bd80      	pop	{r7, pc}

0800767c <TelemetryMain_MAIN_Routine>:
	 @date	  :
	 @INFO		:
********************************************************************************/

void TelemetryMain_MAIN_Routine(void)
{
 800767c:	b480      	push	{r7}
 800767e:	af00      	add	r7, sp, #0

}
 8007680:	bf00      	nop
 8007682:	46bd      	mov	sp, r7
 8007684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007688:	4770      	bx	lr

0800768a <TelemetryMain_MAIN_Process>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void TelemetryMain_MAIN_Process(void)
{
 800768a:	b480      	push	{r7}
 800768c:	af00      	add	r7, sp, #0

}
 800768e:	bf00      	nop
 8007690:	46bd      	mov	sp, r7
 8007692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007696:	4770      	bx	lr

08007698 <TelemetyMain_MAIN>:
	 @date	  :
	 @INFO		:
********************************************************************************/

void TelemetyMain_MAIN(void)
{
 8007698:	b580      	push	{r7, lr}
 800769a:	af00      	add	r7, sp, #0

	switch(TelemetryMain_MAIN_State)
 800769c:	4b11      	ldr	r3, [pc, #68]	; (80076e4 <TelemetyMain_MAIN+0x4c>)
 800769e:	781b      	ldrb	r3, [r3, #0]
 80076a0:	2b03      	cmp	r3, #3
 80076a2:	d819      	bhi.n	80076d8 <TelemetyMain_MAIN+0x40>
 80076a4:	a201      	add	r2, pc, #4	; (adr r2, 80076ac <TelemetyMain_MAIN+0x14>)
 80076a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076aa:	bf00      	nop
 80076ac:	080076bd 	.word	0x080076bd
 80076b0:	080076c5 	.word	0x080076c5
 80076b4:	080076cb 	.word	0x080076cb
 80076b8:	080076d1 	.word	0x080076d1
	{
	    case TelemetryMain_MAIN_State_IDLE:
	    	//@INFO: IDLE Operations ..
	    	TelemetryMain_MAIN_State = TelemetryMain_MAIN_State_ROUTINE;
 80076bc:	4b09      	ldr	r3, [pc, #36]	; (80076e4 <TelemetyMain_MAIN+0x4c>)
 80076be:	2201      	movs	r2, #1
 80076c0:	701a      	strb	r2, [r3, #0]
	    break;
 80076c2:	e00d      	b.n	80076e0 <TelemetyMain_MAIN+0x48>

	    case TelemetryMain_MAIN_State_ROUTINE:

	    	TelemetryMain_MAIN_Routine();
 80076c4:	f7ff ffda 	bl	800767c <TelemetryMain_MAIN_Routine>

	    break;
 80076c8:	e00a      	b.n	80076e0 <TelemetyMain_MAIN+0x48>

	    case TelemetryMain_MAIN_State_PROCESS:

	    	TelemetryMain_MAIN_Process();
 80076ca:	f7ff ffde 	bl	800768a <TelemetryMain_MAIN_Process>

	    break;
 80076ce:	e007      	b.n	80076e0 <TelemetyMain_MAIN+0x48>

	    case TelemetryMain_MAIN_State_SUSPEND:
	    	TelemetryMain_MAIN_State = TelemetryMain_MAIN_State_IDLE;
 80076d0:	4b04      	ldr	r3, [pc, #16]	; (80076e4 <TelemetyMain_MAIN+0x4c>)
 80076d2:	2200      	movs	r2, #0
 80076d4:	701a      	strb	r2, [r3, #0]
	    break;
 80076d6:	e003      	b.n	80076e0 <TelemetyMain_MAIN+0x48>

	    default:
	    	TelemetryMain_MAIN_State = TelemetryMain_MAIN_State_SUSPEND;
 80076d8:	4b02      	ldr	r3, [pc, #8]	; (80076e4 <TelemetyMain_MAIN+0x4c>)
 80076da:	2203      	movs	r2, #3
 80076dc:	701a      	strb	r2, [r3, #0]
	    break;
 80076de:	bf00      	nop

	}

}
 80076e0:	bf00      	nop
 80076e2:	bd80      	pop	{r7, pc}
 80076e4:	2000a642 	.word	0x2000a642

080076e8 <__libc_init_array>:
 80076e8:	b570      	push	{r4, r5, r6, lr}
 80076ea:	4d0d      	ldr	r5, [pc, #52]	; (8007720 <__libc_init_array+0x38>)
 80076ec:	4c0d      	ldr	r4, [pc, #52]	; (8007724 <__libc_init_array+0x3c>)
 80076ee:	1b64      	subs	r4, r4, r5
 80076f0:	10a4      	asrs	r4, r4, #2
 80076f2:	2600      	movs	r6, #0
 80076f4:	42a6      	cmp	r6, r4
 80076f6:	d109      	bne.n	800770c <__libc_init_array+0x24>
 80076f8:	4d0b      	ldr	r5, [pc, #44]	; (8007728 <__libc_init_array+0x40>)
 80076fa:	4c0c      	ldr	r4, [pc, #48]	; (800772c <__libc_init_array+0x44>)
 80076fc:	f000 f82e 	bl	800775c <_init>
 8007700:	1b64      	subs	r4, r4, r5
 8007702:	10a4      	asrs	r4, r4, #2
 8007704:	2600      	movs	r6, #0
 8007706:	42a6      	cmp	r6, r4
 8007708:	d105      	bne.n	8007716 <__libc_init_array+0x2e>
 800770a:	bd70      	pop	{r4, r5, r6, pc}
 800770c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007710:	4798      	blx	r3
 8007712:	3601      	adds	r6, #1
 8007714:	e7ee      	b.n	80076f4 <__libc_init_array+0xc>
 8007716:	f855 3b04 	ldr.w	r3, [r5], #4
 800771a:	4798      	blx	r3
 800771c:	3601      	adds	r6, #1
 800771e:	e7f2      	b.n	8007706 <__libc_init_array+0x1e>
 8007720:	080078c0 	.word	0x080078c0
 8007724:	080078c0 	.word	0x080078c0
 8007728:	080078c0 	.word	0x080078c0
 800772c:	080078c4 	.word	0x080078c4

08007730 <memcpy>:
 8007730:	440a      	add	r2, r1
 8007732:	4291      	cmp	r1, r2
 8007734:	f100 33ff 	add.w	r3, r0, #4294967295
 8007738:	d100      	bne.n	800773c <memcpy+0xc>
 800773a:	4770      	bx	lr
 800773c:	b510      	push	{r4, lr}
 800773e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007742:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007746:	4291      	cmp	r1, r2
 8007748:	d1f9      	bne.n	800773e <memcpy+0xe>
 800774a:	bd10      	pop	{r4, pc}

0800774c <memset>:
 800774c:	4402      	add	r2, r0
 800774e:	4603      	mov	r3, r0
 8007750:	4293      	cmp	r3, r2
 8007752:	d100      	bne.n	8007756 <memset+0xa>
 8007754:	4770      	bx	lr
 8007756:	f803 1b01 	strb.w	r1, [r3], #1
 800775a:	e7f9      	b.n	8007750 <memset+0x4>

0800775c <_init>:
 800775c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800775e:	bf00      	nop
 8007760:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007762:	bc08      	pop	{r3}
 8007764:	469e      	mov	lr, r3
 8007766:	4770      	bx	lr

08007768 <_fini>:
 8007768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800776a:	bf00      	nop
 800776c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800776e:	bc08      	pop	{r3}
 8007770:	469e      	mov	lr, r3
 8007772:	4770      	bx	lr
