
TELEMETRY.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d700  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000764  0800d8a0  0800d8a0  0001d8a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e004  0800e004  00021094  2**0
                  CONTENTS
  4 .ARM          00000008  0800e004  0800e004  0001e004  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e00c  0800e00c  00021094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e00c  0800e00c  0001e00c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e010  0800e010  0001e010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  0800e014  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ARM.__at_0x20000000 00000ff0  200000a4  0800e0b8  000200a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          0000a7d8  20001094  0800f0a8  00021094  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000b86c  0800f0a8  0002b86c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00021094  2**0
                  CONTENTS, READONLY
 13 .debug_info   000262a0  00000000  00000000  000210c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000052fc  00000000  00000000  00047364  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000020c0  00000000  00000000  0004c660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001e80  00000000  00000000  0004e720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000095f0  00000000  00000000  000505a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002dc95  00000000  00000000  00059b90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ae016  00000000  00000000  00087825  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013583b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008b14  00000000  00000000  0013588c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20001094 	.word	0x20001094
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800d888 	.word	0x0800d888

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20001098 	.word	0x20001098
 80001dc:	0800d888 	.word	0x0800d888

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000598:	f001 fb3e 	bl	8001c18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059c:	f000 f832 	bl	8000604 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a0:	f000 fb56 	bl	8000c50 <MX_GPIO_Init>
  MX_ADC1_Init();
 80005a4:	f000 f89a 	bl	80006dc <MX_ADC1_Init>
  MX_I2C1_Init();
 80005a8:	f000 f8ea 	bl	8000780 <MX_I2C1_Init>
  MX_I2C2_Init();
 80005ac:	f000 f916 	bl	80007dc <MX_I2C2_Init>
  MX_I2C3_Init();
 80005b0:	f000 f942 	bl	8000838 <MX_I2C3_Init>
  MX_SPI1_Init();
 80005b4:	f000 f96e 	bl	8000894 <MX_SPI1_Init>
  MX_SPI2_Init();
 80005b8:	f000 f9a2 	bl	8000900 <MX_SPI2_Init>
  MX_SPI3_Init();
 80005bc:	f000 f9d6 	bl	800096c <MX_SPI3_Init>
  MX_TIM3_Init();
 80005c0:	f000 fa0a 	bl	80009d8 <MX_TIM3_Init>
  MX_TIM4_Init();
 80005c4:	f000 fa6c 	bl	8000aa0 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 80005c8:	f000 fac4 	bl	8000b54 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80005cc:	f000 faec 	bl	8000ba8 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 80005d0:	f000 fb14 	bl	8000bfc <MX_USART6_UART_Init>
  MX_FATFS_Init();
 80005d4:	f004 fcf6 	bl	8004fc4 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  MAIN_App(); /* Jump Into Telemetry Code */
 80005d8:	f00b fe98 	bl	800c30c <MAIN_App>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005dc:	f008 f966 	bl	80088ac <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005e0:	4a05      	ldr	r2, [pc, #20]	; (80005f8 <main+0x64>)
 80005e2:	2100      	movs	r1, #0
 80005e4:	4805      	ldr	r0, [pc, #20]	; (80005fc <main+0x68>)
 80005e6:	f008 f9ab 	bl	8008940 <osThreadNew>
 80005ea:	4603      	mov	r3, r0
 80005ec:	4a04      	ldr	r2, [pc, #16]	; (8000600 <main+0x6c>)
 80005ee:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005f0:	f008 f980 	bl	80088f4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005f4:	e7fe      	b.n	80005f4 <main+0x60>
 80005f6:	bf00      	nop
 80005f8:	0800db1c 	.word	0x0800db1c
 80005fc:	08000e15 	.word	0x08000e15
 8000600:	20001458 	.word	0x20001458

08000604 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b094      	sub	sp, #80	; 0x50
 8000608:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800060a:	f107 0320 	add.w	r3, r7, #32
 800060e:	2230      	movs	r2, #48	; 0x30
 8000610:	2100      	movs	r1, #0
 8000612:	4618      	mov	r0, r3
 8000614:	f00c fcd2 	bl	800cfbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000618:	f107 030c 	add.w	r3, r7, #12
 800061c:	2200      	movs	r2, #0
 800061e:	601a      	str	r2, [r3, #0]
 8000620:	605a      	str	r2, [r3, #4]
 8000622:	609a      	str	r2, [r3, #8]
 8000624:	60da      	str	r2, [r3, #12]
 8000626:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000628:	2300      	movs	r3, #0
 800062a:	60bb      	str	r3, [r7, #8]
 800062c:	4b29      	ldr	r3, [pc, #164]	; (80006d4 <SystemClock_Config+0xd0>)
 800062e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000630:	4a28      	ldr	r2, [pc, #160]	; (80006d4 <SystemClock_Config+0xd0>)
 8000632:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000636:	6413      	str	r3, [r2, #64]	; 0x40
 8000638:	4b26      	ldr	r3, [pc, #152]	; (80006d4 <SystemClock_Config+0xd0>)
 800063a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800063c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000640:	60bb      	str	r3, [r7, #8]
 8000642:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000644:	2300      	movs	r3, #0
 8000646:	607b      	str	r3, [r7, #4]
 8000648:	4b23      	ldr	r3, [pc, #140]	; (80006d8 <SystemClock_Config+0xd4>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000650:	4a21      	ldr	r2, [pc, #132]	; (80006d8 <SystemClock_Config+0xd4>)
 8000652:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000656:	6013      	str	r3, [r2, #0]
 8000658:	4b1f      	ldr	r3, [pc, #124]	; (80006d8 <SystemClock_Config+0xd4>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000660:	607b      	str	r3, [r7, #4]
 8000662:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000664:	2301      	movs	r3, #1
 8000666:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000668:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800066c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800066e:	2302      	movs	r3, #2
 8000670:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000672:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000676:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000678:	2304      	movs	r3, #4
 800067a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 800067c:	2354      	movs	r3, #84	; 0x54
 800067e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000680:	2302      	movs	r3, #2
 8000682:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000684:	2304      	movs	r3, #4
 8000686:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000688:	f107 0320 	add.w	r3, r7, #32
 800068c:	4618      	mov	r0, r3
 800068e:	f003 f82b 	bl	80036e8 <HAL_RCC_OscConfig>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000698:	f000 fbc4 	bl	8000e24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800069c:	230f      	movs	r3, #15
 800069e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a0:	2302      	movs	r3, #2
 80006a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a4:	2300      	movs	r3, #0
 80006a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006b2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006b4:	f107 030c 	add.w	r3, r7, #12
 80006b8:	2102      	movs	r1, #2
 80006ba:	4618      	mov	r0, r3
 80006bc:	f003 fa8c 	bl	8003bd8 <HAL_RCC_ClockConfig>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80006c6:	f000 fbad 	bl	8000e24 <Error_Handler>
  }
}
 80006ca:	bf00      	nop
 80006cc:	3750      	adds	r7, #80	; 0x50
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	40023800 	.word	0x40023800
 80006d8:	40007000 	.word	0x40007000

080006dc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b084      	sub	sp, #16
 80006e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006e2:	463b      	mov	r3, r7
 80006e4:	2200      	movs	r2, #0
 80006e6:	601a      	str	r2, [r3, #0]
 80006e8:	605a      	str	r2, [r3, #4]
 80006ea:	609a      	str	r2, [r3, #8]
 80006ec:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80006ee:	4b21      	ldr	r3, [pc, #132]	; (8000774 <MX_ADC1_Init+0x98>)
 80006f0:	4a21      	ldr	r2, [pc, #132]	; (8000778 <MX_ADC1_Init+0x9c>)
 80006f2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80006f4:	4b1f      	ldr	r3, [pc, #124]	; (8000774 <MX_ADC1_Init+0x98>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006fa:	4b1e      	ldr	r3, [pc, #120]	; (8000774 <MX_ADC1_Init+0x98>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000700:	4b1c      	ldr	r3, [pc, #112]	; (8000774 <MX_ADC1_Init+0x98>)
 8000702:	2200      	movs	r2, #0
 8000704:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000706:	4b1b      	ldr	r3, [pc, #108]	; (8000774 <MX_ADC1_Init+0x98>)
 8000708:	2200      	movs	r2, #0
 800070a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800070c:	4b19      	ldr	r3, [pc, #100]	; (8000774 <MX_ADC1_Init+0x98>)
 800070e:	2200      	movs	r2, #0
 8000710:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000714:	4b17      	ldr	r3, [pc, #92]	; (8000774 <MX_ADC1_Init+0x98>)
 8000716:	2200      	movs	r2, #0
 8000718:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800071a:	4b16      	ldr	r3, [pc, #88]	; (8000774 <MX_ADC1_Init+0x98>)
 800071c:	4a17      	ldr	r2, [pc, #92]	; (800077c <MX_ADC1_Init+0xa0>)
 800071e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000720:	4b14      	ldr	r3, [pc, #80]	; (8000774 <MX_ADC1_Init+0x98>)
 8000722:	2200      	movs	r2, #0
 8000724:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000726:	4b13      	ldr	r3, [pc, #76]	; (8000774 <MX_ADC1_Init+0x98>)
 8000728:	2201      	movs	r2, #1
 800072a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800072c:	4b11      	ldr	r3, [pc, #68]	; (8000774 <MX_ADC1_Init+0x98>)
 800072e:	2200      	movs	r2, #0
 8000730:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000734:	4b0f      	ldr	r3, [pc, #60]	; (8000774 <MX_ADC1_Init+0x98>)
 8000736:	2201      	movs	r2, #1
 8000738:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800073a:	480e      	ldr	r0, [pc, #56]	; (8000774 <MX_ADC1_Init+0x98>)
 800073c:	f001 fade 	bl	8001cfc <HAL_ADC_Init>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000746:	f000 fb6d 	bl	8000e24 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800074a:	2301      	movs	r3, #1
 800074c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800074e:	2301      	movs	r3, #1
 8000750:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000752:	2300      	movs	r3, #0
 8000754:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000756:	463b      	mov	r3, r7
 8000758:	4619      	mov	r1, r3
 800075a:	4806      	ldr	r0, [pc, #24]	; (8000774 <MX_ADC1_Init+0x98>)
 800075c:	f001 fb12 	bl	8001d84 <HAL_ADC_ConfigChannel>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000766:	f000 fb5d 	bl	8000e24 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800076a:	bf00      	nop
 800076c:	3710      	adds	r7, #16
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	200010b0 	.word	0x200010b0
 8000778:	40012000 	.word	0x40012000
 800077c:	0f000001 	.word	0x0f000001

08000780 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000784:	4b12      	ldr	r3, [pc, #72]	; (80007d0 <MX_I2C1_Init+0x50>)
 8000786:	4a13      	ldr	r2, [pc, #76]	; (80007d4 <MX_I2C1_Init+0x54>)
 8000788:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800078a:	4b11      	ldr	r3, [pc, #68]	; (80007d0 <MX_I2C1_Init+0x50>)
 800078c:	4a12      	ldr	r2, [pc, #72]	; (80007d8 <MX_I2C1_Init+0x58>)
 800078e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000790:	4b0f      	ldr	r3, [pc, #60]	; (80007d0 <MX_I2C1_Init+0x50>)
 8000792:	2200      	movs	r2, #0
 8000794:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000796:	4b0e      	ldr	r3, [pc, #56]	; (80007d0 <MX_I2C1_Init+0x50>)
 8000798:	2200      	movs	r2, #0
 800079a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800079c:	4b0c      	ldr	r3, [pc, #48]	; (80007d0 <MX_I2C1_Init+0x50>)
 800079e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007a2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007a4:	4b0a      	ldr	r3, [pc, #40]	; (80007d0 <MX_I2C1_Init+0x50>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007aa:	4b09      	ldr	r3, [pc, #36]	; (80007d0 <MX_I2C1_Init+0x50>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007b0:	4b07      	ldr	r3, [pc, #28]	; (80007d0 <MX_I2C1_Init+0x50>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007b6:	4b06      	ldr	r3, [pc, #24]	; (80007d0 <MX_I2C1_Init+0x50>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007bc:	4804      	ldr	r0, [pc, #16]	; (80007d0 <MX_I2C1_Init+0x50>)
 80007be:	f001 ffd3 	bl	8002768 <HAL_I2C_Init>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007c8:	f000 fb2c 	bl	8000e24 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007cc:	bf00      	nop
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	200010f8 	.word	0x200010f8
 80007d4:	40005400 	.word	0x40005400
 80007d8:	000186a0 	.word	0x000186a0

080007dc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80007e0:	4b12      	ldr	r3, [pc, #72]	; (800082c <MX_I2C2_Init+0x50>)
 80007e2:	4a13      	ldr	r2, [pc, #76]	; (8000830 <MX_I2C2_Init+0x54>)
 80007e4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80007e6:	4b11      	ldr	r3, [pc, #68]	; (800082c <MX_I2C2_Init+0x50>)
 80007e8:	4a12      	ldr	r2, [pc, #72]	; (8000834 <MX_I2C2_Init+0x58>)
 80007ea:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007ec:	4b0f      	ldr	r3, [pc, #60]	; (800082c <MX_I2C2_Init+0x50>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80007f2:	4b0e      	ldr	r3, [pc, #56]	; (800082c <MX_I2C2_Init+0x50>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007f8:	4b0c      	ldr	r3, [pc, #48]	; (800082c <MX_I2C2_Init+0x50>)
 80007fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007fe:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000800:	4b0a      	ldr	r3, [pc, #40]	; (800082c <MX_I2C2_Init+0x50>)
 8000802:	2200      	movs	r2, #0
 8000804:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000806:	4b09      	ldr	r3, [pc, #36]	; (800082c <MX_I2C2_Init+0x50>)
 8000808:	2200      	movs	r2, #0
 800080a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800080c:	4b07      	ldr	r3, [pc, #28]	; (800082c <MX_I2C2_Init+0x50>)
 800080e:	2200      	movs	r2, #0
 8000810:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000812:	4b06      	ldr	r3, [pc, #24]	; (800082c <MX_I2C2_Init+0x50>)
 8000814:	2200      	movs	r2, #0
 8000816:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000818:	4804      	ldr	r0, [pc, #16]	; (800082c <MX_I2C2_Init+0x50>)
 800081a:	f001 ffa5 	bl	8002768 <HAL_I2C_Init>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000824:	f000 fafe 	bl	8000e24 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000828:	bf00      	nop
 800082a:	bd80      	pop	{r7, pc}
 800082c:	2000114c 	.word	0x2000114c
 8000830:	40005800 	.word	0x40005800
 8000834:	000186a0 	.word	0x000186a0

08000838 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800083c:	4b12      	ldr	r3, [pc, #72]	; (8000888 <MX_I2C3_Init+0x50>)
 800083e:	4a13      	ldr	r2, [pc, #76]	; (800088c <MX_I2C3_Init+0x54>)
 8000840:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000842:	4b11      	ldr	r3, [pc, #68]	; (8000888 <MX_I2C3_Init+0x50>)
 8000844:	4a12      	ldr	r2, [pc, #72]	; (8000890 <MX_I2C3_Init+0x58>)
 8000846:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000848:	4b0f      	ldr	r3, [pc, #60]	; (8000888 <MX_I2C3_Init+0x50>)
 800084a:	2200      	movs	r2, #0
 800084c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800084e:	4b0e      	ldr	r3, [pc, #56]	; (8000888 <MX_I2C3_Init+0x50>)
 8000850:	2200      	movs	r2, #0
 8000852:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000854:	4b0c      	ldr	r3, [pc, #48]	; (8000888 <MX_I2C3_Init+0x50>)
 8000856:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800085a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800085c:	4b0a      	ldr	r3, [pc, #40]	; (8000888 <MX_I2C3_Init+0x50>)
 800085e:	2200      	movs	r2, #0
 8000860:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000862:	4b09      	ldr	r3, [pc, #36]	; (8000888 <MX_I2C3_Init+0x50>)
 8000864:	2200      	movs	r2, #0
 8000866:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000868:	4b07      	ldr	r3, [pc, #28]	; (8000888 <MX_I2C3_Init+0x50>)
 800086a:	2200      	movs	r2, #0
 800086c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800086e:	4b06      	ldr	r3, [pc, #24]	; (8000888 <MX_I2C3_Init+0x50>)
 8000870:	2200      	movs	r2, #0
 8000872:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000874:	4804      	ldr	r0, [pc, #16]	; (8000888 <MX_I2C3_Init+0x50>)
 8000876:	f001 ff77 	bl	8002768 <HAL_I2C_Init>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000880:	f000 fad0 	bl	8000e24 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000884:	bf00      	nop
 8000886:	bd80      	pop	{r7, pc}
 8000888:	200011a0 	.word	0x200011a0
 800088c:	40005c00 	.word	0x40005c00
 8000890:	000186a0 	.word	0x000186a0

08000894 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000898:	4b17      	ldr	r3, [pc, #92]	; (80008f8 <MX_SPI1_Init+0x64>)
 800089a:	4a18      	ldr	r2, [pc, #96]	; (80008fc <MX_SPI1_Init+0x68>)
 800089c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800089e:	4b16      	ldr	r3, [pc, #88]	; (80008f8 <MX_SPI1_Init+0x64>)
 80008a0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008a4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008a6:	4b14      	ldr	r3, [pc, #80]	; (80008f8 <MX_SPI1_Init+0x64>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80008ac:	4b12      	ldr	r3, [pc, #72]	; (80008f8 <MX_SPI1_Init+0x64>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008b2:	4b11      	ldr	r3, [pc, #68]	; (80008f8 <MX_SPI1_Init+0x64>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008b8:	4b0f      	ldr	r3, [pc, #60]	; (80008f8 <MX_SPI1_Init+0x64>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80008be:	4b0e      	ldr	r3, [pc, #56]	; (80008f8 <MX_SPI1_Init+0x64>)
 80008c0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80008c4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008c6:	4b0c      	ldr	r3, [pc, #48]	; (80008f8 <MX_SPI1_Init+0x64>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008cc:	4b0a      	ldr	r3, [pc, #40]	; (80008f8 <MX_SPI1_Init+0x64>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008d2:	4b09      	ldr	r3, [pc, #36]	; (80008f8 <MX_SPI1_Init+0x64>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008d8:	4b07      	ldr	r3, [pc, #28]	; (80008f8 <MX_SPI1_Init+0x64>)
 80008da:	2200      	movs	r2, #0
 80008dc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80008de:	4b06      	ldr	r3, [pc, #24]	; (80008f8 <MX_SPI1_Init+0x64>)
 80008e0:	220a      	movs	r2, #10
 80008e2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008e4:	4804      	ldr	r0, [pc, #16]	; (80008f8 <MX_SPI1_Init+0x64>)
 80008e6:	f003 fb97 	bl	8004018 <HAL_SPI_Init>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80008f0:	f000 fa98 	bl	8000e24 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008f4:	bf00      	nop
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	200011f4 	.word	0x200011f4
 80008fc:	40013000 	.word	0x40013000

08000900 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000904:	4b17      	ldr	r3, [pc, #92]	; (8000964 <MX_SPI2_Init+0x64>)
 8000906:	4a18      	ldr	r2, [pc, #96]	; (8000968 <MX_SPI2_Init+0x68>)
 8000908:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800090a:	4b16      	ldr	r3, [pc, #88]	; (8000964 <MX_SPI2_Init+0x64>)
 800090c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000910:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000912:	4b14      	ldr	r3, [pc, #80]	; (8000964 <MX_SPI2_Init+0x64>)
 8000914:	2200      	movs	r2, #0
 8000916:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000918:	4b12      	ldr	r3, [pc, #72]	; (8000964 <MX_SPI2_Init+0x64>)
 800091a:	2200      	movs	r2, #0
 800091c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800091e:	4b11      	ldr	r3, [pc, #68]	; (8000964 <MX_SPI2_Init+0x64>)
 8000920:	2200      	movs	r2, #0
 8000922:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000924:	4b0f      	ldr	r3, [pc, #60]	; (8000964 <MX_SPI2_Init+0x64>)
 8000926:	2200      	movs	r2, #0
 8000928:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800092a:	4b0e      	ldr	r3, [pc, #56]	; (8000964 <MX_SPI2_Init+0x64>)
 800092c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000930:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000932:	4b0c      	ldr	r3, [pc, #48]	; (8000964 <MX_SPI2_Init+0x64>)
 8000934:	2200      	movs	r2, #0
 8000936:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000938:	4b0a      	ldr	r3, [pc, #40]	; (8000964 <MX_SPI2_Init+0x64>)
 800093a:	2200      	movs	r2, #0
 800093c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800093e:	4b09      	ldr	r3, [pc, #36]	; (8000964 <MX_SPI2_Init+0x64>)
 8000940:	2200      	movs	r2, #0
 8000942:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000944:	4b07      	ldr	r3, [pc, #28]	; (8000964 <MX_SPI2_Init+0x64>)
 8000946:	2200      	movs	r2, #0
 8000948:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800094a:	4b06      	ldr	r3, [pc, #24]	; (8000964 <MX_SPI2_Init+0x64>)
 800094c:	220a      	movs	r2, #10
 800094e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000950:	4804      	ldr	r0, [pc, #16]	; (8000964 <MX_SPI2_Init+0x64>)
 8000952:	f003 fb61 	bl	8004018 <HAL_SPI_Init>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800095c:	f000 fa62 	bl	8000e24 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000960:	bf00      	nop
 8000962:	bd80      	pop	{r7, pc}
 8000964:	2000124c 	.word	0x2000124c
 8000968:	40003800 	.word	0x40003800

0800096c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000970:	4b17      	ldr	r3, [pc, #92]	; (80009d0 <MX_SPI3_Init+0x64>)
 8000972:	4a18      	ldr	r2, [pc, #96]	; (80009d4 <MX_SPI3_Init+0x68>)
 8000974:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000976:	4b16      	ldr	r3, [pc, #88]	; (80009d0 <MX_SPI3_Init+0x64>)
 8000978:	f44f 7282 	mov.w	r2, #260	; 0x104
 800097c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800097e:	4b14      	ldr	r3, [pc, #80]	; (80009d0 <MX_SPI3_Init+0x64>)
 8000980:	2200      	movs	r2, #0
 8000982:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000984:	4b12      	ldr	r3, [pc, #72]	; (80009d0 <MX_SPI3_Init+0x64>)
 8000986:	2200      	movs	r2, #0
 8000988:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800098a:	4b11      	ldr	r3, [pc, #68]	; (80009d0 <MX_SPI3_Init+0x64>)
 800098c:	2200      	movs	r2, #0
 800098e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000990:	4b0f      	ldr	r3, [pc, #60]	; (80009d0 <MX_SPI3_Init+0x64>)
 8000992:	2200      	movs	r2, #0
 8000994:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000996:	4b0e      	ldr	r3, [pc, #56]	; (80009d0 <MX_SPI3_Init+0x64>)
 8000998:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800099c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800099e:	4b0c      	ldr	r3, [pc, #48]	; (80009d0 <MX_SPI3_Init+0x64>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009a4:	4b0a      	ldr	r3, [pc, #40]	; (80009d0 <MX_SPI3_Init+0x64>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80009aa:	4b09      	ldr	r3, [pc, #36]	; (80009d0 <MX_SPI3_Init+0x64>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009b0:	4b07      	ldr	r3, [pc, #28]	; (80009d0 <MX_SPI3_Init+0x64>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 80009b6:	4b06      	ldr	r3, [pc, #24]	; (80009d0 <MX_SPI3_Init+0x64>)
 80009b8:	220a      	movs	r2, #10
 80009ba:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80009bc:	4804      	ldr	r0, [pc, #16]	; (80009d0 <MX_SPI3_Init+0x64>)
 80009be:	f003 fb2b 	bl	8004018 <HAL_SPI_Init>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80009c8:	f000 fa2c 	bl	8000e24 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80009cc:	bf00      	nop
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	200012a4 	.word	0x200012a4
 80009d4:	40003c00 	.word	0x40003c00

080009d8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b08a      	sub	sp, #40	; 0x28
 80009dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009de:	f107 0320 	add.w	r3, r7, #32
 80009e2:	2200      	movs	r2, #0
 80009e4:	601a      	str	r2, [r3, #0]
 80009e6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009e8:	1d3b      	adds	r3, r7, #4
 80009ea:	2200      	movs	r2, #0
 80009ec:	601a      	str	r2, [r3, #0]
 80009ee:	605a      	str	r2, [r3, #4]
 80009f0:	609a      	str	r2, [r3, #8]
 80009f2:	60da      	str	r2, [r3, #12]
 80009f4:	611a      	str	r2, [r3, #16]
 80009f6:	615a      	str	r2, [r3, #20]
 80009f8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80009fa:	4b27      	ldr	r3, [pc, #156]	; (8000a98 <MX_TIM3_Init+0xc0>)
 80009fc:	4a27      	ldr	r2, [pc, #156]	; (8000a9c <MX_TIM3_Init+0xc4>)
 80009fe:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000a00:	4b25      	ldr	r3, [pc, #148]	; (8000a98 <MX_TIM3_Init+0xc0>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a06:	4b24      	ldr	r3, [pc, #144]	; (8000a98 <MX_TIM3_Init+0xc0>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000a0c:	4b22      	ldr	r3, [pc, #136]	; (8000a98 <MX_TIM3_Init+0xc0>)
 8000a0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a12:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a14:	4b20      	ldr	r3, [pc, #128]	; (8000a98 <MX_TIM3_Init+0xc0>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a1a:	4b1f      	ldr	r3, [pc, #124]	; (8000a98 <MX_TIM3_Init+0xc0>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000a20:	481d      	ldr	r0, [pc, #116]	; (8000a98 <MX_TIM3_Init+0xc0>)
 8000a22:	f003 fb82 	bl	800412a <HAL_TIM_PWM_Init>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000a2c:	f000 f9fa 	bl	8000e24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a30:	2300      	movs	r3, #0
 8000a32:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a34:	2300      	movs	r3, #0
 8000a36:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a38:	f107 0320 	add.w	r3, r7, #32
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	4816      	ldr	r0, [pc, #88]	; (8000a98 <MX_TIM3_Init+0xc0>)
 8000a40:	f003 fe90 	bl	8004764 <HAL_TIMEx_MasterConfigSynchronization>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000a4a:	f000 f9eb 	bl	8000e24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a4e:	2360      	movs	r3, #96	; 0x60
 8000a50:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000a52:	2300      	movs	r3, #0
 8000a54:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a56:	2300      	movs	r3, #0
 8000a58:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a5e:	1d3b      	adds	r3, r7, #4
 8000a60:	2208      	movs	r2, #8
 8000a62:	4619      	mov	r1, r3
 8000a64:	480c      	ldr	r0, [pc, #48]	; (8000a98 <MX_TIM3_Init+0xc0>)
 8000a66:	f003 fbaf 	bl	80041c8 <HAL_TIM_PWM_ConfigChannel>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000a70:	f000 f9d8 	bl	8000e24 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000a74:	1d3b      	adds	r3, r7, #4
 8000a76:	220c      	movs	r2, #12
 8000a78:	4619      	mov	r1, r3
 8000a7a:	4807      	ldr	r0, [pc, #28]	; (8000a98 <MX_TIM3_Init+0xc0>)
 8000a7c:	f003 fba4 	bl	80041c8 <HAL_TIM_PWM_ConfigChannel>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000a86:	f000 f9cd 	bl	8000e24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000a8a:	4803      	ldr	r0, [pc, #12]	; (8000a98 <MX_TIM3_Init+0xc0>)
 8000a8c:	f000 fc50 	bl	8001330 <HAL_TIM_MspPostInit>

}
 8000a90:	bf00      	nop
 8000a92:	3728      	adds	r7, #40	; 0x28
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	200012fc 	.word	0x200012fc
 8000a9c:	40000400 	.word	0x40000400

08000aa0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b08a      	sub	sp, #40	; 0x28
 8000aa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000aa6:	f107 0320 	add.w	r3, r7, #32
 8000aaa:	2200      	movs	r2, #0
 8000aac:	601a      	str	r2, [r3, #0]
 8000aae:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ab0:	1d3b      	adds	r3, r7, #4
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	601a      	str	r2, [r3, #0]
 8000ab6:	605a      	str	r2, [r3, #4]
 8000ab8:	609a      	str	r2, [r3, #8]
 8000aba:	60da      	str	r2, [r3, #12]
 8000abc:	611a      	str	r2, [r3, #16]
 8000abe:	615a      	str	r2, [r3, #20]
 8000ac0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000ac2:	4b22      	ldr	r3, [pc, #136]	; (8000b4c <MX_TIM4_Init+0xac>)
 8000ac4:	4a22      	ldr	r2, [pc, #136]	; (8000b50 <MX_TIM4_Init+0xb0>)
 8000ac6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000ac8:	4b20      	ldr	r3, [pc, #128]	; (8000b4c <MX_TIM4_Init+0xac>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ace:	4b1f      	ldr	r3, [pc, #124]	; (8000b4c <MX_TIM4_Init+0xac>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000ad4:	4b1d      	ldr	r3, [pc, #116]	; (8000b4c <MX_TIM4_Init+0xac>)
 8000ad6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ada:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000adc:	4b1b      	ldr	r3, [pc, #108]	; (8000b4c <MX_TIM4_Init+0xac>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ae2:	4b1a      	ldr	r3, [pc, #104]	; (8000b4c <MX_TIM4_Init+0xac>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000ae8:	4818      	ldr	r0, [pc, #96]	; (8000b4c <MX_TIM4_Init+0xac>)
 8000aea:	f003 fb1e 	bl	800412a <HAL_TIM_PWM_Init>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8000af4:	f000 f996 	bl	8000e24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000af8:	2300      	movs	r3, #0
 8000afa:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000afc:	2300      	movs	r3, #0
 8000afe:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000b00:	f107 0320 	add.w	r3, r7, #32
 8000b04:	4619      	mov	r1, r3
 8000b06:	4811      	ldr	r0, [pc, #68]	; (8000b4c <MX_TIM4_Init+0xac>)
 8000b08:	f003 fe2c 	bl	8004764 <HAL_TIMEx_MasterConfigSynchronization>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8000b12:	f000 f987 	bl	8000e24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b16:	2360      	movs	r3, #96	; 0x60
 8000b18:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b22:	2300      	movs	r3, #0
 8000b24:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b26:	1d3b      	adds	r3, r7, #4
 8000b28:	2200      	movs	r2, #0
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	4807      	ldr	r0, [pc, #28]	; (8000b4c <MX_TIM4_Init+0xac>)
 8000b2e:	f003 fb4b 	bl	80041c8 <HAL_TIM_PWM_ConfigChannel>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8000b38:	f000 f974 	bl	8000e24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000b3c:	4803      	ldr	r0, [pc, #12]	; (8000b4c <MX_TIM4_Init+0xac>)
 8000b3e:	f000 fbf7 	bl	8001330 <HAL_TIM_MspPostInit>

}
 8000b42:	bf00      	nop
 8000b44:	3728      	adds	r7, #40	; 0x28
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	20001344 	.word	0x20001344
 8000b50:	40000800 	.word	0x40000800

08000b54 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b58:	4b11      	ldr	r3, [pc, #68]	; (8000ba0 <MX_USART1_UART_Init+0x4c>)
 8000b5a:	4a12      	ldr	r2, [pc, #72]	; (8000ba4 <MX_USART1_UART_Init+0x50>)
 8000b5c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b5e:	4b10      	ldr	r3, [pc, #64]	; (8000ba0 <MX_USART1_UART_Init+0x4c>)
 8000b60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b64:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b66:	4b0e      	ldr	r3, [pc, #56]	; (8000ba0 <MX_USART1_UART_Init+0x4c>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ba0 <MX_USART1_UART_Init+0x4c>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b72:	4b0b      	ldr	r3, [pc, #44]	; (8000ba0 <MX_USART1_UART_Init+0x4c>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b78:	4b09      	ldr	r3, [pc, #36]	; (8000ba0 <MX_USART1_UART_Init+0x4c>)
 8000b7a:	220c      	movs	r2, #12
 8000b7c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b7e:	4b08      	ldr	r3, [pc, #32]	; (8000ba0 <MX_USART1_UART_Init+0x4c>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b84:	4b06      	ldr	r3, [pc, #24]	; (8000ba0 <MX_USART1_UART_Init+0x4c>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b8a:	4805      	ldr	r0, [pc, #20]	; (8000ba0 <MX_USART1_UART_Init+0x4c>)
 8000b8c:	f003 fe58 	bl	8004840 <HAL_UART_Init>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000b96:	f000 f945 	bl	8000e24 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b9a:	bf00      	nop
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	2000138c 	.word	0x2000138c
 8000ba4:	40011000 	.word	0x40011000

08000ba8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000bac:	4b11      	ldr	r3, [pc, #68]	; (8000bf4 <MX_USART2_UART_Init+0x4c>)
 8000bae:	4a12      	ldr	r2, [pc, #72]	; (8000bf8 <MX_USART2_UART_Init+0x50>)
 8000bb0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000bb2:	4b10      	ldr	r3, [pc, #64]	; (8000bf4 <MX_USART2_UART_Init+0x4c>)
 8000bb4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bb8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bba:	4b0e      	ldr	r3, [pc, #56]	; (8000bf4 <MX_USART2_UART_Init+0x4c>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bc0:	4b0c      	ldr	r3, [pc, #48]	; (8000bf4 <MX_USART2_UART_Init+0x4c>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bc6:	4b0b      	ldr	r3, [pc, #44]	; (8000bf4 <MX_USART2_UART_Init+0x4c>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bcc:	4b09      	ldr	r3, [pc, #36]	; (8000bf4 <MX_USART2_UART_Init+0x4c>)
 8000bce:	220c      	movs	r2, #12
 8000bd0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bd2:	4b08      	ldr	r3, [pc, #32]	; (8000bf4 <MX_USART2_UART_Init+0x4c>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bd8:	4b06      	ldr	r3, [pc, #24]	; (8000bf4 <MX_USART2_UART_Init+0x4c>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bde:	4805      	ldr	r0, [pc, #20]	; (8000bf4 <MX_USART2_UART_Init+0x4c>)
 8000be0:	f003 fe2e 	bl	8004840 <HAL_UART_Init>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000bea:	f000 f91b 	bl	8000e24 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bee:	bf00      	nop
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	200013d0 	.word	0x200013d0
 8000bf8:	40004400 	.word	0x40004400

08000bfc <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000c00:	4b11      	ldr	r3, [pc, #68]	; (8000c48 <MX_USART6_UART_Init+0x4c>)
 8000c02:	4a12      	ldr	r2, [pc, #72]	; (8000c4c <MX_USART6_UART_Init+0x50>)
 8000c04:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000c06:	4b10      	ldr	r3, [pc, #64]	; (8000c48 <MX_USART6_UART_Init+0x4c>)
 8000c08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c0c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000c0e:	4b0e      	ldr	r3, [pc, #56]	; (8000c48 <MX_USART6_UART_Init+0x4c>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000c14:	4b0c      	ldr	r3, [pc, #48]	; (8000c48 <MX_USART6_UART_Init+0x4c>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000c1a:	4b0b      	ldr	r3, [pc, #44]	; (8000c48 <MX_USART6_UART_Init+0x4c>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000c20:	4b09      	ldr	r3, [pc, #36]	; (8000c48 <MX_USART6_UART_Init+0x4c>)
 8000c22:	220c      	movs	r2, #12
 8000c24:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c26:	4b08      	ldr	r3, [pc, #32]	; (8000c48 <MX_USART6_UART_Init+0x4c>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c2c:	4b06      	ldr	r3, [pc, #24]	; (8000c48 <MX_USART6_UART_Init+0x4c>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000c32:	4805      	ldr	r0, [pc, #20]	; (8000c48 <MX_USART6_UART_Init+0x4c>)
 8000c34:	f003 fe04 	bl	8004840 <HAL_UART_Init>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000c3e:	f000 f8f1 	bl	8000e24 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000c42:	bf00      	nop
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	20001414 	.word	0x20001414
 8000c4c:	40011400 	.word	0x40011400

08000c50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b08a      	sub	sp, #40	; 0x28
 8000c54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c56:	f107 0314 	add.w	r3, r7, #20
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	601a      	str	r2, [r3, #0]
 8000c5e:	605a      	str	r2, [r3, #4]
 8000c60:	609a      	str	r2, [r3, #8]
 8000c62:	60da      	str	r2, [r3, #12]
 8000c64:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c66:	2300      	movs	r3, #0
 8000c68:	613b      	str	r3, [r7, #16]
 8000c6a:	4b65      	ldr	r3, [pc, #404]	; (8000e00 <MX_GPIO_Init+0x1b0>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6e:	4a64      	ldr	r2, [pc, #400]	; (8000e00 <MX_GPIO_Init+0x1b0>)
 8000c70:	f043 0304 	orr.w	r3, r3, #4
 8000c74:	6313      	str	r3, [r2, #48]	; 0x30
 8000c76:	4b62      	ldr	r3, [pc, #392]	; (8000e00 <MX_GPIO_Init+0x1b0>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7a:	f003 0304 	and.w	r3, r3, #4
 8000c7e:	613b      	str	r3, [r7, #16]
 8000c80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c82:	2300      	movs	r3, #0
 8000c84:	60fb      	str	r3, [r7, #12]
 8000c86:	4b5e      	ldr	r3, [pc, #376]	; (8000e00 <MX_GPIO_Init+0x1b0>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8a:	4a5d      	ldr	r2, [pc, #372]	; (8000e00 <MX_GPIO_Init+0x1b0>)
 8000c8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c90:	6313      	str	r3, [r2, #48]	; 0x30
 8000c92:	4b5b      	ldr	r3, [pc, #364]	; (8000e00 <MX_GPIO_Init+0x1b0>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c9a:	60fb      	str	r3, [r7, #12]
 8000c9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	60bb      	str	r3, [r7, #8]
 8000ca2:	4b57      	ldr	r3, [pc, #348]	; (8000e00 <MX_GPIO_Init+0x1b0>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	4a56      	ldr	r2, [pc, #344]	; (8000e00 <MX_GPIO_Init+0x1b0>)
 8000ca8:	f043 0301 	orr.w	r3, r3, #1
 8000cac:	6313      	str	r3, [r2, #48]	; 0x30
 8000cae:	4b54      	ldr	r3, [pc, #336]	; (8000e00 <MX_GPIO_Init+0x1b0>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb2:	f003 0301 	and.w	r3, r3, #1
 8000cb6:	60bb      	str	r3, [r7, #8]
 8000cb8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cba:	2300      	movs	r3, #0
 8000cbc:	607b      	str	r3, [r7, #4]
 8000cbe:	4b50      	ldr	r3, [pc, #320]	; (8000e00 <MX_GPIO_Init+0x1b0>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc2:	4a4f      	ldr	r2, [pc, #316]	; (8000e00 <MX_GPIO_Init+0x1b0>)
 8000cc4:	f043 0302 	orr.w	r3, r3, #2
 8000cc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cca:	4b4d      	ldr	r3, [pc, #308]	; (8000e00 <MX_GPIO_Init+0x1b0>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cce:	f003 0302 	and.w	r3, r3, #2
 8000cd2:	607b      	str	r3, [r7, #4]
 8000cd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	603b      	str	r3, [r7, #0]
 8000cda:	4b49      	ldr	r3, [pc, #292]	; (8000e00 <MX_GPIO_Init+0x1b0>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cde:	4a48      	ldr	r2, [pc, #288]	; (8000e00 <MX_GPIO_Init+0x1b0>)
 8000ce0:	f043 0308 	orr.w	r3, r3, #8
 8000ce4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce6:	4b46      	ldr	r3, [pc, #280]	; (8000e00 <MX_GPIO_Init+0x1b0>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cea:	f003 0308 	and.w	r3, r3, #8
 8000cee:	603b      	str	r3, [r7, #0]
 8000cf0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, S0_Pin|S1_Pin|S2_Pin|GPIO_PIN_1
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	f24e 11a2 	movw	r1, #57762	; 0xe1a2
 8000cf8:	4842      	ldr	r0, [pc, #264]	; (8000e04 <MX_GPIO_Init+0x1b4>)
 8000cfa:	f001 fcf7 	bl	80026ec <HAL_GPIO_WritePin>
                          |RESET_Pin|TXEN_Pin|SET_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|DIO2_Pin|DIO1_Pin|DS_Pin
 8000cfe:	2200      	movs	r2, #0
 8000d00:	f24d 2130 	movw	r1, #53808	; 0xd230
 8000d04:	4840      	ldr	r0, [pc, #256]	; (8000e08 <MX_GPIO_Init+0x1b8>)
 8000d06:	f001 fcf1 	bl	80026ec <HAL_GPIO_WritePin>
                          |SQ_Pin|LED_RESET_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2104      	movs	r1, #4
 8000d0e:	483f      	ldr	r0, [pc, #252]	; (8000e0c <MX_GPIO_Init+0x1bc>)
 8000d10:	f001 fcec 	bl	80026ec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : S0_Pin S1_Pin S2_Pin PC1
                           RESET_Pin TXEN_Pin SET_Pin */
  GPIO_InitStruct.Pin = S0_Pin|S1_Pin|S2_Pin|GPIO_PIN_1
 8000d14:	f24e 13a2 	movw	r3, #57762	; 0xe1a2
 8000d18:	617b      	str	r3, [r7, #20]
                          |RESET_Pin|TXEN_Pin|SET_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d22:	2300      	movs	r3, #0
 8000d24:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d26:	f107 0314 	add.w	r3, r7, #20
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	4835      	ldr	r0, [pc, #212]	; (8000e04 <MX_GPIO_Init+0x1b4>)
 8000d2e:	f001 fb59 	bl	80023e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d32:	2301      	movs	r3, #1
 8000d34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d36:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d40:	f107 0314 	add.w	r3, r7, #20
 8000d44:	4619      	mov	r1, r3
 8000d46:	482f      	ldr	r0, [pc, #188]	; (8000e04 <MX_GPIO_Init+0x1b4>)
 8000d48:	f001 fb4c 	bl	80023e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d50:	2302      	movs	r3, #2
 8000d52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d54:	2300      	movs	r3, #0
 8000d56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d60:	f107 0314 	add.w	r3, r7, #20
 8000d64:	4619      	mov	r1, r3
 8000d66:	482a      	ldr	r0, [pc, #168]	; (8000e10 <MX_GPIO_Init+0x1c0>)
 8000d68:	f001 fb3c 	bl	80023e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUSY_Pin RXEN_Pin */
  GPIO_InitStruct.Pin = BUSY_Pin|RXEN_Pin;
 8000d6c:	2350      	movs	r3, #80	; 0x50
 8000d6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d70:	2303      	movs	r3, #3
 8000d72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d74:	2300      	movs	r3, #0
 8000d76:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d78:	f107 0314 	add.w	r3, r7, #20
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	4821      	ldr	r0, [pc, #132]	; (8000e04 <MX_GPIO_Init+0x1b4>)
 8000d80:	f001 fb30 	bl	80023e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000d84:	2304      	movs	r3, #4
 8000d86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d88:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d92:	f107 0314 	add.w	r3, r7, #20
 8000d96:	4619      	mov	r1, r3
 8000d98:	481b      	ldr	r0, [pc, #108]	; (8000e08 <MX_GPIO_Init+0x1b8>)
 8000d9a:	f001 fb23 	bl	80023e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 DIO2_Pin DIO1_Pin DS_Pin
                           SQ_Pin LED_RESET_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_12|DIO2_Pin|DIO1_Pin|DS_Pin
 8000d9e:	f24d 2330 	movw	r3, #53808	; 0xd230
 8000da2:	617b      	str	r3, [r7, #20]
                          |SQ_Pin|LED_RESET_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000da4:	2301      	movs	r3, #1
 8000da6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da8:	2300      	movs	r3, #0
 8000daa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dac:	2300      	movs	r3, #0
 8000dae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000db0:	f107 0314 	add.w	r3, r7, #20
 8000db4:	4619      	mov	r1, r3
 8000db6:	4814      	ldr	r0, [pc, #80]	; (8000e08 <MX_GPIO_Init+0x1b8>)
 8000db8:	f001 fb14 	bl	80023e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000dbc:	2304      	movs	r3, #4
 8000dbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dcc:	f107 0314 	add.w	r3, r7, #20
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	480e      	ldr	r0, [pc, #56]	; (8000e0c <MX_GPIO_Init+0x1bc>)
 8000dd4:	f001 fb06 	bl	80023e4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000dd8:	2200      	movs	r2, #0
 8000dda:	2105      	movs	r1, #5
 8000ddc:	2006      	movs	r0, #6
 8000dde:	f001 faca 	bl	8002376 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000de2:	2006      	movs	r0, #6
 8000de4:	f001 fae3 	bl	80023ae <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8000de8:	2200      	movs	r2, #0
 8000dea:	2105      	movs	r1, #5
 8000dec:	2008      	movs	r0, #8
 8000dee:	f001 fac2 	bl	8002376 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000df2:	2008      	movs	r0, #8
 8000df4:	f001 fadb 	bl	80023ae <HAL_NVIC_EnableIRQ>

}
 8000df8:	bf00      	nop
 8000dfa:	3728      	adds	r7, #40	; 0x28
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	40023800 	.word	0x40023800
 8000e04:	40020800 	.word	0x40020800
 8000e08:	40020400 	.word	0x40020400
 8000e0c:	40020c00 	.word	0x40020c00
 8000e10:	40020000 	.word	0x40020000

08000e14 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000e1c:	2001      	movs	r0, #1
 8000e1e:	f007 fe21 	bl	8008a64 <osDelay>
 8000e22:	e7fb      	b.n	8000e1c <StartDefaultTask+0x8>

08000e24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e28:	b672      	cpsid	i
}
 8000e2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e2c:	e7fe      	b.n	8000e2c <Error_Handler+0x8>
	...

08000e30 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e36:	2300      	movs	r3, #0
 8000e38:	607b      	str	r3, [r7, #4]
 8000e3a:	4b12      	ldr	r3, [pc, #72]	; (8000e84 <HAL_MspInit+0x54>)
 8000e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e3e:	4a11      	ldr	r2, [pc, #68]	; (8000e84 <HAL_MspInit+0x54>)
 8000e40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e44:	6453      	str	r3, [r2, #68]	; 0x44
 8000e46:	4b0f      	ldr	r3, [pc, #60]	; (8000e84 <HAL_MspInit+0x54>)
 8000e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e4e:	607b      	str	r3, [r7, #4]
 8000e50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e52:	2300      	movs	r3, #0
 8000e54:	603b      	str	r3, [r7, #0]
 8000e56:	4b0b      	ldr	r3, [pc, #44]	; (8000e84 <HAL_MspInit+0x54>)
 8000e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5a:	4a0a      	ldr	r2, [pc, #40]	; (8000e84 <HAL_MspInit+0x54>)
 8000e5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e60:	6413      	str	r3, [r2, #64]	; 0x40
 8000e62:	4b08      	ldr	r3, [pc, #32]	; (8000e84 <HAL_MspInit+0x54>)
 8000e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e6a:	603b      	str	r3, [r7, #0]
 8000e6c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000e6e:	2200      	movs	r2, #0
 8000e70:	210f      	movs	r1, #15
 8000e72:	f06f 0001 	mvn.w	r0, #1
 8000e76:	f001 fa7e 	bl	8002376 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e7a:	bf00      	nop
 8000e7c:	3708      	adds	r7, #8
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	40023800 	.word	0x40023800

08000e88 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b08a      	sub	sp, #40	; 0x28
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e90:	f107 0314 	add.w	r3, r7, #20
 8000e94:	2200      	movs	r2, #0
 8000e96:	601a      	str	r2, [r3, #0]
 8000e98:	605a      	str	r2, [r3, #4]
 8000e9a:	609a      	str	r2, [r3, #8]
 8000e9c:	60da      	str	r2, [r3, #12]
 8000e9e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a17      	ldr	r2, [pc, #92]	; (8000f04 <HAL_ADC_MspInit+0x7c>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d127      	bne.n	8000efa <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000eaa:	2300      	movs	r3, #0
 8000eac:	613b      	str	r3, [r7, #16]
 8000eae:	4b16      	ldr	r3, [pc, #88]	; (8000f08 <HAL_ADC_MspInit+0x80>)
 8000eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eb2:	4a15      	ldr	r2, [pc, #84]	; (8000f08 <HAL_ADC_MspInit+0x80>)
 8000eb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eb8:	6453      	str	r3, [r2, #68]	; 0x44
 8000eba:	4b13      	ldr	r3, [pc, #76]	; (8000f08 <HAL_ADC_MspInit+0x80>)
 8000ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ebe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ec2:	613b      	str	r3, [r7, #16]
 8000ec4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	60fb      	str	r3, [r7, #12]
 8000eca:	4b0f      	ldr	r3, [pc, #60]	; (8000f08 <HAL_ADC_MspInit+0x80>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ece:	4a0e      	ldr	r2, [pc, #56]	; (8000f08 <HAL_ADC_MspInit+0x80>)
 8000ed0:	f043 0301 	orr.w	r3, r3, #1
 8000ed4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed6:	4b0c      	ldr	r3, [pc, #48]	; (8000f08 <HAL_ADC_MspInit+0x80>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eda:	f003 0301 	and.w	r3, r3, #1
 8000ede:	60fb      	str	r3, [r7, #12]
 8000ee0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000ee2:	2302      	movs	r3, #2
 8000ee4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ee6:	2303      	movs	r3, #3
 8000ee8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eea:	2300      	movs	r3, #0
 8000eec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eee:	f107 0314 	add.w	r3, r7, #20
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	4805      	ldr	r0, [pc, #20]	; (8000f0c <HAL_ADC_MspInit+0x84>)
 8000ef6:	f001 fa75 	bl	80023e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000efa:	bf00      	nop
 8000efc:	3728      	adds	r7, #40	; 0x28
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	40012000 	.word	0x40012000
 8000f08:	40023800 	.word	0x40023800
 8000f0c:	40020000 	.word	0x40020000

08000f10 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b08e      	sub	sp, #56	; 0x38
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]
 8000f20:	605a      	str	r2, [r3, #4]
 8000f22:	609a      	str	r2, [r3, #8]
 8000f24:	60da      	str	r2, [r3, #12]
 8000f26:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a64      	ldr	r2, [pc, #400]	; (80010c0 <HAL_I2C_MspInit+0x1b0>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d12d      	bne.n	8000f8e <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f32:	2300      	movs	r3, #0
 8000f34:	623b      	str	r3, [r7, #32]
 8000f36:	4b63      	ldr	r3, [pc, #396]	; (80010c4 <HAL_I2C_MspInit+0x1b4>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3a:	4a62      	ldr	r2, [pc, #392]	; (80010c4 <HAL_I2C_MspInit+0x1b4>)
 8000f3c:	f043 0302 	orr.w	r3, r3, #2
 8000f40:	6313      	str	r3, [r2, #48]	; 0x30
 8000f42:	4b60      	ldr	r3, [pc, #384]	; (80010c4 <HAL_I2C_MspInit+0x1b4>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f46:	f003 0302 	and.w	r3, r3, #2
 8000f4a:	623b      	str	r3, [r7, #32]
 8000f4c:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000f4e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000f52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f54:	2312      	movs	r3, #18
 8000f56:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f5c:	2303      	movs	r3, #3
 8000f5e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f60:	2304      	movs	r3, #4
 8000f62:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f68:	4619      	mov	r1, r3
 8000f6a:	4857      	ldr	r0, [pc, #348]	; (80010c8 <HAL_I2C_MspInit+0x1b8>)
 8000f6c:	f001 fa3a 	bl	80023e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f70:	2300      	movs	r3, #0
 8000f72:	61fb      	str	r3, [r7, #28]
 8000f74:	4b53      	ldr	r3, [pc, #332]	; (80010c4 <HAL_I2C_MspInit+0x1b4>)
 8000f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f78:	4a52      	ldr	r2, [pc, #328]	; (80010c4 <HAL_I2C_MspInit+0x1b4>)
 8000f7a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f7e:	6413      	str	r3, [r2, #64]	; 0x40
 8000f80:	4b50      	ldr	r3, [pc, #320]	; (80010c4 <HAL_I2C_MspInit+0x1b4>)
 8000f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f88:	61fb      	str	r3, [r7, #28]
 8000f8a:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8000f8c:	e093      	b.n	80010b6 <HAL_I2C_MspInit+0x1a6>
  else if(hi2c->Instance==I2C2)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4a4e      	ldr	r2, [pc, #312]	; (80010cc <HAL_I2C_MspInit+0x1bc>)
 8000f94:	4293      	cmp	r3, r2
 8000f96:	d13d      	bne.n	8001014 <HAL_I2C_MspInit+0x104>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f98:	2300      	movs	r3, #0
 8000f9a:	61bb      	str	r3, [r7, #24]
 8000f9c:	4b49      	ldr	r3, [pc, #292]	; (80010c4 <HAL_I2C_MspInit+0x1b4>)
 8000f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa0:	4a48      	ldr	r2, [pc, #288]	; (80010c4 <HAL_I2C_MspInit+0x1b4>)
 8000fa2:	f043 0302 	orr.w	r3, r3, #2
 8000fa6:	6313      	str	r3, [r2, #48]	; 0x30
 8000fa8:	4b46      	ldr	r3, [pc, #280]	; (80010c4 <HAL_I2C_MspInit+0x1b4>)
 8000faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fac:	f003 0302 	and.w	r3, r3, #2
 8000fb0:	61bb      	str	r3, [r7, #24]
 8000fb2:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000fb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fb8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fba:	2312      	movs	r3, #18
 8000fbc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fc2:	2303      	movs	r3, #3
 8000fc4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000fc6:	2304      	movs	r3, #4
 8000fc8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fce:	4619      	mov	r1, r3
 8000fd0:	483d      	ldr	r0, [pc, #244]	; (80010c8 <HAL_I2C_MspInit+0x1b8>)
 8000fd2:	f001 fa07 	bl	80023e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000fd6:	2308      	movs	r3, #8
 8000fd8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fda:	2312      	movs	r3, #18
 8000fdc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fe2:	2303      	movs	r3, #3
 8000fe4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8000fe6:	2309      	movs	r3, #9
 8000fe8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fee:	4619      	mov	r1, r3
 8000ff0:	4835      	ldr	r0, [pc, #212]	; (80010c8 <HAL_I2C_MspInit+0x1b8>)
 8000ff2:	f001 f9f7 	bl	80023e4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	617b      	str	r3, [r7, #20]
 8000ffa:	4b32      	ldr	r3, [pc, #200]	; (80010c4 <HAL_I2C_MspInit+0x1b4>)
 8000ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffe:	4a31      	ldr	r2, [pc, #196]	; (80010c4 <HAL_I2C_MspInit+0x1b4>)
 8001000:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001004:	6413      	str	r3, [r2, #64]	; 0x40
 8001006:	4b2f      	ldr	r3, [pc, #188]	; (80010c4 <HAL_I2C_MspInit+0x1b4>)
 8001008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800100e:	617b      	str	r3, [r7, #20]
 8001010:	697b      	ldr	r3, [r7, #20]
}
 8001012:	e050      	b.n	80010b6 <HAL_I2C_MspInit+0x1a6>
  else if(hi2c->Instance==I2C3)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a2d      	ldr	r2, [pc, #180]	; (80010d0 <HAL_I2C_MspInit+0x1c0>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d14b      	bne.n	80010b6 <HAL_I2C_MspInit+0x1a6>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800101e:	2300      	movs	r3, #0
 8001020:	613b      	str	r3, [r7, #16]
 8001022:	4b28      	ldr	r3, [pc, #160]	; (80010c4 <HAL_I2C_MspInit+0x1b4>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001026:	4a27      	ldr	r2, [pc, #156]	; (80010c4 <HAL_I2C_MspInit+0x1b4>)
 8001028:	f043 0304 	orr.w	r3, r3, #4
 800102c:	6313      	str	r3, [r2, #48]	; 0x30
 800102e:	4b25      	ldr	r3, [pc, #148]	; (80010c4 <HAL_I2C_MspInit+0x1b4>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001032:	f003 0304 	and.w	r3, r3, #4
 8001036:	613b      	str	r3, [r7, #16]
 8001038:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800103a:	2300      	movs	r3, #0
 800103c:	60fb      	str	r3, [r7, #12]
 800103e:	4b21      	ldr	r3, [pc, #132]	; (80010c4 <HAL_I2C_MspInit+0x1b4>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001042:	4a20      	ldr	r2, [pc, #128]	; (80010c4 <HAL_I2C_MspInit+0x1b4>)
 8001044:	f043 0301 	orr.w	r3, r3, #1
 8001048:	6313      	str	r3, [r2, #48]	; 0x30
 800104a:	4b1e      	ldr	r3, [pc, #120]	; (80010c4 <HAL_I2C_MspInit+0x1b4>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104e:	f003 0301 	and.w	r3, r3, #1
 8001052:	60fb      	str	r3, [r7, #12]
 8001054:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001056:	f44f 7300 	mov.w	r3, #512	; 0x200
 800105a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800105c:	2312      	movs	r3, #18
 800105e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001060:	2300      	movs	r3, #0
 8001062:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001064:	2303      	movs	r3, #3
 8001066:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001068:	2304      	movs	r3, #4
 800106a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800106c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001070:	4619      	mov	r1, r3
 8001072:	4818      	ldr	r0, [pc, #96]	; (80010d4 <HAL_I2C_MspInit+0x1c4>)
 8001074:	f001 f9b6 	bl	80023e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001078:	f44f 7380 	mov.w	r3, #256	; 0x100
 800107c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800107e:	2312      	movs	r3, #18
 8001080:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001082:	2300      	movs	r3, #0
 8001084:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001086:	2303      	movs	r3, #3
 8001088:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800108a:	2304      	movs	r3, #4
 800108c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800108e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001092:	4619      	mov	r1, r3
 8001094:	4810      	ldr	r0, [pc, #64]	; (80010d8 <HAL_I2C_MspInit+0x1c8>)
 8001096:	f001 f9a5 	bl	80023e4 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800109a:	2300      	movs	r3, #0
 800109c:	60bb      	str	r3, [r7, #8]
 800109e:	4b09      	ldr	r3, [pc, #36]	; (80010c4 <HAL_I2C_MspInit+0x1b4>)
 80010a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a2:	4a08      	ldr	r2, [pc, #32]	; (80010c4 <HAL_I2C_MspInit+0x1b4>)
 80010a4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80010a8:	6413      	str	r3, [r2, #64]	; 0x40
 80010aa:	4b06      	ldr	r3, [pc, #24]	; (80010c4 <HAL_I2C_MspInit+0x1b4>)
 80010ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80010b2:	60bb      	str	r3, [r7, #8]
 80010b4:	68bb      	ldr	r3, [r7, #8]
}
 80010b6:	bf00      	nop
 80010b8:	3738      	adds	r7, #56	; 0x38
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	40005400 	.word	0x40005400
 80010c4:	40023800 	.word	0x40023800
 80010c8:	40020400 	.word	0x40020400
 80010cc:	40005800 	.word	0x40005800
 80010d0:	40005c00 	.word	0x40005c00
 80010d4:	40020800 	.word	0x40020800
 80010d8:	40020000 	.word	0x40020000

080010dc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b090      	sub	sp, #64	; 0x40
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010e8:	2200      	movs	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]
 80010ec:	605a      	str	r2, [r3, #4]
 80010ee:	609a      	str	r2, [r3, #8]
 80010f0:	60da      	str	r2, [r3, #12]
 80010f2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a6a      	ldr	r2, [pc, #424]	; (80012a4 <HAL_SPI_MspInit+0x1c8>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d12c      	bne.n	8001158 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80010fe:	2300      	movs	r3, #0
 8001100:	62bb      	str	r3, [r7, #40]	; 0x28
 8001102:	4b69      	ldr	r3, [pc, #420]	; (80012a8 <HAL_SPI_MspInit+0x1cc>)
 8001104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001106:	4a68      	ldr	r2, [pc, #416]	; (80012a8 <HAL_SPI_MspInit+0x1cc>)
 8001108:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800110c:	6453      	str	r3, [r2, #68]	; 0x44
 800110e:	4b66      	ldr	r3, [pc, #408]	; (80012a8 <HAL_SPI_MspInit+0x1cc>)
 8001110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001112:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001116:	62bb      	str	r3, [r7, #40]	; 0x28
 8001118:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800111a:	2300      	movs	r3, #0
 800111c:	627b      	str	r3, [r7, #36]	; 0x24
 800111e:	4b62      	ldr	r3, [pc, #392]	; (80012a8 <HAL_SPI_MspInit+0x1cc>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001122:	4a61      	ldr	r2, [pc, #388]	; (80012a8 <HAL_SPI_MspInit+0x1cc>)
 8001124:	f043 0301 	orr.w	r3, r3, #1
 8001128:	6313      	str	r3, [r2, #48]	; 0x30
 800112a:	4b5f      	ldr	r3, [pc, #380]	; (80012a8 <HAL_SPI_MspInit+0x1cc>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112e:	f003 0301 	and.w	r3, r3, #1
 8001132:	627b      	str	r3, [r7, #36]	; 0x24
 8001134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001136:	23f0      	movs	r3, #240	; 0xf0
 8001138:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800113a:	2302      	movs	r3, #2
 800113c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113e:	2300      	movs	r3, #0
 8001140:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001142:	2303      	movs	r3, #3
 8001144:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001146:	2305      	movs	r3, #5
 8001148:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800114a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800114e:	4619      	mov	r1, r3
 8001150:	4856      	ldr	r0, [pc, #344]	; (80012ac <HAL_SPI_MspInit+0x1d0>)
 8001152:	f001 f947 	bl	80023e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001156:	e0a1      	b.n	800129c <HAL_SPI_MspInit+0x1c0>
  else if(hspi->Instance==SPI2)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a54      	ldr	r2, [pc, #336]	; (80012b0 <HAL_SPI_MspInit+0x1d4>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d14b      	bne.n	80011fa <HAL_SPI_MspInit+0x11e>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001162:	2300      	movs	r3, #0
 8001164:	623b      	str	r3, [r7, #32]
 8001166:	4b50      	ldr	r3, [pc, #320]	; (80012a8 <HAL_SPI_MspInit+0x1cc>)
 8001168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116a:	4a4f      	ldr	r2, [pc, #316]	; (80012a8 <HAL_SPI_MspInit+0x1cc>)
 800116c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001170:	6413      	str	r3, [r2, #64]	; 0x40
 8001172:	4b4d      	ldr	r3, [pc, #308]	; (80012a8 <HAL_SPI_MspInit+0x1cc>)
 8001174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001176:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800117a:	623b      	str	r3, [r7, #32]
 800117c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800117e:	2300      	movs	r3, #0
 8001180:	61fb      	str	r3, [r7, #28]
 8001182:	4b49      	ldr	r3, [pc, #292]	; (80012a8 <HAL_SPI_MspInit+0x1cc>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001186:	4a48      	ldr	r2, [pc, #288]	; (80012a8 <HAL_SPI_MspInit+0x1cc>)
 8001188:	f043 0304 	orr.w	r3, r3, #4
 800118c:	6313      	str	r3, [r2, #48]	; 0x30
 800118e:	4b46      	ldr	r3, [pc, #280]	; (80012a8 <HAL_SPI_MspInit+0x1cc>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001192:	f003 0304 	and.w	r3, r3, #4
 8001196:	61fb      	str	r3, [r7, #28]
 8001198:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800119a:	2300      	movs	r3, #0
 800119c:	61bb      	str	r3, [r7, #24]
 800119e:	4b42      	ldr	r3, [pc, #264]	; (80012a8 <HAL_SPI_MspInit+0x1cc>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a2:	4a41      	ldr	r2, [pc, #260]	; (80012a8 <HAL_SPI_MspInit+0x1cc>)
 80011a4:	f043 0302 	orr.w	r3, r3, #2
 80011a8:	6313      	str	r3, [r2, #48]	; 0x30
 80011aa:	4b3f      	ldr	r3, [pc, #252]	; (80012a8 <HAL_SPI_MspInit+0x1cc>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ae:	f003 0302 	and.w	r3, r3, #2
 80011b2:	61bb      	str	r3, [r7, #24]
 80011b4:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80011b6:	230c      	movs	r3, #12
 80011b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ba:	2302      	movs	r3, #2
 80011bc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011be:	2300      	movs	r3, #0
 80011c0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011c2:	2303      	movs	r3, #3
 80011c4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80011c6:	2305      	movs	r3, #5
 80011c8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011ce:	4619      	mov	r1, r3
 80011d0:	4838      	ldr	r0, [pc, #224]	; (80012b4 <HAL_SPI_MspInit+0x1d8>)
 80011d2:	f001 f907 	bl	80023e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80011d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011da:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011dc:	2302      	movs	r3, #2
 80011de:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e0:	2300      	movs	r3, #0
 80011e2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011e4:	2303      	movs	r3, #3
 80011e6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80011e8:	2305      	movs	r3, #5
 80011ea:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011f0:	4619      	mov	r1, r3
 80011f2:	4831      	ldr	r0, [pc, #196]	; (80012b8 <HAL_SPI_MspInit+0x1dc>)
 80011f4:	f001 f8f6 	bl	80023e4 <HAL_GPIO_Init>
}
 80011f8:	e050      	b.n	800129c <HAL_SPI_MspInit+0x1c0>
  else if(hspi->Instance==SPI3)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4a2f      	ldr	r2, [pc, #188]	; (80012bc <HAL_SPI_MspInit+0x1e0>)
 8001200:	4293      	cmp	r3, r2
 8001202:	d14b      	bne.n	800129c <HAL_SPI_MspInit+0x1c0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001204:	2300      	movs	r3, #0
 8001206:	617b      	str	r3, [r7, #20]
 8001208:	4b27      	ldr	r3, [pc, #156]	; (80012a8 <HAL_SPI_MspInit+0x1cc>)
 800120a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120c:	4a26      	ldr	r2, [pc, #152]	; (80012a8 <HAL_SPI_MspInit+0x1cc>)
 800120e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001212:	6413      	str	r3, [r2, #64]	; 0x40
 8001214:	4b24      	ldr	r3, [pc, #144]	; (80012a8 <HAL_SPI_MspInit+0x1cc>)
 8001216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001218:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800121c:	617b      	str	r3, [r7, #20]
 800121e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001220:	2300      	movs	r3, #0
 8001222:	613b      	str	r3, [r7, #16]
 8001224:	4b20      	ldr	r3, [pc, #128]	; (80012a8 <HAL_SPI_MspInit+0x1cc>)
 8001226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001228:	4a1f      	ldr	r2, [pc, #124]	; (80012a8 <HAL_SPI_MspInit+0x1cc>)
 800122a:	f043 0301 	orr.w	r3, r3, #1
 800122e:	6313      	str	r3, [r2, #48]	; 0x30
 8001230:	4b1d      	ldr	r3, [pc, #116]	; (80012a8 <HAL_SPI_MspInit+0x1cc>)
 8001232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001234:	f003 0301 	and.w	r3, r3, #1
 8001238:	613b      	str	r3, [r7, #16]
 800123a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800123c:	2300      	movs	r3, #0
 800123e:	60fb      	str	r3, [r7, #12]
 8001240:	4b19      	ldr	r3, [pc, #100]	; (80012a8 <HAL_SPI_MspInit+0x1cc>)
 8001242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001244:	4a18      	ldr	r2, [pc, #96]	; (80012a8 <HAL_SPI_MspInit+0x1cc>)
 8001246:	f043 0304 	orr.w	r3, r3, #4
 800124a:	6313      	str	r3, [r2, #48]	; 0x30
 800124c:	4b16      	ldr	r3, [pc, #88]	; (80012a8 <HAL_SPI_MspInit+0x1cc>)
 800124e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001250:	f003 0304 	and.w	r3, r3, #4
 8001254:	60fb      	str	r3, [r7, #12]
 8001256:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001258:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800125c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800125e:	2302      	movs	r3, #2
 8001260:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001262:	2300      	movs	r3, #0
 8001264:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001266:	2303      	movs	r3, #3
 8001268:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800126a:	2306      	movs	r3, #6
 800126c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800126e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001272:	4619      	mov	r1, r3
 8001274:	480d      	ldr	r0, [pc, #52]	; (80012ac <HAL_SPI_MspInit+0x1d0>)
 8001276:	f001 f8b5 	bl	80023e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800127a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800127e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001280:	2302      	movs	r3, #2
 8001282:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001284:	2300      	movs	r3, #0
 8001286:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001288:	2303      	movs	r3, #3
 800128a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800128c:	2306      	movs	r3, #6
 800128e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001290:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001294:	4619      	mov	r1, r3
 8001296:	4807      	ldr	r0, [pc, #28]	; (80012b4 <HAL_SPI_MspInit+0x1d8>)
 8001298:	f001 f8a4 	bl	80023e4 <HAL_GPIO_Init>
}
 800129c:	bf00      	nop
 800129e:	3740      	adds	r7, #64	; 0x40
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	40013000 	.word	0x40013000
 80012a8:	40023800 	.word	0x40023800
 80012ac:	40020000 	.word	0x40020000
 80012b0:	40003800 	.word	0x40003800
 80012b4:	40020800 	.word	0x40020800
 80012b8:	40020400 	.word	0x40020400
 80012bc:	40003c00 	.word	0x40003c00

080012c0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b085      	sub	sp, #20
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a15      	ldr	r2, [pc, #84]	; (8001324 <HAL_TIM_PWM_MspInit+0x64>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d10e      	bne.n	80012f0 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80012d2:	2300      	movs	r3, #0
 80012d4:	60fb      	str	r3, [r7, #12]
 80012d6:	4b14      	ldr	r3, [pc, #80]	; (8001328 <HAL_TIM_PWM_MspInit+0x68>)
 80012d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012da:	4a13      	ldr	r2, [pc, #76]	; (8001328 <HAL_TIM_PWM_MspInit+0x68>)
 80012dc:	f043 0302 	orr.w	r3, r3, #2
 80012e0:	6413      	str	r3, [r2, #64]	; 0x40
 80012e2:	4b11      	ldr	r3, [pc, #68]	; (8001328 <HAL_TIM_PWM_MspInit+0x68>)
 80012e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e6:	f003 0302 	and.w	r3, r3, #2
 80012ea:	60fb      	str	r3, [r7, #12]
 80012ec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80012ee:	e012      	b.n	8001316 <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM4)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a0d      	ldr	r2, [pc, #52]	; (800132c <HAL_TIM_PWM_MspInit+0x6c>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d10d      	bne.n	8001316 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80012fa:	2300      	movs	r3, #0
 80012fc:	60bb      	str	r3, [r7, #8]
 80012fe:	4b0a      	ldr	r3, [pc, #40]	; (8001328 <HAL_TIM_PWM_MspInit+0x68>)
 8001300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001302:	4a09      	ldr	r2, [pc, #36]	; (8001328 <HAL_TIM_PWM_MspInit+0x68>)
 8001304:	f043 0304 	orr.w	r3, r3, #4
 8001308:	6413      	str	r3, [r2, #64]	; 0x40
 800130a:	4b07      	ldr	r3, [pc, #28]	; (8001328 <HAL_TIM_PWM_MspInit+0x68>)
 800130c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130e:	f003 0304 	and.w	r3, r3, #4
 8001312:	60bb      	str	r3, [r7, #8]
 8001314:	68bb      	ldr	r3, [r7, #8]
}
 8001316:	bf00      	nop
 8001318:	3714      	adds	r7, #20
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	40000400 	.word	0x40000400
 8001328:	40023800 	.word	0x40023800
 800132c:	40000800 	.word	0x40000800

08001330 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b08a      	sub	sp, #40	; 0x28
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001338:	f107 0314 	add.w	r3, r7, #20
 800133c:	2200      	movs	r2, #0
 800133e:	601a      	str	r2, [r3, #0]
 8001340:	605a      	str	r2, [r3, #4]
 8001342:	609a      	str	r2, [r3, #8]
 8001344:	60da      	str	r2, [r3, #12]
 8001346:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a24      	ldr	r2, [pc, #144]	; (80013e0 <HAL_TIM_MspPostInit+0xb0>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d11e      	bne.n	8001390 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001352:	2300      	movs	r3, #0
 8001354:	613b      	str	r3, [r7, #16]
 8001356:	4b23      	ldr	r3, [pc, #140]	; (80013e4 <HAL_TIM_MspPostInit+0xb4>)
 8001358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135a:	4a22      	ldr	r2, [pc, #136]	; (80013e4 <HAL_TIM_MspPostInit+0xb4>)
 800135c:	f043 0302 	orr.w	r3, r3, #2
 8001360:	6313      	str	r3, [r2, #48]	; 0x30
 8001362:	4b20      	ldr	r3, [pc, #128]	; (80013e4 <HAL_TIM_MspPostInit+0xb4>)
 8001364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001366:	f003 0302 	and.w	r3, r3, #2
 800136a:	613b      	str	r3, [r7, #16]
 800136c:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800136e:	2303      	movs	r3, #3
 8001370:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001372:	2302      	movs	r3, #2
 8001374:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001376:	2300      	movs	r3, #0
 8001378:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800137a:	2300      	movs	r3, #0
 800137c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800137e:	2302      	movs	r3, #2
 8001380:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001382:	f107 0314 	add.w	r3, r7, #20
 8001386:	4619      	mov	r1, r3
 8001388:	4817      	ldr	r0, [pc, #92]	; (80013e8 <HAL_TIM_MspPostInit+0xb8>)
 800138a:	f001 f82b 	bl	80023e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800138e:	e022      	b.n	80013d6 <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM4)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a15      	ldr	r2, [pc, #84]	; (80013ec <HAL_TIM_MspPostInit+0xbc>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d11d      	bne.n	80013d6 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800139a:	2300      	movs	r3, #0
 800139c:	60fb      	str	r3, [r7, #12]
 800139e:	4b11      	ldr	r3, [pc, #68]	; (80013e4 <HAL_TIM_MspPostInit+0xb4>)
 80013a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a2:	4a10      	ldr	r2, [pc, #64]	; (80013e4 <HAL_TIM_MspPostInit+0xb4>)
 80013a4:	f043 0302 	orr.w	r3, r3, #2
 80013a8:	6313      	str	r3, [r2, #48]	; 0x30
 80013aa:	4b0e      	ldr	r3, [pc, #56]	; (80013e4 <HAL_TIM_MspPostInit+0xb4>)
 80013ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ae:	f003 0302 	and.w	r3, r3, #2
 80013b2:	60fb      	str	r3, [r7, #12]
 80013b4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80013b6:	2340      	movs	r3, #64	; 0x40
 80013b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ba:	2302      	movs	r3, #2
 80013bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013be:	2300      	movs	r3, #0
 80013c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c2:	2300      	movs	r3, #0
 80013c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80013c6:	2302      	movs	r3, #2
 80013c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ca:	f107 0314 	add.w	r3, r7, #20
 80013ce:	4619      	mov	r1, r3
 80013d0:	4805      	ldr	r0, [pc, #20]	; (80013e8 <HAL_TIM_MspPostInit+0xb8>)
 80013d2:	f001 f807 	bl	80023e4 <HAL_GPIO_Init>
}
 80013d6:	bf00      	nop
 80013d8:	3728      	adds	r7, #40	; 0x28
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	40000400 	.word	0x40000400
 80013e4:	40023800 	.word	0x40023800
 80013e8:	40020400 	.word	0x40020400
 80013ec:	40000800 	.word	0x40000800

080013f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b08e      	sub	sp, #56	; 0x38
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013fc:	2200      	movs	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]
 8001400:	605a      	str	r2, [r3, #4]
 8001402:	609a      	str	r2, [r3, #8]
 8001404:	60da      	str	r2, [r3, #12]
 8001406:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a4c      	ldr	r2, [pc, #304]	; (8001540 <HAL_UART_MspInit+0x150>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d12d      	bne.n	800146e <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001412:	2300      	movs	r3, #0
 8001414:	623b      	str	r3, [r7, #32]
 8001416:	4b4b      	ldr	r3, [pc, #300]	; (8001544 <HAL_UART_MspInit+0x154>)
 8001418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800141a:	4a4a      	ldr	r2, [pc, #296]	; (8001544 <HAL_UART_MspInit+0x154>)
 800141c:	f043 0310 	orr.w	r3, r3, #16
 8001420:	6453      	str	r3, [r2, #68]	; 0x44
 8001422:	4b48      	ldr	r3, [pc, #288]	; (8001544 <HAL_UART_MspInit+0x154>)
 8001424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001426:	f003 0310 	and.w	r3, r3, #16
 800142a:	623b      	str	r3, [r7, #32]
 800142c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800142e:	2300      	movs	r3, #0
 8001430:	61fb      	str	r3, [r7, #28]
 8001432:	4b44      	ldr	r3, [pc, #272]	; (8001544 <HAL_UART_MspInit+0x154>)
 8001434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001436:	4a43      	ldr	r2, [pc, #268]	; (8001544 <HAL_UART_MspInit+0x154>)
 8001438:	f043 0301 	orr.w	r3, r3, #1
 800143c:	6313      	str	r3, [r2, #48]	; 0x30
 800143e:	4b41      	ldr	r3, [pc, #260]	; (8001544 <HAL_UART_MspInit+0x154>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001442:	f003 0301 	and.w	r3, r3, #1
 8001446:	61fb      	str	r3, [r7, #28]
 8001448:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800144a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800144e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001450:	2302      	movs	r3, #2
 8001452:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001454:	2300      	movs	r3, #0
 8001456:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001458:	2303      	movs	r3, #3
 800145a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800145c:	2307      	movs	r3, #7
 800145e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001460:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001464:	4619      	mov	r1, r3
 8001466:	4838      	ldr	r0, [pc, #224]	; (8001548 <HAL_UART_MspInit+0x158>)
 8001468:	f000 ffbc 	bl	80023e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800146c:	e063      	b.n	8001536 <HAL_UART_MspInit+0x146>
  else if(huart->Instance==USART2)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a36      	ldr	r2, [pc, #216]	; (800154c <HAL_UART_MspInit+0x15c>)
 8001474:	4293      	cmp	r3, r2
 8001476:	d12c      	bne.n	80014d2 <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001478:	2300      	movs	r3, #0
 800147a:	61bb      	str	r3, [r7, #24]
 800147c:	4b31      	ldr	r3, [pc, #196]	; (8001544 <HAL_UART_MspInit+0x154>)
 800147e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001480:	4a30      	ldr	r2, [pc, #192]	; (8001544 <HAL_UART_MspInit+0x154>)
 8001482:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001486:	6413      	str	r3, [r2, #64]	; 0x40
 8001488:	4b2e      	ldr	r3, [pc, #184]	; (8001544 <HAL_UART_MspInit+0x154>)
 800148a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001490:	61bb      	str	r3, [r7, #24]
 8001492:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001494:	2300      	movs	r3, #0
 8001496:	617b      	str	r3, [r7, #20]
 8001498:	4b2a      	ldr	r3, [pc, #168]	; (8001544 <HAL_UART_MspInit+0x154>)
 800149a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149c:	4a29      	ldr	r2, [pc, #164]	; (8001544 <HAL_UART_MspInit+0x154>)
 800149e:	f043 0301 	orr.w	r3, r3, #1
 80014a2:	6313      	str	r3, [r2, #48]	; 0x30
 80014a4:	4b27      	ldr	r3, [pc, #156]	; (8001544 <HAL_UART_MspInit+0x154>)
 80014a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a8:	f003 0301 	and.w	r3, r3, #1
 80014ac:	617b      	str	r3, [r7, #20]
 80014ae:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80014b0:	230c      	movs	r3, #12
 80014b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b4:	2302      	movs	r3, #2
 80014b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b8:	2300      	movs	r3, #0
 80014ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014bc:	2303      	movs	r3, #3
 80014be:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014c0:	2307      	movs	r3, #7
 80014c2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014c8:	4619      	mov	r1, r3
 80014ca:	481f      	ldr	r0, [pc, #124]	; (8001548 <HAL_UART_MspInit+0x158>)
 80014cc:	f000 ff8a 	bl	80023e4 <HAL_GPIO_Init>
}
 80014d0:	e031      	b.n	8001536 <HAL_UART_MspInit+0x146>
  else if(huart->Instance==USART6)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4a1e      	ldr	r2, [pc, #120]	; (8001550 <HAL_UART_MspInit+0x160>)
 80014d8:	4293      	cmp	r3, r2
 80014da:	d12c      	bne.n	8001536 <HAL_UART_MspInit+0x146>
    __HAL_RCC_USART6_CLK_ENABLE();
 80014dc:	2300      	movs	r3, #0
 80014de:	613b      	str	r3, [r7, #16]
 80014e0:	4b18      	ldr	r3, [pc, #96]	; (8001544 <HAL_UART_MspInit+0x154>)
 80014e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014e4:	4a17      	ldr	r2, [pc, #92]	; (8001544 <HAL_UART_MspInit+0x154>)
 80014e6:	f043 0320 	orr.w	r3, r3, #32
 80014ea:	6453      	str	r3, [r2, #68]	; 0x44
 80014ec:	4b15      	ldr	r3, [pc, #84]	; (8001544 <HAL_UART_MspInit+0x154>)
 80014ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f0:	f003 0320 	and.w	r3, r3, #32
 80014f4:	613b      	str	r3, [r7, #16]
 80014f6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014f8:	2300      	movs	r3, #0
 80014fa:	60fb      	str	r3, [r7, #12]
 80014fc:	4b11      	ldr	r3, [pc, #68]	; (8001544 <HAL_UART_MspInit+0x154>)
 80014fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001500:	4a10      	ldr	r2, [pc, #64]	; (8001544 <HAL_UART_MspInit+0x154>)
 8001502:	f043 0301 	orr.w	r3, r3, #1
 8001506:	6313      	str	r3, [r2, #48]	; 0x30
 8001508:	4b0e      	ldr	r3, [pc, #56]	; (8001544 <HAL_UART_MspInit+0x154>)
 800150a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150c:	f003 0301 	and.w	r3, r3, #1
 8001510:	60fb      	str	r3, [r7, #12]
 8001512:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001514:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001518:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800151a:	2302      	movs	r3, #2
 800151c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151e:	2300      	movs	r3, #0
 8001520:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001522:	2303      	movs	r3, #3
 8001524:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001526:	2308      	movs	r3, #8
 8001528:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800152a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800152e:	4619      	mov	r1, r3
 8001530:	4805      	ldr	r0, [pc, #20]	; (8001548 <HAL_UART_MspInit+0x158>)
 8001532:	f000 ff57 	bl	80023e4 <HAL_GPIO_Init>
}
 8001536:	bf00      	nop
 8001538:	3738      	adds	r7, #56	; 0x38
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	40011000 	.word	0x40011000
 8001544:	40023800 	.word	0x40023800
 8001548:	40020000 	.word	0x40020000
 800154c:	40004400 	.word	0x40004400
 8001550:	40011400 	.word	0x40011400

08001554 <SDTimer_Handler>:

volatile uint8_t FatFsCnt=0;
volatile uint8_t Timer1,Timer2;


void SDTimer_Handler(void){
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
	if(Timer1>0)
 8001558:	4b0e      	ldr	r3, [pc, #56]	; (8001594 <SDTimer_Handler+0x40>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	b2db      	uxtb	r3, r3
 800155e:	2b00      	cmp	r3, #0
 8001560:	d006      	beq.n	8001570 <SDTimer_Handler+0x1c>
		Timer1--;
 8001562:	4b0c      	ldr	r3, [pc, #48]	; (8001594 <SDTimer_Handler+0x40>)
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	b2db      	uxtb	r3, r3
 8001568:	3b01      	subs	r3, #1
 800156a:	b2da      	uxtb	r2, r3
 800156c:	4b09      	ldr	r3, [pc, #36]	; (8001594 <SDTimer_Handler+0x40>)
 800156e:	701a      	strb	r2, [r3, #0]
	if(Timer2>0)
 8001570:	4b09      	ldr	r3, [pc, #36]	; (8001598 <SDTimer_Handler+0x44>)
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	b2db      	uxtb	r3, r3
 8001576:	2b00      	cmp	r3, #0
 8001578:	d006      	beq.n	8001588 <SDTimer_Handler+0x34>
		Timer2--;
 800157a:	4b07      	ldr	r3, [pc, #28]	; (8001598 <SDTimer_Handler+0x44>)
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	b2db      	uxtb	r3, r3
 8001580:	3b01      	subs	r3, #1
 8001582:	b2da      	uxtb	r2, r3
 8001584:	4b04      	ldr	r3, [pc, #16]	; (8001598 <SDTimer_Handler+0x44>)
 8001586:	701a      	strb	r2, [r3, #0]

}
 8001588:	bf00      	nop
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr
 8001592:	bf00      	nop
 8001594:	2000145d 	.word	0x2000145d
 8001598:	2000145e 	.word	0x2000145e

0800159c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015a0:	e7fe      	b.n	80015a0 <NMI_Handler+0x4>

080015a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015a2:	b480      	push	{r7}
 80015a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015a6:	e7fe      	b.n	80015a6 <HardFault_Handler+0x4>

080015a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015ac:	e7fe      	b.n	80015ac <MemManage_Handler+0x4>

080015ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015ae:	b480      	push	{r7}
 80015b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015b2:	e7fe      	b.n	80015b2 <BusFault_Handler+0x4>

080015b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015b8:	e7fe      	b.n	80015b8 <UsageFault_Handler+0x4>

080015ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015ba:	b480      	push	{r7}
 80015bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015be:	bf00      	nop
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr

080015c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	  FatFsCnt++;
 80015cc:	4b0d      	ldr	r3, [pc, #52]	; (8001604 <SysTick_Handler+0x3c>)
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	b2db      	uxtb	r3, r3
 80015d2:	3301      	adds	r3, #1
 80015d4:	b2da      	uxtb	r2, r3
 80015d6:	4b0b      	ldr	r3, [pc, #44]	; (8001604 <SysTick_Handler+0x3c>)
 80015d8:	701a      	strb	r2, [r3, #0]

	  if(FatFsCnt>=10)
 80015da:	4b0a      	ldr	r3, [pc, #40]	; (8001604 <SysTick_Handler+0x3c>)
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	b2db      	uxtb	r3, r3
 80015e0:	2b09      	cmp	r3, #9
 80015e2:	d904      	bls.n	80015ee <SysTick_Handler+0x26>
	  {
		  FatFsCnt=0;
 80015e4:	4b07      	ldr	r3, [pc, #28]	; (8001604 <SysTick_Handler+0x3c>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	701a      	strb	r2, [r3, #0]
		  SDTimer_Handler();
 80015ea:	f7ff ffb3 	bl	8001554 <SDTimer_Handler>
	  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015ee:	f000 fb65 	bl	8001cbc <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80015f2:	f009 fb3b 	bl	800ac6c <xTaskGetSchedulerState>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d001      	beq.n	8001600 <SysTick_Handler+0x38>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80015fc:	f00a fadc 	bl	800bbb8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001600:	bf00      	nop
 8001602:	bd80      	pop	{r7, pc}
 8001604:	2000145c 	.word	0x2000145c

08001608 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800160c:	2001      	movs	r0, #1
 800160e:	f001 f887 	bl	8002720 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001612:	bf00      	nop
 8001614:	bd80      	pop	{r7, pc}

08001616 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001616:	b580      	push	{r7, lr}
 8001618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 800161a:	2004      	movs	r0, #4
 800161c:	f001 f880 	bl	8002720 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001620:	bf00      	nop
 8001622:	bd80      	pop	{r7, pc}

08001624 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b086      	sub	sp, #24
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800162c:	4a14      	ldr	r2, [pc, #80]	; (8001680 <_sbrk+0x5c>)
 800162e:	4b15      	ldr	r3, [pc, #84]	; (8001684 <_sbrk+0x60>)
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001638:	4b13      	ldr	r3, [pc, #76]	; (8001688 <_sbrk+0x64>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d102      	bne.n	8001646 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001640:	4b11      	ldr	r3, [pc, #68]	; (8001688 <_sbrk+0x64>)
 8001642:	4a12      	ldr	r2, [pc, #72]	; (800168c <_sbrk+0x68>)
 8001644:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001646:	4b10      	ldr	r3, [pc, #64]	; (8001688 <_sbrk+0x64>)
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	4413      	add	r3, r2
 800164e:	693a      	ldr	r2, [r7, #16]
 8001650:	429a      	cmp	r2, r3
 8001652:	d207      	bcs.n	8001664 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001654:	f00b fc7a 	bl	800cf4c <__errno>
 8001658:	4603      	mov	r3, r0
 800165a:	220c      	movs	r2, #12
 800165c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800165e:	f04f 33ff 	mov.w	r3, #4294967295
 8001662:	e009      	b.n	8001678 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001664:	4b08      	ldr	r3, [pc, #32]	; (8001688 <_sbrk+0x64>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800166a:	4b07      	ldr	r3, [pc, #28]	; (8001688 <_sbrk+0x64>)
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	4413      	add	r3, r2
 8001672:	4a05      	ldr	r2, [pc, #20]	; (8001688 <_sbrk+0x64>)
 8001674:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001676:	68fb      	ldr	r3, [r7, #12]
}
 8001678:	4618      	mov	r0, r3
 800167a:	3718      	adds	r7, #24
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	20010000 	.word	0x20010000
 8001684:	00000400 	.word	0x00000400
 8001688:	20001460 	.word	0x20001460
 800168c:	2000b870 	.word	0x2000b870

08001690 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001694:	4b06      	ldr	r3, [pc, #24]	; (80016b0 <SystemInit+0x20>)
 8001696:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800169a:	4a05      	ldr	r2, [pc, #20]	; (80016b0 <SystemInit+0x20>)
 800169c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016a4:	bf00      	nop
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr
 80016ae:	bf00      	nop
 80016b0:	e000ed00 	.word	0xe000ed00

080016b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80016b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016ec <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016b8:	480d      	ldr	r0, [pc, #52]	; (80016f0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80016ba:	490e      	ldr	r1, [pc, #56]	; (80016f4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80016bc:	4a0e      	ldr	r2, [pc, #56]	; (80016f8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016c0:	e002      	b.n	80016c8 <LoopCopyDataInit>

080016c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016c6:	3304      	adds	r3, #4

080016c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016cc:	d3f9      	bcc.n	80016c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016ce:	4a0b      	ldr	r2, [pc, #44]	; (80016fc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80016d0:	4c0b      	ldr	r4, [pc, #44]	; (8001700 <LoopFillZerobss+0x26>)
  movs r3, #0
 80016d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016d4:	e001      	b.n	80016da <LoopFillZerobss>

080016d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016d8:	3204      	adds	r2, #4

080016da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016dc:	d3fb      	bcc.n	80016d6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80016de:	f7ff ffd7 	bl	8001690 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016e2:	f00b fc39 	bl	800cf58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016e6:	f7fe ff55 	bl	8000594 <main>
  bx  lr    
 80016ea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80016ec:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80016f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016f4:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 80016f8:	0800e014 	.word	0x0800e014
  ldr r2, =_sbss
 80016fc:	20001094 	.word	0x20001094
  ldr r4, =_ebss
 8001700:	2000b86c 	.word	0x2000b86c

08001704 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001704:	e7fe      	b.n	8001704 <ADC_IRQHandler>

08001706 <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 8001706:	b580      	push	{r7, lr}
 8001708:	b084      	sub	sp, #16
 800170a:	af00      	add	r7, sp, #0
 800170c:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d104      	bne.n	800171e <stm32_lock_acquire+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8001714:	b672      	cpsid	i
}
 8001716:	bf00      	nop
 8001718:	f7ff fb84 	bl	8000e24 <Error_Handler>
 800171c:	e7fe      	b.n	800171c <stm32_lock_acquire+0x16>
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	7a1b      	ldrb	r3, [r3, #8]
 8001722:	2b01      	cmp	r3, #1
 8001724:	d904      	bls.n	8001730 <stm32_lock_acquire+0x2a>
  __ASM volatile ("cpsid i" : : : "memory");
 8001726:	b672      	cpsid	i
}
 8001728:	bf00      	nop
 800172a:	f7ff fb7b 	bl	8000e24 <Error_Handler>
 800172e:	e7fe      	b.n	800172e <stm32_lock_acquire+0x28>
  lock->basepri[lock->nesting_level++] = taskENTER_CRITICAL_FROM_ISR();
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	7a1b      	ldrb	r3, [r3, #8]
 8001734:	1c5a      	adds	r2, r3, #1
 8001736:	b2d1      	uxtb	r1, r2
 8001738:	687a      	ldr	r2, [r7, #4]
 800173a:	7211      	strb	r1, [r2, #8]
 800173c:	4619      	mov	r1, r3

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800173e:	f3ef 8211 	mrs	r2, BASEPRI
 8001742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001746:	f383 8811 	msr	BASEPRI, r3
 800174a:	f3bf 8f6f 	isb	sy
 800174e:	f3bf 8f4f 	dsb	sy
 8001752:	60fa      	str	r2, [r7, #12]
 8001754:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8001756:	68fa      	ldr	r2, [r7, #12]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 800175e:	bf00      	nop
 8001760:	3710      	adds	r7, #16
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}

08001766 <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 8001766:	b580      	push	{r7, lr}
 8001768:	b084      	sub	sp, #16
 800176a:	af00      	add	r7, sp, #0
 800176c:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d104      	bne.n	800177e <stm32_lock_release+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8001774:	b672      	cpsid	i
}
 8001776:	bf00      	nop
 8001778:	f7ff fb54 	bl	8000e24 <Error_Handler>
 800177c:	e7fe      	b.n	800177c <stm32_lock_release+0x16>
  lock->nesting_level--;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	7a1b      	ldrb	r3, [r3, #8]
 8001782:	3b01      	subs	r3, #1
 8001784:	b2da      	uxtb	r2, r3
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	721a      	strb	r2, [r3, #8]
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	7a1b      	ldrb	r3, [r3, #8]
 800178e:	2b01      	cmp	r3, #1
 8001790:	d904      	bls.n	800179c <stm32_lock_release+0x36>
  __ASM volatile ("cpsid i" : : : "memory");
 8001792:	b672      	cpsid	i
}
 8001794:	bf00      	nop
 8001796:	f7ff fb45 	bl	8000e24 <Error_Handler>
 800179a:	e7fe      	b.n	800179a <stm32_lock_release+0x34>
  taskEXIT_CRITICAL_FROM_ISR(lock->basepri[lock->nesting_level]);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	7a1b      	ldrb	r3, [r3, #8]
 80017a0:	461a      	mov	r2, r3
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017a8:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80017b0:	bf00      	nop
}
 80017b2:	bf00      	nop
 80017b4:	3710      	adds	r7, #16
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}

080017ba <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 80017ba:	b580      	push	{r7, lr}
 80017bc:	b082      	sub	sp, #8
 80017be:	af00      	add	r7, sp, #0
 80017c0:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d104      	bne.n	80017d2 <__retarget_lock_acquire_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 80017c8:	b672      	cpsid	i
}
 80017ca:	bf00      	nop
 80017cc:	f7ff fb2a 	bl	8000e24 <Error_Handler>
 80017d0:	e7fe      	b.n	80017d0 <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	4618      	mov	r0, r3
 80017d6:	f7ff ff96 	bl	8001706 <stm32_lock_acquire>
}
 80017da:	bf00      	nop
 80017dc:	3708      	adds	r7, #8
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}

080017e2 <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 80017e2:	b580      	push	{r7, lr}
 80017e4:	b082      	sub	sp, #8
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d104      	bne.n	80017fa <__retarget_lock_release_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 80017f0:	b672      	cpsid	i
}
 80017f2:	bf00      	nop
 80017f4:	f7ff fb16 	bl	8000e24 <Error_Handler>
 80017f8:	e7fe      	b.n	80017f8 <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4618      	mov	r0, r3
 80017fe:	f7ff ffb2 	bl	8001766 <stm32_lock_release>
}
 8001802:	bf00      	nop
 8001804:	3708      	adds	r7, #8
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}

0800180a <CTOR_DS3231>:




void CTOR_DS3231(ds3231_st* param , I2C_HandleTypeDef _hi2c, ds3231_ops _ops, time_st* _time, UART_HandleTypeDef _huart)
{
 800180a:	b084      	sub	sp, #16
 800180c:	b590      	push	{r4, r7, lr}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
 8001814:	f107 001c 	add.w	r0, r7, #28
 8001818:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	 DEBUG_CTOR(&param->debug, _huart , dbg_ops);


#endif

	param->ops = _ops;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	f103 047c 	add.w	r4, r3, #124	; 0x7c
 8001822:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001826:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001828:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	param->obj.hi2c = _hi2c;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	4618      	mov	r0, r3
 8001830:	f107 031c 	add.w	r3, r7, #28
 8001834:	2254      	movs	r2, #84	; 0x54
 8001836:	4619      	mov	r1, r3
 8001838:	f00b fbb2 	bl	800cfa0 <memcpy>

	memcpy(&param->obj.time , _time , sizeof(time_st));
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	3354      	adds	r3, #84	; 0x54
 8001840:	2207      	movs	r2, #7
 8001842:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8001846:	4618      	mov	r0, r3
 8001848:	f00b fbaa 	bl	800cfa0 <memcpy>

	memset(&param->obj.dateBuffer[0] , 0x00 , sizeof(param->obj.dateBuffer) );
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	336a      	adds	r3, #106	; 0x6a
 8001850:	220f      	movs	r2, #15
 8001852:	2100      	movs	r1, #0
 8001854:	4618      	mov	r0, r3
 8001856:	f00b fbb1 	bl	800cfbc <memset>
	memset(&param->obj.timeBuffer[0] , 0x00 , sizeof(param->obj.timeBuffer) );
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	335b      	adds	r3, #91	; 0x5b
 800185e:	220f      	movs	r2, #15
 8001860:	2100      	movs	r1, #0
 8001862:	4618      	mov	r0, r3
 8001864:	f00b fbaa 	bl	800cfbc <memset>
}
 8001868:	bf00      	nop
 800186a:	370c      	adds	r7, #12
 800186c:	46bd      	mov	sp, r7
 800186e:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001872:	b004      	add	sp, #16
 8001874:	4770      	bx	lr

08001876 <setTime>:


void setTime(ds3231_obj* obj,decToBcd_ut*num)
{
 8001876:	b590      	push	{r4, r7, lr}
 8001878:	b089      	sub	sp, #36	; 0x24
 800187a:	af04      	add	r7, sp, #16
 800187c:	6078      	str	r0, [r7, #4]
 800187e:	6039      	str	r1, [r7, #0]
	uint8_t setTime[7];

	for(uint8_t loopVal = 0 ; loopVal <= sizeof(time_st) ; loopVal++)
 8001880:	2300      	movs	r3, #0
 8001882:	73fb      	strb	r3, [r7, #15]
 8001884:	e012      	b.n	80018ac <setTime+0x36>
	{
		*( &obj->time.seconds + loopVal ) =  decToBcd(*(&obj->time.seconds+loopVal), num);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	f103 0254 	add.w	r2, r3, #84	; 0x54
 800188c:	7bfb      	ldrb	r3, [r7, #15]
 800188e:	4413      	add	r3, r2
 8001890:	7818      	ldrb	r0, [r3, #0]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8001898:	7bfb      	ldrb	r3, [r7, #15]
 800189a:	18d4      	adds	r4, r2, r3
 800189c:	6839      	ldr	r1, [r7, #0]
 800189e:	f000 f89b 	bl	80019d8 <decToBcd>
 80018a2:	4603      	mov	r3, r0
 80018a4:	7023      	strb	r3, [r4, #0]
	for(uint8_t loopVal = 0 ; loopVal <= sizeof(time_st) ; loopVal++)
 80018a6:	7bfb      	ldrb	r3, [r7, #15]
 80018a8:	3301      	adds	r3, #1
 80018aa:	73fb      	strb	r3, [r7, #15]
 80018ac:	7bfb      	ldrb	r3, [r7, #15]
 80018ae:	2b07      	cmp	r3, #7
 80018b0:	d9e9      	bls.n	8001886 <setTime+0x10>
	}

	memcpy( &setTime[0] , (uint8_t*)&obj->time.seconds , 7 );
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	f103 0154 	add.w	r1, r3, #84	; 0x54
 80018b8:	f107 0308 	add.w	r3, r7, #8
 80018bc:	2207      	movs	r2, #7
 80018be:	4618      	mov	r0, r3
 80018c0:	f00b fb6e 	bl	800cfa0 <memcpy>

	HAL_I2C_Mem_Write(&obj->hi2c , DS3231_ADRESS, 0x00, 1, (uint8_t*)&setTime[0], 7, 1000);
 80018c4:	6878      	ldr	r0, [r7, #4]
 80018c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018ca:	9302      	str	r3, [sp, #8]
 80018cc:	2307      	movs	r3, #7
 80018ce:	9301      	str	r3, [sp, #4]
 80018d0:	f107 0308 	add.w	r3, r7, #8
 80018d4:	9300      	str	r3, [sp, #0]
 80018d6:	2301      	movs	r3, #1
 80018d8:	2200      	movs	r2, #0
 80018da:	21d0      	movs	r1, #208	; 0xd0
 80018dc:	f001 f888 	bl	80029f0 <HAL_I2C_Mem_Write>
}
 80018e0:	bf00      	nop
 80018e2:	3714      	adds	r7, #20
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd90      	pop	{r4, r7, pc}

080018e8 <getTime>:


time_st getTime(ds3231_obj* obj,decToBcd_ut*num)
{
 80018e8:	b590      	push	{r4, r7, lr}
 80018ea:	b08b      	sub	sp, #44	; 0x2c
 80018ec:	af04      	add	r7, sp, #16
 80018ee:	60f8      	str	r0, [r7, #12]
 80018f0:	60b9      	str	r1, [r7, #8]
 80018f2:	607a      	str	r2, [r7, #4]

	HAL_I2C_Mem_Read(&obj->hi2c, DS3231_ADRESS, 0x00, 1, (uint8_t*)&obj->time.seconds , 7, 1000);
 80018f4:	68b8      	ldr	r0, [r7, #8]
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	3354      	adds	r3, #84	; 0x54
 80018fa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80018fe:	9202      	str	r2, [sp, #8]
 8001900:	2207      	movs	r2, #7
 8001902:	9201      	str	r2, [sp, #4]
 8001904:	9300      	str	r3, [sp, #0]
 8001906:	2301      	movs	r3, #1
 8001908:	2200      	movs	r2, #0
 800190a:	21d0      	movs	r1, #208	; 0xd0
 800190c:	f001 f96a 	bl	8002be4 <HAL_I2C_Mem_Read>

	for(uint8_t loopVal = 0 ; loopVal <= sizeof(time_st) ; loopVal++)
 8001910:	2300      	movs	r3, #0
 8001912:	75fb      	strb	r3, [r7, #23]
 8001914:	e012      	b.n	800193c <getTime+0x54>
	{
		*( &obj->time.seconds + loopVal ) =  bcdToDec( *( &obj->time.seconds + loopVal ),num );
 8001916:	68bb      	ldr	r3, [r7, #8]
 8001918:	f103 0254 	add.w	r2, r3, #84	; 0x54
 800191c:	7dfb      	ldrb	r3, [r7, #23]
 800191e:	4413      	add	r3, r2
 8001920:	7818      	ldrb	r0, [r3, #0]
 8001922:	68bb      	ldr	r3, [r7, #8]
 8001924:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8001928:	7dfb      	ldrb	r3, [r7, #23]
 800192a:	18d4      	adds	r4, r2, r3
 800192c:	6879      	ldr	r1, [r7, #4]
 800192e:	f000 f887 	bl	8001a40 <bcdToDec>
 8001932:	4603      	mov	r3, r0
 8001934:	7023      	strb	r3, [r4, #0]
	for(uint8_t loopVal = 0 ; loopVal <= sizeof(time_st) ; loopVal++)
 8001936:	7dfb      	ldrb	r3, [r7, #23]
 8001938:	3301      	adds	r3, #1
 800193a:	75fb      	strb	r3, [r7, #23]
 800193c:	7dfb      	ldrb	r3, [r7, #23]
 800193e:	2b07      	cmp	r3, #7
 8001940:	d9e9      	bls.n	8001916 <getTime+0x2e>
	}

	return obj->time;
 8001942:	68fa      	ldr	r2, [r7, #12]
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	3354      	adds	r3, #84	; 0x54
 8001948:	6818      	ldr	r0, [r3, #0]
 800194a:	6010      	str	r0, [r2, #0]
 800194c:	8899      	ldrh	r1, [r3, #4]
 800194e:	799b      	ldrb	r3, [r3, #6]
 8001950:	8091      	strh	r1, [r2, #4]
 8001952:	7193      	strb	r3, [r2, #6]

}
 8001954:	68f8      	ldr	r0, [r7, #12]
 8001956:	371c      	adds	r7, #28
 8001958:	46bd      	mov	sp, r7
 800195a:	bd90      	pop	{r4, r7, pc}

0800195c <printTime>:


void printTime(ds3231_obj* obj)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b084      	sub	sp, #16
 8001960:	af02      	add	r7, sp, #8
 8001962:	6078      	str	r0, [r7, #4]
	sprintf(&obj->timeBuffer[0], "%02d:%02d:%02d:", obj->time.seconds ,
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	f103 005b 	add.w	r0, r3, #91	; 0x5b
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001970:	461a      	mov	r2, r3
			                                        obj->time.minutes,
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
	sprintf(&obj->timeBuffer[0], "%02d:%02d:%02d:", obj->time.seconds ,
 8001978:	4619      	mov	r1, r3
			                                        obj->time.seconds);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
	sprintf(&obj->timeBuffer[0], "%02d:%02d:%02d:", obj->time.seconds ,
 8001980:	9300      	str	r3, [sp, #0]
 8001982:	460b      	mov	r3, r1
 8001984:	4903      	ldr	r1, [pc, #12]	; (8001994 <printTime+0x38>)
 8001986:	f00b fc11 	bl	800d1ac <siprintf>
}
 800198a:	bf00      	nop
 800198c:	3708      	adds	r7, #8
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	0800d8ac 	.word	0x0800d8ac

08001998 <printDate>:


void printDate(ds3231_obj* obj)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b084      	sub	sp, #16
 800199c:	af02      	add	r7, sp, #8
 800199e:	6078      	str	r0, [r7, #4]
	sprintf(&obj->dateBuffer[0], "%02d:%02d:%04d:", obj->time.dayofweek ,
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	f103 006a 	add.w	r0, r3, #106	; 0x6a
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 80019ac:	461a      	mov	r2, r3
				                                    obj->time.month,
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
	sprintf(&obj->dateBuffer[0], "%02d:%02d:%04d:", obj->time.dayofweek ,
 80019b4:	4619      	mov	r1, r3
				                                    ((MILLENNIUM)+(obj->time.year)));
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
	sprintf(&obj->dateBuffer[0], "%02d:%02d:%04d:", obj->time.dayofweek ,
 80019bc:	f503 439c 	add.w	r3, r3, #19968	; 0x4e00
 80019c0:	3320      	adds	r3, #32
 80019c2:	9300      	str	r3, [sp, #0]
 80019c4:	460b      	mov	r3, r1
 80019c6:	4903      	ldr	r1, [pc, #12]	; (80019d4 <printDate+0x3c>)
 80019c8:	f00b fbf0 	bl	800d1ac <siprintf>
}
 80019cc:	bf00      	nop
 80019ce:	3708      	adds	r7, #8
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	0800d8bc 	.word	0x0800d8bc

080019d8 <decToBcd>:


// Convert binary coded decimal to normal decimal numbers

static uint8_t decToBcd(uint8_t num,decToBcd_ut *decNum)
{
 80019d8:	b480      	push	{r7}
 80019da:	b085      	sub	sp, #20
 80019dc:	af00      	add	r7, sp, #0
 80019de:	4603      	mov	r3, r0
 80019e0:	6039      	str	r1, [r7, #0]
 80019e2:	71fb      	strb	r3, [r7, #7]
	uint8_t firstDigit  ;
	uint8_t secondDigit ;

	firstDigit = num % MOD_TEN;
 80019e4:	79fa      	ldrb	r2, [r7, #7]
 80019e6:	4b15      	ldr	r3, [pc, #84]	; (8001a3c <decToBcd+0x64>)
 80019e8:	fba3 1302 	umull	r1, r3, r3, r2
 80019ec:	08d9      	lsrs	r1, r3, #3
 80019ee:	460b      	mov	r3, r1
 80019f0:	009b      	lsls	r3, r3, #2
 80019f2:	440b      	add	r3, r1
 80019f4:	005b      	lsls	r3, r3, #1
 80019f6:	1ad3      	subs	r3, r2, r3
 80019f8:	73fb      	strb	r3, [r7, #15]
	secondDigit = num / MOD_TEN;
 80019fa:	79fb      	ldrb	r3, [r7, #7]
 80019fc:	4a0f      	ldr	r2, [pc, #60]	; (8001a3c <decToBcd+0x64>)
 80019fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001a02:	08db      	lsrs	r3, r3, #3
 8001a04:	73bb      	strb	r3, [r7, #14]

	decNum->bits.decFirstFour = firstDigit;
 8001a06:	7bfb      	ldrb	r3, [r7, #15]
 8001a08:	f003 030f 	and.w	r3, r3, #15
 8001a0c:	b2d9      	uxtb	r1, r3
 8001a0e:	683a      	ldr	r2, [r7, #0]
 8001a10:	7813      	ldrb	r3, [r2, #0]
 8001a12:	f361 0303 	bfi	r3, r1, #0, #4
 8001a16:	7013      	strb	r3, [r2, #0]
	decNum->bits.decLastFour = secondDigit;
 8001a18:	7bbb      	ldrb	r3, [r7, #14]
 8001a1a:	f003 030f 	and.w	r3, r3, #15
 8001a1e:	b2d9      	uxtb	r1, r3
 8001a20:	683a      	ldr	r2, [r7, #0]
 8001a22:	7813      	ldrb	r3, [r2, #0]
 8001a24:	f361 1307 	bfi	r3, r1, #4, #4
 8001a28:	7013      	strb	r3, [r2, #0]


	return decNum->BCD;
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	781b      	ldrb	r3, [r3, #0]

}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3714      	adds	r7, #20
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	cccccccd 	.word	0xcccccccd

08001a40 <bcdToDec>:

static uint8_t bcdToDec(uint8_t num,decToBcd_ut* bcdNum)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b085      	sub	sp, #20
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	4603      	mov	r3, r0
 8001a48:	6039      	str	r1, [r7, #0]
 8001a4a:	71fb      	strb	r3, [r7, #7]
	uint8_t tempVal;

	bcdNum->BCD = num;
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	79fa      	ldrb	r2, [r7, #7]
 8001a50:	701a      	strb	r2, [r3, #0]

	tempVal = bcdNum->bits.decFirstFour;
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	73fb      	strb	r3, [r7, #15]
	tempVal += bcdNum->bits.decLastFour*MOD_TEN;
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	461a      	mov	r2, r3
 8001a6a:	0092      	lsls	r2, r2, #2
 8001a6c:	4413      	add	r3, r2
 8001a6e:	005b      	lsls	r3, r3, #1
 8001a70:	b2da      	uxtb	r2, r3
 8001a72:	7bfb      	ldrb	r3, [r7, #15]
 8001a74:	4413      	add	r3, r2
 8001a76:	73fb      	strb	r3, [r7, #15]


	return tempVal;
 8001a78:	7bfb      	ldrb	r3, [r7, #15]

}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3714      	adds	r7, #20
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr

08001a86 <CTOR_nextion>:




void CTOR_nextion(nextion_St* param , UART_HandleTypeDef _huart, nextion_ops _ops)
{
 8001a86:	b084      	sub	sp, #16
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	f107 0014 	add.w	r0, r7, #20
 8001a94:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	 DEBUG_CTOR(&param->debug, _huart , dbg_ops);


#endif

	param->ops = _ops;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	3370      	adds	r3, #112	; 0x70
 8001a9c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8001aa0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001aa4:	e883 0003 	stmia.w	r3, {r0, r1}

	param->obj.huart=_huart;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f107 0314 	add.w	r3, r7, #20
 8001ab0:	2244      	movs	r2, #68	; 0x44
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	f00b fa74 	bl	800cfa0 <memcpy>


	memset(&param->obj.txCommand,0x00,sizeof(param->obj.txCommand));
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	3345      	adds	r3, #69	; 0x45
 8001abc:	2214      	movs	r2, #20
 8001abe:	2100      	movs	r1, #0
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f00b fa7b 	bl	800cfbc <memset>

	memset(&param->obj.txBuffCmd,0x00,sizeof(param->obj.txBuffCmd));
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	3359      	adds	r3, #89	; 0x59
 8001aca:	2214      	movs	r2, #20
 8001acc:	2100      	movs	r1, #0
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f00b fa74 	bl	800cfbc <memset>

}
 8001ad4:	bf00      	nop
 8001ad6:	3708      	adds	r7, #8
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001ade:	b004      	add	sp, #16
 8001ae0:	4770      	bx	lr
	...

08001ae4 <sendCmd>:


void sendCmd(nextion_obj*obj,char*cmd, bool status)
{
 8001ae4:	b5b0      	push	{r4, r5, r7, lr}
 8001ae6:	b086      	sub	sp, #24
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	60f8      	str	r0, [r7, #12]
 8001aec:	60b9      	str	r1, [r7, #8]
 8001aee:	4613      	mov	r3, r2
 8001af0:	71fb      	strb	r3, [r7, #7]
	char lastCmd[4] = {0xFF,0xFF,0xFF};
 8001af2:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8001af6:	617b      	str	r3, [r7, #20]

	memcpy(&obj->txCommand[0],cmd,strlen(cmd));
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	f103 0445 	add.w	r4, r3, #69	; 0x45
 8001afe:	68b8      	ldr	r0, [r7, #8]
 8001b00:	f7fe fb6e 	bl	80001e0 <strlen>
 8001b04:	4603      	mov	r3, r0
 8001b06:	461a      	mov	r2, r3
 8001b08:	68b9      	ldr	r1, [r7, #8]
 8001b0a:	4620      	mov	r0, r4
 8001b0c:	f00b fa48 	bl	800cfa0 <memcpy>

	sprintf(obj->txBuffCmd,"%s.val=%d",cmd,status); // MAKRO İLE SET RESET EDILECEK
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	f103 0059 	add.w	r0, r3, #89	; 0x59
 8001b16:	79fb      	ldrb	r3, [r7, #7]
 8001b18:	68ba      	ldr	r2, [r7, #8]
 8001b1a:	491b      	ldr	r1, [pc, #108]	; (8001b88 <sendCmd+0xa4>)
 8001b1c:	f00b fb46 	bl	800d1ac <siprintf>


	HAL_UART_Transmit(&obj->huart, (uint8_t*)obj->txBuffCmd, strlen(obj->txBuffCmd),obj->nxTımeout);
 8001b20:	68fc      	ldr	r4, [r7, #12]
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	f103 0559 	add.w	r5, r3, #89	; 0x59
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	3359      	adds	r3, #89	; 0x59
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f7fe fb57 	bl	80001e0 <strlen>
 8001b32:	4603      	mov	r3, r0
 8001b34:	b29a      	uxth	r2, r3
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001b3c:	4629      	mov	r1, r5
 8001b3e:	4620      	mov	r0, r4
 8001b40:	f002 fecb 	bl	80048da <HAL_UART_Transmit>

	HAL_UART_Transmit(&obj->huart, (uint8_t*)lastCmd, strlen(lastCmd), obj->nxTımeout);
 8001b44:	68fc      	ldr	r4, [r7, #12]
 8001b46:	f107 0314 	add.w	r3, r7, #20
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f7fe fb48 	bl	80001e0 <strlen>
 8001b50:	4603      	mov	r3, r0
 8001b52:	b29a      	uxth	r2, r3
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001b5a:	f107 0114 	add.w	r1, r7, #20
 8001b5e:	4620      	mov	r0, r4
 8001b60:	f002 febb 	bl	80048da <HAL_UART_Transmit>

	memset(obj->txCommand , 0x00 , sizeof(obj->txCommand));
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	3345      	adds	r3, #69	; 0x45
 8001b68:	2214      	movs	r2, #20
 8001b6a:	2100      	movs	r1, #0
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f00b fa25 	bl	800cfbc <memset>

    memset(obj->txBuffCmd,0x00,sizeof(obj->txBuffCmd));
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	3359      	adds	r3, #89	; 0x59
 8001b76:	2214      	movs	r2, #20
 8001b78:	2100      	movs	r1, #0
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f00b fa1e 	bl	800cfbc <memset>
}
 8001b80:	bf00      	nop
 8001b82:	3718      	adds	r7, #24
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bdb0      	pop	{r4, r5, r7, pc}
 8001b88:	0800d8cc 	.word	0x0800d8cc

08001b8c <sendNum>:


void sendNum(nextion_obj* obj , char*cmd , uint16_t num)
{
 8001b8c:	b590      	push	{r4, r7, lr}
 8001b8e:	b087      	sub	sp, #28
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	60f8      	str	r0, [r7, #12]
 8001b94:	60b9      	str	r1, [r7, #8]
 8001b96:	4613      	mov	r3, r2
 8001b98:	80fb      	strh	r3, [r7, #6]
	char lastCmd[4] = {0xFF,0xFF,0xFF};
 8001b9a:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8001b9e:	617b      	str	r3, [r7, #20]

	memcpy(&obj->txCommand[0],cmd,strlen(cmd));
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	f103 0445 	add.w	r4, r3, #69	; 0x45
 8001ba6:	68b8      	ldr	r0, [r7, #8]
 8001ba8:	f7fe fb1a 	bl	80001e0 <strlen>
 8001bac:	4603      	mov	r3, r0
 8001bae:	461a      	mov	r2, r3
 8001bb0:	68b9      	ldr	r1, [r7, #8]
 8001bb2:	4620      	mov	r0, r4
 8001bb4:	f00b f9f4 	bl	800cfa0 <memcpy>

	sprintf(obj->txBuffCmd,"%s.val=%d",cmd,num);
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	f103 0059 	add.w	r0, r3, #89	; 0x59
 8001bbe:	88fb      	ldrh	r3, [r7, #6]
 8001bc0:	68ba      	ldr	r2, [r7, #8]
 8001bc2:	4914      	ldr	r1, [pc, #80]	; (8001c14 <sendNum+0x88>)
 8001bc4:	f00b faf2 	bl	800d1ac <siprintf>

	HAL_UART_Transmit(&obj->huart, (uint8_t*)obj->txBuffCmd, sizeof(obj->txCommand), obj->nxTımeout);
 8001bc8:	68f8      	ldr	r0, [r7, #12]
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	f103 0159 	add.w	r1, r3, #89	; 0x59
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001bd6:	2214      	movs	r2, #20
 8001bd8:	f002 fe7f 	bl	80048da <HAL_UART_Transmit>

	HAL_UART_Transmit(&obj->huart, (uint8_t*)lastCmd, sizeof(obj->txCommand), obj->nxTımeout);
 8001bdc:	68f8      	ldr	r0, [r7, #12]
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001be4:	f107 0114 	add.w	r1, r7, #20
 8001be8:	2214      	movs	r2, #20
 8001bea:	f002 fe76 	bl	80048da <HAL_UART_Transmit>

	memset(obj->txCommand , 0x00 , sizeof(obj->txCommand));
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	3345      	adds	r3, #69	; 0x45
 8001bf2:	2214      	movs	r2, #20
 8001bf4:	2100      	movs	r1, #0
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f00b f9e0 	bl	800cfbc <memset>

    memset(obj->txBuffCmd,0x00,sizeof(obj->txBuffCmd));
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	3359      	adds	r3, #89	; 0x59
 8001c00:	2214      	movs	r2, #20
 8001c02:	2100      	movs	r1, #0
 8001c04:	4618      	mov	r0, r3
 8001c06:	f00b f9d9 	bl	800cfbc <memset>

}
 8001c0a:	bf00      	nop
 8001c0c:	371c      	adds	r7, #28
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd90      	pop	{r4, r7, pc}
 8001c12:	bf00      	nop
 8001c14:	0800d8cc 	.word	0x0800d8cc

08001c18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c1c:	4b0e      	ldr	r3, [pc, #56]	; (8001c58 <HAL_Init+0x40>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a0d      	ldr	r2, [pc, #52]	; (8001c58 <HAL_Init+0x40>)
 8001c22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c26:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c28:	4b0b      	ldr	r3, [pc, #44]	; (8001c58 <HAL_Init+0x40>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a0a      	ldr	r2, [pc, #40]	; (8001c58 <HAL_Init+0x40>)
 8001c2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c32:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c34:	4b08      	ldr	r3, [pc, #32]	; (8001c58 <HAL_Init+0x40>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a07      	ldr	r2, [pc, #28]	; (8001c58 <HAL_Init+0x40>)
 8001c3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c40:	2003      	movs	r0, #3
 8001c42:	f000 fb8d 	bl	8002360 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c46:	200f      	movs	r0, #15
 8001c48:	f000 f808 	bl	8001c5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c4c:	f7ff f8f0 	bl	8000e30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c50:	2300      	movs	r3, #0
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	40023c00 	.word	0x40023c00

08001c5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c64:	4b12      	ldr	r3, [pc, #72]	; (8001cb0 <HAL_InitTick+0x54>)
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	4b12      	ldr	r3, [pc, #72]	; (8001cb4 <HAL_InitTick+0x58>)
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c72:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c76:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f000 fba5 	bl	80023ca <HAL_SYSTICK_Config>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e00e      	b.n	8001ca8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2b0f      	cmp	r3, #15
 8001c8e:	d80a      	bhi.n	8001ca6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c90:	2200      	movs	r2, #0
 8001c92:	6879      	ldr	r1, [r7, #4]
 8001c94:	f04f 30ff 	mov.w	r0, #4294967295
 8001c98:	f000 fb6d 	bl	8002376 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c9c:	4a06      	ldr	r2, [pc, #24]	; (8001cb8 <HAL_InitTick+0x5c>)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	e000      	b.n	8001ca8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3708      	adds	r7, #8
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	20000000 	.word	0x20000000
 8001cb4:	20000008 	.word	0x20000008
 8001cb8:	20000004 	.word	0x20000004

08001cbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cc0:	4b06      	ldr	r3, [pc, #24]	; (8001cdc <HAL_IncTick+0x20>)
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	4b06      	ldr	r3, [pc, #24]	; (8001ce0 <HAL_IncTick+0x24>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4413      	add	r3, r2
 8001ccc:	4a04      	ldr	r2, [pc, #16]	; (8001ce0 <HAL_IncTick+0x24>)
 8001cce:	6013      	str	r3, [r2, #0]
}
 8001cd0:	bf00      	nop
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	20000008 	.word	0x20000008
 8001ce0:	20001470 	.word	0x20001470

08001ce4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ce8:	4b03      	ldr	r3, [pc, #12]	; (8001cf8 <HAL_GetTick+0x14>)
 8001cea:	681b      	ldr	r3, [r3, #0]
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop
 8001cf8:	20001470 	.word	0x20001470

08001cfc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b084      	sub	sp, #16
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d04:	2300      	movs	r3, #0
 8001d06:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d101      	bne.n	8001d12 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e033      	b.n	8001d7a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d109      	bne.n	8001d2e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	f7ff f8b4 	bl	8000e88 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2200      	movs	r2, #0
 8001d24:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d32:	f003 0310 	and.w	r3, r3, #16
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d118      	bne.n	8001d6c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001d42:	f023 0302 	bic.w	r3, r3, #2
 8001d46:	f043 0202 	orr.w	r2, r3, #2
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	f000 f93a 	bl	8001fc8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2200      	movs	r2, #0
 8001d58:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5e:	f023 0303 	bic.w	r3, r3, #3
 8001d62:	f043 0201 	orr.w	r2, r3, #1
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	641a      	str	r2, [r3, #64]	; 0x40
 8001d6a:	e001      	b.n	8001d70 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2200      	movs	r2, #0
 8001d74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001d78:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3710      	adds	r7, #16
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
	...

08001d84 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b085      	sub	sp, #20
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d101      	bne.n	8001da0 <HAL_ADC_ConfigChannel+0x1c>
 8001d9c:	2302      	movs	r3, #2
 8001d9e:	e105      	b.n	8001fac <HAL_ADC_ConfigChannel+0x228>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2201      	movs	r2, #1
 8001da4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	2b09      	cmp	r3, #9
 8001dae:	d925      	bls.n	8001dfc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	68d9      	ldr	r1, [r3, #12]
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	b29b      	uxth	r3, r3
 8001dbc:	461a      	mov	r2, r3
 8001dbe:	4613      	mov	r3, r2
 8001dc0:	005b      	lsls	r3, r3, #1
 8001dc2:	4413      	add	r3, r2
 8001dc4:	3b1e      	subs	r3, #30
 8001dc6:	2207      	movs	r2, #7
 8001dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dcc:	43da      	mvns	r2, r3
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	400a      	ands	r2, r1
 8001dd4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	68d9      	ldr	r1, [r3, #12]
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	689a      	ldr	r2, [r3, #8]
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	b29b      	uxth	r3, r3
 8001de6:	4618      	mov	r0, r3
 8001de8:	4603      	mov	r3, r0
 8001dea:	005b      	lsls	r3, r3, #1
 8001dec:	4403      	add	r3, r0
 8001dee:	3b1e      	subs	r3, #30
 8001df0:	409a      	lsls	r2, r3
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	430a      	orrs	r2, r1
 8001df8:	60da      	str	r2, [r3, #12]
 8001dfa:	e022      	b.n	8001e42 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	6919      	ldr	r1, [r3, #16]
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	b29b      	uxth	r3, r3
 8001e08:	461a      	mov	r2, r3
 8001e0a:	4613      	mov	r3, r2
 8001e0c:	005b      	lsls	r3, r3, #1
 8001e0e:	4413      	add	r3, r2
 8001e10:	2207      	movs	r2, #7
 8001e12:	fa02 f303 	lsl.w	r3, r2, r3
 8001e16:	43da      	mvns	r2, r3
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	400a      	ands	r2, r1
 8001e1e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	6919      	ldr	r1, [r3, #16]
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	689a      	ldr	r2, [r3, #8]
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	b29b      	uxth	r3, r3
 8001e30:	4618      	mov	r0, r3
 8001e32:	4603      	mov	r3, r0
 8001e34:	005b      	lsls	r3, r3, #1
 8001e36:	4403      	add	r3, r0
 8001e38:	409a      	lsls	r2, r3
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	430a      	orrs	r2, r1
 8001e40:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	2b06      	cmp	r3, #6
 8001e48:	d824      	bhi.n	8001e94 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	685a      	ldr	r2, [r3, #4]
 8001e54:	4613      	mov	r3, r2
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	4413      	add	r3, r2
 8001e5a:	3b05      	subs	r3, #5
 8001e5c:	221f      	movs	r2, #31
 8001e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e62:	43da      	mvns	r2, r3
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	400a      	ands	r2, r1
 8001e6a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	b29b      	uxth	r3, r3
 8001e78:	4618      	mov	r0, r3
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	685a      	ldr	r2, [r3, #4]
 8001e7e:	4613      	mov	r3, r2
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	4413      	add	r3, r2
 8001e84:	3b05      	subs	r3, #5
 8001e86:	fa00 f203 	lsl.w	r2, r0, r3
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	430a      	orrs	r2, r1
 8001e90:	635a      	str	r2, [r3, #52]	; 0x34
 8001e92:	e04c      	b.n	8001f2e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	2b0c      	cmp	r3, #12
 8001e9a:	d824      	bhi.n	8001ee6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	685a      	ldr	r2, [r3, #4]
 8001ea6:	4613      	mov	r3, r2
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	4413      	add	r3, r2
 8001eac:	3b23      	subs	r3, #35	; 0x23
 8001eae:	221f      	movs	r2, #31
 8001eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb4:	43da      	mvns	r2, r3
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	400a      	ands	r2, r1
 8001ebc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	b29b      	uxth	r3, r3
 8001eca:	4618      	mov	r0, r3
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	685a      	ldr	r2, [r3, #4]
 8001ed0:	4613      	mov	r3, r2
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	4413      	add	r3, r2
 8001ed6:	3b23      	subs	r3, #35	; 0x23
 8001ed8:	fa00 f203 	lsl.w	r2, r0, r3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	430a      	orrs	r2, r1
 8001ee2:	631a      	str	r2, [r3, #48]	; 0x30
 8001ee4:	e023      	b.n	8001f2e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	685a      	ldr	r2, [r3, #4]
 8001ef0:	4613      	mov	r3, r2
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	4413      	add	r3, r2
 8001ef6:	3b41      	subs	r3, #65	; 0x41
 8001ef8:	221f      	movs	r2, #31
 8001efa:	fa02 f303 	lsl.w	r3, r2, r3
 8001efe:	43da      	mvns	r2, r3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	400a      	ands	r2, r1
 8001f06:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	b29b      	uxth	r3, r3
 8001f14:	4618      	mov	r0, r3
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	685a      	ldr	r2, [r3, #4]
 8001f1a:	4613      	mov	r3, r2
 8001f1c:	009b      	lsls	r3, r3, #2
 8001f1e:	4413      	add	r3, r2
 8001f20:	3b41      	subs	r3, #65	; 0x41
 8001f22:	fa00 f203 	lsl.w	r2, r0, r3
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	430a      	orrs	r2, r1
 8001f2c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f2e:	4b22      	ldr	r3, [pc, #136]	; (8001fb8 <HAL_ADC_ConfigChannel+0x234>)
 8001f30:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a21      	ldr	r2, [pc, #132]	; (8001fbc <HAL_ADC_ConfigChannel+0x238>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d109      	bne.n	8001f50 <HAL_ADC_ConfigChannel+0x1cc>
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	2b12      	cmp	r3, #18
 8001f42:	d105      	bne.n	8001f50 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a19      	ldr	r2, [pc, #100]	; (8001fbc <HAL_ADC_ConfigChannel+0x238>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d123      	bne.n	8001fa2 <HAL_ADC_ConfigChannel+0x21e>
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	2b10      	cmp	r3, #16
 8001f60:	d003      	beq.n	8001f6a <HAL_ADC_ConfigChannel+0x1e6>
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	2b11      	cmp	r3, #17
 8001f68:	d11b      	bne.n	8001fa2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	2b10      	cmp	r3, #16
 8001f7c:	d111      	bne.n	8001fa2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001f7e:	4b10      	ldr	r3, [pc, #64]	; (8001fc0 <HAL_ADC_ConfigChannel+0x23c>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a10      	ldr	r2, [pc, #64]	; (8001fc4 <HAL_ADC_ConfigChannel+0x240>)
 8001f84:	fba2 2303 	umull	r2, r3, r2, r3
 8001f88:	0c9a      	lsrs	r2, r3, #18
 8001f8a:	4613      	mov	r3, r2
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	4413      	add	r3, r2
 8001f90:	005b      	lsls	r3, r3, #1
 8001f92:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001f94:	e002      	b.n	8001f9c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	3b01      	subs	r3, #1
 8001f9a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d1f9      	bne.n	8001f96 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001faa:	2300      	movs	r3, #0
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3714      	adds	r7, #20
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr
 8001fb8:	40012300 	.word	0x40012300
 8001fbc:	40012000 	.word	0x40012000
 8001fc0:	20000000 	.word	0x20000000
 8001fc4:	431bde83 	.word	0x431bde83

08001fc8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b085      	sub	sp, #20
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001fd0:	4b79      	ldr	r3, [pc, #484]	; (80021b8 <ADC_Init+0x1f0>)
 8001fd2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	685a      	ldr	r2, [r3, #4]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	431a      	orrs	r2, r3
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	685a      	ldr	r2, [r3, #4]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ffc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	6859      	ldr	r1, [r3, #4]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	691b      	ldr	r3, [r3, #16]
 8002008:	021a      	lsls	r2, r3, #8
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	430a      	orrs	r2, r1
 8002010:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	685a      	ldr	r2, [r3, #4]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002020:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	6859      	ldr	r1, [r3, #4]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	689a      	ldr	r2, [r3, #8]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	430a      	orrs	r2, r1
 8002032:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	689a      	ldr	r2, [r3, #8]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002042:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	6899      	ldr	r1, [r3, #8]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	68da      	ldr	r2, [r3, #12]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	430a      	orrs	r2, r1
 8002054:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800205a:	4a58      	ldr	r2, [pc, #352]	; (80021bc <ADC_Init+0x1f4>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d022      	beq.n	80020a6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	689a      	ldr	r2, [r3, #8]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800206e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	6899      	ldr	r1, [r3, #8]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	430a      	orrs	r2, r1
 8002080:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	689a      	ldr	r2, [r3, #8]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002090:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	6899      	ldr	r1, [r3, #8]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	430a      	orrs	r2, r1
 80020a2:	609a      	str	r2, [r3, #8]
 80020a4:	e00f      	b.n	80020c6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	689a      	ldr	r2, [r3, #8]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80020b4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	689a      	ldr	r2, [r3, #8]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80020c4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	689a      	ldr	r2, [r3, #8]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f022 0202 	bic.w	r2, r2, #2
 80020d4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	6899      	ldr	r1, [r3, #8]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	7e1b      	ldrb	r3, [r3, #24]
 80020e0:	005a      	lsls	r2, r3, #1
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	430a      	orrs	r2, r1
 80020e8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d01b      	beq.n	800212c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	685a      	ldr	r2, [r3, #4]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002102:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	685a      	ldr	r2, [r3, #4]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002112:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	6859      	ldr	r1, [r3, #4]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800211e:	3b01      	subs	r3, #1
 8002120:	035a      	lsls	r2, r3, #13
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	430a      	orrs	r2, r1
 8002128:	605a      	str	r2, [r3, #4]
 800212a:	e007      	b.n	800213c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	685a      	ldr	r2, [r3, #4]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800213a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800214a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	69db      	ldr	r3, [r3, #28]
 8002156:	3b01      	subs	r3, #1
 8002158:	051a      	lsls	r2, r3, #20
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	430a      	orrs	r2, r1
 8002160:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	689a      	ldr	r2, [r3, #8]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002170:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	6899      	ldr	r1, [r3, #8]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800217e:	025a      	lsls	r2, r3, #9
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	430a      	orrs	r2, r1
 8002186:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	689a      	ldr	r2, [r3, #8]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002196:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	6899      	ldr	r1, [r3, #8]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	695b      	ldr	r3, [r3, #20]
 80021a2:	029a      	lsls	r2, r3, #10
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	430a      	orrs	r2, r1
 80021aa:	609a      	str	r2, [r3, #8]
}
 80021ac:	bf00      	nop
 80021ae:	3714      	adds	r7, #20
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr
 80021b8:	40012300 	.word	0x40012300
 80021bc:	0f000001 	.word	0x0f000001

080021c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b085      	sub	sp, #20
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	f003 0307 	and.w	r3, r3, #7
 80021ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021d0:	4b0c      	ldr	r3, [pc, #48]	; (8002204 <__NVIC_SetPriorityGrouping+0x44>)
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021d6:	68ba      	ldr	r2, [r7, #8]
 80021d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021dc:	4013      	ands	r3, r2
 80021de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021f2:	4a04      	ldr	r2, [pc, #16]	; (8002204 <__NVIC_SetPriorityGrouping+0x44>)
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	60d3      	str	r3, [r2, #12]
}
 80021f8:	bf00      	nop
 80021fa:	3714      	adds	r7, #20
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr
 8002204:	e000ed00 	.word	0xe000ed00

08002208 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002208:	b480      	push	{r7}
 800220a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800220c:	4b04      	ldr	r3, [pc, #16]	; (8002220 <__NVIC_GetPriorityGrouping+0x18>)
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	0a1b      	lsrs	r3, r3, #8
 8002212:	f003 0307 	and.w	r3, r3, #7
}
 8002216:	4618      	mov	r0, r3
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr
 8002220:	e000ed00 	.word	0xe000ed00

08002224 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	4603      	mov	r3, r0
 800222c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800222e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002232:	2b00      	cmp	r3, #0
 8002234:	db0b      	blt.n	800224e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002236:	79fb      	ldrb	r3, [r7, #7]
 8002238:	f003 021f 	and.w	r2, r3, #31
 800223c:	4907      	ldr	r1, [pc, #28]	; (800225c <__NVIC_EnableIRQ+0x38>)
 800223e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002242:	095b      	lsrs	r3, r3, #5
 8002244:	2001      	movs	r0, #1
 8002246:	fa00 f202 	lsl.w	r2, r0, r2
 800224a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800224e:	bf00      	nop
 8002250:	370c      	adds	r7, #12
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr
 800225a:	bf00      	nop
 800225c:	e000e100 	.word	0xe000e100

08002260 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
 8002266:	4603      	mov	r3, r0
 8002268:	6039      	str	r1, [r7, #0]
 800226a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800226c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002270:	2b00      	cmp	r3, #0
 8002272:	db0a      	blt.n	800228a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	b2da      	uxtb	r2, r3
 8002278:	490c      	ldr	r1, [pc, #48]	; (80022ac <__NVIC_SetPriority+0x4c>)
 800227a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800227e:	0112      	lsls	r2, r2, #4
 8002280:	b2d2      	uxtb	r2, r2
 8002282:	440b      	add	r3, r1
 8002284:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002288:	e00a      	b.n	80022a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	b2da      	uxtb	r2, r3
 800228e:	4908      	ldr	r1, [pc, #32]	; (80022b0 <__NVIC_SetPriority+0x50>)
 8002290:	79fb      	ldrb	r3, [r7, #7]
 8002292:	f003 030f 	and.w	r3, r3, #15
 8002296:	3b04      	subs	r3, #4
 8002298:	0112      	lsls	r2, r2, #4
 800229a:	b2d2      	uxtb	r2, r2
 800229c:	440b      	add	r3, r1
 800229e:	761a      	strb	r2, [r3, #24]
}
 80022a0:	bf00      	nop
 80022a2:	370c      	adds	r7, #12
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr
 80022ac:	e000e100 	.word	0xe000e100
 80022b0:	e000ed00 	.word	0xe000ed00

080022b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b089      	sub	sp, #36	; 0x24
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	60f8      	str	r0, [r7, #12]
 80022bc:	60b9      	str	r1, [r7, #8]
 80022be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	f003 0307 	and.w	r3, r3, #7
 80022c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022c8:	69fb      	ldr	r3, [r7, #28]
 80022ca:	f1c3 0307 	rsb	r3, r3, #7
 80022ce:	2b04      	cmp	r3, #4
 80022d0:	bf28      	it	cs
 80022d2:	2304      	movcs	r3, #4
 80022d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	3304      	adds	r3, #4
 80022da:	2b06      	cmp	r3, #6
 80022dc:	d902      	bls.n	80022e4 <NVIC_EncodePriority+0x30>
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	3b03      	subs	r3, #3
 80022e2:	e000      	b.n	80022e6 <NVIC_EncodePriority+0x32>
 80022e4:	2300      	movs	r3, #0
 80022e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022e8:	f04f 32ff 	mov.w	r2, #4294967295
 80022ec:	69bb      	ldr	r3, [r7, #24]
 80022ee:	fa02 f303 	lsl.w	r3, r2, r3
 80022f2:	43da      	mvns	r2, r3
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	401a      	ands	r2, r3
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022fc:	f04f 31ff 	mov.w	r1, #4294967295
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	fa01 f303 	lsl.w	r3, r1, r3
 8002306:	43d9      	mvns	r1, r3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800230c:	4313      	orrs	r3, r2
         );
}
 800230e:	4618      	mov	r0, r3
 8002310:	3724      	adds	r7, #36	; 0x24
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr
	...

0800231c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b082      	sub	sp, #8
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	3b01      	subs	r3, #1
 8002328:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800232c:	d301      	bcc.n	8002332 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800232e:	2301      	movs	r3, #1
 8002330:	e00f      	b.n	8002352 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002332:	4a0a      	ldr	r2, [pc, #40]	; (800235c <SysTick_Config+0x40>)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	3b01      	subs	r3, #1
 8002338:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800233a:	210f      	movs	r1, #15
 800233c:	f04f 30ff 	mov.w	r0, #4294967295
 8002340:	f7ff ff8e 	bl	8002260 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002344:	4b05      	ldr	r3, [pc, #20]	; (800235c <SysTick_Config+0x40>)
 8002346:	2200      	movs	r2, #0
 8002348:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800234a:	4b04      	ldr	r3, [pc, #16]	; (800235c <SysTick_Config+0x40>)
 800234c:	2207      	movs	r2, #7
 800234e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002350:	2300      	movs	r3, #0
}
 8002352:	4618      	mov	r0, r3
 8002354:	3708      	adds	r7, #8
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	e000e010 	.word	0xe000e010

08002360 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002368:	6878      	ldr	r0, [r7, #4]
 800236a:	f7ff ff29 	bl	80021c0 <__NVIC_SetPriorityGrouping>
}
 800236e:	bf00      	nop
 8002370:	3708      	adds	r7, #8
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}

08002376 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002376:	b580      	push	{r7, lr}
 8002378:	b086      	sub	sp, #24
 800237a:	af00      	add	r7, sp, #0
 800237c:	4603      	mov	r3, r0
 800237e:	60b9      	str	r1, [r7, #8]
 8002380:	607a      	str	r2, [r7, #4]
 8002382:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002384:	2300      	movs	r3, #0
 8002386:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002388:	f7ff ff3e 	bl	8002208 <__NVIC_GetPriorityGrouping>
 800238c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	68b9      	ldr	r1, [r7, #8]
 8002392:	6978      	ldr	r0, [r7, #20]
 8002394:	f7ff ff8e 	bl	80022b4 <NVIC_EncodePriority>
 8002398:	4602      	mov	r2, r0
 800239a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800239e:	4611      	mov	r1, r2
 80023a0:	4618      	mov	r0, r3
 80023a2:	f7ff ff5d 	bl	8002260 <__NVIC_SetPriority>
}
 80023a6:	bf00      	nop
 80023a8:	3718      	adds	r7, #24
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}

080023ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023ae:	b580      	push	{r7, lr}
 80023b0:	b082      	sub	sp, #8
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	4603      	mov	r3, r0
 80023b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023bc:	4618      	mov	r0, r3
 80023be:	f7ff ff31 	bl	8002224 <__NVIC_EnableIRQ>
}
 80023c2:	bf00      	nop
 80023c4:	3708      	adds	r7, #8
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}

080023ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023ca:	b580      	push	{r7, lr}
 80023cc:	b082      	sub	sp, #8
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	f7ff ffa2 	bl	800231c <SysTick_Config>
 80023d8:	4603      	mov	r3, r0
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3708      	adds	r7, #8
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
	...

080023e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b089      	sub	sp, #36	; 0x24
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
 80023ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80023ee:	2300      	movs	r3, #0
 80023f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80023f2:	2300      	movs	r3, #0
 80023f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80023f6:	2300      	movs	r3, #0
 80023f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023fa:	2300      	movs	r3, #0
 80023fc:	61fb      	str	r3, [r7, #28]
 80023fe:	e159      	b.n	80026b4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002400:	2201      	movs	r2, #1
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	fa02 f303 	lsl.w	r3, r2, r3
 8002408:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	697a      	ldr	r2, [r7, #20]
 8002410:	4013      	ands	r3, r2
 8002412:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002414:	693a      	ldr	r2, [r7, #16]
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	429a      	cmp	r2, r3
 800241a:	f040 8148 	bne.w	80026ae <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	f003 0303 	and.w	r3, r3, #3
 8002426:	2b01      	cmp	r3, #1
 8002428:	d005      	beq.n	8002436 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002432:	2b02      	cmp	r3, #2
 8002434:	d130      	bne.n	8002498 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800243c:	69fb      	ldr	r3, [r7, #28]
 800243e:	005b      	lsls	r3, r3, #1
 8002440:	2203      	movs	r2, #3
 8002442:	fa02 f303 	lsl.w	r3, r2, r3
 8002446:	43db      	mvns	r3, r3
 8002448:	69ba      	ldr	r2, [r7, #24]
 800244a:	4013      	ands	r3, r2
 800244c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	68da      	ldr	r2, [r3, #12]
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	005b      	lsls	r3, r3, #1
 8002456:	fa02 f303 	lsl.w	r3, r2, r3
 800245a:	69ba      	ldr	r2, [r7, #24]
 800245c:	4313      	orrs	r3, r2
 800245e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	69ba      	ldr	r2, [r7, #24]
 8002464:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800246c:	2201      	movs	r2, #1
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	fa02 f303 	lsl.w	r3, r2, r3
 8002474:	43db      	mvns	r3, r3
 8002476:	69ba      	ldr	r2, [r7, #24]
 8002478:	4013      	ands	r3, r2
 800247a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	091b      	lsrs	r3, r3, #4
 8002482:	f003 0201 	and.w	r2, r3, #1
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	fa02 f303 	lsl.w	r3, r2, r3
 800248c:	69ba      	ldr	r2, [r7, #24]
 800248e:	4313      	orrs	r3, r2
 8002490:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	69ba      	ldr	r2, [r7, #24]
 8002496:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	f003 0303 	and.w	r3, r3, #3
 80024a0:	2b03      	cmp	r3, #3
 80024a2:	d017      	beq.n	80024d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	005b      	lsls	r3, r3, #1
 80024ae:	2203      	movs	r2, #3
 80024b0:	fa02 f303 	lsl.w	r3, r2, r3
 80024b4:	43db      	mvns	r3, r3
 80024b6:	69ba      	ldr	r2, [r7, #24]
 80024b8:	4013      	ands	r3, r2
 80024ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	689a      	ldr	r2, [r3, #8]
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	005b      	lsls	r3, r3, #1
 80024c4:	fa02 f303 	lsl.w	r3, r2, r3
 80024c8:	69ba      	ldr	r2, [r7, #24]
 80024ca:	4313      	orrs	r3, r2
 80024cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	69ba      	ldr	r2, [r7, #24]
 80024d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	f003 0303 	and.w	r3, r3, #3
 80024dc:	2b02      	cmp	r3, #2
 80024de:	d123      	bne.n	8002528 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024e0:	69fb      	ldr	r3, [r7, #28]
 80024e2:	08da      	lsrs	r2, r3, #3
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	3208      	adds	r2, #8
 80024e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	f003 0307 	and.w	r3, r3, #7
 80024f4:	009b      	lsls	r3, r3, #2
 80024f6:	220f      	movs	r2, #15
 80024f8:	fa02 f303 	lsl.w	r3, r2, r3
 80024fc:	43db      	mvns	r3, r3
 80024fe:	69ba      	ldr	r2, [r7, #24]
 8002500:	4013      	ands	r3, r2
 8002502:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	691a      	ldr	r2, [r3, #16]
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	f003 0307 	and.w	r3, r3, #7
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	fa02 f303 	lsl.w	r3, r2, r3
 8002514:	69ba      	ldr	r2, [r7, #24]
 8002516:	4313      	orrs	r3, r2
 8002518:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	08da      	lsrs	r2, r3, #3
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	3208      	adds	r2, #8
 8002522:	69b9      	ldr	r1, [r7, #24]
 8002524:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	005b      	lsls	r3, r3, #1
 8002532:	2203      	movs	r2, #3
 8002534:	fa02 f303 	lsl.w	r3, r2, r3
 8002538:	43db      	mvns	r3, r3
 800253a:	69ba      	ldr	r2, [r7, #24]
 800253c:	4013      	ands	r3, r2
 800253e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f003 0203 	and.w	r2, r3, #3
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	005b      	lsls	r3, r3, #1
 800254c:	fa02 f303 	lsl.w	r3, r2, r3
 8002550:	69ba      	ldr	r2, [r7, #24]
 8002552:	4313      	orrs	r3, r2
 8002554:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	69ba      	ldr	r2, [r7, #24]
 800255a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002564:	2b00      	cmp	r3, #0
 8002566:	f000 80a2 	beq.w	80026ae <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800256a:	2300      	movs	r3, #0
 800256c:	60fb      	str	r3, [r7, #12]
 800256e:	4b57      	ldr	r3, [pc, #348]	; (80026cc <HAL_GPIO_Init+0x2e8>)
 8002570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002572:	4a56      	ldr	r2, [pc, #344]	; (80026cc <HAL_GPIO_Init+0x2e8>)
 8002574:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002578:	6453      	str	r3, [r2, #68]	; 0x44
 800257a:	4b54      	ldr	r3, [pc, #336]	; (80026cc <HAL_GPIO_Init+0x2e8>)
 800257c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800257e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002582:	60fb      	str	r3, [r7, #12]
 8002584:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002586:	4a52      	ldr	r2, [pc, #328]	; (80026d0 <HAL_GPIO_Init+0x2ec>)
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	089b      	lsrs	r3, r3, #2
 800258c:	3302      	adds	r3, #2
 800258e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002592:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002594:	69fb      	ldr	r3, [r7, #28]
 8002596:	f003 0303 	and.w	r3, r3, #3
 800259a:	009b      	lsls	r3, r3, #2
 800259c:	220f      	movs	r2, #15
 800259e:	fa02 f303 	lsl.w	r3, r2, r3
 80025a2:	43db      	mvns	r3, r3
 80025a4:	69ba      	ldr	r2, [r7, #24]
 80025a6:	4013      	ands	r3, r2
 80025a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	4a49      	ldr	r2, [pc, #292]	; (80026d4 <HAL_GPIO_Init+0x2f0>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d019      	beq.n	80025e6 <HAL_GPIO_Init+0x202>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4a48      	ldr	r2, [pc, #288]	; (80026d8 <HAL_GPIO_Init+0x2f4>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d013      	beq.n	80025e2 <HAL_GPIO_Init+0x1fe>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4a47      	ldr	r2, [pc, #284]	; (80026dc <HAL_GPIO_Init+0x2f8>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d00d      	beq.n	80025de <HAL_GPIO_Init+0x1fa>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	4a46      	ldr	r2, [pc, #280]	; (80026e0 <HAL_GPIO_Init+0x2fc>)
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d007      	beq.n	80025da <HAL_GPIO_Init+0x1f6>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	4a45      	ldr	r2, [pc, #276]	; (80026e4 <HAL_GPIO_Init+0x300>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d101      	bne.n	80025d6 <HAL_GPIO_Init+0x1f2>
 80025d2:	2304      	movs	r3, #4
 80025d4:	e008      	b.n	80025e8 <HAL_GPIO_Init+0x204>
 80025d6:	2307      	movs	r3, #7
 80025d8:	e006      	b.n	80025e8 <HAL_GPIO_Init+0x204>
 80025da:	2303      	movs	r3, #3
 80025dc:	e004      	b.n	80025e8 <HAL_GPIO_Init+0x204>
 80025de:	2302      	movs	r3, #2
 80025e0:	e002      	b.n	80025e8 <HAL_GPIO_Init+0x204>
 80025e2:	2301      	movs	r3, #1
 80025e4:	e000      	b.n	80025e8 <HAL_GPIO_Init+0x204>
 80025e6:	2300      	movs	r3, #0
 80025e8:	69fa      	ldr	r2, [r7, #28]
 80025ea:	f002 0203 	and.w	r2, r2, #3
 80025ee:	0092      	lsls	r2, r2, #2
 80025f0:	4093      	lsls	r3, r2
 80025f2:	69ba      	ldr	r2, [r7, #24]
 80025f4:	4313      	orrs	r3, r2
 80025f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025f8:	4935      	ldr	r1, [pc, #212]	; (80026d0 <HAL_GPIO_Init+0x2ec>)
 80025fa:	69fb      	ldr	r3, [r7, #28]
 80025fc:	089b      	lsrs	r3, r3, #2
 80025fe:	3302      	adds	r3, #2
 8002600:	69ba      	ldr	r2, [r7, #24]
 8002602:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002606:	4b38      	ldr	r3, [pc, #224]	; (80026e8 <HAL_GPIO_Init+0x304>)
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	43db      	mvns	r3, r3
 8002610:	69ba      	ldr	r2, [r7, #24]
 8002612:	4013      	ands	r3, r2
 8002614:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800261e:	2b00      	cmp	r3, #0
 8002620:	d003      	beq.n	800262a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002622:	69ba      	ldr	r2, [r7, #24]
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	4313      	orrs	r3, r2
 8002628:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800262a:	4a2f      	ldr	r2, [pc, #188]	; (80026e8 <HAL_GPIO_Init+0x304>)
 800262c:	69bb      	ldr	r3, [r7, #24]
 800262e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002630:	4b2d      	ldr	r3, [pc, #180]	; (80026e8 <HAL_GPIO_Init+0x304>)
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	43db      	mvns	r3, r3
 800263a:	69ba      	ldr	r2, [r7, #24]
 800263c:	4013      	ands	r3, r2
 800263e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002648:	2b00      	cmp	r3, #0
 800264a:	d003      	beq.n	8002654 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800264c:	69ba      	ldr	r2, [r7, #24]
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	4313      	orrs	r3, r2
 8002652:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002654:	4a24      	ldr	r2, [pc, #144]	; (80026e8 <HAL_GPIO_Init+0x304>)
 8002656:	69bb      	ldr	r3, [r7, #24]
 8002658:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800265a:	4b23      	ldr	r3, [pc, #140]	; (80026e8 <HAL_GPIO_Init+0x304>)
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	43db      	mvns	r3, r3
 8002664:	69ba      	ldr	r2, [r7, #24]
 8002666:	4013      	ands	r3, r2
 8002668:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d003      	beq.n	800267e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002676:	69ba      	ldr	r2, [r7, #24]
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	4313      	orrs	r3, r2
 800267c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800267e:	4a1a      	ldr	r2, [pc, #104]	; (80026e8 <HAL_GPIO_Init+0x304>)
 8002680:	69bb      	ldr	r3, [r7, #24]
 8002682:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002684:	4b18      	ldr	r3, [pc, #96]	; (80026e8 <HAL_GPIO_Init+0x304>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	43db      	mvns	r3, r3
 800268e:	69ba      	ldr	r2, [r7, #24]
 8002690:	4013      	ands	r3, r2
 8002692:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800269c:	2b00      	cmp	r3, #0
 800269e:	d003      	beq.n	80026a8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80026a0:	69ba      	ldr	r2, [r7, #24]
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	4313      	orrs	r3, r2
 80026a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026a8:	4a0f      	ldr	r2, [pc, #60]	; (80026e8 <HAL_GPIO_Init+0x304>)
 80026aa:	69bb      	ldr	r3, [r7, #24]
 80026ac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	3301      	adds	r3, #1
 80026b2:	61fb      	str	r3, [r7, #28]
 80026b4:	69fb      	ldr	r3, [r7, #28]
 80026b6:	2b0f      	cmp	r3, #15
 80026b8:	f67f aea2 	bls.w	8002400 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80026bc:	bf00      	nop
 80026be:	bf00      	nop
 80026c0:	3724      	adds	r7, #36	; 0x24
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr
 80026ca:	bf00      	nop
 80026cc:	40023800 	.word	0x40023800
 80026d0:	40013800 	.word	0x40013800
 80026d4:	40020000 	.word	0x40020000
 80026d8:	40020400 	.word	0x40020400
 80026dc:	40020800 	.word	0x40020800
 80026e0:	40020c00 	.word	0x40020c00
 80026e4:	40021000 	.word	0x40021000
 80026e8:	40013c00 	.word	0x40013c00

080026ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b083      	sub	sp, #12
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
 80026f4:	460b      	mov	r3, r1
 80026f6:	807b      	strh	r3, [r7, #2]
 80026f8:	4613      	mov	r3, r2
 80026fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80026fc:	787b      	ldrb	r3, [r7, #1]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d003      	beq.n	800270a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002702:	887a      	ldrh	r2, [r7, #2]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002708:	e003      	b.n	8002712 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800270a:	887b      	ldrh	r3, [r7, #2]
 800270c:	041a      	lsls	r2, r3, #16
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	619a      	str	r2, [r3, #24]
}
 8002712:	bf00      	nop
 8002714:	370c      	adds	r7, #12
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr
	...

08002720 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b082      	sub	sp, #8
 8002724:	af00      	add	r7, sp, #0
 8002726:	4603      	mov	r3, r0
 8002728:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800272a:	4b08      	ldr	r3, [pc, #32]	; (800274c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800272c:	695a      	ldr	r2, [r3, #20]
 800272e:	88fb      	ldrh	r3, [r7, #6]
 8002730:	4013      	ands	r3, r2
 8002732:	2b00      	cmp	r3, #0
 8002734:	d006      	beq.n	8002744 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002736:	4a05      	ldr	r2, [pc, #20]	; (800274c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002738:	88fb      	ldrh	r3, [r7, #6]
 800273a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800273c:	88fb      	ldrh	r3, [r7, #6]
 800273e:	4618      	mov	r0, r3
 8002740:	f000 f806 	bl	8002750 <HAL_GPIO_EXTI_Callback>
  }
}
 8002744:	bf00      	nop
 8002746:	3708      	adds	r7, #8
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}
 800274c:	40013c00 	.word	0x40013c00

08002750 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002750:	b480      	push	{r7}
 8002752:	b083      	sub	sp, #12
 8002754:	af00      	add	r7, sp, #0
 8002756:	4603      	mov	r3, r0
 8002758:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800275a:	bf00      	nop
 800275c:	370c      	adds	r7, #12
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr
	...

08002768 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b084      	sub	sp, #16
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d101      	bne.n	800277a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e12b      	b.n	80029d2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002780:	b2db      	uxtb	r3, r3
 8002782:	2b00      	cmp	r3, #0
 8002784:	d106      	bne.n	8002794 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2200      	movs	r2, #0
 800278a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	f7fe fbbe 	bl	8000f10 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2224      	movs	r2, #36	; 0x24
 8002798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f022 0201 	bic.w	r2, r2, #1
 80027aa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80027ba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80027ca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80027cc:	f001 fbfc 	bl	8003fc8 <HAL_RCC_GetPCLK1Freq>
 80027d0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	4a81      	ldr	r2, [pc, #516]	; (80029dc <HAL_I2C_Init+0x274>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d807      	bhi.n	80027ec <HAL_I2C_Init+0x84>
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	4a80      	ldr	r2, [pc, #512]	; (80029e0 <HAL_I2C_Init+0x278>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	bf94      	ite	ls
 80027e4:	2301      	movls	r3, #1
 80027e6:	2300      	movhi	r3, #0
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	e006      	b.n	80027fa <HAL_I2C_Init+0x92>
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	4a7d      	ldr	r2, [pc, #500]	; (80029e4 <HAL_I2C_Init+0x27c>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	bf94      	ite	ls
 80027f4:	2301      	movls	r3, #1
 80027f6:	2300      	movhi	r3, #0
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d001      	beq.n	8002802 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e0e7      	b.n	80029d2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	4a78      	ldr	r2, [pc, #480]	; (80029e8 <HAL_I2C_Init+0x280>)
 8002806:	fba2 2303 	umull	r2, r3, r2, r3
 800280a:	0c9b      	lsrs	r3, r3, #18
 800280c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	68ba      	ldr	r2, [r7, #8]
 800281e:	430a      	orrs	r2, r1
 8002820:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	6a1b      	ldr	r3, [r3, #32]
 8002828:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	4a6a      	ldr	r2, [pc, #424]	; (80029dc <HAL_I2C_Init+0x274>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d802      	bhi.n	800283c <HAL_I2C_Init+0xd4>
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	3301      	adds	r3, #1
 800283a:	e009      	b.n	8002850 <HAL_I2C_Init+0xe8>
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002842:	fb02 f303 	mul.w	r3, r2, r3
 8002846:	4a69      	ldr	r2, [pc, #420]	; (80029ec <HAL_I2C_Init+0x284>)
 8002848:	fba2 2303 	umull	r2, r3, r2, r3
 800284c:	099b      	lsrs	r3, r3, #6
 800284e:	3301      	adds	r3, #1
 8002850:	687a      	ldr	r2, [r7, #4]
 8002852:	6812      	ldr	r2, [r2, #0]
 8002854:	430b      	orrs	r3, r1
 8002856:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	69db      	ldr	r3, [r3, #28]
 800285e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002862:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	495c      	ldr	r1, [pc, #368]	; (80029dc <HAL_I2C_Init+0x274>)
 800286c:	428b      	cmp	r3, r1
 800286e:	d819      	bhi.n	80028a4 <HAL_I2C_Init+0x13c>
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	1e59      	subs	r1, r3, #1
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	005b      	lsls	r3, r3, #1
 800287a:	fbb1 f3f3 	udiv	r3, r1, r3
 800287e:	1c59      	adds	r1, r3, #1
 8002880:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002884:	400b      	ands	r3, r1
 8002886:	2b00      	cmp	r3, #0
 8002888:	d00a      	beq.n	80028a0 <HAL_I2C_Init+0x138>
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	1e59      	subs	r1, r3, #1
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	005b      	lsls	r3, r3, #1
 8002894:	fbb1 f3f3 	udiv	r3, r1, r3
 8002898:	3301      	adds	r3, #1
 800289a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800289e:	e051      	b.n	8002944 <HAL_I2C_Init+0x1dc>
 80028a0:	2304      	movs	r3, #4
 80028a2:	e04f      	b.n	8002944 <HAL_I2C_Init+0x1dc>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d111      	bne.n	80028d0 <HAL_I2C_Init+0x168>
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	1e58      	subs	r0, r3, #1
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6859      	ldr	r1, [r3, #4]
 80028b4:	460b      	mov	r3, r1
 80028b6:	005b      	lsls	r3, r3, #1
 80028b8:	440b      	add	r3, r1
 80028ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80028be:	3301      	adds	r3, #1
 80028c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	bf0c      	ite	eq
 80028c8:	2301      	moveq	r3, #1
 80028ca:	2300      	movne	r3, #0
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	e012      	b.n	80028f6 <HAL_I2C_Init+0x18e>
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	1e58      	subs	r0, r3, #1
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6859      	ldr	r1, [r3, #4]
 80028d8:	460b      	mov	r3, r1
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	440b      	add	r3, r1
 80028de:	0099      	lsls	r1, r3, #2
 80028e0:	440b      	add	r3, r1
 80028e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80028e6:	3301      	adds	r3, #1
 80028e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	bf0c      	ite	eq
 80028f0:	2301      	moveq	r3, #1
 80028f2:	2300      	movne	r3, #0
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d001      	beq.n	80028fe <HAL_I2C_Init+0x196>
 80028fa:	2301      	movs	r3, #1
 80028fc:	e022      	b.n	8002944 <HAL_I2C_Init+0x1dc>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d10e      	bne.n	8002924 <HAL_I2C_Init+0x1bc>
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	1e58      	subs	r0, r3, #1
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6859      	ldr	r1, [r3, #4]
 800290e:	460b      	mov	r3, r1
 8002910:	005b      	lsls	r3, r3, #1
 8002912:	440b      	add	r3, r1
 8002914:	fbb0 f3f3 	udiv	r3, r0, r3
 8002918:	3301      	adds	r3, #1
 800291a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800291e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002922:	e00f      	b.n	8002944 <HAL_I2C_Init+0x1dc>
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	1e58      	subs	r0, r3, #1
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6859      	ldr	r1, [r3, #4]
 800292c:	460b      	mov	r3, r1
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	440b      	add	r3, r1
 8002932:	0099      	lsls	r1, r3, #2
 8002934:	440b      	add	r3, r1
 8002936:	fbb0 f3f3 	udiv	r3, r0, r3
 800293a:	3301      	adds	r3, #1
 800293c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002940:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002944:	6879      	ldr	r1, [r7, #4]
 8002946:	6809      	ldr	r1, [r1, #0]
 8002948:	4313      	orrs	r3, r2
 800294a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	69da      	ldr	r2, [r3, #28]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6a1b      	ldr	r3, [r3, #32]
 800295e:	431a      	orrs	r2, r3
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	430a      	orrs	r2, r1
 8002966:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002972:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	6911      	ldr	r1, [r2, #16]
 800297a:	687a      	ldr	r2, [r7, #4]
 800297c:	68d2      	ldr	r2, [r2, #12]
 800297e:	4311      	orrs	r1, r2
 8002980:	687a      	ldr	r2, [r7, #4]
 8002982:	6812      	ldr	r2, [r2, #0]
 8002984:	430b      	orrs	r3, r1
 8002986:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	68db      	ldr	r3, [r3, #12]
 800298e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	695a      	ldr	r2, [r3, #20]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	699b      	ldr	r3, [r3, #24]
 800299a:	431a      	orrs	r2, r3
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	430a      	orrs	r2, r1
 80029a2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f042 0201 	orr.w	r2, r2, #1
 80029b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2200      	movs	r2, #0
 80029b8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2220      	movs	r2, #32
 80029be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2200      	movs	r2, #0
 80029c6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2200      	movs	r2, #0
 80029cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80029d0:	2300      	movs	r3, #0
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3710      	adds	r7, #16
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	000186a0 	.word	0x000186a0
 80029e0:	001e847f 	.word	0x001e847f
 80029e4:	003d08ff 	.word	0x003d08ff
 80029e8:	431bde83 	.word	0x431bde83
 80029ec:	10624dd3 	.word	0x10624dd3

080029f0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b088      	sub	sp, #32
 80029f4:	af02      	add	r7, sp, #8
 80029f6:	60f8      	str	r0, [r7, #12]
 80029f8:	4608      	mov	r0, r1
 80029fa:	4611      	mov	r1, r2
 80029fc:	461a      	mov	r2, r3
 80029fe:	4603      	mov	r3, r0
 8002a00:	817b      	strh	r3, [r7, #10]
 8002a02:	460b      	mov	r3, r1
 8002a04:	813b      	strh	r3, [r7, #8]
 8002a06:	4613      	mov	r3, r2
 8002a08:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002a0a:	f7ff f96b 	bl	8001ce4 <HAL_GetTick>
 8002a0e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	2b20      	cmp	r3, #32
 8002a1a:	f040 80d9 	bne.w	8002bd0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	9300      	str	r3, [sp, #0]
 8002a22:	2319      	movs	r3, #25
 8002a24:	2201      	movs	r2, #1
 8002a26:	496d      	ldr	r1, [pc, #436]	; (8002bdc <HAL_I2C_Mem_Write+0x1ec>)
 8002a28:	68f8      	ldr	r0, [r7, #12]
 8002a2a:	f000 fc7f 	bl	800332c <I2C_WaitOnFlagUntilTimeout>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d001      	beq.n	8002a38 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002a34:	2302      	movs	r3, #2
 8002a36:	e0cc      	b.n	8002bd2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d101      	bne.n	8002a46 <HAL_I2C_Mem_Write+0x56>
 8002a42:	2302      	movs	r3, #2
 8002a44:	e0c5      	b.n	8002bd2 <HAL_I2C_Mem_Write+0x1e2>
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	2201      	movs	r2, #1
 8002a4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 0301 	and.w	r3, r3, #1
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d007      	beq.n	8002a6c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f042 0201 	orr.w	r2, r2, #1
 8002a6a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a7a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2221      	movs	r2, #33	; 0x21
 8002a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2240      	movs	r2, #64	; 0x40
 8002a88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	6a3a      	ldr	r2, [r7, #32]
 8002a96:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002a9c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aa2:	b29a      	uxth	r2, r3
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	4a4d      	ldr	r2, [pc, #308]	; (8002be0 <HAL_I2C_Mem_Write+0x1f0>)
 8002aac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002aae:	88f8      	ldrh	r0, [r7, #6]
 8002ab0:	893a      	ldrh	r2, [r7, #8]
 8002ab2:	8979      	ldrh	r1, [r7, #10]
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	9301      	str	r3, [sp, #4]
 8002ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aba:	9300      	str	r3, [sp, #0]
 8002abc:	4603      	mov	r3, r0
 8002abe:	68f8      	ldr	r0, [r7, #12]
 8002ac0:	f000 fab6 	bl	8003030 <I2C_RequestMemoryWrite>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d052      	beq.n	8002b70 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e081      	b.n	8002bd2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ace:	697a      	ldr	r2, [r7, #20]
 8002ad0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ad2:	68f8      	ldr	r0, [r7, #12]
 8002ad4:	f000 fd00 	bl	80034d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d00d      	beq.n	8002afa <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae2:	2b04      	cmp	r3, #4
 8002ae4:	d107      	bne.n	8002af6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002af4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e06b      	b.n	8002bd2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002afe:	781a      	ldrb	r2, [r3, #0]
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b0a:	1c5a      	adds	r2, r3, #1
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b14:	3b01      	subs	r3, #1
 8002b16:	b29a      	uxth	r2, r3
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b20:	b29b      	uxth	r3, r3
 8002b22:	3b01      	subs	r3, #1
 8002b24:	b29a      	uxth	r2, r3
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	695b      	ldr	r3, [r3, #20]
 8002b30:	f003 0304 	and.w	r3, r3, #4
 8002b34:	2b04      	cmp	r3, #4
 8002b36:	d11b      	bne.n	8002b70 <HAL_I2C_Mem_Write+0x180>
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d017      	beq.n	8002b70 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b44:	781a      	ldrb	r2, [r3, #0]
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b50:	1c5a      	adds	r2, r3, #1
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b5a:	3b01      	subs	r3, #1
 8002b5c:	b29a      	uxth	r2, r3
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b66:	b29b      	uxth	r3, r3
 8002b68:	3b01      	subs	r3, #1
 8002b6a:	b29a      	uxth	r2, r3
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d1aa      	bne.n	8002ace <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b78:	697a      	ldr	r2, [r7, #20]
 8002b7a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b7c:	68f8      	ldr	r0, [r7, #12]
 8002b7e:	f000 fcec 	bl	800355a <I2C_WaitOnBTFFlagUntilTimeout>
 8002b82:	4603      	mov	r3, r0
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d00d      	beq.n	8002ba4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8c:	2b04      	cmp	r3, #4
 8002b8e:	d107      	bne.n	8002ba0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b9e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e016      	b.n	8002bd2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bb2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	2220      	movs	r2, #32
 8002bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	e000      	b.n	8002bd2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002bd0:	2302      	movs	r3, #2
  }
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3718      	adds	r7, #24
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	bf00      	nop
 8002bdc:	00100002 	.word	0x00100002
 8002be0:	ffff0000 	.word	0xffff0000

08002be4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b08c      	sub	sp, #48	; 0x30
 8002be8:	af02      	add	r7, sp, #8
 8002bea:	60f8      	str	r0, [r7, #12]
 8002bec:	4608      	mov	r0, r1
 8002bee:	4611      	mov	r1, r2
 8002bf0:	461a      	mov	r2, r3
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	817b      	strh	r3, [r7, #10]
 8002bf6:	460b      	mov	r3, r1
 8002bf8:	813b      	strh	r3, [r7, #8]
 8002bfa:	4613      	mov	r3, r2
 8002bfc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002bfe:	f7ff f871 	bl	8001ce4 <HAL_GetTick>
 8002c02:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	2b20      	cmp	r3, #32
 8002c0e:	f040 8208 	bne.w	8003022 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c14:	9300      	str	r3, [sp, #0]
 8002c16:	2319      	movs	r3, #25
 8002c18:	2201      	movs	r2, #1
 8002c1a:	497b      	ldr	r1, [pc, #492]	; (8002e08 <HAL_I2C_Mem_Read+0x224>)
 8002c1c:	68f8      	ldr	r0, [r7, #12]
 8002c1e:	f000 fb85 	bl	800332c <I2C_WaitOnFlagUntilTimeout>
 8002c22:	4603      	mov	r3, r0
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d001      	beq.n	8002c2c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002c28:	2302      	movs	r3, #2
 8002c2a:	e1fb      	b.n	8003024 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	d101      	bne.n	8002c3a <HAL_I2C_Mem_Read+0x56>
 8002c36:	2302      	movs	r3, #2
 8002c38:	e1f4      	b.n	8003024 <HAL_I2C_Mem_Read+0x440>
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f003 0301 	and.w	r3, r3, #1
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d007      	beq.n	8002c60 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f042 0201 	orr.w	r2, r2, #1
 8002c5e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c6e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2222      	movs	r2, #34	; 0x22
 8002c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2240      	movs	r2, #64	; 0x40
 8002c7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2200      	movs	r2, #0
 8002c84:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c8a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002c90:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c96:	b29a      	uxth	r2, r3
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	4a5b      	ldr	r2, [pc, #364]	; (8002e0c <HAL_I2C_Mem_Read+0x228>)
 8002ca0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002ca2:	88f8      	ldrh	r0, [r7, #6]
 8002ca4:	893a      	ldrh	r2, [r7, #8]
 8002ca6:	8979      	ldrh	r1, [r7, #10]
 8002ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002caa:	9301      	str	r3, [sp, #4]
 8002cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cae:	9300      	str	r3, [sp, #0]
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	68f8      	ldr	r0, [r7, #12]
 8002cb4:	f000 fa52 	bl	800315c <I2C_RequestMemoryRead>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d001      	beq.n	8002cc2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e1b0      	b.n	8003024 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d113      	bne.n	8002cf2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cca:	2300      	movs	r3, #0
 8002ccc:	623b      	str	r3, [r7, #32]
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	695b      	ldr	r3, [r3, #20]
 8002cd4:	623b      	str	r3, [r7, #32]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	699b      	ldr	r3, [r3, #24]
 8002cdc:	623b      	str	r3, [r7, #32]
 8002cde:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cee:	601a      	str	r2, [r3, #0]
 8002cf0:	e184      	b.n	8002ffc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d11b      	bne.n	8002d32 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d08:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	61fb      	str	r3, [r7, #28]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	695b      	ldr	r3, [r3, #20]
 8002d14:	61fb      	str	r3, [r7, #28]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	699b      	ldr	r3, [r3, #24]
 8002d1c:	61fb      	str	r3, [r7, #28]
 8002d1e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d2e:	601a      	str	r2, [r3, #0]
 8002d30:	e164      	b.n	8002ffc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d36:	2b02      	cmp	r3, #2
 8002d38:	d11b      	bne.n	8002d72 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d48:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d58:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	61bb      	str	r3, [r7, #24]
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	695b      	ldr	r3, [r3, #20]
 8002d64:	61bb      	str	r3, [r7, #24]
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	699b      	ldr	r3, [r3, #24]
 8002d6c:	61bb      	str	r3, [r7, #24]
 8002d6e:	69bb      	ldr	r3, [r7, #24]
 8002d70:	e144      	b.n	8002ffc <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d72:	2300      	movs	r3, #0
 8002d74:	617b      	str	r3, [r7, #20]
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	695b      	ldr	r3, [r3, #20]
 8002d7c:	617b      	str	r3, [r7, #20]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	699b      	ldr	r3, [r3, #24]
 8002d84:	617b      	str	r3, [r7, #20]
 8002d86:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002d88:	e138      	b.n	8002ffc <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d8e:	2b03      	cmp	r3, #3
 8002d90:	f200 80f1 	bhi.w	8002f76 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d123      	bne.n	8002de4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d9e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002da0:	68f8      	ldr	r0, [r7, #12]
 8002da2:	f000 fc1b 	bl	80035dc <I2C_WaitOnRXNEFlagUntilTimeout>
 8002da6:	4603      	mov	r3, r0
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d001      	beq.n	8002db0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	e139      	b.n	8003024 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	691a      	ldr	r2, [r3, #16]
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dba:	b2d2      	uxtb	r2, r2
 8002dbc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc2:	1c5a      	adds	r2, r3, #1
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dcc:	3b01      	subs	r3, #1
 8002dce:	b29a      	uxth	r2, r3
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dd8:	b29b      	uxth	r3, r3
 8002dda:	3b01      	subs	r3, #1
 8002ddc:	b29a      	uxth	r2, r3
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002de2:	e10b      	b.n	8002ffc <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002de8:	2b02      	cmp	r3, #2
 8002dea:	d14e      	bne.n	8002e8a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dee:	9300      	str	r3, [sp, #0]
 8002df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002df2:	2200      	movs	r2, #0
 8002df4:	4906      	ldr	r1, [pc, #24]	; (8002e10 <HAL_I2C_Mem_Read+0x22c>)
 8002df6:	68f8      	ldr	r0, [r7, #12]
 8002df8:	f000 fa98 	bl	800332c <I2C_WaitOnFlagUntilTimeout>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d008      	beq.n	8002e14 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e10e      	b.n	8003024 <HAL_I2C_Mem_Read+0x440>
 8002e06:	bf00      	nop
 8002e08:	00100002 	.word	0x00100002
 8002e0c:	ffff0000 	.word	0xffff0000
 8002e10:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e22:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	691a      	ldr	r2, [r3, #16]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e2e:	b2d2      	uxtb	r2, r2
 8002e30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e36:	1c5a      	adds	r2, r3, #1
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e40:	3b01      	subs	r3, #1
 8002e42:	b29a      	uxth	r2, r3
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e4c:	b29b      	uxth	r3, r3
 8002e4e:	3b01      	subs	r3, #1
 8002e50:	b29a      	uxth	r2, r3
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	691a      	ldr	r2, [r3, #16]
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e60:	b2d2      	uxtb	r2, r2
 8002e62:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e68:	1c5a      	adds	r2, r3, #1
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e72:	3b01      	subs	r3, #1
 8002e74:	b29a      	uxth	r2, r3
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e7e:	b29b      	uxth	r3, r3
 8002e80:	3b01      	subs	r3, #1
 8002e82:	b29a      	uxth	r2, r3
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002e88:	e0b8      	b.n	8002ffc <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e8c:	9300      	str	r3, [sp, #0]
 8002e8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e90:	2200      	movs	r2, #0
 8002e92:	4966      	ldr	r1, [pc, #408]	; (800302c <HAL_I2C_Mem_Read+0x448>)
 8002e94:	68f8      	ldr	r0, [r7, #12]
 8002e96:	f000 fa49 	bl	800332c <I2C_WaitOnFlagUntilTimeout>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d001      	beq.n	8002ea4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e0bf      	b.n	8003024 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002eb2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	691a      	ldr	r2, [r3, #16]
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ebe:	b2d2      	uxtb	r2, r2
 8002ec0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec6:	1c5a      	adds	r2, r3, #1
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ed0:	3b01      	subs	r3, #1
 8002ed2:	b29a      	uxth	r2, r3
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002edc:	b29b      	uxth	r3, r3
 8002ede:	3b01      	subs	r3, #1
 8002ee0:	b29a      	uxth	r2, r3
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee8:	9300      	str	r3, [sp, #0]
 8002eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eec:	2200      	movs	r2, #0
 8002eee:	494f      	ldr	r1, [pc, #316]	; (800302c <HAL_I2C_Mem_Read+0x448>)
 8002ef0:	68f8      	ldr	r0, [r7, #12]
 8002ef2:	f000 fa1b 	bl	800332c <I2C_WaitOnFlagUntilTimeout>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d001      	beq.n	8002f00 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	e091      	b.n	8003024 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f0e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	691a      	ldr	r2, [r3, #16]
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f1a:	b2d2      	uxtb	r2, r2
 8002f1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f22:	1c5a      	adds	r2, r3, #1
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f2c:	3b01      	subs	r3, #1
 8002f2e:	b29a      	uxth	r2, r3
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f38:	b29b      	uxth	r3, r3
 8002f3a:	3b01      	subs	r3, #1
 8002f3c:	b29a      	uxth	r2, r3
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	691a      	ldr	r2, [r3, #16]
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4c:	b2d2      	uxtb	r2, r2
 8002f4e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f54:	1c5a      	adds	r2, r3, #1
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f5e:	3b01      	subs	r3, #1
 8002f60:	b29a      	uxth	r2, r3
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f6a:	b29b      	uxth	r3, r3
 8002f6c:	3b01      	subs	r3, #1
 8002f6e:	b29a      	uxth	r2, r3
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002f74:	e042      	b.n	8002ffc <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f78:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002f7a:	68f8      	ldr	r0, [r7, #12]
 8002f7c:	f000 fb2e 	bl	80035dc <I2C_WaitOnRXNEFlagUntilTimeout>
 8002f80:	4603      	mov	r3, r0
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d001      	beq.n	8002f8a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e04c      	b.n	8003024 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	691a      	ldr	r2, [r3, #16]
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f94:	b2d2      	uxtb	r2, r2
 8002f96:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9c:	1c5a      	adds	r2, r3, #1
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fa6:	3b01      	subs	r3, #1
 8002fa8:	b29a      	uxth	r2, r3
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fb2:	b29b      	uxth	r3, r3
 8002fb4:	3b01      	subs	r3, #1
 8002fb6:	b29a      	uxth	r2, r3
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	695b      	ldr	r3, [r3, #20]
 8002fc2:	f003 0304 	and.w	r3, r3, #4
 8002fc6:	2b04      	cmp	r3, #4
 8002fc8:	d118      	bne.n	8002ffc <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	691a      	ldr	r2, [r3, #16]
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd4:	b2d2      	uxtb	r2, r2
 8002fd6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fdc:	1c5a      	adds	r2, r3, #1
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fe6:	3b01      	subs	r3, #1
 8002fe8:	b29a      	uxth	r2, r3
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ff2:	b29b      	uxth	r3, r3
 8002ff4:	3b01      	subs	r3, #1
 8002ff6:	b29a      	uxth	r2, r3
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003000:	2b00      	cmp	r3, #0
 8003002:	f47f aec2 	bne.w	8002d8a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2220      	movs	r2, #32
 800300a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2200      	movs	r2, #0
 8003012:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2200      	movs	r2, #0
 800301a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800301e:	2300      	movs	r3, #0
 8003020:	e000      	b.n	8003024 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003022:	2302      	movs	r3, #2
  }
}
 8003024:	4618      	mov	r0, r3
 8003026:	3728      	adds	r7, #40	; 0x28
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}
 800302c:	00010004 	.word	0x00010004

08003030 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b088      	sub	sp, #32
 8003034:	af02      	add	r7, sp, #8
 8003036:	60f8      	str	r0, [r7, #12]
 8003038:	4608      	mov	r0, r1
 800303a:	4611      	mov	r1, r2
 800303c:	461a      	mov	r2, r3
 800303e:	4603      	mov	r3, r0
 8003040:	817b      	strh	r3, [r7, #10]
 8003042:	460b      	mov	r3, r1
 8003044:	813b      	strh	r3, [r7, #8]
 8003046:	4613      	mov	r3, r2
 8003048:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003058:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800305a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800305c:	9300      	str	r3, [sp, #0]
 800305e:	6a3b      	ldr	r3, [r7, #32]
 8003060:	2200      	movs	r2, #0
 8003062:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003066:	68f8      	ldr	r0, [r7, #12]
 8003068:	f000 f960 	bl	800332c <I2C_WaitOnFlagUntilTimeout>
 800306c:	4603      	mov	r3, r0
 800306e:	2b00      	cmp	r3, #0
 8003070:	d00d      	beq.n	800308e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800307c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003080:	d103      	bne.n	800308a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003088:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800308a:	2303      	movs	r3, #3
 800308c:	e05f      	b.n	800314e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800308e:	897b      	ldrh	r3, [r7, #10]
 8003090:	b2db      	uxtb	r3, r3
 8003092:	461a      	mov	r2, r3
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800309c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800309e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a0:	6a3a      	ldr	r2, [r7, #32]
 80030a2:	492d      	ldr	r1, [pc, #180]	; (8003158 <I2C_RequestMemoryWrite+0x128>)
 80030a4:	68f8      	ldr	r0, [r7, #12]
 80030a6:	f000 f998 	bl	80033da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80030aa:	4603      	mov	r3, r0
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d001      	beq.n	80030b4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	e04c      	b.n	800314e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030b4:	2300      	movs	r3, #0
 80030b6:	617b      	str	r3, [r7, #20]
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	695b      	ldr	r3, [r3, #20]
 80030be:	617b      	str	r3, [r7, #20]
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	699b      	ldr	r3, [r3, #24]
 80030c6:	617b      	str	r3, [r7, #20]
 80030c8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030cc:	6a39      	ldr	r1, [r7, #32]
 80030ce:	68f8      	ldr	r0, [r7, #12]
 80030d0:	f000 fa02 	bl	80034d8 <I2C_WaitOnTXEFlagUntilTimeout>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d00d      	beq.n	80030f6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030de:	2b04      	cmp	r3, #4
 80030e0:	d107      	bne.n	80030f2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030f0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	e02b      	b.n	800314e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80030f6:	88fb      	ldrh	r3, [r7, #6]
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	d105      	bne.n	8003108 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80030fc:	893b      	ldrh	r3, [r7, #8]
 80030fe:	b2da      	uxtb	r2, r3
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	611a      	str	r2, [r3, #16]
 8003106:	e021      	b.n	800314c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003108:	893b      	ldrh	r3, [r7, #8]
 800310a:	0a1b      	lsrs	r3, r3, #8
 800310c:	b29b      	uxth	r3, r3
 800310e:	b2da      	uxtb	r2, r3
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003116:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003118:	6a39      	ldr	r1, [r7, #32]
 800311a:	68f8      	ldr	r0, [r7, #12]
 800311c:	f000 f9dc 	bl	80034d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003120:	4603      	mov	r3, r0
 8003122:	2b00      	cmp	r3, #0
 8003124:	d00d      	beq.n	8003142 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312a:	2b04      	cmp	r3, #4
 800312c:	d107      	bne.n	800313e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800313c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e005      	b.n	800314e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003142:	893b      	ldrh	r3, [r7, #8]
 8003144:	b2da      	uxtb	r2, r3
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800314c:	2300      	movs	r3, #0
}
 800314e:	4618      	mov	r0, r3
 8003150:	3718      	adds	r7, #24
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}
 8003156:	bf00      	nop
 8003158:	00010002 	.word	0x00010002

0800315c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b088      	sub	sp, #32
 8003160:	af02      	add	r7, sp, #8
 8003162:	60f8      	str	r0, [r7, #12]
 8003164:	4608      	mov	r0, r1
 8003166:	4611      	mov	r1, r2
 8003168:	461a      	mov	r2, r3
 800316a:	4603      	mov	r3, r0
 800316c:	817b      	strh	r3, [r7, #10]
 800316e:	460b      	mov	r3, r1
 8003170:	813b      	strh	r3, [r7, #8]
 8003172:	4613      	mov	r3, r2
 8003174:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003184:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003194:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003198:	9300      	str	r3, [sp, #0]
 800319a:	6a3b      	ldr	r3, [r7, #32]
 800319c:	2200      	movs	r2, #0
 800319e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80031a2:	68f8      	ldr	r0, [r7, #12]
 80031a4:	f000 f8c2 	bl	800332c <I2C_WaitOnFlagUntilTimeout>
 80031a8:	4603      	mov	r3, r0
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d00d      	beq.n	80031ca <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031bc:	d103      	bne.n	80031c6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031c4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80031c6:	2303      	movs	r3, #3
 80031c8:	e0aa      	b.n	8003320 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80031ca:	897b      	ldrh	r3, [r7, #10]
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	461a      	mov	r2, r3
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80031d8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80031da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031dc:	6a3a      	ldr	r2, [r7, #32]
 80031de:	4952      	ldr	r1, [pc, #328]	; (8003328 <I2C_RequestMemoryRead+0x1cc>)
 80031e0:	68f8      	ldr	r0, [r7, #12]
 80031e2:	f000 f8fa 	bl	80033da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80031e6:	4603      	mov	r3, r0
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d001      	beq.n	80031f0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	e097      	b.n	8003320 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031f0:	2300      	movs	r3, #0
 80031f2:	617b      	str	r3, [r7, #20]
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	695b      	ldr	r3, [r3, #20]
 80031fa:	617b      	str	r3, [r7, #20]
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	699b      	ldr	r3, [r3, #24]
 8003202:	617b      	str	r3, [r7, #20]
 8003204:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003206:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003208:	6a39      	ldr	r1, [r7, #32]
 800320a:	68f8      	ldr	r0, [r7, #12]
 800320c:	f000 f964 	bl	80034d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003210:	4603      	mov	r3, r0
 8003212:	2b00      	cmp	r3, #0
 8003214:	d00d      	beq.n	8003232 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321a:	2b04      	cmp	r3, #4
 800321c:	d107      	bne.n	800322e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800322c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800322e:	2301      	movs	r3, #1
 8003230:	e076      	b.n	8003320 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003232:	88fb      	ldrh	r3, [r7, #6]
 8003234:	2b01      	cmp	r3, #1
 8003236:	d105      	bne.n	8003244 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003238:	893b      	ldrh	r3, [r7, #8]
 800323a:	b2da      	uxtb	r2, r3
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	611a      	str	r2, [r3, #16]
 8003242:	e021      	b.n	8003288 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003244:	893b      	ldrh	r3, [r7, #8]
 8003246:	0a1b      	lsrs	r3, r3, #8
 8003248:	b29b      	uxth	r3, r3
 800324a:	b2da      	uxtb	r2, r3
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003252:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003254:	6a39      	ldr	r1, [r7, #32]
 8003256:	68f8      	ldr	r0, [r7, #12]
 8003258:	f000 f93e 	bl	80034d8 <I2C_WaitOnTXEFlagUntilTimeout>
 800325c:	4603      	mov	r3, r0
 800325e:	2b00      	cmp	r3, #0
 8003260:	d00d      	beq.n	800327e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003266:	2b04      	cmp	r3, #4
 8003268:	d107      	bne.n	800327a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003278:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e050      	b.n	8003320 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800327e:	893b      	ldrh	r3, [r7, #8]
 8003280:	b2da      	uxtb	r2, r3
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003288:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800328a:	6a39      	ldr	r1, [r7, #32]
 800328c:	68f8      	ldr	r0, [r7, #12]
 800328e:	f000 f923 	bl	80034d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003292:	4603      	mov	r3, r0
 8003294:	2b00      	cmp	r3, #0
 8003296:	d00d      	beq.n	80032b4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329c:	2b04      	cmp	r3, #4
 800329e:	d107      	bne.n	80032b0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032ae:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	e035      	b.n	8003320 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032c2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80032c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c6:	9300      	str	r3, [sp, #0]
 80032c8:	6a3b      	ldr	r3, [r7, #32]
 80032ca:	2200      	movs	r2, #0
 80032cc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80032d0:	68f8      	ldr	r0, [r7, #12]
 80032d2:	f000 f82b 	bl	800332c <I2C_WaitOnFlagUntilTimeout>
 80032d6:	4603      	mov	r3, r0
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d00d      	beq.n	80032f8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032ea:	d103      	bne.n	80032f4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032f2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80032f4:	2303      	movs	r3, #3
 80032f6:	e013      	b.n	8003320 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80032f8:	897b      	ldrh	r3, [r7, #10]
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	f043 0301 	orr.w	r3, r3, #1
 8003300:	b2da      	uxtb	r2, r3
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800330a:	6a3a      	ldr	r2, [r7, #32]
 800330c:	4906      	ldr	r1, [pc, #24]	; (8003328 <I2C_RequestMemoryRead+0x1cc>)
 800330e:	68f8      	ldr	r0, [r7, #12]
 8003310:	f000 f863 	bl	80033da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003314:	4603      	mov	r3, r0
 8003316:	2b00      	cmp	r3, #0
 8003318:	d001      	beq.n	800331e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e000      	b.n	8003320 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800331e:	2300      	movs	r3, #0
}
 8003320:	4618      	mov	r0, r3
 8003322:	3718      	adds	r7, #24
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}
 8003328:	00010002 	.word	0x00010002

0800332c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b084      	sub	sp, #16
 8003330:	af00      	add	r7, sp, #0
 8003332:	60f8      	str	r0, [r7, #12]
 8003334:	60b9      	str	r1, [r7, #8]
 8003336:	603b      	str	r3, [r7, #0]
 8003338:	4613      	mov	r3, r2
 800333a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800333c:	e025      	b.n	800338a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003344:	d021      	beq.n	800338a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003346:	f7fe fccd 	bl	8001ce4 <HAL_GetTick>
 800334a:	4602      	mov	r2, r0
 800334c:	69bb      	ldr	r3, [r7, #24]
 800334e:	1ad3      	subs	r3, r2, r3
 8003350:	683a      	ldr	r2, [r7, #0]
 8003352:	429a      	cmp	r2, r3
 8003354:	d302      	bcc.n	800335c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d116      	bne.n	800338a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	2200      	movs	r2, #0
 8003360:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2220      	movs	r2, #32
 8003366:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2200      	movs	r2, #0
 800336e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003376:	f043 0220 	orr.w	r2, r3, #32
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2200      	movs	r2, #0
 8003382:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	e023      	b.n	80033d2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	0c1b      	lsrs	r3, r3, #16
 800338e:	b2db      	uxtb	r3, r3
 8003390:	2b01      	cmp	r3, #1
 8003392:	d10d      	bne.n	80033b0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	695b      	ldr	r3, [r3, #20]
 800339a:	43da      	mvns	r2, r3
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	4013      	ands	r3, r2
 80033a0:	b29b      	uxth	r3, r3
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	bf0c      	ite	eq
 80033a6:	2301      	moveq	r3, #1
 80033a8:	2300      	movne	r3, #0
 80033aa:	b2db      	uxtb	r3, r3
 80033ac:	461a      	mov	r2, r3
 80033ae:	e00c      	b.n	80033ca <I2C_WaitOnFlagUntilTimeout+0x9e>
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	699b      	ldr	r3, [r3, #24]
 80033b6:	43da      	mvns	r2, r3
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	4013      	ands	r3, r2
 80033bc:	b29b      	uxth	r3, r3
 80033be:	2b00      	cmp	r3, #0
 80033c0:	bf0c      	ite	eq
 80033c2:	2301      	moveq	r3, #1
 80033c4:	2300      	movne	r3, #0
 80033c6:	b2db      	uxtb	r3, r3
 80033c8:	461a      	mov	r2, r3
 80033ca:	79fb      	ldrb	r3, [r7, #7]
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d0b6      	beq.n	800333e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80033d0:	2300      	movs	r3, #0
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3710      	adds	r7, #16
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}

080033da <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80033da:	b580      	push	{r7, lr}
 80033dc:	b084      	sub	sp, #16
 80033de:	af00      	add	r7, sp, #0
 80033e0:	60f8      	str	r0, [r7, #12]
 80033e2:	60b9      	str	r1, [r7, #8]
 80033e4:	607a      	str	r2, [r7, #4]
 80033e6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80033e8:	e051      	b.n	800348e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	695b      	ldr	r3, [r3, #20]
 80033f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033f8:	d123      	bne.n	8003442 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003408:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003412:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2200      	movs	r2, #0
 8003418:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2220      	movs	r2, #32
 800341e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2200      	movs	r2, #0
 8003426:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342e:	f043 0204 	orr.w	r2, r3, #4
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2200      	movs	r2, #0
 800343a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e046      	b.n	80034d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003448:	d021      	beq.n	800348e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800344a:	f7fe fc4b 	bl	8001ce4 <HAL_GetTick>
 800344e:	4602      	mov	r2, r0
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	1ad3      	subs	r3, r2, r3
 8003454:	687a      	ldr	r2, [r7, #4]
 8003456:	429a      	cmp	r2, r3
 8003458:	d302      	bcc.n	8003460 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d116      	bne.n	800348e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2200      	movs	r2, #0
 8003464:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2220      	movs	r2, #32
 800346a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2200      	movs	r2, #0
 8003472:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347a:	f043 0220 	orr.w	r2, r3, #32
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2200      	movs	r2, #0
 8003486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e020      	b.n	80034d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	0c1b      	lsrs	r3, r3, #16
 8003492:	b2db      	uxtb	r3, r3
 8003494:	2b01      	cmp	r3, #1
 8003496:	d10c      	bne.n	80034b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	695b      	ldr	r3, [r3, #20]
 800349e:	43da      	mvns	r2, r3
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	4013      	ands	r3, r2
 80034a4:	b29b      	uxth	r3, r3
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	bf14      	ite	ne
 80034aa:	2301      	movne	r3, #1
 80034ac:	2300      	moveq	r3, #0
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	e00b      	b.n	80034ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	699b      	ldr	r3, [r3, #24]
 80034b8:	43da      	mvns	r2, r3
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	4013      	ands	r3, r2
 80034be:	b29b      	uxth	r3, r3
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	bf14      	ite	ne
 80034c4:	2301      	movne	r3, #1
 80034c6:	2300      	moveq	r3, #0
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d18d      	bne.n	80033ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80034ce:	2300      	movs	r3, #0
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	3710      	adds	r7, #16
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}

080034d8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b084      	sub	sp, #16
 80034dc:	af00      	add	r7, sp, #0
 80034de:	60f8      	str	r0, [r7, #12]
 80034e0:	60b9      	str	r1, [r7, #8]
 80034e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80034e4:	e02d      	b.n	8003542 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80034e6:	68f8      	ldr	r0, [r7, #12]
 80034e8:	f000 f8ce 	bl	8003688 <I2C_IsAcknowledgeFailed>
 80034ec:	4603      	mov	r3, r0
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d001      	beq.n	80034f6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e02d      	b.n	8003552 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034fc:	d021      	beq.n	8003542 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034fe:	f7fe fbf1 	bl	8001ce4 <HAL_GetTick>
 8003502:	4602      	mov	r2, r0
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	1ad3      	subs	r3, r2, r3
 8003508:	68ba      	ldr	r2, [r7, #8]
 800350a:	429a      	cmp	r2, r3
 800350c:	d302      	bcc.n	8003514 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d116      	bne.n	8003542 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2200      	movs	r2, #0
 8003518:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2220      	movs	r2, #32
 800351e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2200      	movs	r2, #0
 8003526:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800352e:	f043 0220 	orr.w	r2, r3, #32
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2200      	movs	r2, #0
 800353a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e007      	b.n	8003552 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	695b      	ldr	r3, [r3, #20]
 8003548:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800354c:	2b80      	cmp	r3, #128	; 0x80
 800354e:	d1ca      	bne.n	80034e6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003550:	2300      	movs	r3, #0
}
 8003552:	4618      	mov	r0, r3
 8003554:	3710      	adds	r7, #16
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}

0800355a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800355a:	b580      	push	{r7, lr}
 800355c:	b084      	sub	sp, #16
 800355e:	af00      	add	r7, sp, #0
 8003560:	60f8      	str	r0, [r7, #12]
 8003562:	60b9      	str	r1, [r7, #8]
 8003564:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003566:	e02d      	b.n	80035c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003568:	68f8      	ldr	r0, [r7, #12]
 800356a:	f000 f88d 	bl	8003688 <I2C_IsAcknowledgeFailed>
 800356e:	4603      	mov	r3, r0
 8003570:	2b00      	cmp	r3, #0
 8003572:	d001      	beq.n	8003578 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	e02d      	b.n	80035d4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800357e:	d021      	beq.n	80035c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003580:	f7fe fbb0 	bl	8001ce4 <HAL_GetTick>
 8003584:	4602      	mov	r2, r0
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	68ba      	ldr	r2, [r7, #8]
 800358c:	429a      	cmp	r2, r3
 800358e:	d302      	bcc.n	8003596 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d116      	bne.n	80035c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2200      	movs	r2, #0
 800359a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2220      	movs	r2, #32
 80035a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2200      	movs	r2, #0
 80035a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b0:	f043 0220 	orr.w	r2, r3, #32
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2200      	movs	r2, #0
 80035bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	e007      	b.n	80035d4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	695b      	ldr	r3, [r3, #20]
 80035ca:	f003 0304 	and.w	r3, r3, #4
 80035ce:	2b04      	cmp	r3, #4
 80035d0:	d1ca      	bne.n	8003568 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80035d2:	2300      	movs	r3, #0
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	3710      	adds	r7, #16
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}

080035dc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b084      	sub	sp, #16
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	60f8      	str	r0, [r7, #12]
 80035e4:	60b9      	str	r1, [r7, #8]
 80035e6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80035e8:	e042      	b.n	8003670 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	695b      	ldr	r3, [r3, #20]
 80035f0:	f003 0310 	and.w	r3, r3, #16
 80035f4:	2b10      	cmp	r3, #16
 80035f6:	d119      	bne.n	800362c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f06f 0210 	mvn.w	r2, #16
 8003600:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2200      	movs	r2, #0
 8003606:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2220      	movs	r2, #32
 800360c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2200      	movs	r2, #0
 8003614:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2200      	movs	r2, #0
 8003624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	e029      	b.n	8003680 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800362c:	f7fe fb5a 	bl	8001ce4 <HAL_GetTick>
 8003630:	4602      	mov	r2, r0
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	1ad3      	subs	r3, r2, r3
 8003636:	68ba      	ldr	r2, [r7, #8]
 8003638:	429a      	cmp	r2, r3
 800363a:	d302      	bcc.n	8003642 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d116      	bne.n	8003670 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2200      	movs	r2, #0
 8003646:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2220      	movs	r2, #32
 800364c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2200      	movs	r2, #0
 8003654:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800365c:	f043 0220 	orr.w	r2, r3, #32
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2200      	movs	r2, #0
 8003668:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	e007      	b.n	8003680 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	695b      	ldr	r3, [r3, #20]
 8003676:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800367a:	2b40      	cmp	r3, #64	; 0x40
 800367c:	d1b5      	bne.n	80035ea <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800367e:	2300      	movs	r3, #0
}
 8003680:	4618      	mov	r0, r3
 8003682:	3710      	adds	r7, #16
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}

08003688 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003688:	b480      	push	{r7}
 800368a:	b083      	sub	sp, #12
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	695b      	ldr	r3, [r3, #20]
 8003696:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800369a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800369e:	d11b      	bne.n	80036d8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80036a8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2200      	movs	r2, #0
 80036ae:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2220      	movs	r2, #32
 80036b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2200      	movs	r2, #0
 80036bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c4:	f043 0204 	orr.w	r2, r3, #4
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2200      	movs	r2, #0
 80036d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	e000      	b.n	80036da <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80036d8:	2300      	movs	r3, #0
}
 80036da:	4618      	mov	r0, r3
 80036dc:	370c      	adds	r7, #12
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr
	...

080036e8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b086      	sub	sp, #24
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d101      	bne.n	80036fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e267      	b.n	8003bca <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 0301 	and.w	r3, r3, #1
 8003702:	2b00      	cmp	r3, #0
 8003704:	d075      	beq.n	80037f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003706:	4b88      	ldr	r3, [pc, #544]	; (8003928 <HAL_RCC_OscConfig+0x240>)
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	f003 030c 	and.w	r3, r3, #12
 800370e:	2b04      	cmp	r3, #4
 8003710:	d00c      	beq.n	800372c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003712:	4b85      	ldr	r3, [pc, #532]	; (8003928 <HAL_RCC_OscConfig+0x240>)
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800371a:	2b08      	cmp	r3, #8
 800371c:	d112      	bne.n	8003744 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800371e:	4b82      	ldr	r3, [pc, #520]	; (8003928 <HAL_RCC_OscConfig+0x240>)
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003726:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800372a:	d10b      	bne.n	8003744 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800372c:	4b7e      	ldr	r3, [pc, #504]	; (8003928 <HAL_RCC_OscConfig+0x240>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003734:	2b00      	cmp	r3, #0
 8003736:	d05b      	beq.n	80037f0 <HAL_RCC_OscConfig+0x108>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d157      	bne.n	80037f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	e242      	b.n	8003bca <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800374c:	d106      	bne.n	800375c <HAL_RCC_OscConfig+0x74>
 800374e:	4b76      	ldr	r3, [pc, #472]	; (8003928 <HAL_RCC_OscConfig+0x240>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a75      	ldr	r2, [pc, #468]	; (8003928 <HAL_RCC_OscConfig+0x240>)
 8003754:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003758:	6013      	str	r3, [r2, #0]
 800375a:	e01d      	b.n	8003798 <HAL_RCC_OscConfig+0xb0>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003764:	d10c      	bne.n	8003780 <HAL_RCC_OscConfig+0x98>
 8003766:	4b70      	ldr	r3, [pc, #448]	; (8003928 <HAL_RCC_OscConfig+0x240>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a6f      	ldr	r2, [pc, #444]	; (8003928 <HAL_RCC_OscConfig+0x240>)
 800376c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003770:	6013      	str	r3, [r2, #0]
 8003772:	4b6d      	ldr	r3, [pc, #436]	; (8003928 <HAL_RCC_OscConfig+0x240>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a6c      	ldr	r2, [pc, #432]	; (8003928 <HAL_RCC_OscConfig+0x240>)
 8003778:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800377c:	6013      	str	r3, [r2, #0]
 800377e:	e00b      	b.n	8003798 <HAL_RCC_OscConfig+0xb0>
 8003780:	4b69      	ldr	r3, [pc, #420]	; (8003928 <HAL_RCC_OscConfig+0x240>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a68      	ldr	r2, [pc, #416]	; (8003928 <HAL_RCC_OscConfig+0x240>)
 8003786:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800378a:	6013      	str	r3, [r2, #0]
 800378c:	4b66      	ldr	r3, [pc, #408]	; (8003928 <HAL_RCC_OscConfig+0x240>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a65      	ldr	r2, [pc, #404]	; (8003928 <HAL_RCC_OscConfig+0x240>)
 8003792:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003796:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d013      	beq.n	80037c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037a0:	f7fe faa0 	bl	8001ce4 <HAL_GetTick>
 80037a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037a6:	e008      	b.n	80037ba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037a8:	f7fe fa9c 	bl	8001ce4 <HAL_GetTick>
 80037ac:	4602      	mov	r2, r0
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	1ad3      	subs	r3, r2, r3
 80037b2:	2b64      	cmp	r3, #100	; 0x64
 80037b4:	d901      	bls.n	80037ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80037b6:	2303      	movs	r3, #3
 80037b8:	e207      	b.n	8003bca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037ba:	4b5b      	ldr	r3, [pc, #364]	; (8003928 <HAL_RCC_OscConfig+0x240>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d0f0      	beq.n	80037a8 <HAL_RCC_OscConfig+0xc0>
 80037c6:	e014      	b.n	80037f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037c8:	f7fe fa8c 	bl	8001ce4 <HAL_GetTick>
 80037cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037ce:	e008      	b.n	80037e2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037d0:	f7fe fa88 	bl	8001ce4 <HAL_GetTick>
 80037d4:	4602      	mov	r2, r0
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	1ad3      	subs	r3, r2, r3
 80037da:	2b64      	cmp	r3, #100	; 0x64
 80037dc:	d901      	bls.n	80037e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80037de:	2303      	movs	r3, #3
 80037e0:	e1f3      	b.n	8003bca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037e2:	4b51      	ldr	r3, [pc, #324]	; (8003928 <HAL_RCC_OscConfig+0x240>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d1f0      	bne.n	80037d0 <HAL_RCC_OscConfig+0xe8>
 80037ee:	e000      	b.n	80037f2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 0302 	and.w	r3, r3, #2
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d063      	beq.n	80038c6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80037fe:	4b4a      	ldr	r3, [pc, #296]	; (8003928 <HAL_RCC_OscConfig+0x240>)
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	f003 030c 	and.w	r3, r3, #12
 8003806:	2b00      	cmp	r3, #0
 8003808:	d00b      	beq.n	8003822 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800380a:	4b47      	ldr	r3, [pc, #284]	; (8003928 <HAL_RCC_OscConfig+0x240>)
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003812:	2b08      	cmp	r3, #8
 8003814:	d11c      	bne.n	8003850 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003816:	4b44      	ldr	r3, [pc, #272]	; (8003928 <HAL_RCC_OscConfig+0x240>)
 8003818:	685b      	ldr	r3, [r3, #4]
 800381a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800381e:	2b00      	cmp	r3, #0
 8003820:	d116      	bne.n	8003850 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003822:	4b41      	ldr	r3, [pc, #260]	; (8003928 <HAL_RCC_OscConfig+0x240>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 0302 	and.w	r3, r3, #2
 800382a:	2b00      	cmp	r3, #0
 800382c:	d005      	beq.n	800383a <HAL_RCC_OscConfig+0x152>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	68db      	ldr	r3, [r3, #12]
 8003832:	2b01      	cmp	r3, #1
 8003834:	d001      	beq.n	800383a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	e1c7      	b.n	8003bca <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800383a:	4b3b      	ldr	r3, [pc, #236]	; (8003928 <HAL_RCC_OscConfig+0x240>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	691b      	ldr	r3, [r3, #16]
 8003846:	00db      	lsls	r3, r3, #3
 8003848:	4937      	ldr	r1, [pc, #220]	; (8003928 <HAL_RCC_OscConfig+0x240>)
 800384a:	4313      	orrs	r3, r2
 800384c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800384e:	e03a      	b.n	80038c6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	68db      	ldr	r3, [r3, #12]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d020      	beq.n	800389a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003858:	4b34      	ldr	r3, [pc, #208]	; (800392c <HAL_RCC_OscConfig+0x244>)
 800385a:	2201      	movs	r2, #1
 800385c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800385e:	f7fe fa41 	bl	8001ce4 <HAL_GetTick>
 8003862:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003864:	e008      	b.n	8003878 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003866:	f7fe fa3d 	bl	8001ce4 <HAL_GetTick>
 800386a:	4602      	mov	r2, r0
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	1ad3      	subs	r3, r2, r3
 8003870:	2b02      	cmp	r3, #2
 8003872:	d901      	bls.n	8003878 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003874:	2303      	movs	r3, #3
 8003876:	e1a8      	b.n	8003bca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003878:	4b2b      	ldr	r3, [pc, #172]	; (8003928 <HAL_RCC_OscConfig+0x240>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 0302 	and.w	r3, r3, #2
 8003880:	2b00      	cmp	r3, #0
 8003882:	d0f0      	beq.n	8003866 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003884:	4b28      	ldr	r3, [pc, #160]	; (8003928 <HAL_RCC_OscConfig+0x240>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	691b      	ldr	r3, [r3, #16]
 8003890:	00db      	lsls	r3, r3, #3
 8003892:	4925      	ldr	r1, [pc, #148]	; (8003928 <HAL_RCC_OscConfig+0x240>)
 8003894:	4313      	orrs	r3, r2
 8003896:	600b      	str	r3, [r1, #0]
 8003898:	e015      	b.n	80038c6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800389a:	4b24      	ldr	r3, [pc, #144]	; (800392c <HAL_RCC_OscConfig+0x244>)
 800389c:	2200      	movs	r2, #0
 800389e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038a0:	f7fe fa20 	bl	8001ce4 <HAL_GetTick>
 80038a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038a6:	e008      	b.n	80038ba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038a8:	f7fe fa1c 	bl	8001ce4 <HAL_GetTick>
 80038ac:	4602      	mov	r2, r0
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	1ad3      	subs	r3, r2, r3
 80038b2:	2b02      	cmp	r3, #2
 80038b4:	d901      	bls.n	80038ba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80038b6:	2303      	movs	r3, #3
 80038b8:	e187      	b.n	8003bca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038ba:	4b1b      	ldr	r3, [pc, #108]	; (8003928 <HAL_RCC_OscConfig+0x240>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 0302 	and.w	r3, r3, #2
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d1f0      	bne.n	80038a8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 0308 	and.w	r3, r3, #8
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d036      	beq.n	8003940 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	695b      	ldr	r3, [r3, #20]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d016      	beq.n	8003908 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038da:	4b15      	ldr	r3, [pc, #84]	; (8003930 <HAL_RCC_OscConfig+0x248>)
 80038dc:	2201      	movs	r2, #1
 80038de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038e0:	f7fe fa00 	bl	8001ce4 <HAL_GetTick>
 80038e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038e6:	e008      	b.n	80038fa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038e8:	f7fe f9fc 	bl	8001ce4 <HAL_GetTick>
 80038ec:	4602      	mov	r2, r0
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	1ad3      	subs	r3, r2, r3
 80038f2:	2b02      	cmp	r3, #2
 80038f4:	d901      	bls.n	80038fa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80038f6:	2303      	movs	r3, #3
 80038f8:	e167      	b.n	8003bca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038fa:	4b0b      	ldr	r3, [pc, #44]	; (8003928 <HAL_RCC_OscConfig+0x240>)
 80038fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038fe:	f003 0302 	and.w	r3, r3, #2
 8003902:	2b00      	cmp	r3, #0
 8003904:	d0f0      	beq.n	80038e8 <HAL_RCC_OscConfig+0x200>
 8003906:	e01b      	b.n	8003940 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003908:	4b09      	ldr	r3, [pc, #36]	; (8003930 <HAL_RCC_OscConfig+0x248>)
 800390a:	2200      	movs	r2, #0
 800390c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800390e:	f7fe f9e9 	bl	8001ce4 <HAL_GetTick>
 8003912:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003914:	e00e      	b.n	8003934 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003916:	f7fe f9e5 	bl	8001ce4 <HAL_GetTick>
 800391a:	4602      	mov	r2, r0
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	1ad3      	subs	r3, r2, r3
 8003920:	2b02      	cmp	r3, #2
 8003922:	d907      	bls.n	8003934 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003924:	2303      	movs	r3, #3
 8003926:	e150      	b.n	8003bca <HAL_RCC_OscConfig+0x4e2>
 8003928:	40023800 	.word	0x40023800
 800392c:	42470000 	.word	0x42470000
 8003930:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003934:	4b88      	ldr	r3, [pc, #544]	; (8003b58 <HAL_RCC_OscConfig+0x470>)
 8003936:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003938:	f003 0302 	and.w	r3, r3, #2
 800393c:	2b00      	cmp	r3, #0
 800393e:	d1ea      	bne.n	8003916 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 0304 	and.w	r3, r3, #4
 8003948:	2b00      	cmp	r3, #0
 800394a:	f000 8097 	beq.w	8003a7c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800394e:	2300      	movs	r3, #0
 8003950:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003952:	4b81      	ldr	r3, [pc, #516]	; (8003b58 <HAL_RCC_OscConfig+0x470>)
 8003954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003956:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800395a:	2b00      	cmp	r3, #0
 800395c:	d10f      	bne.n	800397e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800395e:	2300      	movs	r3, #0
 8003960:	60bb      	str	r3, [r7, #8]
 8003962:	4b7d      	ldr	r3, [pc, #500]	; (8003b58 <HAL_RCC_OscConfig+0x470>)
 8003964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003966:	4a7c      	ldr	r2, [pc, #496]	; (8003b58 <HAL_RCC_OscConfig+0x470>)
 8003968:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800396c:	6413      	str	r3, [r2, #64]	; 0x40
 800396e:	4b7a      	ldr	r3, [pc, #488]	; (8003b58 <HAL_RCC_OscConfig+0x470>)
 8003970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003972:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003976:	60bb      	str	r3, [r7, #8]
 8003978:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800397a:	2301      	movs	r3, #1
 800397c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800397e:	4b77      	ldr	r3, [pc, #476]	; (8003b5c <HAL_RCC_OscConfig+0x474>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003986:	2b00      	cmp	r3, #0
 8003988:	d118      	bne.n	80039bc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800398a:	4b74      	ldr	r3, [pc, #464]	; (8003b5c <HAL_RCC_OscConfig+0x474>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a73      	ldr	r2, [pc, #460]	; (8003b5c <HAL_RCC_OscConfig+0x474>)
 8003990:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003994:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003996:	f7fe f9a5 	bl	8001ce4 <HAL_GetTick>
 800399a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800399c:	e008      	b.n	80039b0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800399e:	f7fe f9a1 	bl	8001ce4 <HAL_GetTick>
 80039a2:	4602      	mov	r2, r0
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	1ad3      	subs	r3, r2, r3
 80039a8:	2b02      	cmp	r3, #2
 80039aa:	d901      	bls.n	80039b0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80039ac:	2303      	movs	r3, #3
 80039ae:	e10c      	b.n	8003bca <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039b0:	4b6a      	ldr	r3, [pc, #424]	; (8003b5c <HAL_RCC_OscConfig+0x474>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d0f0      	beq.n	800399e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d106      	bne.n	80039d2 <HAL_RCC_OscConfig+0x2ea>
 80039c4:	4b64      	ldr	r3, [pc, #400]	; (8003b58 <HAL_RCC_OscConfig+0x470>)
 80039c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039c8:	4a63      	ldr	r2, [pc, #396]	; (8003b58 <HAL_RCC_OscConfig+0x470>)
 80039ca:	f043 0301 	orr.w	r3, r3, #1
 80039ce:	6713      	str	r3, [r2, #112]	; 0x70
 80039d0:	e01c      	b.n	8003a0c <HAL_RCC_OscConfig+0x324>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	2b05      	cmp	r3, #5
 80039d8:	d10c      	bne.n	80039f4 <HAL_RCC_OscConfig+0x30c>
 80039da:	4b5f      	ldr	r3, [pc, #380]	; (8003b58 <HAL_RCC_OscConfig+0x470>)
 80039dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039de:	4a5e      	ldr	r2, [pc, #376]	; (8003b58 <HAL_RCC_OscConfig+0x470>)
 80039e0:	f043 0304 	orr.w	r3, r3, #4
 80039e4:	6713      	str	r3, [r2, #112]	; 0x70
 80039e6:	4b5c      	ldr	r3, [pc, #368]	; (8003b58 <HAL_RCC_OscConfig+0x470>)
 80039e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ea:	4a5b      	ldr	r2, [pc, #364]	; (8003b58 <HAL_RCC_OscConfig+0x470>)
 80039ec:	f043 0301 	orr.w	r3, r3, #1
 80039f0:	6713      	str	r3, [r2, #112]	; 0x70
 80039f2:	e00b      	b.n	8003a0c <HAL_RCC_OscConfig+0x324>
 80039f4:	4b58      	ldr	r3, [pc, #352]	; (8003b58 <HAL_RCC_OscConfig+0x470>)
 80039f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039f8:	4a57      	ldr	r2, [pc, #348]	; (8003b58 <HAL_RCC_OscConfig+0x470>)
 80039fa:	f023 0301 	bic.w	r3, r3, #1
 80039fe:	6713      	str	r3, [r2, #112]	; 0x70
 8003a00:	4b55      	ldr	r3, [pc, #340]	; (8003b58 <HAL_RCC_OscConfig+0x470>)
 8003a02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a04:	4a54      	ldr	r2, [pc, #336]	; (8003b58 <HAL_RCC_OscConfig+0x470>)
 8003a06:	f023 0304 	bic.w	r3, r3, #4
 8003a0a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d015      	beq.n	8003a40 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a14:	f7fe f966 	bl	8001ce4 <HAL_GetTick>
 8003a18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a1a:	e00a      	b.n	8003a32 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a1c:	f7fe f962 	bl	8001ce4 <HAL_GetTick>
 8003a20:	4602      	mov	r2, r0
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	1ad3      	subs	r3, r2, r3
 8003a26:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d901      	bls.n	8003a32 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003a2e:	2303      	movs	r3, #3
 8003a30:	e0cb      	b.n	8003bca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a32:	4b49      	ldr	r3, [pc, #292]	; (8003b58 <HAL_RCC_OscConfig+0x470>)
 8003a34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a36:	f003 0302 	and.w	r3, r3, #2
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d0ee      	beq.n	8003a1c <HAL_RCC_OscConfig+0x334>
 8003a3e:	e014      	b.n	8003a6a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a40:	f7fe f950 	bl	8001ce4 <HAL_GetTick>
 8003a44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a46:	e00a      	b.n	8003a5e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a48:	f7fe f94c 	bl	8001ce4 <HAL_GetTick>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	1ad3      	subs	r3, r2, r3
 8003a52:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d901      	bls.n	8003a5e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003a5a:	2303      	movs	r3, #3
 8003a5c:	e0b5      	b.n	8003bca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a5e:	4b3e      	ldr	r3, [pc, #248]	; (8003b58 <HAL_RCC_OscConfig+0x470>)
 8003a60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a62:	f003 0302 	and.w	r3, r3, #2
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d1ee      	bne.n	8003a48 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a6a:	7dfb      	ldrb	r3, [r7, #23]
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d105      	bne.n	8003a7c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a70:	4b39      	ldr	r3, [pc, #228]	; (8003b58 <HAL_RCC_OscConfig+0x470>)
 8003a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a74:	4a38      	ldr	r2, [pc, #224]	; (8003b58 <HAL_RCC_OscConfig+0x470>)
 8003a76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a7a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	699b      	ldr	r3, [r3, #24]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	f000 80a1 	beq.w	8003bc8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a86:	4b34      	ldr	r3, [pc, #208]	; (8003b58 <HAL_RCC_OscConfig+0x470>)
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	f003 030c 	and.w	r3, r3, #12
 8003a8e:	2b08      	cmp	r3, #8
 8003a90:	d05c      	beq.n	8003b4c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	699b      	ldr	r3, [r3, #24]
 8003a96:	2b02      	cmp	r3, #2
 8003a98:	d141      	bne.n	8003b1e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a9a:	4b31      	ldr	r3, [pc, #196]	; (8003b60 <HAL_RCC_OscConfig+0x478>)
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aa0:	f7fe f920 	bl	8001ce4 <HAL_GetTick>
 8003aa4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003aa6:	e008      	b.n	8003aba <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003aa8:	f7fe f91c 	bl	8001ce4 <HAL_GetTick>
 8003aac:	4602      	mov	r2, r0
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	1ad3      	subs	r3, r2, r3
 8003ab2:	2b02      	cmp	r3, #2
 8003ab4:	d901      	bls.n	8003aba <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003ab6:	2303      	movs	r3, #3
 8003ab8:	e087      	b.n	8003bca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003aba:	4b27      	ldr	r3, [pc, #156]	; (8003b58 <HAL_RCC_OscConfig+0x470>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d1f0      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	69da      	ldr	r2, [r3, #28]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6a1b      	ldr	r3, [r3, #32]
 8003ace:	431a      	orrs	r2, r3
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad4:	019b      	lsls	r3, r3, #6
 8003ad6:	431a      	orrs	r2, r3
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003adc:	085b      	lsrs	r3, r3, #1
 8003ade:	3b01      	subs	r3, #1
 8003ae0:	041b      	lsls	r3, r3, #16
 8003ae2:	431a      	orrs	r2, r3
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ae8:	061b      	lsls	r3, r3, #24
 8003aea:	491b      	ldr	r1, [pc, #108]	; (8003b58 <HAL_RCC_OscConfig+0x470>)
 8003aec:	4313      	orrs	r3, r2
 8003aee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003af0:	4b1b      	ldr	r3, [pc, #108]	; (8003b60 <HAL_RCC_OscConfig+0x478>)
 8003af2:	2201      	movs	r2, #1
 8003af4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003af6:	f7fe f8f5 	bl	8001ce4 <HAL_GetTick>
 8003afa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003afc:	e008      	b.n	8003b10 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003afe:	f7fe f8f1 	bl	8001ce4 <HAL_GetTick>
 8003b02:	4602      	mov	r2, r0
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	1ad3      	subs	r3, r2, r3
 8003b08:	2b02      	cmp	r3, #2
 8003b0a:	d901      	bls.n	8003b10 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003b0c:	2303      	movs	r3, #3
 8003b0e:	e05c      	b.n	8003bca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b10:	4b11      	ldr	r3, [pc, #68]	; (8003b58 <HAL_RCC_OscConfig+0x470>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d0f0      	beq.n	8003afe <HAL_RCC_OscConfig+0x416>
 8003b1c:	e054      	b.n	8003bc8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b1e:	4b10      	ldr	r3, [pc, #64]	; (8003b60 <HAL_RCC_OscConfig+0x478>)
 8003b20:	2200      	movs	r2, #0
 8003b22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b24:	f7fe f8de 	bl	8001ce4 <HAL_GetTick>
 8003b28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b2a:	e008      	b.n	8003b3e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b2c:	f7fe f8da 	bl	8001ce4 <HAL_GetTick>
 8003b30:	4602      	mov	r2, r0
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	1ad3      	subs	r3, r2, r3
 8003b36:	2b02      	cmp	r3, #2
 8003b38:	d901      	bls.n	8003b3e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	e045      	b.n	8003bca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b3e:	4b06      	ldr	r3, [pc, #24]	; (8003b58 <HAL_RCC_OscConfig+0x470>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d1f0      	bne.n	8003b2c <HAL_RCC_OscConfig+0x444>
 8003b4a:	e03d      	b.n	8003bc8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	699b      	ldr	r3, [r3, #24]
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d107      	bne.n	8003b64 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003b54:	2301      	movs	r3, #1
 8003b56:	e038      	b.n	8003bca <HAL_RCC_OscConfig+0x4e2>
 8003b58:	40023800 	.word	0x40023800
 8003b5c:	40007000 	.word	0x40007000
 8003b60:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003b64:	4b1b      	ldr	r3, [pc, #108]	; (8003bd4 <HAL_RCC_OscConfig+0x4ec>)
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	699b      	ldr	r3, [r3, #24]
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	d028      	beq.n	8003bc4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d121      	bne.n	8003bc4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d11a      	bne.n	8003bc4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b8e:	68fa      	ldr	r2, [r7, #12]
 8003b90:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003b94:	4013      	ands	r3, r2
 8003b96:	687a      	ldr	r2, [r7, #4]
 8003b98:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003b9a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d111      	bne.n	8003bc4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003baa:	085b      	lsrs	r3, r3, #1
 8003bac:	3b01      	subs	r3, #1
 8003bae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	d107      	bne.n	8003bc4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bbe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	d001      	beq.n	8003bc8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	e000      	b.n	8003bca <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003bc8:	2300      	movs	r3, #0
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3718      	adds	r7, #24
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	bf00      	nop
 8003bd4:	40023800 	.word	0x40023800

08003bd8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b084      	sub	sp, #16
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
 8003be0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d101      	bne.n	8003bec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	e0cc      	b.n	8003d86 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003bec:	4b68      	ldr	r3, [pc, #416]	; (8003d90 <HAL_RCC_ClockConfig+0x1b8>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f003 0307 	and.w	r3, r3, #7
 8003bf4:	683a      	ldr	r2, [r7, #0]
 8003bf6:	429a      	cmp	r2, r3
 8003bf8:	d90c      	bls.n	8003c14 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bfa:	4b65      	ldr	r3, [pc, #404]	; (8003d90 <HAL_RCC_ClockConfig+0x1b8>)
 8003bfc:	683a      	ldr	r2, [r7, #0]
 8003bfe:	b2d2      	uxtb	r2, r2
 8003c00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c02:	4b63      	ldr	r3, [pc, #396]	; (8003d90 <HAL_RCC_ClockConfig+0x1b8>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 0307 	and.w	r3, r3, #7
 8003c0a:	683a      	ldr	r2, [r7, #0]
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	d001      	beq.n	8003c14 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003c10:	2301      	movs	r3, #1
 8003c12:	e0b8      	b.n	8003d86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f003 0302 	and.w	r3, r3, #2
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d020      	beq.n	8003c62 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f003 0304 	and.w	r3, r3, #4
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d005      	beq.n	8003c38 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c2c:	4b59      	ldr	r3, [pc, #356]	; (8003d94 <HAL_RCC_ClockConfig+0x1bc>)
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	4a58      	ldr	r2, [pc, #352]	; (8003d94 <HAL_RCC_ClockConfig+0x1bc>)
 8003c32:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003c36:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f003 0308 	and.w	r3, r3, #8
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d005      	beq.n	8003c50 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c44:	4b53      	ldr	r3, [pc, #332]	; (8003d94 <HAL_RCC_ClockConfig+0x1bc>)
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	4a52      	ldr	r2, [pc, #328]	; (8003d94 <HAL_RCC_ClockConfig+0x1bc>)
 8003c4a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003c4e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c50:	4b50      	ldr	r3, [pc, #320]	; (8003d94 <HAL_RCC_ClockConfig+0x1bc>)
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	494d      	ldr	r1, [pc, #308]	; (8003d94 <HAL_RCC_ClockConfig+0x1bc>)
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f003 0301 	and.w	r3, r3, #1
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d044      	beq.n	8003cf8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	2b01      	cmp	r3, #1
 8003c74:	d107      	bne.n	8003c86 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c76:	4b47      	ldr	r3, [pc, #284]	; (8003d94 <HAL_RCC_ClockConfig+0x1bc>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d119      	bne.n	8003cb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	e07f      	b.n	8003d86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	2b02      	cmp	r3, #2
 8003c8c:	d003      	beq.n	8003c96 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c92:	2b03      	cmp	r3, #3
 8003c94:	d107      	bne.n	8003ca6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c96:	4b3f      	ldr	r3, [pc, #252]	; (8003d94 <HAL_RCC_ClockConfig+0x1bc>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d109      	bne.n	8003cb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e06f      	b.n	8003d86 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ca6:	4b3b      	ldr	r3, [pc, #236]	; (8003d94 <HAL_RCC_ClockConfig+0x1bc>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 0302 	and.w	r3, r3, #2
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d101      	bne.n	8003cb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e067      	b.n	8003d86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003cb6:	4b37      	ldr	r3, [pc, #220]	; (8003d94 <HAL_RCC_ClockConfig+0x1bc>)
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	f023 0203 	bic.w	r2, r3, #3
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	4934      	ldr	r1, [pc, #208]	; (8003d94 <HAL_RCC_ClockConfig+0x1bc>)
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003cc8:	f7fe f80c 	bl	8001ce4 <HAL_GetTick>
 8003ccc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cce:	e00a      	b.n	8003ce6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cd0:	f7fe f808 	bl	8001ce4 <HAL_GetTick>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d901      	bls.n	8003ce6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ce2:	2303      	movs	r3, #3
 8003ce4:	e04f      	b.n	8003d86 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ce6:	4b2b      	ldr	r3, [pc, #172]	; (8003d94 <HAL_RCC_ClockConfig+0x1bc>)
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	f003 020c 	and.w	r2, r3, #12
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	009b      	lsls	r3, r3, #2
 8003cf4:	429a      	cmp	r2, r3
 8003cf6:	d1eb      	bne.n	8003cd0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003cf8:	4b25      	ldr	r3, [pc, #148]	; (8003d90 <HAL_RCC_ClockConfig+0x1b8>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f003 0307 	and.w	r3, r3, #7
 8003d00:	683a      	ldr	r2, [r7, #0]
 8003d02:	429a      	cmp	r2, r3
 8003d04:	d20c      	bcs.n	8003d20 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d06:	4b22      	ldr	r3, [pc, #136]	; (8003d90 <HAL_RCC_ClockConfig+0x1b8>)
 8003d08:	683a      	ldr	r2, [r7, #0]
 8003d0a:	b2d2      	uxtb	r2, r2
 8003d0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d0e:	4b20      	ldr	r3, [pc, #128]	; (8003d90 <HAL_RCC_ClockConfig+0x1b8>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 0307 	and.w	r3, r3, #7
 8003d16:	683a      	ldr	r2, [r7, #0]
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d001      	beq.n	8003d20 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	e032      	b.n	8003d86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f003 0304 	and.w	r3, r3, #4
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d008      	beq.n	8003d3e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d2c:	4b19      	ldr	r3, [pc, #100]	; (8003d94 <HAL_RCC_ClockConfig+0x1bc>)
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	68db      	ldr	r3, [r3, #12]
 8003d38:	4916      	ldr	r1, [pc, #88]	; (8003d94 <HAL_RCC_ClockConfig+0x1bc>)
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f003 0308 	and.w	r3, r3, #8
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d009      	beq.n	8003d5e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d4a:	4b12      	ldr	r3, [pc, #72]	; (8003d94 <HAL_RCC_ClockConfig+0x1bc>)
 8003d4c:	689b      	ldr	r3, [r3, #8]
 8003d4e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	691b      	ldr	r3, [r3, #16]
 8003d56:	00db      	lsls	r3, r3, #3
 8003d58:	490e      	ldr	r1, [pc, #56]	; (8003d94 <HAL_RCC_ClockConfig+0x1bc>)
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003d5e:	f000 f821 	bl	8003da4 <HAL_RCC_GetSysClockFreq>
 8003d62:	4602      	mov	r2, r0
 8003d64:	4b0b      	ldr	r3, [pc, #44]	; (8003d94 <HAL_RCC_ClockConfig+0x1bc>)
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	091b      	lsrs	r3, r3, #4
 8003d6a:	f003 030f 	and.w	r3, r3, #15
 8003d6e:	490a      	ldr	r1, [pc, #40]	; (8003d98 <HAL_RCC_ClockConfig+0x1c0>)
 8003d70:	5ccb      	ldrb	r3, [r1, r3]
 8003d72:	fa22 f303 	lsr.w	r3, r2, r3
 8003d76:	4a09      	ldr	r2, [pc, #36]	; (8003d9c <HAL_RCC_ClockConfig+0x1c4>)
 8003d78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003d7a:	4b09      	ldr	r3, [pc, #36]	; (8003da0 <HAL_RCC_ClockConfig+0x1c8>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f7fd ff6c 	bl	8001c5c <HAL_InitTick>

  return HAL_OK;
 8003d84:	2300      	movs	r3, #0
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	3710      	adds	r7, #16
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}
 8003d8e:	bf00      	nop
 8003d90:	40023c00 	.word	0x40023c00
 8003d94:	40023800 	.word	0x40023800
 8003d98:	0800db40 	.word	0x0800db40
 8003d9c:	20000000 	.word	0x20000000
 8003da0:	20000004 	.word	0x20000004

08003da4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003da4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003da8:	b094      	sub	sp, #80	; 0x50
 8003daa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003dac:	2300      	movs	r3, #0
 8003dae:	647b      	str	r3, [r7, #68]	; 0x44
 8003db0:	2300      	movs	r3, #0
 8003db2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003db4:	2300      	movs	r3, #0
 8003db6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003db8:	2300      	movs	r3, #0
 8003dba:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003dbc:	4b79      	ldr	r3, [pc, #484]	; (8003fa4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	f003 030c 	and.w	r3, r3, #12
 8003dc4:	2b08      	cmp	r3, #8
 8003dc6:	d00d      	beq.n	8003de4 <HAL_RCC_GetSysClockFreq+0x40>
 8003dc8:	2b08      	cmp	r3, #8
 8003dca:	f200 80e1 	bhi.w	8003f90 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d002      	beq.n	8003dd8 <HAL_RCC_GetSysClockFreq+0x34>
 8003dd2:	2b04      	cmp	r3, #4
 8003dd4:	d003      	beq.n	8003dde <HAL_RCC_GetSysClockFreq+0x3a>
 8003dd6:	e0db      	b.n	8003f90 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003dd8:	4b73      	ldr	r3, [pc, #460]	; (8003fa8 <HAL_RCC_GetSysClockFreq+0x204>)
 8003dda:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003ddc:	e0db      	b.n	8003f96 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003dde:	4b73      	ldr	r3, [pc, #460]	; (8003fac <HAL_RCC_GetSysClockFreq+0x208>)
 8003de0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003de2:	e0d8      	b.n	8003f96 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003de4:	4b6f      	ldr	r3, [pc, #444]	; (8003fa4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003dec:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003dee:	4b6d      	ldr	r3, [pc, #436]	; (8003fa4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d063      	beq.n	8003ec2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003dfa:	4b6a      	ldr	r3, [pc, #424]	; (8003fa4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	099b      	lsrs	r3, r3, #6
 8003e00:	2200      	movs	r2, #0
 8003e02:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e04:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003e06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e0c:	633b      	str	r3, [r7, #48]	; 0x30
 8003e0e:	2300      	movs	r3, #0
 8003e10:	637b      	str	r3, [r7, #52]	; 0x34
 8003e12:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003e16:	4622      	mov	r2, r4
 8003e18:	462b      	mov	r3, r5
 8003e1a:	f04f 0000 	mov.w	r0, #0
 8003e1e:	f04f 0100 	mov.w	r1, #0
 8003e22:	0159      	lsls	r1, r3, #5
 8003e24:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e28:	0150      	lsls	r0, r2, #5
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	460b      	mov	r3, r1
 8003e2e:	4621      	mov	r1, r4
 8003e30:	1a51      	subs	r1, r2, r1
 8003e32:	6139      	str	r1, [r7, #16]
 8003e34:	4629      	mov	r1, r5
 8003e36:	eb63 0301 	sbc.w	r3, r3, r1
 8003e3a:	617b      	str	r3, [r7, #20]
 8003e3c:	f04f 0200 	mov.w	r2, #0
 8003e40:	f04f 0300 	mov.w	r3, #0
 8003e44:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003e48:	4659      	mov	r1, fp
 8003e4a:	018b      	lsls	r3, r1, #6
 8003e4c:	4651      	mov	r1, sl
 8003e4e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003e52:	4651      	mov	r1, sl
 8003e54:	018a      	lsls	r2, r1, #6
 8003e56:	4651      	mov	r1, sl
 8003e58:	ebb2 0801 	subs.w	r8, r2, r1
 8003e5c:	4659      	mov	r1, fp
 8003e5e:	eb63 0901 	sbc.w	r9, r3, r1
 8003e62:	f04f 0200 	mov.w	r2, #0
 8003e66:	f04f 0300 	mov.w	r3, #0
 8003e6a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003e6e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003e72:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003e76:	4690      	mov	r8, r2
 8003e78:	4699      	mov	r9, r3
 8003e7a:	4623      	mov	r3, r4
 8003e7c:	eb18 0303 	adds.w	r3, r8, r3
 8003e80:	60bb      	str	r3, [r7, #8]
 8003e82:	462b      	mov	r3, r5
 8003e84:	eb49 0303 	adc.w	r3, r9, r3
 8003e88:	60fb      	str	r3, [r7, #12]
 8003e8a:	f04f 0200 	mov.w	r2, #0
 8003e8e:	f04f 0300 	mov.w	r3, #0
 8003e92:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003e96:	4629      	mov	r1, r5
 8003e98:	024b      	lsls	r3, r1, #9
 8003e9a:	4621      	mov	r1, r4
 8003e9c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003ea0:	4621      	mov	r1, r4
 8003ea2:	024a      	lsls	r2, r1, #9
 8003ea4:	4610      	mov	r0, r2
 8003ea6:	4619      	mov	r1, r3
 8003ea8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003eaa:	2200      	movs	r2, #0
 8003eac:	62bb      	str	r3, [r7, #40]	; 0x28
 8003eae:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003eb0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003eb4:	f7fc f9ec 	bl	8000290 <__aeabi_uldivmod>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	460b      	mov	r3, r1
 8003ebc:	4613      	mov	r3, r2
 8003ebe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ec0:	e058      	b.n	8003f74 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ec2:	4b38      	ldr	r3, [pc, #224]	; (8003fa4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	099b      	lsrs	r3, r3, #6
 8003ec8:	2200      	movs	r2, #0
 8003eca:	4618      	mov	r0, r3
 8003ecc:	4611      	mov	r1, r2
 8003ece:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003ed2:	623b      	str	r3, [r7, #32]
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	627b      	str	r3, [r7, #36]	; 0x24
 8003ed8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003edc:	4642      	mov	r2, r8
 8003ede:	464b      	mov	r3, r9
 8003ee0:	f04f 0000 	mov.w	r0, #0
 8003ee4:	f04f 0100 	mov.w	r1, #0
 8003ee8:	0159      	lsls	r1, r3, #5
 8003eea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003eee:	0150      	lsls	r0, r2, #5
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	460b      	mov	r3, r1
 8003ef4:	4641      	mov	r1, r8
 8003ef6:	ebb2 0a01 	subs.w	sl, r2, r1
 8003efa:	4649      	mov	r1, r9
 8003efc:	eb63 0b01 	sbc.w	fp, r3, r1
 8003f00:	f04f 0200 	mov.w	r2, #0
 8003f04:	f04f 0300 	mov.w	r3, #0
 8003f08:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003f0c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003f10:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003f14:	ebb2 040a 	subs.w	r4, r2, sl
 8003f18:	eb63 050b 	sbc.w	r5, r3, fp
 8003f1c:	f04f 0200 	mov.w	r2, #0
 8003f20:	f04f 0300 	mov.w	r3, #0
 8003f24:	00eb      	lsls	r3, r5, #3
 8003f26:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f2a:	00e2      	lsls	r2, r4, #3
 8003f2c:	4614      	mov	r4, r2
 8003f2e:	461d      	mov	r5, r3
 8003f30:	4643      	mov	r3, r8
 8003f32:	18e3      	adds	r3, r4, r3
 8003f34:	603b      	str	r3, [r7, #0]
 8003f36:	464b      	mov	r3, r9
 8003f38:	eb45 0303 	adc.w	r3, r5, r3
 8003f3c:	607b      	str	r3, [r7, #4]
 8003f3e:	f04f 0200 	mov.w	r2, #0
 8003f42:	f04f 0300 	mov.w	r3, #0
 8003f46:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003f4a:	4629      	mov	r1, r5
 8003f4c:	028b      	lsls	r3, r1, #10
 8003f4e:	4621      	mov	r1, r4
 8003f50:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003f54:	4621      	mov	r1, r4
 8003f56:	028a      	lsls	r2, r1, #10
 8003f58:	4610      	mov	r0, r2
 8003f5a:	4619      	mov	r1, r3
 8003f5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f5e:	2200      	movs	r2, #0
 8003f60:	61bb      	str	r3, [r7, #24]
 8003f62:	61fa      	str	r2, [r7, #28]
 8003f64:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f68:	f7fc f992 	bl	8000290 <__aeabi_uldivmod>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	460b      	mov	r3, r1
 8003f70:	4613      	mov	r3, r2
 8003f72:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003f74:	4b0b      	ldr	r3, [pc, #44]	; (8003fa4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	0c1b      	lsrs	r3, r3, #16
 8003f7a:	f003 0303 	and.w	r3, r3, #3
 8003f7e:	3301      	adds	r3, #1
 8003f80:	005b      	lsls	r3, r3, #1
 8003f82:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003f84:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003f86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f88:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f8c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003f8e:	e002      	b.n	8003f96 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f90:	4b05      	ldr	r3, [pc, #20]	; (8003fa8 <HAL_RCC_GetSysClockFreq+0x204>)
 8003f92:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003f94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	3750      	adds	r7, #80	; 0x50
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003fa2:	bf00      	nop
 8003fa4:	40023800 	.word	0x40023800
 8003fa8:	00f42400 	.word	0x00f42400
 8003fac:	007a1200 	.word	0x007a1200

08003fb0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fb4:	4b03      	ldr	r3, [pc, #12]	; (8003fc4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc0:	4770      	bx	lr
 8003fc2:	bf00      	nop
 8003fc4:	20000000 	.word	0x20000000

08003fc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003fcc:	f7ff fff0 	bl	8003fb0 <HAL_RCC_GetHCLKFreq>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	4b05      	ldr	r3, [pc, #20]	; (8003fe8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	0a9b      	lsrs	r3, r3, #10
 8003fd8:	f003 0307 	and.w	r3, r3, #7
 8003fdc:	4903      	ldr	r1, [pc, #12]	; (8003fec <HAL_RCC_GetPCLK1Freq+0x24>)
 8003fde:	5ccb      	ldrb	r3, [r1, r3]
 8003fe0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	bd80      	pop	{r7, pc}
 8003fe8:	40023800 	.word	0x40023800
 8003fec:	0800db50 	.word	0x0800db50

08003ff0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003ff4:	f7ff ffdc 	bl	8003fb0 <HAL_RCC_GetHCLKFreq>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	4b05      	ldr	r3, [pc, #20]	; (8004010 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	0b5b      	lsrs	r3, r3, #13
 8004000:	f003 0307 	and.w	r3, r3, #7
 8004004:	4903      	ldr	r1, [pc, #12]	; (8004014 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004006:	5ccb      	ldrb	r3, [r1, r3]
 8004008:	fa22 f303 	lsr.w	r3, r2, r3
}
 800400c:	4618      	mov	r0, r3
 800400e:	bd80      	pop	{r7, pc}
 8004010:	40023800 	.word	0x40023800
 8004014:	0800db50 	.word	0x0800db50

08004018 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b082      	sub	sp, #8
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d101      	bne.n	800402a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	e07b      	b.n	8004122 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800402e:	2b00      	cmp	r3, #0
 8004030:	d108      	bne.n	8004044 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800403a:	d009      	beq.n	8004050 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2200      	movs	r2, #0
 8004040:	61da      	str	r2, [r3, #28]
 8004042:	e005      	b.n	8004050 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2200      	movs	r2, #0
 8004048:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2200      	movs	r2, #0
 800404e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2200      	movs	r2, #0
 8004054:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800405c:	b2db      	uxtb	r3, r3
 800405e:	2b00      	cmp	r3, #0
 8004060:	d106      	bne.n	8004070 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2200      	movs	r2, #0
 8004066:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f7fd f836 	bl	80010dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2202      	movs	r2, #2
 8004074:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004086:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	689b      	ldr	r3, [r3, #8]
 8004094:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004098:	431a      	orrs	r2, r3
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	68db      	ldr	r3, [r3, #12]
 800409e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040a2:	431a      	orrs	r2, r3
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	691b      	ldr	r3, [r3, #16]
 80040a8:	f003 0302 	and.w	r3, r3, #2
 80040ac:	431a      	orrs	r2, r3
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	695b      	ldr	r3, [r3, #20]
 80040b2:	f003 0301 	and.w	r3, r3, #1
 80040b6:	431a      	orrs	r2, r3
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	699b      	ldr	r3, [r3, #24]
 80040bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040c0:	431a      	orrs	r2, r3
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	69db      	ldr	r3, [r3, #28]
 80040c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80040ca:	431a      	orrs	r2, r3
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6a1b      	ldr	r3, [r3, #32]
 80040d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040d4:	ea42 0103 	orr.w	r1, r2, r3
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040dc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	430a      	orrs	r2, r1
 80040e6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	699b      	ldr	r3, [r3, #24]
 80040ec:	0c1b      	lsrs	r3, r3, #16
 80040ee:	f003 0104 	and.w	r1, r3, #4
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f6:	f003 0210 	and.w	r2, r3, #16
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	430a      	orrs	r2, r1
 8004100:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	69da      	ldr	r2, [r3, #28]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004110:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2200      	movs	r2, #0
 8004116:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2201      	movs	r2, #1
 800411c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004120:	2300      	movs	r3, #0
}
 8004122:	4618      	mov	r0, r3
 8004124:	3708      	adds	r7, #8
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}

0800412a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800412a:	b580      	push	{r7, lr}
 800412c:	b082      	sub	sp, #8
 800412e:	af00      	add	r7, sp, #0
 8004130:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d101      	bne.n	800413c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004138:	2301      	movs	r3, #1
 800413a:	e041      	b.n	80041c0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004142:	b2db      	uxtb	r3, r3
 8004144:	2b00      	cmp	r3, #0
 8004146:	d106      	bne.n	8004156 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2200      	movs	r2, #0
 800414c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004150:	6878      	ldr	r0, [r7, #4]
 8004152:	f7fd f8b5 	bl	80012c0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2202      	movs	r2, #2
 800415a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	3304      	adds	r3, #4
 8004166:	4619      	mov	r1, r3
 8004168:	4610      	mov	r0, r2
 800416a:	f000 f8ef 	bl	800434c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2201      	movs	r2, #1
 8004172:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2201      	movs	r2, #1
 800417a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2201      	movs	r2, #1
 8004182:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2201      	movs	r2, #1
 800418a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2201      	movs	r2, #1
 8004192:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2201      	movs	r2, #1
 800419a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2201      	movs	r2, #1
 80041a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2201      	movs	r2, #1
 80041aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2201      	movs	r2, #1
 80041b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2201      	movs	r2, #1
 80041ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80041be:	2300      	movs	r3, #0
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	3708      	adds	r7, #8
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bd80      	pop	{r7, pc}

080041c8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b086      	sub	sp, #24
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	60f8      	str	r0, [r7, #12]
 80041d0:	60b9      	str	r1, [r7, #8]
 80041d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041d4:	2300      	movs	r3, #0
 80041d6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041de:	2b01      	cmp	r3, #1
 80041e0:	d101      	bne.n	80041e6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80041e2:	2302      	movs	r3, #2
 80041e4:	e0ae      	b.n	8004344 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2201      	movs	r2, #1
 80041ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2b0c      	cmp	r3, #12
 80041f2:	f200 809f 	bhi.w	8004334 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80041f6:	a201      	add	r2, pc, #4	; (adr r2, 80041fc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80041f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041fc:	08004231 	.word	0x08004231
 8004200:	08004335 	.word	0x08004335
 8004204:	08004335 	.word	0x08004335
 8004208:	08004335 	.word	0x08004335
 800420c:	08004271 	.word	0x08004271
 8004210:	08004335 	.word	0x08004335
 8004214:	08004335 	.word	0x08004335
 8004218:	08004335 	.word	0x08004335
 800421c:	080042b3 	.word	0x080042b3
 8004220:	08004335 	.word	0x08004335
 8004224:	08004335 	.word	0x08004335
 8004228:	08004335 	.word	0x08004335
 800422c:	080042f3 	.word	0x080042f3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	68b9      	ldr	r1, [r7, #8]
 8004236:	4618      	mov	r0, r3
 8004238:	f000 f908 	bl	800444c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	699a      	ldr	r2, [r3, #24]
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f042 0208 	orr.w	r2, r2, #8
 800424a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	699a      	ldr	r2, [r3, #24]
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f022 0204 	bic.w	r2, r2, #4
 800425a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	6999      	ldr	r1, [r3, #24]
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	691a      	ldr	r2, [r3, #16]
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	430a      	orrs	r2, r1
 800426c:	619a      	str	r2, [r3, #24]
      break;
 800426e:	e064      	b.n	800433a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	68b9      	ldr	r1, [r7, #8]
 8004276:	4618      	mov	r0, r3
 8004278:	f000 f94e 	bl	8004518 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	699a      	ldr	r2, [r3, #24]
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800428a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	699a      	ldr	r2, [r3, #24]
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800429a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	6999      	ldr	r1, [r3, #24]
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	691b      	ldr	r3, [r3, #16]
 80042a6:	021a      	lsls	r2, r3, #8
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	430a      	orrs	r2, r1
 80042ae:	619a      	str	r2, [r3, #24]
      break;
 80042b0:	e043      	b.n	800433a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	68b9      	ldr	r1, [r7, #8]
 80042b8:	4618      	mov	r0, r3
 80042ba:	f000 f999 	bl	80045f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	69da      	ldr	r2, [r3, #28]
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f042 0208 	orr.w	r2, r2, #8
 80042cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	69da      	ldr	r2, [r3, #28]
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f022 0204 	bic.w	r2, r2, #4
 80042dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	69d9      	ldr	r1, [r3, #28]
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	691a      	ldr	r2, [r3, #16]
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	430a      	orrs	r2, r1
 80042ee:	61da      	str	r2, [r3, #28]
      break;
 80042f0:	e023      	b.n	800433a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	68b9      	ldr	r1, [r7, #8]
 80042f8:	4618      	mov	r0, r3
 80042fa:	f000 f9e3 	bl	80046c4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	69da      	ldr	r2, [r3, #28]
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800430c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	69da      	ldr	r2, [r3, #28]
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800431c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	69d9      	ldr	r1, [r3, #28]
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	691b      	ldr	r3, [r3, #16]
 8004328:	021a      	lsls	r2, r3, #8
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	430a      	orrs	r2, r1
 8004330:	61da      	str	r2, [r3, #28]
      break;
 8004332:	e002      	b.n	800433a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	75fb      	strb	r3, [r7, #23]
      break;
 8004338:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	2200      	movs	r2, #0
 800433e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004342:	7dfb      	ldrb	r3, [r7, #23]
}
 8004344:	4618      	mov	r0, r3
 8004346:	3718      	adds	r7, #24
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}

0800434c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800434c:	b480      	push	{r7}
 800434e:	b085      	sub	sp, #20
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
 8004354:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	4a34      	ldr	r2, [pc, #208]	; (8004430 <TIM_Base_SetConfig+0xe4>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d00f      	beq.n	8004384 <TIM_Base_SetConfig+0x38>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800436a:	d00b      	beq.n	8004384 <TIM_Base_SetConfig+0x38>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	4a31      	ldr	r2, [pc, #196]	; (8004434 <TIM_Base_SetConfig+0xe8>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d007      	beq.n	8004384 <TIM_Base_SetConfig+0x38>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	4a30      	ldr	r2, [pc, #192]	; (8004438 <TIM_Base_SetConfig+0xec>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d003      	beq.n	8004384 <TIM_Base_SetConfig+0x38>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	4a2f      	ldr	r2, [pc, #188]	; (800443c <TIM_Base_SetConfig+0xf0>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d108      	bne.n	8004396 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800438a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	68fa      	ldr	r2, [r7, #12]
 8004392:	4313      	orrs	r3, r2
 8004394:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	4a25      	ldr	r2, [pc, #148]	; (8004430 <TIM_Base_SetConfig+0xe4>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d01b      	beq.n	80043d6 <TIM_Base_SetConfig+0x8a>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043a4:	d017      	beq.n	80043d6 <TIM_Base_SetConfig+0x8a>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	4a22      	ldr	r2, [pc, #136]	; (8004434 <TIM_Base_SetConfig+0xe8>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d013      	beq.n	80043d6 <TIM_Base_SetConfig+0x8a>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	4a21      	ldr	r2, [pc, #132]	; (8004438 <TIM_Base_SetConfig+0xec>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d00f      	beq.n	80043d6 <TIM_Base_SetConfig+0x8a>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	4a20      	ldr	r2, [pc, #128]	; (800443c <TIM_Base_SetConfig+0xf0>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d00b      	beq.n	80043d6 <TIM_Base_SetConfig+0x8a>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	4a1f      	ldr	r2, [pc, #124]	; (8004440 <TIM_Base_SetConfig+0xf4>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d007      	beq.n	80043d6 <TIM_Base_SetConfig+0x8a>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	4a1e      	ldr	r2, [pc, #120]	; (8004444 <TIM_Base_SetConfig+0xf8>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d003      	beq.n	80043d6 <TIM_Base_SetConfig+0x8a>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	4a1d      	ldr	r2, [pc, #116]	; (8004448 <TIM_Base_SetConfig+0xfc>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d108      	bne.n	80043e8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	68db      	ldr	r3, [r3, #12]
 80043e2:	68fa      	ldr	r2, [r7, #12]
 80043e4:	4313      	orrs	r3, r2
 80043e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	695b      	ldr	r3, [r3, #20]
 80043f2:	4313      	orrs	r3, r2
 80043f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	68fa      	ldr	r2, [r7, #12]
 80043fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	689a      	ldr	r2, [r3, #8]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	681a      	ldr	r2, [r3, #0]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	4a08      	ldr	r2, [pc, #32]	; (8004430 <TIM_Base_SetConfig+0xe4>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d103      	bne.n	800441c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	691a      	ldr	r2, [r3, #16]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2201      	movs	r2, #1
 8004420:	615a      	str	r2, [r3, #20]
}
 8004422:	bf00      	nop
 8004424:	3714      	adds	r7, #20
 8004426:	46bd      	mov	sp, r7
 8004428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442c:	4770      	bx	lr
 800442e:	bf00      	nop
 8004430:	40010000 	.word	0x40010000
 8004434:	40000400 	.word	0x40000400
 8004438:	40000800 	.word	0x40000800
 800443c:	40000c00 	.word	0x40000c00
 8004440:	40014000 	.word	0x40014000
 8004444:	40014400 	.word	0x40014400
 8004448:	40014800 	.word	0x40014800

0800444c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800444c:	b480      	push	{r7}
 800444e:	b087      	sub	sp, #28
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
 8004454:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6a1b      	ldr	r3, [r3, #32]
 800445a:	f023 0201 	bic.w	r2, r3, #1
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6a1b      	ldr	r3, [r3, #32]
 8004466:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	699b      	ldr	r3, [r3, #24]
 8004472:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800447a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	f023 0303 	bic.w	r3, r3, #3
 8004482:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	68fa      	ldr	r2, [r7, #12]
 800448a:	4313      	orrs	r3, r2
 800448c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	f023 0302 	bic.w	r3, r3, #2
 8004494:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	697a      	ldr	r2, [r7, #20]
 800449c:	4313      	orrs	r3, r2
 800449e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	4a1c      	ldr	r2, [pc, #112]	; (8004514 <TIM_OC1_SetConfig+0xc8>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d10c      	bne.n	80044c2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	f023 0308 	bic.w	r3, r3, #8
 80044ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	68db      	ldr	r3, [r3, #12]
 80044b4:	697a      	ldr	r2, [r7, #20]
 80044b6:	4313      	orrs	r3, r2
 80044b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	f023 0304 	bic.w	r3, r3, #4
 80044c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	4a13      	ldr	r2, [pc, #76]	; (8004514 <TIM_OC1_SetConfig+0xc8>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d111      	bne.n	80044ee <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80044d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	695b      	ldr	r3, [r3, #20]
 80044de:	693a      	ldr	r2, [r7, #16]
 80044e0:	4313      	orrs	r3, r2
 80044e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	699b      	ldr	r3, [r3, #24]
 80044e8:	693a      	ldr	r2, [r7, #16]
 80044ea:	4313      	orrs	r3, r2
 80044ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	693a      	ldr	r2, [r7, #16]
 80044f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	68fa      	ldr	r2, [r7, #12]
 80044f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	685a      	ldr	r2, [r3, #4]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	697a      	ldr	r2, [r7, #20]
 8004506:	621a      	str	r2, [r3, #32]
}
 8004508:	bf00      	nop
 800450a:	371c      	adds	r7, #28
 800450c:	46bd      	mov	sp, r7
 800450e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004512:	4770      	bx	lr
 8004514:	40010000 	.word	0x40010000

08004518 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004518:	b480      	push	{r7}
 800451a:	b087      	sub	sp, #28
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
 8004520:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6a1b      	ldr	r3, [r3, #32]
 8004526:	f023 0210 	bic.w	r2, r3, #16
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6a1b      	ldr	r3, [r3, #32]
 8004532:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	699b      	ldr	r3, [r3, #24]
 800453e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004546:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800454e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	021b      	lsls	r3, r3, #8
 8004556:	68fa      	ldr	r2, [r7, #12]
 8004558:	4313      	orrs	r3, r2
 800455a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	f023 0320 	bic.w	r3, r3, #32
 8004562:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	011b      	lsls	r3, r3, #4
 800456a:	697a      	ldr	r2, [r7, #20]
 800456c:	4313      	orrs	r3, r2
 800456e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	4a1e      	ldr	r2, [pc, #120]	; (80045ec <TIM_OC2_SetConfig+0xd4>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d10d      	bne.n	8004594 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800457e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	68db      	ldr	r3, [r3, #12]
 8004584:	011b      	lsls	r3, r3, #4
 8004586:	697a      	ldr	r2, [r7, #20]
 8004588:	4313      	orrs	r3, r2
 800458a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004592:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	4a15      	ldr	r2, [pc, #84]	; (80045ec <TIM_OC2_SetConfig+0xd4>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d113      	bne.n	80045c4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80045a2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80045aa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	695b      	ldr	r3, [r3, #20]
 80045b0:	009b      	lsls	r3, r3, #2
 80045b2:	693a      	ldr	r2, [r7, #16]
 80045b4:	4313      	orrs	r3, r2
 80045b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	699b      	ldr	r3, [r3, #24]
 80045bc:	009b      	lsls	r3, r3, #2
 80045be:	693a      	ldr	r2, [r7, #16]
 80045c0:	4313      	orrs	r3, r2
 80045c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	693a      	ldr	r2, [r7, #16]
 80045c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	68fa      	ldr	r2, [r7, #12]
 80045ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	685a      	ldr	r2, [r3, #4]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	697a      	ldr	r2, [r7, #20]
 80045dc:	621a      	str	r2, [r3, #32]
}
 80045de:	bf00      	nop
 80045e0:	371c      	adds	r7, #28
 80045e2:	46bd      	mov	sp, r7
 80045e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e8:	4770      	bx	lr
 80045ea:	bf00      	nop
 80045ec:	40010000 	.word	0x40010000

080045f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b087      	sub	sp, #28
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
 80045f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6a1b      	ldr	r3, [r3, #32]
 80045fe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6a1b      	ldr	r3, [r3, #32]
 800460a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	69db      	ldr	r3, [r3, #28]
 8004616:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800461e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	f023 0303 	bic.w	r3, r3, #3
 8004626:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	68fa      	ldr	r2, [r7, #12]
 800462e:	4313      	orrs	r3, r2
 8004630:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004638:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	021b      	lsls	r3, r3, #8
 8004640:	697a      	ldr	r2, [r7, #20]
 8004642:	4313      	orrs	r3, r2
 8004644:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	4a1d      	ldr	r2, [pc, #116]	; (80046c0 <TIM_OC3_SetConfig+0xd0>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d10d      	bne.n	800466a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004654:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	68db      	ldr	r3, [r3, #12]
 800465a:	021b      	lsls	r3, r3, #8
 800465c:	697a      	ldr	r2, [r7, #20]
 800465e:	4313      	orrs	r3, r2
 8004660:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004668:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	4a14      	ldr	r2, [pc, #80]	; (80046c0 <TIM_OC3_SetConfig+0xd0>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d113      	bne.n	800469a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004678:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004680:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	695b      	ldr	r3, [r3, #20]
 8004686:	011b      	lsls	r3, r3, #4
 8004688:	693a      	ldr	r2, [r7, #16]
 800468a:	4313      	orrs	r3, r2
 800468c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	699b      	ldr	r3, [r3, #24]
 8004692:	011b      	lsls	r3, r3, #4
 8004694:	693a      	ldr	r2, [r7, #16]
 8004696:	4313      	orrs	r3, r2
 8004698:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	693a      	ldr	r2, [r7, #16]
 800469e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	68fa      	ldr	r2, [r7, #12]
 80046a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	685a      	ldr	r2, [r3, #4]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	697a      	ldr	r2, [r7, #20]
 80046b2:	621a      	str	r2, [r3, #32]
}
 80046b4:	bf00      	nop
 80046b6:	371c      	adds	r7, #28
 80046b8:	46bd      	mov	sp, r7
 80046ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046be:	4770      	bx	lr
 80046c0:	40010000 	.word	0x40010000

080046c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b087      	sub	sp, #28
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
 80046cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6a1b      	ldr	r3, [r3, #32]
 80046d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6a1b      	ldr	r3, [r3, #32]
 80046de:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	69db      	ldr	r3, [r3, #28]
 80046ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	021b      	lsls	r3, r3, #8
 8004702:	68fa      	ldr	r2, [r7, #12]
 8004704:	4313      	orrs	r3, r2
 8004706:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800470e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	031b      	lsls	r3, r3, #12
 8004716:	693a      	ldr	r2, [r7, #16]
 8004718:	4313      	orrs	r3, r2
 800471a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	4a10      	ldr	r2, [pc, #64]	; (8004760 <TIM_OC4_SetConfig+0x9c>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d109      	bne.n	8004738 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800472a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	695b      	ldr	r3, [r3, #20]
 8004730:	019b      	lsls	r3, r3, #6
 8004732:	697a      	ldr	r2, [r7, #20]
 8004734:	4313      	orrs	r3, r2
 8004736:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	697a      	ldr	r2, [r7, #20]
 800473c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	68fa      	ldr	r2, [r7, #12]
 8004742:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	685a      	ldr	r2, [r3, #4]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	693a      	ldr	r2, [r7, #16]
 8004750:	621a      	str	r2, [r3, #32]
}
 8004752:	bf00      	nop
 8004754:	371c      	adds	r7, #28
 8004756:	46bd      	mov	sp, r7
 8004758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475c:	4770      	bx	lr
 800475e:	bf00      	nop
 8004760:	40010000 	.word	0x40010000

08004764 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004764:	b480      	push	{r7}
 8004766:	b085      	sub	sp, #20
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
 800476c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004774:	2b01      	cmp	r3, #1
 8004776:	d101      	bne.n	800477c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004778:	2302      	movs	r3, #2
 800477a:	e050      	b.n	800481e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2201      	movs	r2, #1
 8004780:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2202      	movs	r2, #2
 8004788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	68fa      	ldr	r2, [r7, #12]
 80047aa:	4313      	orrs	r3, r2
 80047ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	68fa      	ldr	r2, [r7, #12]
 80047b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a1c      	ldr	r2, [pc, #112]	; (800482c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d018      	beq.n	80047f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047c8:	d013      	beq.n	80047f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a18      	ldr	r2, [pc, #96]	; (8004830 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d00e      	beq.n	80047f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a16      	ldr	r2, [pc, #88]	; (8004834 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d009      	beq.n	80047f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a15      	ldr	r2, [pc, #84]	; (8004838 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d004      	beq.n	80047f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a13      	ldr	r2, [pc, #76]	; (800483c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d10c      	bne.n	800480c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	68ba      	ldr	r2, [r7, #8]
 8004800:	4313      	orrs	r3, r2
 8004802:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	68ba      	ldr	r2, [r7, #8]
 800480a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2201      	movs	r2, #1
 8004810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2200      	movs	r2, #0
 8004818:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800481c:	2300      	movs	r3, #0
}
 800481e:	4618      	mov	r0, r3
 8004820:	3714      	adds	r7, #20
 8004822:	46bd      	mov	sp, r7
 8004824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004828:	4770      	bx	lr
 800482a:	bf00      	nop
 800482c:	40010000 	.word	0x40010000
 8004830:	40000400 	.word	0x40000400
 8004834:	40000800 	.word	0x40000800
 8004838:	40000c00 	.word	0x40000c00
 800483c:	40014000 	.word	0x40014000

08004840 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b082      	sub	sp, #8
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d101      	bne.n	8004852 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	e03f      	b.n	80048d2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004858:	b2db      	uxtb	r3, r3
 800485a:	2b00      	cmp	r3, #0
 800485c:	d106      	bne.n	800486c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2200      	movs	r2, #0
 8004862:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f7fc fdc2 	bl	80013f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2224      	movs	r2, #36	; 0x24
 8004870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	68da      	ldr	r2, [r3, #12]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004882:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	f000 f929 	bl	8004adc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	691a      	ldr	r2, [r3, #16]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004898:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	695a      	ldr	r2, [r3, #20]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80048a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	68da      	ldr	r2, [r3, #12]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80048b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2200      	movs	r2, #0
 80048be:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2220      	movs	r2, #32
 80048c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2220      	movs	r2, #32
 80048cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80048d0:	2300      	movs	r3, #0
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	3708      	adds	r7, #8
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}

080048da <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048da:	b580      	push	{r7, lr}
 80048dc:	b08a      	sub	sp, #40	; 0x28
 80048de:	af02      	add	r7, sp, #8
 80048e0:	60f8      	str	r0, [r7, #12]
 80048e2:	60b9      	str	r1, [r7, #8]
 80048e4:	603b      	str	r3, [r7, #0]
 80048e6:	4613      	mov	r3, r2
 80048e8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80048ea:	2300      	movs	r3, #0
 80048ec:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048f4:	b2db      	uxtb	r3, r3
 80048f6:	2b20      	cmp	r3, #32
 80048f8:	d17c      	bne.n	80049f4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d002      	beq.n	8004906 <HAL_UART_Transmit+0x2c>
 8004900:	88fb      	ldrh	r3, [r7, #6]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d101      	bne.n	800490a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004906:	2301      	movs	r3, #1
 8004908:	e075      	b.n	80049f6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004910:	2b01      	cmp	r3, #1
 8004912:	d101      	bne.n	8004918 <HAL_UART_Transmit+0x3e>
 8004914:	2302      	movs	r3, #2
 8004916:	e06e      	b.n	80049f6 <HAL_UART_Transmit+0x11c>
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2201      	movs	r2, #1
 800491c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	2200      	movs	r2, #0
 8004924:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2221      	movs	r2, #33	; 0x21
 800492a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800492e:	f7fd f9d9 	bl	8001ce4 <HAL_GetTick>
 8004932:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	88fa      	ldrh	r2, [r7, #6]
 8004938:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	88fa      	ldrh	r2, [r7, #6]
 800493e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004948:	d108      	bne.n	800495c <HAL_UART_Transmit+0x82>
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	691b      	ldr	r3, [r3, #16]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d104      	bne.n	800495c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004952:	2300      	movs	r3, #0
 8004954:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	61bb      	str	r3, [r7, #24]
 800495a:	e003      	b.n	8004964 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004960:	2300      	movs	r3, #0
 8004962:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2200      	movs	r2, #0
 8004968:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800496c:	e02a      	b.n	80049c4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	9300      	str	r3, [sp, #0]
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	2200      	movs	r2, #0
 8004976:	2180      	movs	r1, #128	; 0x80
 8004978:	68f8      	ldr	r0, [r7, #12]
 800497a:	f000 f840 	bl	80049fe <UART_WaitOnFlagUntilTimeout>
 800497e:	4603      	mov	r3, r0
 8004980:	2b00      	cmp	r3, #0
 8004982:	d001      	beq.n	8004988 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004984:	2303      	movs	r3, #3
 8004986:	e036      	b.n	80049f6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004988:	69fb      	ldr	r3, [r7, #28]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d10b      	bne.n	80049a6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800498e:	69bb      	ldr	r3, [r7, #24]
 8004990:	881b      	ldrh	r3, [r3, #0]
 8004992:	461a      	mov	r2, r3
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800499c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800499e:	69bb      	ldr	r3, [r7, #24]
 80049a0:	3302      	adds	r3, #2
 80049a2:	61bb      	str	r3, [r7, #24]
 80049a4:	e007      	b.n	80049b6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80049a6:	69fb      	ldr	r3, [r7, #28]
 80049a8:	781a      	ldrb	r2, [r3, #0]
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80049b0:	69fb      	ldr	r3, [r7, #28]
 80049b2:	3301      	adds	r3, #1
 80049b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80049ba:	b29b      	uxth	r3, r3
 80049bc:	3b01      	subs	r3, #1
 80049be:	b29a      	uxth	r2, r3
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80049c8:	b29b      	uxth	r3, r3
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d1cf      	bne.n	800496e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	9300      	str	r3, [sp, #0]
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	2200      	movs	r2, #0
 80049d6:	2140      	movs	r1, #64	; 0x40
 80049d8:	68f8      	ldr	r0, [r7, #12]
 80049da:	f000 f810 	bl	80049fe <UART_WaitOnFlagUntilTimeout>
 80049de:	4603      	mov	r3, r0
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d001      	beq.n	80049e8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80049e4:	2303      	movs	r3, #3
 80049e6:	e006      	b.n	80049f6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	2220      	movs	r2, #32
 80049ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80049f0:	2300      	movs	r3, #0
 80049f2:	e000      	b.n	80049f6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80049f4:	2302      	movs	r3, #2
  }
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	3720      	adds	r7, #32
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}

080049fe <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80049fe:	b580      	push	{r7, lr}
 8004a00:	b090      	sub	sp, #64	; 0x40
 8004a02:	af00      	add	r7, sp, #0
 8004a04:	60f8      	str	r0, [r7, #12]
 8004a06:	60b9      	str	r1, [r7, #8]
 8004a08:	603b      	str	r3, [r7, #0]
 8004a0a:	4613      	mov	r3, r2
 8004a0c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a0e:	e050      	b.n	8004ab2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a16:	d04c      	beq.n	8004ab2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004a18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d007      	beq.n	8004a2e <UART_WaitOnFlagUntilTimeout+0x30>
 8004a1e:	f7fd f961 	bl	8001ce4 <HAL_GetTick>
 8004a22:	4602      	mov	r2, r0
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	1ad3      	subs	r3, r2, r3
 8004a28:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a2a:	429a      	cmp	r2, r3
 8004a2c:	d241      	bcs.n	8004ab2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	330c      	adds	r3, #12
 8004a34:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a38:	e853 3f00 	ldrex	r3, [r3]
 8004a3c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a40:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004a44:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	330c      	adds	r3, #12
 8004a4c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004a4e:	637a      	str	r2, [r7, #52]	; 0x34
 8004a50:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a52:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004a54:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a56:	e841 2300 	strex	r3, r2, [r1]
 8004a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d1e5      	bne.n	8004a2e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	3314      	adds	r3, #20
 8004a68:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	e853 3f00 	ldrex	r3, [r3]
 8004a70:	613b      	str	r3, [r7, #16]
   return(result);
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	f023 0301 	bic.w	r3, r3, #1
 8004a78:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	3314      	adds	r3, #20
 8004a80:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004a82:	623a      	str	r2, [r7, #32]
 8004a84:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a86:	69f9      	ldr	r1, [r7, #28]
 8004a88:	6a3a      	ldr	r2, [r7, #32]
 8004a8a:	e841 2300 	strex	r3, r2, [r1]
 8004a8e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004a90:	69bb      	ldr	r3, [r7, #24]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d1e5      	bne.n	8004a62 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2220      	movs	r2, #32
 8004a9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2220      	movs	r2, #32
 8004aa2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004aae:	2303      	movs	r3, #3
 8004ab0:	e00f      	b.n	8004ad2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	681a      	ldr	r2, [r3, #0]
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	4013      	ands	r3, r2
 8004abc:	68ba      	ldr	r2, [r7, #8]
 8004abe:	429a      	cmp	r2, r3
 8004ac0:	bf0c      	ite	eq
 8004ac2:	2301      	moveq	r3, #1
 8004ac4:	2300      	movne	r3, #0
 8004ac6:	b2db      	uxtb	r3, r3
 8004ac8:	461a      	mov	r2, r3
 8004aca:	79fb      	ldrb	r3, [r7, #7]
 8004acc:	429a      	cmp	r2, r3
 8004ace:	d09f      	beq.n	8004a10 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004ad0:	2300      	movs	r3, #0
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	3740      	adds	r7, #64	; 0x40
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}
	...

08004adc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004adc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ae0:	b0c0      	sub	sp, #256	; 0x100
 8004ae2:	af00      	add	r7, sp, #0
 8004ae4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ae8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	691b      	ldr	r3, [r3, #16]
 8004af0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004af4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004af8:	68d9      	ldr	r1, [r3, #12]
 8004afa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	ea40 0301 	orr.w	r3, r0, r1
 8004b04:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004b06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b0a:	689a      	ldr	r2, [r3, #8]
 8004b0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b10:	691b      	ldr	r3, [r3, #16]
 8004b12:	431a      	orrs	r2, r3
 8004b14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b18:	695b      	ldr	r3, [r3, #20]
 8004b1a:	431a      	orrs	r2, r3
 8004b1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b20:	69db      	ldr	r3, [r3, #28]
 8004b22:	4313      	orrs	r3, r2
 8004b24:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004b28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	68db      	ldr	r3, [r3, #12]
 8004b30:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004b34:	f021 010c 	bic.w	r1, r1, #12
 8004b38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b3c:	681a      	ldr	r2, [r3, #0]
 8004b3e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004b42:	430b      	orrs	r3, r1
 8004b44:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004b46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	695b      	ldr	r3, [r3, #20]
 8004b4e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004b52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b56:	6999      	ldr	r1, [r3, #24]
 8004b58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b5c:	681a      	ldr	r2, [r3, #0]
 8004b5e:	ea40 0301 	orr.w	r3, r0, r1
 8004b62:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004b64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	4b8f      	ldr	r3, [pc, #572]	; (8004da8 <UART_SetConfig+0x2cc>)
 8004b6c:	429a      	cmp	r2, r3
 8004b6e:	d005      	beq.n	8004b7c <UART_SetConfig+0xa0>
 8004b70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b74:	681a      	ldr	r2, [r3, #0]
 8004b76:	4b8d      	ldr	r3, [pc, #564]	; (8004dac <UART_SetConfig+0x2d0>)
 8004b78:	429a      	cmp	r2, r3
 8004b7a:	d104      	bne.n	8004b86 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004b7c:	f7ff fa38 	bl	8003ff0 <HAL_RCC_GetPCLK2Freq>
 8004b80:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004b84:	e003      	b.n	8004b8e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004b86:	f7ff fa1f 	bl	8003fc8 <HAL_RCC_GetPCLK1Freq>
 8004b8a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b92:	69db      	ldr	r3, [r3, #28]
 8004b94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b98:	f040 810c 	bne.w	8004db4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004b9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004ba6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004baa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004bae:	4622      	mov	r2, r4
 8004bb0:	462b      	mov	r3, r5
 8004bb2:	1891      	adds	r1, r2, r2
 8004bb4:	65b9      	str	r1, [r7, #88]	; 0x58
 8004bb6:	415b      	adcs	r3, r3
 8004bb8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004bba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004bbe:	4621      	mov	r1, r4
 8004bc0:	eb12 0801 	adds.w	r8, r2, r1
 8004bc4:	4629      	mov	r1, r5
 8004bc6:	eb43 0901 	adc.w	r9, r3, r1
 8004bca:	f04f 0200 	mov.w	r2, #0
 8004bce:	f04f 0300 	mov.w	r3, #0
 8004bd2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004bd6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004bda:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004bde:	4690      	mov	r8, r2
 8004be0:	4699      	mov	r9, r3
 8004be2:	4623      	mov	r3, r4
 8004be4:	eb18 0303 	adds.w	r3, r8, r3
 8004be8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004bec:	462b      	mov	r3, r5
 8004bee:	eb49 0303 	adc.w	r3, r9, r3
 8004bf2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004bf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004c02:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004c06:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004c0a:	460b      	mov	r3, r1
 8004c0c:	18db      	adds	r3, r3, r3
 8004c0e:	653b      	str	r3, [r7, #80]	; 0x50
 8004c10:	4613      	mov	r3, r2
 8004c12:	eb42 0303 	adc.w	r3, r2, r3
 8004c16:	657b      	str	r3, [r7, #84]	; 0x54
 8004c18:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004c1c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004c20:	f7fb fb36 	bl	8000290 <__aeabi_uldivmod>
 8004c24:	4602      	mov	r2, r0
 8004c26:	460b      	mov	r3, r1
 8004c28:	4b61      	ldr	r3, [pc, #388]	; (8004db0 <UART_SetConfig+0x2d4>)
 8004c2a:	fba3 2302 	umull	r2, r3, r3, r2
 8004c2e:	095b      	lsrs	r3, r3, #5
 8004c30:	011c      	lsls	r4, r3, #4
 8004c32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c36:	2200      	movs	r2, #0
 8004c38:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004c3c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004c40:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004c44:	4642      	mov	r2, r8
 8004c46:	464b      	mov	r3, r9
 8004c48:	1891      	adds	r1, r2, r2
 8004c4a:	64b9      	str	r1, [r7, #72]	; 0x48
 8004c4c:	415b      	adcs	r3, r3
 8004c4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c50:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004c54:	4641      	mov	r1, r8
 8004c56:	eb12 0a01 	adds.w	sl, r2, r1
 8004c5a:	4649      	mov	r1, r9
 8004c5c:	eb43 0b01 	adc.w	fp, r3, r1
 8004c60:	f04f 0200 	mov.w	r2, #0
 8004c64:	f04f 0300 	mov.w	r3, #0
 8004c68:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004c6c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004c70:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004c74:	4692      	mov	sl, r2
 8004c76:	469b      	mov	fp, r3
 8004c78:	4643      	mov	r3, r8
 8004c7a:	eb1a 0303 	adds.w	r3, sl, r3
 8004c7e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004c82:	464b      	mov	r3, r9
 8004c84:	eb4b 0303 	adc.w	r3, fp, r3
 8004c88:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004c8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	2200      	movs	r2, #0
 8004c94:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004c98:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004c9c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004ca0:	460b      	mov	r3, r1
 8004ca2:	18db      	adds	r3, r3, r3
 8004ca4:	643b      	str	r3, [r7, #64]	; 0x40
 8004ca6:	4613      	mov	r3, r2
 8004ca8:	eb42 0303 	adc.w	r3, r2, r3
 8004cac:	647b      	str	r3, [r7, #68]	; 0x44
 8004cae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004cb2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004cb6:	f7fb faeb 	bl	8000290 <__aeabi_uldivmod>
 8004cba:	4602      	mov	r2, r0
 8004cbc:	460b      	mov	r3, r1
 8004cbe:	4611      	mov	r1, r2
 8004cc0:	4b3b      	ldr	r3, [pc, #236]	; (8004db0 <UART_SetConfig+0x2d4>)
 8004cc2:	fba3 2301 	umull	r2, r3, r3, r1
 8004cc6:	095b      	lsrs	r3, r3, #5
 8004cc8:	2264      	movs	r2, #100	; 0x64
 8004cca:	fb02 f303 	mul.w	r3, r2, r3
 8004cce:	1acb      	subs	r3, r1, r3
 8004cd0:	00db      	lsls	r3, r3, #3
 8004cd2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004cd6:	4b36      	ldr	r3, [pc, #216]	; (8004db0 <UART_SetConfig+0x2d4>)
 8004cd8:	fba3 2302 	umull	r2, r3, r3, r2
 8004cdc:	095b      	lsrs	r3, r3, #5
 8004cde:	005b      	lsls	r3, r3, #1
 8004ce0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004ce4:	441c      	add	r4, r3
 8004ce6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004cea:	2200      	movs	r2, #0
 8004cec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004cf0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004cf4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004cf8:	4642      	mov	r2, r8
 8004cfa:	464b      	mov	r3, r9
 8004cfc:	1891      	adds	r1, r2, r2
 8004cfe:	63b9      	str	r1, [r7, #56]	; 0x38
 8004d00:	415b      	adcs	r3, r3
 8004d02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d04:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004d08:	4641      	mov	r1, r8
 8004d0a:	1851      	adds	r1, r2, r1
 8004d0c:	6339      	str	r1, [r7, #48]	; 0x30
 8004d0e:	4649      	mov	r1, r9
 8004d10:	414b      	adcs	r3, r1
 8004d12:	637b      	str	r3, [r7, #52]	; 0x34
 8004d14:	f04f 0200 	mov.w	r2, #0
 8004d18:	f04f 0300 	mov.w	r3, #0
 8004d1c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004d20:	4659      	mov	r1, fp
 8004d22:	00cb      	lsls	r3, r1, #3
 8004d24:	4651      	mov	r1, sl
 8004d26:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d2a:	4651      	mov	r1, sl
 8004d2c:	00ca      	lsls	r2, r1, #3
 8004d2e:	4610      	mov	r0, r2
 8004d30:	4619      	mov	r1, r3
 8004d32:	4603      	mov	r3, r0
 8004d34:	4642      	mov	r2, r8
 8004d36:	189b      	adds	r3, r3, r2
 8004d38:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004d3c:	464b      	mov	r3, r9
 8004d3e:	460a      	mov	r2, r1
 8004d40:	eb42 0303 	adc.w	r3, r2, r3
 8004d44:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004d48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004d54:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004d58:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004d5c:	460b      	mov	r3, r1
 8004d5e:	18db      	adds	r3, r3, r3
 8004d60:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d62:	4613      	mov	r3, r2
 8004d64:	eb42 0303 	adc.w	r3, r2, r3
 8004d68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d6a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004d6e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004d72:	f7fb fa8d 	bl	8000290 <__aeabi_uldivmod>
 8004d76:	4602      	mov	r2, r0
 8004d78:	460b      	mov	r3, r1
 8004d7a:	4b0d      	ldr	r3, [pc, #52]	; (8004db0 <UART_SetConfig+0x2d4>)
 8004d7c:	fba3 1302 	umull	r1, r3, r3, r2
 8004d80:	095b      	lsrs	r3, r3, #5
 8004d82:	2164      	movs	r1, #100	; 0x64
 8004d84:	fb01 f303 	mul.w	r3, r1, r3
 8004d88:	1ad3      	subs	r3, r2, r3
 8004d8a:	00db      	lsls	r3, r3, #3
 8004d8c:	3332      	adds	r3, #50	; 0x32
 8004d8e:	4a08      	ldr	r2, [pc, #32]	; (8004db0 <UART_SetConfig+0x2d4>)
 8004d90:	fba2 2303 	umull	r2, r3, r2, r3
 8004d94:	095b      	lsrs	r3, r3, #5
 8004d96:	f003 0207 	and.w	r2, r3, #7
 8004d9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4422      	add	r2, r4
 8004da2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004da4:	e105      	b.n	8004fb2 <UART_SetConfig+0x4d6>
 8004da6:	bf00      	nop
 8004da8:	40011000 	.word	0x40011000
 8004dac:	40011400 	.word	0x40011400
 8004db0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004db4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004db8:	2200      	movs	r2, #0
 8004dba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004dbe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004dc2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004dc6:	4642      	mov	r2, r8
 8004dc8:	464b      	mov	r3, r9
 8004dca:	1891      	adds	r1, r2, r2
 8004dcc:	6239      	str	r1, [r7, #32]
 8004dce:	415b      	adcs	r3, r3
 8004dd0:	627b      	str	r3, [r7, #36]	; 0x24
 8004dd2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004dd6:	4641      	mov	r1, r8
 8004dd8:	1854      	adds	r4, r2, r1
 8004dda:	4649      	mov	r1, r9
 8004ddc:	eb43 0501 	adc.w	r5, r3, r1
 8004de0:	f04f 0200 	mov.w	r2, #0
 8004de4:	f04f 0300 	mov.w	r3, #0
 8004de8:	00eb      	lsls	r3, r5, #3
 8004dea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004dee:	00e2      	lsls	r2, r4, #3
 8004df0:	4614      	mov	r4, r2
 8004df2:	461d      	mov	r5, r3
 8004df4:	4643      	mov	r3, r8
 8004df6:	18e3      	adds	r3, r4, r3
 8004df8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004dfc:	464b      	mov	r3, r9
 8004dfe:	eb45 0303 	adc.w	r3, r5, r3
 8004e02:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004e06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004e12:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004e16:	f04f 0200 	mov.w	r2, #0
 8004e1a:	f04f 0300 	mov.w	r3, #0
 8004e1e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004e22:	4629      	mov	r1, r5
 8004e24:	008b      	lsls	r3, r1, #2
 8004e26:	4621      	mov	r1, r4
 8004e28:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e2c:	4621      	mov	r1, r4
 8004e2e:	008a      	lsls	r2, r1, #2
 8004e30:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004e34:	f7fb fa2c 	bl	8000290 <__aeabi_uldivmod>
 8004e38:	4602      	mov	r2, r0
 8004e3a:	460b      	mov	r3, r1
 8004e3c:	4b60      	ldr	r3, [pc, #384]	; (8004fc0 <UART_SetConfig+0x4e4>)
 8004e3e:	fba3 2302 	umull	r2, r3, r3, r2
 8004e42:	095b      	lsrs	r3, r3, #5
 8004e44:	011c      	lsls	r4, r3, #4
 8004e46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004e50:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004e54:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004e58:	4642      	mov	r2, r8
 8004e5a:	464b      	mov	r3, r9
 8004e5c:	1891      	adds	r1, r2, r2
 8004e5e:	61b9      	str	r1, [r7, #24]
 8004e60:	415b      	adcs	r3, r3
 8004e62:	61fb      	str	r3, [r7, #28]
 8004e64:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e68:	4641      	mov	r1, r8
 8004e6a:	1851      	adds	r1, r2, r1
 8004e6c:	6139      	str	r1, [r7, #16]
 8004e6e:	4649      	mov	r1, r9
 8004e70:	414b      	adcs	r3, r1
 8004e72:	617b      	str	r3, [r7, #20]
 8004e74:	f04f 0200 	mov.w	r2, #0
 8004e78:	f04f 0300 	mov.w	r3, #0
 8004e7c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004e80:	4659      	mov	r1, fp
 8004e82:	00cb      	lsls	r3, r1, #3
 8004e84:	4651      	mov	r1, sl
 8004e86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e8a:	4651      	mov	r1, sl
 8004e8c:	00ca      	lsls	r2, r1, #3
 8004e8e:	4610      	mov	r0, r2
 8004e90:	4619      	mov	r1, r3
 8004e92:	4603      	mov	r3, r0
 8004e94:	4642      	mov	r2, r8
 8004e96:	189b      	adds	r3, r3, r2
 8004e98:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004e9c:	464b      	mov	r3, r9
 8004e9e:	460a      	mov	r2, r1
 8004ea0:	eb42 0303 	adc.w	r3, r2, r3
 8004ea4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004ea8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	67bb      	str	r3, [r7, #120]	; 0x78
 8004eb2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004eb4:	f04f 0200 	mov.w	r2, #0
 8004eb8:	f04f 0300 	mov.w	r3, #0
 8004ebc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004ec0:	4649      	mov	r1, r9
 8004ec2:	008b      	lsls	r3, r1, #2
 8004ec4:	4641      	mov	r1, r8
 8004ec6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004eca:	4641      	mov	r1, r8
 8004ecc:	008a      	lsls	r2, r1, #2
 8004ece:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004ed2:	f7fb f9dd 	bl	8000290 <__aeabi_uldivmod>
 8004ed6:	4602      	mov	r2, r0
 8004ed8:	460b      	mov	r3, r1
 8004eda:	4b39      	ldr	r3, [pc, #228]	; (8004fc0 <UART_SetConfig+0x4e4>)
 8004edc:	fba3 1302 	umull	r1, r3, r3, r2
 8004ee0:	095b      	lsrs	r3, r3, #5
 8004ee2:	2164      	movs	r1, #100	; 0x64
 8004ee4:	fb01 f303 	mul.w	r3, r1, r3
 8004ee8:	1ad3      	subs	r3, r2, r3
 8004eea:	011b      	lsls	r3, r3, #4
 8004eec:	3332      	adds	r3, #50	; 0x32
 8004eee:	4a34      	ldr	r2, [pc, #208]	; (8004fc0 <UART_SetConfig+0x4e4>)
 8004ef0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ef4:	095b      	lsrs	r3, r3, #5
 8004ef6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004efa:	441c      	add	r4, r3
 8004efc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f00:	2200      	movs	r2, #0
 8004f02:	673b      	str	r3, [r7, #112]	; 0x70
 8004f04:	677a      	str	r2, [r7, #116]	; 0x74
 8004f06:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004f0a:	4642      	mov	r2, r8
 8004f0c:	464b      	mov	r3, r9
 8004f0e:	1891      	adds	r1, r2, r2
 8004f10:	60b9      	str	r1, [r7, #8]
 8004f12:	415b      	adcs	r3, r3
 8004f14:	60fb      	str	r3, [r7, #12]
 8004f16:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004f1a:	4641      	mov	r1, r8
 8004f1c:	1851      	adds	r1, r2, r1
 8004f1e:	6039      	str	r1, [r7, #0]
 8004f20:	4649      	mov	r1, r9
 8004f22:	414b      	adcs	r3, r1
 8004f24:	607b      	str	r3, [r7, #4]
 8004f26:	f04f 0200 	mov.w	r2, #0
 8004f2a:	f04f 0300 	mov.w	r3, #0
 8004f2e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004f32:	4659      	mov	r1, fp
 8004f34:	00cb      	lsls	r3, r1, #3
 8004f36:	4651      	mov	r1, sl
 8004f38:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f3c:	4651      	mov	r1, sl
 8004f3e:	00ca      	lsls	r2, r1, #3
 8004f40:	4610      	mov	r0, r2
 8004f42:	4619      	mov	r1, r3
 8004f44:	4603      	mov	r3, r0
 8004f46:	4642      	mov	r2, r8
 8004f48:	189b      	adds	r3, r3, r2
 8004f4a:	66bb      	str	r3, [r7, #104]	; 0x68
 8004f4c:	464b      	mov	r3, r9
 8004f4e:	460a      	mov	r2, r1
 8004f50:	eb42 0303 	adc.w	r3, r2, r3
 8004f54:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004f56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	663b      	str	r3, [r7, #96]	; 0x60
 8004f60:	667a      	str	r2, [r7, #100]	; 0x64
 8004f62:	f04f 0200 	mov.w	r2, #0
 8004f66:	f04f 0300 	mov.w	r3, #0
 8004f6a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004f6e:	4649      	mov	r1, r9
 8004f70:	008b      	lsls	r3, r1, #2
 8004f72:	4641      	mov	r1, r8
 8004f74:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f78:	4641      	mov	r1, r8
 8004f7a:	008a      	lsls	r2, r1, #2
 8004f7c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004f80:	f7fb f986 	bl	8000290 <__aeabi_uldivmod>
 8004f84:	4602      	mov	r2, r0
 8004f86:	460b      	mov	r3, r1
 8004f88:	4b0d      	ldr	r3, [pc, #52]	; (8004fc0 <UART_SetConfig+0x4e4>)
 8004f8a:	fba3 1302 	umull	r1, r3, r3, r2
 8004f8e:	095b      	lsrs	r3, r3, #5
 8004f90:	2164      	movs	r1, #100	; 0x64
 8004f92:	fb01 f303 	mul.w	r3, r1, r3
 8004f96:	1ad3      	subs	r3, r2, r3
 8004f98:	011b      	lsls	r3, r3, #4
 8004f9a:	3332      	adds	r3, #50	; 0x32
 8004f9c:	4a08      	ldr	r2, [pc, #32]	; (8004fc0 <UART_SetConfig+0x4e4>)
 8004f9e:	fba2 2303 	umull	r2, r3, r2, r3
 8004fa2:	095b      	lsrs	r3, r3, #5
 8004fa4:	f003 020f 	and.w	r2, r3, #15
 8004fa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4422      	add	r2, r4
 8004fb0:	609a      	str	r2, [r3, #8]
}
 8004fb2:	bf00      	nop
 8004fb4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004fbe:	bf00      	nop
 8004fc0:	51eb851f 	.word	0x51eb851f

08004fc4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8004fc8:	4904      	ldr	r1, [pc, #16]	; (8004fdc <MX_FATFS_Init+0x18>)
 8004fca:	4805      	ldr	r0, [pc, #20]	; (8004fe0 <MX_FATFS_Init+0x1c>)
 8004fcc:	f003 fb1c 	bl	8008608 <FATFS_LinkDriver>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	461a      	mov	r2, r3
 8004fd4:	4b03      	ldr	r3, [pc, #12]	; (8004fe4 <MX_FATFS_Init+0x20>)
 8004fd6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8004fd8:	bf00      	nop
 8004fda:	bd80      	pop	{r7, pc}
 8004fdc:	20001478 	.word	0x20001478
 8004fe0:	2000000c 	.word	0x2000000c
 8004fe4:	20001474 	.word	0x20001474

08004fe8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8004fec:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff6:	4770      	bx	lr

08004ff8 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b083      	sub	sp, #12
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	4603      	mov	r3, r0
 8005000:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 8005002:	4b06      	ldr	r3, [pc, #24]	; (800501c <USER_initialize+0x24>)
 8005004:	2201      	movs	r2, #1
 8005006:	701a      	strb	r2, [r3, #0]
    return Stat;
 8005008:	4b04      	ldr	r3, [pc, #16]	; (800501c <USER_initialize+0x24>)
 800500a:	781b      	ldrb	r3, [r3, #0]
 800500c:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 800500e:	4618      	mov	r0, r3
 8005010:	370c      	adds	r7, #12
 8005012:	46bd      	mov	sp, r7
 8005014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005018:	4770      	bx	lr
 800501a:	bf00      	nop
 800501c:	20000009 	.word	0x20000009

08005020 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8005020:	b480      	push	{r7}
 8005022:	b083      	sub	sp, #12
 8005024:	af00      	add	r7, sp, #0
 8005026:	4603      	mov	r3, r0
 8005028:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 800502a:	4b06      	ldr	r3, [pc, #24]	; (8005044 <USER_status+0x24>)
 800502c:	2201      	movs	r2, #1
 800502e:	701a      	strb	r2, [r3, #0]
    return Stat;
 8005030:	4b04      	ldr	r3, [pc, #16]	; (8005044 <USER_status+0x24>)
 8005032:	781b      	ldrb	r3, [r3, #0]
 8005034:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8005036:	4618      	mov	r0, r3
 8005038:	370c      	adds	r7, #12
 800503a:	46bd      	mov	sp, r7
 800503c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005040:	4770      	bx	lr
 8005042:	bf00      	nop
 8005044:	20000009 	.word	0x20000009

08005048 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8005048:	b480      	push	{r7}
 800504a:	b085      	sub	sp, #20
 800504c:	af00      	add	r7, sp, #0
 800504e:	60b9      	str	r1, [r7, #8]
 8005050:	607a      	str	r2, [r7, #4]
 8005052:	603b      	str	r3, [r7, #0]
 8005054:	4603      	mov	r3, r0
 8005056:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 8005058:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 800505a:	4618      	mov	r0, r3
 800505c:	3714      	adds	r7, #20
 800505e:	46bd      	mov	sp, r7
 8005060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005064:	4770      	bx	lr

08005066 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8005066:	b480      	push	{r7}
 8005068:	b085      	sub	sp, #20
 800506a:	af00      	add	r7, sp, #0
 800506c:	60b9      	str	r1, [r7, #8]
 800506e:	607a      	str	r2, [r7, #4]
 8005070:	603b      	str	r3, [r7, #0]
 8005072:	4603      	mov	r3, r0
 8005074:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 8005076:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 8005078:	4618      	mov	r0, r3
 800507a:	3714      	adds	r7, #20
 800507c:	46bd      	mov	sp, r7
 800507e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005082:	4770      	bx	lr

08005084 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8005084:	b480      	push	{r7}
 8005086:	b085      	sub	sp, #20
 8005088:	af00      	add	r7, sp, #0
 800508a:	4603      	mov	r3, r0
 800508c:	603a      	str	r2, [r7, #0]
 800508e:	71fb      	strb	r3, [r7, #7]
 8005090:	460b      	mov	r3, r1
 8005092:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8005094:	2301      	movs	r3, #1
 8005096:	73fb      	strb	r3, [r7, #15]
    return res;
 8005098:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 800509a:	4618      	mov	r0, r3
 800509c:	3714      	adds	r7, #20
 800509e:	46bd      	mov	sp, r7
 80050a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a4:	4770      	bx	lr
	...

080050a8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b084      	sub	sp, #16
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	4603      	mov	r3, r0
 80050b0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80050b2:	79fb      	ldrb	r3, [r7, #7]
 80050b4:	4a08      	ldr	r2, [pc, #32]	; (80050d8 <disk_status+0x30>)
 80050b6:	009b      	lsls	r3, r3, #2
 80050b8:	4413      	add	r3, r2
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	79fa      	ldrb	r2, [r7, #7]
 80050c0:	4905      	ldr	r1, [pc, #20]	; (80050d8 <disk_status+0x30>)
 80050c2:	440a      	add	r2, r1
 80050c4:	7a12      	ldrb	r2, [r2, #8]
 80050c6:	4610      	mov	r0, r2
 80050c8:	4798      	blx	r3
 80050ca:	4603      	mov	r3, r0
 80050cc:	73fb      	strb	r3, [r7, #15]
  return stat;
 80050ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	3710      	adds	r7, #16
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bd80      	pop	{r7, pc}
 80050d8:	200014a4 	.word	0x200014a4

080050dc <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b084      	sub	sp, #16
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	4603      	mov	r3, r0
 80050e4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80050e6:	2300      	movs	r3, #0
 80050e8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80050ea:	79fb      	ldrb	r3, [r7, #7]
 80050ec:	4a0d      	ldr	r2, [pc, #52]	; (8005124 <disk_initialize+0x48>)
 80050ee:	5cd3      	ldrb	r3, [r2, r3]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d111      	bne.n	8005118 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80050f4:	79fb      	ldrb	r3, [r7, #7]
 80050f6:	4a0b      	ldr	r2, [pc, #44]	; (8005124 <disk_initialize+0x48>)
 80050f8:	2101      	movs	r1, #1
 80050fa:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80050fc:	79fb      	ldrb	r3, [r7, #7]
 80050fe:	4a09      	ldr	r2, [pc, #36]	; (8005124 <disk_initialize+0x48>)
 8005100:	009b      	lsls	r3, r3, #2
 8005102:	4413      	add	r3, r2
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	79fa      	ldrb	r2, [r7, #7]
 800510a:	4906      	ldr	r1, [pc, #24]	; (8005124 <disk_initialize+0x48>)
 800510c:	440a      	add	r2, r1
 800510e:	7a12      	ldrb	r2, [r2, #8]
 8005110:	4610      	mov	r0, r2
 8005112:	4798      	blx	r3
 8005114:	4603      	mov	r3, r0
 8005116:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8005118:	7bfb      	ldrb	r3, [r7, #15]
}
 800511a:	4618      	mov	r0, r3
 800511c:	3710      	adds	r7, #16
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}
 8005122:	bf00      	nop
 8005124:	200014a4 	.word	0x200014a4

08005128 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005128:	b590      	push	{r4, r7, lr}
 800512a:	b087      	sub	sp, #28
 800512c:	af00      	add	r7, sp, #0
 800512e:	60b9      	str	r1, [r7, #8]
 8005130:	607a      	str	r2, [r7, #4]
 8005132:	603b      	str	r3, [r7, #0]
 8005134:	4603      	mov	r3, r0
 8005136:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005138:	7bfb      	ldrb	r3, [r7, #15]
 800513a:	4a0a      	ldr	r2, [pc, #40]	; (8005164 <disk_read+0x3c>)
 800513c:	009b      	lsls	r3, r3, #2
 800513e:	4413      	add	r3, r2
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	689c      	ldr	r4, [r3, #8]
 8005144:	7bfb      	ldrb	r3, [r7, #15]
 8005146:	4a07      	ldr	r2, [pc, #28]	; (8005164 <disk_read+0x3c>)
 8005148:	4413      	add	r3, r2
 800514a:	7a18      	ldrb	r0, [r3, #8]
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	687a      	ldr	r2, [r7, #4]
 8005150:	68b9      	ldr	r1, [r7, #8]
 8005152:	47a0      	blx	r4
 8005154:	4603      	mov	r3, r0
 8005156:	75fb      	strb	r3, [r7, #23]
  return res;
 8005158:	7dfb      	ldrb	r3, [r7, #23]
}
 800515a:	4618      	mov	r0, r3
 800515c:	371c      	adds	r7, #28
 800515e:	46bd      	mov	sp, r7
 8005160:	bd90      	pop	{r4, r7, pc}
 8005162:	bf00      	nop
 8005164:	200014a4 	.word	0x200014a4

08005168 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005168:	b590      	push	{r4, r7, lr}
 800516a:	b087      	sub	sp, #28
 800516c:	af00      	add	r7, sp, #0
 800516e:	60b9      	str	r1, [r7, #8]
 8005170:	607a      	str	r2, [r7, #4]
 8005172:	603b      	str	r3, [r7, #0]
 8005174:	4603      	mov	r3, r0
 8005176:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005178:	7bfb      	ldrb	r3, [r7, #15]
 800517a:	4a0a      	ldr	r2, [pc, #40]	; (80051a4 <disk_write+0x3c>)
 800517c:	009b      	lsls	r3, r3, #2
 800517e:	4413      	add	r3, r2
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	68dc      	ldr	r4, [r3, #12]
 8005184:	7bfb      	ldrb	r3, [r7, #15]
 8005186:	4a07      	ldr	r2, [pc, #28]	; (80051a4 <disk_write+0x3c>)
 8005188:	4413      	add	r3, r2
 800518a:	7a18      	ldrb	r0, [r3, #8]
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	687a      	ldr	r2, [r7, #4]
 8005190:	68b9      	ldr	r1, [r7, #8]
 8005192:	47a0      	blx	r4
 8005194:	4603      	mov	r3, r0
 8005196:	75fb      	strb	r3, [r7, #23]
  return res;
 8005198:	7dfb      	ldrb	r3, [r7, #23]
}
 800519a:	4618      	mov	r0, r3
 800519c:	371c      	adds	r7, #28
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd90      	pop	{r4, r7, pc}
 80051a2:	bf00      	nop
 80051a4:	200014a4 	.word	0x200014a4

080051a8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b084      	sub	sp, #16
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	4603      	mov	r3, r0
 80051b0:	603a      	str	r2, [r7, #0]
 80051b2:	71fb      	strb	r3, [r7, #7]
 80051b4:	460b      	mov	r3, r1
 80051b6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80051b8:	79fb      	ldrb	r3, [r7, #7]
 80051ba:	4a09      	ldr	r2, [pc, #36]	; (80051e0 <disk_ioctl+0x38>)
 80051bc:	009b      	lsls	r3, r3, #2
 80051be:	4413      	add	r3, r2
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	691b      	ldr	r3, [r3, #16]
 80051c4:	79fa      	ldrb	r2, [r7, #7]
 80051c6:	4906      	ldr	r1, [pc, #24]	; (80051e0 <disk_ioctl+0x38>)
 80051c8:	440a      	add	r2, r1
 80051ca:	7a10      	ldrb	r0, [r2, #8]
 80051cc:	79b9      	ldrb	r1, [r7, #6]
 80051ce:	683a      	ldr	r2, [r7, #0]
 80051d0:	4798      	blx	r3
 80051d2:	4603      	mov	r3, r0
 80051d4:	73fb      	strb	r3, [r7, #15]
  return res;
 80051d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80051d8:	4618      	mov	r0, r3
 80051da:	3710      	adds	r7, #16
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}
 80051e0:	200014a4 	.word	0x200014a4

080051e4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80051e4:	b480      	push	{r7}
 80051e6:	b085      	sub	sp, #20
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	3301      	adds	r3, #1
 80051f0:	781b      	ldrb	r3, [r3, #0]
 80051f2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80051f4:	89fb      	ldrh	r3, [r7, #14]
 80051f6:	021b      	lsls	r3, r3, #8
 80051f8:	b21a      	sxth	r2, r3
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	781b      	ldrb	r3, [r3, #0]
 80051fe:	b21b      	sxth	r3, r3
 8005200:	4313      	orrs	r3, r2
 8005202:	b21b      	sxth	r3, r3
 8005204:	81fb      	strh	r3, [r7, #14]
	return rv;
 8005206:	89fb      	ldrh	r3, [r7, #14]
}
 8005208:	4618      	mov	r0, r3
 800520a:	3714      	adds	r7, #20
 800520c:	46bd      	mov	sp, r7
 800520e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005212:	4770      	bx	lr

08005214 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8005214:	b480      	push	{r7}
 8005216:	b085      	sub	sp, #20
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	3303      	adds	r3, #3
 8005220:	781b      	ldrb	r3, [r3, #0]
 8005222:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	021b      	lsls	r3, r3, #8
 8005228:	687a      	ldr	r2, [r7, #4]
 800522a:	3202      	adds	r2, #2
 800522c:	7812      	ldrb	r2, [r2, #0]
 800522e:	4313      	orrs	r3, r2
 8005230:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	021b      	lsls	r3, r3, #8
 8005236:	687a      	ldr	r2, [r7, #4]
 8005238:	3201      	adds	r2, #1
 800523a:	7812      	ldrb	r2, [r2, #0]
 800523c:	4313      	orrs	r3, r2
 800523e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	021b      	lsls	r3, r3, #8
 8005244:	687a      	ldr	r2, [r7, #4]
 8005246:	7812      	ldrb	r2, [r2, #0]
 8005248:	4313      	orrs	r3, r2
 800524a:	60fb      	str	r3, [r7, #12]
	return rv;
 800524c:	68fb      	ldr	r3, [r7, #12]
}
 800524e:	4618      	mov	r0, r3
 8005250:	3714      	adds	r7, #20
 8005252:	46bd      	mov	sp, r7
 8005254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005258:	4770      	bx	lr

0800525a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800525a:	b480      	push	{r7}
 800525c:	b083      	sub	sp, #12
 800525e:	af00      	add	r7, sp, #0
 8005260:	6078      	str	r0, [r7, #4]
 8005262:	460b      	mov	r3, r1
 8005264:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	1c5a      	adds	r2, r3, #1
 800526a:	607a      	str	r2, [r7, #4]
 800526c:	887a      	ldrh	r2, [r7, #2]
 800526e:	b2d2      	uxtb	r2, r2
 8005270:	701a      	strb	r2, [r3, #0]
 8005272:	887b      	ldrh	r3, [r7, #2]
 8005274:	0a1b      	lsrs	r3, r3, #8
 8005276:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	1c5a      	adds	r2, r3, #1
 800527c:	607a      	str	r2, [r7, #4]
 800527e:	887a      	ldrh	r2, [r7, #2]
 8005280:	b2d2      	uxtb	r2, r2
 8005282:	701a      	strb	r2, [r3, #0]
}
 8005284:	bf00      	nop
 8005286:	370c      	adds	r7, #12
 8005288:	46bd      	mov	sp, r7
 800528a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528e:	4770      	bx	lr

08005290 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8005290:	b480      	push	{r7}
 8005292:	b083      	sub	sp, #12
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
 8005298:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	1c5a      	adds	r2, r3, #1
 800529e:	607a      	str	r2, [r7, #4]
 80052a0:	683a      	ldr	r2, [r7, #0]
 80052a2:	b2d2      	uxtb	r2, r2
 80052a4:	701a      	strb	r2, [r3, #0]
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	0a1b      	lsrs	r3, r3, #8
 80052aa:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	1c5a      	adds	r2, r3, #1
 80052b0:	607a      	str	r2, [r7, #4]
 80052b2:	683a      	ldr	r2, [r7, #0]
 80052b4:	b2d2      	uxtb	r2, r2
 80052b6:	701a      	strb	r2, [r3, #0]
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	0a1b      	lsrs	r3, r3, #8
 80052bc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	1c5a      	adds	r2, r3, #1
 80052c2:	607a      	str	r2, [r7, #4]
 80052c4:	683a      	ldr	r2, [r7, #0]
 80052c6:	b2d2      	uxtb	r2, r2
 80052c8:	701a      	strb	r2, [r3, #0]
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	0a1b      	lsrs	r3, r3, #8
 80052ce:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	1c5a      	adds	r2, r3, #1
 80052d4:	607a      	str	r2, [r7, #4]
 80052d6:	683a      	ldr	r2, [r7, #0]
 80052d8:	b2d2      	uxtb	r2, r2
 80052da:	701a      	strb	r2, [r3, #0]
}
 80052dc:	bf00      	nop
 80052de:	370c      	adds	r7, #12
 80052e0:	46bd      	mov	sp, r7
 80052e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e6:	4770      	bx	lr

080052e8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80052e8:	b480      	push	{r7}
 80052ea:	b087      	sub	sp, #28
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	60f8      	str	r0, [r7, #12]
 80052f0:	60b9      	str	r1, [r7, #8]
 80052f2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d00d      	beq.n	800531e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8005302:	693a      	ldr	r2, [r7, #16]
 8005304:	1c53      	adds	r3, r2, #1
 8005306:	613b      	str	r3, [r7, #16]
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	1c59      	adds	r1, r3, #1
 800530c:	6179      	str	r1, [r7, #20]
 800530e:	7812      	ldrb	r2, [r2, #0]
 8005310:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	3b01      	subs	r3, #1
 8005316:	607b      	str	r3, [r7, #4]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d1f1      	bne.n	8005302 <mem_cpy+0x1a>
	}
}
 800531e:	bf00      	nop
 8005320:	371c      	adds	r7, #28
 8005322:	46bd      	mov	sp, r7
 8005324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005328:	4770      	bx	lr

0800532a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800532a:	b480      	push	{r7}
 800532c:	b087      	sub	sp, #28
 800532e:	af00      	add	r7, sp, #0
 8005330:	60f8      	str	r0, [r7, #12]
 8005332:	60b9      	str	r1, [r7, #8]
 8005334:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	1c5a      	adds	r2, r3, #1
 800533e:	617a      	str	r2, [r7, #20]
 8005340:	68ba      	ldr	r2, [r7, #8]
 8005342:	b2d2      	uxtb	r2, r2
 8005344:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	3b01      	subs	r3, #1
 800534a:	607b      	str	r3, [r7, #4]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d1f3      	bne.n	800533a <mem_set+0x10>
}
 8005352:	bf00      	nop
 8005354:	bf00      	nop
 8005356:	371c      	adds	r7, #28
 8005358:	46bd      	mov	sp, r7
 800535a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535e:	4770      	bx	lr

08005360 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8005360:	b480      	push	{r7}
 8005362:	b089      	sub	sp, #36	; 0x24
 8005364:	af00      	add	r7, sp, #0
 8005366:	60f8      	str	r0, [r7, #12]
 8005368:	60b9      	str	r1, [r7, #8]
 800536a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	61fb      	str	r3, [r7, #28]
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8005374:	2300      	movs	r3, #0
 8005376:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8005378:	69fb      	ldr	r3, [r7, #28]
 800537a:	1c5a      	adds	r2, r3, #1
 800537c:	61fa      	str	r2, [r7, #28]
 800537e:	781b      	ldrb	r3, [r3, #0]
 8005380:	4619      	mov	r1, r3
 8005382:	69bb      	ldr	r3, [r7, #24]
 8005384:	1c5a      	adds	r2, r3, #1
 8005386:	61ba      	str	r2, [r7, #24]
 8005388:	781b      	ldrb	r3, [r3, #0]
 800538a:	1acb      	subs	r3, r1, r3
 800538c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	3b01      	subs	r3, #1
 8005392:	607b      	str	r3, [r7, #4]
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d002      	beq.n	80053a0 <mem_cmp+0x40>
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d0eb      	beq.n	8005378 <mem_cmp+0x18>

	return r;
 80053a0:	697b      	ldr	r3, [r7, #20]
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	3724      	adds	r7, #36	; 0x24
 80053a6:	46bd      	mov	sp, r7
 80053a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ac:	4770      	bx	lr

080053ae <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80053ae:	b480      	push	{r7}
 80053b0:	b083      	sub	sp, #12
 80053b2:	af00      	add	r7, sp, #0
 80053b4:	6078      	str	r0, [r7, #4]
 80053b6:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80053b8:	e002      	b.n	80053c0 <chk_chr+0x12>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	3301      	adds	r3, #1
 80053be:	607b      	str	r3, [r7, #4]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	781b      	ldrb	r3, [r3, #0]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d005      	beq.n	80053d4 <chk_chr+0x26>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	781b      	ldrb	r3, [r3, #0]
 80053cc:	461a      	mov	r2, r3
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d1f2      	bne.n	80053ba <chk_chr+0xc>
	return *str;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	781b      	ldrb	r3, [r3, #0]
}
 80053d8:	4618      	mov	r0, r3
 80053da:	370c      	adds	r7, #12
 80053dc:	46bd      	mov	sp, r7
 80053de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e2:	4770      	bx	lr

080053e4 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b082      	sub	sp, #8
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d009      	beq.n	8005406 <lock_fs+0x22>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	695b      	ldr	r3, [r3, #20]
 80053f6:	4618      	mov	r0, r3
 80053f8:	f003 fa03 	bl	8008802 <ff_req_grant>
 80053fc:	4603      	mov	r3, r0
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d001      	beq.n	8005406 <lock_fs+0x22>
 8005402:	2301      	movs	r3, #1
 8005404:	e000      	b.n	8005408 <lock_fs+0x24>
 8005406:	2300      	movs	r3, #0
}
 8005408:	4618      	mov	r0, r3
 800540a:	3708      	adds	r7, #8
 800540c:	46bd      	mov	sp, r7
 800540e:	bd80      	pop	{r7, pc}

08005410 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b082      	sub	sp, #8
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
 8005418:	460b      	mov	r3, r1
 800541a:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d00d      	beq.n	800543e <unlock_fs+0x2e>
 8005422:	78fb      	ldrb	r3, [r7, #3]
 8005424:	2b0c      	cmp	r3, #12
 8005426:	d00a      	beq.n	800543e <unlock_fs+0x2e>
 8005428:	78fb      	ldrb	r3, [r7, #3]
 800542a:	2b0b      	cmp	r3, #11
 800542c:	d007      	beq.n	800543e <unlock_fs+0x2e>
 800542e:	78fb      	ldrb	r3, [r7, #3]
 8005430:	2b0f      	cmp	r3, #15
 8005432:	d004      	beq.n	800543e <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	695b      	ldr	r3, [r3, #20]
 8005438:	4618      	mov	r0, r3
 800543a:	f003 f9f7 	bl	800882c <ff_rel_grant>
	}
}
 800543e:	bf00      	nop
 8005440:	3708      	adds	r7, #8
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}
	...

08005448 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005448:	b480      	push	{r7}
 800544a:	b085      	sub	sp, #20
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
 8005450:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005452:	2300      	movs	r3, #0
 8005454:	60bb      	str	r3, [r7, #8]
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	60fb      	str	r3, [r7, #12]
 800545a:	e029      	b.n	80054b0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800545c:	4a27      	ldr	r2, [pc, #156]	; (80054fc <chk_lock+0xb4>)
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	011b      	lsls	r3, r3, #4
 8005462:	4413      	add	r3, r2
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d01d      	beq.n	80054a6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800546a:	4a24      	ldr	r2, [pc, #144]	; (80054fc <chk_lock+0xb4>)
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	011b      	lsls	r3, r3, #4
 8005470:	4413      	add	r3, r2
 8005472:	681a      	ldr	r2, [r3, #0]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	429a      	cmp	r2, r3
 800547a:	d116      	bne.n	80054aa <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800547c:	4a1f      	ldr	r2, [pc, #124]	; (80054fc <chk_lock+0xb4>)
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	011b      	lsls	r3, r3, #4
 8005482:	4413      	add	r3, r2
 8005484:	3304      	adds	r3, #4
 8005486:	681a      	ldr	r2, [r3, #0]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800548c:	429a      	cmp	r2, r3
 800548e:	d10c      	bne.n	80054aa <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005490:	4a1a      	ldr	r2, [pc, #104]	; (80054fc <chk_lock+0xb4>)
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	011b      	lsls	r3, r3, #4
 8005496:	4413      	add	r3, r2
 8005498:	3308      	adds	r3, #8
 800549a:	681a      	ldr	r2, [r3, #0]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80054a0:	429a      	cmp	r2, r3
 80054a2:	d102      	bne.n	80054aa <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80054a4:	e007      	b.n	80054b6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80054a6:	2301      	movs	r3, #1
 80054a8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	3301      	adds	r3, #1
 80054ae:	60fb      	str	r3, [r7, #12]
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	2b01      	cmp	r3, #1
 80054b4:	d9d2      	bls.n	800545c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	2b02      	cmp	r3, #2
 80054ba:	d109      	bne.n	80054d0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d102      	bne.n	80054c8 <chk_lock+0x80>
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	2b02      	cmp	r3, #2
 80054c6:	d101      	bne.n	80054cc <chk_lock+0x84>
 80054c8:	2300      	movs	r3, #0
 80054ca:	e010      	b.n	80054ee <chk_lock+0xa6>
 80054cc:	2312      	movs	r3, #18
 80054ce:	e00e      	b.n	80054ee <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d108      	bne.n	80054e8 <chk_lock+0xa0>
 80054d6:	4a09      	ldr	r2, [pc, #36]	; (80054fc <chk_lock+0xb4>)
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	011b      	lsls	r3, r3, #4
 80054dc:	4413      	add	r3, r2
 80054de:	330c      	adds	r3, #12
 80054e0:	881b      	ldrh	r3, [r3, #0]
 80054e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054e6:	d101      	bne.n	80054ec <chk_lock+0xa4>
 80054e8:	2310      	movs	r3, #16
 80054ea:	e000      	b.n	80054ee <chk_lock+0xa6>
 80054ec:	2300      	movs	r3, #0
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	3714      	adds	r7, #20
 80054f2:	46bd      	mov	sp, r7
 80054f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f8:	4770      	bx	lr
 80054fa:	bf00      	nop
 80054fc:	20001484 	.word	0x20001484

08005500 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8005500:	b480      	push	{r7}
 8005502:	b083      	sub	sp, #12
 8005504:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005506:	2300      	movs	r3, #0
 8005508:	607b      	str	r3, [r7, #4]
 800550a:	e002      	b.n	8005512 <enq_lock+0x12>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	3301      	adds	r3, #1
 8005510:	607b      	str	r3, [r7, #4]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2b01      	cmp	r3, #1
 8005516:	d806      	bhi.n	8005526 <enq_lock+0x26>
 8005518:	4a09      	ldr	r2, [pc, #36]	; (8005540 <enq_lock+0x40>)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	011b      	lsls	r3, r3, #4
 800551e:	4413      	add	r3, r2
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d1f2      	bne.n	800550c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2b02      	cmp	r3, #2
 800552a:	bf14      	ite	ne
 800552c:	2301      	movne	r3, #1
 800552e:	2300      	moveq	r3, #0
 8005530:	b2db      	uxtb	r3, r3
}
 8005532:	4618      	mov	r0, r3
 8005534:	370c      	adds	r7, #12
 8005536:	46bd      	mov	sp, r7
 8005538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553c:	4770      	bx	lr
 800553e:	bf00      	nop
 8005540:	20001484 	.word	0x20001484

08005544 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005544:	b480      	push	{r7}
 8005546:	b085      	sub	sp, #20
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
 800554c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800554e:	2300      	movs	r3, #0
 8005550:	60fb      	str	r3, [r7, #12]
 8005552:	e01f      	b.n	8005594 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8005554:	4a41      	ldr	r2, [pc, #260]	; (800565c <inc_lock+0x118>)
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	011b      	lsls	r3, r3, #4
 800555a:	4413      	add	r3, r2
 800555c:	681a      	ldr	r2, [r3, #0]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	429a      	cmp	r2, r3
 8005564:	d113      	bne.n	800558e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8005566:	4a3d      	ldr	r2, [pc, #244]	; (800565c <inc_lock+0x118>)
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	011b      	lsls	r3, r3, #4
 800556c:	4413      	add	r3, r2
 800556e:	3304      	adds	r3, #4
 8005570:	681a      	ldr	r2, [r3, #0]
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8005576:	429a      	cmp	r2, r3
 8005578:	d109      	bne.n	800558e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800557a:	4a38      	ldr	r2, [pc, #224]	; (800565c <inc_lock+0x118>)
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	011b      	lsls	r3, r3, #4
 8005580:	4413      	add	r3, r2
 8005582:	3308      	adds	r3, #8
 8005584:	681a      	ldr	r2, [r3, #0]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800558a:	429a      	cmp	r2, r3
 800558c:	d006      	beq.n	800559c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	3301      	adds	r3, #1
 8005592:	60fb      	str	r3, [r7, #12]
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	2b01      	cmp	r3, #1
 8005598:	d9dc      	bls.n	8005554 <inc_lock+0x10>
 800559a:	e000      	b.n	800559e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800559c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	2b02      	cmp	r3, #2
 80055a2:	d132      	bne.n	800560a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80055a4:	2300      	movs	r3, #0
 80055a6:	60fb      	str	r3, [r7, #12]
 80055a8:	e002      	b.n	80055b0 <inc_lock+0x6c>
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	3301      	adds	r3, #1
 80055ae:	60fb      	str	r3, [r7, #12]
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	2b01      	cmp	r3, #1
 80055b4:	d806      	bhi.n	80055c4 <inc_lock+0x80>
 80055b6:	4a29      	ldr	r2, [pc, #164]	; (800565c <inc_lock+0x118>)
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	011b      	lsls	r3, r3, #4
 80055bc:	4413      	add	r3, r2
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d1f2      	bne.n	80055aa <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	2b02      	cmp	r3, #2
 80055c8:	d101      	bne.n	80055ce <inc_lock+0x8a>
 80055ca:	2300      	movs	r3, #0
 80055cc:	e040      	b.n	8005650 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681a      	ldr	r2, [r3, #0]
 80055d2:	4922      	ldr	r1, [pc, #136]	; (800565c <inc_lock+0x118>)
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	011b      	lsls	r3, r3, #4
 80055d8:	440b      	add	r3, r1
 80055da:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	689a      	ldr	r2, [r3, #8]
 80055e0:	491e      	ldr	r1, [pc, #120]	; (800565c <inc_lock+0x118>)
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	011b      	lsls	r3, r3, #4
 80055e6:	440b      	add	r3, r1
 80055e8:	3304      	adds	r3, #4
 80055ea:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	695a      	ldr	r2, [r3, #20]
 80055f0:	491a      	ldr	r1, [pc, #104]	; (800565c <inc_lock+0x118>)
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	011b      	lsls	r3, r3, #4
 80055f6:	440b      	add	r3, r1
 80055f8:	3308      	adds	r3, #8
 80055fa:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80055fc:	4a17      	ldr	r2, [pc, #92]	; (800565c <inc_lock+0x118>)
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	011b      	lsls	r3, r3, #4
 8005602:	4413      	add	r3, r2
 8005604:	330c      	adds	r3, #12
 8005606:	2200      	movs	r2, #0
 8005608:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d009      	beq.n	8005624 <inc_lock+0xe0>
 8005610:	4a12      	ldr	r2, [pc, #72]	; (800565c <inc_lock+0x118>)
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	011b      	lsls	r3, r3, #4
 8005616:	4413      	add	r3, r2
 8005618:	330c      	adds	r3, #12
 800561a:	881b      	ldrh	r3, [r3, #0]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d001      	beq.n	8005624 <inc_lock+0xe0>
 8005620:	2300      	movs	r3, #0
 8005622:	e015      	b.n	8005650 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d108      	bne.n	800563c <inc_lock+0xf8>
 800562a:	4a0c      	ldr	r2, [pc, #48]	; (800565c <inc_lock+0x118>)
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	011b      	lsls	r3, r3, #4
 8005630:	4413      	add	r3, r2
 8005632:	330c      	adds	r3, #12
 8005634:	881b      	ldrh	r3, [r3, #0]
 8005636:	3301      	adds	r3, #1
 8005638:	b29a      	uxth	r2, r3
 800563a:	e001      	b.n	8005640 <inc_lock+0xfc>
 800563c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005640:	4906      	ldr	r1, [pc, #24]	; (800565c <inc_lock+0x118>)
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	011b      	lsls	r3, r3, #4
 8005646:	440b      	add	r3, r1
 8005648:	330c      	adds	r3, #12
 800564a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	3301      	adds	r3, #1
}
 8005650:	4618      	mov	r0, r3
 8005652:	3714      	adds	r7, #20
 8005654:	46bd      	mov	sp, r7
 8005656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565a:	4770      	bx	lr
 800565c:	20001484 	.word	0x20001484

08005660 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8005660:	b480      	push	{r7}
 8005662:	b085      	sub	sp, #20
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	3b01      	subs	r3, #1
 800566c:	607b      	str	r3, [r7, #4]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2b01      	cmp	r3, #1
 8005672:	d825      	bhi.n	80056c0 <dec_lock+0x60>
		n = Files[i].ctr;
 8005674:	4a17      	ldr	r2, [pc, #92]	; (80056d4 <dec_lock+0x74>)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	011b      	lsls	r3, r3, #4
 800567a:	4413      	add	r3, r2
 800567c:	330c      	adds	r3, #12
 800567e:	881b      	ldrh	r3, [r3, #0]
 8005680:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8005682:	89fb      	ldrh	r3, [r7, #14]
 8005684:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005688:	d101      	bne.n	800568e <dec_lock+0x2e>
 800568a:	2300      	movs	r3, #0
 800568c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800568e:	89fb      	ldrh	r3, [r7, #14]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d002      	beq.n	800569a <dec_lock+0x3a>
 8005694:	89fb      	ldrh	r3, [r7, #14]
 8005696:	3b01      	subs	r3, #1
 8005698:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800569a:	4a0e      	ldr	r2, [pc, #56]	; (80056d4 <dec_lock+0x74>)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	011b      	lsls	r3, r3, #4
 80056a0:	4413      	add	r3, r2
 80056a2:	330c      	adds	r3, #12
 80056a4:	89fa      	ldrh	r2, [r7, #14]
 80056a6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80056a8:	89fb      	ldrh	r3, [r7, #14]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d105      	bne.n	80056ba <dec_lock+0x5a>
 80056ae:	4a09      	ldr	r2, [pc, #36]	; (80056d4 <dec_lock+0x74>)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	011b      	lsls	r3, r3, #4
 80056b4:	4413      	add	r3, r2
 80056b6:	2200      	movs	r2, #0
 80056b8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80056ba:	2300      	movs	r3, #0
 80056bc:	737b      	strb	r3, [r7, #13]
 80056be:	e001      	b.n	80056c4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80056c0:	2302      	movs	r3, #2
 80056c2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80056c4:	7b7b      	ldrb	r3, [r7, #13]
}
 80056c6:	4618      	mov	r0, r3
 80056c8:	3714      	adds	r7, #20
 80056ca:	46bd      	mov	sp, r7
 80056cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d0:	4770      	bx	lr
 80056d2:	bf00      	nop
 80056d4:	20001484 	.word	0x20001484

080056d8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80056d8:	b480      	push	{r7}
 80056da:	b085      	sub	sp, #20
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80056e0:	2300      	movs	r3, #0
 80056e2:	60fb      	str	r3, [r7, #12]
 80056e4:	e010      	b.n	8005708 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80056e6:	4a0d      	ldr	r2, [pc, #52]	; (800571c <clear_lock+0x44>)
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	011b      	lsls	r3, r3, #4
 80056ec:	4413      	add	r3, r2
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	687a      	ldr	r2, [r7, #4]
 80056f2:	429a      	cmp	r2, r3
 80056f4:	d105      	bne.n	8005702 <clear_lock+0x2a>
 80056f6:	4a09      	ldr	r2, [pc, #36]	; (800571c <clear_lock+0x44>)
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	011b      	lsls	r3, r3, #4
 80056fc:	4413      	add	r3, r2
 80056fe:	2200      	movs	r2, #0
 8005700:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	3301      	adds	r3, #1
 8005706:	60fb      	str	r3, [r7, #12]
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	2b01      	cmp	r3, #1
 800570c:	d9eb      	bls.n	80056e6 <clear_lock+0xe>
	}
}
 800570e:	bf00      	nop
 8005710:	bf00      	nop
 8005712:	3714      	adds	r7, #20
 8005714:	46bd      	mov	sp, r7
 8005716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571a:	4770      	bx	lr
 800571c:	20001484 	.word	0x20001484

08005720 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b086      	sub	sp, #24
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8005728:	2300      	movs	r3, #0
 800572a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	78db      	ldrb	r3, [r3, #3]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d034      	beq.n	800579e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005738:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	7858      	ldrb	r0, [r3, #1]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8005744:	2301      	movs	r3, #1
 8005746:	697a      	ldr	r2, [r7, #20]
 8005748:	f7ff fd0e 	bl	8005168 <disk_write>
 800574c:	4603      	mov	r3, r0
 800574e:	2b00      	cmp	r3, #0
 8005750:	d002      	beq.n	8005758 <sync_window+0x38>
			res = FR_DISK_ERR;
 8005752:	2301      	movs	r3, #1
 8005754:	73fb      	strb	r3, [r7, #15]
 8005756:	e022      	b.n	800579e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2200      	movs	r2, #0
 800575c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005762:	697a      	ldr	r2, [r7, #20]
 8005764:	1ad2      	subs	r2, r2, r3
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800576a:	429a      	cmp	r2, r3
 800576c:	d217      	bcs.n	800579e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	789b      	ldrb	r3, [r3, #2]
 8005772:	613b      	str	r3, [r7, #16]
 8005774:	e010      	b.n	8005798 <sync_window+0x78>
					wsect += fs->fsize;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800577a:	697a      	ldr	r2, [r7, #20]
 800577c:	4413      	add	r3, r2
 800577e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	7858      	ldrb	r0, [r3, #1]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800578a:	2301      	movs	r3, #1
 800578c:	697a      	ldr	r2, [r7, #20]
 800578e:	f7ff fceb 	bl	8005168 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005792:	693b      	ldr	r3, [r7, #16]
 8005794:	3b01      	subs	r3, #1
 8005796:	613b      	str	r3, [r7, #16]
 8005798:	693b      	ldr	r3, [r7, #16]
 800579a:	2b01      	cmp	r3, #1
 800579c:	d8eb      	bhi.n	8005776 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800579e:	7bfb      	ldrb	r3, [r7, #15]
}
 80057a0:	4618      	mov	r0, r3
 80057a2:	3718      	adds	r7, #24
 80057a4:	46bd      	mov	sp, r7
 80057a6:	bd80      	pop	{r7, pc}

080057a8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b084      	sub	sp, #16
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
 80057b0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80057b2:	2300      	movs	r3, #0
 80057b4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ba:	683a      	ldr	r2, [r7, #0]
 80057bc:	429a      	cmp	r2, r3
 80057be:	d01b      	beq.n	80057f8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80057c0:	6878      	ldr	r0, [r7, #4]
 80057c2:	f7ff ffad 	bl	8005720 <sync_window>
 80057c6:	4603      	mov	r3, r0
 80057c8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80057ca:	7bfb      	ldrb	r3, [r7, #15]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d113      	bne.n	80057f8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	7858      	ldrb	r0, [r3, #1]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80057da:	2301      	movs	r3, #1
 80057dc:	683a      	ldr	r2, [r7, #0]
 80057de:	f7ff fca3 	bl	8005128 <disk_read>
 80057e2:	4603      	mov	r3, r0
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d004      	beq.n	80057f2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80057e8:	f04f 33ff 	mov.w	r3, #4294967295
 80057ec:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80057ee:	2301      	movs	r3, #1
 80057f0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	683a      	ldr	r2, [r7, #0]
 80057f6:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
	return res;
 80057f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80057fa:	4618      	mov	r0, r3
 80057fc:	3710      	adds	r7, #16
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}
	...

08005804 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b084      	sub	sp, #16
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800580c:	6878      	ldr	r0, [r7, #4]
 800580e:	f7ff ff87 	bl	8005720 <sync_window>
 8005812:	4603      	mov	r3, r0
 8005814:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8005816:	7bfb      	ldrb	r3, [r7, #15]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d159      	bne.n	80058d0 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	781b      	ldrb	r3, [r3, #0]
 8005820:	2b03      	cmp	r3, #3
 8005822:	d149      	bne.n	80058b8 <sync_fs+0xb4>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	791b      	ldrb	r3, [r3, #4]
 8005828:	2b01      	cmp	r3, #1
 800582a:	d145      	bne.n	80058b8 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	899b      	ldrh	r3, [r3, #12]
 8005836:	461a      	mov	r2, r3
 8005838:	2100      	movs	r1, #0
 800583a:	f7ff fd76 	bl	800532a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	333c      	adds	r3, #60	; 0x3c
 8005842:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005846:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800584a:	4618      	mov	r0, r3
 800584c:	f7ff fd05 	bl	800525a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	333c      	adds	r3, #60	; 0x3c
 8005854:	4921      	ldr	r1, [pc, #132]	; (80058dc <sync_fs+0xd8>)
 8005856:	4618      	mov	r0, r3
 8005858:	f7ff fd1a 	bl	8005290 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	333c      	adds	r3, #60	; 0x3c
 8005860:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8005864:	491e      	ldr	r1, [pc, #120]	; (80058e0 <sync_fs+0xdc>)
 8005866:	4618      	mov	r0, r3
 8005868:	f7ff fd12 	bl	8005290 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	333c      	adds	r3, #60	; 0x3c
 8005870:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	69db      	ldr	r3, [r3, #28]
 8005878:	4619      	mov	r1, r3
 800587a:	4610      	mov	r0, r2
 800587c:	f7ff fd08 	bl	8005290 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	333c      	adds	r3, #60	; 0x3c
 8005884:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	699b      	ldr	r3, [r3, #24]
 800588c:	4619      	mov	r1, r3
 800588e:	4610      	mov	r0, r2
 8005890:	f7ff fcfe 	bl	8005290 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005898:	1c5a      	adds	r2, r3, #1
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	639a      	str	r2, [r3, #56]	; 0x38
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	7858      	ldrb	r0, [r3, #1]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058ac:	2301      	movs	r3, #1
 80058ae:	f7ff fc5b 	bl	8005168 <disk_write>
			fs->fsi_flag = 0;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2200      	movs	r2, #0
 80058b6:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	785b      	ldrb	r3, [r3, #1]
 80058bc:	2200      	movs	r2, #0
 80058be:	2100      	movs	r1, #0
 80058c0:	4618      	mov	r0, r3
 80058c2:	f7ff fc71 	bl	80051a8 <disk_ioctl>
 80058c6:	4603      	mov	r3, r0
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d001      	beq.n	80058d0 <sync_fs+0xcc>
 80058cc:	2301      	movs	r3, #1
 80058ce:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80058d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80058d2:	4618      	mov	r0, r3
 80058d4:	3710      	adds	r7, #16
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}
 80058da:	bf00      	nop
 80058dc:	41615252 	.word	0x41615252
 80058e0:	61417272 	.word	0x61417272

080058e4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80058e4:	b480      	push	{r7}
 80058e6:	b083      	sub	sp, #12
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
 80058ec:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	3b02      	subs	r3, #2
 80058f2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6a1b      	ldr	r3, [r3, #32]
 80058f8:	3b02      	subs	r3, #2
 80058fa:	683a      	ldr	r2, [r7, #0]
 80058fc:	429a      	cmp	r2, r3
 80058fe:	d301      	bcc.n	8005904 <clust2sect+0x20>
 8005900:	2300      	movs	r3, #0
 8005902:	e008      	b.n	8005916 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	895b      	ldrh	r3, [r3, #10]
 8005908:	461a      	mov	r2, r3
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	fb03 f202 	mul.w	r2, r3, r2
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005914:	4413      	add	r3, r2
}
 8005916:	4618      	mov	r0, r3
 8005918:	370c      	adds	r7, #12
 800591a:	46bd      	mov	sp, r7
 800591c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005920:	4770      	bx	lr

08005922 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8005922:	b580      	push	{r7, lr}
 8005924:	b086      	sub	sp, #24
 8005926:	af00      	add	r7, sp, #0
 8005928:	6078      	str	r0, [r7, #4]
 800592a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	2b01      	cmp	r3, #1
 8005936:	d904      	bls.n	8005942 <get_fat+0x20>
 8005938:	693b      	ldr	r3, [r7, #16]
 800593a:	6a1b      	ldr	r3, [r3, #32]
 800593c:	683a      	ldr	r2, [r7, #0]
 800593e:	429a      	cmp	r2, r3
 8005940:	d302      	bcc.n	8005948 <get_fat+0x26>
		val = 1;	/* Internal error */
 8005942:	2301      	movs	r3, #1
 8005944:	617b      	str	r3, [r7, #20]
 8005946:	e0bb      	b.n	8005ac0 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005948:	f04f 33ff 	mov.w	r3, #4294967295
 800594c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	781b      	ldrb	r3, [r3, #0]
 8005952:	2b03      	cmp	r3, #3
 8005954:	f000 8083 	beq.w	8005a5e <get_fat+0x13c>
 8005958:	2b03      	cmp	r3, #3
 800595a:	f300 80a7 	bgt.w	8005aac <get_fat+0x18a>
 800595e:	2b01      	cmp	r3, #1
 8005960:	d002      	beq.n	8005968 <get_fat+0x46>
 8005962:	2b02      	cmp	r3, #2
 8005964:	d056      	beq.n	8005a14 <get_fat+0xf2>
 8005966:	e0a1      	b.n	8005aac <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	60fb      	str	r3, [r7, #12]
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	085b      	lsrs	r3, r3, #1
 8005970:	68fa      	ldr	r2, [r7, #12]
 8005972:	4413      	add	r3, r2
 8005974:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800597a:	693b      	ldr	r3, [r7, #16]
 800597c:	899b      	ldrh	r3, [r3, #12]
 800597e:	4619      	mov	r1, r3
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	fbb3 f3f1 	udiv	r3, r3, r1
 8005986:	4413      	add	r3, r2
 8005988:	4619      	mov	r1, r3
 800598a:	6938      	ldr	r0, [r7, #16]
 800598c:	f7ff ff0c 	bl	80057a8 <move_window>
 8005990:	4603      	mov	r3, r0
 8005992:	2b00      	cmp	r3, #0
 8005994:	f040 808d 	bne.w	8005ab2 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	1c5a      	adds	r2, r3, #1
 800599c:	60fa      	str	r2, [r7, #12]
 800599e:	693a      	ldr	r2, [r7, #16]
 80059a0:	8992      	ldrh	r2, [r2, #12]
 80059a2:	fbb3 f1f2 	udiv	r1, r3, r2
 80059a6:	fb01 f202 	mul.w	r2, r1, r2
 80059aa:	1a9b      	subs	r3, r3, r2
 80059ac:	693a      	ldr	r2, [r7, #16]
 80059ae:	4413      	add	r3, r2
 80059b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059b4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80059b6:	693b      	ldr	r3, [r7, #16]
 80059b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	899b      	ldrh	r3, [r3, #12]
 80059be:	4619      	mov	r1, r3
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80059c6:	4413      	add	r3, r2
 80059c8:	4619      	mov	r1, r3
 80059ca:	6938      	ldr	r0, [r7, #16]
 80059cc:	f7ff feec 	bl	80057a8 <move_window>
 80059d0:	4603      	mov	r3, r0
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d16f      	bne.n	8005ab6 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	899b      	ldrh	r3, [r3, #12]
 80059da:	461a      	mov	r2, r3
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	fbb3 f1f2 	udiv	r1, r3, r2
 80059e2:	fb01 f202 	mul.w	r2, r1, r2
 80059e6:	1a9b      	subs	r3, r3, r2
 80059e8:	693a      	ldr	r2, [r7, #16]
 80059ea:	4413      	add	r3, r2
 80059ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059f0:	021b      	lsls	r3, r3, #8
 80059f2:	461a      	mov	r2, r3
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	4313      	orrs	r3, r2
 80059f8:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	f003 0301 	and.w	r3, r3, #1
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d002      	beq.n	8005a0a <get_fat+0xe8>
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	091b      	lsrs	r3, r3, #4
 8005a08:	e002      	b.n	8005a10 <get_fat+0xee>
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a10:	617b      	str	r3, [r7, #20]
			break;
 8005a12:	e055      	b.n	8005ac0 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005a14:	693b      	ldr	r3, [r7, #16]
 8005a16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a18:	693b      	ldr	r3, [r7, #16]
 8005a1a:	899b      	ldrh	r3, [r3, #12]
 8005a1c:	085b      	lsrs	r3, r3, #1
 8005a1e:	b29b      	uxth	r3, r3
 8005a20:	4619      	mov	r1, r3
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	fbb3 f3f1 	udiv	r3, r3, r1
 8005a28:	4413      	add	r3, r2
 8005a2a:	4619      	mov	r1, r3
 8005a2c:	6938      	ldr	r0, [r7, #16]
 8005a2e:	f7ff febb 	bl	80057a8 <move_window>
 8005a32:	4603      	mov	r3, r0
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d140      	bne.n	8005aba <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8005a38:	693b      	ldr	r3, [r7, #16]
 8005a3a:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	005b      	lsls	r3, r3, #1
 8005a42:	693a      	ldr	r2, [r7, #16]
 8005a44:	8992      	ldrh	r2, [r2, #12]
 8005a46:	fbb3 f0f2 	udiv	r0, r3, r2
 8005a4a:	fb00 f202 	mul.w	r2, r0, r2
 8005a4e:	1a9b      	subs	r3, r3, r2
 8005a50:	440b      	add	r3, r1
 8005a52:	4618      	mov	r0, r3
 8005a54:	f7ff fbc6 	bl	80051e4 <ld_word>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	617b      	str	r3, [r7, #20]
			break;
 8005a5c:	e030      	b.n	8005ac0 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005a5e:	693b      	ldr	r3, [r7, #16]
 8005a60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a62:	693b      	ldr	r3, [r7, #16]
 8005a64:	899b      	ldrh	r3, [r3, #12]
 8005a66:	089b      	lsrs	r3, r3, #2
 8005a68:	b29b      	uxth	r3, r3
 8005a6a:	4619      	mov	r1, r3
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005a72:	4413      	add	r3, r2
 8005a74:	4619      	mov	r1, r3
 8005a76:	6938      	ldr	r0, [r7, #16]
 8005a78:	f7ff fe96 	bl	80057a8 <move_window>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d11d      	bne.n	8005abe <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8005a82:	693b      	ldr	r3, [r7, #16]
 8005a84:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	009b      	lsls	r3, r3, #2
 8005a8c:	693a      	ldr	r2, [r7, #16]
 8005a8e:	8992      	ldrh	r2, [r2, #12]
 8005a90:	fbb3 f0f2 	udiv	r0, r3, r2
 8005a94:	fb00 f202 	mul.w	r2, r0, r2
 8005a98:	1a9b      	subs	r3, r3, r2
 8005a9a:	440b      	add	r3, r1
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	f7ff fbb9 	bl	8005214 <ld_dword>
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005aa8:	617b      	str	r3, [r7, #20]
			break;
 8005aaa:	e009      	b.n	8005ac0 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8005aac:	2301      	movs	r3, #1
 8005aae:	617b      	str	r3, [r7, #20]
 8005ab0:	e006      	b.n	8005ac0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005ab2:	bf00      	nop
 8005ab4:	e004      	b.n	8005ac0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005ab6:	bf00      	nop
 8005ab8:	e002      	b.n	8005ac0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005aba:	bf00      	nop
 8005abc:	e000      	b.n	8005ac0 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005abe:	bf00      	nop
		}
	}

	return val;
 8005ac0:	697b      	ldr	r3, [r7, #20]
}
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	3718      	adds	r7, #24
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bd80      	pop	{r7, pc}

08005aca <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8005aca:	b590      	push	{r4, r7, lr}
 8005acc:	b089      	sub	sp, #36	; 0x24
 8005ace:	af00      	add	r7, sp, #0
 8005ad0:	60f8      	str	r0, [r7, #12]
 8005ad2:	60b9      	str	r1, [r7, #8]
 8005ad4:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8005ad6:	2302      	movs	r3, #2
 8005ad8:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	2b01      	cmp	r3, #1
 8005ade:	f240 8102 	bls.w	8005ce6 <put_fat+0x21c>
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	6a1b      	ldr	r3, [r3, #32]
 8005ae6:	68ba      	ldr	r2, [r7, #8]
 8005ae8:	429a      	cmp	r2, r3
 8005aea:	f080 80fc 	bcs.w	8005ce6 <put_fat+0x21c>
		switch (fs->fs_type) {
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	781b      	ldrb	r3, [r3, #0]
 8005af2:	2b03      	cmp	r3, #3
 8005af4:	f000 80b6 	beq.w	8005c64 <put_fat+0x19a>
 8005af8:	2b03      	cmp	r3, #3
 8005afa:	f300 80fd 	bgt.w	8005cf8 <put_fat+0x22e>
 8005afe:	2b01      	cmp	r3, #1
 8005b00:	d003      	beq.n	8005b0a <put_fat+0x40>
 8005b02:	2b02      	cmp	r3, #2
 8005b04:	f000 8083 	beq.w	8005c0e <put_fat+0x144>
 8005b08:	e0f6      	b.n	8005cf8 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	61bb      	str	r3, [r7, #24]
 8005b0e:	69bb      	ldr	r3, [r7, #24]
 8005b10:	085b      	lsrs	r3, r3, #1
 8005b12:	69ba      	ldr	r2, [r7, #24]
 8005b14:	4413      	add	r3, r2
 8005b16:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	899b      	ldrh	r3, [r3, #12]
 8005b20:	4619      	mov	r1, r3
 8005b22:	69bb      	ldr	r3, [r7, #24]
 8005b24:	fbb3 f3f1 	udiv	r3, r3, r1
 8005b28:	4413      	add	r3, r2
 8005b2a:	4619      	mov	r1, r3
 8005b2c:	68f8      	ldr	r0, [r7, #12]
 8005b2e:	f7ff fe3b 	bl	80057a8 <move_window>
 8005b32:	4603      	mov	r3, r0
 8005b34:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005b36:	7ffb      	ldrb	r3, [r7, #31]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	f040 80d6 	bne.w	8005cea <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8005b44:	69bb      	ldr	r3, [r7, #24]
 8005b46:	1c5a      	adds	r2, r3, #1
 8005b48:	61ba      	str	r2, [r7, #24]
 8005b4a:	68fa      	ldr	r2, [r7, #12]
 8005b4c:	8992      	ldrh	r2, [r2, #12]
 8005b4e:	fbb3 f0f2 	udiv	r0, r3, r2
 8005b52:	fb00 f202 	mul.w	r2, r0, r2
 8005b56:	1a9b      	subs	r3, r3, r2
 8005b58:	440b      	add	r3, r1
 8005b5a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	f003 0301 	and.w	r3, r3, #1
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d00d      	beq.n	8005b82 <put_fat+0xb8>
 8005b66:	697b      	ldr	r3, [r7, #20]
 8005b68:	781b      	ldrb	r3, [r3, #0]
 8005b6a:	b25b      	sxtb	r3, r3
 8005b6c:	f003 030f 	and.w	r3, r3, #15
 8005b70:	b25a      	sxtb	r2, r3
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	b2db      	uxtb	r3, r3
 8005b76:	011b      	lsls	r3, r3, #4
 8005b78:	b25b      	sxtb	r3, r3
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	b25b      	sxtb	r3, r3
 8005b7e:	b2db      	uxtb	r3, r3
 8005b80:	e001      	b.n	8005b86 <put_fat+0xbc>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	b2db      	uxtb	r3, r3
 8005b86:	697a      	ldr	r2, [r7, #20]
 8005b88:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	2201      	movs	r2, #1
 8005b8e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	899b      	ldrh	r3, [r3, #12]
 8005b98:	4619      	mov	r1, r3
 8005b9a:	69bb      	ldr	r3, [r7, #24]
 8005b9c:	fbb3 f3f1 	udiv	r3, r3, r1
 8005ba0:	4413      	add	r3, r2
 8005ba2:	4619      	mov	r1, r3
 8005ba4:	68f8      	ldr	r0, [r7, #12]
 8005ba6:	f7ff fdff 	bl	80057a8 <move_window>
 8005baa:	4603      	mov	r3, r0
 8005bac:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005bae:	7ffb      	ldrb	r3, [r7, #31]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	f040 809c 	bne.w	8005cee <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	899b      	ldrh	r3, [r3, #12]
 8005bc0:	461a      	mov	r2, r3
 8005bc2:	69bb      	ldr	r3, [r7, #24]
 8005bc4:	fbb3 f0f2 	udiv	r0, r3, r2
 8005bc8:	fb00 f202 	mul.w	r2, r0, r2
 8005bcc:	1a9b      	subs	r3, r3, r2
 8005bce:	440b      	add	r3, r1
 8005bd0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	f003 0301 	and.w	r3, r3, #1
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d003      	beq.n	8005be4 <put_fat+0x11a>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	091b      	lsrs	r3, r3, #4
 8005be0:	b2db      	uxtb	r3, r3
 8005be2:	e00e      	b.n	8005c02 <put_fat+0x138>
 8005be4:	697b      	ldr	r3, [r7, #20]
 8005be6:	781b      	ldrb	r3, [r3, #0]
 8005be8:	b25b      	sxtb	r3, r3
 8005bea:	f023 030f 	bic.w	r3, r3, #15
 8005bee:	b25a      	sxtb	r2, r3
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	0a1b      	lsrs	r3, r3, #8
 8005bf4:	b25b      	sxtb	r3, r3
 8005bf6:	f003 030f 	and.w	r3, r3, #15
 8005bfa:	b25b      	sxtb	r3, r3
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	b25b      	sxtb	r3, r3
 8005c00:	b2db      	uxtb	r3, r3
 8005c02:	697a      	ldr	r2, [r7, #20]
 8005c04:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	2201      	movs	r2, #1
 8005c0a:	70da      	strb	r2, [r3, #3]
			break;
 8005c0c:	e074      	b.n	8005cf8 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	899b      	ldrh	r3, [r3, #12]
 8005c16:	085b      	lsrs	r3, r3, #1
 8005c18:	b29b      	uxth	r3, r3
 8005c1a:	4619      	mov	r1, r3
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005c22:	4413      	add	r3, r2
 8005c24:	4619      	mov	r1, r3
 8005c26:	68f8      	ldr	r0, [r7, #12]
 8005c28:	f7ff fdbe 	bl	80057a8 <move_window>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005c30:	7ffb      	ldrb	r3, [r7, #31]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d15d      	bne.n	8005cf2 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	005b      	lsls	r3, r3, #1
 8005c40:	68fa      	ldr	r2, [r7, #12]
 8005c42:	8992      	ldrh	r2, [r2, #12]
 8005c44:	fbb3 f0f2 	udiv	r0, r3, r2
 8005c48:	fb00 f202 	mul.w	r2, r0, r2
 8005c4c:	1a9b      	subs	r3, r3, r2
 8005c4e:	440b      	add	r3, r1
 8005c50:	687a      	ldr	r2, [r7, #4]
 8005c52:	b292      	uxth	r2, r2
 8005c54:	4611      	mov	r1, r2
 8005c56:	4618      	mov	r0, r3
 8005c58:	f7ff faff 	bl	800525a <st_word>
			fs->wflag = 1;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	2201      	movs	r2, #1
 8005c60:	70da      	strb	r2, [r3, #3]
			break;
 8005c62:	e049      	b.n	8005cf8 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	899b      	ldrh	r3, [r3, #12]
 8005c6c:	089b      	lsrs	r3, r3, #2
 8005c6e:	b29b      	uxth	r3, r3
 8005c70:	4619      	mov	r1, r3
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	fbb3 f3f1 	udiv	r3, r3, r1
 8005c78:	4413      	add	r3, r2
 8005c7a:	4619      	mov	r1, r3
 8005c7c:	68f8      	ldr	r0, [r7, #12]
 8005c7e:	f7ff fd93 	bl	80057a8 <move_window>
 8005c82:	4603      	mov	r3, r0
 8005c84:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005c86:	7ffb      	ldrb	r3, [r7, #31]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d134      	bne.n	8005cf6 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	009b      	lsls	r3, r3, #2
 8005c9c:	68fa      	ldr	r2, [r7, #12]
 8005c9e:	8992      	ldrh	r2, [r2, #12]
 8005ca0:	fbb3 f0f2 	udiv	r0, r3, r2
 8005ca4:	fb00 f202 	mul.w	r2, r0, r2
 8005ca8:	1a9b      	subs	r3, r3, r2
 8005caa:	440b      	add	r3, r1
 8005cac:	4618      	mov	r0, r3
 8005cae:	f7ff fab1 	bl	8005214 <ld_dword>
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005cb8:	4323      	orrs	r3, r4
 8005cba:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	009b      	lsls	r3, r3, #2
 8005cc6:	68fa      	ldr	r2, [r7, #12]
 8005cc8:	8992      	ldrh	r2, [r2, #12]
 8005cca:	fbb3 f0f2 	udiv	r0, r3, r2
 8005cce:	fb00 f202 	mul.w	r2, r0, r2
 8005cd2:	1a9b      	subs	r3, r3, r2
 8005cd4:	440b      	add	r3, r1
 8005cd6:	6879      	ldr	r1, [r7, #4]
 8005cd8:	4618      	mov	r0, r3
 8005cda:	f7ff fad9 	bl	8005290 <st_dword>
			fs->wflag = 1;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	2201      	movs	r2, #1
 8005ce2:	70da      	strb	r2, [r3, #3]
			break;
 8005ce4:	e008      	b.n	8005cf8 <put_fat+0x22e>
		}
	}
 8005ce6:	bf00      	nop
 8005ce8:	e006      	b.n	8005cf8 <put_fat+0x22e>
			if (res != FR_OK) break;
 8005cea:	bf00      	nop
 8005cec:	e004      	b.n	8005cf8 <put_fat+0x22e>
			if (res != FR_OK) break;
 8005cee:	bf00      	nop
 8005cf0:	e002      	b.n	8005cf8 <put_fat+0x22e>
			if (res != FR_OK) break;
 8005cf2:	bf00      	nop
 8005cf4:	e000      	b.n	8005cf8 <put_fat+0x22e>
			if (res != FR_OK) break;
 8005cf6:	bf00      	nop
	return res;
 8005cf8:	7ffb      	ldrb	r3, [r7, #31]
}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	3724      	adds	r7, #36	; 0x24
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bd90      	pop	{r4, r7, pc}

08005d02 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8005d02:	b580      	push	{r7, lr}
 8005d04:	b088      	sub	sp, #32
 8005d06:	af00      	add	r7, sp, #0
 8005d08:	60f8      	str	r0, [r7, #12]
 8005d0a:	60b9      	str	r1, [r7, #8]
 8005d0c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8005d0e:	2300      	movs	r3, #0
 8005d10:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	2b01      	cmp	r3, #1
 8005d1c:	d904      	bls.n	8005d28 <remove_chain+0x26>
 8005d1e:	69bb      	ldr	r3, [r7, #24]
 8005d20:	6a1b      	ldr	r3, [r3, #32]
 8005d22:	68ba      	ldr	r2, [r7, #8]
 8005d24:	429a      	cmp	r2, r3
 8005d26:	d301      	bcc.n	8005d2c <remove_chain+0x2a>
 8005d28:	2302      	movs	r3, #2
 8005d2a:	e04b      	b.n	8005dc4 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d00c      	beq.n	8005d4c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8005d32:	f04f 32ff 	mov.w	r2, #4294967295
 8005d36:	6879      	ldr	r1, [r7, #4]
 8005d38:	69b8      	ldr	r0, [r7, #24]
 8005d3a:	f7ff fec6 	bl	8005aca <put_fat>
 8005d3e:	4603      	mov	r3, r0
 8005d40:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8005d42:	7ffb      	ldrb	r3, [r7, #31]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d001      	beq.n	8005d4c <remove_chain+0x4a>
 8005d48:	7ffb      	ldrb	r3, [r7, #31]
 8005d4a:	e03b      	b.n	8005dc4 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8005d4c:	68b9      	ldr	r1, [r7, #8]
 8005d4e:	68f8      	ldr	r0, [r7, #12]
 8005d50:	f7ff fde7 	bl	8005922 <get_fat>
 8005d54:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8005d56:	697b      	ldr	r3, [r7, #20]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d031      	beq.n	8005dc0 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	2b01      	cmp	r3, #1
 8005d60:	d101      	bne.n	8005d66 <remove_chain+0x64>
 8005d62:	2302      	movs	r3, #2
 8005d64:	e02e      	b.n	8005dc4 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8005d66:	697b      	ldr	r3, [r7, #20]
 8005d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d6c:	d101      	bne.n	8005d72 <remove_chain+0x70>
 8005d6e:	2301      	movs	r3, #1
 8005d70:	e028      	b.n	8005dc4 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8005d72:	2200      	movs	r2, #0
 8005d74:	68b9      	ldr	r1, [r7, #8]
 8005d76:	69b8      	ldr	r0, [r7, #24]
 8005d78:	f7ff fea7 	bl	8005aca <put_fat>
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8005d80:	7ffb      	ldrb	r3, [r7, #31]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d001      	beq.n	8005d8a <remove_chain+0x88>
 8005d86:	7ffb      	ldrb	r3, [r7, #31]
 8005d88:	e01c      	b.n	8005dc4 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8005d8a:	69bb      	ldr	r3, [r7, #24]
 8005d8c:	69da      	ldr	r2, [r3, #28]
 8005d8e:	69bb      	ldr	r3, [r7, #24]
 8005d90:	6a1b      	ldr	r3, [r3, #32]
 8005d92:	3b02      	subs	r3, #2
 8005d94:	429a      	cmp	r2, r3
 8005d96:	d20b      	bcs.n	8005db0 <remove_chain+0xae>
			fs->free_clst++;
 8005d98:	69bb      	ldr	r3, [r7, #24]
 8005d9a:	69db      	ldr	r3, [r3, #28]
 8005d9c:	1c5a      	adds	r2, r3, #1
 8005d9e:	69bb      	ldr	r3, [r7, #24]
 8005da0:	61da      	str	r2, [r3, #28]
			fs->fsi_flag |= 1;
 8005da2:	69bb      	ldr	r3, [r7, #24]
 8005da4:	791b      	ldrb	r3, [r3, #4]
 8005da6:	f043 0301 	orr.w	r3, r3, #1
 8005daa:	b2da      	uxtb	r2, r3
 8005dac:	69bb      	ldr	r3, [r7, #24]
 8005dae:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8005db4:	69bb      	ldr	r3, [r7, #24]
 8005db6:	6a1b      	ldr	r3, [r3, #32]
 8005db8:	68ba      	ldr	r2, [r7, #8]
 8005dba:	429a      	cmp	r2, r3
 8005dbc:	d3c6      	bcc.n	8005d4c <remove_chain+0x4a>
 8005dbe:	e000      	b.n	8005dc2 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8005dc0:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8005dc2:	2300      	movs	r3, #0
}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	3720      	adds	r7, #32
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	bd80      	pop	{r7, pc}

08005dcc <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b088      	sub	sp, #32
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
 8005dd4:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d10d      	bne.n	8005dfe <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	699b      	ldr	r3, [r3, #24]
 8005de6:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8005de8:	69bb      	ldr	r3, [r7, #24]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d004      	beq.n	8005df8 <create_chain+0x2c>
 8005dee:	693b      	ldr	r3, [r7, #16]
 8005df0:	6a1b      	ldr	r3, [r3, #32]
 8005df2:	69ba      	ldr	r2, [r7, #24]
 8005df4:	429a      	cmp	r2, r3
 8005df6:	d31b      	bcc.n	8005e30 <create_chain+0x64>
 8005df8:	2301      	movs	r3, #1
 8005dfa:	61bb      	str	r3, [r7, #24]
 8005dfc:	e018      	b.n	8005e30 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8005dfe:	6839      	ldr	r1, [r7, #0]
 8005e00:	6878      	ldr	r0, [r7, #4]
 8005e02:	f7ff fd8e 	bl	8005922 <get_fat>
 8005e06:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	2b01      	cmp	r3, #1
 8005e0c:	d801      	bhi.n	8005e12 <create_chain+0x46>
 8005e0e:	2301      	movs	r3, #1
 8005e10:	e070      	b.n	8005ef4 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e18:	d101      	bne.n	8005e1e <create_chain+0x52>
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	e06a      	b.n	8005ef4 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8005e1e:	693b      	ldr	r3, [r7, #16]
 8005e20:	6a1b      	ldr	r3, [r3, #32]
 8005e22:	68fa      	ldr	r2, [r7, #12]
 8005e24:	429a      	cmp	r2, r3
 8005e26:	d201      	bcs.n	8005e2c <create_chain+0x60>
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	e063      	b.n	8005ef4 <create_chain+0x128>
		scl = clst;
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8005e30:	69bb      	ldr	r3, [r7, #24]
 8005e32:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8005e34:	69fb      	ldr	r3, [r7, #28]
 8005e36:	3301      	adds	r3, #1
 8005e38:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8005e3a:	693b      	ldr	r3, [r7, #16]
 8005e3c:	6a1b      	ldr	r3, [r3, #32]
 8005e3e:	69fa      	ldr	r2, [r7, #28]
 8005e40:	429a      	cmp	r2, r3
 8005e42:	d307      	bcc.n	8005e54 <create_chain+0x88>
				ncl = 2;
 8005e44:	2302      	movs	r3, #2
 8005e46:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8005e48:	69fa      	ldr	r2, [r7, #28]
 8005e4a:	69bb      	ldr	r3, [r7, #24]
 8005e4c:	429a      	cmp	r2, r3
 8005e4e:	d901      	bls.n	8005e54 <create_chain+0x88>
 8005e50:	2300      	movs	r3, #0
 8005e52:	e04f      	b.n	8005ef4 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8005e54:	69f9      	ldr	r1, [r7, #28]
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	f7ff fd63 	bl	8005922 <get_fat>
 8005e5c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d00e      	beq.n	8005e82 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	2b01      	cmp	r3, #1
 8005e68:	d003      	beq.n	8005e72 <create_chain+0xa6>
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e70:	d101      	bne.n	8005e76 <create_chain+0xaa>
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	e03e      	b.n	8005ef4 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8005e76:	69fa      	ldr	r2, [r7, #28]
 8005e78:	69bb      	ldr	r3, [r7, #24]
 8005e7a:	429a      	cmp	r2, r3
 8005e7c:	d1da      	bne.n	8005e34 <create_chain+0x68>
 8005e7e:	2300      	movs	r3, #0
 8005e80:	e038      	b.n	8005ef4 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8005e82:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8005e84:	f04f 32ff 	mov.w	r2, #4294967295
 8005e88:	69f9      	ldr	r1, [r7, #28]
 8005e8a:	6938      	ldr	r0, [r7, #16]
 8005e8c:	f7ff fe1d 	bl	8005aca <put_fat>
 8005e90:	4603      	mov	r3, r0
 8005e92:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8005e94:	7dfb      	ldrb	r3, [r7, #23]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d109      	bne.n	8005eae <create_chain+0xe2>
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d006      	beq.n	8005eae <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8005ea0:	69fa      	ldr	r2, [r7, #28]
 8005ea2:	6839      	ldr	r1, [r7, #0]
 8005ea4:	6938      	ldr	r0, [r7, #16]
 8005ea6:	f7ff fe10 	bl	8005aca <put_fat>
 8005eaa:	4603      	mov	r3, r0
 8005eac:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8005eae:	7dfb      	ldrb	r3, [r7, #23]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d116      	bne.n	8005ee2 <create_chain+0x116>
		fs->last_clst = ncl;
 8005eb4:	693b      	ldr	r3, [r7, #16]
 8005eb6:	69fa      	ldr	r2, [r7, #28]
 8005eb8:	619a      	str	r2, [r3, #24]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8005eba:	693b      	ldr	r3, [r7, #16]
 8005ebc:	69da      	ldr	r2, [r3, #28]
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	6a1b      	ldr	r3, [r3, #32]
 8005ec2:	3b02      	subs	r3, #2
 8005ec4:	429a      	cmp	r2, r3
 8005ec6:	d804      	bhi.n	8005ed2 <create_chain+0x106>
 8005ec8:	693b      	ldr	r3, [r7, #16]
 8005eca:	69db      	ldr	r3, [r3, #28]
 8005ecc:	1e5a      	subs	r2, r3, #1
 8005ece:	693b      	ldr	r3, [r7, #16]
 8005ed0:	61da      	str	r2, [r3, #28]
		fs->fsi_flag |= 1;
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	791b      	ldrb	r3, [r3, #4]
 8005ed6:	f043 0301 	orr.w	r3, r3, #1
 8005eda:	b2da      	uxtb	r2, r3
 8005edc:	693b      	ldr	r3, [r7, #16]
 8005ede:	711a      	strb	r2, [r3, #4]
 8005ee0:	e007      	b.n	8005ef2 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8005ee2:	7dfb      	ldrb	r3, [r7, #23]
 8005ee4:	2b01      	cmp	r3, #1
 8005ee6:	d102      	bne.n	8005eee <create_chain+0x122>
 8005ee8:	f04f 33ff 	mov.w	r3, #4294967295
 8005eec:	e000      	b.n	8005ef0 <create_chain+0x124>
 8005eee:	2301      	movs	r3, #1
 8005ef0:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8005ef2:	69fb      	ldr	r3, [r7, #28]
}
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	3720      	adds	r7, #32
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	bd80      	pop	{r7, pc}

08005efc <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8005efc:	b480      	push	{r7}
 8005efe:	b087      	sub	sp, #28
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
 8005f04:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f10:	3304      	adds	r3, #4
 8005f12:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	899b      	ldrh	r3, [r3, #12]
 8005f18:	461a      	mov	r2, r3
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005f20:	68fa      	ldr	r2, [r7, #12]
 8005f22:	8952      	ldrh	r2, [r2, #10]
 8005f24:	fbb3 f3f2 	udiv	r3, r3, r2
 8005f28:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005f2a:	693b      	ldr	r3, [r7, #16]
 8005f2c:	1d1a      	adds	r2, r3, #4
 8005f2e:	613a      	str	r2, [r7, #16]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d101      	bne.n	8005f3e <clmt_clust+0x42>
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	e010      	b.n	8005f60 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8005f3e:	697a      	ldr	r2, [r7, #20]
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	429a      	cmp	r2, r3
 8005f44:	d307      	bcc.n	8005f56 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8005f46:	697a      	ldr	r2, [r7, #20]
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	1ad3      	subs	r3, r2, r3
 8005f4c:	617b      	str	r3, [r7, #20]
 8005f4e:	693b      	ldr	r3, [r7, #16]
 8005f50:	3304      	adds	r3, #4
 8005f52:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005f54:	e7e9      	b.n	8005f2a <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8005f56:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8005f58:	693b      	ldr	r3, [r7, #16]
 8005f5a:	681a      	ldr	r2, [r3, #0]
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	4413      	add	r3, r2
}
 8005f60:	4618      	mov	r0, r3
 8005f62:	371c      	adds	r7, #28
 8005f64:	46bd      	mov	sp, r7
 8005f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6a:	4770      	bx	lr

08005f6c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b086      	sub	sp, #24
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
 8005f74:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005f82:	d204      	bcs.n	8005f8e <dir_sdi+0x22>
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	f003 031f 	and.w	r3, r3, #31
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d001      	beq.n	8005f92 <dir_sdi+0x26>
		return FR_INT_ERR;
 8005f8e:	2302      	movs	r3, #2
 8005f90:	e071      	b.n	8006076 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	683a      	ldr	r2, [r7, #0]
 8005f96:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	689b      	ldr	r3, [r3, #8]
 8005f9c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8005f9e:	697b      	ldr	r3, [r7, #20]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d106      	bne.n	8005fb2 <dir_sdi+0x46>
 8005fa4:	693b      	ldr	r3, [r7, #16]
 8005fa6:	781b      	ldrb	r3, [r3, #0]
 8005fa8:	2b02      	cmp	r3, #2
 8005faa:	d902      	bls.n	8005fb2 <dir_sdi+0x46>
		clst = fs->dirbase;
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fb0:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d10c      	bne.n	8005fd2 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	095b      	lsrs	r3, r3, #5
 8005fbc:	693a      	ldr	r2, [r7, #16]
 8005fbe:	8912      	ldrh	r2, [r2, #8]
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d301      	bcc.n	8005fc8 <dir_sdi+0x5c>
 8005fc4:	2302      	movs	r3, #2
 8005fc6:	e056      	b.n	8006076 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8005fc8:	693b      	ldr	r3, [r7, #16]
 8005fca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	61da      	str	r2, [r3, #28]
 8005fd0:	e02d      	b.n	800602e <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	895b      	ldrh	r3, [r3, #10]
 8005fd6:	461a      	mov	r2, r3
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	899b      	ldrh	r3, [r3, #12]
 8005fdc:	fb02 f303 	mul.w	r3, r2, r3
 8005fe0:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005fe2:	e019      	b.n	8006018 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6979      	ldr	r1, [r7, #20]
 8005fe8:	4618      	mov	r0, r3
 8005fea:	f7ff fc9a 	bl	8005922 <get_fat>
 8005fee:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005ff0:	697b      	ldr	r3, [r7, #20]
 8005ff2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ff6:	d101      	bne.n	8005ffc <dir_sdi+0x90>
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	e03c      	b.n	8006076 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8005ffc:	697b      	ldr	r3, [r7, #20]
 8005ffe:	2b01      	cmp	r3, #1
 8006000:	d904      	bls.n	800600c <dir_sdi+0xa0>
 8006002:	693b      	ldr	r3, [r7, #16]
 8006004:	6a1b      	ldr	r3, [r3, #32]
 8006006:	697a      	ldr	r2, [r7, #20]
 8006008:	429a      	cmp	r2, r3
 800600a:	d301      	bcc.n	8006010 <dir_sdi+0xa4>
 800600c:	2302      	movs	r3, #2
 800600e:	e032      	b.n	8006076 <dir_sdi+0x10a>
			ofs -= csz;
 8006010:	683a      	ldr	r2, [r7, #0]
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	1ad3      	subs	r3, r2, r3
 8006016:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006018:	683a      	ldr	r2, [r7, #0]
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	429a      	cmp	r2, r3
 800601e:	d2e1      	bcs.n	8005fe4 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8006020:	6979      	ldr	r1, [r7, #20]
 8006022:	6938      	ldr	r0, [r7, #16]
 8006024:	f7ff fc5e 	bl	80058e4 <clust2sect>
 8006028:	4602      	mov	r2, r0
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	697a      	ldr	r2, [r7, #20]
 8006032:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	69db      	ldr	r3, [r3, #28]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d101      	bne.n	8006040 <dir_sdi+0xd4>
 800603c:	2302      	movs	r3, #2
 800603e:	e01a      	b.n	8006076 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	69da      	ldr	r2, [r3, #28]
 8006044:	693b      	ldr	r3, [r7, #16]
 8006046:	899b      	ldrh	r3, [r3, #12]
 8006048:	4619      	mov	r1, r3
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	fbb3 f3f1 	udiv	r3, r3, r1
 8006050:	441a      	add	r2, r3
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8006056:	693b      	ldr	r3, [r7, #16]
 8006058:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800605c:	693b      	ldr	r3, [r7, #16]
 800605e:	899b      	ldrh	r3, [r3, #12]
 8006060:	461a      	mov	r2, r3
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	fbb3 f0f2 	udiv	r0, r3, r2
 8006068:	fb00 f202 	mul.w	r2, r0, r2
 800606c:	1a9b      	subs	r3, r3, r2
 800606e:	18ca      	adds	r2, r1, r3
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006074:	2300      	movs	r3, #0
}
 8006076:	4618      	mov	r0, r3
 8006078:	3718      	adds	r7, #24
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}

0800607e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800607e:	b580      	push	{r7, lr}
 8006080:	b086      	sub	sp, #24
 8006082:	af00      	add	r7, sp, #0
 8006084:	6078      	str	r0, [r7, #4]
 8006086:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	695b      	ldr	r3, [r3, #20]
 8006092:	3320      	adds	r3, #32
 8006094:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	69db      	ldr	r3, [r3, #28]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d003      	beq.n	80060a6 <dir_next+0x28>
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80060a4:	d301      	bcc.n	80060aa <dir_next+0x2c>
 80060a6:	2304      	movs	r3, #4
 80060a8:	e0bb      	b.n	8006222 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	899b      	ldrh	r3, [r3, #12]
 80060ae:	461a      	mov	r2, r3
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	fbb3 f1f2 	udiv	r1, r3, r2
 80060b6:	fb01 f202 	mul.w	r2, r1, r2
 80060ba:	1a9b      	subs	r3, r3, r2
 80060bc:	2b00      	cmp	r3, #0
 80060be:	f040 809d 	bne.w	80061fc <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	69db      	ldr	r3, [r3, #28]
 80060c6:	1c5a      	adds	r2, r3, #1
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	699b      	ldr	r3, [r3, #24]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d10b      	bne.n	80060ec <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	095b      	lsrs	r3, r3, #5
 80060d8:	68fa      	ldr	r2, [r7, #12]
 80060da:	8912      	ldrh	r2, [r2, #8]
 80060dc:	4293      	cmp	r3, r2
 80060de:	f0c0 808d 	bcc.w	80061fc <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2200      	movs	r2, #0
 80060e6:	61da      	str	r2, [r3, #28]
 80060e8:	2304      	movs	r3, #4
 80060ea:	e09a      	b.n	8006222 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	899b      	ldrh	r3, [r3, #12]
 80060f0:	461a      	mov	r2, r3
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80060f8:	68fa      	ldr	r2, [r7, #12]
 80060fa:	8952      	ldrh	r2, [r2, #10]
 80060fc:	3a01      	subs	r2, #1
 80060fe:	4013      	ands	r3, r2
 8006100:	2b00      	cmp	r3, #0
 8006102:	d17b      	bne.n	80061fc <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8006104:	687a      	ldr	r2, [r7, #4]
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	699b      	ldr	r3, [r3, #24]
 800610a:	4619      	mov	r1, r3
 800610c:	4610      	mov	r0, r2
 800610e:	f7ff fc08 	bl	8005922 <get_fat>
 8006112:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8006114:	697b      	ldr	r3, [r7, #20]
 8006116:	2b01      	cmp	r3, #1
 8006118:	d801      	bhi.n	800611e <dir_next+0xa0>
 800611a:	2302      	movs	r3, #2
 800611c:	e081      	b.n	8006222 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800611e:	697b      	ldr	r3, [r7, #20]
 8006120:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006124:	d101      	bne.n	800612a <dir_next+0xac>
 8006126:	2301      	movs	r3, #1
 8006128:	e07b      	b.n	8006222 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	6a1b      	ldr	r3, [r3, #32]
 800612e:	697a      	ldr	r2, [r7, #20]
 8006130:	429a      	cmp	r2, r3
 8006132:	d359      	bcc.n	80061e8 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d104      	bne.n	8006144 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2200      	movs	r2, #0
 800613e:	61da      	str	r2, [r3, #28]
 8006140:	2304      	movs	r3, #4
 8006142:	e06e      	b.n	8006222 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8006144:	687a      	ldr	r2, [r7, #4]
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	699b      	ldr	r3, [r3, #24]
 800614a:	4619      	mov	r1, r3
 800614c:	4610      	mov	r0, r2
 800614e:	f7ff fe3d 	bl	8005dcc <create_chain>
 8006152:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d101      	bne.n	800615e <dir_next+0xe0>
 800615a:	2307      	movs	r3, #7
 800615c:	e061      	b.n	8006222 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800615e:	697b      	ldr	r3, [r7, #20]
 8006160:	2b01      	cmp	r3, #1
 8006162:	d101      	bne.n	8006168 <dir_next+0xea>
 8006164:	2302      	movs	r3, #2
 8006166:	e05c      	b.n	8006222 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006168:	697b      	ldr	r3, [r7, #20]
 800616a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800616e:	d101      	bne.n	8006174 <dir_next+0xf6>
 8006170:	2301      	movs	r3, #1
 8006172:	e056      	b.n	8006222 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8006174:	68f8      	ldr	r0, [r7, #12]
 8006176:	f7ff fad3 	bl	8005720 <sync_window>
 800617a:	4603      	mov	r3, r0
 800617c:	2b00      	cmp	r3, #0
 800617e:	d001      	beq.n	8006184 <dir_next+0x106>
 8006180:	2301      	movs	r3, #1
 8006182:	e04e      	b.n	8006222 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	899b      	ldrh	r3, [r3, #12]
 800618e:	461a      	mov	r2, r3
 8006190:	2100      	movs	r1, #0
 8006192:	f7ff f8ca 	bl	800532a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006196:	2300      	movs	r3, #0
 8006198:	613b      	str	r3, [r7, #16]
 800619a:	6979      	ldr	r1, [r7, #20]
 800619c:	68f8      	ldr	r0, [r7, #12]
 800619e:	f7ff fba1 	bl	80058e4 <clust2sect>
 80061a2:	4602      	mov	r2, r0
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	639a      	str	r2, [r3, #56]	; 0x38
 80061a8:	e012      	b.n	80061d0 <dir_next+0x152>
						fs->wflag = 1;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	2201      	movs	r2, #1
 80061ae:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80061b0:	68f8      	ldr	r0, [r7, #12]
 80061b2:	f7ff fab5 	bl	8005720 <sync_window>
 80061b6:	4603      	mov	r3, r0
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d001      	beq.n	80061c0 <dir_next+0x142>
 80061bc:	2301      	movs	r3, #1
 80061be:	e030      	b.n	8006222 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80061c0:	693b      	ldr	r3, [r7, #16]
 80061c2:	3301      	adds	r3, #1
 80061c4:	613b      	str	r3, [r7, #16]
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ca:	1c5a      	adds	r2, r3, #1
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	639a      	str	r2, [r3, #56]	; 0x38
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	895b      	ldrh	r3, [r3, #10]
 80061d4:	461a      	mov	r2, r3
 80061d6:	693b      	ldr	r3, [r7, #16]
 80061d8:	4293      	cmp	r3, r2
 80061da:	d3e6      	bcc.n	80061aa <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061e0:	693b      	ldr	r3, [r7, #16]
 80061e2:	1ad2      	subs	r2, r2, r3
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	639a      	str	r2, [r3, #56]	; 0x38
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	697a      	ldr	r2, [r7, #20]
 80061ec:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80061ee:	6979      	ldr	r1, [r7, #20]
 80061f0:	68f8      	ldr	r0, [r7, #12]
 80061f2:	f7ff fb77 	bl	80058e4 <clust2sect>
 80061f6:	4602      	mov	r2, r0
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	68ba      	ldr	r2, [r7, #8]
 8006200:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	899b      	ldrh	r3, [r3, #12]
 800620c:	461a      	mov	r2, r3
 800620e:	68bb      	ldr	r3, [r7, #8]
 8006210:	fbb3 f0f2 	udiv	r0, r3, r2
 8006214:	fb00 f202 	mul.w	r2, r0, r2
 8006218:	1a9b      	subs	r3, r3, r2
 800621a:	18ca      	adds	r2, r1, r3
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006220:	2300      	movs	r3, #0
}
 8006222:	4618      	mov	r0, r3
 8006224:	3718      	adds	r7, #24
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}

0800622a <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800622a:	b580      	push	{r7, lr}
 800622c:	b086      	sub	sp, #24
 800622e:	af00      	add	r7, sp, #0
 8006230:	6078      	str	r0, [r7, #4]
 8006232:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800623a:	2100      	movs	r1, #0
 800623c:	6878      	ldr	r0, [r7, #4]
 800623e:	f7ff fe95 	bl	8005f6c <dir_sdi>
 8006242:	4603      	mov	r3, r0
 8006244:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006246:	7dfb      	ldrb	r3, [r7, #23]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d12b      	bne.n	80062a4 <dir_alloc+0x7a>
		n = 0;
 800624c:	2300      	movs	r3, #0
 800624e:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	69db      	ldr	r3, [r3, #28]
 8006254:	4619      	mov	r1, r3
 8006256:	68f8      	ldr	r0, [r7, #12]
 8006258:	f7ff faa6 	bl	80057a8 <move_window>
 800625c:	4603      	mov	r3, r0
 800625e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006260:	7dfb      	ldrb	r3, [r7, #23]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d11d      	bne.n	80062a2 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6a1b      	ldr	r3, [r3, #32]
 800626a:	781b      	ldrb	r3, [r3, #0]
 800626c:	2be5      	cmp	r3, #229	; 0xe5
 800626e:	d004      	beq.n	800627a <dir_alloc+0x50>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6a1b      	ldr	r3, [r3, #32]
 8006274:	781b      	ldrb	r3, [r3, #0]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d107      	bne.n	800628a <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800627a:	693b      	ldr	r3, [r7, #16]
 800627c:	3301      	adds	r3, #1
 800627e:	613b      	str	r3, [r7, #16]
 8006280:	693a      	ldr	r2, [r7, #16]
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	429a      	cmp	r2, r3
 8006286:	d102      	bne.n	800628e <dir_alloc+0x64>
 8006288:	e00c      	b.n	80062a4 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800628a:	2300      	movs	r3, #0
 800628c:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800628e:	2101      	movs	r1, #1
 8006290:	6878      	ldr	r0, [r7, #4]
 8006292:	f7ff fef4 	bl	800607e <dir_next>
 8006296:	4603      	mov	r3, r0
 8006298:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800629a:	7dfb      	ldrb	r3, [r7, #23]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d0d7      	beq.n	8006250 <dir_alloc+0x26>
 80062a0:	e000      	b.n	80062a4 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80062a2:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80062a4:	7dfb      	ldrb	r3, [r7, #23]
 80062a6:	2b04      	cmp	r3, #4
 80062a8:	d101      	bne.n	80062ae <dir_alloc+0x84>
 80062aa:	2307      	movs	r3, #7
 80062ac:	75fb      	strb	r3, [r7, #23]
	return res;
 80062ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80062b0:	4618      	mov	r0, r3
 80062b2:	3718      	adds	r7, #24
 80062b4:	46bd      	mov	sp, r7
 80062b6:	bd80      	pop	{r7, pc}

080062b8 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b084      	sub	sp, #16
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
 80062c0:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	331a      	adds	r3, #26
 80062c6:	4618      	mov	r0, r3
 80062c8:	f7fe ff8c 	bl	80051e4 <ld_word>
 80062cc:	4603      	mov	r3, r0
 80062ce:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	781b      	ldrb	r3, [r3, #0]
 80062d4:	2b03      	cmp	r3, #3
 80062d6:	d109      	bne.n	80062ec <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	3314      	adds	r3, #20
 80062dc:	4618      	mov	r0, r3
 80062de:	f7fe ff81 	bl	80051e4 <ld_word>
 80062e2:	4603      	mov	r3, r0
 80062e4:	041b      	lsls	r3, r3, #16
 80062e6:	68fa      	ldr	r2, [r7, #12]
 80062e8:	4313      	orrs	r3, r2
 80062ea:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80062ec:	68fb      	ldr	r3, [r7, #12]
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	3710      	adds	r7, #16
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd80      	pop	{r7, pc}

080062f6 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80062f6:	b580      	push	{r7, lr}
 80062f8:	b084      	sub	sp, #16
 80062fa:	af00      	add	r7, sp, #0
 80062fc:	60f8      	str	r0, [r7, #12]
 80062fe:	60b9      	str	r1, [r7, #8]
 8006300:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	331a      	adds	r3, #26
 8006306:	687a      	ldr	r2, [r7, #4]
 8006308:	b292      	uxth	r2, r2
 800630a:	4611      	mov	r1, r2
 800630c:	4618      	mov	r0, r3
 800630e:	f7fe ffa4 	bl	800525a <st_word>
	if (fs->fs_type == FS_FAT32) {
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	781b      	ldrb	r3, [r3, #0]
 8006316:	2b03      	cmp	r3, #3
 8006318:	d109      	bne.n	800632e <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	f103 0214 	add.w	r2, r3, #20
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	0c1b      	lsrs	r3, r3, #16
 8006324:	b29b      	uxth	r3, r3
 8006326:	4619      	mov	r1, r3
 8006328:	4610      	mov	r0, r2
 800632a:	f7fe ff96 	bl	800525a <st_word>
	}
}
 800632e:	bf00      	nop
 8006330:	3710      	adds	r7, #16
 8006332:	46bd      	mov	sp, r7
 8006334:	bd80      	pop	{r7, pc}
	...

08006338 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8006338:	b590      	push	{r4, r7, lr}
 800633a:	b087      	sub	sp, #28
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
 8006340:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	331a      	adds	r3, #26
 8006346:	4618      	mov	r0, r3
 8006348:	f7fe ff4c 	bl	80051e4 <ld_word>
 800634c:	4603      	mov	r3, r0
 800634e:	2b00      	cmp	r3, #0
 8006350:	d001      	beq.n	8006356 <cmp_lfn+0x1e>
 8006352:	2300      	movs	r3, #0
 8006354:	e059      	b.n	800640a <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	781b      	ldrb	r3, [r3, #0]
 800635a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800635e:	1e5a      	subs	r2, r3, #1
 8006360:	4613      	mov	r3, r2
 8006362:	005b      	lsls	r3, r3, #1
 8006364:	4413      	add	r3, r2
 8006366:	009b      	lsls	r3, r3, #2
 8006368:	4413      	add	r3, r2
 800636a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800636c:	2301      	movs	r3, #1
 800636e:	81fb      	strh	r3, [r7, #14]
 8006370:	2300      	movs	r3, #0
 8006372:	613b      	str	r3, [r7, #16]
 8006374:	e033      	b.n	80063de <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8006376:	4a27      	ldr	r2, [pc, #156]	; (8006414 <cmp_lfn+0xdc>)
 8006378:	693b      	ldr	r3, [r7, #16]
 800637a:	4413      	add	r3, r2
 800637c:	781b      	ldrb	r3, [r3, #0]
 800637e:	461a      	mov	r2, r3
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	4413      	add	r3, r2
 8006384:	4618      	mov	r0, r3
 8006386:	f7fe ff2d 	bl	80051e4 <ld_word>
 800638a:	4603      	mov	r3, r0
 800638c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800638e:	89fb      	ldrh	r3, [r7, #14]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d01a      	beq.n	80063ca <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8006394:	697b      	ldr	r3, [r7, #20]
 8006396:	2bfe      	cmp	r3, #254	; 0xfe
 8006398:	d812      	bhi.n	80063c0 <cmp_lfn+0x88>
 800639a:	89bb      	ldrh	r3, [r7, #12]
 800639c:	4618      	mov	r0, r3
 800639e:	f002 f97f 	bl	80086a0 <ff_wtoupper>
 80063a2:	4603      	mov	r3, r0
 80063a4:	461c      	mov	r4, r3
 80063a6:	697b      	ldr	r3, [r7, #20]
 80063a8:	1c5a      	adds	r2, r3, #1
 80063aa:	617a      	str	r2, [r7, #20]
 80063ac:	005b      	lsls	r3, r3, #1
 80063ae:	687a      	ldr	r2, [r7, #4]
 80063b0:	4413      	add	r3, r2
 80063b2:	881b      	ldrh	r3, [r3, #0]
 80063b4:	4618      	mov	r0, r3
 80063b6:	f002 f973 	bl	80086a0 <ff_wtoupper>
 80063ba:	4603      	mov	r3, r0
 80063bc:	429c      	cmp	r4, r3
 80063be:	d001      	beq.n	80063c4 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 80063c0:	2300      	movs	r3, #0
 80063c2:	e022      	b.n	800640a <cmp_lfn+0xd2>
			}
			wc = uc;
 80063c4:	89bb      	ldrh	r3, [r7, #12]
 80063c6:	81fb      	strh	r3, [r7, #14]
 80063c8:	e006      	b.n	80063d8 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80063ca:	89bb      	ldrh	r3, [r7, #12]
 80063cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d001      	beq.n	80063d8 <cmp_lfn+0xa0>
 80063d4:	2300      	movs	r3, #0
 80063d6:	e018      	b.n	800640a <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80063d8:	693b      	ldr	r3, [r7, #16]
 80063da:	3301      	adds	r3, #1
 80063dc:	613b      	str	r3, [r7, #16]
 80063de:	693b      	ldr	r3, [r7, #16]
 80063e0:	2b0c      	cmp	r3, #12
 80063e2:	d9c8      	bls.n	8006376 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	781b      	ldrb	r3, [r3, #0]
 80063e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d00b      	beq.n	8006408 <cmp_lfn+0xd0>
 80063f0:	89fb      	ldrh	r3, [r7, #14]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d008      	beq.n	8006408 <cmp_lfn+0xd0>
 80063f6:	697b      	ldr	r3, [r7, #20]
 80063f8:	005b      	lsls	r3, r3, #1
 80063fa:	687a      	ldr	r2, [r7, #4]
 80063fc:	4413      	add	r3, r2
 80063fe:	881b      	ldrh	r3, [r3, #0]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d001      	beq.n	8006408 <cmp_lfn+0xd0>
 8006404:	2300      	movs	r3, #0
 8006406:	e000      	b.n	800640a <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8006408:	2301      	movs	r3, #1
}
 800640a:	4618      	mov	r0, r3
 800640c:	371c      	adds	r7, #28
 800640e:	46bd      	mov	sp, r7
 8006410:	bd90      	pop	{r4, r7, pc}
 8006412:	bf00      	nop
 8006414:	0800dbf0 	.word	0x0800dbf0

08006418 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b088      	sub	sp, #32
 800641c:	af00      	add	r7, sp, #0
 800641e:	60f8      	str	r0, [r7, #12]
 8006420:	60b9      	str	r1, [r7, #8]
 8006422:	4611      	mov	r1, r2
 8006424:	461a      	mov	r2, r3
 8006426:	460b      	mov	r3, r1
 8006428:	71fb      	strb	r3, [r7, #7]
 800642a:	4613      	mov	r3, r2
 800642c:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	330d      	adds	r3, #13
 8006432:	79ba      	ldrb	r2, [r7, #6]
 8006434:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	330b      	adds	r3, #11
 800643a:	220f      	movs	r2, #15
 800643c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	330c      	adds	r3, #12
 8006442:	2200      	movs	r2, #0
 8006444:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	331a      	adds	r3, #26
 800644a:	2100      	movs	r1, #0
 800644c:	4618      	mov	r0, r3
 800644e:	f7fe ff04 	bl	800525a <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8006452:	79fb      	ldrb	r3, [r7, #7]
 8006454:	1e5a      	subs	r2, r3, #1
 8006456:	4613      	mov	r3, r2
 8006458:	005b      	lsls	r3, r3, #1
 800645a:	4413      	add	r3, r2
 800645c:	009b      	lsls	r3, r3, #2
 800645e:	4413      	add	r3, r2
 8006460:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8006462:	2300      	movs	r3, #0
 8006464:	82fb      	strh	r3, [r7, #22]
 8006466:	2300      	movs	r3, #0
 8006468:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800646a:	8afb      	ldrh	r3, [r7, #22]
 800646c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006470:	4293      	cmp	r3, r2
 8006472:	d007      	beq.n	8006484 <put_lfn+0x6c>
 8006474:	69fb      	ldr	r3, [r7, #28]
 8006476:	1c5a      	adds	r2, r3, #1
 8006478:	61fa      	str	r2, [r7, #28]
 800647a:	005b      	lsls	r3, r3, #1
 800647c:	68fa      	ldr	r2, [r7, #12]
 800647e:	4413      	add	r3, r2
 8006480:	881b      	ldrh	r3, [r3, #0]
 8006482:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8006484:	4a17      	ldr	r2, [pc, #92]	; (80064e4 <put_lfn+0xcc>)
 8006486:	69bb      	ldr	r3, [r7, #24]
 8006488:	4413      	add	r3, r2
 800648a:	781b      	ldrb	r3, [r3, #0]
 800648c:	461a      	mov	r2, r3
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	4413      	add	r3, r2
 8006492:	8afa      	ldrh	r2, [r7, #22]
 8006494:	4611      	mov	r1, r2
 8006496:	4618      	mov	r0, r3
 8006498:	f7fe fedf 	bl	800525a <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800649c:	8afb      	ldrh	r3, [r7, #22]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d102      	bne.n	80064a8 <put_lfn+0x90>
 80064a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80064a6:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 80064a8:	69bb      	ldr	r3, [r7, #24]
 80064aa:	3301      	adds	r3, #1
 80064ac:	61bb      	str	r3, [r7, #24]
 80064ae:	69bb      	ldr	r3, [r7, #24]
 80064b0:	2b0c      	cmp	r3, #12
 80064b2:	d9da      	bls.n	800646a <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 80064b4:	8afb      	ldrh	r3, [r7, #22]
 80064b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d006      	beq.n	80064cc <put_lfn+0xb4>
 80064be:	69fb      	ldr	r3, [r7, #28]
 80064c0:	005b      	lsls	r3, r3, #1
 80064c2:	68fa      	ldr	r2, [r7, #12]
 80064c4:	4413      	add	r3, r2
 80064c6:	881b      	ldrh	r3, [r3, #0]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d103      	bne.n	80064d4 <put_lfn+0xbc>
 80064cc:	79fb      	ldrb	r3, [r7, #7]
 80064ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064d2:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	79fa      	ldrb	r2, [r7, #7]
 80064d8:	701a      	strb	r2, [r3, #0]
}
 80064da:	bf00      	nop
 80064dc:	3720      	adds	r7, #32
 80064de:	46bd      	mov	sp, r7
 80064e0:	bd80      	pop	{r7, pc}
 80064e2:	bf00      	nop
 80064e4:	0800dbf0 	.word	0x0800dbf0

080064e8 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b08c      	sub	sp, #48	; 0x30
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	60f8      	str	r0, [r7, #12]
 80064f0:	60b9      	str	r1, [r7, #8]
 80064f2:	607a      	str	r2, [r7, #4]
 80064f4:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80064f6:	220b      	movs	r2, #11
 80064f8:	68b9      	ldr	r1, [r7, #8]
 80064fa:	68f8      	ldr	r0, [r7, #12]
 80064fc:	f7fe fef4 	bl	80052e8 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	2b05      	cmp	r3, #5
 8006504:	d92b      	bls.n	800655e <gen_numname+0x76>
		sr = seq;
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800650a:	e022      	b.n	8006552 <gen_numname+0x6a>
			wc = *lfn++;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	1c9a      	adds	r2, r3, #2
 8006510:	607a      	str	r2, [r7, #4]
 8006512:	881b      	ldrh	r3, [r3, #0]
 8006514:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8006516:	2300      	movs	r3, #0
 8006518:	62bb      	str	r3, [r7, #40]	; 0x28
 800651a:	e017      	b.n	800654c <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800651c:	69fb      	ldr	r3, [r7, #28]
 800651e:	005a      	lsls	r2, r3, #1
 8006520:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006522:	f003 0301 	and.w	r3, r3, #1
 8006526:	4413      	add	r3, r2
 8006528:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800652a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800652c:	085b      	lsrs	r3, r3, #1
 800652e:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8006530:	69fb      	ldr	r3, [r7, #28]
 8006532:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006536:	2b00      	cmp	r3, #0
 8006538:	d005      	beq.n	8006546 <gen_numname+0x5e>
 800653a:	69fb      	ldr	r3, [r7, #28]
 800653c:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8006540:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8006544:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8006546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006548:	3301      	adds	r3, #1
 800654a:	62bb      	str	r3, [r7, #40]	; 0x28
 800654c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800654e:	2b0f      	cmp	r3, #15
 8006550:	d9e4      	bls.n	800651c <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	881b      	ldrh	r3, [r3, #0]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d1d8      	bne.n	800650c <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800655a:	69fb      	ldr	r3, [r7, #28]
 800655c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800655e:	2307      	movs	r3, #7
 8006560:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	b2db      	uxtb	r3, r3
 8006566:	f003 030f 	and.w	r3, r3, #15
 800656a:	b2db      	uxtb	r3, r3
 800656c:	3330      	adds	r3, #48	; 0x30
 800656e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8006572:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006576:	2b39      	cmp	r3, #57	; 0x39
 8006578:	d904      	bls.n	8006584 <gen_numname+0x9c>
 800657a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800657e:	3307      	adds	r3, #7
 8006580:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8006584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006586:	1e5a      	subs	r2, r3, #1
 8006588:	62ba      	str	r2, [r7, #40]	; 0x28
 800658a:	3330      	adds	r3, #48	; 0x30
 800658c:	443b      	add	r3, r7
 800658e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8006592:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	091b      	lsrs	r3, r3, #4
 800659a:	603b      	str	r3, [r7, #0]
	} while (seq);
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d1df      	bne.n	8006562 <gen_numname+0x7a>
	ns[i] = '~';
 80065a2:	f107 0214 	add.w	r2, r7, #20
 80065a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065a8:	4413      	add	r3, r2
 80065aa:	227e      	movs	r2, #126	; 0x7e
 80065ac:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80065ae:	2300      	movs	r3, #0
 80065b0:	627b      	str	r3, [r7, #36]	; 0x24
 80065b2:	e002      	b.n	80065ba <gen_numname+0xd2>
 80065b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b6:	3301      	adds	r3, #1
 80065b8:	627b      	str	r3, [r7, #36]	; 0x24
 80065ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065be:	429a      	cmp	r2, r3
 80065c0:	d205      	bcs.n	80065ce <gen_numname+0xe6>
 80065c2:	68fa      	ldr	r2, [r7, #12]
 80065c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c6:	4413      	add	r3, r2
 80065c8:	781b      	ldrb	r3, [r3, #0]
 80065ca:	2b20      	cmp	r3, #32
 80065cc:	d1f2      	bne.n	80065b4 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80065ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065d0:	2b07      	cmp	r3, #7
 80065d2:	d807      	bhi.n	80065e4 <gen_numname+0xfc>
 80065d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065d6:	1c5a      	adds	r2, r3, #1
 80065d8:	62ba      	str	r2, [r7, #40]	; 0x28
 80065da:	3330      	adds	r3, #48	; 0x30
 80065dc:	443b      	add	r3, r7
 80065de:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 80065e2:	e000      	b.n	80065e6 <gen_numname+0xfe>
 80065e4:	2120      	movs	r1, #32
 80065e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e8:	1c5a      	adds	r2, r3, #1
 80065ea:	627a      	str	r2, [r7, #36]	; 0x24
 80065ec:	68fa      	ldr	r2, [r7, #12]
 80065ee:	4413      	add	r3, r2
 80065f0:	460a      	mov	r2, r1
 80065f2:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 80065f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f6:	2b07      	cmp	r3, #7
 80065f8:	d9e9      	bls.n	80065ce <gen_numname+0xe6>
}
 80065fa:	bf00      	nop
 80065fc:	bf00      	nop
 80065fe:	3730      	adds	r7, #48	; 0x30
 8006600:	46bd      	mov	sp, r7
 8006602:	bd80      	pop	{r7, pc}

08006604 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8006604:	b480      	push	{r7}
 8006606:	b085      	sub	sp, #20
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800660c:	2300      	movs	r3, #0
 800660e:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8006610:	230b      	movs	r3, #11
 8006612:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8006614:	7bfb      	ldrb	r3, [r7, #15]
 8006616:	b2da      	uxtb	r2, r3
 8006618:	0852      	lsrs	r2, r2, #1
 800661a:	01db      	lsls	r3, r3, #7
 800661c:	4313      	orrs	r3, r2
 800661e:	b2da      	uxtb	r2, r3
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	1c59      	adds	r1, r3, #1
 8006624:	6079      	str	r1, [r7, #4]
 8006626:	781b      	ldrb	r3, [r3, #0]
 8006628:	4413      	add	r3, r2
 800662a:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	3b01      	subs	r3, #1
 8006630:	60bb      	str	r3, [r7, #8]
 8006632:	68bb      	ldr	r3, [r7, #8]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d1ed      	bne.n	8006614 <sum_sfn+0x10>
	return sum;
 8006638:	7bfb      	ldrb	r3, [r7, #15]
}
 800663a:	4618      	mov	r0, r3
 800663c:	3714      	adds	r7, #20
 800663e:	46bd      	mov	sp, r7
 8006640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006644:	4770      	bx	lr

08006646 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8006646:	b580      	push	{r7, lr}
 8006648:	b086      	sub	sp, #24
 800664a:	af00      	add	r7, sp, #0
 800664c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006654:	2100      	movs	r1, #0
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f7ff fc88 	bl	8005f6c <dir_sdi>
 800665c:	4603      	mov	r3, r0
 800665e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8006660:	7dfb      	ldrb	r3, [r7, #23]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d001      	beq.n	800666a <dir_find+0x24>
 8006666:	7dfb      	ldrb	r3, [r7, #23]
 8006668:	e0a9      	b.n	80067be <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800666a:	23ff      	movs	r3, #255	; 0xff
 800666c:	753b      	strb	r3, [r7, #20]
 800666e:	7d3b      	ldrb	r3, [r7, #20]
 8006670:	757b      	strb	r3, [r7, #21]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	f04f 32ff 	mov.w	r2, #4294967295
 8006678:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	69db      	ldr	r3, [r3, #28]
 800667e:	4619      	mov	r1, r3
 8006680:	6938      	ldr	r0, [r7, #16]
 8006682:	f7ff f891 	bl	80057a8 <move_window>
 8006686:	4603      	mov	r3, r0
 8006688:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800668a:	7dfb      	ldrb	r3, [r7, #23]
 800668c:	2b00      	cmp	r3, #0
 800668e:	f040 8090 	bne.w	80067b2 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6a1b      	ldr	r3, [r3, #32]
 8006696:	781b      	ldrb	r3, [r3, #0]
 8006698:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800669a:	7dbb      	ldrb	r3, [r7, #22]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d102      	bne.n	80066a6 <dir_find+0x60>
 80066a0:	2304      	movs	r3, #4
 80066a2:	75fb      	strb	r3, [r7, #23]
 80066a4:	e08a      	b.n	80067bc <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6a1b      	ldr	r3, [r3, #32]
 80066aa:	330b      	adds	r3, #11
 80066ac:	781b      	ldrb	r3, [r3, #0]
 80066ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80066b2:	73fb      	strb	r3, [r7, #15]
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	7bfa      	ldrb	r2, [r7, #15]
 80066b8:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80066ba:	7dbb      	ldrb	r3, [r7, #22]
 80066bc:	2be5      	cmp	r3, #229	; 0xe5
 80066be:	d007      	beq.n	80066d0 <dir_find+0x8a>
 80066c0:	7bfb      	ldrb	r3, [r7, #15]
 80066c2:	f003 0308 	and.w	r3, r3, #8
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d009      	beq.n	80066de <dir_find+0x98>
 80066ca:	7bfb      	ldrb	r3, [r7, #15]
 80066cc:	2b0f      	cmp	r3, #15
 80066ce:	d006      	beq.n	80066de <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80066d0:	23ff      	movs	r3, #255	; 0xff
 80066d2:	757b      	strb	r3, [r7, #21]
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	f04f 32ff 	mov.w	r2, #4294967295
 80066da:	631a      	str	r2, [r3, #48]	; 0x30
 80066dc:	e05e      	b.n	800679c <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80066de:	7bfb      	ldrb	r3, [r7, #15]
 80066e0:	2b0f      	cmp	r3, #15
 80066e2:	d136      	bne.n	8006752 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80066ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d154      	bne.n	800679c <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80066f2:	7dbb      	ldrb	r3, [r7, #22]
 80066f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d00d      	beq.n	8006718 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6a1b      	ldr	r3, [r3, #32]
 8006700:	7b5b      	ldrb	r3, [r3, #13]
 8006702:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8006704:	7dbb      	ldrb	r3, [r7, #22]
 8006706:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800670a:	75bb      	strb	r3, [r7, #22]
 800670c:	7dbb      	ldrb	r3, [r7, #22]
 800670e:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	695a      	ldr	r2, [r3, #20]
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8006718:	7dba      	ldrb	r2, [r7, #22]
 800671a:	7d7b      	ldrb	r3, [r7, #21]
 800671c:	429a      	cmp	r2, r3
 800671e:	d115      	bne.n	800674c <dir_find+0x106>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6a1b      	ldr	r3, [r3, #32]
 8006724:	330d      	adds	r3, #13
 8006726:	781b      	ldrb	r3, [r3, #0]
 8006728:	7d3a      	ldrb	r2, [r7, #20]
 800672a:	429a      	cmp	r2, r3
 800672c:	d10e      	bne.n	800674c <dir_find+0x106>
 800672e:	693b      	ldr	r3, [r7, #16]
 8006730:	691a      	ldr	r2, [r3, #16]
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6a1b      	ldr	r3, [r3, #32]
 8006736:	4619      	mov	r1, r3
 8006738:	4610      	mov	r0, r2
 800673a:	f7ff fdfd 	bl	8006338 <cmp_lfn>
 800673e:	4603      	mov	r3, r0
 8006740:	2b00      	cmp	r3, #0
 8006742:	d003      	beq.n	800674c <dir_find+0x106>
 8006744:	7d7b      	ldrb	r3, [r7, #21]
 8006746:	3b01      	subs	r3, #1
 8006748:	b2db      	uxtb	r3, r3
 800674a:	e000      	b.n	800674e <dir_find+0x108>
 800674c:	23ff      	movs	r3, #255	; 0xff
 800674e:	757b      	strb	r3, [r7, #21]
 8006750:	e024      	b.n	800679c <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8006752:	7d7b      	ldrb	r3, [r7, #21]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d109      	bne.n	800676c <dir_find+0x126>
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6a1b      	ldr	r3, [r3, #32]
 800675c:	4618      	mov	r0, r3
 800675e:	f7ff ff51 	bl	8006604 <sum_sfn>
 8006762:	4603      	mov	r3, r0
 8006764:	461a      	mov	r2, r3
 8006766:	7d3b      	ldrb	r3, [r7, #20]
 8006768:	4293      	cmp	r3, r2
 800676a:	d024      	beq.n	80067b6 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006772:	f003 0301 	and.w	r3, r3, #1
 8006776:	2b00      	cmp	r3, #0
 8006778:	d10a      	bne.n	8006790 <dir_find+0x14a>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6a18      	ldr	r0, [r3, #32]
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	3324      	adds	r3, #36	; 0x24
 8006782:	220b      	movs	r2, #11
 8006784:	4619      	mov	r1, r3
 8006786:	f7fe fdeb 	bl	8005360 <mem_cmp>
 800678a:	4603      	mov	r3, r0
 800678c:	2b00      	cmp	r3, #0
 800678e:	d014      	beq.n	80067ba <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006790:	23ff      	movs	r3, #255	; 0xff
 8006792:	757b      	strb	r3, [r7, #21]
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	f04f 32ff 	mov.w	r2, #4294967295
 800679a:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800679c:	2100      	movs	r1, #0
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	f7ff fc6d 	bl	800607e <dir_next>
 80067a4:	4603      	mov	r3, r0
 80067a6:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80067a8:	7dfb      	ldrb	r3, [r7, #23]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	f43f af65 	beq.w	800667a <dir_find+0x34>
 80067b0:	e004      	b.n	80067bc <dir_find+0x176>
		if (res != FR_OK) break;
 80067b2:	bf00      	nop
 80067b4:	e002      	b.n	80067bc <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80067b6:	bf00      	nop
 80067b8:	e000      	b.n	80067bc <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80067ba:	bf00      	nop

	return res;
 80067bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80067be:	4618      	mov	r0, r3
 80067c0:	3718      	adds	r7, #24
 80067c2:	46bd      	mov	sp, r7
 80067c4:	bd80      	pop	{r7, pc}
	...

080067c8 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b08c      	sub	sp, #48	; 0x30
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80067dc:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d001      	beq.n	80067e8 <dir_register+0x20>
 80067e4:	2306      	movs	r3, #6
 80067e6:	e0e0      	b.n	80069aa <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80067e8:	2300      	movs	r3, #0
 80067ea:	627b      	str	r3, [r7, #36]	; 0x24
 80067ec:	e002      	b.n	80067f4 <dir_register+0x2c>
 80067ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f0:	3301      	adds	r3, #1
 80067f2:	627b      	str	r3, [r7, #36]	; 0x24
 80067f4:	69fb      	ldr	r3, [r7, #28]
 80067f6:	691a      	ldr	r2, [r3, #16]
 80067f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067fa:	005b      	lsls	r3, r3, #1
 80067fc:	4413      	add	r3, r2
 80067fe:	881b      	ldrh	r3, [r3, #0]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d1f4      	bne.n	80067ee <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800680a:	f107 030c 	add.w	r3, r7, #12
 800680e:	220c      	movs	r2, #12
 8006810:	4618      	mov	r0, r3
 8006812:	f7fe fd69 	bl	80052e8 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8006816:	7dfb      	ldrb	r3, [r7, #23]
 8006818:	f003 0301 	and.w	r3, r3, #1
 800681c:	2b00      	cmp	r3, #0
 800681e:	d032      	beq.n	8006886 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2240      	movs	r2, #64	; 0x40
 8006824:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8006828:	2301      	movs	r3, #1
 800682a:	62bb      	str	r3, [r7, #40]	; 0x28
 800682c:	e016      	b.n	800685c <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8006834:	69fb      	ldr	r3, [r7, #28]
 8006836:	691a      	ldr	r2, [r3, #16]
 8006838:	f107 010c 	add.w	r1, r7, #12
 800683c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800683e:	f7ff fe53 	bl	80064e8 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	f7ff feff 	bl	8006646 <dir_find>
 8006848:	4603      	mov	r3, r0
 800684a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800684e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006852:	2b00      	cmp	r3, #0
 8006854:	d106      	bne.n	8006864 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8006856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006858:	3301      	adds	r3, #1
 800685a:	62bb      	str	r3, [r7, #40]	; 0x28
 800685c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800685e:	2b63      	cmp	r3, #99	; 0x63
 8006860:	d9e5      	bls.n	800682e <dir_register+0x66>
 8006862:	e000      	b.n	8006866 <dir_register+0x9e>
			if (res != FR_OK) break;
 8006864:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8006866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006868:	2b64      	cmp	r3, #100	; 0x64
 800686a:	d101      	bne.n	8006870 <dir_register+0xa8>
 800686c:	2307      	movs	r3, #7
 800686e:	e09c      	b.n	80069aa <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8006870:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006874:	2b04      	cmp	r3, #4
 8006876:	d002      	beq.n	800687e <dir_register+0xb6>
 8006878:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800687c:	e095      	b.n	80069aa <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800687e:	7dfa      	ldrb	r2, [r7, #23]
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8006886:	7dfb      	ldrb	r3, [r7, #23]
 8006888:	f003 0302 	and.w	r3, r3, #2
 800688c:	2b00      	cmp	r3, #0
 800688e:	d007      	beq.n	80068a0 <dir_register+0xd8>
 8006890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006892:	330c      	adds	r3, #12
 8006894:	4a47      	ldr	r2, [pc, #284]	; (80069b4 <dir_register+0x1ec>)
 8006896:	fba2 2303 	umull	r2, r3, r2, r3
 800689a:	089b      	lsrs	r3, r3, #2
 800689c:	3301      	adds	r3, #1
 800689e:	e000      	b.n	80068a2 <dir_register+0xda>
 80068a0:	2301      	movs	r3, #1
 80068a2:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 80068a4:	6a39      	ldr	r1, [r7, #32]
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f7ff fcbf 	bl	800622a <dir_alloc>
 80068ac:	4603      	mov	r3, r0
 80068ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80068b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d148      	bne.n	800694c <dir_register+0x184>
 80068ba:	6a3b      	ldr	r3, [r7, #32]
 80068bc:	3b01      	subs	r3, #1
 80068be:	623b      	str	r3, [r7, #32]
 80068c0:	6a3b      	ldr	r3, [r7, #32]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d042      	beq.n	800694c <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	695a      	ldr	r2, [r3, #20]
 80068ca:	6a3b      	ldr	r3, [r7, #32]
 80068cc:	015b      	lsls	r3, r3, #5
 80068ce:	1ad3      	subs	r3, r2, r3
 80068d0:	4619      	mov	r1, r3
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	f7ff fb4a 	bl	8005f6c <dir_sdi>
 80068d8:	4603      	mov	r3, r0
 80068da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80068de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d132      	bne.n	800694c <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	3324      	adds	r3, #36	; 0x24
 80068ea:	4618      	mov	r0, r3
 80068ec:	f7ff fe8a 	bl	8006604 <sum_sfn>
 80068f0:	4603      	mov	r3, r0
 80068f2:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	69db      	ldr	r3, [r3, #28]
 80068f8:	4619      	mov	r1, r3
 80068fa:	69f8      	ldr	r0, [r7, #28]
 80068fc:	f7fe ff54 	bl	80057a8 <move_window>
 8006900:	4603      	mov	r3, r0
 8006902:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8006906:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800690a:	2b00      	cmp	r3, #0
 800690c:	d11d      	bne.n	800694a <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800690e:	69fb      	ldr	r3, [r7, #28]
 8006910:	6918      	ldr	r0, [r3, #16]
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6a19      	ldr	r1, [r3, #32]
 8006916:	6a3b      	ldr	r3, [r7, #32]
 8006918:	b2da      	uxtb	r2, r3
 800691a:	7efb      	ldrb	r3, [r7, #27]
 800691c:	f7ff fd7c 	bl	8006418 <put_lfn>
				fs->wflag = 1;
 8006920:	69fb      	ldr	r3, [r7, #28]
 8006922:	2201      	movs	r2, #1
 8006924:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8006926:	2100      	movs	r1, #0
 8006928:	6878      	ldr	r0, [r7, #4]
 800692a:	f7ff fba8 	bl	800607e <dir_next>
 800692e:	4603      	mov	r3, r0
 8006930:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8006934:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006938:	2b00      	cmp	r3, #0
 800693a:	d107      	bne.n	800694c <dir_register+0x184>
 800693c:	6a3b      	ldr	r3, [r7, #32]
 800693e:	3b01      	subs	r3, #1
 8006940:	623b      	str	r3, [r7, #32]
 8006942:	6a3b      	ldr	r3, [r7, #32]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d1d5      	bne.n	80068f4 <dir_register+0x12c>
 8006948:	e000      	b.n	800694c <dir_register+0x184>
				if (res != FR_OK) break;
 800694a:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800694c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006950:	2b00      	cmp	r3, #0
 8006952:	d128      	bne.n	80069a6 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	69db      	ldr	r3, [r3, #28]
 8006958:	4619      	mov	r1, r3
 800695a:	69f8      	ldr	r0, [r7, #28]
 800695c:	f7fe ff24 	bl	80057a8 <move_window>
 8006960:	4603      	mov	r3, r0
 8006962:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8006966:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800696a:	2b00      	cmp	r3, #0
 800696c:	d11b      	bne.n	80069a6 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6a1b      	ldr	r3, [r3, #32]
 8006972:	2220      	movs	r2, #32
 8006974:	2100      	movs	r1, #0
 8006976:	4618      	mov	r0, r3
 8006978:	f7fe fcd7 	bl	800532a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6a18      	ldr	r0, [r3, #32]
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	3324      	adds	r3, #36	; 0x24
 8006984:	220b      	movs	r2, #11
 8006986:	4619      	mov	r1, r3
 8006988:	f7fe fcae 	bl	80052e8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6a1b      	ldr	r3, [r3, #32]
 8006996:	330c      	adds	r3, #12
 8006998:	f002 0218 	and.w	r2, r2, #24
 800699c:	b2d2      	uxtb	r2, r2
 800699e:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 80069a0:	69fb      	ldr	r3, [r7, #28]
 80069a2:	2201      	movs	r2, #1
 80069a4:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80069a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80069aa:	4618      	mov	r0, r3
 80069ac:	3730      	adds	r7, #48	; 0x30
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bd80      	pop	{r7, pc}
 80069b2:	bf00      	nop
 80069b4:	4ec4ec4f 	.word	0x4ec4ec4f

080069b8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b08a      	sub	sp, #40	; 0x28
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
 80069c0:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	613b      	str	r3, [r7, #16]
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	691b      	ldr	r3, [r3, #16]
 80069ce:	60fb      	str	r3, [r7, #12]
 80069d0:	2300      	movs	r3, #0
 80069d2:	617b      	str	r3, [r7, #20]
 80069d4:	697b      	ldr	r3, [r7, #20]
 80069d6:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 80069d8:	69bb      	ldr	r3, [r7, #24]
 80069da:	1c5a      	adds	r2, r3, #1
 80069dc:	61ba      	str	r2, [r7, #24]
 80069de:	693a      	ldr	r2, [r7, #16]
 80069e0:	4413      	add	r3, r2
 80069e2:	781b      	ldrb	r3, [r3, #0]
 80069e4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 80069e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80069e8:	2b1f      	cmp	r3, #31
 80069ea:	d940      	bls.n	8006a6e <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 80069ec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80069ee:	2b2f      	cmp	r3, #47	; 0x2f
 80069f0:	d006      	beq.n	8006a00 <create_name+0x48>
 80069f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80069f4:	2b5c      	cmp	r3, #92	; 0x5c
 80069f6:	d110      	bne.n	8006a1a <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80069f8:	e002      	b.n	8006a00 <create_name+0x48>
 80069fa:	69bb      	ldr	r3, [r7, #24]
 80069fc:	3301      	adds	r3, #1
 80069fe:	61bb      	str	r3, [r7, #24]
 8006a00:	693a      	ldr	r2, [r7, #16]
 8006a02:	69bb      	ldr	r3, [r7, #24]
 8006a04:	4413      	add	r3, r2
 8006a06:	781b      	ldrb	r3, [r3, #0]
 8006a08:	2b2f      	cmp	r3, #47	; 0x2f
 8006a0a:	d0f6      	beq.n	80069fa <create_name+0x42>
 8006a0c:	693a      	ldr	r2, [r7, #16]
 8006a0e:	69bb      	ldr	r3, [r7, #24]
 8006a10:	4413      	add	r3, r2
 8006a12:	781b      	ldrb	r3, [r3, #0]
 8006a14:	2b5c      	cmp	r3, #92	; 0x5c
 8006a16:	d0f0      	beq.n	80069fa <create_name+0x42>
			break;
 8006a18:	e02a      	b.n	8006a70 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8006a1a:	697b      	ldr	r3, [r7, #20]
 8006a1c:	2bfe      	cmp	r3, #254	; 0xfe
 8006a1e:	d901      	bls.n	8006a24 <create_name+0x6c>
 8006a20:	2306      	movs	r3, #6
 8006a22:	e17d      	b.n	8006d20 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8006a24:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006a26:	b2db      	uxtb	r3, r3
 8006a28:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8006a2a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006a2c:	2101      	movs	r1, #1
 8006a2e:	4618      	mov	r0, r3
 8006a30:	f001 fdfa 	bl	8008628 <ff_convert>
 8006a34:	4603      	mov	r3, r0
 8006a36:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8006a38:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d101      	bne.n	8006a42 <create_name+0x8a>
 8006a3e:	2306      	movs	r3, #6
 8006a40:	e16e      	b.n	8006d20 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8006a42:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006a44:	2b7f      	cmp	r3, #127	; 0x7f
 8006a46:	d809      	bhi.n	8006a5c <create_name+0xa4>
 8006a48:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006a4a:	4619      	mov	r1, r3
 8006a4c:	488d      	ldr	r0, [pc, #564]	; (8006c84 <create_name+0x2cc>)
 8006a4e:	f7fe fcae 	bl	80053ae <chk_chr>
 8006a52:	4603      	mov	r3, r0
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d001      	beq.n	8006a5c <create_name+0xa4>
 8006a58:	2306      	movs	r3, #6
 8006a5a:	e161      	b.n	8006d20 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8006a5c:	697b      	ldr	r3, [r7, #20]
 8006a5e:	1c5a      	adds	r2, r3, #1
 8006a60:	617a      	str	r2, [r7, #20]
 8006a62:	005b      	lsls	r3, r3, #1
 8006a64:	68fa      	ldr	r2, [r7, #12]
 8006a66:	4413      	add	r3, r2
 8006a68:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006a6a:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8006a6c:	e7b4      	b.n	80069d8 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8006a6e:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8006a70:	693a      	ldr	r2, [r7, #16]
 8006a72:	69bb      	ldr	r3, [r7, #24]
 8006a74:	441a      	add	r2, r3
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8006a7a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006a7c:	2b1f      	cmp	r3, #31
 8006a7e:	d801      	bhi.n	8006a84 <create_name+0xcc>
 8006a80:	2304      	movs	r3, #4
 8006a82:	e000      	b.n	8006a86 <create_name+0xce>
 8006a84:	2300      	movs	r3, #0
 8006a86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8006a8a:	e011      	b.n	8006ab0 <create_name+0xf8>
		w = lfn[di - 1];
 8006a8c:	697b      	ldr	r3, [r7, #20]
 8006a8e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006a92:	3b01      	subs	r3, #1
 8006a94:	005b      	lsls	r3, r3, #1
 8006a96:	68fa      	ldr	r2, [r7, #12]
 8006a98:	4413      	add	r3, r2
 8006a9a:	881b      	ldrh	r3, [r3, #0]
 8006a9c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8006a9e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006aa0:	2b20      	cmp	r3, #32
 8006aa2:	d002      	beq.n	8006aaa <create_name+0xf2>
 8006aa4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006aa6:	2b2e      	cmp	r3, #46	; 0x2e
 8006aa8:	d106      	bne.n	8006ab8 <create_name+0x100>
		di--;
 8006aaa:	697b      	ldr	r3, [r7, #20]
 8006aac:	3b01      	subs	r3, #1
 8006aae:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8006ab0:	697b      	ldr	r3, [r7, #20]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d1ea      	bne.n	8006a8c <create_name+0xd4>
 8006ab6:	e000      	b.n	8006aba <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8006ab8:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8006aba:	697b      	ldr	r3, [r7, #20]
 8006abc:	005b      	lsls	r3, r3, #1
 8006abe:	68fa      	ldr	r2, [r7, #12]
 8006ac0:	4413      	add	r3, r2
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8006ac6:	697b      	ldr	r3, [r7, #20]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d101      	bne.n	8006ad0 <create_name+0x118>
 8006acc:	2306      	movs	r3, #6
 8006ace:	e127      	b.n	8006d20 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	3324      	adds	r3, #36	; 0x24
 8006ad4:	220b      	movs	r2, #11
 8006ad6:	2120      	movs	r1, #32
 8006ad8:	4618      	mov	r0, r3
 8006ada:	f7fe fc26 	bl	800532a <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8006ade:	2300      	movs	r3, #0
 8006ae0:	61bb      	str	r3, [r7, #24]
 8006ae2:	e002      	b.n	8006aea <create_name+0x132>
 8006ae4:	69bb      	ldr	r3, [r7, #24]
 8006ae6:	3301      	adds	r3, #1
 8006ae8:	61bb      	str	r3, [r7, #24]
 8006aea:	69bb      	ldr	r3, [r7, #24]
 8006aec:	005b      	lsls	r3, r3, #1
 8006aee:	68fa      	ldr	r2, [r7, #12]
 8006af0:	4413      	add	r3, r2
 8006af2:	881b      	ldrh	r3, [r3, #0]
 8006af4:	2b20      	cmp	r3, #32
 8006af6:	d0f5      	beq.n	8006ae4 <create_name+0x12c>
 8006af8:	69bb      	ldr	r3, [r7, #24]
 8006afa:	005b      	lsls	r3, r3, #1
 8006afc:	68fa      	ldr	r2, [r7, #12]
 8006afe:	4413      	add	r3, r2
 8006b00:	881b      	ldrh	r3, [r3, #0]
 8006b02:	2b2e      	cmp	r3, #46	; 0x2e
 8006b04:	d0ee      	beq.n	8006ae4 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8006b06:	69bb      	ldr	r3, [r7, #24]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d009      	beq.n	8006b20 <create_name+0x168>
 8006b0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b10:	f043 0303 	orr.w	r3, r3, #3
 8006b14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8006b18:	e002      	b.n	8006b20 <create_name+0x168>
 8006b1a:	697b      	ldr	r3, [r7, #20]
 8006b1c:	3b01      	subs	r3, #1
 8006b1e:	617b      	str	r3, [r7, #20]
 8006b20:	697b      	ldr	r3, [r7, #20]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d009      	beq.n	8006b3a <create_name+0x182>
 8006b26:	697b      	ldr	r3, [r7, #20]
 8006b28:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006b2c:	3b01      	subs	r3, #1
 8006b2e:	005b      	lsls	r3, r3, #1
 8006b30:	68fa      	ldr	r2, [r7, #12]
 8006b32:	4413      	add	r3, r2
 8006b34:	881b      	ldrh	r3, [r3, #0]
 8006b36:	2b2e      	cmp	r3, #46	; 0x2e
 8006b38:	d1ef      	bne.n	8006b1a <create_name+0x162>

	i = b = 0; ni = 8;
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006b40:	2300      	movs	r3, #0
 8006b42:	623b      	str	r3, [r7, #32]
 8006b44:	2308      	movs	r3, #8
 8006b46:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8006b48:	69bb      	ldr	r3, [r7, #24]
 8006b4a:	1c5a      	adds	r2, r3, #1
 8006b4c:	61ba      	str	r2, [r7, #24]
 8006b4e:	005b      	lsls	r3, r3, #1
 8006b50:	68fa      	ldr	r2, [r7, #12]
 8006b52:	4413      	add	r3, r2
 8006b54:	881b      	ldrh	r3, [r3, #0]
 8006b56:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8006b58:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	f000 8090 	beq.w	8006c80 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8006b60:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006b62:	2b20      	cmp	r3, #32
 8006b64:	d006      	beq.n	8006b74 <create_name+0x1bc>
 8006b66:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006b68:	2b2e      	cmp	r3, #46	; 0x2e
 8006b6a:	d10a      	bne.n	8006b82 <create_name+0x1ca>
 8006b6c:	69ba      	ldr	r2, [r7, #24]
 8006b6e:	697b      	ldr	r3, [r7, #20]
 8006b70:	429a      	cmp	r2, r3
 8006b72:	d006      	beq.n	8006b82 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8006b74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b78:	f043 0303 	orr.w	r3, r3, #3
 8006b7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006b80:	e07d      	b.n	8006c7e <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8006b82:	6a3a      	ldr	r2, [r7, #32]
 8006b84:	69fb      	ldr	r3, [r7, #28]
 8006b86:	429a      	cmp	r2, r3
 8006b88:	d203      	bcs.n	8006b92 <create_name+0x1da>
 8006b8a:	69ba      	ldr	r2, [r7, #24]
 8006b8c:	697b      	ldr	r3, [r7, #20]
 8006b8e:	429a      	cmp	r2, r3
 8006b90:	d123      	bne.n	8006bda <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8006b92:	69fb      	ldr	r3, [r7, #28]
 8006b94:	2b0b      	cmp	r3, #11
 8006b96:	d106      	bne.n	8006ba6 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8006b98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006b9c:	f043 0303 	orr.w	r3, r3, #3
 8006ba0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006ba4:	e075      	b.n	8006c92 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8006ba6:	69ba      	ldr	r2, [r7, #24]
 8006ba8:	697b      	ldr	r3, [r7, #20]
 8006baa:	429a      	cmp	r2, r3
 8006bac:	d005      	beq.n	8006bba <create_name+0x202>
 8006bae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006bb2:	f043 0303 	orr.w	r3, r3, #3
 8006bb6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8006bba:	69ba      	ldr	r2, [r7, #24]
 8006bbc:	697b      	ldr	r3, [r7, #20]
 8006bbe:	429a      	cmp	r2, r3
 8006bc0:	d866      	bhi.n	8006c90 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8006bc2:	697b      	ldr	r3, [r7, #20]
 8006bc4:	61bb      	str	r3, [r7, #24]
 8006bc6:	2308      	movs	r3, #8
 8006bc8:	623b      	str	r3, [r7, #32]
 8006bca:	230b      	movs	r3, #11
 8006bcc:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8006bce:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006bd2:	009b      	lsls	r3, r3, #2
 8006bd4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006bd8:	e051      	b.n	8006c7e <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8006bda:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006bdc:	2b7f      	cmp	r3, #127	; 0x7f
 8006bde:	d914      	bls.n	8006c0a <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8006be0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006be2:	2100      	movs	r1, #0
 8006be4:	4618      	mov	r0, r3
 8006be6:	f001 fd1f 	bl	8008628 <ff_convert>
 8006bea:	4603      	mov	r3, r0
 8006bec:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8006bee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d004      	beq.n	8006bfe <create_name+0x246>
 8006bf4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006bf6:	3b80      	subs	r3, #128	; 0x80
 8006bf8:	4a23      	ldr	r2, [pc, #140]	; (8006c88 <create_name+0x2d0>)
 8006bfa:	5cd3      	ldrb	r3, [r2, r3]
 8006bfc:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8006bfe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006c02:	f043 0302 	orr.w	r3, r3, #2
 8006c06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8006c0a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d007      	beq.n	8006c20 <create_name+0x268>
 8006c10:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006c12:	4619      	mov	r1, r3
 8006c14:	481d      	ldr	r0, [pc, #116]	; (8006c8c <create_name+0x2d4>)
 8006c16:	f7fe fbca 	bl	80053ae <chk_chr>
 8006c1a:	4603      	mov	r3, r0
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d008      	beq.n	8006c32 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8006c20:	235f      	movs	r3, #95	; 0x5f
 8006c22:	84bb      	strh	r3, [r7, #36]	; 0x24
 8006c24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006c28:	f043 0303 	orr.w	r3, r3, #3
 8006c2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006c30:	e01b      	b.n	8006c6a <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8006c32:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006c34:	2b40      	cmp	r3, #64	; 0x40
 8006c36:	d909      	bls.n	8006c4c <create_name+0x294>
 8006c38:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006c3a:	2b5a      	cmp	r3, #90	; 0x5a
 8006c3c:	d806      	bhi.n	8006c4c <create_name+0x294>
					b |= 2;
 8006c3e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006c42:	f043 0302 	orr.w	r3, r3, #2
 8006c46:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006c4a:	e00e      	b.n	8006c6a <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8006c4c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006c4e:	2b60      	cmp	r3, #96	; 0x60
 8006c50:	d90b      	bls.n	8006c6a <create_name+0x2b2>
 8006c52:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006c54:	2b7a      	cmp	r3, #122	; 0x7a
 8006c56:	d808      	bhi.n	8006c6a <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8006c58:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006c5c:	f043 0301 	orr.w	r3, r3, #1
 8006c60:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006c64:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006c66:	3b20      	subs	r3, #32
 8006c68:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8006c6a:	6a3b      	ldr	r3, [r7, #32]
 8006c6c:	1c5a      	adds	r2, r3, #1
 8006c6e:	623a      	str	r2, [r7, #32]
 8006c70:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006c72:	b2d1      	uxtb	r1, r2
 8006c74:	687a      	ldr	r2, [r7, #4]
 8006c76:	4413      	add	r3, r2
 8006c78:	460a      	mov	r2, r1
 8006c7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8006c7e:	e763      	b.n	8006b48 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8006c80:	bf00      	nop
 8006c82:	e006      	b.n	8006c92 <create_name+0x2da>
 8006c84:	0800d8d8 	.word	0x0800d8d8
 8006c88:	0800db70 	.word	0x0800db70
 8006c8c:	0800d8e4 	.word	0x0800d8e4
			if (si > di) break;			/* No extension */
 8006c90:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006c98:	2be5      	cmp	r3, #229	; 0xe5
 8006c9a:	d103      	bne.n	8006ca4 <create_name+0x2ec>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2205      	movs	r2, #5
 8006ca0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8006ca4:	69fb      	ldr	r3, [r7, #28]
 8006ca6:	2b08      	cmp	r3, #8
 8006ca8:	d104      	bne.n	8006cb4 <create_name+0x2fc>
 8006caa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006cae:	009b      	lsls	r3, r3, #2
 8006cb0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8006cb4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006cb8:	f003 030c 	and.w	r3, r3, #12
 8006cbc:	2b0c      	cmp	r3, #12
 8006cbe:	d005      	beq.n	8006ccc <create_name+0x314>
 8006cc0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006cc4:	f003 0303 	and.w	r3, r3, #3
 8006cc8:	2b03      	cmp	r3, #3
 8006cca:	d105      	bne.n	8006cd8 <create_name+0x320>
 8006ccc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006cd0:	f043 0302 	orr.w	r3, r3, #2
 8006cd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8006cd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006cdc:	f003 0302 	and.w	r3, r3, #2
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d117      	bne.n	8006d14 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8006ce4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006ce8:	f003 0303 	and.w	r3, r3, #3
 8006cec:	2b01      	cmp	r3, #1
 8006cee:	d105      	bne.n	8006cfc <create_name+0x344>
 8006cf0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006cf4:	f043 0310 	orr.w	r3, r3, #16
 8006cf8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8006cfc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006d00:	f003 030c 	and.w	r3, r3, #12
 8006d04:	2b04      	cmp	r3, #4
 8006d06:	d105      	bne.n	8006d14 <create_name+0x35c>
 8006d08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006d0c:	f043 0308 	orr.w	r3, r3, #8
 8006d10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8006d1a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8006d1e:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8006d20:	4618      	mov	r0, r3
 8006d22:	3728      	adds	r7, #40	; 0x28
 8006d24:	46bd      	mov	sp, r7
 8006d26:	bd80      	pop	{r7, pc}

08006d28 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b086      	sub	sp, #24
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
 8006d30:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8006d36:	693b      	ldr	r3, [r7, #16]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8006d3c:	e002      	b.n	8006d44 <follow_path+0x1c>
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	3301      	adds	r3, #1
 8006d42:	603b      	str	r3, [r7, #0]
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	781b      	ldrb	r3, [r3, #0]
 8006d48:	2b2f      	cmp	r3, #47	; 0x2f
 8006d4a:	d0f8      	beq.n	8006d3e <follow_path+0x16>
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	781b      	ldrb	r3, [r3, #0]
 8006d50:	2b5c      	cmp	r3, #92	; 0x5c
 8006d52:	d0f4      	beq.n	8006d3e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8006d54:	693b      	ldr	r3, [r7, #16]
 8006d56:	2200      	movs	r2, #0
 8006d58:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	781b      	ldrb	r3, [r3, #0]
 8006d5e:	2b1f      	cmp	r3, #31
 8006d60:	d80a      	bhi.n	8006d78 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2280      	movs	r2, #128	; 0x80
 8006d66:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8006d6a:	2100      	movs	r1, #0
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	f7ff f8fd 	bl	8005f6c <dir_sdi>
 8006d72:	4603      	mov	r3, r0
 8006d74:	75fb      	strb	r3, [r7, #23]
 8006d76:	e048      	b.n	8006e0a <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006d78:	463b      	mov	r3, r7
 8006d7a:	4619      	mov	r1, r3
 8006d7c:	6878      	ldr	r0, [r7, #4]
 8006d7e:	f7ff fe1b 	bl	80069b8 <create_name>
 8006d82:	4603      	mov	r3, r0
 8006d84:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006d86:	7dfb      	ldrb	r3, [r7, #23]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d139      	bne.n	8006e00 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8006d8c:	6878      	ldr	r0, [r7, #4]
 8006d8e:	f7ff fc5a 	bl	8006646 <dir_find>
 8006d92:	4603      	mov	r3, r0
 8006d94:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006d9c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8006d9e:	7dfb      	ldrb	r3, [r7, #23]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d00a      	beq.n	8006dba <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006da4:	7dfb      	ldrb	r3, [r7, #23]
 8006da6:	2b04      	cmp	r3, #4
 8006da8:	d12c      	bne.n	8006e04 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8006daa:	7afb      	ldrb	r3, [r7, #11]
 8006dac:	f003 0304 	and.w	r3, r3, #4
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d127      	bne.n	8006e04 <follow_path+0xdc>
 8006db4:	2305      	movs	r3, #5
 8006db6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8006db8:	e024      	b.n	8006e04 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006dba:	7afb      	ldrb	r3, [r7, #11]
 8006dbc:	f003 0304 	and.w	r3, r3, #4
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d121      	bne.n	8006e08 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8006dc4:	693b      	ldr	r3, [r7, #16]
 8006dc6:	799b      	ldrb	r3, [r3, #6]
 8006dc8:	f003 0310 	and.w	r3, r3, #16
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d102      	bne.n	8006dd6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8006dd0:	2305      	movs	r3, #5
 8006dd2:	75fb      	strb	r3, [r7, #23]
 8006dd4:	e019      	b.n	8006e0a <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	695b      	ldr	r3, [r3, #20]
 8006de0:	68fa      	ldr	r2, [r7, #12]
 8006de2:	8992      	ldrh	r2, [r2, #12]
 8006de4:	fbb3 f0f2 	udiv	r0, r3, r2
 8006de8:	fb00 f202 	mul.w	r2, r0, r2
 8006dec:	1a9b      	subs	r3, r3, r2
 8006dee:	440b      	add	r3, r1
 8006df0:	4619      	mov	r1, r3
 8006df2:	68f8      	ldr	r0, [r7, #12]
 8006df4:	f7ff fa60 	bl	80062b8 <ld_clust>
 8006df8:	4602      	mov	r2, r0
 8006dfa:	693b      	ldr	r3, [r7, #16]
 8006dfc:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006dfe:	e7bb      	b.n	8006d78 <follow_path+0x50>
			if (res != FR_OK) break;
 8006e00:	bf00      	nop
 8006e02:	e002      	b.n	8006e0a <follow_path+0xe2>
				break;
 8006e04:	bf00      	nop
 8006e06:	e000      	b.n	8006e0a <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006e08:	bf00      	nop
			}
		}
	}

	return res;
 8006e0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	3718      	adds	r7, #24
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bd80      	pop	{r7, pc}

08006e14 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8006e14:	b480      	push	{r7}
 8006e16:	b087      	sub	sp, #28
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8006e1c:	f04f 33ff 	mov.w	r3, #4294967295
 8006e20:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d031      	beq.n	8006e8e <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	617b      	str	r3, [r7, #20]
 8006e30:	e002      	b.n	8006e38 <get_ldnumber+0x24>
 8006e32:	697b      	ldr	r3, [r7, #20]
 8006e34:	3301      	adds	r3, #1
 8006e36:	617b      	str	r3, [r7, #20]
 8006e38:	697b      	ldr	r3, [r7, #20]
 8006e3a:	781b      	ldrb	r3, [r3, #0]
 8006e3c:	2b1f      	cmp	r3, #31
 8006e3e:	d903      	bls.n	8006e48 <get_ldnumber+0x34>
 8006e40:	697b      	ldr	r3, [r7, #20]
 8006e42:	781b      	ldrb	r3, [r3, #0]
 8006e44:	2b3a      	cmp	r3, #58	; 0x3a
 8006e46:	d1f4      	bne.n	8006e32 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8006e48:	697b      	ldr	r3, [r7, #20]
 8006e4a:	781b      	ldrb	r3, [r3, #0]
 8006e4c:	2b3a      	cmp	r3, #58	; 0x3a
 8006e4e:	d11c      	bne.n	8006e8a <get_ldnumber+0x76>
			tp = *path;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	1c5a      	adds	r2, r3, #1
 8006e5a:	60fa      	str	r2, [r7, #12]
 8006e5c:	781b      	ldrb	r3, [r3, #0]
 8006e5e:	3b30      	subs	r3, #48	; 0x30
 8006e60:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	2b09      	cmp	r3, #9
 8006e66:	d80e      	bhi.n	8006e86 <get_ldnumber+0x72>
 8006e68:	68fa      	ldr	r2, [r7, #12]
 8006e6a:	697b      	ldr	r3, [r7, #20]
 8006e6c:	429a      	cmp	r2, r3
 8006e6e:	d10a      	bne.n	8006e86 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d107      	bne.n	8006e86 <get_ldnumber+0x72>
					vol = (int)i;
 8006e76:	68bb      	ldr	r3, [r7, #8]
 8006e78:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8006e7a:	697b      	ldr	r3, [r7, #20]
 8006e7c:	3301      	adds	r3, #1
 8006e7e:	617b      	str	r3, [r7, #20]
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	697a      	ldr	r2, [r7, #20]
 8006e84:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8006e86:	693b      	ldr	r3, [r7, #16]
 8006e88:	e002      	b.n	8006e90 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8006e8e:	693b      	ldr	r3, [r7, #16]
}
 8006e90:	4618      	mov	r0, r3
 8006e92:	371c      	adds	r7, #28
 8006e94:	46bd      	mov	sp, r7
 8006e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9a:	4770      	bx	lr

08006e9c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b082      	sub	sp, #8
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
 8006ea4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	70da      	strb	r2, [r3, #3]
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f04f 32ff 	mov.w	r2, #4294967295
 8006eb2:	639a      	str	r2, [r3, #56]	; 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8006eb4:	6839      	ldr	r1, [r7, #0]
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	f7fe fc76 	bl	80057a8 <move_window>
 8006ebc:	4603      	mov	r3, r0
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d001      	beq.n	8006ec6 <check_fs+0x2a>
 8006ec2:	2304      	movs	r3, #4
 8006ec4:	e038      	b.n	8006f38 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	333c      	adds	r3, #60	; 0x3c
 8006eca:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006ece:	4618      	mov	r0, r3
 8006ed0:	f7fe f988 	bl	80051e4 <ld_word>
 8006ed4:	4603      	mov	r3, r0
 8006ed6:	461a      	mov	r2, r3
 8006ed8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8006edc:	429a      	cmp	r2, r3
 8006ede:	d001      	beq.n	8006ee4 <check_fs+0x48>
 8006ee0:	2303      	movs	r3, #3
 8006ee2:	e029      	b.n	8006f38 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006eea:	2be9      	cmp	r3, #233	; 0xe9
 8006eec:	d009      	beq.n	8006f02 <check_fs+0x66>
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ef4:	2beb      	cmp	r3, #235	; 0xeb
 8006ef6:	d11e      	bne.n	8006f36 <check_fs+0x9a>
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006efe:	2b90      	cmp	r3, #144	; 0x90
 8006f00:	d119      	bne.n	8006f36 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	333c      	adds	r3, #60	; 0x3c
 8006f06:	3336      	adds	r3, #54	; 0x36
 8006f08:	4618      	mov	r0, r3
 8006f0a:	f7fe f983 	bl	8005214 <ld_dword>
 8006f0e:	4603      	mov	r3, r0
 8006f10:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006f14:	4a0a      	ldr	r2, [pc, #40]	; (8006f40 <check_fs+0xa4>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d101      	bne.n	8006f1e <check_fs+0x82>
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	e00c      	b.n	8006f38 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	333c      	adds	r3, #60	; 0x3c
 8006f22:	3352      	adds	r3, #82	; 0x52
 8006f24:	4618      	mov	r0, r3
 8006f26:	f7fe f975 	bl	8005214 <ld_dword>
 8006f2a:	4603      	mov	r3, r0
 8006f2c:	4a05      	ldr	r2, [pc, #20]	; (8006f44 <check_fs+0xa8>)
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d101      	bne.n	8006f36 <check_fs+0x9a>
 8006f32:	2300      	movs	r3, #0
 8006f34:	e000      	b.n	8006f38 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8006f36:	2302      	movs	r3, #2
}
 8006f38:	4618      	mov	r0, r3
 8006f3a:	3708      	adds	r7, #8
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	bd80      	pop	{r7, pc}
 8006f40:	00544146 	.word	0x00544146
 8006f44:	33544146 	.word	0x33544146

08006f48 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b096      	sub	sp, #88	; 0x58
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	60f8      	str	r0, [r7, #12]
 8006f50:	60b9      	str	r1, [r7, #8]
 8006f52:	4613      	mov	r3, r2
 8006f54:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8006f56:	68bb      	ldr	r3, [r7, #8]
 8006f58:	2200      	movs	r2, #0
 8006f5a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8006f5c:	68f8      	ldr	r0, [r7, #12]
 8006f5e:	f7ff ff59 	bl	8006e14 <get_ldnumber>
 8006f62:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8006f64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	da01      	bge.n	8006f6e <find_volume+0x26>
 8006f6a:	230b      	movs	r3, #11
 8006f6c:	e26a      	b.n	8007444 <find_volume+0x4fc>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8006f6e:	4aa3      	ldr	r2, [pc, #652]	; (80071fc <find_volume+0x2b4>)
 8006f70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f76:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006f78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d101      	bne.n	8006f82 <find_volume+0x3a>
 8006f7e:	230c      	movs	r3, #12
 8006f80:	e260      	b.n	8007444 <find_volume+0x4fc>

	ENTER_FF(fs);						/* Lock the volume */
 8006f82:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006f84:	f7fe fa2e 	bl	80053e4 <lock_fs>
 8006f88:	4603      	mov	r3, r0
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d101      	bne.n	8006f92 <find_volume+0x4a>
 8006f8e:	230f      	movs	r3, #15
 8006f90:	e258      	b.n	8007444 <find_volume+0x4fc>
	*rfs = fs;							/* Return pointer to the file system object */
 8006f92:	68bb      	ldr	r3, [r7, #8]
 8006f94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f96:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8006f98:	79fb      	ldrb	r3, [r7, #7]
 8006f9a:	f023 0301 	bic.w	r3, r3, #1
 8006f9e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8006fa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fa2:	781b      	ldrb	r3, [r3, #0]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d01a      	beq.n	8006fde <find_volume+0x96>
		stat = disk_status(fs->drv);
 8006fa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006faa:	785b      	ldrb	r3, [r3, #1]
 8006fac:	4618      	mov	r0, r3
 8006fae:	f7fe f87b 	bl	80050a8 <disk_status>
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8006fb8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006fbc:	f003 0301 	and.w	r3, r3, #1
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d10c      	bne.n	8006fde <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8006fc4:	79fb      	ldrb	r3, [r7, #7]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d007      	beq.n	8006fda <find_volume+0x92>
 8006fca:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006fce:	f003 0304 	and.w	r3, r3, #4
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d001      	beq.n	8006fda <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 8006fd6:	230a      	movs	r3, #10
 8006fd8:	e234      	b.n	8007444 <find_volume+0x4fc>
			}
			return FR_OK;				/* The file system object is valid */
 8006fda:	2300      	movs	r3, #0
 8006fdc:	e232      	b.n	8007444 <find_volume+0x4fc>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8006fde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8006fe4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fe6:	b2da      	uxtb	r2, r3
 8006fe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fea:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8006fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fee:	785b      	ldrb	r3, [r3, #1]
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	f7fe f873 	bl	80050dc <disk_initialize>
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8006ffc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007000:	f003 0301 	and.w	r3, r3, #1
 8007004:	2b00      	cmp	r3, #0
 8007006:	d001      	beq.n	800700c <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007008:	2303      	movs	r3, #3
 800700a:	e21b      	b.n	8007444 <find_volume+0x4fc>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800700c:	79fb      	ldrb	r3, [r7, #7]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d007      	beq.n	8007022 <find_volume+0xda>
 8007012:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007016:	f003 0304 	and.w	r3, r3, #4
 800701a:	2b00      	cmp	r3, #0
 800701c:	d001      	beq.n	8007022 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800701e:	230a      	movs	r3, #10
 8007020:	e210      	b.n	8007444 <find_volume+0x4fc>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8007022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007024:	7858      	ldrb	r0, [r3, #1]
 8007026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007028:	330c      	adds	r3, #12
 800702a:	461a      	mov	r2, r3
 800702c:	2102      	movs	r1, #2
 800702e:	f7fe f8bb 	bl	80051a8 <disk_ioctl>
 8007032:	4603      	mov	r3, r0
 8007034:	2b00      	cmp	r3, #0
 8007036:	d001      	beq.n	800703c <find_volume+0xf4>
 8007038:	2301      	movs	r3, #1
 800703a:	e203      	b.n	8007444 <find_volume+0x4fc>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800703c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800703e:	899b      	ldrh	r3, [r3, #12]
 8007040:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007044:	d80d      	bhi.n	8007062 <find_volume+0x11a>
 8007046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007048:	899b      	ldrh	r3, [r3, #12]
 800704a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800704e:	d308      	bcc.n	8007062 <find_volume+0x11a>
 8007050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007052:	899b      	ldrh	r3, [r3, #12]
 8007054:	461a      	mov	r2, r3
 8007056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007058:	899b      	ldrh	r3, [r3, #12]
 800705a:	3b01      	subs	r3, #1
 800705c:	4013      	ands	r3, r2
 800705e:	2b00      	cmp	r3, #0
 8007060:	d001      	beq.n	8007066 <find_volume+0x11e>
 8007062:	2301      	movs	r3, #1
 8007064:	e1ee      	b.n	8007444 <find_volume+0x4fc>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8007066:	2300      	movs	r3, #0
 8007068:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800706a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800706c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800706e:	f7ff ff15 	bl	8006e9c <check_fs>
 8007072:	4603      	mov	r3, r0
 8007074:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8007078:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800707c:	2b02      	cmp	r3, #2
 800707e:	d149      	bne.n	8007114 <find_volume+0x1cc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007080:	2300      	movs	r3, #0
 8007082:	643b      	str	r3, [r7, #64]	; 0x40
 8007084:	e01e      	b.n	80070c4 <find_volume+0x17c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8007086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007088:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800708c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800708e:	011b      	lsls	r3, r3, #4
 8007090:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8007094:	4413      	add	r3, r2
 8007096:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8007098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800709a:	3304      	adds	r3, #4
 800709c:	781b      	ldrb	r3, [r3, #0]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d006      	beq.n	80070b0 <find_volume+0x168>
 80070a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070a4:	3308      	adds	r3, #8
 80070a6:	4618      	mov	r0, r3
 80070a8:	f7fe f8b4 	bl	8005214 <ld_dword>
 80070ac:	4602      	mov	r2, r0
 80070ae:	e000      	b.n	80070b2 <find_volume+0x16a>
 80070b0:	2200      	movs	r2, #0
 80070b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80070b4:	009b      	lsls	r3, r3, #2
 80070b6:	3358      	adds	r3, #88	; 0x58
 80070b8:	443b      	add	r3, r7
 80070ba:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80070be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80070c0:	3301      	adds	r3, #1
 80070c2:	643b      	str	r3, [r7, #64]	; 0x40
 80070c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80070c6:	2b03      	cmp	r3, #3
 80070c8:	d9dd      	bls.n	8007086 <find_volume+0x13e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80070ca:	2300      	movs	r3, #0
 80070cc:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80070ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d002      	beq.n	80070da <find_volume+0x192>
 80070d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80070d6:	3b01      	subs	r3, #1
 80070d8:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80070da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80070dc:	009b      	lsls	r3, r3, #2
 80070de:	3358      	adds	r3, #88	; 0x58
 80070e0:	443b      	add	r3, r7
 80070e2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80070e6:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80070e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d005      	beq.n	80070fa <find_volume+0x1b2>
 80070ee:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80070f0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80070f2:	f7ff fed3 	bl	8006e9c <check_fs>
 80070f6:	4603      	mov	r3, r0
 80070f8:	e000      	b.n	80070fc <find_volume+0x1b4>
 80070fa:	2303      	movs	r3, #3
 80070fc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8007100:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007104:	2b01      	cmp	r3, #1
 8007106:	d905      	bls.n	8007114 <find_volume+0x1cc>
 8007108:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800710a:	3301      	adds	r3, #1
 800710c:	643b      	str	r3, [r7, #64]	; 0x40
 800710e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007110:	2b03      	cmp	r3, #3
 8007112:	d9e2      	bls.n	80070da <find_volume+0x192>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007114:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007118:	2b04      	cmp	r3, #4
 800711a:	d101      	bne.n	8007120 <find_volume+0x1d8>
 800711c:	2301      	movs	r3, #1
 800711e:	e191      	b.n	8007444 <find_volume+0x4fc>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8007120:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007124:	2b01      	cmp	r3, #1
 8007126:	d901      	bls.n	800712c <find_volume+0x1e4>
 8007128:	230d      	movs	r3, #13
 800712a:	e18b      	b.n	8007444 <find_volume+0x4fc>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800712c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800712e:	333c      	adds	r3, #60	; 0x3c
 8007130:	330b      	adds	r3, #11
 8007132:	4618      	mov	r0, r3
 8007134:	f7fe f856 	bl	80051e4 <ld_word>
 8007138:	4603      	mov	r3, r0
 800713a:	461a      	mov	r2, r3
 800713c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800713e:	899b      	ldrh	r3, [r3, #12]
 8007140:	429a      	cmp	r2, r3
 8007142:	d001      	beq.n	8007148 <find_volume+0x200>
 8007144:	230d      	movs	r3, #13
 8007146:	e17d      	b.n	8007444 <find_volume+0x4fc>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8007148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800714a:	333c      	adds	r3, #60	; 0x3c
 800714c:	3316      	adds	r3, #22
 800714e:	4618      	mov	r0, r3
 8007150:	f7fe f848 	bl	80051e4 <ld_word>
 8007154:	4603      	mov	r3, r0
 8007156:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8007158:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800715a:	2b00      	cmp	r3, #0
 800715c:	d106      	bne.n	800716c <find_volume+0x224>
 800715e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007160:	333c      	adds	r3, #60	; 0x3c
 8007162:	3324      	adds	r3, #36	; 0x24
 8007164:	4618      	mov	r0, r3
 8007166:	f7fe f855 	bl	8005214 <ld_dword>
 800716a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800716c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800716e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007170:	625a      	str	r2, [r3, #36]	; 0x24

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8007172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007174:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 8007178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800717a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800717c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800717e:	789b      	ldrb	r3, [r3, #2]
 8007180:	2b01      	cmp	r3, #1
 8007182:	d005      	beq.n	8007190 <find_volume+0x248>
 8007184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007186:	789b      	ldrb	r3, [r3, #2]
 8007188:	2b02      	cmp	r3, #2
 800718a:	d001      	beq.n	8007190 <find_volume+0x248>
 800718c:	230d      	movs	r3, #13
 800718e:	e159      	b.n	8007444 <find_volume+0x4fc>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8007190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007192:	789b      	ldrb	r3, [r3, #2]
 8007194:	461a      	mov	r2, r3
 8007196:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007198:	fb02 f303 	mul.w	r3, r2, r3
 800719c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800719e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071a0:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80071a4:	b29a      	uxth	r2, r3
 80071a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071a8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80071aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071ac:	895b      	ldrh	r3, [r3, #10]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d008      	beq.n	80071c4 <find_volume+0x27c>
 80071b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071b4:	895b      	ldrh	r3, [r3, #10]
 80071b6:	461a      	mov	r2, r3
 80071b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071ba:	895b      	ldrh	r3, [r3, #10]
 80071bc:	3b01      	subs	r3, #1
 80071be:	4013      	ands	r3, r2
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d001      	beq.n	80071c8 <find_volume+0x280>
 80071c4:	230d      	movs	r3, #13
 80071c6:	e13d      	b.n	8007444 <find_volume+0x4fc>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80071c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071ca:	333c      	adds	r3, #60	; 0x3c
 80071cc:	3311      	adds	r3, #17
 80071ce:	4618      	mov	r0, r3
 80071d0:	f7fe f808 	bl	80051e4 <ld_word>
 80071d4:	4603      	mov	r3, r0
 80071d6:	461a      	mov	r2, r3
 80071d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071da:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80071dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071de:	891b      	ldrh	r3, [r3, #8]
 80071e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80071e2:	8992      	ldrh	r2, [r2, #12]
 80071e4:	0952      	lsrs	r2, r2, #5
 80071e6:	b292      	uxth	r2, r2
 80071e8:	fbb3 f1f2 	udiv	r1, r3, r2
 80071ec:	fb01 f202 	mul.w	r2, r1, r2
 80071f0:	1a9b      	subs	r3, r3, r2
 80071f2:	b29b      	uxth	r3, r3
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d003      	beq.n	8007200 <find_volume+0x2b8>
 80071f8:	230d      	movs	r3, #13
 80071fa:	e123      	b.n	8007444 <find_volume+0x4fc>
 80071fc:	2000147c 	.word	0x2000147c

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8007200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007202:	333c      	adds	r3, #60	; 0x3c
 8007204:	3313      	adds	r3, #19
 8007206:	4618      	mov	r0, r3
 8007208:	f7fd ffec 	bl	80051e4 <ld_word>
 800720c:	4603      	mov	r3, r0
 800720e:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8007210:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007212:	2b00      	cmp	r3, #0
 8007214:	d106      	bne.n	8007224 <find_volume+0x2dc>
 8007216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007218:	333c      	adds	r3, #60	; 0x3c
 800721a:	3320      	adds	r3, #32
 800721c:	4618      	mov	r0, r3
 800721e:	f7fd fff9 	bl	8005214 <ld_dword>
 8007222:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8007224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007226:	333c      	adds	r3, #60	; 0x3c
 8007228:	330e      	adds	r3, #14
 800722a:	4618      	mov	r0, r3
 800722c:	f7fd ffda 	bl	80051e4 <ld_word>
 8007230:	4603      	mov	r3, r0
 8007232:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8007234:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007236:	2b00      	cmp	r3, #0
 8007238:	d101      	bne.n	800723e <find_volume+0x2f6>
 800723a:	230d      	movs	r3, #13
 800723c:	e102      	b.n	8007444 <find_volume+0x4fc>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800723e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007240:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007242:	4413      	add	r3, r2
 8007244:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007246:	8911      	ldrh	r1, [r2, #8]
 8007248:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800724a:	8992      	ldrh	r2, [r2, #12]
 800724c:	0952      	lsrs	r2, r2, #5
 800724e:	b292      	uxth	r2, r2
 8007250:	fbb1 f2f2 	udiv	r2, r1, r2
 8007254:	b292      	uxth	r2, r2
 8007256:	4413      	add	r3, r2
 8007258:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800725a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800725c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800725e:	429a      	cmp	r2, r3
 8007260:	d201      	bcs.n	8007266 <find_volume+0x31e>
 8007262:	230d      	movs	r3, #13
 8007264:	e0ee      	b.n	8007444 <find_volume+0x4fc>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8007266:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800726a:	1ad3      	subs	r3, r2, r3
 800726c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800726e:	8952      	ldrh	r2, [r2, #10]
 8007270:	fbb3 f3f2 	udiv	r3, r3, r2
 8007274:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007278:	2b00      	cmp	r3, #0
 800727a:	d101      	bne.n	8007280 <find_volume+0x338>
 800727c:	230d      	movs	r3, #13
 800727e:	e0e1      	b.n	8007444 <find_volume+0x4fc>
		fmt = FS_FAT32;
 8007280:	2303      	movs	r3, #3
 8007282:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8007286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007288:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800728c:	4293      	cmp	r3, r2
 800728e:	d802      	bhi.n	8007296 <find_volume+0x34e>
 8007290:	2302      	movs	r3, #2
 8007292:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8007296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007298:	f640 72f5 	movw	r2, #4085	; 0xff5
 800729c:	4293      	cmp	r3, r2
 800729e:	d802      	bhi.n	80072a6 <find_volume+0x35e>
 80072a0:	2301      	movs	r3, #1
 80072a2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80072a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072a8:	1c9a      	adds	r2, r3, #2
 80072aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072ac:	621a      	str	r2, [r3, #32]
		fs->volbase = bsect;							/* Volume start sector */
 80072ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072b0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80072b2:	629a      	str	r2, [r3, #40]	; 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80072b4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80072b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80072b8:	441a      	add	r2, r3
 80072ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072bc:	62da      	str	r2, [r3, #44]	; 0x2c
		fs->database = bsect + sysect;					/* Data start sector */
 80072be:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80072c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072c2:	441a      	add	r2, r3
 80072c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072c6:	635a      	str	r2, [r3, #52]	; 0x34
		if (fmt == FS_FAT32) {
 80072c8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80072cc:	2b03      	cmp	r3, #3
 80072ce:	d11e      	bne.n	800730e <find_volume+0x3c6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80072d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072d2:	333c      	adds	r3, #60	; 0x3c
 80072d4:	332a      	adds	r3, #42	; 0x2a
 80072d6:	4618      	mov	r0, r3
 80072d8:	f7fd ff84 	bl	80051e4 <ld_word>
 80072dc:	4603      	mov	r3, r0
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d001      	beq.n	80072e6 <find_volume+0x39e>
 80072e2:	230d      	movs	r3, #13
 80072e4:	e0ae      	b.n	8007444 <find_volume+0x4fc>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80072e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072e8:	891b      	ldrh	r3, [r3, #8]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d001      	beq.n	80072f2 <find_volume+0x3aa>
 80072ee:	230d      	movs	r3, #13
 80072f0:	e0a8      	b.n	8007444 <find_volume+0x4fc>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80072f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072f4:	333c      	adds	r3, #60	; 0x3c
 80072f6:	332c      	adds	r3, #44	; 0x2c
 80072f8:	4618      	mov	r0, r3
 80072fa:	f7fd ff8b 	bl	8005214 <ld_dword>
 80072fe:	4602      	mov	r2, r0
 8007300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007302:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8007304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007306:	6a1b      	ldr	r3, [r3, #32]
 8007308:	009b      	lsls	r3, r3, #2
 800730a:	647b      	str	r3, [r7, #68]	; 0x44
 800730c:	e01f      	b.n	800734e <find_volume+0x406>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800730e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007310:	891b      	ldrh	r3, [r3, #8]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d101      	bne.n	800731a <find_volume+0x3d2>
 8007316:	230d      	movs	r3, #13
 8007318:	e094      	b.n	8007444 <find_volume+0x4fc>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800731a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800731c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800731e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007320:	441a      	add	r2, r3
 8007322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007324:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007326:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800732a:	2b02      	cmp	r3, #2
 800732c:	d103      	bne.n	8007336 <find_volume+0x3ee>
 800732e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007330:	6a1b      	ldr	r3, [r3, #32]
 8007332:	005b      	lsls	r3, r3, #1
 8007334:	e00a      	b.n	800734c <find_volume+0x404>
 8007336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007338:	6a1a      	ldr	r2, [r3, #32]
 800733a:	4613      	mov	r3, r2
 800733c:	005b      	lsls	r3, r3, #1
 800733e:	4413      	add	r3, r2
 8007340:	085a      	lsrs	r2, r3, #1
 8007342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007344:	6a1b      	ldr	r3, [r3, #32]
 8007346:	f003 0301 	and.w	r3, r3, #1
 800734a:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800734c:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800734e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007350:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007354:	899b      	ldrh	r3, [r3, #12]
 8007356:	4619      	mov	r1, r3
 8007358:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800735a:	440b      	add	r3, r1
 800735c:	3b01      	subs	r3, #1
 800735e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007360:	8989      	ldrh	r1, [r1, #12]
 8007362:	fbb3 f3f1 	udiv	r3, r3, r1
 8007366:	429a      	cmp	r2, r3
 8007368:	d201      	bcs.n	800736e <find_volume+0x426>
 800736a:	230d      	movs	r3, #13
 800736c:	e06a      	b.n	8007444 <find_volume+0x4fc>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800736e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007370:	f04f 32ff 	mov.w	r2, #4294967295
 8007374:	61da      	str	r2, [r3, #28]
 8007376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007378:	69da      	ldr	r2, [r3, #28]
 800737a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800737c:	619a      	str	r2, [r3, #24]
		fs->fsi_flag = 0x80;
 800737e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007380:	2280      	movs	r2, #128	; 0x80
 8007382:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8007384:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007388:	2b03      	cmp	r3, #3
 800738a:	d149      	bne.n	8007420 <find_volume+0x4d8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800738c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800738e:	333c      	adds	r3, #60	; 0x3c
 8007390:	3330      	adds	r3, #48	; 0x30
 8007392:	4618      	mov	r0, r3
 8007394:	f7fd ff26 	bl	80051e4 <ld_word>
 8007398:	4603      	mov	r3, r0
 800739a:	2b01      	cmp	r3, #1
 800739c:	d140      	bne.n	8007420 <find_volume+0x4d8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800739e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80073a0:	3301      	adds	r3, #1
 80073a2:	4619      	mov	r1, r3
 80073a4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80073a6:	f7fe f9ff 	bl	80057a8 <move_window>
 80073aa:	4603      	mov	r3, r0
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d137      	bne.n	8007420 <find_volume+0x4d8>
		{
			fs->fsi_flag = 0;
 80073b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073b2:	2200      	movs	r2, #0
 80073b4:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80073b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073b8:	333c      	adds	r3, #60	; 0x3c
 80073ba:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80073be:	4618      	mov	r0, r3
 80073c0:	f7fd ff10 	bl	80051e4 <ld_word>
 80073c4:	4603      	mov	r3, r0
 80073c6:	461a      	mov	r2, r3
 80073c8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80073cc:	429a      	cmp	r2, r3
 80073ce:	d127      	bne.n	8007420 <find_volume+0x4d8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80073d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073d2:	333c      	adds	r3, #60	; 0x3c
 80073d4:	4618      	mov	r0, r3
 80073d6:	f7fd ff1d 	bl	8005214 <ld_dword>
 80073da:	4603      	mov	r3, r0
 80073dc:	4a1b      	ldr	r2, [pc, #108]	; (800744c <find_volume+0x504>)
 80073de:	4293      	cmp	r3, r2
 80073e0:	d11e      	bne.n	8007420 <find_volume+0x4d8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80073e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073e4:	333c      	adds	r3, #60	; 0x3c
 80073e6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80073ea:	4618      	mov	r0, r3
 80073ec:	f7fd ff12 	bl	8005214 <ld_dword>
 80073f0:	4603      	mov	r3, r0
 80073f2:	4a17      	ldr	r2, [pc, #92]	; (8007450 <find_volume+0x508>)
 80073f4:	4293      	cmp	r3, r2
 80073f6:	d113      	bne.n	8007420 <find_volume+0x4d8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80073f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073fa:	333c      	adds	r3, #60	; 0x3c
 80073fc:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8007400:	4618      	mov	r0, r3
 8007402:	f7fd ff07 	bl	8005214 <ld_dword>
 8007406:	4602      	mov	r2, r0
 8007408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800740a:	61da      	str	r2, [r3, #28]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800740c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800740e:	333c      	adds	r3, #60	; 0x3c
 8007410:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8007414:	4618      	mov	r0, r3
 8007416:	f7fd fefd 	bl	8005214 <ld_dword>
 800741a:	4602      	mov	r2, r0
 800741c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800741e:	619a      	str	r2, [r3, #24]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8007420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007422:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8007426:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8007428:	4b0a      	ldr	r3, [pc, #40]	; (8007454 <find_volume+0x50c>)
 800742a:	881b      	ldrh	r3, [r3, #0]
 800742c:	3301      	adds	r3, #1
 800742e:	b29a      	uxth	r2, r3
 8007430:	4b08      	ldr	r3, [pc, #32]	; (8007454 <find_volume+0x50c>)
 8007432:	801a      	strh	r2, [r3, #0]
 8007434:	4b07      	ldr	r3, [pc, #28]	; (8007454 <find_volume+0x50c>)
 8007436:	881a      	ldrh	r2, [r3, #0]
 8007438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800743a:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800743c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800743e:	f7fe f94b 	bl	80056d8 <clear_lock>
#endif
	return FR_OK;
 8007442:	2300      	movs	r3, #0
}
 8007444:	4618      	mov	r0, r3
 8007446:	3758      	adds	r7, #88	; 0x58
 8007448:	46bd      	mov	sp, r7
 800744a:	bd80      	pop	{r7, pc}
 800744c:	41615252 	.word	0x41615252
 8007450:	61417272 	.word	0x61417272
 8007454:	20001480 	.word	0x20001480

08007458 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b084      	sub	sp, #16
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
 8007460:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8007462:	2309      	movs	r3, #9
 8007464:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d02e      	beq.n	80074ca <validate+0x72>
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d02a      	beq.n	80074ca <validate+0x72>
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	781b      	ldrb	r3, [r3, #0]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d025      	beq.n	80074ca <validate+0x72>
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	889a      	ldrh	r2, [r3, #4]
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	88db      	ldrh	r3, [r3, #6]
 8007488:	429a      	cmp	r2, r3
 800748a:	d11e      	bne.n	80074ca <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	4618      	mov	r0, r3
 8007492:	f7fd ffa7 	bl	80053e4 <lock_fs>
 8007496:	4603      	mov	r3, r0
 8007498:	2b00      	cmp	r3, #0
 800749a:	d014      	beq.n	80074c6 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	785b      	ldrb	r3, [r3, #1]
 80074a2:	4618      	mov	r0, r3
 80074a4:	f7fd fe00 	bl	80050a8 <disk_status>
 80074a8:	4603      	mov	r3, r0
 80074aa:	f003 0301 	and.w	r3, r3, #1
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d102      	bne.n	80074b8 <validate+0x60>
				res = FR_OK;
 80074b2:	2300      	movs	r3, #0
 80074b4:	73fb      	strb	r3, [r7, #15]
 80074b6:	e008      	b.n	80074ca <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	2100      	movs	r1, #0
 80074be:	4618      	mov	r0, r3
 80074c0:	f7fd ffa6 	bl	8005410 <unlock_fs>
 80074c4:	e001      	b.n	80074ca <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 80074c6:	230f      	movs	r3, #15
 80074c8:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80074ca:	7bfb      	ldrb	r3, [r7, #15]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d102      	bne.n	80074d6 <validate+0x7e>
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	e000      	b.n	80074d8 <validate+0x80>
 80074d6:	2300      	movs	r3, #0
 80074d8:	683a      	ldr	r2, [r7, #0]
 80074da:	6013      	str	r3, [r2, #0]
	return res;
 80074dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80074de:	4618      	mov	r0, r3
 80074e0:	3710      	adds	r7, #16
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bd80      	pop	{r7, pc}
	...

080074e8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b088      	sub	sp, #32
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	60f8      	str	r0, [r7, #12]
 80074f0:	60b9      	str	r1, [r7, #8]
 80074f2:	4613      	mov	r3, r2
 80074f4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80074f6:	68bb      	ldr	r3, [r7, #8]
 80074f8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80074fa:	f107 0310 	add.w	r3, r7, #16
 80074fe:	4618      	mov	r0, r3
 8007500:	f7ff fc88 	bl	8006e14 <get_ldnumber>
 8007504:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8007506:	69fb      	ldr	r3, [r7, #28]
 8007508:	2b00      	cmp	r3, #0
 800750a:	da01      	bge.n	8007510 <f_mount+0x28>
 800750c:	230b      	movs	r3, #11
 800750e:	e048      	b.n	80075a2 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8007510:	4a26      	ldr	r2, [pc, #152]	; (80075ac <f_mount+0xc4>)
 8007512:	69fb      	ldr	r3, [r7, #28]
 8007514:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007518:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800751a:	69bb      	ldr	r3, [r7, #24]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d00f      	beq.n	8007540 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8007520:	69b8      	ldr	r0, [r7, #24]
 8007522:	f7fe f8d9 	bl	80056d8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 8007526:	69bb      	ldr	r3, [r7, #24]
 8007528:	695b      	ldr	r3, [r3, #20]
 800752a:	4618      	mov	r0, r3
 800752c:	f001 f95d 	bl	80087ea <ff_del_syncobj>
 8007530:	4603      	mov	r3, r0
 8007532:	2b00      	cmp	r3, #0
 8007534:	d101      	bne.n	800753a <f_mount+0x52>
 8007536:	2302      	movs	r3, #2
 8007538:	e033      	b.n	80075a2 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800753a:	69bb      	ldr	r3, [r7, #24]
 800753c:	2200      	movs	r2, #0
 800753e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d00f      	beq.n	8007566 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	2200      	movs	r2, #0
 800754a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800754c:	69fb      	ldr	r3, [r7, #28]
 800754e:	b2da      	uxtb	r2, r3
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	3314      	adds	r3, #20
 8007554:	4619      	mov	r1, r3
 8007556:	4610      	mov	r0, r2
 8007558:	f001 f92c 	bl	80087b4 <ff_cre_syncobj>
 800755c:	4603      	mov	r3, r0
 800755e:	2b00      	cmp	r3, #0
 8007560:	d101      	bne.n	8007566 <f_mount+0x7e>
 8007562:	2302      	movs	r3, #2
 8007564:	e01d      	b.n	80075a2 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8007566:	68fa      	ldr	r2, [r7, #12]
 8007568:	4910      	ldr	r1, [pc, #64]	; (80075ac <f_mount+0xc4>)
 800756a:	69fb      	ldr	r3, [r7, #28]
 800756c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d002      	beq.n	800757c <f_mount+0x94>
 8007576:	79fb      	ldrb	r3, [r7, #7]
 8007578:	2b01      	cmp	r3, #1
 800757a:	d001      	beq.n	8007580 <f_mount+0x98>
 800757c:	2300      	movs	r3, #0
 800757e:	e010      	b.n	80075a2 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8007580:	f107 010c 	add.w	r1, r7, #12
 8007584:	f107 0308 	add.w	r3, r7, #8
 8007588:	2200      	movs	r2, #0
 800758a:	4618      	mov	r0, r3
 800758c:	f7ff fcdc 	bl	8006f48 <find_volume>
 8007590:	4603      	mov	r3, r0
 8007592:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	7dfa      	ldrb	r2, [r7, #23]
 8007598:	4611      	mov	r1, r2
 800759a:	4618      	mov	r0, r3
 800759c:	f7fd ff38 	bl	8005410 <unlock_fs>
 80075a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80075a2:	4618      	mov	r0, r3
 80075a4:	3720      	adds	r7, #32
 80075a6:	46bd      	mov	sp, r7
 80075a8:	bd80      	pop	{r7, pc}
 80075aa:	bf00      	nop
 80075ac:	2000147c 	.word	0x2000147c

080075b0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
 80075b6:	af00      	add	r7, sp, #0
 80075b8:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80075bc:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80075c0:	6018      	str	r0, [r3, #0]
 80075c2:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80075c6:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80075ca:	6019      	str	r1, [r3, #0]
 80075cc:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80075d0:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 80075d4:	701a      	strb	r2, [r3, #0]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80075d6:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80075da:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d101      	bne.n	80075e8 <f_open+0x38>
 80075e4:	2309      	movs	r3, #9
 80075e6:	e2ae      	b.n	8007b46 <f_open+0x596>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80075e8:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80075ec:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 80075f0:	f507 721a 	add.w	r2, r7, #616	; 0x268
 80075f4:	f2a2 2261 	subw	r2, r2, #609	; 0x261
 80075f8:	7812      	ldrb	r2, [r2, #0]
 80075fa:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80075fe:	701a      	strb	r2, [r3, #0]
	res = find_volume(&path, &fs, mode);
 8007600:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007604:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8007608:	781a      	ldrb	r2, [r3, #0]
 800760a:	f507 7105 	add.w	r1, r7, #532	; 0x214
 800760e:	f107 0308 	add.w	r3, r7, #8
 8007612:	4618      	mov	r0, r3
 8007614:	f7ff fc98 	bl	8006f48 <find_volume>
 8007618:	4603      	mov	r3, r0
 800761a:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
	if (res == FR_OK) {
 800761e:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8007622:	2b00      	cmp	r3, #0
 8007624:	f040 827a 	bne.w	8007b1c <f_open+0x56c>
		dj.obj.fs = fs;
 8007628:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800762c:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
		INIT_NAMBUF(fs);
 8007630:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8007634:	f107 0214 	add.w	r2, r7, #20
 8007638:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 800763a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800763e:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8007642:	681a      	ldr	r2, [r3, #0]
 8007644:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8007648:	4611      	mov	r1, r2
 800764a:	4618      	mov	r0, r3
 800764c:	f7ff fb6c 	bl	8006d28 <follow_path>
 8007650:	4603      	mov	r3, r0
 8007652:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8007656:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800765a:	2b00      	cmp	r3, #0
 800765c:	d11e      	bne.n	800769c <f_open+0xec>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800765e:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
 8007662:	b25b      	sxtb	r3, r3
 8007664:	2b00      	cmp	r3, #0
 8007666:	da03      	bge.n	8007670 <f_open+0xc0>
				res = FR_INVALID_NAME;
 8007668:	2306      	movs	r3, #6
 800766a:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 800766e:	e015      	b.n	800769c <f_open+0xec>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007670:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007674:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8007678:	781b      	ldrb	r3, [r3, #0]
 800767a:	f023 0301 	bic.w	r3, r3, #1
 800767e:	2b00      	cmp	r3, #0
 8007680:	bf14      	ite	ne
 8007682:	2301      	movne	r3, #1
 8007684:	2300      	moveq	r3, #0
 8007686:	b2db      	uxtb	r3, r3
 8007688:	461a      	mov	r2, r3
 800768a:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800768e:	4611      	mov	r1, r2
 8007690:	4618      	mov	r0, r3
 8007692:	f7fd fed9 	bl	8005448 <chk_lock>
 8007696:	4603      	mov	r3, r0
 8007698:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800769c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80076a0:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 80076a4:	781b      	ldrb	r3, [r3, #0]
 80076a6:	f003 031c 	and.w	r3, r3, #28
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	f000 80a7 	beq.w	80077fe <f_open+0x24e>
			if (res != FR_OK) {					/* No file, create new */
 80076b0:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d01f      	beq.n	80076f8 <f_open+0x148>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80076b8:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 80076bc:	2b04      	cmp	r3, #4
 80076be:	d10e      	bne.n	80076de <f_open+0x12e>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80076c0:	f7fd ff1e 	bl	8005500 <enq_lock>
 80076c4:	4603      	mov	r3, r0
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d006      	beq.n	80076d8 <f_open+0x128>
 80076ca:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80076ce:	4618      	mov	r0, r3
 80076d0:	f7ff f87a 	bl	80067c8 <dir_register>
 80076d4:	4603      	mov	r3, r0
 80076d6:	e000      	b.n	80076da <f_open+0x12a>
 80076d8:	2312      	movs	r3, #18
 80076da:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80076de:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80076e2:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 80076e6:	f507 721a 	add.w	r2, r7, #616	; 0x268
 80076ea:	f2a2 2261 	subw	r2, r2, #609	; 0x261
 80076ee:	7812      	ldrb	r2, [r2, #0]
 80076f0:	f042 0208 	orr.w	r2, r2, #8
 80076f4:	701a      	strb	r2, [r3, #0]
 80076f6:	e015      	b.n	8007724 <f_open+0x174>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80076f8:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 80076fc:	f003 0311 	and.w	r3, r3, #17
 8007700:	2b00      	cmp	r3, #0
 8007702:	d003      	beq.n	800770c <f_open+0x15c>
					res = FR_DENIED;
 8007704:	2307      	movs	r3, #7
 8007706:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 800770a:	e00b      	b.n	8007724 <f_open+0x174>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800770c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007710:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8007714:	781b      	ldrb	r3, [r3, #0]
 8007716:	f003 0304 	and.w	r3, r3, #4
 800771a:	2b00      	cmp	r3, #0
 800771c:	d002      	beq.n	8007724 <f_open+0x174>
 800771e:	2308      	movs	r3, #8
 8007720:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8007724:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8007728:	2b00      	cmp	r3, #0
 800772a:	f040 8088 	bne.w	800783e <f_open+0x28e>
 800772e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007732:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8007736:	781b      	ldrb	r3, [r3, #0]
 8007738:	f003 0308 	and.w	r3, r3, #8
 800773c:	2b00      	cmp	r3, #0
 800773e:	d07e      	beq.n	800783e <f_open+0x28e>
				dw = GET_FATTIME();
 8007740:	f7fd fc52 	bl	8004fe8 <get_fattime>
 8007744:	f8c7 0258 	str.w	r0, [r7, #600]	; 0x258
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8007748:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800774c:	330e      	adds	r3, #14
 800774e:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 8007752:	4618      	mov	r0, r3
 8007754:	f7fd fd9c 	bl	8005290 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8007758:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800775c:	3316      	adds	r3, #22
 800775e:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 8007762:	4618      	mov	r0, r3
 8007764:	f7fd fd94 	bl	8005290 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8007768:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800776c:	330b      	adds	r3, #11
 800776e:	2220      	movs	r2, #32
 8007770:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8007772:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8007776:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 800777a:	4611      	mov	r1, r2
 800777c:	4618      	mov	r0, r3
 800777e:	f7fe fd9b 	bl	80062b8 <ld_clust>
 8007782:	f8c7 0254 	str.w	r0, [r7, #596]	; 0x254
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8007786:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800778a:	f8d7 1238 	ldr.w	r1, [r7, #568]	; 0x238
 800778e:	2200      	movs	r2, #0
 8007790:	4618      	mov	r0, r3
 8007792:	f7fe fdb0 	bl	80062f6 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8007796:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800779a:	331c      	adds	r3, #28
 800779c:	2100      	movs	r1, #0
 800779e:	4618      	mov	r0, r3
 80077a0:	f7fd fd76 	bl	8005290 <st_dword>
					fs->wflag = 1;
 80077a4:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80077a8:	2201      	movs	r2, #1
 80077aa:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80077ac:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d044      	beq.n	800783e <f_open+0x28e>
						dw = fs->winsect;
 80077b4:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80077b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077ba:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
						res = remove_chain(&dj.obj, cl, 0);
 80077be:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80077c2:	2200      	movs	r2, #0
 80077c4:	f8d7 1254 	ldr.w	r1, [r7, #596]	; 0x254
 80077c8:	4618      	mov	r0, r3
 80077ca:	f7fe fa9a 	bl	8005d02 <remove_chain>
 80077ce:	4603      	mov	r3, r0
 80077d0:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
						if (res == FR_OK) {
 80077d4:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d130      	bne.n	800783e <f_open+0x28e>
							res = move_window(fs, dw);
 80077dc:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80077e0:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 80077e4:	4618      	mov	r0, r3
 80077e6:	f7fd ffdf 	bl	80057a8 <move_window>
 80077ea:	4603      	mov	r3, r0
 80077ec:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80077f0:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80077f4:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 80077f8:	3a01      	subs	r2, #1
 80077fa:	619a      	str	r2, [r3, #24]
 80077fc:	e01f      	b.n	800783e <f_open+0x28e>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80077fe:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8007802:	2b00      	cmp	r3, #0
 8007804:	d11b      	bne.n	800783e <f_open+0x28e>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8007806:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 800780a:	f003 0310 	and.w	r3, r3, #16
 800780e:	2b00      	cmp	r3, #0
 8007810:	d003      	beq.n	800781a <f_open+0x26a>
					res = FR_NO_FILE;
 8007812:	2304      	movs	r3, #4
 8007814:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 8007818:	e011      	b.n	800783e <f_open+0x28e>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800781a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800781e:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8007822:	781b      	ldrb	r3, [r3, #0]
 8007824:	f003 0302 	and.w	r3, r3, #2
 8007828:	2b00      	cmp	r3, #0
 800782a:	d008      	beq.n	800783e <f_open+0x28e>
 800782c:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 8007830:	f003 0301 	and.w	r3, r3, #1
 8007834:	2b00      	cmp	r3, #0
 8007836:	d002      	beq.n	800783e <f_open+0x28e>
						res = FR_DENIED;
 8007838:	2307      	movs	r3, #7
 800783a:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					}
				}
			}
		}
		if (res == FR_OK) {
 800783e:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8007842:	2b00      	cmp	r3, #0
 8007844:	d14a      	bne.n	80078dc <f_open+0x32c>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8007846:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800784a:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800784e:	781b      	ldrb	r3, [r3, #0]
 8007850:	f003 0308 	and.w	r3, r3, #8
 8007854:	2b00      	cmp	r3, #0
 8007856:	d00b      	beq.n	8007870 <f_open+0x2c0>
				mode |= FA_MODIFIED;
 8007858:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800785c:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8007860:	f507 721a 	add.w	r2, r7, #616	; 0x268
 8007864:	f2a2 2261 	subw	r2, r2, #609	; 0x261
 8007868:	7812      	ldrb	r2, [r2, #0]
 800786a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800786e:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8007870:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8007874:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007876:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800787a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8007882:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 8007886:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800788a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007892:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007896:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800789a:	781b      	ldrb	r3, [r3, #0]
 800789c:	f023 0301 	bic.w	r3, r3, #1
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	bf14      	ite	ne
 80078a4:	2301      	movne	r3, #1
 80078a6:	2300      	moveq	r3, #0
 80078a8:	b2db      	uxtb	r3, r3
 80078aa:	461a      	mov	r2, r3
 80078ac:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80078b0:	4611      	mov	r1, r2
 80078b2:	4618      	mov	r0, r3
 80078b4:	f7fd fe46 	bl	8005544 <inc_lock>
 80078b8:	4602      	mov	r2, r0
 80078ba:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80078be:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80078c6:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80078ca:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	691b      	ldr	r3, [r3, #16]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d102      	bne.n	80078dc <f_open+0x32c>
 80078d6:	2302      	movs	r3, #2
 80078d8:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
		}
#endif

		if (res == FR_OK) {
 80078dc:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	f040 811b 	bne.w	8007b1c <f_open+0x56c>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80078e6:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80078ea:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 80078ee:	4611      	mov	r1, r2
 80078f0:	4618      	mov	r0, r3
 80078f2:	f7fe fce1 	bl	80062b8 <ld_clust>
 80078f6:	4602      	mov	r2, r0
 80078f8:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80078fc:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8007904:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8007908:	331c      	adds	r3, #28
 800790a:	4618      	mov	r0, r3
 800790c:	f7fd fc82 	bl	8005214 <ld_dword>
 8007910:	4602      	mov	r2, r0
 8007912:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007916:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800791e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007922:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	2200      	movs	r2, #0
 800792a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800792c:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8007930:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007934:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800793c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8007940:	88da      	ldrh	r2, [r3, #6]
 8007942:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007946:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800794e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007952:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f507 721a 	add.w	r2, r7, #616	; 0x268
 800795c:	f2a2 2261 	subw	r2, r2, #609	; 0x261
 8007960:	7812      	ldrb	r2, [r2, #0]
 8007962:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8007964:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007968:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	2200      	movs	r2, #0
 8007970:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8007972:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007976:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	2200      	movs	r2, #0
 800797e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8007980:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007984:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	2200      	movs	r2, #0
 800798c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800798e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007992:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	3330      	adds	r3, #48	; 0x30
 800799a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800799e:	2100      	movs	r1, #0
 80079a0:	4618      	mov	r0, r3
 80079a2:	f7fd fcc2 	bl	800532a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80079a6:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80079aa:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 80079ae:	781b      	ldrb	r3, [r3, #0]
 80079b0:	f003 0320 	and.w	r3, r3, #32
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	f000 80b1 	beq.w	8007b1c <f_open+0x56c>
 80079ba:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80079be:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	68db      	ldr	r3, [r3, #12]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	f000 80a8 	beq.w	8007b1c <f_open+0x56c>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80079cc:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80079d0:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	68da      	ldr	r2, [r3, #12]
 80079d8:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80079dc:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80079e4:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80079e8:	895b      	ldrh	r3, [r3, #10]
 80079ea:	461a      	mov	r2, r3
 80079ec:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80079f0:	899b      	ldrh	r3, [r3, #12]
 80079f2:	fb02 f303 	mul.w	r3, r2, r3
 80079f6:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80079fa:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80079fe:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	689b      	ldr	r3, [r3, #8]
 8007a06:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007a0a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007a0e:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	68db      	ldr	r3, [r3, #12]
 8007a16:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 8007a1a:	e021      	b.n	8007a60 <f_open+0x4b0>
					clst = get_fat(&fp->obj, clst);
 8007a1c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007a20:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	f7fd ff79 	bl	8005922 <get_fat>
 8007a30:	f8c7 0260 	str.w	r0, [r7, #608]	; 0x260
					if (clst <= 1) res = FR_INT_ERR;
 8007a34:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8007a38:	2b01      	cmp	r3, #1
 8007a3a:	d802      	bhi.n	8007a42 <f_open+0x492>
 8007a3c:	2302      	movs	r3, #2
 8007a3e:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8007a42:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8007a46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a4a:	d102      	bne.n	8007a52 <f_open+0x4a2>
 8007a4c:	2301      	movs	r3, #1
 8007a4e:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007a52:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 8007a56:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8007a5a:	1ad3      	subs	r3, r2, r3
 8007a5c:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 8007a60:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d105      	bne.n	8007a74 <f_open+0x4c4>
 8007a68:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 8007a6c:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8007a70:	429a      	cmp	r2, r3
 8007a72:	d8d3      	bhi.n	8007a1c <f_open+0x46c>
				}
				fp->clust = clst;
 8007a74:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007a78:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 8007a82:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8007a84:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d147      	bne.n	8007b1c <f_open+0x56c>
 8007a8c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8007a90:	899b      	ldrh	r3, [r3, #12]
 8007a92:	461a      	mov	r2, r3
 8007a94:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8007a98:	fbb3 f1f2 	udiv	r1, r3, r2
 8007a9c:	fb01 f202 	mul.w	r2, r1, r2
 8007aa0:	1a9b      	subs	r3, r3, r2
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d03a      	beq.n	8007b1c <f_open+0x56c>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8007aa6:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8007aaa:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 8007aae:	4618      	mov	r0, r3
 8007ab0:	f7fd ff18 	bl	80058e4 <clust2sect>
 8007ab4:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
 8007ab8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d103      	bne.n	8007ac8 <f_open+0x518>
						res = FR_INT_ERR;
 8007ac0:	2302      	movs	r3, #2
 8007ac2:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 8007ac6:	e029      	b.n	8007b1c <f_open+0x56c>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8007ac8:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8007acc:	899b      	ldrh	r3, [r3, #12]
 8007ace:	461a      	mov	r2, r3
 8007ad0:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8007ad4:	fbb3 f2f2 	udiv	r2, r3, r2
 8007ad8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8007adc:	441a      	add	r2, r3
 8007ade:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007ae2:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8007aea:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8007aee:	7858      	ldrb	r0, [r3, #1]
 8007af0:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007af4:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007afe:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007b02:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	6a1a      	ldr	r2, [r3, #32]
 8007b0a:	2301      	movs	r3, #1
 8007b0c:	f7fd fb0c 	bl	8005128 <disk_read>
 8007b10:	4603      	mov	r3, r0
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d002      	beq.n	8007b1c <f_open+0x56c>
 8007b16:	2301      	movs	r3, #1
 8007b18:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8007b1c:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d006      	beq.n	8007b32 <f_open+0x582>
 8007b24:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8007b28:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	2200      	movs	r2, #0
 8007b30:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8007b32:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8007b36:	f897 2267 	ldrb.w	r2, [r7, #615]	; 0x267
 8007b3a:	4611      	mov	r1, r2
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	f7fd fc67 	bl	8005410 <unlock_fs>
 8007b42:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
}
 8007b46:	4618      	mov	r0, r3
 8007b48:	f507 771a 	add.w	r7, r7, #616	; 0x268
 8007b4c:	46bd      	mov	sp, r7
 8007b4e:	bd80      	pop	{r7, pc}

08007b50 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b08c      	sub	sp, #48	; 0x30
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	60f8      	str	r0, [r7, #12]
 8007b58:	60b9      	str	r1, [r7, #8]
 8007b5a:	607a      	str	r2, [r7, #4]
 8007b5c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8007b5e:	68bb      	ldr	r3, [r7, #8]
 8007b60:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	2200      	movs	r2, #0
 8007b66:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	f107 0210 	add.w	r2, r7, #16
 8007b6e:	4611      	mov	r1, r2
 8007b70:	4618      	mov	r0, r3
 8007b72:	f7ff fc71 	bl	8007458 <validate>
 8007b76:	4603      	mov	r3, r0
 8007b78:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8007b7c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d107      	bne.n	8007b94 <f_write+0x44>
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	7d5b      	ldrb	r3, [r3, #21]
 8007b88:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8007b8c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d009      	beq.n	8007ba8 <f_write+0x58>
 8007b94:	693b      	ldr	r3, [r7, #16]
 8007b96:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8007b9a:	4611      	mov	r1, r2
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	f7fd fc37 	bl	8005410 <unlock_fs>
 8007ba2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007ba6:	e192      	b.n	8007ece <f_write+0x37e>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	7d1b      	ldrb	r3, [r3, #20]
 8007bac:	f003 0302 	and.w	r3, r3, #2
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d106      	bne.n	8007bc2 <f_write+0x72>
 8007bb4:	693b      	ldr	r3, [r7, #16]
 8007bb6:	2107      	movs	r1, #7
 8007bb8:	4618      	mov	r0, r3
 8007bba:	f7fd fc29 	bl	8005410 <unlock_fs>
 8007bbe:	2307      	movs	r3, #7
 8007bc0:	e185      	b.n	8007ece <f_write+0x37e>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	699a      	ldr	r2, [r3, #24]
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	441a      	add	r2, r3
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	699b      	ldr	r3, [r3, #24]
 8007bce:	429a      	cmp	r2, r3
 8007bd0:	f080 816a 	bcs.w	8007ea8 <f_write+0x358>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	699b      	ldr	r3, [r3, #24]
 8007bd8:	43db      	mvns	r3, r3
 8007bda:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8007bdc:	e164      	b.n	8007ea8 <f_write+0x358>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	699b      	ldr	r3, [r3, #24]
 8007be2:	693a      	ldr	r2, [r7, #16]
 8007be4:	8992      	ldrh	r2, [r2, #12]
 8007be6:	fbb3 f1f2 	udiv	r1, r3, r2
 8007bea:	fb01 f202 	mul.w	r2, r1, r2
 8007bee:	1a9b      	subs	r3, r3, r2
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	f040 810f 	bne.w	8007e14 <f_write+0x2c4>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	699b      	ldr	r3, [r3, #24]
 8007bfa:	693a      	ldr	r2, [r7, #16]
 8007bfc:	8992      	ldrh	r2, [r2, #12]
 8007bfe:	fbb3 f3f2 	udiv	r3, r3, r2
 8007c02:	693a      	ldr	r2, [r7, #16]
 8007c04:	8952      	ldrh	r2, [r2, #10]
 8007c06:	3a01      	subs	r2, #1
 8007c08:	4013      	ands	r3, r2
 8007c0a:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8007c0c:	69bb      	ldr	r3, [r7, #24]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d14d      	bne.n	8007cae <f_write+0x15e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	699b      	ldr	r3, [r3, #24]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d10c      	bne.n	8007c34 <f_write+0xe4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	689b      	ldr	r3, [r3, #8]
 8007c1e:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8007c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d11a      	bne.n	8007c5c <f_write+0x10c>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	2100      	movs	r1, #0
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	f7fe f8ce 	bl	8005dcc <create_chain>
 8007c30:	62b8      	str	r0, [r7, #40]	; 0x28
 8007c32:	e013      	b.n	8007c5c <f_write+0x10c>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d007      	beq.n	8007c4c <f_write+0xfc>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	699b      	ldr	r3, [r3, #24]
 8007c40:	4619      	mov	r1, r3
 8007c42:	68f8      	ldr	r0, [r7, #12]
 8007c44:	f7fe f95a 	bl	8005efc <clmt_clust>
 8007c48:	62b8      	str	r0, [r7, #40]	; 0x28
 8007c4a:	e007      	b.n	8007c5c <f_write+0x10c>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8007c4c:	68fa      	ldr	r2, [r7, #12]
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	69db      	ldr	r3, [r3, #28]
 8007c52:	4619      	mov	r1, r3
 8007c54:	4610      	mov	r0, r2
 8007c56:	f7fe f8b9 	bl	8005dcc <create_chain>
 8007c5a:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	f000 8127 	beq.w	8007eb2 <f_write+0x362>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8007c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c66:	2b01      	cmp	r3, #1
 8007c68:	d109      	bne.n	8007c7e <f_write+0x12e>
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	2202      	movs	r2, #2
 8007c6e:	755a      	strb	r2, [r3, #21]
 8007c70:	693b      	ldr	r3, [r7, #16]
 8007c72:	2102      	movs	r1, #2
 8007c74:	4618      	mov	r0, r3
 8007c76:	f7fd fbcb 	bl	8005410 <unlock_fs>
 8007c7a:	2302      	movs	r3, #2
 8007c7c:	e127      	b.n	8007ece <f_write+0x37e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c84:	d109      	bne.n	8007c9a <f_write+0x14a>
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	2201      	movs	r2, #1
 8007c8a:	755a      	strb	r2, [r3, #21]
 8007c8c:	693b      	ldr	r3, [r7, #16]
 8007c8e:	2101      	movs	r1, #1
 8007c90:	4618      	mov	r0, r3
 8007c92:	f7fd fbbd 	bl	8005410 <unlock_fs>
 8007c96:	2301      	movs	r3, #1
 8007c98:	e119      	b.n	8007ece <f_write+0x37e>
				fp->clust = clst;			/* Update current cluster */
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007c9e:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	689b      	ldr	r3, [r3, #8]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d102      	bne.n	8007cae <f_write+0x15e>
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007cac:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	7d1b      	ldrb	r3, [r3, #20]
 8007cb2:	b25b      	sxtb	r3, r3
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	da1d      	bge.n	8007cf4 <f_write+0x1a4>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007cb8:	693b      	ldr	r3, [r7, #16]
 8007cba:	7858      	ldrb	r0, [r3, #1]
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	6a1a      	ldr	r2, [r3, #32]
 8007cc6:	2301      	movs	r3, #1
 8007cc8:	f7fd fa4e 	bl	8005168 <disk_write>
 8007ccc:	4603      	mov	r3, r0
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d009      	beq.n	8007ce6 <f_write+0x196>
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	2201      	movs	r2, #1
 8007cd6:	755a      	strb	r2, [r3, #21]
 8007cd8:	693b      	ldr	r3, [r7, #16]
 8007cda:	2101      	movs	r1, #1
 8007cdc:	4618      	mov	r0, r3
 8007cde:	f7fd fb97 	bl	8005410 <unlock_fs>
 8007ce2:	2301      	movs	r3, #1
 8007ce4:	e0f3      	b.n	8007ece <f_write+0x37e>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	7d1b      	ldrb	r3, [r3, #20]
 8007cea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007cee:	b2da      	uxtb	r2, r3
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8007cf4:	693a      	ldr	r2, [r7, #16]
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	69db      	ldr	r3, [r3, #28]
 8007cfa:	4619      	mov	r1, r3
 8007cfc:	4610      	mov	r0, r2
 8007cfe:	f7fd fdf1 	bl	80058e4 <clust2sect>
 8007d02:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8007d04:	697b      	ldr	r3, [r7, #20]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d109      	bne.n	8007d1e <f_write+0x1ce>
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	2202      	movs	r2, #2
 8007d0e:	755a      	strb	r2, [r3, #21]
 8007d10:	693b      	ldr	r3, [r7, #16]
 8007d12:	2102      	movs	r1, #2
 8007d14:	4618      	mov	r0, r3
 8007d16:	f7fd fb7b 	bl	8005410 <unlock_fs>
 8007d1a:	2302      	movs	r3, #2
 8007d1c:	e0d7      	b.n	8007ece <f_write+0x37e>
			sect += csect;
 8007d1e:	697a      	ldr	r2, [r7, #20]
 8007d20:	69bb      	ldr	r3, [r7, #24]
 8007d22:	4413      	add	r3, r2
 8007d24:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8007d26:	693b      	ldr	r3, [r7, #16]
 8007d28:	899b      	ldrh	r3, [r3, #12]
 8007d2a:	461a      	mov	r2, r3
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007d32:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8007d34:	6a3b      	ldr	r3, [r7, #32]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d048      	beq.n	8007dcc <f_write+0x27c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8007d3a:	69ba      	ldr	r2, [r7, #24]
 8007d3c:	6a3b      	ldr	r3, [r7, #32]
 8007d3e:	4413      	add	r3, r2
 8007d40:	693a      	ldr	r2, [r7, #16]
 8007d42:	8952      	ldrh	r2, [r2, #10]
 8007d44:	4293      	cmp	r3, r2
 8007d46:	d905      	bls.n	8007d54 <f_write+0x204>
					cc = fs->csize - csect;
 8007d48:	693b      	ldr	r3, [r7, #16]
 8007d4a:	895b      	ldrh	r3, [r3, #10]
 8007d4c:	461a      	mov	r2, r3
 8007d4e:	69bb      	ldr	r3, [r7, #24]
 8007d50:	1ad3      	subs	r3, r2, r3
 8007d52:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007d54:	693b      	ldr	r3, [r7, #16]
 8007d56:	7858      	ldrb	r0, [r3, #1]
 8007d58:	6a3b      	ldr	r3, [r7, #32]
 8007d5a:	697a      	ldr	r2, [r7, #20]
 8007d5c:	69f9      	ldr	r1, [r7, #28]
 8007d5e:	f7fd fa03 	bl	8005168 <disk_write>
 8007d62:	4603      	mov	r3, r0
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d009      	beq.n	8007d7c <f_write+0x22c>
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	2201      	movs	r2, #1
 8007d6c:	755a      	strb	r2, [r3, #21]
 8007d6e:	693b      	ldr	r3, [r7, #16]
 8007d70:	2101      	movs	r1, #1
 8007d72:	4618      	mov	r0, r3
 8007d74:	f7fd fb4c 	bl	8005410 <unlock_fs>
 8007d78:	2301      	movs	r3, #1
 8007d7a:	e0a8      	b.n	8007ece <f_write+0x37e>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	6a1a      	ldr	r2, [r3, #32]
 8007d80:	697b      	ldr	r3, [r7, #20]
 8007d82:	1ad3      	subs	r3, r2, r3
 8007d84:	6a3a      	ldr	r2, [r7, #32]
 8007d86:	429a      	cmp	r2, r3
 8007d88:	d918      	bls.n	8007dbc <f_write+0x26c>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	6a1a      	ldr	r2, [r3, #32]
 8007d94:	697b      	ldr	r3, [r7, #20]
 8007d96:	1ad3      	subs	r3, r2, r3
 8007d98:	693a      	ldr	r2, [r7, #16]
 8007d9a:	8992      	ldrh	r2, [r2, #12]
 8007d9c:	fb02 f303 	mul.w	r3, r2, r3
 8007da0:	69fa      	ldr	r2, [r7, #28]
 8007da2:	18d1      	adds	r1, r2, r3
 8007da4:	693b      	ldr	r3, [r7, #16]
 8007da6:	899b      	ldrh	r3, [r3, #12]
 8007da8:	461a      	mov	r2, r3
 8007daa:	f7fd fa9d 	bl	80052e8 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	7d1b      	ldrb	r3, [r3, #20]
 8007db2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007db6:	b2da      	uxtb	r2, r3
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8007dbc:	693b      	ldr	r3, [r7, #16]
 8007dbe:	899b      	ldrh	r3, [r3, #12]
 8007dc0:	461a      	mov	r2, r3
 8007dc2:	6a3b      	ldr	r3, [r7, #32]
 8007dc4:	fb02 f303 	mul.w	r3, r2, r3
 8007dc8:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8007dca:	e050      	b.n	8007e6e <f_write+0x31e>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	6a1b      	ldr	r3, [r3, #32]
 8007dd0:	697a      	ldr	r2, [r7, #20]
 8007dd2:	429a      	cmp	r2, r3
 8007dd4:	d01b      	beq.n	8007e0e <f_write+0x2be>
				fp->fptr < fp->obj.objsize &&
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	699a      	ldr	r2, [r3, #24]
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8007dde:	429a      	cmp	r2, r3
 8007de0:	d215      	bcs.n	8007e0e <f_write+0x2be>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8007de2:	693b      	ldr	r3, [r7, #16]
 8007de4:	7858      	ldrb	r0, [r3, #1]
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007dec:	2301      	movs	r3, #1
 8007dee:	697a      	ldr	r2, [r7, #20]
 8007df0:	f7fd f99a 	bl	8005128 <disk_read>
 8007df4:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d009      	beq.n	8007e0e <f_write+0x2be>
					ABORT(fs, FR_DISK_ERR);
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	2201      	movs	r2, #1
 8007dfe:	755a      	strb	r2, [r3, #21]
 8007e00:	693b      	ldr	r3, [r7, #16]
 8007e02:	2101      	movs	r1, #1
 8007e04:	4618      	mov	r0, r3
 8007e06:	f7fd fb03 	bl	8005410 <unlock_fs>
 8007e0a:	2301      	movs	r3, #1
 8007e0c:	e05f      	b.n	8007ece <f_write+0x37e>
			}
#endif
			fp->sect = sect;
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	697a      	ldr	r2, [r7, #20]
 8007e12:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8007e14:	693b      	ldr	r3, [r7, #16]
 8007e16:	899b      	ldrh	r3, [r3, #12]
 8007e18:	4618      	mov	r0, r3
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	699b      	ldr	r3, [r3, #24]
 8007e1e:	693a      	ldr	r2, [r7, #16]
 8007e20:	8992      	ldrh	r2, [r2, #12]
 8007e22:	fbb3 f1f2 	udiv	r1, r3, r2
 8007e26:	fb01 f202 	mul.w	r2, r1, r2
 8007e2a:	1a9b      	subs	r3, r3, r2
 8007e2c:	1ac3      	subs	r3, r0, r3
 8007e2e:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8007e30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	429a      	cmp	r2, r3
 8007e36:	d901      	bls.n	8007e3c <f_write+0x2ec>
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	699b      	ldr	r3, [r3, #24]
 8007e46:	693a      	ldr	r2, [r7, #16]
 8007e48:	8992      	ldrh	r2, [r2, #12]
 8007e4a:	fbb3 f0f2 	udiv	r0, r3, r2
 8007e4e:	fb00 f202 	mul.w	r2, r0, r2
 8007e52:	1a9b      	subs	r3, r3, r2
 8007e54:	440b      	add	r3, r1
 8007e56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e58:	69f9      	ldr	r1, [r7, #28]
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	f7fd fa44 	bl	80052e8 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	7d1b      	ldrb	r3, [r3, #20]
 8007e64:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007e68:	b2da      	uxtb	r2, r3
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8007e6e:	69fa      	ldr	r2, [r7, #28]
 8007e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e72:	4413      	add	r3, r2
 8007e74:	61fb      	str	r3, [r7, #28]
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	699a      	ldr	r2, [r3, #24]
 8007e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e7c:	441a      	add	r2, r3
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	619a      	str	r2, [r3, #24]
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	68da      	ldr	r2, [r3, #12]
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	699b      	ldr	r3, [r3, #24]
 8007e8a:	429a      	cmp	r2, r3
 8007e8c:	bf38      	it	cc
 8007e8e:	461a      	movcc	r2, r3
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	60da      	str	r2, [r3, #12]
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	681a      	ldr	r2, [r3, #0]
 8007e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e9a:	441a      	add	r2, r3
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	601a      	str	r2, [r3, #0]
 8007ea0:	687a      	ldr	r2, [r7, #4]
 8007ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ea4:	1ad3      	subs	r3, r2, r3
 8007ea6:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	f47f ae97 	bne.w	8007bde <f_write+0x8e>
 8007eb0:	e000      	b.n	8007eb4 <f_write+0x364>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007eb2:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	7d1b      	ldrb	r3, [r3, #20]
 8007eb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ebc:	b2da      	uxtb	r2, r3
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8007ec2:	693b      	ldr	r3, [r7, #16]
 8007ec4:	2100      	movs	r1, #0
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	f7fd faa2 	bl	8005410 <unlock_fs>
 8007ecc:	2300      	movs	r3, #0
}
 8007ece:	4618      	mov	r0, r3
 8007ed0:	3730      	adds	r7, #48	; 0x30
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	bd80      	pop	{r7, pc}

08007ed6 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8007ed6:	b580      	push	{r7, lr}
 8007ed8:	b086      	sub	sp, #24
 8007eda:	af00      	add	r7, sp, #0
 8007edc:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	f107 0208 	add.w	r2, r7, #8
 8007ee4:	4611      	mov	r1, r2
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	f7ff fab6 	bl	8007458 <validate>
 8007eec:	4603      	mov	r3, r0
 8007eee:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007ef0:	7dfb      	ldrb	r3, [r7, #23]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d16d      	bne.n	8007fd2 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	7d1b      	ldrb	r3, [r3, #20]
 8007efa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d067      	beq.n	8007fd2 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	7d1b      	ldrb	r3, [r3, #20]
 8007f06:	b25b      	sxtb	r3, r3
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	da1a      	bge.n	8007f42 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8007f0c:	68bb      	ldr	r3, [r7, #8]
 8007f0e:	7858      	ldrb	r0, [r3, #1]
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	6a1a      	ldr	r2, [r3, #32]
 8007f1a:	2301      	movs	r3, #1
 8007f1c:	f7fd f924 	bl	8005168 <disk_write>
 8007f20:	4603      	mov	r3, r0
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d006      	beq.n	8007f34 <f_sync+0x5e>
 8007f26:	68bb      	ldr	r3, [r7, #8]
 8007f28:	2101      	movs	r1, #1
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	f7fd fa70 	bl	8005410 <unlock_fs>
 8007f30:	2301      	movs	r3, #1
 8007f32:	e055      	b.n	8007fe0 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	7d1b      	ldrb	r3, [r3, #20]
 8007f38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f3c:	b2da      	uxtb	r2, r3
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8007f42:	f7fd f851 	bl	8004fe8 <get_fattime>
 8007f46:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8007f48:	68ba      	ldr	r2, [r7, #8]
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f4e:	4619      	mov	r1, r3
 8007f50:	4610      	mov	r0, r2
 8007f52:	f7fd fc29 	bl	80057a8 <move_window>
 8007f56:	4603      	mov	r3, r0
 8007f58:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8007f5a:	7dfb      	ldrb	r3, [r7, #23]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d138      	bne.n	8007fd2 <f_sync+0xfc>
					dir = fp->dir_ptr;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f64:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	330b      	adds	r3, #11
 8007f6a:	781a      	ldrb	r2, [r3, #0]
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	330b      	adds	r3, #11
 8007f70:	f042 0220 	orr.w	r2, r2, #32
 8007f74:	b2d2      	uxtb	r2, r2
 8007f76:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	6818      	ldr	r0, [r3, #0]
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	689b      	ldr	r3, [r3, #8]
 8007f80:	461a      	mov	r2, r3
 8007f82:	68f9      	ldr	r1, [r7, #12]
 8007f84:	f7fe f9b7 	bl	80062f6 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	f103 021c 	add.w	r2, r3, #28
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	68db      	ldr	r3, [r3, #12]
 8007f92:	4619      	mov	r1, r3
 8007f94:	4610      	mov	r0, r2
 8007f96:	f7fd f97b 	bl	8005290 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	3316      	adds	r3, #22
 8007f9e:	6939      	ldr	r1, [r7, #16]
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	f7fd f975 	bl	8005290 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	3312      	adds	r3, #18
 8007faa:	2100      	movs	r1, #0
 8007fac:	4618      	mov	r0, r3
 8007fae:	f7fd f954 	bl	800525a <st_word>
					fs->wflag = 1;
 8007fb2:	68bb      	ldr	r3, [r7, #8]
 8007fb4:	2201      	movs	r2, #1
 8007fb6:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8007fb8:	68bb      	ldr	r3, [r7, #8]
 8007fba:	4618      	mov	r0, r3
 8007fbc:	f7fd fc22 	bl	8005804 <sync_fs>
 8007fc0:	4603      	mov	r3, r0
 8007fc2:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	7d1b      	ldrb	r3, [r3, #20]
 8007fc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007fcc:	b2da      	uxtb	r2, r3
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8007fd2:	68bb      	ldr	r3, [r7, #8]
 8007fd4:	7dfa      	ldrb	r2, [r7, #23]
 8007fd6:	4611      	mov	r1, r2
 8007fd8:	4618      	mov	r0, r3
 8007fda:	f7fd fa19 	bl	8005410 <unlock_fs>
 8007fde:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	3718      	adds	r7, #24
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	bd80      	pop	{r7, pc}

08007fe8 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b084      	sub	sp, #16
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8007ff0:	6878      	ldr	r0, [r7, #4]
 8007ff2:	f7ff ff70 	bl	8007ed6 <f_sync>
 8007ff6:	4603      	mov	r3, r0
 8007ff8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8007ffa:	7bfb      	ldrb	r3, [r7, #15]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d11d      	bne.n	800803c <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	f107 0208 	add.w	r2, r7, #8
 8008006:	4611      	mov	r1, r2
 8008008:	4618      	mov	r0, r3
 800800a:	f7ff fa25 	bl	8007458 <validate>
 800800e:	4603      	mov	r3, r0
 8008010:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008012:	7bfb      	ldrb	r3, [r7, #15]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d111      	bne.n	800803c <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	691b      	ldr	r3, [r3, #16]
 800801c:	4618      	mov	r0, r3
 800801e:	f7fd fb1f 	bl	8005660 <dec_lock>
 8008022:	4603      	mov	r3, r0
 8008024:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8008026:	7bfb      	ldrb	r3, [r7, #15]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d102      	bne.n	8008032 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2200      	movs	r2, #0
 8008030:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 8008032:	68bb      	ldr	r3, [r7, #8]
 8008034:	2100      	movs	r1, #0
 8008036:	4618      	mov	r0, r3
 8008038:	f7fd f9ea 	bl	8005410 <unlock_fs>
#endif
		}
	}
	return res;
 800803c:	7bfb      	ldrb	r3, [r7, #15]
}
 800803e:	4618      	mov	r0, r3
 8008040:	3710      	adds	r7, #16
 8008042:	46bd      	mov	sp, r7
 8008044:	bd80      	pop	{r7, pc}

08008046 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8008046:	b580      	push	{r7, lr}
 8008048:	b084      	sub	sp, #16
 800804a:	af00      	add	r7, sp, #0
 800804c:	6078      	str	r0, [r7, #4]
 800804e:	460b      	mov	r3, r1
 8008050:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8008052:	78fb      	ldrb	r3, [r7, #3]
 8008054:	2b0a      	cmp	r3, #10
 8008056:	d103      	bne.n	8008060 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8008058:	210d      	movs	r1, #13
 800805a:	6878      	ldr	r0, [r7, #4]
 800805c:	f7ff fff3 	bl	8008046 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	685b      	ldr	r3, [r3, #4]
 8008064:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	2b00      	cmp	r3, #0
 800806a:	db25      	blt.n	80080b8 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	1c5a      	adds	r2, r3, #1
 8008070:	60fa      	str	r2, [r7, #12]
 8008072:	687a      	ldr	r2, [r7, #4]
 8008074:	4413      	add	r3, r2
 8008076:	78fa      	ldrb	r2, [r7, #3]
 8008078:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	2b3c      	cmp	r3, #60	; 0x3c
 800807e:	dd12      	ble.n	80080a6 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	6818      	ldr	r0, [r3, #0]
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	f103 010c 	add.w	r1, r3, #12
 800808a:	68fa      	ldr	r2, [r7, #12]
 800808c:	f107 0308 	add.w	r3, r7, #8
 8008090:	f7ff fd5e 	bl	8007b50 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8008094:	68ba      	ldr	r2, [r7, #8]
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	429a      	cmp	r2, r3
 800809a:	d101      	bne.n	80080a0 <putc_bfd+0x5a>
 800809c:	2300      	movs	r3, #0
 800809e:	e001      	b.n	80080a4 <putc_bfd+0x5e>
 80080a0:	f04f 33ff 	mov.w	r3, #4294967295
 80080a4:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	68fa      	ldr	r2, [r7, #12]
 80080aa:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	689b      	ldr	r3, [r3, #8]
 80080b0:	1c5a      	adds	r2, r3, #1
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	609a      	str	r2, [r3, #8]
 80080b6:	e000      	b.n	80080ba <putc_bfd+0x74>
	if (i < 0) return;
 80080b8:	bf00      	nop
}
 80080ba:	3710      	adds	r7, #16
 80080bc:	46bd      	mov	sp, r7
 80080be:	bd80      	pop	{r7, pc}

080080c0 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b084      	sub	sp, #16
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	685b      	ldr	r3, [r3, #4]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	db16      	blt.n	80080fe <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	6818      	ldr	r0, [r3, #0]
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	f103 010c 	add.w	r1, r3, #12
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	685b      	ldr	r3, [r3, #4]
 80080de:	461a      	mov	r2, r3
 80080e0:	f107 030c 	add.w	r3, r7, #12
 80080e4:	f7ff fd34 	bl	8007b50 <f_write>
 80080e8:	4603      	mov	r3, r0
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d107      	bne.n	80080fe <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	685b      	ldr	r3, [r3, #4]
 80080f2:	68fa      	ldr	r2, [r7, #12]
 80080f4:	4293      	cmp	r3, r2
 80080f6:	d102      	bne.n	80080fe <putc_flush+0x3e>
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	689b      	ldr	r3, [r3, #8]
 80080fc:	e001      	b.n	8008102 <putc_flush+0x42>
	return EOF;
 80080fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008102:	4618      	mov	r0, r3
 8008104:	3710      	adds	r7, #16
 8008106:	46bd      	mov	sp, r7
 8008108:	bd80      	pop	{r7, pc}

0800810a <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800810a:	b480      	push	{r7}
 800810c:	b083      	sub	sp, #12
 800810e:	af00      	add	r7, sp, #0
 8008110:	6078      	str	r0, [r7, #4]
 8008112:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	683a      	ldr	r2, [r7, #0]
 8008118:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	2200      	movs	r2, #0
 800811e:	605a      	str	r2, [r3, #4]
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	685a      	ldr	r2, [r3, #4]
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	609a      	str	r2, [r3, #8]
}
 8008128:	bf00      	nop
 800812a:	370c      	adds	r7, #12
 800812c:	46bd      	mov	sp, r7
 800812e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008132:	4770      	bx	lr

08008134 <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 8008134:	b40e      	push	{r1, r2, r3}
 8008136:	b580      	push	{r7, lr}
 8008138:	b0a7      	sub	sp, #156	; 0x9c
 800813a:	af00      	add	r7, sp, #0
 800813c:	6078      	str	r0, [r7, #4]
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 800813e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008142:	6879      	ldr	r1, [r7, #4]
 8008144:	4618      	mov	r0, r3
 8008146:	f7ff ffe0 	bl	800810a <putc_init>

	va_start(arp, fmt);
 800814a:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800814e:	67bb      	str	r3, [r7, #120]	; 0x78

	for (;;) {
		c = *fmt++;
 8008150:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008154:	1c5a      	adds	r2, r3, #1
 8008156:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800815a:	781b      	ldrb	r3, [r3, #0]
 800815c:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == 0) break;			/* End of string */
 8008160:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8008164:	2b00      	cmp	r3, #0
 8008166:	f000 81f2 	beq.w	800854e <f_printf+0x41a>
		if (c != '%') {				/* Non escape character */
 800816a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800816e:	2b25      	cmp	r3, #37	; 0x25
 8008170:	d008      	beq.n	8008184 <f_printf+0x50>
			putc_bfd(&pb, c);
 8008172:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 8008176:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800817a:	4611      	mov	r1, r2
 800817c:	4618      	mov	r0, r3
 800817e:	f7ff ff62 	bl	8008046 <putc_bfd>
			continue;
 8008182:	e1e3      	b.n	800854c <f_printf+0x418>
		}
		w = f = 0;
 8008184:	2300      	movs	r3, #0
 8008186:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800818a:	2300      	movs	r3, #0
 800818c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		c = *fmt++;
 8008190:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008194:	1c5a      	adds	r2, r3, #1
 8008196:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800819a:	781b      	ldrb	r3, [r3, #0]
 800819c:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == '0') {				/* Flag: '0' padding */
 80081a0:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80081a4:	2b30      	cmp	r3, #48	; 0x30
 80081a6:	d10b      	bne.n	80081c0 <f_printf+0x8c>
			f = 1; c = *fmt++;
 80081a8:	2301      	movs	r3, #1
 80081aa:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 80081ae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80081b2:	1c5a      	adds	r2, r3, #1
 80081b4:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80081b8:	781b      	ldrb	r3, [r3, #0]
 80081ba:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 80081be:	e024      	b.n	800820a <f_printf+0xd6>
		} else {
			if (c == '-') {			/* Flag: left justified */
 80081c0:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80081c4:	2b2d      	cmp	r3, #45	; 0x2d
 80081c6:	d120      	bne.n	800820a <f_printf+0xd6>
				f = 2; c = *fmt++;
 80081c8:	2302      	movs	r3, #2
 80081ca:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 80081ce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80081d2:	1c5a      	adds	r2, r3, #1
 80081d4:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80081d8:	781b      	ldrb	r3, [r3, #0]
 80081da:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
			}
		}
		while (IsDigit(c)) {		/* Precision */
 80081de:	e014      	b.n	800820a <f_printf+0xd6>
			w = w * 10 + c - '0';
 80081e0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80081e4:	4613      	mov	r3, r2
 80081e6:	009b      	lsls	r3, r3, #2
 80081e8:	4413      	add	r3, r2
 80081ea:	005b      	lsls	r3, r3, #1
 80081ec:	461a      	mov	r2, r3
 80081ee:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 80081f2:	4413      	add	r3, r2
 80081f4:	3b30      	subs	r3, #48	; 0x30
 80081f6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			c = *fmt++;
 80081fa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80081fe:	1c5a      	adds	r2, r3, #1
 8008200:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008204:	781b      	ldrb	r3, [r3, #0]
 8008206:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		while (IsDigit(c)) {		/* Precision */
 800820a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800820e:	2b2f      	cmp	r3, #47	; 0x2f
 8008210:	d903      	bls.n	800821a <f_printf+0xe6>
 8008212:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8008216:	2b39      	cmp	r3, #57	; 0x39
 8008218:	d9e2      	bls.n	80081e0 <f_printf+0xac>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 800821a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800821e:	2b6c      	cmp	r3, #108	; 0x6c
 8008220:	d003      	beq.n	800822a <f_printf+0xf6>
 8008222:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8008226:	2b4c      	cmp	r3, #76	; 0x4c
 8008228:	d10d      	bne.n	8008246 <f_printf+0x112>
			f |= 4; c = *fmt++;
 800822a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800822e:	f043 0304 	orr.w	r3, r3, #4
 8008232:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8008236:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800823a:	1c5a      	adds	r2, r3, #1
 800823c:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008240:	781b      	ldrb	r3, [r3, #0]
 8008242:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		}
		if (!c) break;
 8008246:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800824a:	2b00      	cmp	r3, #0
 800824c:	f000 8181 	beq.w	8008552 <f_printf+0x41e>
		d = c;
 8008250:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8008254:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		if (IsLower(d)) d -= 0x20;
 8008258:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800825c:	2b60      	cmp	r3, #96	; 0x60
 800825e:	d908      	bls.n	8008272 <f_printf+0x13e>
 8008260:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8008264:	2b7a      	cmp	r3, #122	; 0x7a
 8008266:	d804      	bhi.n	8008272 <f_printf+0x13e>
 8008268:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800826c:	3b20      	subs	r3, #32
 800826e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		switch (d) {				/* Type is... */
 8008272:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8008276:	3b42      	subs	r3, #66	; 0x42
 8008278:	2b16      	cmp	r3, #22
 800827a:	f200 8098 	bhi.w	80083ae <f_printf+0x27a>
 800827e:	a201      	add	r2, pc, #4	; (adr r2, 8008284 <f_printf+0x150>)
 8008280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008284:	0800838f 	.word	0x0800838f
 8008288:	08008377 	.word	0x08008377
 800828c:	0800839f 	.word	0x0800839f
 8008290:	080083af 	.word	0x080083af
 8008294:	080083af 	.word	0x080083af
 8008298:	080083af 	.word	0x080083af
 800829c:	080083af 	.word	0x080083af
 80082a0:	080083af 	.word	0x080083af
 80082a4:	080083af 	.word	0x080083af
 80082a8:	080083af 	.word	0x080083af
 80082ac:	080083af 	.word	0x080083af
 80082b0:	080083af 	.word	0x080083af
 80082b4:	080083af 	.word	0x080083af
 80082b8:	08008397 	.word	0x08008397
 80082bc:	080083af 	.word	0x080083af
 80082c0:	080083af 	.word	0x080083af
 80082c4:	080083af 	.word	0x080083af
 80082c8:	080082e1 	.word	0x080082e1
 80082cc:	080083af 	.word	0x080083af
 80082d0:	0800839f 	.word	0x0800839f
 80082d4:	080083af 	.word	0x080083af
 80082d8:	080083af 	.word	0x080083af
 80082dc:	080083a7 	.word	0x080083a7
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 80082e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80082e2:	1d1a      	adds	r2, r3, #4
 80082e4:	67ba      	str	r2, [r7, #120]	; 0x78
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	67fb      	str	r3, [r7, #124]	; 0x7c
			for (j = 0; p[j]; j++) ;
 80082ea:	2300      	movs	r3, #0
 80082ec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80082f0:	e004      	b.n	80082fc <f_printf+0x1c8>
 80082f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80082f6:	3301      	adds	r3, #1
 80082f8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80082fc:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80082fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008302:	4413      	add	r3, r2
 8008304:	781b      	ldrb	r3, [r3, #0]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d1f3      	bne.n	80082f2 <f_printf+0x1be>
			if (!(f & 2)) {
 800830a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800830e:	f003 0302 	and.w	r3, r3, #2
 8008312:	2b00      	cmp	r3, #0
 8008314:	d11a      	bne.n	800834c <f_printf+0x218>
				while (j++ < w) putc_bfd(&pb, ' ');
 8008316:	e005      	b.n	8008324 <f_printf+0x1f0>
 8008318:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800831c:	2120      	movs	r1, #32
 800831e:	4618      	mov	r0, r3
 8008320:	f7ff fe91 	bl	8008046 <putc_bfd>
 8008324:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008328:	1c5a      	adds	r2, r3, #1
 800832a:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800832e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8008332:	429a      	cmp	r2, r3
 8008334:	d8f0      	bhi.n	8008318 <f_printf+0x1e4>
			}
			while (*p) putc_bfd(&pb, *p++);
 8008336:	e009      	b.n	800834c <f_printf+0x218>
 8008338:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800833a:	1c5a      	adds	r2, r3, #1
 800833c:	67fa      	str	r2, [r7, #124]	; 0x7c
 800833e:	781a      	ldrb	r2, [r3, #0]
 8008340:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008344:	4611      	mov	r1, r2
 8008346:	4618      	mov	r0, r3
 8008348:	f7ff fe7d 	bl	8008046 <putc_bfd>
 800834c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800834e:	781b      	ldrb	r3, [r3, #0]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d1f1      	bne.n	8008338 <f_printf+0x204>
			while (j++ < w) putc_bfd(&pb, ' ');
 8008354:	e005      	b.n	8008362 <f_printf+0x22e>
 8008356:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800835a:	2120      	movs	r1, #32
 800835c:	4618      	mov	r0, r3
 800835e:	f7ff fe72 	bl	8008046 <putc_bfd>
 8008362:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008366:	1c5a      	adds	r2, r3, #1
 8008368:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800836c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8008370:	429a      	cmp	r2, r3
 8008372:	d8f0      	bhi.n	8008356 <f_printf+0x222>
			continue;
 8008374:	e0ea      	b.n	800854c <f_printf+0x418>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 8008376:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008378:	1d1a      	adds	r2, r3, #4
 800837a:	67ba      	str	r2, [r7, #120]	; 0x78
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	b2da      	uxtb	r2, r3
 8008380:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008384:	4611      	mov	r1, r2
 8008386:	4618      	mov	r0, r3
 8008388:	f7ff fe5d 	bl	8008046 <putc_bfd>
 800838c:	e0de      	b.n	800854c <f_printf+0x418>

		case 'B' :					/* Binary */
			r = 2; break;
 800838e:	2302      	movs	r3, #2
 8008390:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 8008394:	e014      	b.n	80083c0 <f_printf+0x28c>

		case 'O' :					/* Octal */
			r = 8; break;
 8008396:	2308      	movs	r3, #8
 8008398:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800839c:	e010      	b.n	80083c0 <f_printf+0x28c>

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 800839e:	230a      	movs	r3, #10
 80083a0:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 80083a4:	e00c      	b.n	80083c0 <f_printf+0x28c>

		case 'X' :					/* Hexdecimal */
			r = 16; break;
 80083a6:	2310      	movs	r3, #16
 80083a8:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 80083ac:	e008      	b.n	80083c0 <f_printf+0x28c>

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 80083ae:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 80083b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80083b6:	4611      	mov	r1, r2
 80083b8:	4618      	mov	r0, r3
 80083ba:	f7ff fe44 	bl	8008046 <putc_bfd>
 80083be:	e0c5      	b.n	800854c <f_printf+0x418>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 80083c0:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80083c4:	f003 0304 	and.w	r3, r3, #4
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d004      	beq.n	80083d6 <f_printf+0x2a2>
 80083cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80083ce:	1d1a      	adds	r2, r3, #4
 80083d0:	67ba      	str	r2, [r7, #120]	; 0x78
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	e00c      	b.n	80083f0 <f_printf+0x2bc>
 80083d6:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80083da:	2b44      	cmp	r3, #68	; 0x44
 80083dc:	d104      	bne.n	80083e8 <f_printf+0x2b4>
 80083de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80083e0:	1d1a      	adds	r2, r3, #4
 80083e2:	67ba      	str	r2, [r7, #120]	; 0x78
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	e003      	b.n	80083f0 <f_printf+0x2bc>
 80083e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80083ea:	1d1a      	adds	r2, r3, #4
 80083ec:	67ba      	str	r2, [r7, #120]	; 0x78
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		if (d == 'D' && (v & 0x80000000)) {
 80083f4:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 80083f8:	2b44      	cmp	r3, #68	; 0x44
 80083fa:	d10e      	bne.n	800841a <f_printf+0x2e6>
 80083fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008400:	2b00      	cmp	r3, #0
 8008402:	da0a      	bge.n	800841a <f_printf+0x2e6>
			v = 0 - v;
 8008404:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008408:	425b      	negs	r3, r3
 800840a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			f |= 8;
 800840e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8008412:	f043 0308 	orr.w	r3, r3, #8
 8008416:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		}
		i = 0;
 800841a:	2300      	movs	r3, #0
 800841c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		do {
			d = (TCHAR)(v % r); v /= r;
 8008420:	f897 2096 	ldrb.w	r2, [r7, #150]	; 0x96
 8008424:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008428:	fbb3 f1f2 	udiv	r1, r3, r2
 800842c:	fb01 f202 	mul.w	r2, r1, r2
 8008430:	1a9b      	subs	r3, r3, r2
 8008432:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
 8008436:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 800843a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800843e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008442:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 8008446:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800844a:	2b09      	cmp	r3, #9
 800844c:	d90b      	bls.n	8008466 <f_printf+0x332>
 800844e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8008452:	2b78      	cmp	r3, #120	; 0x78
 8008454:	d101      	bne.n	800845a <f_printf+0x326>
 8008456:	2227      	movs	r2, #39	; 0x27
 8008458:	e000      	b.n	800845c <f_printf+0x328>
 800845a:	2207      	movs	r2, #7
 800845c:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8008460:	4413      	add	r3, r2
 8008462:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
			str[i++] = d + '0';
 8008466:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800846a:	1c5a      	adds	r2, r3, #1
 800846c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8008470:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 8008474:	3230      	adds	r2, #48	; 0x30
 8008476:	b2d2      	uxtb	r2, r2
 8008478:	3398      	adds	r3, #152	; 0x98
 800847a:	443b      	add	r3, r7
 800847c:	f803 2c8c 	strb.w	r2, [r3, #-140]
		} while (v && i < sizeof str / sizeof str[0]);
 8008480:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008484:	2b00      	cmp	r3, #0
 8008486:	d003      	beq.n	8008490 <f_printf+0x35c>
 8008488:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800848c:	2b1f      	cmp	r3, #31
 800848e:	d9c7      	bls.n	8008420 <f_printf+0x2ec>
		if (f & 8) str[i++] = '-';
 8008490:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8008494:	f003 0308 	and.w	r3, r3, #8
 8008498:	2b00      	cmp	r3, #0
 800849a:	d009      	beq.n	80084b0 <f_printf+0x37c>
 800849c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80084a0:	1c5a      	adds	r2, r3, #1
 80084a2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80084a6:	3398      	adds	r3, #152	; 0x98
 80084a8:	443b      	add	r3, r7
 80084aa:	222d      	movs	r2, #45	; 0x2d
 80084ac:	f803 2c8c 	strb.w	r2, [r3, #-140]
		j = i; d = (f & 1) ? '0' : ' ';
 80084b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80084b4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80084b8:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80084bc:	f003 0301 	and.w	r3, r3, #1
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d001      	beq.n	80084c8 <f_printf+0x394>
 80084c4:	2330      	movs	r3, #48	; 0x30
 80084c6:	e000      	b.n	80084ca <f_printf+0x396>
 80084c8:	2320      	movs	r3, #32
 80084ca:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 80084ce:	e007      	b.n	80084e0 <f_printf+0x3ac>
 80084d0:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 80084d4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80084d8:	4611      	mov	r1, r2
 80084da:	4618      	mov	r0, r3
 80084dc:	f7ff fdb3 	bl	8008046 <putc_bfd>
 80084e0:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80084e4:	f003 0302 	and.w	r3, r3, #2
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d108      	bne.n	80084fe <f_printf+0x3ca>
 80084ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80084f0:	1c5a      	adds	r2, r3, #1
 80084f2:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80084f6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80084fa:	429a      	cmp	r2, r3
 80084fc:	d8e8      	bhi.n	80084d0 <f_printf+0x39c>
		do {
			putc_bfd(&pb, str[--i]);
 80084fe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008502:	3b01      	subs	r3, #1
 8008504:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008508:	f107 020c 	add.w	r2, r7, #12
 800850c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008510:	4413      	add	r3, r2
 8008512:	781a      	ldrb	r2, [r3, #0]
 8008514:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008518:	4611      	mov	r1, r2
 800851a:	4618      	mov	r0, r3
 800851c:	f7ff fd93 	bl	8008046 <putc_bfd>
		} while (i);
 8008520:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008524:	2b00      	cmp	r3, #0
 8008526:	d1ea      	bne.n	80084fe <f_printf+0x3ca>
		while (j++ < w) putc_bfd(&pb, d);
 8008528:	e007      	b.n	800853a <f_printf+0x406>
 800852a:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800852e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008532:	4611      	mov	r1, r2
 8008534:	4618      	mov	r0, r3
 8008536:	f7ff fd86 	bl	8008046 <putc_bfd>
 800853a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800853e:	1c5a      	adds	r2, r3, #1
 8008540:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008544:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8008548:	429a      	cmp	r2, r3
 800854a:	d8ee      	bhi.n	800852a <f_printf+0x3f6>
		c = *fmt++;
 800854c:	e600      	b.n	8008150 <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 800854e:	bf00      	nop
 8008550:	e000      	b.n	8008554 <f_printf+0x420>
		if (!c) break;
 8008552:	bf00      	nop
	}

	va_end(arp);

	return putc_flush(&pb);
 8008554:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008558:	4618      	mov	r0, r3
 800855a:	f7ff fdb1 	bl	80080c0 <putc_flush>
 800855e:	4603      	mov	r3, r0
}
 8008560:	4618      	mov	r0, r3
 8008562:	379c      	adds	r7, #156	; 0x9c
 8008564:	46bd      	mov	sp, r7
 8008566:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800856a:	b003      	add	sp, #12
 800856c:	4770      	bx	lr
 800856e:	bf00      	nop

08008570 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008570:	b480      	push	{r7}
 8008572:	b087      	sub	sp, #28
 8008574:	af00      	add	r7, sp, #0
 8008576:	60f8      	str	r0, [r7, #12]
 8008578:	60b9      	str	r1, [r7, #8]
 800857a:	4613      	mov	r3, r2
 800857c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800857e:	2301      	movs	r3, #1
 8008580:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8008582:	2300      	movs	r3, #0
 8008584:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8008586:	4b1f      	ldr	r3, [pc, #124]	; (8008604 <FATFS_LinkDriverEx+0x94>)
 8008588:	7a5b      	ldrb	r3, [r3, #9]
 800858a:	b2db      	uxtb	r3, r3
 800858c:	2b00      	cmp	r3, #0
 800858e:	d131      	bne.n	80085f4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008590:	4b1c      	ldr	r3, [pc, #112]	; (8008604 <FATFS_LinkDriverEx+0x94>)
 8008592:	7a5b      	ldrb	r3, [r3, #9]
 8008594:	b2db      	uxtb	r3, r3
 8008596:	461a      	mov	r2, r3
 8008598:	4b1a      	ldr	r3, [pc, #104]	; (8008604 <FATFS_LinkDriverEx+0x94>)
 800859a:	2100      	movs	r1, #0
 800859c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800859e:	4b19      	ldr	r3, [pc, #100]	; (8008604 <FATFS_LinkDriverEx+0x94>)
 80085a0:	7a5b      	ldrb	r3, [r3, #9]
 80085a2:	b2db      	uxtb	r3, r3
 80085a4:	4a17      	ldr	r2, [pc, #92]	; (8008604 <FATFS_LinkDriverEx+0x94>)
 80085a6:	009b      	lsls	r3, r3, #2
 80085a8:	4413      	add	r3, r2
 80085aa:	68fa      	ldr	r2, [r7, #12]
 80085ac:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80085ae:	4b15      	ldr	r3, [pc, #84]	; (8008604 <FATFS_LinkDriverEx+0x94>)
 80085b0:	7a5b      	ldrb	r3, [r3, #9]
 80085b2:	b2db      	uxtb	r3, r3
 80085b4:	461a      	mov	r2, r3
 80085b6:	4b13      	ldr	r3, [pc, #76]	; (8008604 <FATFS_LinkDriverEx+0x94>)
 80085b8:	4413      	add	r3, r2
 80085ba:	79fa      	ldrb	r2, [r7, #7]
 80085bc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80085be:	4b11      	ldr	r3, [pc, #68]	; (8008604 <FATFS_LinkDriverEx+0x94>)
 80085c0:	7a5b      	ldrb	r3, [r3, #9]
 80085c2:	b2db      	uxtb	r3, r3
 80085c4:	1c5a      	adds	r2, r3, #1
 80085c6:	b2d1      	uxtb	r1, r2
 80085c8:	4a0e      	ldr	r2, [pc, #56]	; (8008604 <FATFS_LinkDriverEx+0x94>)
 80085ca:	7251      	strb	r1, [r2, #9]
 80085cc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80085ce:	7dbb      	ldrb	r3, [r7, #22]
 80085d0:	3330      	adds	r3, #48	; 0x30
 80085d2:	b2da      	uxtb	r2, r3
 80085d4:	68bb      	ldr	r3, [r7, #8]
 80085d6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80085d8:	68bb      	ldr	r3, [r7, #8]
 80085da:	3301      	adds	r3, #1
 80085dc:	223a      	movs	r2, #58	; 0x3a
 80085de:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80085e0:	68bb      	ldr	r3, [r7, #8]
 80085e2:	3302      	adds	r3, #2
 80085e4:	222f      	movs	r2, #47	; 0x2f
 80085e6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80085e8:	68bb      	ldr	r3, [r7, #8]
 80085ea:	3303      	adds	r3, #3
 80085ec:	2200      	movs	r2, #0
 80085ee:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80085f0:	2300      	movs	r3, #0
 80085f2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80085f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80085f6:	4618      	mov	r0, r3
 80085f8:	371c      	adds	r7, #28
 80085fa:	46bd      	mov	sp, r7
 80085fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008600:	4770      	bx	lr
 8008602:	bf00      	nop
 8008604:	200014a4 	.word	0x200014a4

08008608 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b082      	sub	sp, #8
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
 8008610:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8008612:	2200      	movs	r2, #0
 8008614:	6839      	ldr	r1, [r7, #0]
 8008616:	6878      	ldr	r0, [r7, #4]
 8008618:	f7ff ffaa 	bl	8008570 <FATFS_LinkDriverEx>
 800861c:	4603      	mov	r3, r0
}
 800861e:	4618      	mov	r0, r3
 8008620:	3708      	adds	r7, #8
 8008622:	46bd      	mov	sp, r7
 8008624:	bd80      	pop	{r7, pc}
	...

08008628 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8008628:	b480      	push	{r7}
 800862a:	b085      	sub	sp, #20
 800862c:	af00      	add	r7, sp, #0
 800862e:	4603      	mov	r3, r0
 8008630:	6039      	str	r1, [r7, #0]
 8008632:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8008634:	88fb      	ldrh	r3, [r7, #6]
 8008636:	2b7f      	cmp	r3, #127	; 0x7f
 8008638:	d802      	bhi.n	8008640 <ff_convert+0x18>
		c = chr;
 800863a:	88fb      	ldrh	r3, [r7, #6]
 800863c:	81fb      	strh	r3, [r7, #14]
 800863e:	e025      	b.n	800868c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d00b      	beq.n	800865e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8008646:	88fb      	ldrh	r3, [r7, #6]
 8008648:	2bff      	cmp	r3, #255	; 0xff
 800864a:	d805      	bhi.n	8008658 <ff_convert+0x30>
 800864c:	88fb      	ldrh	r3, [r7, #6]
 800864e:	3b80      	subs	r3, #128	; 0x80
 8008650:	4a12      	ldr	r2, [pc, #72]	; (800869c <ff_convert+0x74>)
 8008652:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008656:	e000      	b.n	800865a <ff_convert+0x32>
 8008658:	2300      	movs	r3, #0
 800865a:	81fb      	strh	r3, [r7, #14]
 800865c:	e016      	b.n	800868c <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800865e:	2300      	movs	r3, #0
 8008660:	81fb      	strh	r3, [r7, #14]
 8008662:	e009      	b.n	8008678 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8008664:	89fb      	ldrh	r3, [r7, #14]
 8008666:	4a0d      	ldr	r2, [pc, #52]	; (800869c <ff_convert+0x74>)
 8008668:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800866c:	88fa      	ldrh	r2, [r7, #6]
 800866e:	429a      	cmp	r2, r3
 8008670:	d006      	beq.n	8008680 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8008672:	89fb      	ldrh	r3, [r7, #14]
 8008674:	3301      	adds	r3, #1
 8008676:	81fb      	strh	r3, [r7, #14]
 8008678:	89fb      	ldrh	r3, [r7, #14]
 800867a:	2b7f      	cmp	r3, #127	; 0x7f
 800867c:	d9f2      	bls.n	8008664 <ff_convert+0x3c>
 800867e:	e000      	b.n	8008682 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8008680:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8008682:	89fb      	ldrh	r3, [r7, #14]
 8008684:	3380      	adds	r3, #128	; 0x80
 8008686:	b29b      	uxth	r3, r3
 8008688:	b2db      	uxtb	r3, r3
 800868a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800868c:	89fb      	ldrh	r3, [r7, #14]
}
 800868e:	4618      	mov	r0, r3
 8008690:	3714      	adds	r7, #20
 8008692:	46bd      	mov	sp, r7
 8008694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008698:	4770      	bx	lr
 800869a:	bf00      	nop
 800869c:	0800dc00 	.word	0x0800dc00

080086a0 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 80086a0:	b480      	push	{r7}
 80086a2:	b087      	sub	sp, #28
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	4603      	mov	r3, r0
 80086a8:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 80086aa:	88fb      	ldrh	r3, [r7, #6]
 80086ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086b0:	d201      	bcs.n	80086b6 <ff_wtoupper+0x16>
 80086b2:	4b3e      	ldr	r3, [pc, #248]	; (80087ac <ff_wtoupper+0x10c>)
 80086b4:	e000      	b.n	80086b8 <ff_wtoupper+0x18>
 80086b6:	4b3e      	ldr	r3, [pc, #248]	; (80087b0 <ff_wtoupper+0x110>)
 80086b8:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 80086ba:	697b      	ldr	r3, [r7, #20]
 80086bc:	1c9a      	adds	r2, r3, #2
 80086be:	617a      	str	r2, [r7, #20]
 80086c0:	881b      	ldrh	r3, [r3, #0]
 80086c2:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 80086c4:	8a7b      	ldrh	r3, [r7, #18]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d068      	beq.n	800879c <ff_wtoupper+0xfc>
 80086ca:	88fa      	ldrh	r2, [r7, #6]
 80086cc:	8a7b      	ldrh	r3, [r7, #18]
 80086ce:	429a      	cmp	r2, r3
 80086d0:	d364      	bcc.n	800879c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80086d2:	697b      	ldr	r3, [r7, #20]
 80086d4:	1c9a      	adds	r2, r3, #2
 80086d6:	617a      	str	r2, [r7, #20]
 80086d8:	881b      	ldrh	r3, [r3, #0]
 80086da:	823b      	strh	r3, [r7, #16]
 80086dc:	8a3b      	ldrh	r3, [r7, #16]
 80086de:	0a1b      	lsrs	r3, r3, #8
 80086e0:	81fb      	strh	r3, [r7, #14]
 80086e2:	8a3b      	ldrh	r3, [r7, #16]
 80086e4:	b2db      	uxtb	r3, r3
 80086e6:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 80086e8:	88fa      	ldrh	r2, [r7, #6]
 80086ea:	8a79      	ldrh	r1, [r7, #18]
 80086ec:	8a3b      	ldrh	r3, [r7, #16]
 80086ee:	440b      	add	r3, r1
 80086f0:	429a      	cmp	r2, r3
 80086f2:	da49      	bge.n	8008788 <ff_wtoupper+0xe8>
			switch (cmd) {
 80086f4:	89fb      	ldrh	r3, [r7, #14]
 80086f6:	2b08      	cmp	r3, #8
 80086f8:	d84f      	bhi.n	800879a <ff_wtoupper+0xfa>
 80086fa:	a201      	add	r2, pc, #4	; (adr r2, 8008700 <ff_wtoupper+0x60>)
 80086fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008700:	08008725 	.word	0x08008725
 8008704:	08008737 	.word	0x08008737
 8008708:	0800874d 	.word	0x0800874d
 800870c:	08008755 	.word	0x08008755
 8008710:	0800875d 	.word	0x0800875d
 8008714:	08008765 	.word	0x08008765
 8008718:	0800876d 	.word	0x0800876d
 800871c:	08008775 	.word	0x08008775
 8008720:	0800877d 	.word	0x0800877d
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8008724:	88fa      	ldrh	r2, [r7, #6]
 8008726:	8a7b      	ldrh	r3, [r7, #18]
 8008728:	1ad3      	subs	r3, r2, r3
 800872a:	005b      	lsls	r3, r3, #1
 800872c:	697a      	ldr	r2, [r7, #20]
 800872e:	4413      	add	r3, r2
 8008730:	881b      	ldrh	r3, [r3, #0]
 8008732:	80fb      	strh	r3, [r7, #6]
 8008734:	e027      	b.n	8008786 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8008736:	88fa      	ldrh	r2, [r7, #6]
 8008738:	8a7b      	ldrh	r3, [r7, #18]
 800873a:	1ad3      	subs	r3, r2, r3
 800873c:	b29b      	uxth	r3, r3
 800873e:	f003 0301 	and.w	r3, r3, #1
 8008742:	b29b      	uxth	r3, r3
 8008744:	88fa      	ldrh	r2, [r7, #6]
 8008746:	1ad3      	subs	r3, r2, r3
 8008748:	80fb      	strh	r3, [r7, #6]
 800874a:	e01c      	b.n	8008786 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800874c:	88fb      	ldrh	r3, [r7, #6]
 800874e:	3b10      	subs	r3, #16
 8008750:	80fb      	strh	r3, [r7, #6]
 8008752:	e018      	b.n	8008786 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8008754:	88fb      	ldrh	r3, [r7, #6]
 8008756:	3b20      	subs	r3, #32
 8008758:	80fb      	strh	r3, [r7, #6]
 800875a:	e014      	b.n	8008786 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800875c:	88fb      	ldrh	r3, [r7, #6]
 800875e:	3b30      	subs	r3, #48	; 0x30
 8008760:	80fb      	strh	r3, [r7, #6]
 8008762:	e010      	b.n	8008786 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8008764:	88fb      	ldrh	r3, [r7, #6]
 8008766:	3b1a      	subs	r3, #26
 8008768:	80fb      	strh	r3, [r7, #6]
 800876a:	e00c      	b.n	8008786 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800876c:	88fb      	ldrh	r3, [r7, #6]
 800876e:	3308      	adds	r3, #8
 8008770:	80fb      	strh	r3, [r7, #6]
 8008772:	e008      	b.n	8008786 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8008774:	88fb      	ldrh	r3, [r7, #6]
 8008776:	3b50      	subs	r3, #80	; 0x50
 8008778:	80fb      	strh	r3, [r7, #6]
 800877a:	e004      	b.n	8008786 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800877c:	88fb      	ldrh	r3, [r7, #6]
 800877e:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8008782:	80fb      	strh	r3, [r7, #6]
 8008784:	bf00      	nop
			}
			break;
 8008786:	e008      	b.n	800879a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8008788:	89fb      	ldrh	r3, [r7, #14]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d195      	bne.n	80086ba <ff_wtoupper+0x1a>
 800878e:	8a3b      	ldrh	r3, [r7, #16]
 8008790:	005b      	lsls	r3, r3, #1
 8008792:	697a      	ldr	r2, [r7, #20]
 8008794:	4413      	add	r3, r2
 8008796:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8008798:	e78f      	b.n	80086ba <ff_wtoupper+0x1a>
			break;
 800879a:	bf00      	nop
	}

	return chr;
 800879c:	88fb      	ldrh	r3, [r7, #6]
}
 800879e:	4618      	mov	r0, r3
 80087a0:	371c      	adds	r7, #28
 80087a2:	46bd      	mov	sp, r7
 80087a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a8:	4770      	bx	lr
 80087aa:	bf00      	nop
 80087ac:	0800dd00 	.word	0x0800dd00
 80087b0:	0800def4 	.word	0x0800def4

080087b4 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b084      	sub	sp, #16
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	4603      	mov	r3, r0
 80087bc:	6039      	str	r1, [r7, #0]
 80087be:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 80087c0:	2200      	movs	r2, #0
 80087c2:	2101      	movs	r1, #1
 80087c4:	2001      	movs	r0, #1
 80087c6:	f000 f9f9 	bl	8008bbc <osSemaphoreNew>
 80087ca:	4602      	mov	r2, r0
 80087cc:	683b      	ldr	r3, [r7, #0]
 80087ce:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	bf14      	ite	ne
 80087d8:	2301      	movne	r3, #1
 80087da:	2300      	moveq	r3, #0
 80087dc:	b2db      	uxtb	r3, r3
 80087de:	60fb      	str	r3, [r7, #12]

    return ret;
 80087e0:	68fb      	ldr	r3, [r7, #12]
}
 80087e2:	4618      	mov	r0, r3
 80087e4:	3710      	adds	r7, #16
 80087e6:	46bd      	mov	sp, r7
 80087e8:	bd80      	pop	{r7, pc}

080087ea <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 80087ea:	b580      	push	{r7, lr}
 80087ec:	b082      	sub	sp, #8
 80087ee:	af00      	add	r7, sp, #0
 80087f0:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 80087f2:	6878      	ldr	r0, [r7, #4]
 80087f4:	f000 fb02 	bl	8008dfc <osSemaphoreDelete>
#endif
    return 1;
 80087f8:	2301      	movs	r3, #1
}
 80087fa:	4618      	mov	r0, r3
 80087fc:	3708      	adds	r7, #8
 80087fe:	46bd      	mov	sp, r7
 8008800:	bd80      	pop	{r7, pc}

08008802 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 8008802:	b580      	push	{r7, lr}
 8008804:	b084      	sub	sp, #16
 8008806:	af00      	add	r7, sp, #0
 8008808:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800880a:	2300      	movs	r3, #0
 800880c:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 800880e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008812:	6878      	ldr	r0, [r7, #4]
 8008814:	f000 fa5c 	bl	8008cd0 <osSemaphoreAcquire>
 8008818:	4603      	mov	r3, r0
 800881a:	2b00      	cmp	r3, #0
 800881c:	d101      	bne.n	8008822 <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 800881e:	2301      	movs	r3, #1
 8008820:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8008822:	68fb      	ldr	r3, [r7, #12]
}
 8008824:	4618      	mov	r0, r3
 8008826:	3710      	adds	r7, #16
 8008828:	46bd      	mov	sp, r7
 800882a:	bd80      	pop	{r7, pc}

0800882c <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800882c:	b580      	push	{r7, lr}
 800882e:	b082      	sub	sp, #8
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 8008834:	6878      	ldr	r0, [r7, #4]
 8008836:	f000 fa9d 	bl	8008d74 <osSemaphoreRelease>
#endif
}
 800883a:	bf00      	nop
 800883c:	3708      	adds	r7, #8
 800883e:	46bd      	mov	sp, r7
 8008840:	bd80      	pop	{r7, pc}
	...

08008844 <__NVIC_SetPriority>:
{
 8008844:	b480      	push	{r7}
 8008846:	b083      	sub	sp, #12
 8008848:	af00      	add	r7, sp, #0
 800884a:	4603      	mov	r3, r0
 800884c:	6039      	str	r1, [r7, #0]
 800884e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008850:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008854:	2b00      	cmp	r3, #0
 8008856:	db0a      	blt.n	800886e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	b2da      	uxtb	r2, r3
 800885c:	490c      	ldr	r1, [pc, #48]	; (8008890 <__NVIC_SetPriority+0x4c>)
 800885e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008862:	0112      	lsls	r2, r2, #4
 8008864:	b2d2      	uxtb	r2, r2
 8008866:	440b      	add	r3, r1
 8008868:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800886c:	e00a      	b.n	8008884 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800886e:	683b      	ldr	r3, [r7, #0]
 8008870:	b2da      	uxtb	r2, r3
 8008872:	4908      	ldr	r1, [pc, #32]	; (8008894 <__NVIC_SetPriority+0x50>)
 8008874:	79fb      	ldrb	r3, [r7, #7]
 8008876:	f003 030f 	and.w	r3, r3, #15
 800887a:	3b04      	subs	r3, #4
 800887c:	0112      	lsls	r2, r2, #4
 800887e:	b2d2      	uxtb	r2, r2
 8008880:	440b      	add	r3, r1
 8008882:	761a      	strb	r2, [r3, #24]
}
 8008884:	bf00      	nop
 8008886:	370c      	adds	r7, #12
 8008888:	46bd      	mov	sp, r7
 800888a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888e:	4770      	bx	lr
 8008890:	e000e100 	.word	0xe000e100
 8008894:	e000ed00 	.word	0xe000ed00

08008898 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008898:	b580      	push	{r7, lr}
 800889a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800889c:	2100      	movs	r1, #0
 800889e:	f06f 0004 	mvn.w	r0, #4
 80088a2:	f7ff ffcf 	bl	8008844 <__NVIC_SetPriority>
#endif
}
 80088a6:	bf00      	nop
 80088a8:	bd80      	pop	{r7, pc}
	...

080088ac <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80088ac:	b480      	push	{r7}
 80088ae:	b083      	sub	sp, #12
 80088b0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80088b2:	f3ef 8305 	mrs	r3, IPSR
 80088b6:	603b      	str	r3, [r7, #0]
  return(result);
 80088b8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d003      	beq.n	80088c6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80088be:	f06f 0305 	mvn.w	r3, #5
 80088c2:	607b      	str	r3, [r7, #4]
 80088c4:	e00c      	b.n	80088e0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80088c6:	4b0a      	ldr	r3, [pc, #40]	; (80088f0 <osKernelInitialize+0x44>)
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d105      	bne.n	80088da <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80088ce:	4b08      	ldr	r3, [pc, #32]	; (80088f0 <osKernelInitialize+0x44>)
 80088d0:	2201      	movs	r2, #1
 80088d2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80088d4:	2300      	movs	r3, #0
 80088d6:	607b      	str	r3, [r7, #4]
 80088d8:	e002      	b.n	80088e0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80088da:	f04f 33ff 	mov.w	r3, #4294967295
 80088de:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80088e0:	687b      	ldr	r3, [r7, #4]
}
 80088e2:	4618      	mov	r0, r3
 80088e4:	370c      	adds	r7, #12
 80088e6:	46bd      	mov	sp, r7
 80088e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ec:	4770      	bx	lr
 80088ee:	bf00      	nop
 80088f0:	200014b0 	.word	0x200014b0

080088f4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b082      	sub	sp, #8
 80088f8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80088fa:	f3ef 8305 	mrs	r3, IPSR
 80088fe:	603b      	str	r3, [r7, #0]
  return(result);
 8008900:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008902:	2b00      	cmp	r3, #0
 8008904:	d003      	beq.n	800890e <osKernelStart+0x1a>
    stat = osErrorISR;
 8008906:	f06f 0305 	mvn.w	r3, #5
 800890a:	607b      	str	r3, [r7, #4]
 800890c:	e010      	b.n	8008930 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800890e:	4b0b      	ldr	r3, [pc, #44]	; (800893c <osKernelStart+0x48>)
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	2b01      	cmp	r3, #1
 8008914:	d109      	bne.n	800892a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008916:	f7ff ffbf 	bl	8008898 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800891a:	4b08      	ldr	r3, [pc, #32]	; (800893c <osKernelStart+0x48>)
 800891c:	2202      	movs	r2, #2
 800891e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008920:	f001 fd5c 	bl	800a3dc <vTaskStartScheduler>
      stat = osOK;
 8008924:	2300      	movs	r3, #0
 8008926:	607b      	str	r3, [r7, #4]
 8008928:	e002      	b.n	8008930 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800892a:	f04f 33ff 	mov.w	r3, #4294967295
 800892e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008930:	687b      	ldr	r3, [r7, #4]
}
 8008932:	4618      	mov	r0, r3
 8008934:	3708      	adds	r7, #8
 8008936:	46bd      	mov	sp, r7
 8008938:	bd80      	pop	{r7, pc}
 800893a:	bf00      	nop
 800893c:	200014b0 	.word	0x200014b0

08008940 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008940:	b580      	push	{r7, lr}
 8008942:	b08e      	sub	sp, #56	; 0x38
 8008944:	af04      	add	r7, sp, #16
 8008946:	60f8      	str	r0, [r7, #12]
 8008948:	60b9      	str	r1, [r7, #8]
 800894a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800894c:	2300      	movs	r3, #0
 800894e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008950:	f3ef 8305 	mrs	r3, IPSR
 8008954:	617b      	str	r3, [r7, #20]
  return(result);
 8008956:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008958:	2b00      	cmp	r3, #0
 800895a:	d17e      	bne.n	8008a5a <osThreadNew+0x11a>
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d07b      	beq.n	8008a5a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8008962:	2380      	movs	r3, #128	; 0x80
 8008964:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008966:	2318      	movs	r3, #24
 8008968:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800896a:	2300      	movs	r3, #0
 800896c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800896e:	f04f 33ff 	mov.w	r3, #4294967295
 8008972:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2b00      	cmp	r3, #0
 8008978:	d045      	beq.n	8008a06 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d002      	beq.n	8008988 <osThreadNew+0x48>
        name = attr->name;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	699b      	ldr	r3, [r3, #24]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d002      	beq.n	8008996 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	699b      	ldr	r3, [r3, #24]
 8008994:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008996:	69fb      	ldr	r3, [r7, #28]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d008      	beq.n	80089ae <osThreadNew+0x6e>
 800899c:	69fb      	ldr	r3, [r7, #28]
 800899e:	2b38      	cmp	r3, #56	; 0x38
 80089a0:	d805      	bhi.n	80089ae <osThreadNew+0x6e>
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	685b      	ldr	r3, [r3, #4]
 80089a6:	f003 0301 	and.w	r3, r3, #1
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d001      	beq.n	80089b2 <osThreadNew+0x72>
        return (NULL);
 80089ae:	2300      	movs	r3, #0
 80089b0:	e054      	b.n	8008a5c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	695b      	ldr	r3, [r3, #20]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d003      	beq.n	80089c2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	695b      	ldr	r3, [r3, #20]
 80089be:	089b      	lsrs	r3, r3, #2
 80089c0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	689b      	ldr	r3, [r3, #8]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d00e      	beq.n	80089e8 <osThreadNew+0xa8>
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	68db      	ldr	r3, [r3, #12]
 80089ce:	2b5b      	cmp	r3, #91	; 0x5b
 80089d0:	d90a      	bls.n	80089e8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d006      	beq.n	80089e8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	695b      	ldr	r3, [r3, #20]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d002      	beq.n	80089e8 <osThreadNew+0xa8>
        mem = 1;
 80089e2:	2301      	movs	r3, #1
 80089e4:	61bb      	str	r3, [r7, #24]
 80089e6:	e010      	b.n	8008a0a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	689b      	ldr	r3, [r3, #8]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d10c      	bne.n	8008a0a <osThreadNew+0xca>
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	68db      	ldr	r3, [r3, #12]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d108      	bne.n	8008a0a <osThreadNew+0xca>
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	691b      	ldr	r3, [r3, #16]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d104      	bne.n	8008a0a <osThreadNew+0xca>
          mem = 0;
 8008a00:	2300      	movs	r3, #0
 8008a02:	61bb      	str	r3, [r7, #24]
 8008a04:	e001      	b.n	8008a0a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8008a06:	2300      	movs	r3, #0
 8008a08:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008a0a:	69bb      	ldr	r3, [r7, #24]
 8008a0c:	2b01      	cmp	r3, #1
 8008a0e:	d110      	bne.n	8008a32 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008a14:	687a      	ldr	r2, [r7, #4]
 8008a16:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008a18:	9202      	str	r2, [sp, #8]
 8008a1a:	9301      	str	r3, [sp, #4]
 8008a1c:	69fb      	ldr	r3, [r7, #28]
 8008a1e:	9300      	str	r3, [sp, #0]
 8008a20:	68bb      	ldr	r3, [r7, #8]
 8008a22:	6a3a      	ldr	r2, [r7, #32]
 8008a24:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008a26:	68f8      	ldr	r0, [r7, #12]
 8008a28:	f001 fb02 	bl	800a030 <xTaskCreateStatic>
 8008a2c:	4603      	mov	r3, r0
 8008a2e:	613b      	str	r3, [r7, #16]
 8008a30:	e013      	b.n	8008a5a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8008a32:	69bb      	ldr	r3, [r7, #24]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d110      	bne.n	8008a5a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008a38:	6a3b      	ldr	r3, [r7, #32]
 8008a3a:	b29a      	uxth	r2, r3
 8008a3c:	f107 0310 	add.w	r3, r7, #16
 8008a40:	9301      	str	r3, [sp, #4]
 8008a42:	69fb      	ldr	r3, [r7, #28]
 8008a44:	9300      	str	r3, [sp, #0]
 8008a46:	68bb      	ldr	r3, [r7, #8]
 8008a48:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008a4a:	68f8      	ldr	r0, [r7, #12]
 8008a4c:	f001 fb4d 	bl	800a0ea <xTaskCreate>
 8008a50:	4603      	mov	r3, r0
 8008a52:	2b01      	cmp	r3, #1
 8008a54:	d001      	beq.n	8008a5a <osThreadNew+0x11a>
            hTask = NULL;
 8008a56:	2300      	movs	r3, #0
 8008a58:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008a5a:	693b      	ldr	r3, [r7, #16]
}
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	3728      	adds	r7, #40	; 0x28
 8008a60:	46bd      	mov	sp, r7
 8008a62:	bd80      	pop	{r7, pc}

08008a64 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b084      	sub	sp, #16
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008a6c:	f3ef 8305 	mrs	r3, IPSR
 8008a70:	60bb      	str	r3, [r7, #8]
  return(result);
 8008a72:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d003      	beq.n	8008a80 <osDelay+0x1c>
    stat = osErrorISR;
 8008a78:	f06f 0305 	mvn.w	r3, #5
 8008a7c:	60fb      	str	r3, [r7, #12]
 8008a7e:	e007      	b.n	8008a90 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008a80:	2300      	movs	r3, #0
 8008a82:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d002      	beq.n	8008a90 <osDelay+0x2c>
      vTaskDelay(ticks);
 8008a8a:	6878      	ldr	r0, [r7, #4]
 8008a8c:	f001 fc72 	bl	800a374 <vTaskDelay>
    }
  }

  return (stat);
 8008a90:	68fb      	ldr	r3, [r7, #12]
}
 8008a92:	4618      	mov	r0, r3
 8008a94:	3710      	adds	r7, #16
 8008a96:	46bd      	mov	sp, r7
 8008a98:	bd80      	pop	{r7, pc}

08008a9a <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 8008a9a:	b580      	push	{r7, lr}
 8008a9c:	b084      	sub	sp, #16
 8008a9e:	af00      	add	r7, sp, #0
 8008aa0:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8008aa2:	6878      	ldr	r0, [r7, #4]
 8008aa4:	f002 fea8 	bl	800b7f8 <pvTimerGetTimerID>
 8008aa8:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d005      	beq.n	8008abc <TimerCallback+0x22>
    callb->func (callb->arg);
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	68fa      	ldr	r2, [r7, #12]
 8008ab6:	6852      	ldr	r2, [r2, #4]
 8008ab8:	4610      	mov	r0, r2
 8008aba:	4798      	blx	r3
  }
}
 8008abc:	bf00      	nop
 8008abe:	3710      	adds	r7, #16
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	bd80      	pop	{r7, pc}

08008ac4 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b08c      	sub	sp, #48	; 0x30
 8008ac8:	af02      	add	r7, sp, #8
 8008aca:	60f8      	str	r0, [r7, #12]
 8008acc:	607a      	str	r2, [r7, #4]
 8008ace:	603b      	str	r3, [r7, #0]
 8008ad0:	460b      	mov	r3, r1
 8008ad2:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008ad8:	f3ef 8305 	mrs	r3, IPSR
 8008adc:	613b      	str	r3, [r7, #16]
  return(result);
 8008ade:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d163      	bne.n	8008bac <osTimerNew+0xe8>
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d060      	beq.n	8008bac <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8008aea:	2008      	movs	r0, #8
 8008aec:	f003 f8f4 	bl	800bcd8 <pvPortMalloc>
 8008af0:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 8008af2:	697b      	ldr	r3, [r7, #20]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d059      	beq.n	8008bac <osTimerNew+0xe8>
      callb->func = func;
 8008af8:	697b      	ldr	r3, [r7, #20]
 8008afa:	68fa      	ldr	r2, [r7, #12]
 8008afc:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 8008afe:	697b      	ldr	r3, [r7, #20]
 8008b00:	687a      	ldr	r2, [r7, #4]
 8008b02:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8008b04:	7afb      	ldrb	r3, [r7, #11]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d102      	bne.n	8008b10 <osTimerNew+0x4c>
        reload = pdFALSE;
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	61fb      	str	r3, [r7, #28]
 8008b0e:	e001      	b.n	8008b14 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 8008b10:	2301      	movs	r3, #1
 8008b12:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 8008b14:	f04f 33ff 	mov.w	r3, #4294967295
 8008b18:	61bb      	str	r3, [r7, #24]
      name = NULL;
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d01c      	beq.n	8008b5e <osTimerNew+0x9a>
        if (attr->name != NULL) {
 8008b24:	683b      	ldr	r3, [r7, #0]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d002      	beq.n	8008b32 <osTimerNew+0x6e>
          name = attr->name;
 8008b2c:	683b      	ldr	r3, [r7, #0]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	689b      	ldr	r3, [r3, #8]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d006      	beq.n	8008b48 <osTimerNew+0x84>
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	68db      	ldr	r3, [r3, #12]
 8008b3e:	2b2b      	cmp	r3, #43	; 0x2b
 8008b40:	d902      	bls.n	8008b48 <osTimerNew+0x84>
          mem = 1;
 8008b42:	2301      	movs	r3, #1
 8008b44:	61bb      	str	r3, [r7, #24]
 8008b46:	e00c      	b.n	8008b62 <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008b48:	683b      	ldr	r3, [r7, #0]
 8008b4a:	689b      	ldr	r3, [r3, #8]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d108      	bne.n	8008b62 <osTimerNew+0x9e>
 8008b50:	683b      	ldr	r3, [r7, #0]
 8008b52:	68db      	ldr	r3, [r3, #12]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d104      	bne.n	8008b62 <osTimerNew+0x9e>
            mem = 0;
 8008b58:	2300      	movs	r3, #0
 8008b5a:	61bb      	str	r3, [r7, #24]
 8008b5c:	e001      	b.n	8008b62 <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 8008b5e:	2300      	movs	r3, #0
 8008b60:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8008b62:	69bb      	ldr	r3, [r7, #24]
 8008b64:	2b01      	cmp	r3, #1
 8008b66:	d10c      	bne.n	8008b82 <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	689b      	ldr	r3, [r3, #8]
 8008b6c:	9301      	str	r3, [sp, #4]
 8008b6e:	4b12      	ldr	r3, [pc, #72]	; (8008bb8 <osTimerNew+0xf4>)
 8008b70:	9300      	str	r3, [sp, #0]
 8008b72:	697b      	ldr	r3, [r7, #20]
 8008b74:	69fa      	ldr	r2, [r7, #28]
 8008b76:	2101      	movs	r1, #1
 8008b78:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008b7a:	f002 fabe 	bl	800b0fa <xTimerCreateStatic>
 8008b7e:	6238      	str	r0, [r7, #32]
 8008b80:	e00b      	b.n	8008b9a <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 8008b82:	69bb      	ldr	r3, [r7, #24]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d108      	bne.n	8008b9a <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8008b88:	4b0b      	ldr	r3, [pc, #44]	; (8008bb8 <osTimerNew+0xf4>)
 8008b8a:	9300      	str	r3, [sp, #0]
 8008b8c:	697b      	ldr	r3, [r7, #20]
 8008b8e:	69fa      	ldr	r2, [r7, #28]
 8008b90:	2101      	movs	r1, #1
 8008b92:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008b94:	f002 fa90 	bl	800b0b8 <xTimerCreate>
 8008b98:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 8008b9a:	6a3b      	ldr	r3, [r7, #32]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d105      	bne.n	8008bac <osTimerNew+0xe8>
 8008ba0:	697b      	ldr	r3, [r7, #20]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d002      	beq.n	8008bac <osTimerNew+0xe8>
        vPortFree (callb);
 8008ba6:	6978      	ldr	r0, [r7, #20]
 8008ba8:	f003 f962 	bl	800be70 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8008bac:	6a3b      	ldr	r3, [r7, #32]
}
 8008bae:	4618      	mov	r0, r3
 8008bb0:	3728      	adds	r7, #40	; 0x28
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	bd80      	pop	{r7, pc}
 8008bb6:	bf00      	nop
 8008bb8:	08008a9b 	.word	0x08008a9b

08008bbc <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b08a      	sub	sp, #40	; 0x28
 8008bc0:	af02      	add	r7, sp, #8
 8008bc2:	60f8      	str	r0, [r7, #12]
 8008bc4:	60b9      	str	r1, [r7, #8]
 8008bc6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8008bc8:	2300      	movs	r3, #0
 8008bca:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008bcc:	f3ef 8305 	mrs	r3, IPSR
 8008bd0:	613b      	str	r3, [r7, #16]
  return(result);
 8008bd2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d175      	bne.n	8008cc4 <osSemaphoreNew+0x108>
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d072      	beq.n	8008cc4 <osSemaphoreNew+0x108>
 8008bde:	68ba      	ldr	r2, [r7, #8]
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	429a      	cmp	r2, r3
 8008be4:	d86e      	bhi.n	8008cc4 <osSemaphoreNew+0x108>
    mem = -1;
 8008be6:	f04f 33ff 	mov.w	r3, #4294967295
 8008bea:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d015      	beq.n	8008c1e <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	689b      	ldr	r3, [r3, #8]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d006      	beq.n	8008c08 <osSemaphoreNew+0x4c>
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	68db      	ldr	r3, [r3, #12]
 8008bfe:	2b4f      	cmp	r3, #79	; 0x4f
 8008c00:	d902      	bls.n	8008c08 <osSemaphoreNew+0x4c>
        mem = 1;
 8008c02:	2301      	movs	r3, #1
 8008c04:	61bb      	str	r3, [r7, #24]
 8008c06:	e00c      	b.n	8008c22 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	689b      	ldr	r3, [r3, #8]
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d108      	bne.n	8008c22 <osSemaphoreNew+0x66>
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	68db      	ldr	r3, [r3, #12]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d104      	bne.n	8008c22 <osSemaphoreNew+0x66>
          mem = 0;
 8008c18:	2300      	movs	r3, #0
 8008c1a:	61bb      	str	r3, [r7, #24]
 8008c1c:	e001      	b.n	8008c22 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8008c1e:	2300      	movs	r3, #0
 8008c20:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8008c22:	69bb      	ldr	r3, [r7, #24]
 8008c24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c28:	d04c      	beq.n	8008cc4 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	2b01      	cmp	r3, #1
 8008c2e:	d128      	bne.n	8008c82 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8008c30:	69bb      	ldr	r3, [r7, #24]
 8008c32:	2b01      	cmp	r3, #1
 8008c34:	d10a      	bne.n	8008c4c <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	689b      	ldr	r3, [r3, #8]
 8008c3a:	2203      	movs	r2, #3
 8008c3c:	9200      	str	r2, [sp, #0]
 8008c3e:	2200      	movs	r2, #0
 8008c40:	2100      	movs	r1, #0
 8008c42:	2001      	movs	r0, #1
 8008c44:	f000 fa4e 	bl	80090e4 <xQueueGenericCreateStatic>
 8008c48:	61f8      	str	r0, [r7, #28]
 8008c4a:	e005      	b.n	8008c58 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8008c4c:	2203      	movs	r2, #3
 8008c4e:	2100      	movs	r1, #0
 8008c50:	2001      	movs	r0, #1
 8008c52:	f000 fabf 	bl	80091d4 <xQueueGenericCreate>
 8008c56:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8008c58:	69fb      	ldr	r3, [r7, #28]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d022      	beq.n	8008ca4 <osSemaphoreNew+0xe8>
 8008c5e:	68bb      	ldr	r3, [r7, #8]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d01f      	beq.n	8008ca4 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8008c64:	2300      	movs	r3, #0
 8008c66:	2200      	movs	r2, #0
 8008c68:	2100      	movs	r1, #0
 8008c6a:	69f8      	ldr	r0, [r7, #28]
 8008c6c:	f000 fb7a 	bl	8009364 <xQueueGenericSend>
 8008c70:	4603      	mov	r3, r0
 8008c72:	2b01      	cmp	r3, #1
 8008c74:	d016      	beq.n	8008ca4 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8008c76:	69f8      	ldr	r0, [r7, #28]
 8008c78:	f001 f806 	bl	8009c88 <vQueueDelete>
            hSemaphore = NULL;
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	61fb      	str	r3, [r7, #28]
 8008c80:	e010      	b.n	8008ca4 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8008c82:	69bb      	ldr	r3, [r7, #24]
 8008c84:	2b01      	cmp	r3, #1
 8008c86:	d108      	bne.n	8008c9a <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	689b      	ldr	r3, [r3, #8]
 8008c8c:	461a      	mov	r2, r3
 8008c8e:	68b9      	ldr	r1, [r7, #8]
 8008c90:	68f8      	ldr	r0, [r7, #12]
 8008c92:	f000 fafc 	bl	800928e <xQueueCreateCountingSemaphoreStatic>
 8008c96:	61f8      	str	r0, [r7, #28]
 8008c98:	e004      	b.n	8008ca4 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8008c9a:	68b9      	ldr	r1, [r7, #8]
 8008c9c:	68f8      	ldr	r0, [r7, #12]
 8008c9e:	f000 fb2d 	bl	80092fc <xQueueCreateCountingSemaphore>
 8008ca2:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8008ca4:	69fb      	ldr	r3, [r7, #28]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d00c      	beq.n	8008cc4 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d003      	beq.n	8008cb8 <osSemaphoreNew+0xfc>
          name = attr->name;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	617b      	str	r3, [r7, #20]
 8008cb6:	e001      	b.n	8008cbc <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8008cb8:	2300      	movs	r3, #0
 8008cba:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8008cbc:	6979      	ldr	r1, [r7, #20]
 8008cbe:	69f8      	ldr	r0, [r7, #28]
 8008cc0:	f001 f92e 	bl	8009f20 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8008cc4:	69fb      	ldr	r3, [r7, #28]
}
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	3720      	adds	r7, #32
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	bd80      	pop	{r7, pc}
	...

08008cd0 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	b086      	sub	sp, #24
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
 8008cd8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8008cde:	2300      	movs	r3, #0
 8008ce0:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8008ce2:	693b      	ldr	r3, [r7, #16]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d103      	bne.n	8008cf0 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8008ce8:	f06f 0303 	mvn.w	r3, #3
 8008cec:	617b      	str	r3, [r7, #20]
 8008cee:	e039      	b.n	8008d64 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008cf0:	f3ef 8305 	mrs	r3, IPSR
 8008cf4:	60fb      	str	r3, [r7, #12]
  return(result);
 8008cf6:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d022      	beq.n	8008d42 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d003      	beq.n	8008d0a <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8008d02:	f06f 0303 	mvn.w	r3, #3
 8008d06:	617b      	str	r3, [r7, #20]
 8008d08:	e02c      	b.n	8008d64 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8008d0e:	f107 0308 	add.w	r3, r7, #8
 8008d12:	461a      	mov	r2, r3
 8008d14:	2100      	movs	r1, #0
 8008d16:	6938      	ldr	r0, [r7, #16]
 8008d18:	f000 ff36 	bl	8009b88 <xQueueReceiveFromISR>
 8008d1c:	4603      	mov	r3, r0
 8008d1e:	2b01      	cmp	r3, #1
 8008d20:	d003      	beq.n	8008d2a <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8008d22:	f06f 0302 	mvn.w	r3, #2
 8008d26:	617b      	str	r3, [r7, #20]
 8008d28:	e01c      	b.n	8008d64 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8008d2a:	68bb      	ldr	r3, [r7, #8]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d019      	beq.n	8008d64 <osSemaphoreAcquire+0x94>
 8008d30:	4b0f      	ldr	r3, [pc, #60]	; (8008d70 <osSemaphoreAcquire+0xa0>)
 8008d32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d36:	601a      	str	r2, [r3, #0]
 8008d38:	f3bf 8f4f 	dsb	sy
 8008d3c:	f3bf 8f6f 	isb	sy
 8008d40:	e010      	b.n	8008d64 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8008d42:	6839      	ldr	r1, [r7, #0]
 8008d44:	6938      	ldr	r0, [r7, #16]
 8008d46:	f000 fe13 	bl	8009970 <xQueueSemaphoreTake>
 8008d4a:	4603      	mov	r3, r0
 8008d4c:	2b01      	cmp	r3, #1
 8008d4e:	d009      	beq.n	8008d64 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8008d50:	683b      	ldr	r3, [r7, #0]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d003      	beq.n	8008d5e <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8008d56:	f06f 0301 	mvn.w	r3, #1
 8008d5a:	617b      	str	r3, [r7, #20]
 8008d5c:	e002      	b.n	8008d64 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8008d5e:	f06f 0302 	mvn.w	r3, #2
 8008d62:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8008d64:	697b      	ldr	r3, [r7, #20]
}
 8008d66:	4618      	mov	r0, r3
 8008d68:	3718      	adds	r7, #24
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	bd80      	pop	{r7, pc}
 8008d6e:	bf00      	nop
 8008d70:	e000ed04 	.word	0xe000ed04

08008d74 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b086      	sub	sp, #24
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8008d80:	2300      	movs	r3, #0
 8008d82:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8008d84:	693b      	ldr	r3, [r7, #16]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d103      	bne.n	8008d92 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8008d8a:	f06f 0303 	mvn.w	r3, #3
 8008d8e:	617b      	str	r3, [r7, #20]
 8008d90:	e02c      	b.n	8008dec <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008d92:	f3ef 8305 	mrs	r3, IPSR
 8008d96:	60fb      	str	r3, [r7, #12]
  return(result);
 8008d98:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d01a      	beq.n	8008dd4 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8008d9e:	2300      	movs	r3, #0
 8008da0:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8008da2:	f107 0308 	add.w	r3, r7, #8
 8008da6:	4619      	mov	r1, r3
 8008da8:	6938      	ldr	r0, [r7, #16]
 8008daa:	f000 fc74 	bl	8009696 <xQueueGiveFromISR>
 8008dae:	4603      	mov	r3, r0
 8008db0:	2b01      	cmp	r3, #1
 8008db2:	d003      	beq.n	8008dbc <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8008db4:	f06f 0302 	mvn.w	r3, #2
 8008db8:	617b      	str	r3, [r7, #20]
 8008dba:	e017      	b.n	8008dec <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8008dbc:	68bb      	ldr	r3, [r7, #8]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d014      	beq.n	8008dec <osSemaphoreRelease+0x78>
 8008dc2:	4b0d      	ldr	r3, [pc, #52]	; (8008df8 <osSemaphoreRelease+0x84>)
 8008dc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008dc8:	601a      	str	r2, [r3, #0]
 8008dca:	f3bf 8f4f 	dsb	sy
 8008dce:	f3bf 8f6f 	isb	sy
 8008dd2:	e00b      	b.n	8008dec <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	2100      	movs	r1, #0
 8008dda:	6938      	ldr	r0, [r7, #16]
 8008ddc:	f000 fac2 	bl	8009364 <xQueueGenericSend>
 8008de0:	4603      	mov	r3, r0
 8008de2:	2b01      	cmp	r3, #1
 8008de4:	d002      	beq.n	8008dec <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8008de6:	f06f 0302 	mvn.w	r3, #2
 8008dea:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8008dec:	697b      	ldr	r3, [r7, #20]
}
 8008dee:	4618      	mov	r0, r3
 8008df0:	3718      	adds	r7, #24
 8008df2:	46bd      	mov	sp, r7
 8008df4:	bd80      	pop	{r7, pc}
 8008df6:	bf00      	nop
 8008df8:	e000ed04 	.word	0xe000ed04

08008dfc <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b086      	sub	sp, #24
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008e08:	f3ef 8305 	mrs	r3, IPSR
 8008e0c:	60fb      	str	r3, [r7, #12]
  return(result);
 8008e0e:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d003      	beq.n	8008e1c <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 8008e14:	f06f 0305 	mvn.w	r3, #5
 8008e18:	617b      	str	r3, [r7, #20]
 8008e1a:	e00e      	b.n	8008e3a <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 8008e1c:	693b      	ldr	r3, [r7, #16]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d103      	bne.n	8008e2a <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 8008e22:	f06f 0303 	mvn.w	r3, #3
 8008e26:	617b      	str	r3, [r7, #20]
 8008e28:	e007      	b.n	8008e3a <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 8008e2a:	6938      	ldr	r0, [r7, #16]
 8008e2c:	f001 f8a2 	bl	8009f74 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8008e30:	2300      	movs	r3, #0
 8008e32:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 8008e34:	6938      	ldr	r0, [r7, #16]
 8008e36:	f000 ff27 	bl	8009c88 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8008e3a:	697b      	ldr	r3, [r7, #20]
}
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	3718      	adds	r7, #24
 8008e40:	46bd      	mov	sp, r7
 8008e42:	bd80      	pop	{r7, pc}

08008e44 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008e44:	b480      	push	{r7}
 8008e46:	b085      	sub	sp, #20
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	60f8      	str	r0, [r7, #12]
 8008e4c:	60b9      	str	r1, [r7, #8]
 8008e4e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	4a07      	ldr	r2, [pc, #28]	; (8008e70 <vApplicationGetIdleTaskMemory+0x2c>)
 8008e54:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008e56:	68bb      	ldr	r3, [r7, #8]
 8008e58:	4a06      	ldr	r2, [pc, #24]	; (8008e74 <vApplicationGetIdleTaskMemory+0x30>)
 8008e5a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	2280      	movs	r2, #128	; 0x80
 8008e60:	601a      	str	r2, [r3, #0]
}
 8008e62:	bf00      	nop
 8008e64:	3714      	adds	r7, #20
 8008e66:	46bd      	mov	sp, r7
 8008e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6c:	4770      	bx	lr
 8008e6e:	bf00      	nop
 8008e70:	200014b4 	.word	0x200014b4
 8008e74:	20001510 	.word	0x20001510

08008e78 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008e78:	b480      	push	{r7}
 8008e7a:	b085      	sub	sp, #20
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	60f8      	str	r0, [r7, #12]
 8008e80:	60b9      	str	r1, [r7, #8]
 8008e82:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	4a07      	ldr	r2, [pc, #28]	; (8008ea4 <vApplicationGetTimerTaskMemory+0x2c>)
 8008e88:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008e8a:	68bb      	ldr	r3, [r7, #8]
 8008e8c:	4a06      	ldr	r2, [pc, #24]	; (8008ea8 <vApplicationGetTimerTaskMemory+0x30>)
 8008e8e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008e96:	601a      	str	r2, [r3, #0]
}
 8008e98:	bf00      	nop
 8008e9a:	3714      	adds	r7, #20
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea2:	4770      	bx	lr
 8008ea4:	20001710 	.word	0x20001710
 8008ea8:	2000176c 	.word	0x2000176c

08008eac <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008eac:	b480      	push	{r7}
 8008eae:	b083      	sub	sp, #12
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	f103 0208 	add.w	r2, r3, #8
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	f04f 32ff 	mov.w	r2, #4294967295
 8008ec4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	f103 0208 	add.w	r2, r3, #8
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	f103 0208 	add.w	r2, r3, #8
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	2200      	movs	r2, #0
 8008ede:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008ee0:	bf00      	nop
 8008ee2:	370c      	adds	r7, #12
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eea:	4770      	bx	lr

08008eec <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008eec:	b480      	push	{r7}
 8008eee:	b083      	sub	sp, #12
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008efa:	bf00      	nop
 8008efc:	370c      	adds	r7, #12
 8008efe:	46bd      	mov	sp, r7
 8008f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f04:	4770      	bx	lr

08008f06 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008f06:	b480      	push	{r7}
 8008f08:	b085      	sub	sp, #20
 8008f0a:	af00      	add	r7, sp, #0
 8008f0c:	6078      	str	r0, [r7, #4]
 8008f0e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	685b      	ldr	r3, [r3, #4]
 8008f14:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008f16:	683b      	ldr	r3, [r7, #0]
 8008f18:	68fa      	ldr	r2, [r7, #12]
 8008f1a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	689a      	ldr	r2, [r3, #8]
 8008f20:	683b      	ldr	r3, [r7, #0]
 8008f22:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	689b      	ldr	r3, [r3, #8]
 8008f28:	683a      	ldr	r2, [r7, #0]
 8008f2a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	683a      	ldr	r2, [r7, #0]
 8008f30:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008f32:	683b      	ldr	r3, [r7, #0]
 8008f34:	687a      	ldr	r2, [r7, #4]
 8008f36:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	1c5a      	adds	r2, r3, #1
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	601a      	str	r2, [r3, #0]
}
 8008f42:	bf00      	nop
 8008f44:	3714      	adds	r7, #20
 8008f46:	46bd      	mov	sp, r7
 8008f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4c:	4770      	bx	lr

08008f4e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008f4e:	b480      	push	{r7}
 8008f50:	b085      	sub	sp, #20
 8008f52:	af00      	add	r7, sp, #0
 8008f54:	6078      	str	r0, [r7, #4]
 8008f56:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008f58:	683b      	ldr	r3, [r7, #0]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008f5e:	68bb      	ldr	r3, [r7, #8]
 8008f60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f64:	d103      	bne.n	8008f6e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	691b      	ldr	r3, [r3, #16]
 8008f6a:	60fb      	str	r3, [r7, #12]
 8008f6c:	e00c      	b.n	8008f88 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	3308      	adds	r3, #8
 8008f72:	60fb      	str	r3, [r7, #12]
 8008f74:	e002      	b.n	8008f7c <vListInsert+0x2e>
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	685b      	ldr	r3, [r3, #4]
 8008f7a:	60fb      	str	r3, [r7, #12]
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	685b      	ldr	r3, [r3, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	68ba      	ldr	r2, [r7, #8]
 8008f84:	429a      	cmp	r2, r3
 8008f86:	d2f6      	bcs.n	8008f76 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	685a      	ldr	r2, [r3, #4]
 8008f8c:	683b      	ldr	r3, [r7, #0]
 8008f8e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008f90:	683b      	ldr	r3, [r7, #0]
 8008f92:	685b      	ldr	r3, [r3, #4]
 8008f94:	683a      	ldr	r2, [r7, #0]
 8008f96:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008f98:	683b      	ldr	r3, [r7, #0]
 8008f9a:	68fa      	ldr	r2, [r7, #12]
 8008f9c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	683a      	ldr	r2, [r7, #0]
 8008fa2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008fa4:	683b      	ldr	r3, [r7, #0]
 8008fa6:	687a      	ldr	r2, [r7, #4]
 8008fa8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	1c5a      	adds	r2, r3, #1
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	601a      	str	r2, [r3, #0]
}
 8008fb4:	bf00      	nop
 8008fb6:	3714      	adds	r7, #20
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fbe:	4770      	bx	lr

08008fc0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008fc0:	b480      	push	{r7}
 8008fc2:	b085      	sub	sp, #20
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	691b      	ldr	r3, [r3, #16]
 8008fcc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	685b      	ldr	r3, [r3, #4]
 8008fd2:	687a      	ldr	r2, [r7, #4]
 8008fd4:	6892      	ldr	r2, [r2, #8]
 8008fd6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	689b      	ldr	r3, [r3, #8]
 8008fdc:	687a      	ldr	r2, [r7, #4]
 8008fde:	6852      	ldr	r2, [r2, #4]
 8008fe0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	685b      	ldr	r3, [r3, #4]
 8008fe6:	687a      	ldr	r2, [r7, #4]
 8008fe8:	429a      	cmp	r2, r3
 8008fea:	d103      	bne.n	8008ff4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	689a      	ldr	r2, [r3, #8]
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2200      	movs	r2, #0
 8008ff8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	1e5a      	subs	r2, r3, #1
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	681b      	ldr	r3, [r3, #0]
}
 8009008:	4618      	mov	r0, r3
 800900a:	3714      	adds	r7, #20
 800900c:	46bd      	mov	sp, r7
 800900e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009012:	4770      	bx	lr

08009014 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009014:	b580      	push	{r7, lr}
 8009016:	b084      	sub	sp, #16
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]
 800901c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d10a      	bne.n	800903e <xQueueGenericReset+0x2a>
	__asm volatile
 8009028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800902c:	f383 8811 	msr	BASEPRI, r3
 8009030:	f3bf 8f6f 	isb	sy
 8009034:	f3bf 8f4f 	dsb	sy
 8009038:	60bb      	str	r3, [r7, #8]
}
 800903a:	bf00      	nop
 800903c:	e7fe      	b.n	800903c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800903e:	f002 fd29 	bl	800ba94 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	681a      	ldr	r2, [r3, #0]
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800904a:	68f9      	ldr	r1, [r7, #12]
 800904c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800904e:	fb01 f303 	mul.w	r3, r1, r3
 8009052:	441a      	add	r2, r3
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	2200      	movs	r2, #0
 800905c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	681a      	ldr	r2, [r3, #0]
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	681a      	ldr	r2, [r3, #0]
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800906e:	3b01      	subs	r3, #1
 8009070:	68f9      	ldr	r1, [r7, #12]
 8009072:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009074:	fb01 f303 	mul.w	r3, r1, r3
 8009078:	441a      	add	r2, r3
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	22ff      	movs	r2, #255	; 0xff
 8009082:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	22ff      	movs	r2, #255	; 0xff
 800908a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800908e:	683b      	ldr	r3, [r7, #0]
 8009090:	2b00      	cmp	r3, #0
 8009092:	d114      	bne.n	80090be <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	691b      	ldr	r3, [r3, #16]
 8009098:	2b00      	cmp	r3, #0
 800909a:	d01a      	beq.n	80090d2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	3310      	adds	r3, #16
 80090a0:	4618      	mov	r0, r3
 80090a2:	f001 fc25 	bl	800a8f0 <xTaskRemoveFromEventList>
 80090a6:	4603      	mov	r3, r0
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d012      	beq.n	80090d2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80090ac:	4b0c      	ldr	r3, [pc, #48]	; (80090e0 <xQueueGenericReset+0xcc>)
 80090ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090b2:	601a      	str	r2, [r3, #0]
 80090b4:	f3bf 8f4f 	dsb	sy
 80090b8:	f3bf 8f6f 	isb	sy
 80090bc:	e009      	b.n	80090d2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	3310      	adds	r3, #16
 80090c2:	4618      	mov	r0, r3
 80090c4:	f7ff fef2 	bl	8008eac <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	3324      	adds	r3, #36	; 0x24
 80090cc:	4618      	mov	r0, r3
 80090ce:	f7ff feed 	bl	8008eac <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80090d2:	f002 fd0f 	bl	800baf4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80090d6:	2301      	movs	r3, #1
}
 80090d8:	4618      	mov	r0, r3
 80090da:	3710      	adds	r7, #16
 80090dc:	46bd      	mov	sp, r7
 80090de:	bd80      	pop	{r7, pc}
 80090e0:	e000ed04 	.word	0xe000ed04

080090e4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80090e4:	b580      	push	{r7, lr}
 80090e6:	b08e      	sub	sp, #56	; 0x38
 80090e8:	af02      	add	r7, sp, #8
 80090ea:	60f8      	str	r0, [r7, #12]
 80090ec:	60b9      	str	r1, [r7, #8]
 80090ee:	607a      	str	r2, [r7, #4]
 80090f0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d10a      	bne.n	800910e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80090f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090fc:	f383 8811 	msr	BASEPRI, r3
 8009100:	f3bf 8f6f 	isb	sy
 8009104:	f3bf 8f4f 	dsb	sy
 8009108:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800910a:	bf00      	nop
 800910c:	e7fe      	b.n	800910c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800910e:	683b      	ldr	r3, [r7, #0]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d10a      	bne.n	800912a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009118:	f383 8811 	msr	BASEPRI, r3
 800911c:	f3bf 8f6f 	isb	sy
 8009120:	f3bf 8f4f 	dsb	sy
 8009124:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009126:	bf00      	nop
 8009128:	e7fe      	b.n	8009128 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d002      	beq.n	8009136 <xQueueGenericCreateStatic+0x52>
 8009130:	68bb      	ldr	r3, [r7, #8]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d001      	beq.n	800913a <xQueueGenericCreateStatic+0x56>
 8009136:	2301      	movs	r3, #1
 8009138:	e000      	b.n	800913c <xQueueGenericCreateStatic+0x58>
 800913a:	2300      	movs	r3, #0
 800913c:	2b00      	cmp	r3, #0
 800913e:	d10a      	bne.n	8009156 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009144:	f383 8811 	msr	BASEPRI, r3
 8009148:	f3bf 8f6f 	isb	sy
 800914c:	f3bf 8f4f 	dsb	sy
 8009150:	623b      	str	r3, [r7, #32]
}
 8009152:	bf00      	nop
 8009154:	e7fe      	b.n	8009154 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	2b00      	cmp	r3, #0
 800915a:	d102      	bne.n	8009162 <xQueueGenericCreateStatic+0x7e>
 800915c:	68bb      	ldr	r3, [r7, #8]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d101      	bne.n	8009166 <xQueueGenericCreateStatic+0x82>
 8009162:	2301      	movs	r3, #1
 8009164:	e000      	b.n	8009168 <xQueueGenericCreateStatic+0x84>
 8009166:	2300      	movs	r3, #0
 8009168:	2b00      	cmp	r3, #0
 800916a:	d10a      	bne.n	8009182 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800916c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009170:	f383 8811 	msr	BASEPRI, r3
 8009174:	f3bf 8f6f 	isb	sy
 8009178:	f3bf 8f4f 	dsb	sy
 800917c:	61fb      	str	r3, [r7, #28]
}
 800917e:	bf00      	nop
 8009180:	e7fe      	b.n	8009180 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009182:	2350      	movs	r3, #80	; 0x50
 8009184:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009186:	697b      	ldr	r3, [r7, #20]
 8009188:	2b50      	cmp	r3, #80	; 0x50
 800918a:	d00a      	beq.n	80091a2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800918c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009190:	f383 8811 	msr	BASEPRI, r3
 8009194:	f3bf 8f6f 	isb	sy
 8009198:	f3bf 8f4f 	dsb	sy
 800919c:	61bb      	str	r3, [r7, #24]
}
 800919e:	bf00      	nop
 80091a0:	e7fe      	b.n	80091a0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80091a2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80091a4:	683b      	ldr	r3, [r7, #0]
 80091a6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80091a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d00d      	beq.n	80091ca <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80091ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091b0:	2201      	movs	r2, #1
 80091b2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80091b6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80091ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091bc:	9300      	str	r3, [sp, #0]
 80091be:	4613      	mov	r3, r2
 80091c0:	687a      	ldr	r2, [r7, #4]
 80091c2:	68b9      	ldr	r1, [r7, #8]
 80091c4:	68f8      	ldr	r0, [r7, #12]
 80091c6:	f000 f83f 	bl	8009248 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80091ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80091cc:	4618      	mov	r0, r3
 80091ce:	3730      	adds	r7, #48	; 0x30
 80091d0:	46bd      	mov	sp, r7
 80091d2:	bd80      	pop	{r7, pc}

080091d4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80091d4:	b580      	push	{r7, lr}
 80091d6:	b08a      	sub	sp, #40	; 0x28
 80091d8:	af02      	add	r7, sp, #8
 80091da:	60f8      	str	r0, [r7, #12]
 80091dc:	60b9      	str	r1, [r7, #8]
 80091de:	4613      	mov	r3, r2
 80091e0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d10a      	bne.n	80091fe <xQueueGenericCreate+0x2a>
	__asm volatile
 80091e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091ec:	f383 8811 	msr	BASEPRI, r3
 80091f0:	f3bf 8f6f 	isb	sy
 80091f4:	f3bf 8f4f 	dsb	sy
 80091f8:	613b      	str	r3, [r7, #16]
}
 80091fa:	bf00      	nop
 80091fc:	e7fe      	b.n	80091fc <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	68ba      	ldr	r2, [r7, #8]
 8009202:	fb02 f303 	mul.w	r3, r2, r3
 8009206:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009208:	69fb      	ldr	r3, [r7, #28]
 800920a:	3350      	adds	r3, #80	; 0x50
 800920c:	4618      	mov	r0, r3
 800920e:	f002 fd63 	bl	800bcd8 <pvPortMalloc>
 8009212:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009214:	69bb      	ldr	r3, [r7, #24]
 8009216:	2b00      	cmp	r3, #0
 8009218:	d011      	beq.n	800923e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800921a:	69bb      	ldr	r3, [r7, #24]
 800921c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800921e:	697b      	ldr	r3, [r7, #20]
 8009220:	3350      	adds	r3, #80	; 0x50
 8009222:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009224:	69bb      	ldr	r3, [r7, #24]
 8009226:	2200      	movs	r2, #0
 8009228:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800922c:	79fa      	ldrb	r2, [r7, #7]
 800922e:	69bb      	ldr	r3, [r7, #24]
 8009230:	9300      	str	r3, [sp, #0]
 8009232:	4613      	mov	r3, r2
 8009234:	697a      	ldr	r2, [r7, #20]
 8009236:	68b9      	ldr	r1, [r7, #8]
 8009238:	68f8      	ldr	r0, [r7, #12]
 800923a:	f000 f805 	bl	8009248 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800923e:	69bb      	ldr	r3, [r7, #24]
	}
 8009240:	4618      	mov	r0, r3
 8009242:	3720      	adds	r7, #32
 8009244:	46bd      	mov	sp, r7
 8009246:	bd80      	pop	{r7, pc}

08009248 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009248:	b580      	push	{r7, lr}
 800924a:	b084      	sub	sp, #16
 800924c:	af00      	add	r7, sp, #0
 800924e:	60f8      	str	r0, [r7, #12]
 8009250:	60b9      	str	r1, [r7, #8]
 8009252:	607a      	str	r2, [r7, #4]
 8009254:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009256:	68bb      	ldr	r3, [r7, #8]
 8009258:	2b00      	cmp	r3, #0
 800925a:	d103      	bne.n	8009264 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800925c:	69bb      	ldr	r3, [r7, #24]
 800925e:	69ba      	ldr	r2, [r7, #24]
 8009260:	601a      	str	r2, [r3, #0]
 8009262:	e002      	b.n	800926a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009264:	69bb      	ldr	r3, [r7, #24]
 8009266:	687a      	ldr	r2, [r7, #4]
 8009268:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800926a:	69bb      	ldr	r3, [r7, #24]
 800926c:	68fa      	ldr	r2, [r7, #12]
 800926e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009270:	69bb      	ldr	r3, [r7, #24]
 8009272:	68ba      	ldr	r2, [r7, #8]
 8009274:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009276:	2101      	movs	r1, #1
 8009278:	69b8      	ldr	r0, [r7, #24]
 800927a:	f7ff fecb 	bl	8009014 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800927e:	69bb      	ldr	r3, [r7, #24]
 8009280:	78fa      	ldrb	r2, [r7, #3]
 8009282:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009286:	bf00      	nop
 8009288:	3710      	adds	r7, #16
 800928a:	46bd      	mov	sp, r7
 800928c:	bd80      	pop	{r7, pc}

0800928e <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800928e:	b580      	push	{r7, lr}
 8009290:	b08a      	sub	sp, #40	; 0x28
 8009292:	af02      	add	r7, sp, #8
 8009294:	60f8      	str	r0, [r7, #12]
 8009296:	60b9      	str	r1, [r7, #8]
 8009298:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d10a      	bne.n	80092b6 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 80092a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092a4:	f383 8811 	msr	BASEPRI, r3
 80092a8:	f3bf 8f6f 	isb	sy
 80092ac:	f3bf 8f4f 	dsb	sy
 80092b0:	61bb      	str	r3, [r7, #24]
}
 80092b2:	bf00      	nop
 80092b4:	e7fe      	b.n	80092b4 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80092b6:	68ba      	ldr	r2, [r7, #8]
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	429a      	cmp	r2, r3
 80092bc:	d90a      	bls.n	80092d4 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 80092be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092c2:	f383 8811 	msr	BASEPRI, r3
 80092c6:	f3bf 8f6f 	isb	sy
 80092ca:	f3bf 8f4f 	dsb	sy
 80092ce:	617b      	str	r3, [r7, #20]
}
 80092d0:	bf00      	nop
 80092d2:	e7fe      	b.n	80092d2 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80092d4:	2302      	movs	r3, #2
 80092d6:	9300      	str	r3, [sp, #0]
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	2200      	movs	r2, #0
 80092dc:	2100      	movs	r1, #0
 80092de:	68f8      	ldr	r0, [r7, #12]
 80092e0:	f7ff ff00 	bl	80090e4 <xQueueGenericCreateStatic>
 80092e4:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80092e6:	69fb      	ldr	r3, [r7, #28]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d002      	beq.n	80092f2 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80092ec:	69fb      	ldr	r3, [r7, #28]
 80092ee:	68ba      	ldr	r2, [r7, #8]
 80092f0:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80092f2:	69fb      	ldr	r3, [r7, #28]
	}
 80092f4:	4618      	mov	r0, r3
 80092f6:	3720      	adds	r7, #32
 80092f8:	46bd      	mov	sp, r7
 80092fa:	bd80      	pop	{r7, pc}

080092fc <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b086      	sub	sp, #24
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
 8009304:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d10a      	bne.n	8009322 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800930c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009310:	f383 8811 	msr	BASEPRI, r3
 8009314:	f3bf 8f6f 	isb	sy
 8009318:	f3bf 8f4f 	dsb	sy
 800931c:	613b      	str	r3, [r7, #16]
}
 800931e:	bf00      	nop
 8009320:	e7fe      	b.n	8009320 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009322:	683a      	ldr	r2, [r7, #0]
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	429a      	cmp	r2, r3
 8009328:	d90a      	bls.n	8009340 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800932a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800932e:	f383 8811 	msr	BASEPRI, r3
 8009332:	f3bf 8f6f 	isb	sy
 8009336:	f3bf 8f4f 	dsb	sy
 800933a:	60fb      	str	r3, [r7, #12]
}
 800933c:	bf00      	nop
 800933e:	e7fe      	b.n	800933e <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009340:	2202      	movs	r2, #2
 8009342:	2100      	movs	r1, #0
 8009344:	6878      	ldr	r0, [r7, #4]
 8009346:	f7ff ff45 	bl	80091d4 <xQueueGenericCreate>
 800934a:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800934c:	697b      	ldr	r3, [r7, #20]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d002      	beq.n	8009358 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009352:	697b      	ldr	r3, [r7, #20]
 8009354:	683a      	ldr	r2, [r7, #0]
 8009356:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8009358:	697b      	ldr	r3, [r7, #20]
	}
 800935a:	4618      	mov	r0, r3
 800935c:	3718      	adds	r7, #24
 800935e:	46bd      	mov	sp, r7
 8009360:	bd80      	pop	{r7, pc}
	...

08009364 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009364:	b580      	push	{r7, lr}
 8009366:	b08e      	sub	sp, #56	; 0x38
 8009368:	af00      	add	r7, sp, #0
 800936a:	60f8      	str	r0, [r7, #12]
 800936c:	60b9      	str	r1, [r7, #8]
 800936e:	607a      	str	r2, [r7, #4]
 8009370:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009372:	2300      	movs	r3, #0
 8009374:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800937a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800937c:	2b00      	cmp	r3, #0
 800937e:	d10a      	bne.n	8009396 <xQueueGenericSend+0x32>
	__asm volatile
 8009380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009384:	f383 8811 	msr	BASEPRI, r3
 8009388:	f3bf 8f6f 	isb	sy
 800938c:	f3bf 8f4f 	dsb	sy
 8009390:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009392:	bf00      	nop
 8009394:	e7fe      	b.n	8009394 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009396:	68bb      	ldr	r3, [r7, #8]
 8009398:	2b00      	cmp	r3, #0
 800939a:	d103      	bne.n	80093a4 <xQueueGenericSend+0x40>
 800939c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800939e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d101      	bne.n	80093a8 <xQueueGenericSend+0x44>
 80093a4:	2301      	movs	r3, #1
 80093a6:	e000      	b.n	80093aa <xQueueGenericSend+0x46>
 80093a8:	2300      	movs	r3, #0
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d10a      	bne.n	80093c4 <xQueueGenericSend+0x60>
	__asm volatile
 80093ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093b2:	f383 8811 	msr	BASEPRI, r3
 80093b6:	f3bf 8f6f 	isb	sy
 80093ba:	f3bf 8f4f 	dsb	sy
 80093be:	627b      	str	r3, [r7, #36]	; 0x24
}
 80093c0:	bf00      	nop
 80093c2:	e7fe      	b.n	80093c2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80093c4:	683b      	ldr	r3, [r7, #0]
 80093c6:	2b02      	cmp	r3, #2
 80093c8:	d103      	bne.n	80093d2 <xQueueGenericSend+0x6e>
 80093ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093ce:	2b01      	cmp	r3, #1
 80093d0:	d101      	bne.n	80093d6 <xQueueGenericSend+0x72>
 80093d2:	2301      	movs	r3, #1
 80093d4:	e000      	b.n	80093d8 <xQueueGenericSend+0x74>
 80093d6:	2300      	movs	r3, #0
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d10a      	bne.n	80093f2 <xQueueGenericSend+0x8e>
	__asm volatile
 80093dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093e0:	f383 8811 	msr	BASEPRI, r3
 80093e4:	f3bf 8f6f 	isb	sy
 80093e8:	f3bf 8f4f 	dsb	sy
 80093ec:	623b      	str	r3, [r7, #32]
}
 80093ee:	bf00      	nop
 80093f0:	e7fe      	b.n	80093f0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80093f2:	f001 fc3b 	bl	800ac6c <xTaskGetSchedulerState>
 80093f6:	4603      	mov	r3, r0
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d102      	bne.n	8009402 <xQueueGenericSend+0x9e>
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d101      	bne.n	8009406 <xQueueGenericSend+0xa2>
 8009402:	2301      	movs	r3, #1
 8009404:	e000      	b.n	8009408 <xQueueGenericSend+0xa4>
 8009406:	2300      	movs	r3, #0
 8009408:	2b00      	cmp	r3, #0
 800940a:	d10a      	bne.n	8009422 <xQueueGenericSend+0xbe>
	__asm volatile
 800940c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009410:	f383 8811 	msr	BASEPRI, r3
 8009414:	f3bf 8f6f 	isb	sy
 8009418:	f3bf 8f4f 	dsb	sy
 800941c:	61fb      	str	r3, [r7, #28]
}
 800941e:	bf00      	nop
 8009420:	e7fe      	b.n	8009420 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009422:	f002 fb37 	bl	800ba94 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009428:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800942a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800942c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800942e:	429a      	cmp	r2, r3
 8009430:	d302      	bcc.n	8009438 <xQueueGenericSend+0xd4>
 8009432:	683b      	ldr	r3, [r7, #0]
 8009434:	2b02      	cmp	r3, #2
 8009436:	d129      	bne.n	800948c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009438:	683a      	ldr	r2, [r7, #0]
 800943a:	68b9      	ldr	r1, [r7, #8]
 800943c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800943e:	f000 fc5e 	bl	8009cfe <prvCopyDataToQueue>
 8009442:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009448:	2b00      	cmp	r3, #0
 800944a:	d010      	beq.n	800946e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800944c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800944e:	3324      	adds	r3, #36	; 0x24
 8009450:	4618      	mov	r0, r3
 8009452:	f001 fa4d 	bl	800a8f0 <xTaskRemoveFromEventList>
 8009456:	4603      	mov	r3, r0
 8009458:	2b00      	cmp	r3, #0
 800945a:	d013      	beq.n	8009484 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800945c:	4b3f      	ldr	r3, [pc, #252]	; (800955c <xQueueGenericSend+0x1f8>)
 800945e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009462:	601a      	str	r2, [r3, #0]
 8009464:	f3bf 8f4f 	dsb	sy
 8009468:	f3bf 8f6f 	isb	sy
 800946c:	e00a      	b.n	8009484 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800946e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009470:	2b00      	cmp	r3, #0
 8009472:	d007      	beq.n	8009484 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009474:	4b39      	ldr	r3, [pc, #228]	; (800955c <xQueueGenericSend+0x1f8>)
 8009476:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800947a:	601a      	str	r2, [r3, #0]
 800947c:	f3bf 8f4f 	dsb	sy
 8009480:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009484:	f002 fb36 	bl	800baf4 <vPortExitCritical>
				return pdPASS;
 8009488:	2301      	movs	r3, #1
 800948a:	e063      	b.n	8009554 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	2b00      	cmp	r3, #0
 8009490:	d103      	bne.n	800949a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009492:	f002 fb2f 	bl	800baf4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009496:	2300      	movs	r3, #0
 8009498:	e05c      	b.n	8009554 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800949a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800949c:	2b00      	cmp	r3, #0
 800949e:	d106      	bne.n	80094ae <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80094a0:	f107 0314 	add.w	r3, r7, #20
 80094a4:	4618      	mov	r0, r3
 80094a6:	f001 fa87 	bl	800a9b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80094aa:	2301      	movs	r3, #1
 80094ac:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80094ae:	f002 fb21 	bl	800baf4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80094b2:	f000 fff9 	bl	800a4a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80094b6:	f002 faed 	bl	800ba94 <vPortEnterCritical>
 80094ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80094c0:	b25b      	sxtb	r3, r3
 80094c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094c6:	d103      	bne.n	80094d0 <xQueueGenericSend+0x16c>
 80094c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094ca:	2200      	movs	r2, #0
 80094cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80094d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80094d6:	b25b      	sxtb	r3, r3
 80094d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094dc:	d103      	bne.n	80094e6 <xQueueGenericSend+0x182>
 80094de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094e0:	2200      	movs	r2, #0
 80094e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80094e6:	f002 fb05 	bl	800baf4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80094ea:	1d3a      	adds	r2, r7, #4
 80094ec:	f107 0314 	add.w	r3, r7, #20
 80094f0:	4611      	mov	r1, r2
 80094f2:	4618      	mov	r0, r3
 80094f4:	f001 fa76 	bl	800a9e4 <xTaskCheckForTimeOut>
 80094f8:	4603      	mov	r3, r0
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d124      	bne.n	8009548 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80094fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009500:	f000 fcf5 	bl	8009eee <prvIsQueueFull>
 8009504:	4603      	mov	r3, r0
 8009506:	2b00      	cmp	r3, #0
 8009508:	d018      	beq.n	800953c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800950a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800950c:	3310      	adds	r3, #16
 800950e:	687a      	ldr	r2, [r7, #4]
 8009510:	4611      	mov	r1, r2
 8009512:	4618      	mov	r0, r3
 8009514:	f001 f99c 	bl	800a850 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009518:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800951a:	f000 fc80 	bl	8009e1e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800951e:	f000 ffd1 	bl	800a4c4 <xTaskResumeAll>
 8009522:	4603      	mov	r3, r0
 8009524:	2b00      	cmp	r3, #0
 8009526:	f47f af7c 	bne.w	8009422 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800952a:	4b0c      	ldr	r3, [pc, #48]	; (800955c <xQueueGenericSend+0x1f8>)
 800952c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009530:	601a      	str	r2, [r3, #0]
 8009532:	f3bf 8f4f 	dsb	sy
 8009536:	f3bf 8f6f 	isb	sy
 800953a:	e772      	b.n	8009422 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800953c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800953e:	f000 fc6e 	bl	8009e1e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009542:	f000 ffbf 	bl	800a4c4 <xTaskResumeAll>
 8009546:	e76c      	b.n	8009422 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009548:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800954a:	f000 fc68 	bl	8009e1e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800954e:	f000 ffb9 	bl	800a4c4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009552:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009554:	4618      	mov	r0, r3
 8009556:	3738      	adds	r7, #56	; 0x38
 8009558:	46bd      	mov	sp, r7
 800955a:	bd80      	pop	{r7, pc}
 800955c:	e000ed04 	.word	0xe000ed04

08009560 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009560:	b580      	push	{r7, lr}
 8009562:	b090      	sub	sp, #64	; 0x40
 8009564:	af00      	add	r7, sp, #0
 8009566:	60f8      	str	r0, [r7, #12]
 8009568:	60b9      	str	r1, [r7, #8]
 800956a:	607a      	str	r2, [r7, #4]
 800956c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8009572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009574:	2b00      	cmp	r3, #0
 8009576:	d10a      	bne.n	800958e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8009578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800957c:	f383 8811 	msr	BASEPRI, r3
 8009580:	f3bf 8f6f 	isb	sy
 8009584:	f3bf 8f4f 	dsb	sy
 8009588:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800958a:	bf00      	nop
 800958c:	e7fe      	b.n	800958c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800958e:	68bb      	ldr	r3, [r7, #8]
 8009590:	2b00      	cmp	r3, #0
 8009592:	d103      	bne.n	800959c <xQueueGenericSendFromISR+0x3c>
 8009594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009598:	2b00      	cmp	r3, #0
 800959a:	d101      	bne.n	80095a0 <xQueueGenericSendFromISR+0x40>
 800959c:	2301      	movs	r3, #1
 800959e:	e000      	b.n	80095a2 <xQueueGenericSendFromISR+0x42>
 80095a0:	2300      	movs	r3, #0
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d10a      	bne.n	80095bc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80095a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095aa:	f383 8811 	msr	BASEPRI, r3
 80095ae:	f3bf 8f6f 	isb	sy
 80095b2:	f3bf 8f4f 	dsb	sy
 80095b6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80095b8:	bf00      	nop
 80095ba:	e7fe      	b.n	80095ba <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80095bc:	683b      	ldr	r3, [r7, #0]
 80095be:	2b02      	cmp	r3, #2
 80095c0:	d103      	bne.n	80095ca <xQueueGenericSendFromISR+0x6a>
 80095c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095c6:	2b01      	cmp	r3, #1
 80095c8:	d101      	bne.n	80095ce <xQueueGenericSendFromISR+0x6e>
 80095ca:	2301      	movs	r3, #1
 80095cc:	e000      	b.n	80095d0 <xQueueGenericSendFromISR+0x70>
 80095ce:	2300      	movs	r3, #0
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d10a      	bne.n	80095ea <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80095d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095d8:	f383 8811 	msr	BASEPRI, r3
 80095dc:	f3bf 8f6f 	isb	sy
 80095e0:	f3bf 8f4f 	dsb	sy
 80095e4:	623b      	str	r3, [r7, #32]
}
 80095e6:	bf00      	nop
 80095e8:	e7fe      	b.n	80095e8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80095ea:	f002 fb35 	bl	800bc58 <vPortValidateInterruptPriority>
	__asm volatile
 80095ee:	f3ef 8211 	mrs	r2, BASEPRI
 80095f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095f6:	f383 8811 	msr	BASEPRI, r3
 80095fa:	f3bf 8f6f 	isb	sy
 80095fe:	f3bf 8f4f 	dsb	sy
 8009602:	61fa      	str	r2, [r7, #28]
 8009604:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8009606:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009608:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800960a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800960c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800960e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009610:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009612:	429a      	cmp	r2, r3
 8009614:	d302      	bcc.n	800961c <xQueueGenericSendFromISR+0xbc>
 8009616:	683b      	ldr	r3, [r7, #0]
 8009618:	2b02      	cmp	r3, #2
 800961a:	d12f      	bne.n	800967c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800961c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800961e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009622:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800962a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800962c:	683a      	ldr	r2, [r7, #0]
 800962e:	68b9      	ldr	r1, [r7, #8]
 8009630:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009632:	f000 fb64 	bl	8009cfe <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009636:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800963a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800963e:	d112      	bne.n	8009666 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009644:	2b00      	cmp	r3, #0
 8009646:	d016      	beq.n	8009676 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800964a:	3324      	adds	r3, #36	; 0x24
 800964c:	4618      	mov	r0, r3
 800964e:	f001 f94f 	bl	800a8f0 <xTaskRemoveFromEventList>
 8009652:	4603      	mov	r3, r0
 8009654:	2b00      	cmp	r3, #0
 8009656:	d00e      	beq.n	8009676 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d00b      	beq.n	8009676 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	2201      	movs	r2, #1
 8009662:	601a      	str	r2, [r3, #0]
 8009664:	e007      	b.n	8009676 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009666:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800966a:	3301      	adds	r3, #1
 800966c:	b2db      	uxtb	r3, r3
 800966e:	b25a      	sxtb	r2, r3
 8009670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009672:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009676:	2301      	movs	r3, #1
 8009678:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800967a:	e001      	b.n	8009680 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800967c:	2300      	movs	r3, #0
 800967e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009680:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009682:	617b      	str	r3, [r7, #20]
	__asm volatile
 8009684:	697b      	ldr	r3, [r7, #20]
 8009686:	f383 8811 	msr	BASEPRI, r3
}
 800968a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800968c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800968e:	4618      	mov	r0, r3
 8009690:	3740      	adds	r7, #64	; 0x40
 8009692:	46bd      	mov	sp, r7
 8009694:	bd80      	pop	{r7, pc}

08009696 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009696:	b580      	push	{r7, lr}
 8009698:	b08e      	sub	sp, #56	; 0x38
 800969a:	af00      	add	r7, sp, #0
 800969c:	6078      	str	r0, [r7, #4]
 800969e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80096a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d10a      	bne.n	80096c0 <xQueueGiveFromISR+0x2a>
	__asm volatile
 80096aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096ae:	f383 8811 	msr	BASEPRI, r3
 80096b2:	f3bf 8f6f 	isb	sy
 80096b6:	f3bf 8f4f 	dsb	sy
 80096ba:	623b      	str	r3, [r7, #32]
}
 80096bc:	bf00      	nop
 80096be:	e7fe      	b.n	80096be <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80096c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d00a      	beq.n	80096de <xQueueGiveFromISR+0x48>
	__asm volatile
 80096c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096cc:	f383 8811 	msr	BASEPRI, r3
 80096d0:	f3bf 8f6f 	isb	sy
 80096d4:	f3bf 8f4f 	dsb	sy
 80096d8:	61fb      	str	r3, [r7, #28]
}
 80096da:	bf00      	nop
 80096dc:	e7fe      	b.n	80096dc <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80096de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d103      	bne.n	80096ee <xQueueGiveFromISR+0x58>
 80096e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096e8:	689b      	ldr	r3, [r3, #8]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d101      	bne.n	80096f2 <xQueueGiveFromISR+0x5c>
 80096ee:	2301      	movs	r3, #1
 80096f0:	e000      	b.n	80096f4 <xQueueGiveFromISR+0x5e>
 80096f2:	2300      	movs	r3, #0
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d10a      	bne.n	800970e <xQueueGiveFromISR+0x78>
	__asm volatile
 80096f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096fc:	f383 8811 	msr	BASEPRI, r3
 8009700:	f3bf 8f6f 	isb	sy
 8009704:	f3bf 8f4f 	dsb	sy
 8009708:	61bb      	str	r3, [r7, #24]
}
 800970a:	bf00      	nop
 800970c:	e7fe      	b.n	800970c <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800970e:	f002 faa3 	bl	800bc58 <vPortValidateInterruptPriority>
	__asm volatile
 8009712:	f3ef 8211 	mrs	r2, BASEPRI
 8009716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800971a:	f383 8811 	msr	BASEPRI, r3
 800971e:	f3bf 8f6f 	isb	sy
 8009722:	f3bf 8f4f 	dsb	sy
 8009726:	617a      	str	r2, [r7, #20]
 8009728:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800972a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800972c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800972e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009732:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8009734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009736:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009738:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800973a:	429a      	cmp	r2, r3
 800973c:	d22b      	bcs.n	8009796 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800973e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009740:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009744:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800974a:	1c5a      	adds	r2, r3, #1
 800974c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800974e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009750:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009754:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009758:	d112      	bne.n	8009780 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800975a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800975c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800975e:	2b00      	cmp	r3, #0
 8009760:	d016      	beq.n	8009790 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009764:	3324      	adds	r3, #36	; 0x24
 8009766:	4618      	mov	r0, r3
 8009768:	f001 f8c2 	bl	800a8f0 <xTaskRemoveFromEventList>
 800976c:	4603      	mov	r3, r0
 800976e:	2b00      	cmp	r3, #0
 8009770:	d00e      	beq.n	8009790 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009772:	683b      	ldr	r3, [r7, #0]
 8009774:	2b00      	cmp	r3, #0
 8009776:	d00b      	beq.n	8009790 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009778:	683b      	ldr	r3, [r7, #0]
 800977a:	2201      	movs	r2, #1
 800977c:	601a      	str	r2, [r3, #0]
 800977e:	e007      	b.n	8009790 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009780:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009784:	3301      	adds	r3, #1
 8009786:	b2db      	uxtb	r3, r3
 8009788:	b25a      	sxtb	r2, r3
 800978a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800978c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009790:	2301      	movs	r3, #1
 8009792:	637b      	str	r3, [r7, #52]	; 0x34
 8009794:	e001      	b.n	800979a <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009796:	2300      	movs	r3, #0
 8009798:	637b      	str	r3, [r7, #52]	; 0x34
 800979a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800979c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	f383 8811 	msr	BASEPRI, r3
}
 80097a4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80097a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80097a8:	4618      	mov	r0, r3
 80097aa:	3738      	adds	r7, #56	; 0x38
 80097ac:	46bd      	mov	sp, r7
 80097ae:	bd80      	pop	{r7, pc}

080097b0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b08c      	sub	sp, #48	; 0x30
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	60f8      	str	r0, [r7, #12]
 80097b8:	60b9      	str	r1, [r7, #8]
 80097ba:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80097bc:	2300      	movs	r3, #0
 80097be:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80097c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d10a      	bne.n	80097e0 <xQueueReceive+0x30>
	__asm volatile
 80097ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097ce:	f383 8811 	msr	BASEPRI, r3
 80097d2:	f3bf 8f6f 	isb	sy
 80097d6:	f3bf 8f4f 	dsb	sy
 80097da:	623b      	str	r3, [r7, #32]
}
 80097dc:	bf00      	nop
 80097de:	e7fe      	b.n	80097de <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80097e0:	68bb      	ldr	r3, [r7, #8]
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d103      	bne.n	80097ee <xQueueReceive+0x3e>
 80097e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d101      	bne.n	80097f2 <xQueueReceive+0x42>
 80097ee:	2301      	movs	r3, #1
 80097f0:	e000      	b.n	80097f4 <xQueueReceive+0x44>
 80097f2:	2300      	movs	r3, #0
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d10a      	bne.n	800980e <xQueueReceive+0x5e>
	__asm volatile
 80097f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097fc:	f383 8811 	msr	BASEPRI, r3
 8009800:	f3bf 8f6f 	isb	sy
 8009804:	f3bf 8f4f 	dsb	sy
 8009808:	61fb      	str	r3, [r7, #28]
}
 800980a:	bf00      	nop
 800980c:	e7fe      	b.n	800980c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800980e:	f001 fa2d 	bl	800ac6c <xTaskGetSchedulerState>
 8009812:	4603      	mov	r3, r0
 8009814:	2b00      	cmp	r3, #0
 8009816:	d102      	bne.n	800981e <xQueueReceive+0x6e>
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	2b00      	cmp	r3, #0
 800981c:	d101      	bne.n	8009822 <xQueueReceive+0x72>
 800981e:	2301      	movs	r3, #1
 8009820:	e000      	b.n	8009824 <xQueueReceive+0x74>
 8009822:	2300      	movs	r3, #0
 8009824:	2b00      	cmp	r3, #0
 8009826:	d10a      	bne.n	800983e <xQueueReceive+0x8e>
	__asm volatile
 8009828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800982c:	f383 8811 	msr	BASEPRI, r3
 8009830:	f3bf 8f6f 	isb	sy
 8009834:	f3bf 8f4f 	dsb	sy
 8009838:	61bb      	str	r3, [r7, #24]
}
 800983a:	bf00      	nop
 800983c:	e7fe      	b.n	800983c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800983e:	f002 f929 	bl	800ba94 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009846:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800984a:	2b00      	cmp	r3, #0
 800984c:	d01f      	beq.n	800988e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800984e:	68b9      	ldr	r1, [r7, #8]
 8009850:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009852:	f000 fabe 	bl	8009dd2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009858:	1e5a      	subs	r2, r3, #1
 800985a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800985c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800985e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009860:	691b      	ldr	r3, [r3, #16]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d00f      	beq.n	8009886 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009868:	3310      	adds	r3, #16
 800986a:	4618      	mov	r0, r3
 800986c:	f001 f840 	bl	800a8f0 <xTaskRemoveFromEventList>
 8009870:	4603      	mov	r3, r0
 8009872:	2b00      	cmp	r3, #0
 8009874:	d007      	beq.n	8009886 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009876:	4b3d      	ldr	r3, [pc, #244]	; (800996c <xQueueReceive+0x1bc>)
 8009878:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800987c:	601a      	str	r2, [r3, #0]
 800987e:	f3bf 8f4f 	dsb	sy
 8009882:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009886:	f002 f935 	bl	800baf4 <vPortExitCritical>
				return pdPASS;
 800988a:	2301      	movs	r3, #1
 800988c:	e069      	b.n	8009962 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	2b00      	cmp	r3, #0
 8009892:	d103      	bne.n	800989c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009894:	f002 f92e 	bl	800baf4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009898:	2300      	movs	r3, #0
 800989a:	e062      	b.n	8009962 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800989c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d106      	bne.n	80098b0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80098a2:	f107 0310 	add.w	r3, r7, #16
 80098a6:	4618      	mov	r0, r3
 80098a8:	f001 f886 	bl	800a9b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80098ac:	2301      	movs	r3, #1
 80098ae:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80098b0:	f002 f920 	bl	800baf4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80098b4:	f000 fdf8 	bl	800a4a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80098b8:	f002 f8ec 	bl	800ba94 <vPortEnterCritical>
 80098bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80098c2:	b25b      	sxtb	r3, r3
 80098c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098c8:	d103      	bne.n	80098d2 <xQueueReceive+0x122>
 80098ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098cc:	2200      	movs	r2, #0
 80098ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80098d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80098d8:	b25b      	sxtb	r3, r3
 80098da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098de:	d103      	bne.n	80098e8 <xQueueReceive+0x138>
 80098e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098e2:	2200      	movs	r2, #0
 80098e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80098e8:	f002 f904 	bl	800baf4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80098ec:	1d3a      	adds	r2, r7, #4
 80098ee:	f107 0310 	add.w	r3, r7, #16
 80098f2:	4611      	mov	r1, r2
 80098f4:	4618      	mov	r0, r3
 80098f6:	f001 f875 	bl	800a9e4 <xTaskCheckForTimeOut>
 80098fa:	4603      	mov	r3, r0
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d123      	bne.n	8009948 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009900:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009902:	f000 fade 	bl	8009ec2 <prvIsQueueEmpty>
 8009906:	4603      	mov	r3, r0
 8009908:	2b00      	cmp	r3, #0
 800990a:	d017      	beq.n	800993c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800990c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800990e:	3324      	adds	r3, #36	; 0x24
 8009910:	687a      	ldr	r2, [r7, #4]
 8009912:	4611      	mov	r1, r2
 8009914:	4618      	mov	r0, r3
 8009916:	f000 ff9b 	bl	800a850 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800991a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800991c:	f000 fa7f 	bl	8009e1e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009920:	f000 fdd0 	bl	800a4c4 <xTaskResumeAll>
 8009924:	4603      	mov	r3, r0
 8009926:	2b00      	cmp	r3, #0
 8009928:	d189      	bne.n	800983e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800992a:	4b10      	ldr	r3, [pc, #64]	; (800996c <xQueueReceive+0x1bc>)
 800992c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009930:	601a      	str	r2, [r3, #0]
 8009932:	f3bf 8f4f 	dsb	sy
 8009936:	f3bf 8f6f 	isb	sy
 800993a:	e780      	b.n	800983e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800993c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800993e:	f000 fa6e 	bl	8009e1e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009942:	f000 fdbf 	bl	800a4c4 <xTaskResumeAll>
 8009946:	e77a      	b.n	800983e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009948:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800994a:	f000 fa68 	bl	8009e1e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800994e:	f000 fdb9 	bl	800a4c4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009952:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009954:	f000 fab5 	bl	8009ec2 <prvIsQueueEmpty>
 8009958:	4603      	mov	r3, r0
 800995a:	2b00      	cmp	r3, #0
 800995c:	f43f af6f 	beq.w	800983e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009960:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009962:	4618      	mov	r0, r3
 8009964:	3730      	adds	r7, #48	; 0x30
 8009966:	46bd      	mov	sp, r7
 8009968:	bd80      	pop	{r7, pc}
 800996a:	bf00      	nop
 800996c:	e000ed04 	.word	0xe000ed04

08009970 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8009970:	b580      	push	{r7, lr}
 8009972:	b08e      	sub	sp, #56	; 0x38
 8009974:	af00      	add	r7, sp, #0
 8009976:	6078      	str	r0, [r7, #4]
 8009978:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800997a:	2300      	movs	r3, #0
 800997c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8009982:	2300      	movs	r3, #0
 8009984:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009988:	2b00      	cmp	r3, #0
 800998a:	d10a      	bne.n	80099a2 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800998c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009990:	f383 8811 	msr	BASEPRI, r3
 8009994:	f3bf 8f6f 	isb	sy
 8009998:	f3bf 8f4f 	dsb	sy
 800999c:	623b      	str	r3, [r7, #32]
}
 800999e:	bf00      	nop
 80099a0:	e7fe      	b.n	80099a0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80099a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d00a      	beq.n	80099c0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80099aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099ae:	f383 8811 	msr	BASEPRI, r3
 80099b2:	f3bf 8f6f 	isb	sy
 80099b6:	f3bf 8f4f 	dsb	sy
 80099ba:	61fb      	str	r3, [r7, #28]
}
 80099bc:	bf00      	nop
 80099be:	e7fe      	b.n	80099be <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80099c0:	f001 f954 	bl	800ac6c <xTaskGetSchedulerState>
 80099c4:	4603      	mov	r3, r0
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d102      	bne.n	80099d0 <xQueueSemaphoreTake+0x60>
 80099ca:	683b      	ldr	r3, [r7, #0]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d101      	bne.n	80099d4 <xQueueSemaphoreTake+0x64>
 80099d0:	2301      	movs	r3, #1
 80099d2:	e000      	b.n	80099d6 <xQueueSemaphoreTake+0x66>
 80099d4:	2300      	movs	r3, #0
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d10a      	bne.n	80099f0 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80099da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099de:	f383 8811 	msr	BASEPRI, r3
 80099e2:	f3bf 8f6f 	isb	sy
 80099e6:	f3bf 8f4f 	dsb	sy
 80099ea:	61bb      	str	r3, [r7, #24]
}
 80099ec:	bf00      	nop
 80099ee:	e7fe      	b.n	80099ee <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80099f0:	f002 f850 	bl	800ba94 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80099f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099f8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80099fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d024      	beq.n	8009a4a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8009a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a02:	1e5a      	subs	r2, r3, #1
 8009a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a06:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d104      	bne.n	8009a1a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8009a10:	f001 faa2 	bl	800af58 <pvTaskIncrementMutexHeldCount>
 8009a14:	4602      	mov	r2, r0
 8009a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a18:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a1c:	691b      	ldr	r3, [r3, #16]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d00f      	beq.n	8009a42 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a24:	3310      	adds	r3, #16
 8009a26:	4618      	mov	r0, r3
 8009a28:	f000 ff62 	bl	800a8f0 <xTaskRemoveFromEventList>
 8009a2c:	4603      	mov	r3, r0
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d007      	beq.n	8009a42 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009a32:	4b54      	ldr	r3, [pc, #336]	; (8009b84 <xQueueSemaphoreTake+0x214>)
 8009a34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a38:	601a      	str	r2, [r3, #0]
 8009a3a:	f3bf 8f4f 	dsb	sy
 8009a3e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009a42:	f002 f857 	bl	800baf4 <vPortExitCritical>
				return pdPASS;
 8009a46:	2301      	movs	r3, #1
 8009a48:	e097      	b.n	8009b7a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009a4a:	683b      	ldr	r3, [r7, #0]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d111      	bne.n	8009a74 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8009a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d00a      	beq.n	8009a6c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8009a56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a5a:	f383 8811 	msr	BASEPRI, r3
 8009a5e:	f3bf 8f6f 	isb	sy
 8009a62:	f3bf 8f4f 	dsb	sy
 8009a66:	617b      	str	r3, [r7, #20]
}
 8009a68:	bf00      	nop
 8009a6a:	e7fe      	b.n	8009a6a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8009a6c:	f002 f842 	bl	800baf4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009a70:	2300      	movs	r3, #0
 8009a72:	e082      	b.n	8009b7a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009a74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d106      	bne.n	8009a88 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009a7a:	f107 030c 	add.w	r3, r7, #12
 8009a7e:	4618      	mov	r0, r3
 8009a80:	f000 ff9a 	bl	800a9b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009a84:	2301      	movs	r3, #1
 8009a86:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009a88:	f002 f834 	bl	800baf4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009a8c:	f000 fd0c 	bl	800a4a8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009a90:	f002 f800 	bl	800ba94 <vPortEnterCritical>
 8009a94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a96:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009a9a:	b25b      	sxtb	r3, r3
 8009a9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009aa0:	d103      	bne.n	8009aaa <xQueueSemaphoreTake+0x13a>
 8009aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009aa4:	2200      	movs	r2, #0
 8009aa6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009aac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009ab0:	b25b      	sxtb	r3, r3
 8009ab2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ab6:	d103      	bne.n	8009ac0 <xQueueSemaphoreTake+0x150>
 8009ab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009aba:	2200      	movs	r2, #0
 8009abc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009ac0:	f002 f818 	bl	800baf4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009ac4:	463a      	mov	r2, r7
 8009ac6:	f107 030c 	add.w	r3, r7, #12
 8009aca:	4611      	mov	r1, r2
 8009acc:	4618      	mov	r0, r3
 8009ace:	f000 ff89 	bl	800a9e4 <xTaskCheckForTimeOut>
 8009ad2:	4603      	mov	r3, r0
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d132      	bne.n	8009b3e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009ad8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009ada:	f000 f9f2 	bl	8009ec2 <prvIsQueueEmpty>
 8009ade:	4603      	mov	r3, r0
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d026      	beq.n	8009b32 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d109      	bne.n	8009b00 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8009aec:	f001 ffd2 	bl	800ba94 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009af2:	689b      	ldr	r3, [r3, #8]
 8009af4:	4618      	mov	r0, r3
 8009af6:	f001 f8d7 	bl	800aca8 <xTaskPriorityInherit>
 8009afa:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8009afc:	f001 fffa 	bl	800baf4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009b00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b02:	3324      	adds	r3, #36	; 0x24
 8009b04:	683a      	ldr	r2, [r7, #0]
 8009b06:	4611      	mov	r1, r2
 8009b08:	4618      	mov	r0, r3
 8009b0a:	f000 fea1 	bl	800a850 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009b0e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009b10:	f000 f985 	bl	8009e1e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009b14:	f000 fcd6 	bl	800a4c4 <xTaskResumeAll>
 8009b18:	4603      	mov	r3, r0
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	f47f af68 	bne.w	80099f0 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8009b20:	4b18      	ldr	r3, [pc, #96]	; (8009b84 <xQueueSemaphoreTake+0x214>)
 8009b22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b26:	601a      	str	r2, [r3, #0]
 8009b28:	f3bf 8f4f 	dsb	sy
 8009b2c:	f3bf 8f6f 	isb	sy
 8009b30:	e75e      	b.n	80099f0 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8009b32:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009b34:	f000 f973 	bl	8009e1e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009b38:	f000 fcc4 	bl	800a4c4 <xTaskResumeAll>
 8009b3c:	e758      	b.n	80099f0 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8009b3e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009b40:	f000 f96d 	bl	8009e1e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009b44:	f000 fcbe 	bl	800a4c4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009b48:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009b4a:	f000 f9ba 	bl	8009ec2 <prvIsQueueEmpty>
 8009b4e:	4603      	mov	r3, r0
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	f43f af4d 	beq.w	80099f0 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8009b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	d00d      	beq.n	8009b78 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8009b5c:	f001 ff9a 	bl	800ba94 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009b60:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009b62:	f000 f8b4 	bl	8009cce <prvGetDisinheritPriorityAfterTimeout>
 8009b66:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8009b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b6a:	689b      	ldr	r3, [r3, #8]
 8009b6c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009b6e:	4618      	mov	r0, r3
 8009b70:	f001 f970 	bl	800ae54 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8009b74:	f001 ffbe 	bl	800baf4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009b78:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	3738      	adds	r7, #56	; 0x38
 8009b7e:	46bd      	mov	sp, r7
 8009b80:	bd80      	pop	{r7, pc}
 8009b82:	bf00      	nop
 8009b84:	e000ed04 	.word	0xe000ed04

08009b88 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009b88:	b580      	push	{r7, lr}
 8009b8a:	b08e      	sub	sp, #56	; 0x38
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	60f8      	str	r0, [r7, #12]
 8009b90:	60b9      	str	r1, [r7, #8]
 8009b92:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d10a      	bne.n	8009bb4 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8009b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ba2:	f383 8811 	msr	BASEPRI, r3
 8009ba6:	f3bf 8f6f 	isb	sy
 8009baa:	f3bf 8f4f 	dsb	sy
 8009bae:	623b      	str	r3, [r7, #32]
}
 8009bb0:	bf00      	nop
 8009bb2:	e7fe      	b.n	8009bb2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009bb4:	68bb      	ldr	r3, [r7, #8]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d103      	bne.n	8009bc2 <xQueueReceiveFromISR+0x3a>
 8009bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d101      	bne.n	8009bc6 <xQueueReceiveFromISR+0x3e>
 8009bc2:	2301      	movs	r3, #1
 8009bc4:	e000      	b.n	8009bc8 <xQueueReceiveFromISR+0x40>
 8009bc6:	2300      	movs	r3, #0
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d10a      	bne.n	8009be2 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8009bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bd0:	f383 8811 	msr	BASEPRI, r3
 8009bd4:	f3bf 8f6f 	isb	sy
 8009bd8:	f3bf 8f4f 	dsb	sy
 8009bdc:	61fb      	str	r3, [r7, #28]
}
 8009bde:	bf00      	nop
 8009be0:	e7fe      	b.n	8009be0 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009be2:	f002 f839 	bl	800bc58 <vPortValidateInterruptPriority>
	__asm volatile
 8009be6:	f3ef 8211 	mrs	r2, BASEPRI
 8009bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bee:	f383 8811 	msr	BASEPRI, r3
 8009bf2:	f3bf 8f6f 	isb	sy
 8009bf6:	f3bf 8f4f 	dsb	sy
 8009bfa:	61ba      	str	r2, [r7, #24]
 8009bfc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8009bfe:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009c00:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c06:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d02f      	beq.n	8009c6e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8009c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c10:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009c14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009c18:	68b9      	ldr	r1, [r7, #8]
 8009c1a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009c1c:	f000 f8d9 	bl	8009dd2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c22:	1e5a      	subs	r2, r3, #1
 8009c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c26:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8009c28:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c30:	d112      	bne.n	8009c58 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c34:	691b      	ldr	r3, [r3, #16]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d016      	beq.n	8009c68 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c3c:	3310      	adds	r3, #16
 8009c3e:	4618      	mov	r0, r3
 8009c40:	f000 fe56 	bl	800a8f0 <xTaskRemoveFromEventList>
 8009c44:	4603      	mov	r3, r0
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d00e      	beq.n	8009c68 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d00b      	beq.n	8009c68 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	2201      	movs	r2, #1
 8009c54:	601a      	str	r2, [r3, #0]
 8009c56:	e007      	b.n	8009c68 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8009c58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009c5c:	3301      	adds	r3, #1
 8009c5e:	b2db      	uxtb	r3, r3
 8009c60:	b25a      	sxtb	r2, r3
 8009c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8009c68:	2301      	movs	r3, #1
 8009c6a:	637b      	str	r3, [r7, #52]	; 0x34
 8009c6c:	e001      	b.n	8009c72 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8009c6e:	2300      	movs	r3, #0
 8009c70:	637b      	str	r3, [r7, #52]	; 0x34
 8009c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c74:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009c76:	693b      	ldr	r3, [r7, #16]
 8009c78:	f383 8811 	msr	BASEPRI, r3
}
 8009c7c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009c7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009c80:	4618      	mov	r0, r3
 8009c82:	3738      	adds	r7, #56	; 0x38
 8009c84:	46bd      	mov	sp, r7
 8009c86:	bd80      	pop	{r7, pc}

08009c88 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8009c88:	b580      	push	{r7, lr}
 8009c8a:	b084      	sub	sp, #16
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d10a      	bne.n	8009cb0 <vQueueDelete+0x28>
	__asm volatile
 8009c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c9e:	f383 8811 	msr	BASEPRI, r3
 8009ca2:	f3bf 8f6f 	isb	sy
 8009ca6:	f3bf 8f4f 	dsb	sy
 8009caa:	60bb      	str	r3, [r7, #8]
}
 8009cac:	bf00      	nop
 8009cae:	e7fe      	b.n	8009cae <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8009cb0:	68f8      	ldr	r0, [r7, #12]
 8009cb2:	f000 f95f 	bl	8009f74 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d102      	bne.n	8009cc6 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8009cc0:	68f8      	ldr	r0, [r7, #12]
 8009cc2:	f002 f8d5 	bl	800be70 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8009cc6:	bf00      	nop
 8009cc8:	3710      	adds	r7, #16
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	bd80      	pop	{r7, pc}

08009cce <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8009cce:	b480      	push	{r7}
 8009cd0:	b085      	sub	sp, #20
 8009cd2:	af00      	add	r7, sp, #0
 8009cd4:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d006      	beq.n	8009cec <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8009ce8:	60fb      	str	r3, [r7, #12]
 8009cea:	e001      	b.n	8009cf0 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8009cec:	2300      	movs	r3, #0
 8009cee:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8009cf0:	68fb      	ldr	r3, [r7, #12]
	}
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	3714      	adds	r7, #20
 8009cf6:	46bd      	mov	sp, r7
 8009cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cfc:	4770      	bx	lr

08009cfe <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009cfe:	b580      	push	{r7, lr}
 8009d00:	b086      	sub	sp, #24
 8009d02:	af00      	add	r7, sp, #0
 8009d04:	60f8      	str	r0, [r7, #12]
 8009d06:	60b9      	str	r1, [r7, #8]
 8009d08:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d12:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d10d      	bne.n	8009d38 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d14d      	bne.n	8009dc0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	689b      	ldr	r3, [r3, #8]
 8009d28:	4618      	mov	r0, r3
 8009d2a:	f001 f825 	bl	800ad78 <xTaskPriorityDisinherit>
 8009d2e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	2200      	movs	r2, #0
 8009d34:	609a      	str	r2, [r3, #8]
 8009d36:	e043      	b.n	8009dc0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d119      	bne.n	8009d72 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	6858      	ldr	r0, [r3, #4]
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d46:	461a      	mov	r2, r3
 8009d48:	68b9      	ldr	r1, [r7, #8]
 8009d4a:	f003 f929 	bl	800cfa0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	685a      	ldr	r2, [r3, #4]
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d56:	441a      	add	r2, r3
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	685a      	ldr	r2, [r3, #4]
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	689b      	ldr	r3, [r3, #8]
 8009d64:	429a      	cmp	r2, r3
 8009d66:	d32b      	bcc.n	8009dc0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	681a      	ldr	r2, [r3, #0]
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	605a      	str	r2, [r3, #4]
 8009d70:	e026      	b.n	8009dc0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	68d8      	ldr	r0, [r3, #12]
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d7a:	461a      	mov	r2, r3
 8009d7c:	68b9      	ldr	r1, [r7, #8]
 8009d7e:	f003 f90f 	bl	800cfa0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	68da      	ldr	r2, [r3, #12]
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d8a:	425b      	negs	r3, r3
 8009d8c:	441a      	add	r2, r3
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	68da      	ldr	r2, [r3, #12]
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	429a      	cmp	r2, r3
 8009d9c:	d207      	bcs.n	8009dae <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	689a      	ldr	r2, [r3, #8]
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009da6:	425b      	negs	r3, r3
 8009da8:	441a      	add	r2, r3
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	2b02      	cmp	r3, #2
 8009db2:	d105      	bne.n	8009dc0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009db4:	693b      	ldr	r3, [r7, #16]
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d002      	beq.n	8009dc0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009dba:	693b      	ldr	r3, [r7, #16]
 8009dbc:	3b01      	subs	r3, #1
 8009dbe:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009dc0:	693b      	ldr	r3, [r7, #16]
 8009dc2:	1c5a      	adds	r2, r3, #1
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009dc8:	697b      	ldr	r3, [r7, #20]
}
 8009dca:	4618      	mov	r0, r3
 8009dcc:	3718      	adds	r7, #24
 8009dce:	46bd      	mov	sp, r7
 8009dd0:	bd80      	pop	{r7, pc}

08009dd2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009dd2:	b580      	push	{r7, lr}
 8009dd4:	b082      	sub	sp, #8
 8009dd6:	af00      	add	r7, sp, #0
 8009dd8:	6078      	str	r0, [r7, #4]
 8009dda:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d018      	beq.n	8009e16 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	68da      	ldr	r2, [r3, #12]
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dec:	441a      	add	r2, r3
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	68da      	ldr	r2, [r3, #12]
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	689b      	ldr	r3, [r3, #8]
 8009dfa:	429a      	cmp	r2, r3
 8009dfc:	d303      	bcc.n	8009e06 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681a      	ldr	r2, [r3, #0]
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	68d9      	ldr	r1, [r3, #12]
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e0e:	461a      	mov	r2, r3
 8009e10:	6838      	ldr	r0, [r7, #0]
 8009e12:	f003 f8c5 	bl	800cfa0 <memcpy>
	}
}
 8009e16:	bf00      	nop
 8009e18:	3708      	adds	r7, #8
 8009e1a:	46bd      	mov	sp, r7
 8009e1c:	bd80      	pop	{r7, pc}

08009e1e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009e1e:	b580      	push	{r7, lr}
 8009e20:	b084      	sub	sp, #16
 8009e22:	af00      	add	r7, sp, #0
 8009e24:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009e26:	f001 fe35 	bl	800ba94 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009e30:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009e32:	e011      	b.n	8009e58 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d012      	beq.n	8009e62 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	3324      	adds	r3, #36	; 0x24
 8009e40:	4618      	mov	r0, r3
 8009e42:	f000 fd55 	bl	800a8f0 <xTaskRemoveFromEventList>
 8009e46:	4603      	mov	r3, r0
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d001      	beq.n	8009e50 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009e4c:	f000 fe2c 	bl	800aaa8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009e50:	7bfb      	ldrb	r3, [r7, #15]
 8009e52:	3b01      	subs	r3, #1
 8009e54:	b2db      	uxtb	r3, r3
 8009e56:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009e58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	dce9      	bgt.n	8009e34 <prvUnlockQueue+0x16>
 8009e60:	e000      	b.n	8009e64 <prvUnlockQueue+0x46>
					break;
 8009e62:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	22ff      	movs	r2, #255	; 0xff
 8009e68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009e6c:	f001 fe42 	bl	800baf4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009e70:	f001 fe10 	bl	800ba94 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009e7a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009e7c:	e011      	b.n	8009ea2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	691b      	ldr	r3, [r3, #16]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d012      	beq.n	8009eac <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	3310      	adds	r3, #16
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	f000 fd30 	bl	800a8f0 <xTaskRemoveFromEventList>
 8009e90:	4603      	mov	r3, r0
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d001      	beq.n	8009e9a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009e96:	f000 fe07 	bl	800aaa8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009e9a:	7bbb      	ldrb	r3, [r7, #14]
 8009e9c:	3b01      	subs	r3, #1
 8009e9e:	b2db      	uxtb	r3, r3
 8009ea0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009ea2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	dce9      	bgt.n	8009e7e <prvUnlockQueue+0x60>
 8009eaa:	e000      	b.n	8009eae <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009eac:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	22ff      	movs	r2, #255	; 0xff
 8009eb2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009eb6:	f001 fe1d 	bl	800baf4 <vPortExitCritical>
}
 8009eba:	bf00      	nop
 8009ebc:	3710      	adds	r7, #16
 8009ebe:	46bd      	mov	sp, r7
 8009ec0:	bd80      	pop	{r7, pc}

08009ec2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009ec2:	b580      	push	{r7, lr}
 8009ec4:	b084      	sub	sp, #16
 8009ec6:	af00      	add	r7, sp, #0
 8009ec8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009eca:	f001 fde3 	bl	800ba94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d102      	bne.n	8009edc <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009ed6:	2301      	movs	r3, #1
 8009ed8:	60fb      	str	r3, [r7, #12]
 8009eda:	e001      	b.n	8009ee0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009edc:	2300      	movs	r3, #0
 8009ede:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009ee0:	f001 fe08 	bl	800baf4 <vPortExitCritical>

	return xReturn;
 8009ee4:	68fb      	ldr	r3, [r7, #12]
}
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	3710      	adds	r7, #16
 8009eea:	46bd      	mov	sp, r7
 8009eec:	bd80      	pop	{r7, pc}

08009eee <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009eee:	b580      	push	{r7, lr}
 8009ef0:	b084      	sub	sp, #16
 8009ef2:	af00      	add	r7, sp, #0
 8009ef4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009ef6:	f001 fdcd 	bl	800ba94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f02:	429a      	cmp	r2, r3
 8009f04:	d102      	bne.n	8009f0c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009f06:	2301      	movs	r3, #1
 8009f08:	60fb      	str	r3, [r7, #12]
 8009f0a:	e001      	b.n	8009f10 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009f10:	f001 fdf0 	bl	800baf4 <vPortExitCritical>

	return xReturn;
 8009f14:	68fb      	ldr	r3, [r7, #12]
}
 8009f16:	4618      	mov	r0, r3
 8009f18:	3710      	adds	r7, #16
 8009f1a:	46bd      	mov	sp, r7
 8009f1c:	bd80      	pop	{r7, pc}
	...

08009f20 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009f20:	b480      	push	{r7}
 8009f22:	b085      	sub	sp, #20
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	6078      	str	r0, [r7, #4]
 8009f28:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009f2a:	2300      	movs	r3, #0
 8009f2c:	60fb      	str	r3, [r7, #12]
 8009f2e:	e014      	b.n	8009f5a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009f30:	4a0f      	ldr	r2, [pc, #60]	; (8009f70 <vQueueAddToRegistry+0x50>)
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d10b      	bne.n	8009f54 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009f3c:	490c      	ldr	r1, [pc, #48]	; (8009f70 <vQueueAddToRegistry+0x50>)
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	683a      	ldr	r2, [r7, #0]
 8009f42:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009f46:	4a0a      	ldr	r2, [pc, #40]	; (8009f70 <vQueueAddToRegistry+0x50>)
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	00db      	lsls	r3, r3, #3
 8009f4c:	4413      	add	r3, r2
 8009f4e:	687a      	ldr	r2, [r7, #4]
 8009f50:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009f52:	e006      	b.n	8009f62 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	3301      	adds	r3, #1
 8009f58:	60fb      	str	r3, [r7, #12]
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	2b07      	cmp	r3, #7
 8009f5e:	d9e7      	bls.n	8009f30 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009f60:	bf00      	nop
 8009f62:	bf00      	nop
 8009f64:	3714      	adds	r7, #20
 8009f66:	46bd      	mov	sp, r7
 8009f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f6c:	4770      	bx	lr
 8009f6e:	bf00      	nop
 8009f70:	20001b6c 	.word	0x20001b6c

08009f74 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8009f74:	b480      	push	{r7}
 8009f76:	b085      	sub	sp, #20
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009f7c:	2300      	movs	r3, #0
 8009f7e:	60fb      	str	r3, [r7, #12]
 8009f80:	e016      	b.n	8009fb0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8009f82:	4a10      	ldr	r2, [pc, #64]	; (8009fc4 <vQueueUnregisterQueue+0x50>)
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	00db      	lsls	r3, r3, #3
 8009f88:	4413      	add	r3, r2
 8009f8a:	685b      	ldr	r3, [r3, #4]
 8009f8c:	687a      	ldr	r2, [r7, #4]
 8009f8e:	429a      	cmp	r2, r3
 8009f90:	d10b      	bne.n	8009faa <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8009f92:	4a0c      	ldr	r2, [pc, #48]	; (8009fc4 <vQueueUnregisterQueue+0x50>)
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	2100      	movs	r1, #0
 8009f98:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8009f9c:	4a09      	ldr	r2, [pc, #36]	; (8009fc4 <vQueueUnregisterQueue+0x50>)
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	00db      	lsls	r3, r3, #3
 8009fa2:	4413      	add	r3, r2
 8009fa4:	2200      	movs	r2, #0
 8009fa6:	605a      	str	r2, [r3, #4]
				break;
 8009fa8:	e006      	b.n	8009fb8 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	3301      	adds	r3, #1
 8009fae:	60fb      	str	r3, [r7, #12]
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	2b07      	cmp	r3, #7
 8009fb4:	d9e5      	bls.n	8009f82 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8009fb6:	bf00      	nop
 8009fb8:	bf00      	nop
 8009fba:	3714      	adds	r7, #20
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc2:	4770      	bx	lr
 8009fc4:	20001b6c 	.word	0x20001b6c

08009fc8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009fc8:	b580      	push	{r7, lr}
 8009fca:	b086      	sub	sp, #24
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	60f8      	str	r0, [r7, #12]
 8009fd0:	60b9      	str	r1, [r7, #8]
 8009fd2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009fd8:	f001 fd5c 	bl	800ba94 <vPortEnterCritical>
 8009fdc:	697b      	ldr	r3, [r7, #20]
 8009fde:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009fe2:	b25b      	sxtb	r3, r3
 8009fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fe8:	d103      	bne.n	8009ff2 <vQueueWaitForMessageRestricted+0x2a>
 8009fea:	697b      	ldr	r3, [r7, #20]
 8009fec:	2200      	movs	r2, #0
 8009fee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009ff2:	697b      	ldr	r3, [r7, #20]
 8009ff4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009ff8:	b25b      	sxtb	r3, r3
 8009ffa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ffe:	d103      	bne.n	800a008 <vQueueWaitForMessageRestricted+0x40>
 800a000:	697b      	ldr	r3, [r7, #20]
 800a002:	2200      	movs	r2, #0
 800a004:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a008:	f001 fd74 	bl	800baf4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a00c:	697b      	ldr	r3, [r7, #20]
 800a00e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a010:	2b00      	cmp	r3, #0
 800a012:	d106      	bne.n	800a022 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a014:	697b      	ldr	r3, [r7, #20]
 800a016:	3324      	adds	r3, #36	; 0x24
 800a018:	687a      	ldr	r2, [r7, #4]
 800a01a:	68b9      	ldr	r1, [r7, #8]
 800a01c:	4618      	mov	r0, r3
 800a01e:	f000 fc3b 	bl	800a898 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a022:	6978      	ldr	r0, [r7, #20]
 800a024:	f7ff fefb 	bl	8009e1e <prvUnlockQueue>
	}
 800a028:	bf00      	nop
 800a02a:	3718      	adds	r7, #24
 800a02c:	46bd      	mov	sp, r7
 800a02e:	bd80      	pop	{r7, pc}

0800a030 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a030:	b580      	push	{r7, lr}
 800a032:	b08e      	sub	sp, #56	; 0x38
 800a034:	af04      	add	r7, sp, #16
 800a036:	60f8      	str	r0, [r7, #12]
 800a038:	60b9      	str	r1, [r7, #8]
 800a03a:	607a      	str	r2, [r7, #4]
 800a03c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a03e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a040:	2b00      	cmp	r3, #0
 800a042:	d10a      	bne.n	800a05a <xTaskCreateStatic+0x2a>
	__asm volatile
 800a044:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a048:	f383 8811 	msr	BASEPRI, r3
 800a04c:	f3bf 8f6f 	isb	sy
 800a050:	f3bf 8f4f 	dsb	sy
 800a054:	623b      	str	r3, [r7, #32]
}
 800a056:	bf00      	nop
 800a058:	e7fe      	b.n	800a058 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a05a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d10a      	bne.n	800a076 <xTaskCreateStatic+0x46>
	__asm volatile
 800a060:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a064:	f383 8811 	msr	BASEPRI, r3
 800a068:	f3bf 8f6f 	isb	sy
 800a06c:	f3bf 8f4f 	dsb	sy
 800a070:	61fb      	str	r3, [r7, #28]
}
 800a072:	bf00      	nop
 800a074:	e7fe      	b.n	800a074 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a076:	235c      	movs	r3, #92	; 0x5c
 800a078:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a07a:	693b      	ldr	r3, [r7, #16]
 800a07c:	2b5c      	cmp	r3, #92	; 0x5c
 800a07e:	d00a      	beq.n	800a096 <xTaskCreateStatic+0x66>
	__asm volatile
 800a080:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a084:	f383 8811 	msr	BASEPRI, r3
 800a088:	f3bf 8f6f 	isb	sy
 800a08c:	f3bf 8f4f 	dsb	sy
 800a090:	61bb      	str	r3, [r7, #24]
}
 800a092:	bf00      	nop
 800a094:	e7fe      	b.n	800a094 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a096:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d01e      	beq.n	800a0dc <xTaskCreateStatic+0xac>
 800a09e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d01b      	beq.n	800a0dc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a0a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0a6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a0a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a0ac:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a0ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0b0:	2202      	movs	r2, #2
 800a0b2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	9303      	str	r3, [sp, #12]
 800a0ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0bc:	9302      	str	r3, [sp, #8]
 800a0be:	f107 0314 	add.w	r3, r7, #20
 800a0c2:	9301      	str	r3, [sp, #4]
 800a0c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0c6:	9300      	str	r3, [sp, #0]
 800a0c8:	683b      	ldr	r3, [r7, #0]
 800a0ca:	687a      	ldr	r2, [r7, #4]
 800a0cc:	68b9      	ldr	r1, [r7, #8]
 800a0ce:	68f8      	ldr	r0, [r7, #12]
 800a0d0:	f000 f850 	bl	800a174 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a0d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a0d6:	f000 f8dd 	bl	800a294 <prvAddNewTaskToReadyList>
 800a0da:	e001      	b.n	800a0e0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800a0dc:	2300      	movs	r3, #0
 800a0de:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a0e0:	697b      	ldr	r3, [r7, #20]
	}
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	3728      	adds	r7, #40	; 0x28
 800a0e6:	46bd      	mov	sp, r7
 800a0e8:	bd80      	pop	{r7, pc}

0800a0ea <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a0ea:	b580      	push	{r7, lr}
 800a0ec:	b08c      	sub	sp, #48	; 0x30
 800a0ee:	af04      	add	r7, sp, #16
 800a0f0:	60f8      	str	r0, [r7, #12]
 800a0f2:	60b9      	str	r1, [r7, #8]
 800a0f4:	603b      	str	r3, [r7, #0]
 800a0f6:	4613      	mov	r3, r2
 800a0f8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a0fa:	88fb      	ldrh	r3, [r7, #6]
 800a0fc:	009b      	lsls	r3, r3, #2
 800a0fe:	4618      	mov	r0, r3
 800a100:	f001 fdea 	bl	800bcd8 <pvPortMalloc>
 800a104:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a106:	697b      	ldr	r3, [r7, #20]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d00e      	beq.n	800a12a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a10c:	205c      	movs	r0, #92	; 0x5c
 800a10e:	f001 fde3 	bl	800bcd8 <pvPortMalloc>
 800a112:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a114:	69fb      	ldr	r3, [r7, #28]
 800a116:	2b00      	cmp	r3, #0
 800a118:	d003      	beq.n	800a122 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a11a:	69fb      	ldr	r3, [r7, #28]
 800a11c:	697a      	ldr	r2, [r7, #20]
 800a11e:	631a      	str	r2, [r3, #48]	; 0x30
 800a120:	e005      	b.n	800a12e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a122:	6978      	ldr	r0, [r7, #20]
 800a124:	f001 fea4 	bl	800be70 <vPortFree>
 800a128:	e001      	b.n	800a12e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a12a:	2300      	movs	r3, #0
 800a12c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a12e:	69fb      	ldr	r3, [r7, #28]
 800a130:	2b00      	cmp	r3, #0
 800a132:	d017      	beq.n	800a164 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a134:	69fb      	ldr	r3, [r7, #28]
 800a136:	2200      	movs	r2, #0
 800a138:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a13c:	88fa      	ldrh	r2, [r7, #6]
 800a13e:	2300      	movs	r3, #0
 800a140:	9303      	str	r3, [sp, #12]
 800a142:	69fb      	ldr	r3, [r7, #28]
 800a144:	9302      	str	r3, [sp, #8]
 800a146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a148:	9301      	str	r3, [sp, #4]
 800a14a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a14c:	9300      	str	r3, [sp, #0]
 800a14e:	683b      	ldr	r3, [r7, #0]
 800a150:	68b9      	ldr	r1, [r7, #8]
 800a152:	68f8      	ldr	r0, [r7, #12]
 800a154:	f000 f80e 	bl	800a174 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a158:	69f8      	ldr	r0, [r7, #28]
 800a15a:	f000 f89b 	bl	800a294 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a15e:	2301      	movs	r3, #1
 800a160:	61bb      	str	r3, [r7, #24]
 800a162:	e002      	b.n	800a16a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a164:	f04f 33ff 	mov.w	r3, #4294967295
 800a168:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a16a:	69bb      	ldr	r3, [r7, #24]
	}
 800a16c:	4618      	mov	r0, r3
 800a16e:	3720      	adds	r7, #32
 800a170:	46bd      	mov	sp, r7
 800a172:	bd80      	pop	{r7, pc}

0800a174 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a174:	b580      	push	{r7, lr}
 800a176:	b088      	sub	sp, #32
 800a178:	af00      	add	r7, sp, #0
 800a17a:	60f8      	str	r0, [r7, #12]
 800a17c:	60b9      	str	r1, [r7, #8]
 800a17e:	607a      	str	r2, [r7, #4]
 800a180:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a184:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	009b      	lsls	r3, r3, #2
 800a18a:	461a      	mov	r2, r3
 800a18c:	21a5      	movs	r1, #165	; 0xa5
 800a18e:	f002 ff15 	bl	800cfbc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a194:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a19c:	3b01      	subs	r3, #1
 800a19e:	009b      	lsls	r3, r3, #2
 800a1a0:	4413      	add	r3, r2
 800a1a2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a1a4:	69bb      	ldr	r3, [r7, #24]
 800a1a6:	f023 0307 	bic.w	r3, r3, #7
 800a1aa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a1ac:	69bb      	ldr	r3, [r7, #24]
 800a1ae:	f003 0307 	and.w	r3, r3, #7
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d00a      	beq.n	800a1cc <prvInitialiseNewTask+0x58>
	__asm volatile
 800a1b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1ba:	f383 8811 	msr	BASEPRI, r3
 800a1be:	f3bf 8f6f 	isb	sy
 800a1c2:	f3bf 8f4f 	dsb	sy
 800a1c6:	617b      	str	r3, [r7, #20]
}
 800a1c8:	bf00      	nop
 800a1ca:	e7fe      	b.n	800a1ca <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a1cc:	68bb      	ldr	r3, [r7, #8]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d01f      	beq.n	800a212 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a1d2:	2300      	movs	r3, #0
 800a1d4:	61fb      	str	r3, [r7, #28]
 800a1d6:	e012      	b.n	800a1fe <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a1d8:	68ba      	ldr	r2, [r7, #8]
 800a1da:	69fb      	ldr	r3, [r7, #28]
 800a1dc:	4413      	add	r3, r2
 800a1de:	7819      	ldrb	r1, [r3, #0]
 800a1e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a1e2:	69fb      	ldr	r3, [r7, #28]
 800a1e4:	4413      	add	r3, r2
 800a1e6:	3334      	adds	r3, #52	; 0x34
 800a1e8:	460a      	mov	r2, r1
 800a1ea:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a1ec:	68ba      	ldr	r2, [r7, #8]
 800a1ee:	69fb      	ldr	r3, [r7, #28]
 800a1f0:	4413      	add	r3, r2
 800a1f2:	781b      	ldrb	r3, [r3, #0]
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d006      	beq.n	800a206 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a1f8:	69fb      	ldr	r3, [r7, #28]
 800a1fa:	3301      	adds	r3, #1
 800a1fc:	61fb      	str	r3, [r7, #28]
 800a1fe:	69fb      	ldr	r3, [r7, #28]
 800a200:	2b0f      	cmp	r3, #15
 800a202:	d9e9      	bls.n	800a1d8 <prvInitialiseNewTask+0x64>
 800a204:	e000      	b.n	800a208 <prvInitialiseNewTask+0x94>
			{
				break;
 800a206:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a20a:	2200      	movs	r2, #0
 800a20c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a210:	e003      	b.n	800a21a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a214:	2200      	movs	r2, #0
 800a216:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a21a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a21c:	2b37      	cmp	r3, #55	; 0x37
 800a21e:	d901      	bls.n	800a224 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a220:	2337      	movs	r3, #55	; 0x37
 800a222:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a226:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a228:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a22a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a22c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a22e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a232:	2200      	movs	r2, #0
 800a234:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a238:	3304      	adds	r3, #4
 800a23a:	4618      	mov	r0, r3
 800a23c:	f7fe fe56 	bl	8008eec <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a242:	3318      	adds	r3, #24
 800a244:	4618      	mov	r0, r3
 800a246:	f7fe fe51 	bl	8008eec <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a24a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a24c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a24e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a252:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a258:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a25a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a25c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a25e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a262:	2200      	movs	r2, #0
 800a264:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a268:	2200      	movs	r2, #0
 800a26a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a26e:	683a      	ldr	r2, [r7, #0]
 800a270:	68f9      	ldr	r1, [r7, #12]
 800a272:	69b8      	ldr	r0, [r7, #24]
 800a274:	f001 fae0 	bl	800b838 <pxPortInitialiseStack>
 800a278:	4602      	mov	r2, r0
 800a27a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a27c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a27e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a280:	2b00      	cmp	r3, #0
 800a282:	d002      	beq.n	800a28a <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a286:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a288:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a28a:	bf00      	nop
 800a28c:	3720      	adds	r7, #32
 800a28e:	46bd      	mov	sp, r7
 800a290:	bd80      	pop	{r7, pc}
	...

0800a294 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a294:	b580      	push	{r7, lr}
 800a296:	b082      	sub	sp, #8
 800a298:	af00      	add	r7, sp, #0
 800a29a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a29c:	f001 fbfa 	bl	800ba94 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a2a0:	4b2d      	ldr	r3, [pc, #180]	; (800a358 <prvAddNewTaskToReadyList+0xc4>)
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	3301      	adds	r3, #1
 800a2a6:	4a2c      	ldr	r2, [pc, #176]	; (800a358 <prvAddNewTaskToReadyList+0xc4>)
 800a2a8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a2aa:	4b2c      	ldr	r3, [pc, #176]	; (800a35c <prvAddNewTaskToReadyList+0xc8>)
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d109      	bne.n	800a2c6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a2b2:	4a2a      	ldr	r2, [pc, #168]	; (800a35c <prvAddNewTaskToReadyList+0xc8>)
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a2b8:	4b27      	ldr	r3, [pc, #156]	; (800a358 <prvAddNewTaskToReadyList+0xc4>)
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	2b01      	cmp	r3, #1
 800a2be:	d110      	bne.n	800a2e2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a2c0:	f000 fc16 	bl	800aaf0 <prvInitialiseTaskLists>
 800a2c4:	e00d      	b.n	800a2e2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a2c6:	4b26      	ldr	r3, [pc, #152]	; (800a360 <prvAddNewTaskToReadyList+0xcc>)
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d109      	bne.n	800a2e2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a2ce:	4b23      	ldr	r3, [pc, #140]	; (800a35c <prvAddNewTaskToReadyList+0xc8>)
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2d8:	429a      	cmp	r2, r3
 800a2da:	d802      	bhi.n	800a2e2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a2dc:	4a1f      	ldr	r2, [pc, #124]	; (800a35c <prvAddNewTaskToReadyList+0xc8>)
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a2e2:	4b20      	ldr	r3, [pc, #128]	; (800a364 <prvAddNewTaskToReadyList+0xd0>)
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	3301      	adds	r3, #1
 800a2e8:	4a1e      	ldr	r2, [pc, #120]	; (800a364 <prvAddNewTaskToReadyList+0xd0>)
 800a2ea:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a2ec:	4b1d      	ldr	r3, [pc, #116]	; (800a364 <prvAddNewTaskToReadyList+0xd0>)
 800a2ee:	681a      	ldr	r2, [r3, #0]
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2f8:	4b1b      	ldr	r3, [pc, #108]	; (800a368 <prvAddNewTaskToReadyList+0xd4>)
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	429a      	cmp	r2, r3
 800a2fe:	d903      	bls.n	800a308 <prvAddNewTaskToReadyList+0x74>
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a304:	4a18      	ldr	r2, [pc, #96]	; (800a368 <prvAddNewTaskToReadyList+0xd4>)
 800a306:	6013      	str	r3, [r2, #0]
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a30c:	4613      	mov	r3, r2
 800a30e:	009b      	lsls	r3, r3, #2
 800a310:	4413      	add	r3, r2
 800a312:	009b      	lsls	r3, r3, #2
 800a314:	4a15      	ldr	r2, [pc, #84]	; (800a36c <prvAddNewTaskToReadyList+0xd8>)
 800a316:	441a      	add	r2, r3
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	3304      	adds	r3, #4
 800a31c:	4619      	mov	r1, r3
 800a31e:	4610      	mov	r0, r2
 800a320:	f7fe fdf1 	bl	8008f06 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a324:	f001 fbe6 	bl	800baf4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a328:	4b0d      	ldr	r3, [pc, #52]	; (800a360 <prvAddNewTaskToReadyList+0xcc>)
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d00e      	beq.n	800a34e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a330:	4b0a      	ldr	r3, [pc, #40]	; (800a35c <prvAddNewTaskToReadyList+0xc8>)
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a33a:	429a      	cmp	r2, r3
 800a33c:	d207      	bcs.n	800a34e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a33e:	4b0c      	ldr	r3, [pc, #48]	; (800a370 <prvAddNewTaskToReadyList+0xdc>)
 800a340:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a344:	601a      	str	r2, [r3, #0]
 800a346:	f3bf 8f4f 	dsb	sy
 800a34a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a34e:	bf00      	nop
 800a350:	3708      	adds	r7, #8
 800a352:	46bd      	mov	sp, r7
 800a354:	bd80      	pop	{r7, pc}
 800a356:	bf00      	nop
 800a358:	20002080 	.word	0x20002080
 800a35c:	20001bac 	.word	0x20001bac
 800a360:	2000208c 	.word	0x2000208c
 800a364:	2000209c 	.word	0x2000209c
 800a368:	20002088 	.word	0x20002088
 800a36c:	20001bb0 	.word	0x20001bb0
 800a370:	e000ed04 	.word	0xe000ed04

0800a374 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a374:	b580      	push	{r7, lr}
 800a376:	b084      	sub	sp, #16
 800a378:	af00      	add	r7, sp, #0
 800a37a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a37c:	2300      	movs	r3, #0
 800a37e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	2b00      	cmp	r3, #0
 800a384:	d017      	beq.n	800a3b6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a386:	4b13      	ldr	r3, [pc, #76]	; (800a3d4 <vTaskDelay+0x60>)
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d00a      	beq.n	800a3a4 <vTaskDelay+0x30>
	__asm volatile
 800a38e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a392:	f383 8811 	msr	BASEPRI, r3
 800a396:	f3bf 8f6f 	isb	sy
 800a39a:	f3bf 8f4f 	dsb	sy
 800a39e:	60bb      	str	r3, [r7, #8]
}
 800a3a0:	bf00      	nop
 800a3a2:	e7fe      	b.n	800a3a2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a3a4:	f000 f880 	bl	800a4a8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a3a8:	2100      	movs	r1, #0
 800a3aa:	6878      	ldr	r0, [r7, #4]
 800a3ac:	f000 fde8 	bl	800af80 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a3b0:	f000 f888 	bl	800a4c4 <xTaskResumeAll>
 800a3b4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d107      	bne.n	800a3cc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800a3bc:	4b06      	ldr	r3, [pc, #24]	; (800a3d8 <vTaskDelay+0x64>)
 800a3be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a3c2:	601a      	str	r2, [r3, #0]
 800a3c4:	f3bf 8f4f 	dsb	sy
 800a3c8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a3cc:	bf00      	nop
 800a3ce:	3710      	adds	r7, #16
 800a3d0:	46bd      	mov	sp, r7
 800a3d2:	bd80      	pop	{r7, pc}
 800a3d4:	200020a8 	.word	0x200020a8
 800a3d8:	e000ed04 	.word	0xe000ed04

0800a3dc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a3dc:	b580      	push	{r7, lr}
 800a3de:	b08a      	sub	sp, #40	; 0x28
 800a3e0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a3e6:	2300      	movs	r3, #0
 800a3e8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a3ea:	463a      	mov	r2, r7
 800a3ec:	1d39      	adds	r1, r7, #4
 800a3ee:	f107 0308 	add.w	r3, r7, #8
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	f7fe fd26 	bl	8008e44 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a3f8:	6839      	ldr	r1, [r7, #0]
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	68ba      	ldr	r2, [r7, #8]
 800a3fe:	9202      	str	r2, [sp, #8]
 800a400:	9301      	str	r3, [sp, #4]
 800a402:	2300      	movs	r3, #0
 800a404:	9300      	str	r3, [sp, #0]
 800a406:	2300      	movs	r3, #0
 800a408:	460a      	mov	r2, r1
 800a40a:	4921      	ldr	r1, [pc, #132]	; (800a490 <vTaskStartScheduler+0xb4>)
 800a40c:	4821      	ldr	r0, [pc, #132]	; (800a494 <vTaskStartScheduler+0xb8>)
 800a40e:	f7ff fe0f 	bl	800a030 <xTaskCreateStatic>
 800a412:	4603      	mov	r3, r0
 800a414:	4a20      	ldr	r2, [pc, #128]	; (800a498 <vTaskStartScheduler+0xbc>)
 800a416:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a418:	4b1f      	ldr	r3, [pc, #124]	; (800a498 <vTaskStartScheduler+0xbc>)
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d002      	beq.n	800a426 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a420:	2301      	movs	r3, #1
 800a422:	617b      	str	r3, [r7, #20]
 800a424:	e001      	b.n	800a42a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a426:	2300      	movs	r3, #0
 800a428:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a42a:	697b      	ldr	r3, [r7, #20]
 800a42c:	2b01      	cmp	r3, #1
 800a42e:	d102      	bne.n	800a436 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a430:	f000 fdfa 	bl	800b028 <xTimerCreateTimerTask>
 800a434:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a436:	697b      	ldr	r3, [r7, #20]
 800a438:	2b01      	cmp	r3, #1
 800a43a:	d116      	bne.n	800a46a <vTaskStartScheduler+0x8e>
	__asm volatile
 800a43c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a440:	f383 8811 	msr	BASEPRI, r3
 800a444:	f3bf 8f6f 	isb	sy
 800a448:	f3bf 8f4f 	dsb	sy
 800a44c:	613b      	str	r3, [r7, #16]
}
 800a44e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a450:	4b12      	ldr	r3, [pc, #72]	; (800a49c <vTaskStartScheduler+0xc0>)
 800a452:	f04f 32ff 	mov.w	r2, #4294967295
 800a456:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a458:	4b11      	ldr	r3, [pc, #68]	; (800a4a0 <vTaskStartScheduler+0xc4>)
 800a45a:	2201      	movs	r2, #1
 800a45c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a45e:	4b11      	ldr	r3, [pc, #68]	; (800a4a4 <vTaskStartScheduler+0xc8>)
 800a460:	2200      	movs	r2, #0
 800a462:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a464:	f001 fa74 	bl	800b950 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a468:	e00e      	b.n	800a488 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a46a:	697b      	ldr	r3, [r7, #20]
 800a46c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a470:	d10a      	bne.n	800a488 <vTaskStartScheduler+0xac>
	__asm volatile
 800a472:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a476:	f383 8811 	msr	BASEPRI, r3
 800a47a:	f3bf 8f6f 	isb	sy
 800a47e:	f3bf 8f4f 	dsb	sy
 800a482:	60fb      	str	r3, [r7, #12]
}
 800a484:	bf00      	nop
 800a486:	e7fe      	b.n	800a486 <vTaskStartScheduler+0xaa>
}
 800a488:	bf00      	nop
 800a48a:	3718      	adds	r7, #24
 800a48c:	46bd      	mov	sp, r7
 800a48e:	bd80      	pop	{r7, pc}
 800a490:	0800d920 	.word	0x0800d920
 800a494:	0800aac1 	.word	0x0800aac1
 800a498:	200020a4 	.word	0x200020a4
 800a49c:	200020a0 	.word	0x200020a0
 800a4a0:	2000208c 	.word	0x2000208c
 800a4a4:	20002084 	.word	0x20002084

0800a4a8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a4a8:	b480      	push	{r7}
 800a4aa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a4ac:	4b04      	ldr	r3, [pc, #16]	; (800a4c0 <vTaskSuspendAll+0x18>)
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	3301      	adds	r3, #1
 800a4b2:	4a03      	ldr	r2, [pc, #12]	; (800a4c0 <vTaskSuspendAll+0x18>)
 800a4b4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a4b6:	bf00      	nop
 800a4b8:	46bd      	mov	sp, r7
 800a4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4be:	4770      	bx	lr
 800a4c0:	200020a8 	.word	0x200020a8

0800a4c4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a4c4:	b580      	push	{r7, lr}
 800a4c6:	b084      	sub	sp, #16
 800a4c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a4ca:	2300      	movs	r3, #0
 800a4cc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a4ce:	2300      	movs	r3, #0
 800a4d0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a4d2:	4b42      	ldr	r3, [pc, #264]	; (800a5dc <xTaskResumeAll+0x118>)
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d10a      	bne.n	800a4f0 <xTaskResumeAll+0x2c>
	__asm volatile
 800a4da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4de:	f383 8811 	msr	BASEPRI, r3
 800a4e2:	f3bf 8f6f 	isb	sy
 800a4e6:	f3bf 8f4f 	dsb	sy
 800a4ea:	603b      	str	r3, [r7, #0]
}
 800a4ec:	bf00      	nop
 800a4ee:	e7fe      	b.n	800a4ee <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a4f0:	f001 fad0 	bl	800ba94 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a4f4:	4b39      	ldr	r3, [pc, #228]	; (800a5dc <xTaskResumeAll+0x118>)
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	3b01      	subs	r3, #1
 800a4fa:	4a38      	ldr	r2, [pc, #224]	; (800a5dc <xTaskResumeAll+0x118>)
 800a4fc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a4fe:	4b37      	ldr	r3, [pc, #220]	; (800a5dc <xTaskResumeAll+0x118>)
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	2b00      	cmp	r3, #0
 800a504:	d162      	bne.n	800a5cc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a506:	4b36      	ldr	r3, [pc, #216]	; (800a5e0 <xTaskResumeAll+0x11c>)
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d05e      	beq.n	800a5cc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a50e:	e02f      	b.n	800a570 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a510:	4b34      	ldr	r3, [pc, #208]	; (800a5e4 <xTaskResumeAll+0x120>)
 800a512:	68db      	ldr	r3, [r3, #12]
 800a514:	68db      	ldr	r3, [r3, #12]
 800a516:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	3318      	adds	r3, #24
 800a51c:	4618      	mov	r0, r3
 800a51e:	f7fe fd4f 	bl	8008fc0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	3304      	adds	r3, #4
 800a526:	4618      	mov	r0, r3
 800a528:	f7fe fd4a 	bl	8008fc0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a530:	4b2d      	ldr	r3, [pc, #180]	; (800a5e8 <xTaskResumeAll+0x124>)
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	429a      	cmp	r2, r3
 800a536:	d903      	bls.n	800a540 <xTaskResumeAll+0x7c>
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a53c:	4a2a      	ldr	r2, [pc, #168]	; (800a5e8 <xTaskResumeAll+0x124>)
 800a53e:	6013      	str	r3, [r2, #0]
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a544:	4613      	mov	r3, r2
 800a546:	009b      	lsls	r3, r3, #2
 800a548:	4413      	add	r3, r2
 800a54a:	009b      	lsls	r3, r3, #2
 800a54c:	4a27      	ldr	r2, [pc, #156]	; (800a5ec <xTaskResumeAll+0x128>)
 800a54e:	441a      	add	r2, r3
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	3304      	adds	r3, #4
 800a554:	4619      	mov	r1, r3
 800a556:	4610      	mov	r0, r2
 800a558:	f7fe fcd5 	bl	8008f06 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a560:	4b23      	ldr	r3, [pc, #140]	; (800a5f0 <xTaskResumeAll+0x12c>)
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a566:	429a      	cmp	r2, r3
 800a568:	d302      	bcc.n	800a570 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800a56a:	4b22      	ldr	r3, [pc, #136]	; (800a5f4 <xTaskResumeAll+0x130>)
 800a56c:	2201      	movs	r2, #1
 800a56e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a570:	4b1c      	ldr	r3, [pc, #112]	; (800a5e4 <xTaskResumeAll+0x120>)
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	2b00      	cmp	r3, #0
 800a576:	d1cb      	bne.n	800a510 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d001      	beq.n	800a582 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a57e:	f000 fb55 	bl	800ac2c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a582:	4b1d      	ldr	r3, [pc, #116]	; (800a5f8 <xTaskResumeAll+0x134>)
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d010      	beq.n	800a5b0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a58e:	f000 f847 	bl	800a620 <xTaskIncrementTick>
 800a592:	4603      	mov	r3, r0
 800a594:	2b00      	cmp	r3, #0
 800a596:	d002      	beq.n	800a59e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800a598:	4b16      	ldr	r3, [pc, #88]	; (800a5f4 <xTaskResumeAll+0x130>)
 800a59a:	2201      	movs	r2, #1
 800a59c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	3b01      	subs	r3, #1
 800a5a2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d1f1      	bne.n	800a58e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800a5aa:	4b13      	ldr	r3, [pc, #76]	; (800a5f8 <xTaskResumeAll+0x134>)
 800a5ac:	2200      	movs	r2, #0
 800a5ae:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a5b0:	4b10      	ldr	r3, [pc, #64]	; (800a5f4 <xTaskResumeAll+0x130>)
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d009      	beq.n	800a5cc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a5b8:	2301      	movs	r3, #1
 800a5ba:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a5bc:	4b0f      	ldr	r3, [pc, #60]	; (800a5fc <xTaskResumeAll+0x138>)
 800a5be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a5c2:	601a      	str	r2, [r3, #0]
 800a5c4:	f3bf 8f4f 	dsb	sy
 800a5c8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a5cc:	f001 fa92 	bl	800baf4 <vPortExitCritical>

	return xAlreadyYielded;
 800a5d0:	68bb      	ldr	r3, [r7, #8]
}
 800a5d2:	4618      	mov	r0, r3
 800a5d4:	3710      	adds	r7, #16
 800a5d6:	46bd      	mov	sp, r7
 800a5d8:	bd80      	pop	{r7, pc}
 800a5da:	bf00      	nop
 800a5dc:	200020a8 	.word	0x200020a8
 800a5e0:	20002080 	.word	0x20002080
 800a5e4:	20002040 	.word	0x20002040
 800a5e8:	20002088 	.word	0x20002088
 800a5ec:	20001bb0 	.word	0x20001bb0
 800a5f0:	20001bac 	.word	0x20001bac
 800a5f4:	20002094 	.word	0x20002094
 800a5f8:	20002090 	.word	0x20002090
 800a5fc:	e000ed04 	.word	0xe000ed04

0800a600 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a600:	b480      	push	{r7}
 800a602:	b083      	sub	sp, #12
 800a604:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a606:	4b05      	ldr	r3, [pc, #20]	; (800a61c <xTaskGetTickCount+0x1c>)
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a60c:	687b      	ldr	r3, [r7, #4]
}
 800a60e:	4618      	mov	r0, r3
 800a610:	370c      	adds	r7, #12
 800a612:	46bd      	mov	sp, r7
 800a614:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a618:	4770      	bx	lr
 800a61a:	bf00      	nop
 800a61c:	20002084 	.word	0x20002084

0800a620 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a620:	b580      	push	{r7, lr}
 800a622:	b086      	sub	sp, #24
 800a624:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a626:	2300      	movs	r3, #0
 800a628:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a62a:	4b4f      	ldr	r3, [pc, #316]	; (800a768 <xTaskIncrementTick+0x148>)
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	2b00      	cmp	r3, #0
 800a630:	f040 808f 	bne.w	800a752 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a634:	4b4d      	ldr	r3, [pc, #308]	; (800a76c <xTaskIncrementTick+0x14c>)
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	3301      	adds	r3, #1
 800a63a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a63c:	4a4b      	ldr	r2, [pc, #300]	; (800a76c <xTaskIncrementTick+0x14c>)
 800a63e:	693b      	ldr	r3, [r7, #16]
 800a640:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a642:	693b      	ldr	r3, [r7, #16]
 800a644:	2b00      	cmp	r3, #0
 800a646:	d120      	bne.n	800a68a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a648:	4b49      	ldr	r3, [pc, #292]	; (800a770 <xTaskIncrementTick+0x150>)
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d00a      	beq.n	800a668 <xTaskIncrementTick+0x48>
	__asm volatile
 800a652:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a656:	f383 8811 	msr	BASEPRI, r3
 800a65a:	f3bf 8f6f 	isb	sy
 800a65e:	f3bf 8f4f 	dsb	sy
 800a662:	603b      	str	r3, [r7, #0]
}
 800a664:	bf00      	nop
 800a666:	e7fe      	b.n	800a666 <xTaskIncrementTick+0x46>
 800a668:	4b41      	ldr	r3, [pc, #260]	; (800a770 <xTaskIncrementTick+0x150>)
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	60fb      	str	r3, [r7, #12]
 800a66e:	4b41      	ldr	r3, [pc, #260]	; (800a774 <xTaskIncrementTick+0x154>)
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	4a3f      	ldr	r2, [pc, #252]	; (800a770 <xTaskIncrementTick+0x150>)
 800a674:	6013      	str	r3, [r2, #0]
 800a676:	4a3f      	ldr	r2, [pc, #252]	; (800a774 <xTaskIncrementTick+0x154>)
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	6013      	str	r3, [r2, #0]
 800a67c:	4b3e      	ldr	r3, [pc, #248]	; (800a778 <xTaskIncrementTick+0x158>)
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	3301      	adds	r3, #1
 800a682:	4a3d      	ldr	r2, [pc, #244]	; (800a778 <xTaskIncrementTick+0x158>)
 800a684:	6013      	str	r3, [r2, #0]
 800a686:	f000 fad1 	bl	800ac2c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a68a:	4b3c      	ldr	r3, [pc, #240]	; (800a77c <xTaskIncrementTick+0x15c>)
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	693a      	ldr	r2, [r7, #16]
 800a690:	429a      	cmp	r2, r3
 800a692:	d349      	bcc.n	800a728 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a694:	4b36      	ldr	r3, [pc, #216]	; (800a770 <xTaskIncrementTick+0x150>)
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d104      	bne.n	800a6a8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a69e:	4b37      	ldr	r3, [pc, #220]	; (800a77c <xTaskIncrementTick+0x15c>)
 800a6a0:	f04f 32ff 	mov.w	r2, #4294967295
 800a6a4:	601a      	str	r2, [r3, #0]
					break;
 800a6a6:	e03f      	b.n	800a728 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a6a8:	4b31      	ldr	r3, [pc, #196]	; (800a770 <xTaskIncrementTick+0x150>)
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	68db      	ldr	r3, [r3, #12]
 800a6ae:	68db      	ldr	r3, [r3, #12]
 800a6b0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a6b2:	68bb      	ldr	r3, [r7, #8]
 800a6b4:	685b      	ldr	r3, [r3, #4]
 800a6b6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a6b8:	693a      	ldr	r2, [r7, #16]
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	429a      	cmp	r2, r3
 800a6be:	d203      	bcs.n	800a6c8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a6c0:	4a2e      	ldr	r2, [pc, #184]	; (800a77c <xTaskIncrementTick+0x15c>)
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a6c6:	e02f      	b.n	800a728 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a6c8:	68bb      	ldr	r3, [r7, #8]
 800a6ca:	3304      	adds	r3, #4
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	f7fe fc77 	bl	8008fc0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a6d2:	68bb      	ldr	r3, [r7, #8]
 800a6d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d004      	beq.n	800a6e4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a6da:	68bb      	ldr	r3, [r7, #8]
 800a6dc:	3318      	adds	r3, #24
 800a6de:	4618      	mov	r0, r3
 800a6e0:	f7fe fc6e 	bl	8008fc0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a6e4:	68bb      	ldr	r3, [r7, #8]
 800a6e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6e8:	4b25      	ldr	r3, [pc, #148]	; (800a780 <xTaskIncrementTick+0x160>)
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	429a      	cmp	r2, r3
 800a6ee:	d903      	bls.n	800a6f8 <xTaskIncrementTick+0xd8>
 800a6f0:	68bb      	ldr	r3, [r7, #8]
 800a6f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6f4:	4a22      	ldr	r2, [pc, #136]	; (800a780 <xTaskIncrementTick+0x160>)
 800a6f6:	6013      	str	r3, [r2, #0]
 800a6f8:	68bb      	ldr	r3, [r7, #8]
 800a6fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6fc:	4613      	mov	r3, r2
 800a6fe:	009b      	lsls	r3, r3, #2
 800a700:	4413      	add	r3, r2
 800a702:	009b      	lsls	r3, r3, #2
 800a704:	4a1f      	ldr	r2, [pc, #124]	; (800a784 <xTaskIncrementTick+0x164>)
 800a706:	441a      	add	r2, r3
 800a708:	68bb      	ldr	r3, [r7, #8]
 800a70a:	3304      	adds	r3, #4
 800a70c:	4619      	mov	r1, r3
 800a70e:	4610      	mov	r0, r2
 800a710:	f7fe fbf9 	bl	8008f06 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a714:	68bb      	ldr	r3, [r7, #8]
 800a716:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a718:	4b1b      	ldr	r3, [pc, #108]	; (800a788 <xTaskIncrementTick+0x168>)
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a71e:	429a      	cmp	r2, r3
 800a720:	d3b8      	bcc.n	800a694 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800a722:	2301      	movs	r3, #1
 800a724:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a726:	e7b5      	b.n	800a694 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a728:	4b17      	ldr	r3, [pc, #92]	; (800a788 <xTaskIncrementTick+0x168>)
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a72e:	4915      	ldr	r1, [pc, #84]	; (800a784 <xTaskIncrementTick+0x164>)
 800a730:	4613      	mov	r3, r2
 800a732:	009b      	lsls	r3, r3, #2
 800a734:	4413      	add	r3, r2
 800a736:	009b      	lsls	r3, r3, #2
 800a738:	440b      	add	r3, r1
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	2b01      	cmp	r3, #1
 800a73e:	d901      	bls.n	800a744 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800a740:	2301      	movs	r3, #1
 800a742:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a744:	4b11      	ldr	r3, [pc, #68]	; (800a78c <xTaskIncrementTick+0x16c>)
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d007      	beq.n	800a75c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800a74c:	2301      	movs	r3, #1
 800a74e:	617b      	str	r3, [r7, #20]
 800a750:	e004      	b.n	800a75c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a752:	4b0f      	ldr	r3, [pc, #60]	; (800a790 <xTaskIncrementTick+0x170>)
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	3301      	adds	r3, #1
 800a758:	4a0d      	ldr	r2, [pc, #52]	; (800a790 <xTaskIncrementTick+0x170>)
 800a75a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a75c:	697b      	ldr	r3, [r7, #20]
}
 800a75e:	4618      	mov	r0, r3
 800a760:	3718      	adds	r7, #24
 800a762:	46bd      	mov	sp, r7
 800a764:	bd80      	pop	{r7, pc}
 800a766:	bf00      	nop
 800a768:	200020a8 	.word	0x200020a8
 800a76c:	20002084 	.word	0x20002084
 800a770:	20002038 	.word	0x20002038
 800a774:	2000203c 	.word	0x2000203c
 800a778:	20002098 	.word	0x20002098
 800a77c:	200020a0 	.word	0x200020a0
 800a780:	20002088 	.word	0x20002088
 800a784:	20001bb0 	.word	0x20001bb0
 800a788:	20001bac 	.word	0x20001bac
 800a78c:	20002094 	.word	0x20002094
 800a790:	20002090 	.word	0x20002090

0800a794 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a794:	b480      	push	{r7}
 800a796:	b085      	sub	sp, #20
 800a798:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a79a:	4b28      	ldr	r3, [pc, #160]	; (800a83c <vTaskSwitchContext+0xa8>)
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d003      	beq.n	800a7aa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a7a2:	4b27      	ldr	r3, [pc, #156]	; (800a840 <vTaskSwitchContext+0xac>)
 800a7a4:	2201      	movs	r2, #1
 800a7a6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a7a8:	e041      	b.n	800a82e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800a7aa:	4b25      	ldr	r3, [pc, #148]	; (800a840 <vTaskSwitchContext+0xac>)
 800a7ac:	2200      	movs	r2, #0
 800a7ae:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a7b0:	4b24      	ldr	r3, [pc, #144]	; (800a844 <vTaskSwitchContext+0xb0>)
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	60fb      	str	r3, [r7, #12]
 800a7b6:	e010      	b.n	800a7da <vTaskSwitchContext+0x46>
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d10a      	bne.n	800a7d4 <vTaskSwitchContext+0x40>
	__asm volatile
 800a7be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7c2:	f383 8811 	msr	BASEPRI, r3
 800a7c6:	f3bf 8f6f 	isb	sy
 800a7ca:	f3bf 8f4f 	dsb	sy
 800a7ce:	607b      	str	r3, [r7, #4]
}
 800a7d0:	bf00      	nop
 800a7d2:	e7fe      	b.n	800a7d2 <vTaskSwitchContext+0x3e>
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	3b01      	subs	r3, #1
 800a7d8:	60fb      	str	r3, [r7, #12]
 800a7da:	491b      	ldr	r1, [pc, #108]	; (800a848 <vTaskSwitchContext+0xb4>)
 800a7dc:	68fa      	ldr	r2, [r7, #12]
 800a7de:	4613      	mov	r3, r2
 800a7e0:	009b      	lsls	r3, r3, #2
 800a7e2:	4413      	add	r3, r2
 800a7e4:	009b      	lsls	r3, r3, #2
 800a7e6:	440b      	add	r3, r1
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d0e4      	beq.n	800a7b8 <vTaskSwitchContext+0x24>
 800a7ee:	68fa      	ldr	r2, [r7, #12]
 800a7f0:	4613      	mov	r3, r2
 800a7f2:	009b      	lsls	r3, r3, #2
 800a7f4:	4413      	add	r3, r2
 800a7f6:	009b      	lsls	r3, r3, #2
 800a7f8:	4a13      	ldr	r2, [pc, #76]	; (800a848 <vTaskSwitchContext+0xb4>)
 800a7fa:	4413      	add	r3, r2
 800a7fc:	60bb      	str	r3, [r7, #8]
 800a7fe:	68bb      	ldr	r3, [r7, #8]
 800a800:	685b      	ldr	r3, [r3, #4]
 800a802:	685a      	ldr	r2, [r3, #4]
 800a804:	68bb      	ldr	r3, [r7, #8]
 800a806:	605a      	str	r2, [r3, #4]
 800a808:	68bb      	ldr	r3, [r7, #8]
 800a80a:	685a      	ldr	r2, [r3, #4]
 800a80c:	68bb      	ldr	r3, [r7, #8]
 800a80e:	3308      	adds	r3, #8
 800a810:	429a      	cmp	r2, r3
 800a812:	d104      	bne.n	800a81e <vTaskSwitchContext+0x8a>
 800a814:	68bb      	ldr	r3, [r7, #8]
 800a816:	685b      	ldr	r3, [r3, #4]
 800a818:	685a      	ldr	r2, [r3, #4]
 800a81a:	68bb      	ldr	r3, [r7, #8]
 800a81c:	605a      	str	r2, [r3, #4]
 800a81e:	68bb      	ldr	r3, [r7, #8]
 800a820:	685b      	ldr	r3, [r3, #4]
 800a822:	68db      	ldr	r3, [r3, #12]
 800a824:	4a09      	ldr	r2, [pc, #36]	; (800a84c <vTaskSwitchContext+0xb8>)
 800a826:	6013      	str	r3, [r2, #0]
 800a828:	4a06      	ldr	r2, [pc, #24]	; (800a844 <vTaskSwitchContext+0xb0>)
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	6013      	str	r3, [r2, #0]
}
 800a82e:	bf00      	nop
 800a830:	3714      	adds	r7, #20
 800a832:	46bd      	mov	sp, r7
 800a834:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a838:	4770      	bx	lr
 800a83a:	bf00      	nop
 800a83c:	200020a8 	.word	0x200020a8
 800a840:	20002094 	.word	0x20002094
 800a844:	20002088 	.word	0x20002088
 800a848:	20001bb0 	.word	0x20001bb0
 800a84c:	20001bac 	.word	0x20001bac

0800a850 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a850:	b580      	push	{r7, lr}
 800a852:	b084      	sub	sp, #16
 800a854:	af00      	add	r7, sp, #0
 800a856:	6078      	str	r0, [r7, #4]
 800a858:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d10a      	bne.n	800a876 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a860:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a864:	f383 8811 	msr	BASEPRI, r3
 800a868:	f3bf 8f6f 	isb	sy
 800a86c:	f3bf 8f4f 	dsb	sy
 800a870:	60fb      	str	r3, [r7, #12]
}
 800a872:	bf00      	nop
 800a874:	e7fe      	b.n	800a874 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a876:	4b07      	ldr	r3, [pc, #28]	; (800a894 <vTaskPlaceOnEventList+0x44>)
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	3318      	adds	r3, #24
 800a87c:	4619      	mov	r1, r3
 800a87e:	6878      	ldr	r0, [r7, #4]
 800a880:	f7fe fb65 	bl	8008f4e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a884:	2101      	movs	r1, #1
 800a886:	6838      	ldr	r0, [r7, #0]
 800a888:	f000 fb7a 	bl	800af80 <prvAddCurrentTaskToDelayedList>
}
 800a88c:	bf00      	nop
 800a88e:	3710      	adds	r7, #16
 800a890:	46bd      	mov	sp, r7
 800a892:	bd80      	pop	{r7, pc}
 800a894:	20001bac 	.word	0x20001bac

0800a898 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a898:	b580      	push	{r7, lr}
 800a89a:	b086      	sub	sp, #24
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	60f8      	str	r0, [r7, #12]
 800a8a0:	60b9      	str	r1, [r7, #8]
 800a8a2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d10a      	bne.n	800a8c0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800a8aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8ae:	f383 8811 	msr	BASEPRI, r3
 800a8b2:	f3bf 8f6f 	isb	sy
 800a8b6:	f3bf 8f4f 	dsb	sy
 800a8ba:	617b      	str	r3, [r7, #20]
}
 800a8bc:	bf00      	nop
 800a8be:	e7fe      	b.n	800a8be <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a8c0:	4b0a      	ldr	r3, [pc, #40]	; (800a8ec <vTaskPlaceOnEventListRestricted+0x54>)
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	3318      	adds	r3, #24
 800a8c6:	4619      	mov	r1, r3
 800a8c8:	68f8      	ldr	r0, [r7, #12]
 800a8ca:	f7fe fb1c 	bl	8008f06 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d002      	beq.n	800a8da <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800a8d4:	f04f 33ff 	mov.w	r3, #4294967295
 800a8d8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a8da:	6879      	ldr	r1, [r7, #4]
 800a8dc:	68b8      	ldr	r0, [r7, #8]
 800a8de:	f000 fb4f 	bl	800af80 <prvAddCurrentTaskToDelayedList>
	}
 800a8e2:	bf00      	nop
 800a8e4:	3718      	adds	r7, #24
 800a8e6:	46bd      	mov	sp, r7
 800a8e8:	bd80      	pop	{r7, pc}
 800a8ea:	bf00      	nop
 800a8ec:	20001bac 	.word	0x20001bac

0800a8f0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a8f0:	b580      	push	{r7, lr}
 800a8f2:	b086      	sub	sp, #24
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	68db      	ldr	r3, [r3, #12]
 800a8fc:	68db      	ldr	r3, [r3, #12]
 800a8fe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a900:	693b      	ldr	r3, [r7, #16]
 800a902:	2b00      	cmp	r3, #0
 800a904:	d10a      	bne.n	800a91c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a90a:	f383 8811 	msr	BASEPRI, r3
 800a90e:	f3bf 8f6f 	isb	sy
 800a912:	f3bf 8f4f 	dsb	sy
 800a916:	60fb      	str	r3, [r7, #12]
}
 800a918:	bf00      	nop
 800a91a:	e7fe      	b.n	800a91a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a91c:	693b      	ldr	r3, [r7, #16]
 800a91e:	3318      	adds	r3, #24
 800a920:	4618      	mov	r0, r3
 800a922:	f7fe fb4d 	bl	8008fc0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a926:	4b1e      	ldr	r3, [pc, #120]	; (800a9a0 <xTaskRemoveFromEventList+0xb0>)
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d11d      	bne.n	800a96a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a92e:	693b      	ldr	r3, [r7, #16]
 800a930:	3304      	adds	r3, #4
 800a932:	4618      	mov	r0, r3
 800a934:	f7fe fb44 	bl	8008fc0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a938:	693b      	ldr	r3, [r7, #16]
 800a93a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a93c:	4b19      	ldr	r3, [pc, #100]	; (800a9a4 <xTaskRemoveFromEventList+0xb4>)
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	429a      	cmp	r2, r3
 800a942:	d903      	bls.n	800a94c <xTaskRemoveFromEventList+0x5c>
 800a944:	693b      	ldr	r3, [r7, #16]
 800a946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a948:	4a16      	ldr	r2, [pc, #88]	; (800a9a4 <xTaskRemoveFromEventList+0xb4>)
 800a94a:	6013      	str	r3, [r2, #0]
 800a94c:	693b      	ldr	r3, [r7, #16]
 800a94e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a950:	4613      	mov	r3, r2
 800a952:	009b      	lsls	r3, r3, #2
 800a954:	4413      	add	r3, r2
 800a956:	009b      	lsls	r3, r3, #2
 800a958:	4a13      	ldr	r2, [pc, #76]	; (800a9a8 <xTaskRemoveFromEventList+0xb8>)
 800a95a:	441a      	add	r2, r3
 800a95c:	693b      	ldr	r3, [r7, #16]
 800a95e:	3304      	adds	r3, #4
 800a960:	4619      	mov	r1, r3
 800a962:	4610      	mov	r0, r2
 800a964:	f7fe facf 	bl	8008f06 <vListInsertEnd>
 800a968:	e005      	b.n	800a976 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a96a:	693b      	ldr	r3, [r7, #16]
 800a96c:	3318      	adds	r3, #24
 800a96e:	4619      	mov	r1, r3
 800a970:	480e      	ldr	r0, [pc, #56]	; (800a9ac <xTaskRemoveFromEventList+0xbc>)
 800a972:	f7fe fac8 	bl	8008f06 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a976:	693b      	ldr	r3, [r7, #16]
 800a978:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a97a:	4b0d      	ldr	r3, [pc, #52]	; (800a9b0 <xTaskRemoveFromEventList+0xc0>)
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a980:	429a      	cmp	r2, r3
 800a982:	d905      	bls.n	800a990 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a984:	2301      	movs	r3, #1
 800a986:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a988:	4b0a      	ldr	r3, [pc, #40]	; (800a9b4 <xTaskRemoveFromEventList+0xc4>)
 800a98a:	2201      	movs	r2, #1
 800a98c:	601a      	str	r2, [r3, #0]
 800a98e:	e001      	b.n	800a994 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a990:	2300      	movs	r3, #0
 800a992:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a994:	697b      	ldr	r3, [r7, #20]
}
 800a996:	4618      	mov	r0, r3
 800a998:	3718      	adds	r7, #24
 800a99a:	46bd      	mov	sp, r7
 800a99c:	bd80      	pop	{r7, pc}
 800a99e:	bf00      	nop
 800a9a0:	200020a8 	.word	0x200020a8
 800a9a4:	20002088 	.word	0x20002088
 800a9a8:	20001bb0 	.word	0x20001bb0
 800a9ac:	20002040 	.word	0x20002040
 800a9b0:	20001bac 	.word	0x20001bac
 800a9b4:	20002094 	.word	0x20002094

0800a9b8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a9b8:	b480      	push	{r7}
 800a9ba:	b083      	sub	sp, #12
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a9c0:	4b06      	ldr	r3, [pc, #24]	; (800a9dc <vTaskInternalSetTimeOutState+0x24>)
 800a9c2:	681a      	ldr	r2, [r3, #0]
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a9c8:	4b05      	ldr	r3, [pc, #20]	; (800a9e0 <vTaskInternalSetTimeOutState+0x28>)
 800a9ca:	681a      	ldr	r2, [r3, #0]
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	605a      	str	r2, [r3, #4]
}
 800a9d0:	bf00      	nop
 800a9d2:	370c      	adds	r7, #12
 800a9d4:	46bd      	mov	sp, r7
 800a9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9da:	4770      	bx	lr
 800a9dc:	20002098 	.word	0x20002098
 800a9e0:	20002084 	.word	0x20002084

0800a9e4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a9e4:	b580      	push	{r7, lr}
 800a9e6:	b088      	sub	sp, #32
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	6078      	str	r0, [r7, #4]
 800a9ec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d10a      	bne.n	800aa0a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a9f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9f8:	f383 8811 	msr	BASEPRI, r3
 800a9fc:	f3bf 8f6f 	isb	sy
 800aa00:	f3bf 8f4f 	dsb	sy
 800aa04:	613b      	str	r3, [r7, #16]
}
 800aa06:	bf00      	nop
 800aa08:	e7fe      	b.n	800aa08 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800aa0a:	683b      	ldr	r3, [r7, #0]
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d10a      	bne.n	800aa26 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800aa10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa14:	f383 8811 	msr	BASEPRI, r3
 800aa18:	f3bf 8f6f 	isb	sy
 800aa1c:	f3bf 8f4f 	dsb	sy
 800aa20:	60fb      	str	r3, [r7, #12]
}
 800aa22:	bf00      	nop
 800aa24:	e7fe      	b.n	800aa24 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800aa26:	f001 f835 	bl	800ba94 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800aa2a:	4b1d      	ldr	r3, [pc, #116]	; (800aaa0 <xTaskCheckForTimeOut+0xbc>)
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	685b      	ldr	r3, [r3, #4]
 800aa34:	69ba      	ldr	r2, [r7, #24]
 800aa36:	1ad3      	subs	r3, r2, r3
 800aa38:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800aa3a:	683b      	ldr	r3, [r7, #0]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa42:	d102      	bne.n	800aa4a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800aa44:	2300      	movs	r3, #0
 800aa46:	61fb      	str	r3, [r7, #28]
 800aa48:	e023      	b.n	800aa92 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	681a      	ldr	r2, [r3, #0]
 800aa4e:	4b15      	ldr	r3, [pc, #84]	; (800aaa4 <xTaskCheckForTimeOut+0xc0>)
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	429a      	cmp	r2, r3
 800aa54:	d007      	beq.n	800aa66 <xTaskCheckForTimeOut+0x82>
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	685b      	ldr	r3, [r3, #4]
 800aa5a:	69ba      	ldr	r2, [r7, #24]
 800aa5c:	429a      	cmp	r2, r3
 800aa5e:	d302      	bcc.n	800aa66 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800aa60:	2301      	movs	r3, #1
 800aa62:	61fb      	str	r3, [r7, #28]
 800aa64:	e015      	b.n	800aa92 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800aa66:	683b      	ldr	r3, [r7, #0]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	697a      	ldr	r2, [r7, #20]
 800aa6c:	429a      	cmp	r2, r3
 800aa6e:	d20b      	bcs.n	800aa88 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800aa70:	683b      	ldr	r3, [r7, #0]
 800aa72:	681a      	ldr	r2, [r3, #0]
 800aa74:	697b      	ldr	r3, [r7, #20]
 800aa76:	1ad2      	subs	r2, r2, r3
 800aa78:	683b      	ldr	r3, [r7, #0]
 800aa7a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800aa7c:	6878      	ldr	r0, [r7, #4]
 800aa7e:	f7ff ff9b 	bl	800a9b8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800aa82:	2300      	movs	r3, #0
 800aa84:	61fb      	str	r3, [r7, #28]
 800aa86:	e004      	b.n	800aa92 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800aa88:	683b      	ldr	r3, [r7, #0]
 800aa8a:	2200      	movs	r2, #0
 800aa8c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800aa8e:	2301      	movs	r3, #1
 800aa90:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800aa92:	f001 f82f 	bl	800baf4 <vPortExitCritical>

	return xReturn;
 800aa96:	69fb      	ldr	r3, [r7, #28]
}
 800aa98:	4618      	mov	r0, r3
 800aa9a:	3720      	adds	r7, #32
 800aa9c:	46bd      	mov	sp, r7
 800aa9e:	bd80      	pop	{r7, pc}
 800aaa0:	20002084 	.word	0x20002084
 800aaa4:	20002098 	.word	0x20002098

0800aaa8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800aaa8:	b480      	push	{r7}
 800aaaa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800aaac:	4b03      	ldr	r3, [pc, #12]	; (800aabc <vTaskMissedYield+0x14>)
 800aaae:	2201      	movs	r2, #1
 800aab0:	601a      	str	r2, [r3, #0]
}
 800aab2:	bf00      	nop
 800aab4:	46bd      	mov	sp, r7
 800aab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaba:	4770      	bx	lr
 800aabc:	20002094 	.word	0x20002094

0800aac0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800aac0:	b580      	push	{r7, lr}
 800aac2:	b082      	sub	sp, #8
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800aac8:	f000 f852 	bl	800ab70 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800aacc:	4b06      	ldr	r3, [pc, #24]	; (800aae8 <prvIdleTask+0x28>)
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	2b01      	cmp	r3, #1
 800aad2:	d9f9      	bls.n	800aac8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800aad4:	4b05      	ldr	r3, [pc, #20]	; (800aaec <prvIdleTask+0x2c>)
 800aad6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aada:	601a      	str	r2, [r3, #0]
 800aadc:	f3bf 8f4f 	dsb	sy
 800aae0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800aae4:	e7f0      	b.n	800aac8 <prvIdleTask+0x8>
 800aae6:	bf00      	nop
 800aae8:	20001bb0 	.word	0x20001bb0
 800aaec:	e000ed04 	.word	0xe000ed04

0800aaf0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800aaf0:	b580      	push	{r7, lr}
 800aaf2:	b082      	sub	sp, #8
 800aaf4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800aaf6:	2300      	movs	r3, #0
 800aaf8:	607b      	str	r3, [r7, #4]
 800aafa:	e00c      	b.n	800ab16 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800aafc:	687a      	ldr	r2, [r7, #4]
 800aafe:	4613      	mov	r3, r2
 800ab00:	009b      	lsls	r3, r3, #2
 800ab02:	4413      	add	r3, r2
 800ab04:	009b      	lsls	r3, r3, #2
 800ab06:	4a12      	ldr	r2, [pc, #72]	; (800ab50 <prvInitialiseTaskLists+0x60>)
 800ab08:	4413      	add	r3, r2
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	f7fe f9ce 	bl	8008eac <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	3301      	adds	r3, #1
 800ab14:	607b      	str	r3, [r7, #4]
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	2b37      	cmp	r3, #55	; 0x37
 800ab1a:	d9ef      	bls.n	800aafc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ab1c:	480d      	ldr	r0, [pc, #52]	; (800ab54 <prvInitialiseTaskLists+0x64>)
 800ab1e:	f7fe f9c5 	bl	8008eac <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ab22:	480d      	ldr	r0, [pc, #52]	; (800ab58 <prvInitialiseTaskLists+0x68>)
 800ab24:	f7fe f9c2 	bl	8008eac <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ab28:	480c      	ldr	r0, [pc, #48]	; (800ab5c <prvInitialiseTaskLists+0x6c>)
 800ab2a:	f7fe f9bf 	bl	8008eac <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ab2e:	480c      	ldr	r0, [pc, #48]	; (800ab60 <prvInitialiseTaskLists+0x70>)
 800ab30:	f7fe f9bc 	bl	8008eac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ab34:	480b      	ldr	r0, [pc, #44]	; (800ab64 <prvInitialiseTaskLists+0x74>)
 800ab36:	f7fe f9b9 	bl	8008eac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ab3a:	4b0b      	ldr	r3, [pc, #44]	; (800ab68 <prvInitialiseTaskLists+0x78>)
 800ab3c:	4a05      	ldr	r2, [pc, #20]	; (800ab54 <prvInitialiseTaskLists+0x64>)
 800ab3e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ab40:	4b0a      	ldr	r3, [pc, #40]	; (800ab6c <prvInitialiseTaskLists+0x7c>)
 800ab42:	4a05      	ldr	r2, [pc, #20]	; (800ab58 <prvInitialiseTaskLists+0x68>)
 800ab44:	601a      	str	r2, [r3, #0]
}
 800ab46:	bf00      	nop
 800ab48:	3708      	adds	r7, #8
 800ab4a:	46bd      	mov	sp, r7
 800ab4c:	bd80      	pop	{r7, pc}
 800ab4e:	bf00      	nop
 800ab50:	20001bb0 	.word	0x20001bb0
 800ab54:	20002010 	.word	0x20002010
 800ab58:	20002024 	.word	0x20002024
 800ab5c:	20002040 	.word	0x20002040
 800ab60:	20002054 	.word	0x20002054
 800ab64:	2000206c 	.word	0x2000206c
 800ab68:	20002038 	.word	0x20002038
 800ab6c:	2000203c 	.word	0x2000203c

0800ab70 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ab70:	b580      	push	{r7, lr}
 800ab72:	b082      	sub	sp, #8
 800ab74:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ab76:	e019      	b.n	800abac <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ab78:	f000 ff8c 	bl	800ba94 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ab7c:	4b10      	ldr	r3, [pc, #64]	; (800abc0 <prvCheckTasksWaitingTermination+0x50>)
 800ab7e:	68db      	ldr	r3, [r3, #12]
 800ab80:	68db      	ldr	r3, [r3, #12]
 800ab82:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	3304      	adds	r3, #4
 800ab88:	4618      	mov	r0, r3
 800ab8a:	f7fe fa19 	bl	8008fc0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ab8e:	4b0d      	ldr	r3, [pc, #52]	; (800abc4 <prvCheckTasksWaitingTermination+0x54>)
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	3b01      	subs	r3, #1
 800ab94:	4a0b      	ldr	r2, [pc, #44]	; (800abc4 <prvCheckTasksWaitingTermination+0x54>)
 800ab96:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ab98:	4b0b      	ldr	r3, [pc, #44]	; (800abc8 <prvCheckTasksWaitingTermination+0x58>)
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	3b01      	subs	r3, #1
 800ab9e:	4a0a      	ldr	r2, [pc, #40]	; (800abc8 <prvCheckTasksWaitingTermination+0x58>)
 800aba0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800aba2:	f000 ffa7 	bl	800baf4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800aba6:	6878      	ldr	r0, [r7, #4]
 800aba8:	f000 f810 	bl	800abcc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800abac:	4b06      	ldr	r3, [pc, #24]	; (800abc8 <prvCheckTasksWaitingTermination+0x58>)
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d1e1      	bne.n	800ab78 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800abb4:	bf00      	nop
 800abb6:	bf00      	nop
 800abb8:	3708      	adds	r7, #8
 800abba:	46bd      	mov	sp, r7
 800abbc:	bd80      	pop	{r7, pc}
 800abbe:	bf00      	nop
 800abc0:	20002054 	.word	0x20002054
 800abc4:	20002080 	.word	0x20002080
 800abc8:	20002068 	.word	0x20002068

0800abcc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800abcc:	b580      	push	{r7, lr}
 800abce:	b084      	sub	sp, #16
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d108      	bne.n	800abf0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abe2:	4618      	mov	r0, r3
 800abe4:	f001 f944 	bl	800be70 <vPortFree>
				vPortFree( pxTCB );
 800abe8:	6878      	ldr	r0, [r7, #4]
 800abea:	f001 f941 	bl	800be70 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800abee:	e018      	b.n	800ac22 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800abf6:	2b01      	cmp	r3, #1
 800abf8:	d103      	bne.n	800ac02 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800abfa:	6878      	ldr	r0, [r7, #4]
 800abfc:	f001 f938 	bl	800be70 <vPortFree>
	}
 800ac00:	e00f      	b.n	800ac22 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800ac08:	2b02      	cmp	r3, #2
 800ac0a:	d00a      	beq.n	800ac22 <prvDeleteTCB+0x56>
	__asm volatile
 800ac0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac10:	f383 8811 	msr	BASEPRI, r3
 800ac14:	f3bf 8f6f 	isb	sy
 800ac18:	f3bf 8f4f 	dsb	sy
 800ac1c:	60fb      	str	r3, [r7, #12]
}
 800ac1e:	bf00      	nop
 800ac20:	e7fe      	b.n	800ac20 <prvDeleteTCB+0x54>
	}
 800ac22:	bf00      	nop
 800ac24:	3710      	adds	r7, #16
 800ac26:	46bd      	mov	sp, r7
 800ac28:	bd80      	pop	{r7, pc}
	...

0800ac2c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ac2c:	b480      	push	{r7}
 800ac2e:	b083      	sub	sp, #12
 800ac30:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ac32:	4b0c      	ldr	r3, [pc, #48]	; (800ac64 <prvResetNextTaskUnblockTime+0x38>)
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d104      	bne.n	800ac46 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ac3c:	4b0a      	ldr	r3, [pc, #40]	; (800ac68 <prvResetNextTaskUnblockTime+0x3c>)
 800ac3e:	f04f 32ff 	mov.w	r2, #4294967295
 800ac42:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ac44:	e008      	b.n	800ac58 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ac46:	4b07      	ldr	r3, [pc, #28]	; (800ac64 <prvResetNextTaskUnblockTime+0x38>)
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	68db      	ldr	r3, [r3, #12]
 800ac4c:	68db      	ldr	r3, [r3, #12]
 800ac4e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	685b      	ldr	r3, [r3, #4]
 800ac54:	4a04      	ldr	r2, [pc, #16]	; (800ac68 <prvResetNextTaskUnblockTime+0x3c>)
 800ac56:	6013      	str	r3, [r2, #0]
}
 800ac58:	bf00      	nop
 800ac5a:	370c      	adds	r7, #12
 800ac5c:	46bd      	mov	sp, r7
 800ac5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac62:	4770      	bx	lr
 800ac64:	20002038 	.word	0x20002038
 800ac68:	200020a0 	.word	0x200020a0

0800ac6c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ac6c:	b480      	push	{r7}
 800ac6e:	b083      	sub	sp, #12
 800ac70:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ac72:	4b0b      	ldr	r3, [pc, #44]	; (800aca0 <xTaskGetSchedulerState+0x34>)
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d102      	bne.n	800ac80 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ac7a:	2301      	movs	r3, #1
 800ac7c:	607b      	str	r3, [r7, #4]
 800ac7e:	e008      	b.n	800ac92 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ac80:	4b08      	ldr	r3, [pc, #32]	; (800aca4 <xTaskGetSchedulerState+0x38>)
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d102      	bne.n	800ac8e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ac88:	2302      	movs	r3, #2
 800ac8a:	607b      	str	r3, [r7, #4]
 800ac8c:	e001      	b.n	800ac92 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ac8e:	2300      	movs	r3, #0
 800ac90:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ac92:	687b      	ldr	r3, [r7, #4]
	}
 800ac94:	4618      	mov	r0, r3
 800ac96:	370c      	adds	r7, #12
 800ac98:	46bd      	mov	sp, r7
 800ac9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac9e:	4770      	bx	lr
 800aca0:	2000208c 	.word	0x2000208c
 800aca4:	200020a8 	.word	0x200020a8

0800aca8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800aca8:	b580      	push	{r7, lr}
 800acaa:	b084      	sub	sp, #16
 800acac:	af00      	add	r7, sp, #0
 800acae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800acb4:	2300      	movs	r3, #0
 800acb6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d051      	beq.n	800ad62 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800acbe:	68bb      	ldr	r3, [r7, #8]
 800acc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acc2:	4b2a      	ldr	r3, [pc, #168]	; (800ad6c <xTaskPriorityInherit+0xc4>)
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acc8:	429a      	cmp	r2, r3
 800acca:	d241      	bcs.n	800ad50 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800accc:	68bb      	ldr	r3, [r7, #8]
 800acce:	699b      	ldr	r3, [r3, #24]
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	db06      	blt.n	800ace2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800acd4:	4b25      	ldr	r3, [pc, #148]	; (800ad6c <xTaskPriorityInherit+0xc4>)
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acda:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800acde:	68bb      	ldr	r3, [r7, #8]
 800ace0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ace2:	68bb      	ldr	r3, [r7, #8]
 800ace4:	6959      	ldr	r1, [r3, #20]
 800ace6:	68bb      	ldr	r3, [r7, #8]
 800ace8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acea:	4613      	mov	r3, r2
 800acec:	009b      	lsls	r3, r3, #2
 800acee:	4413      	add	r3, r2
 800acf0:	009b      	lsls	r3, r3, #2
 800acf2:	4a1f      	ldr	r2, [pc, #124]	; (800ad70 <xTaskPriorityInherit+0xc8>)
 800acf4:	4413      	add	r3, r2
 800acf6:	4299      	cmp	r1, r3
 800acf8:	d122      	bne.n	800ad40 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800acfa:	68bb      	ldr	r3, [r7, #8]
 800acfc:	3304      	adds	r3, #4
 800acfe:	4618      	mov	r0, r3
 800ad00:	f7fe f95e 	bl	8008fc0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ad04:	4b19      	ldr	r3, [pc, #100]	; (800ad6c <xTaskPriorityInherit+0xc4>)
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad0a:	68bb      	ldr	r3, [r7, #8]
 800ad0c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ad0e:	68bb      	ldr	r3, [r7, #8]
 800ad10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad12:	4b18      	ldr	r3, [pc, #96]	; (800ad74 <xTaskPriorityInherit+0xcc>)
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	429a      	cmp	r2, r3
 800ad18:	d903      	bls.n	800ad22 <xTaskPriorityInherit+0x7a>
 800ad1a:	68bb      	ldr	r3, [r7, #8]
 800ad1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad1e:	4a15      	ldr	r2, [pc, #84]	; (800ad74 <xTaskPriorityInherit+0xcc>)
 800ad20:	6013      	str	r3, [r2, #0]
 800ad22:	68bb      	ldr	r3, [r7, #8]
 800ad24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad26:	4613      	mov	r3, r2
 800ad28:	009b      	lsls	r3, r3, #2
 800ad2a:	4413      	add	r3, r2
 800ad2c:	009b      	lsls	r3, r3, #2
 800ad2e:	4a10      	ldr	r2, [pc, #64]	; (800ad70 <xTaskPriorityInherit+0xc8>)
 800ad30:	441a      	add	r2, r3
 800ad32:	68bb      	ldr	r3, [r7, #8]
 800ad34:	3304      	adds	r3, #4
 800ad36:	4619      	mov	r1, r3
 800ad38:	4610      	mov	r0, r2
 800ad3a:	f7fe f8e4 	bl	8008f06 <vListInsertEnd>
 800ad3e:	e004      	b.n	800ad4a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ad40:	4b0a      	ldr	r3, [pc, #40]	; (800ad6c <xTaskPriorityInherit+0xc4>)
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad46:	68bb      	ldr	r3, [r7, #8]
 800ad48:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800ad4a:	2301      	movs	r3, #1
 800ad4c:	60fb      	str	r3, [r7, #12]
 800ad4e:	e008      	b.n	800ad62 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800ad50:	68bb      	ldr	r3, [r7, #8]
 800ad52:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ad54:	4b05      	ldr	r3, [pc, #20]	; (800ad6c <xTaskPriorityInherit+0xc4>)
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad5a:	429a      	cmp	r2, r3
 800ad5c:	d201      	bcs.n	800ad62 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800ad5e:	2301      	movs	r3, #1
 800ad60:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ad62:	68fb      	ldr	r3, [r7, #12]
	}
 800ad64:	4618      	mov	r0, r3
 800ad66:	3710      	adds	r7, #16
 800ad68:	46bd      	mov	sp, r7
 800ad6a:	bd80      	pop	{r7, pc}
 800ad6c:	20001bac 	.word	0x20001bac
 800ad70:	20001bb0 	.word	0x20001bb0
 800ad74:	20002088 	.word	0x20002088

0800ad78 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ad78:	b580      	push	{r7, lr}
 800ad7a:	b086      	sub	sp, #24
 800ad7c:	af00      	add	r7, sp, #0
 800ad7e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ad84:	2300      	movs	r3, #0
 800ad86:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d056      	beq.n	800ae3c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ad8e:	4b2e      	ldr	r3, [pc, #184]	; (800ae48 <xTaskPriorityDisinherit+0xd0>)
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	693a      	ldr	r2, [r7, #16]
 800ad94:	429a      	cmp	r2, r3
 800ad96:	d00a      	beq.n	800adae <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800ad98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad9c:	f383 8811 	msr	BASEPRI, r3
 800ada0:	f3bf 8f6f 	isb	sy
 800ada4:	f3bf 8f4f 	dsb	sy
 800ada8:	60fb      	str	r3, [r7, #12]
}
 800adaa:	bf00      	nop
 800adac:	e7fe      	b.n	800adac <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800adae:	693b      	ldr	r3, [r7, #16]
 800adb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d10a      	bne.n	800adcc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800adb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adba:	f383 8811 	msr	BASEPRI, r3
 800adbe:	f3bf 8f6f 	isb	sy
 800adc2:	f3bf 8f4f 	dsb	sy
 800adc6:	60bb      	str	r3, [r7, #8]
}
 800adc8:	bf00      	nop
 800adca:	e7fe      	b.n	800adca <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800adcc:	693b      	ldr	r3, [r7, #16]
 800adce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800add0:	1e5a      	subs	r2, r3, #1
 800add2:	693b      	ldr	r3, [r7, #16]
 800add4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800add6:	693b      	ldr	r3, [r7, #16]
 800add8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800adda:	693b      	ldr	r3, [r7, #16]
 800addc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800adde:	429a      	cmp	r2, r3
 800ade0:	d02c      	beq.n	800ae3c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ade2:	693b      	ldr	r3, [r7, #16]
 800ade4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d128      	bne.n	800ae3c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800adea:	693b      	ldr	r3, [r7, #16]
 800adec:	3304      	adds	r3, #4
 800adee:	4618      	mov	r0, r3
 800adf0:	f7fe f8e6 	bl	8008fc0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800adf4:	693b      	ldr	r3, [r7, #16]
 800adf6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800adf8:	693b      	ldr	r3, [r7, #16]
 800adfa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800adfc:	693b      	ldr	r3, [r7, #16]
 800adfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae00:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ae04:	693b      	ldr	r3, [r7, #16]
 800ae06:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ae08:	693b      	ldr	r3, [r7, #16]
 800ae0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae0c:	4b0f      	ldr	r3, [pc, #60]	; (800ae4c <xTaskPriorityDisinherit+0xd4>)
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	429a      	cmp	r2, r3
 800ae12:	d903      	bls.n	800ae1c <xTaskPriorityDisinherit+0xa4>
 800ae14:	693b      	ldr	r3, [r7, #16]
 800ae16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae18:	4a0c      	ldr	r2, [pc, #48]	; (800ae4c <xTaskPriorityDisinherit+0xd4>)
 800ae1a:	6013      	str	r3, [r2, #0]
 800ae1c:	693b      	ldr	r3, [r7, #16]
 800ae1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae20:	4613      	mov	r3, r2
 800ae22:	009b      	lsls	r3, r3, #2
 800ae24:	4413      	add	r3, r2
 800ae26:	009b      	lsls	r3, r3, #2
 800ae28:	4a09      	ldr	r2, [pc, #36]	; (800ae50 <xTaskPriorityDisinherit+0xd8>)
 800ae2a:	441a      	add	r2, r3
 800ae2c:	693b      	ldr	r3, [r7, #16]
 800ae2e:	3304      	adds	r3, #4
 800ae30:	4619      	mov	r1, r3
 800ae32:	4610      	mov	r0, r2
 800ae34:	f7fe f867 	bl	8008f06 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ae38:	2301      	movs	r3, #1
 800ae3a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ae3c:	697b      	ldr	r3, [r7, #20]
	}
 800ae3e:	4618      	mov	r0, r3
 800ae40:	3718      	adds	r7, #24
 800ae42:	46bd      	mov	sp, r7
 800ae44:	bd80      	pop	{r7, pc}
 800ae46:	bf00      	nop
 800ae48:	20001bac 	.word	0x20001bac
 800ae4c:	20002088 	.word	0x20002088
 800ae50:	20001bb0 	.word	0x20001bb0

0800ae54 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800ae54:	b580      	push	{r7, lr}
 800ae56:	b088      	sub	sp, #32
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	6078      	str	r0, [r7, #4]
 800ae5c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800ae62:	2301      	movs	r3, #1
 800ae64:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d06a      	beq.n	800af42 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800ae6c:	69bb      	ldr	r3, [r7, #24]
 800ae6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d10a      	bne.n	800ae8a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800ae74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae78:	f383 8811 	msr	BASEPRI, r3
 800ae7c:	f3bf 8f6f 	isb	sy
 800ae80:	f3bf 8f4f 	dsb	sy
 800ae84:	60fb      	str	r3, [r7, #12]
}
 800ae86:	bf00      	nop
 800ae88:	e7fe      	b.n	800ae88 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800ae8a:	69bb      	ldr	r3, [r7, #24]
 800ae8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae8e:	683a      	ldr	r2, [r7, #0]
 800ae90:	429a      	cmp	r2, r3
 800ae92:	d902      	bls.n	800ae9a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800ae94:	683b      	ldr	r3, [r7, #0]
 800ae96:	61fb      	str	r3, [r7, #28]
 800ae98:	e002      	b.n	800aea0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800ae9a:	69bb      	ldr	r3, [r7, #24]
 800ae9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae9e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800aea0:	69bb      	ldr	r3, [r7, #24]
 800aea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aea4:	69fa      	ldr	r2, [r7, #28]
 800aea6:	429a      	cmp	r2, r3
 800aea8:	d04b      	beq.n	800af42 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800aeaa:	69bb      	ldr	r3, [r7, #24]
 800aeac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aeae:	697a      	ldr	r2, [r7, #20]
 800aeb0:	429a      	cmp	r2, r3
 800aeb2:	d146      	bne.n	800af42 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800aeb4:	4b25      	ldr	r3, [pc, #148]	; (800af4c <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	69ba      	ldr	r2, [r7, #24]
 800aeba:	429a      	cmp	r2, r3
 800aebc:	d10a      	bne.n	800aed4 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800aebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aec2:	f383 8811 	msr	BASEPRI, r3
 800aec6:	f3bf 8f6f 	isb	sy
 800aeca:	f3bf 8f4f 	dsb	sy
 800aece:	60bb      	str	r3, [r7, #8]
}
 800aed0:	bf00      	nop
 800aed2:	e7fe      	b.n	800aed2 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800aed4:	69bb      	ldr	r3, [r7, #24]
 800aed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aed8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800aeda:	69bb      	ldr	r3, [r7, #24]
 800aedc:	69fa      	ldr	r2, [r7, #28]
 800aede:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800aee0:	69bb      	ldr	r3, [r7, #24]
 800aee2:	699b      	ldr	r3, [r3, #24]
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	db04      	blt.n	800aef2 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aee8:	69fb      	ldr	r3, [r7, #28]
 800aeea:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800aeee:	69bb      	ldr	r3, [r7, #24]
 800aef0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800aef2:	69bb      	ldr	r3, [r7, #24]
 800aef4:	6959      	ldr	r1, [r3, #20]
 800aef6:	693a      	ldr	r2, [r7, #16]
 800aef8:	4613      	mov	r3, r2
 800aefa:	009b      	lsls	r3, r3, #2
 800aefc:	4413      	add	r3, r2
 800aefe:	009b      	lsls	r3, r3, #2
 800af00:	4a13      	ldr	r2, [pc, #76]	; (800af50 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800af02:	4413      	add	r3, r2
 800af04:	4299      	cmp	r1, r3
 800af06:	d11c      	bne.n	800af42 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800af08:	69bb      	ldr	r3, [r7, #24]
 800af0a:	3304      	adds	r3, #4
 800af0c:	4618      	mov	r0, r3
 800af0e:	f7fe f857 	bl	8008fc0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800af12:	69bb      	ldr	r3, [r7, #24]
 800af14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af16:	4b0f      	ldr	r3, [pc, #60]	; (800af54 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	429a      	cmp	r2, r3
 800af1c:	d903      	bls.n	800af26 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800af1e:	69bb      	ldr	r3, [r7, #24]
 800af20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af22:	4a0c      	ldr	r2, [pc, #48]	; (800af54 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800af24:	6013      	str	r3, [r2, #0]
 800af26:	69bb      	ldr	r3, [r7, #24]
 800af28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af2a:	4613      	mov	r3, r2
 800af2c:	009b      	lsls	r3, r3, #2
 800af2e:	4413      	add	r3, r2
 800af30:	009b      	lsls	r3, r3, #2
 800af32:	4a07      	ldr	r2, [pc, #28]	; (800af50 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800af34:	441a      	add	r2, r3
 800af36:	69bb      	ldr	r3, [r7, #24]
 800af38:	3304      	adds	r3, #4
 800af3a:	4619      	mov	r1, r3
 800af3c:	4610      	mov	r0, r2
 800af3e:	f7fd ffe2 	bl	8008f06 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800af42:	bf00      	nop
 800af44:	3720      	adds	r7, #32
 800af46:	46bd      	mov	sp, r7
 800af48:	bd80      	pop	{r7, pc}
 800af4a:	bf00      	nop
 800af4c:	20001bac 	.word	0x20001bac
 800af50:	20001bb0 	.word	0x20001bb0
 800af54:	20002088 	.word	0x20002088

0800af58 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800af58:	b480      	push	{r7}
 800af5a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800af5c:	4b07      	ldr	r3, [pc, #28]	; (800af7c <pvTaskIncrementMutexHeldCount+0x24>)
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	2b00      	cmp	r3, #0
 800af62:	d004      	beq.n	800af6e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800af64:	4b05      	ldr	r3, [pc, #20]	; (800af7c <pvTaskIncrementMutexHeldCount+0x24>)
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800af6a:	3201      	adds	r2, #1
 800af6c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800af6e:	4b03      	ldr	r3, [pc, #12]	; (800af7c <pvTaskIncrementMutexHeldCount+0x24>)
 800af70:	681b      	ldr	r3, [r3, #0]
	}
 800af72:	4618      	mov	r0, r3
 800af74:	46bd      	mov	sp, r7
 800af76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af7a:	4770      	bx	lr
 800af7c:	20001bac 	.word	0x20001bac

0800af80 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800af80:	b580      	push	{r7, lr}
 800af82:	b084      	sub	sp, #16
 800af84:	af00      	add	r7, sp, #0
 800af86:	6078      	str	r0, [r7, #4]
 800af88:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800af8a:	4b21      	ldr	r3, [pc, #132]	; (800b010 <prvAddCurrentTaskToDelayedList+0x90>)
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800af90:	4b20      	ldr	r3, [pc, #128]	; (800b014 <prvAddCurrentTaskToDelayedList+0x94>)
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	3304      	adds	r3, #4
 800af96:	4618      	mov	r0, r3
 800af98:	f7fe f812 	bl	8008fc0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afa2:	d10a      	bne.n	800afba <prvAddCurrentTaskToDelayedList+0x3a>
 800afa4:	683b      	ldr	r3, [r7, #0]
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d007      	beq.n	800afba <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800afaa:	4b1a      	ldr	r3, [pc, #104]	; (800b014 <prvAddCurrentTaskToDelayedList+0x94>)
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	3304      	adds	r3, #4
 800afb0:	4619      	mov	r1, r3
 800afb2:	4819      	ldr	r0, [pc, #100]	; (800b018 <prvAddCurrentTaskToDelayedList+0x98>)
 800afb4:	f7fd ffa7 	bl	8008f06 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800afb8:	e026      	b.n	800b008 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800afba:	68fa      	ldr	r2, [r7, #12]
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	4413      	add	r3, r2
 800afc0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800afc2:	4b14      	ldr	r3, [pc, #80]	; (800b014 <prvAddCurrentTaskToDelayedList+0x94>)
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	68ba      	ldr	r2, [r7, #8]
 800afc8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800afca:	68ba      	ldr	r2, [r7, #8]
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	429a      	cmp	r2, r3
 800afd0:	d209      	bcs.n	800afe6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800afd2:	4b12      	ldr	r3, [pc, #72]	; (800b01c <prvAddCurrentTaskToDelayedList+0x9c>)
 800afd4:	681a      	ldr	r2, [r3, #0]
 800afd6:	4b0f      	ldr	r3, [pc, #60]	; (800b014 <prvAddCurrentTaskToDelayedList+0x94>)
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	3304      	adds	r3, #4
 800afdc:	4619      	mov	r1, r3
 800afde:	4610      	mov	r0, r2
 800afe0:	f7fd ffb5 	bl	8008f4e <vListInsert>
}
 800afe4:	e010      	b.n	800b008 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800afe6:	4b0e      	ldr	r3, [pc, #56]	; (800b020 <prvAddCurrentTaskToDelayedList+0xa0>)
 800afe8:	681a      	ldr	r2, [r3, #0]
 800afea:	4b0a      	ldr	r3, [pc, #40]	; (800b014 <prvAddCurrentTaskToDelayedList+0x94>)
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	3304      	adds	r3, #4
 800aff0:	4619      	mov	r1, r3
 800aff2:	4610      	mov	r0, r2
 800aff4:	f7fd ffab 	bl	8008f4e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800aff8:	4b0a      	ldr	r3, [pc, #40]	; (800b024 <prvAddCurrentTaskToDelayedList+0xa4>)
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	68ba      	ldr	r2, [r7, #8]
 800affe:	429a      	cmp	r2, r3
 800b000:	d202      	bcs.n	800b008 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b002:	4a08      	ldr	r2, [pc, #32]	; (800b024 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b004:	68bb      	ldr	r3, [r7, #8]
 800b006:	6013      	str	r3, [r2, #0]
}
 800b008:	bf00      	nop
 800b00a:	3710      	adds	r7, #16
 800b00c:	46bd      	mov	sp, r7
 800b00e:	bd80      	pop	{r7, pc}
 800b010:	20002084 	.word	0x20002084
 800b014:	20001bac 	.word	0x20001bac
 800b018:	2000206c 	.word	0x2000206c
 800b01c:	2000203c 	.word	0x2000203c
 800b020:	20002038 	.word	0x20002038
 800b024:	200020a0 	.word	0x200020a0

0800b028 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b028:	b580      	push	{r7, lr}
 800b02a:	b08a      	sub	sp, #40	; 0x28
 800b02c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b02e:	2300      	movs	r3, #0
 800b030:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b032:	f000 fba1 	bl	800b778 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b036:	4b1c      	ldr	r3, [pc, #112]	; (800b0a8 <xTimerCreateTimerTask+0x80>)
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d021      	beq.n	800b082 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b03e:	2300      	movs	r3, #0
 800b040:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b042:	2300      	movs	r3, #0
 800b044:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b046:	1d3a      	adds	r2, r7, #4
 800b048:	f107 0108 	add.w	r1, r7, #8
 800b04c:	f107 030c 	add.w	r3, r7, #12
 800b050:	4618      	mov	r0, r3
 800b052:	f7fd ff11 	bl	8008e78 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b056:	6879      	ldr	r1, [r7, #4]
 800b058:	68bb      	ldr	r3, [r7, #8]
 800b05a:	68fa      	ldr	r2, [r7, #12]
 800b05c:	9202      	str	r2, [sp, #8]
 800b05e:	9301      	str	r3, [sp, #4]
 800b060:	2302      	movs	r3, #2
 800b062:	9300      	str	r3, [sp, #0]
 800b064:	2300      	movs	r3, #0
 800b066:	460a      	mov	r2, r1
 800b068:	4910      	ldr	r1, [pc, #64]	; (800b0ac <xTimerCreateTimerTask+0x84>)
 800b06a:	4811      	ldr	r0, [pc, #68]	; (800b0b0 <xTimerCreateTimerTask+0x88>)
 800b06c:	f7fe ffe0 	bl	800a030 <xTaskCreateStatic>
 800b070:	4603      	mov	r3, r0
 800b072:	4a10      	ldr	r2, [pc, #64]	; (800b0b4 <xTimerCreateTimerTask+0x8c>)
 800b074:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b076:	4b0f      	ldr	r3, [pc, #60]	; (800b0b4 <xTimerCreateTimerTask+0x8c>)
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d001      	beq.n	800b082 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b07e:	2301      	movs	r3, #1
 800b080:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b082:	697b      	ldr	r3, [r7, #20]
 800b084:	2b00      	cmp	r3, #0
 800b086:	d10a      	bne.n	800b09e <xTimerCreateTimerTask+0x76>
	__asm volatile
 800b088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b08c:	f383 8811 	msr	BASEPRI, r3
 800b090:	f3bf 8f6f 	isb	sy
 800b094:	f3bf 8f4f 	dsb	sy
 800b098:	613b      	str	r3, [r7, #16]
}
 800b09a:	bf00      	nop
 800b09c:	e7fe      	b.n	800b09c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b09e:	697b      	ldr	r3, [r7, #20]
}
 800b0a0:	4618      	mov	r0, r3
 800b0a2:	3718      	adds	r7, #24
 800b0a4:	46bd      	mov	sp, r7
 800b0a6:	bd80      	pop	{r7, pc}
 800b0a8:	200020dc 	.word	0x200020dc
 800b0ac:	0800d928 	.word	0x0800d928
 800b0b0:	0800b321 	.word	0x0800b321
 800b0b4:	200020e0 	.word	0x200020e0

0800b0b8 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800b0b8:	b580      	push	{r7, lr}
 800b0ba:	b088      	sub	sp, #32
 800b0bc:	af02      	add	r7, sp, #8
 800b0be:	60f8      	str	r0, [r7, #12]
 800b0c0:	60b9      	str	r1, [r7, #8]
 800b0c2:	607a      	str	r2, [r7, #4]
 800b0c4:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800b0c6:	202c      	movs	r0, #44	; 0x2c
 800b0c8:	f000 fe06 	bl	800bcd8 <pvPortMalloc>
 800b0cc:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800b0ce:	697b      	ldr	r3, [r7, #20]
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d00d      	beq.n	800b0f0 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800b0d4:	697b      	ldr	r3, [r7, #20]
 800b0d6:	2200      	movs	r2, #0
 800b0d8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800b0dc:	697b      	ldr	r3, [r7, #20]
 800b0de:	9301      	str	r3, [sp, #4]
 800b0e0:	6a3b      	ldr	r3, [r7, #32]
 800b0e2:	9300      	str	r3, [sp, #0]
 800b0e4:	683b      	ldr	r3, [r7, #0]
 800b0e6:	687a      	ldr	r2, [r7, #4]
 800b0e8:	68b9      	ldr	r1, [r7, #8]
 800b0ea:	68f8      	ldr	r0, [r7, #12]
 800b0ec:	f000 f843 	bl	800b176 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800b0f0:	697b      	ldr	r3, [r7, #20]
	}
 800b0f2:	4618      	mov	r0, r3
 800b0f4:	3718      	adds	r7, #24
 800b0f6:	46bd      	mov	sp, r7
 800b0f8:	bd80      	pop	{r7, pc}

0800b0fa <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800b0fa:	b580      	push	{r7, lr}
 800b0fc:	b08a      	sub	sp, #40	; 0x28
 800b0fe:	af02      	add	r7, sp, #8
 800b100:	60f8      	str	r0, [r7, #12]
 800b102:	60b9      	str	r1, [r7, #8]
 800b104:	607a      	str	r2, [r7, #4]
 800b106:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800b108:	232c      	movs	r3, #44	; 0x2c
 800b10a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800b10c:	693b      	ldr	r3, [r7, #16]
 800b10e:	2b2c      	cmp	r3, #44	; 0x2c
 800b110:	d00a      	beq.n	800b128 <xTimerCreateStatic+0x2e>
	__asm volatile
 800b112:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b116:	f383 8811 	msr	BASEPRI, r3
 800b11a:	f3bf 8f6f 	isb	sy
 800b11e:	f3bf 8f4f 	dsb	sy
 800b122:	61bb      	str	r3, [r7, #24]
}
 800b124:	bf00      	nop
 800b126:	e7fe      	b.n	800b126 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b128:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800b12a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d10a      	bne.n	800b146 <xTimerCreateStatic+0x4c>
	__asm volatile
 800b130:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b134:	f383 8811 	msr	BASEPRI, r3
 800b138:	f3bf 8f6f 	isb	sy
 800b13c:	f3bf 8f4f 	dsb	sy
 800b140:	617b      	str	r3, [r7, #20]
}
 800b142:	bf00      	nop
 800b144:	e7fe      	b.n	800b144 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800b146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b148:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800b14a:	69fb      	ldr	r3, [r7, #28]
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d00d      	beq.n	800b16c <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800b150:	69fb      	ldr	r3, [r7, #28]
 800b152:	2202      	movs	r2, #2
 800b154:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800b158:	69fb      	ldr	r3, [r7, #28]
 800b15a:	9301      	str	r3, [sp, #4]
 800b15c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b15e:	9300      	str	r3, [sp, #0]
 800b160:	683b      	ldr	r3, [r7, #0]
 800b162:	687a      	ldr	r2, [r7, #4]
 800b164:	68b9      	ldr	r1, [r7, #8]
 800b166:	68f8      	ldr	r0, [r7, #12]
 800b168:	f000 f805 	bl	800b176 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800b16c:	69fb      	ldr	r3, [r7, #28]
	}
 800b16e:	4618      	mov	r0, r3
 800b170:	3720      	adds	r7, #32
 800b172:	46bd      	mov	sp, r7
 800b174:	bd80      	pop	{r7, pc}

0800b176 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800b176:	b580      	push	{r7, lr}
 800b178:	b086      	sub	sp, #24
 800b17a:	af00      	add	r7, sp, #0
 800b17c:	60f8      	str	r0, [r7, #12]
 800b17e:	60b9      	str	r1, [r7, #8]
 800b180:	607a      	str	r2, [r7, #4]
 800b182:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800b184:	68bb      	ldr	r3, [r7, #8]
 800b186:	2b00      	cmp	r3, #0
 800b188:	d10a      	bne.n	800b1a0 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800b18a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b18e:	f383 8811 	msr	BASEPRI, r3
 800b192:	f3bf 8f6f 	isb	sy
 800b196:	f3bf 8f4f 	dsb	sy
 800b19a:	617b      	str	r3, [r7, #20]
}
 800b19c:	bf00      	nop
 800b19e:	e7fe      	b.n	800b19e <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800b1a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d01e      	beq.n	800b1e4 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800b1a6:	f000 fae7 	bl	800b778 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800b1aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1ac:	68fa      	ldr	r2, [r7, #12]
 800b1ae:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800b1b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1b2:	68ba      	ldr	r2, [r7, #8]
 800b1b4:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800b1b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1b8:	683a      	ldr	r2, [r7, #0]
 800b1ba:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800b1bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1be:	6a3a      	ldr	r2, [r7, #32]
 800b1c0:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800b1c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1c4:	3304      	adds	r3, #4
 800b1c6:	4618      	mov	r0, r3
 800b1c8:	f7fd fe90 	bl	8008eec <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d008      	beq.n	800b1e4 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800b1d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b1d8:	f043 0304 	orr.w	r3, r3, #4
 800b1dc:	b2da      	uxtb	r2, r3
 800b1de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1e0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800b1e4:	bf00      	nop
 800b1e6:	3718      	adds	r7, #24
 800b1e8:	46bd      	mov	sp, r7
 800b1ea:	bd80      	pop	{r7, pc}

0800b1ec <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b1ec:	b580      	push	{r7, lr}
 800b1ee:	b08a      	sub	sp, #40	; 0x28
 800b1f0:	af00      	add	r7, sp, #0
 800b1f2:	60f8      	str	r0, [r7, #12]
 800b1f4:	60b9      	str	r1, [r7, #8]
 800b1f6:	607a      	str	r2, [r7, #4]
 800b1f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b1fa:	2300      	movs	r3, #0
 800b1fc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	2b00      	cmp	r3, #0
 800b202:	d10a      	bne.n	800b21a <xTimerGenericCommand+0x2e>
	__asm volatile
 800b204:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b208:	f383 8811 	msr	BASEPRI, r3
 800b20c:	f3bf 8f6f 	isb	sy
 800b210:	f3bf 8f4f 	dsb	sy
 800b214:	623b      	str	r3, [r7, #32]
}
 800b216:	bf00      	nop
 800b218:	e7fe      	b.n	800b218 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b21a:	4b1a      	ldr	r3, [pc, #104]	; (800b284 <xTimerGenericCommand+0x98>)
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d02a      	beq.n	800b278 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b222:	68bb      	ldr	r3, [r7, #8]
 800b224:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b22e:	68bb      	ldr	r3, [r7, #8]
 800b230:	2b05      	cmp	r3, #5
 800b232:	dc18      	bgt.n	800b266 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b234:	f7ff fd1a 	bl	800ac6c <xTaskGetSchedulerState>
 800b238:	4603      	mov	r3, r0
 800b23a:	2b02      	cmp	r3, #2
 800b23c:	d109      	bne.n	800b252 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b23e:	4b11      	ldr	r3, [pc, #68]	; (800b284 <xTimerGenericCommand+0x98>)
 800b240:	6818      	ldr	r0, [r3, #0]
 800b242:	f107 0110 	add.w	r1, r7, #16
 800b246:	2300      	movs	r3, #0
 800b248:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b24a:	f7fe f88b 	bl	8009364 <xQueueGenericSend>
 800b24e:	6278      	str	r0, [r7, #36]	; 0x24
 800b250:	e012      	b.n	800b278 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b252:	4b0c      	ldr	r3, [pc, #48]	; (800b284 <xTimerGenericCommand+0x98>)
 800b254:	6818      	ldr	r0, [r3, #0]
 800b256:	f107 0110 	add.w	r1, r7, #16
 800b25a:	2300      	movs	r3, #0
 800b25c:	2200      	movs	r2, #0
 800b25e:	f7fe f881 	bl	8009364 <xQueueGenericSend>
 800b262:	6278      	str	r0, [r7, #36]	; 0x24
 800b264:	e008      	b.n	800b278 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b266:	4b07      	ldr	r3, [pc, #28]	; (800b284 <xTimerGenericCommand+0x98>)
 800b268:	6818      	ldr	r0, [r3, #0]
 800b26a:	f107 0110 	add.w	r1, r7, #16
 800b26e:	2300      	movs	r3, #0
 800b270:	683a      	ldr	r2, [r7, #0]
 800b272:	f7fe f975 	bl	8009560 <xQueueGenericSendFromISR>
 800b276:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b27a:	4618      	mov	r0, r3
 800b27c:	3728      	adds	r7, #40	; 0x28
 800b27e:	46bd      	mov	sp, r7
 800b280:	bd80      	pop	{r7, pc}
 800b282:	bf00      	nop
 800b284:	200020dc 	.word	0x200020dc

0800b288 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b288:	b580      	push	{r7, lr}
 800b28a:	b088      	sub	sp, #32
 800b28c:	af02      	add	r7, sp, #8
 800b28e:	6078      	str	r0, [r7, #4]
 800b290:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b292:	4b22      	ldr	r3, [pc, #136]	; (800b31c <prvProcessExpiredTimer+0x94>)
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	68db      	ldr	r3, [r3, #12]
 800b298:	68db      	ldr	r3, [r3, #12]
 800b29a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b29c:	697b      	ldr	r3, [r7, #20]
 800b29e:	3304      	adds	r3, #4
 800b2a0:	4618      	mov	r0, r3
 800b2a2:	f7fd fe8d 	bl	8008fc0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b2a6:	697b      	ldr	r3, [r7, #20]
 800b2a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b2ac:	f003 0304 	and.w	r3, r3, #4
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d022      	beq.n	800b2fa <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b2b4:	697b      	ldr	r3, [r7, #20]
 800b2b6:	699a      	ldr	r2, [r3, #24]
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	18d1      	adds	r1, r2, r3
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	683a      	ldr	r2, [r7, #0]
 800b2c0:	6978      	ldr	r0, [r7, #20]
 800b2c2:	f000 f8d1 	bl	800b468 <prvInsertTimerInActiveList>
 800b2c6:	4603      	mov	r3, r0
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d01f      	beq.n	800b30c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b2cc:	2300      	movs	r3, #0
 800b2ce:	9300      	str	r3, [sp, #0]
 800b2d0:	2300      	movs	r3, #0
 800b2d2:	687a      	ldr	r2, [r7, #4]
 800b2d4:	2100      	movs	r1, #0
 800b2d6:	6978      	ldr	r0, [r7, #20]
 800b2d8:	f7ff ff88 	bl	800b1ec <xTimerGenericCommand>
 800b2dc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b2de:	693b      	ldr	r3, [r7, #16]
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d113      	bne.n	800b30c <prvProcessExpiredTimer+0x84>
	__asm volatile
 800b2e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2e8:	f383 8811 	msr	BASEPRI, r3
 800b2ec:	f3bf 8f6f 	isb	sy
 800b2f0:	f3bf 8f4f 	dsb	sy
 800b2f4:	60fb      	str	r3, [r7, #12]
}
 800b2f6:	bf00      	nop
 800b2f8:	e7fe      	b.n	800b2f8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b2fa:	697b      	ldr	r3, [r7, #20]
 800b2fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b300:	f023 0301 	bic.w	r3, r3, #1
 800b304:	b2da      	uxtb	r2, r3
 800b306:	697b      	ldr	r3, [r7, #20]
 800b308:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b30c:	697b      	ldr	r3, [r7, #20]
 800b30e:	6a1b      	ldr	r3, [r3, #32]
 800b310:	6978      	ldr	r0, [r7, #20]
 800b312:	4798      	blx	r3
}
 800b314:	bf00      	nop
 800b316:	3718      	adds	r7, #24
 800b318:	46bd      	mov	sp, r7
 800b31a:	bd80      	pop	{r7, pc}
 800b31c:	200020d4 	.word	0x200020d4

0800b320 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b320:	b580      	push	{r7, lr}
 800b322:	b084      	sub	sp, #16
 800b324:	af00      	add	r7, sp, #0
 800b326:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b328:	f107 0308 	add.w	r3, r7, #8
 800b32c:	4618      	mov	r0, r3
 800b32e:	f000 f857 	bl	800b3e0 <prvGetNextExpireTime>
 800b332:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b334:	68bb      	ldr	r3, [r7, #8]
 800b336:	4619      	mov	r1, r3
 800b338:	68f8      	ldr	r0, [r7, #12]
 800b33a:	f000 f803 	bl	800b344 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b33e:	f000 f8d5 	bl	800b4ec <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b342:	e7f1      	b.n	800b328 <prvTimerTask+0x8>

0800b344 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b344:	b580      	push	{r7, lr}
 800b346:	b084      	sub	sp, #16
 800b348:	af00      	add	r7, sp, #0
 800b34a:	6078      	str	r0, [r7, #4]
 800b34c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b34e:	f7ff f8ab 	bl	800a4a8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b352:	f107 0308 	add.w	r3, r7, #8
 800b356:	4618      	mov	r0, r3
 800b358:	f000 f866 	bl	800b428 <prvSampleTimeNow>
 800b35c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b35e:	68bb      	ldr	r3, [r7, #8]
 800b360:	2b00      	cmp	r3, #0
 800b362:	d130      	bne.n	800b3c6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b364:	683b      	ldr	r3, [r7, #0]
 800b366:	2b00      	cmp	r3, #0
 800b368:	d10a      	bne.n	800b380 <prvProcessTimerOrBlockTask+0x3c>
 800b36a:	687a      	ldr	r2, [r7, #4]
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	429a      	cmp	r2, r3
 800b370:	d806      	bhi.n	800b380 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b372:	f7ff f8a7 	bl	800a4c4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b376:	68f9      	ldr	r1, [r7, #12]
 800b378:	6878      	ldr	r0, [r7, #4]
 800b37a:	f7ff ff85 	bl	800b288 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b37e:	e024      	b.n	800b3ca <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b380:	683b      	ldr	r3, [r7, #0]
 800b382:	2b00      	cmp	r3, #0
 800b384:	d008      	beq.n	800b398 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b386:	4b13      	ldr	r3, [pc, #76]	; (800b3d4 <prvProcessTimerOrBlockTask+0x90>)
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d101      	bne.n	800b394 <prvProcessTimerOrBlockTask+0x50>
 800b390:	2301      	movs	r3, #1
 800b392:	e000      	b.n	800b396 <prvProcessTimerOrBlockTask+0x52>
 800b394:	2300      	movs	r3, #0
 800b396:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b398:	4b0f      	ldr	r3, [pc, #60]	; (800b3d8 <prvProcessTimerOrBlockTask+0x94>)
 800b39a:	6818      	ldr	r0, [r3, #0]
 800b39c:	687a      	ldr	r2, [r7, #4]
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	1ad3      	subs	r3, r2, r3
 800b3a2:	683a      	ldr	r2, [r7, #0]
 800b3a4:	4619      	mov	r1, r3
 800b3a6:	f7fe fe0f 	bl	8009fc8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b3aa:	f7ff f88b 	bl	800a4c4 <xTaskResumeAll>
 800b3ae:	4603      	mov	r3, r0
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d10a      	bne.n	800b3ca <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b3b4:	4b09      	ldr	r3, [pc, #36]	; (800b3dc <prvProcessTimerOrBlockTask+0x98>)
 800b3b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b3ba:	601a      	str	r2, [r3, #0]
 800b3bc:	f3bf 8f4f 	dsb	sy
 800b3c0:	f3bf 8f6f 	isb	sy
}
 800b3c4:	e001      	b.n	800b3ca <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b3c6:	f7ff f87d 	bl	800a4c4 <xTaskResumeAll>
}
 800b3ca:	bf00      	nop
 800b3cc:	3710      	adds	r7, #16
 800b3ce:	46bd      	mov	sp, r7
 800b3d0:	bd80      	pop	{r7, pc}
 800b3d2:	bf00      	nop
 800b3d4:	200020d8 	.word	0x200020d8
 800b3d8:	200020dc 	.word	0x200020dc
 800b3dc:	e000ed04 	.word	0xe000ed04

0800b3e0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b3e0:	b480      	push	{r7}
 800b3e2:	b085      	sub	sp, #20
 800b3e4:	af00      	add	r7, sp, #0
 800b3e6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b3e8:	4b0e      	ldr	r3, [pc, #56]	; (800b424 <prvGetNextExpireTime+0x44>)
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d101      	bne.n	800b3f6 <prvGetNextExpireTime+0x16>
 800b3f2:	2201      	movs	r2, #1
 800b3f4:	e000      	b.n	800b3f8 <prvGetNextExpireTime+0x18>
 800b3f6:	2200      	movs	r2, #0
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	2b00      	cmp	r3, #0
 800b402:	d105      	bne.n	800b410 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b404:	4b07      	ldr	r3, [pc, #28]	; (800b424 <prvGetNextExpireTime+0x44>)
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	68db      	ldr	r3, [r3, #12]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	60fb      	str	r3, [r7, #12]
 800b40e:	e001      	b.n	800b414 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b410:	2300      	movs	r3, #0
 800b412:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b414:	68fb      	ldr	r3, [r7, #12]
}
 800b416:	4618      	mov	r0, r3
 800b418:	3714      	adds	r7, #20
 800b41a:	46bd      	mov	sp, r7
 800b41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b420:	4770      	bx	lr
 800b422:	bf00      	nop
 800b424:	200020d4 	.word	0x200020d4

0800b428 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b428:	b580      	push	{r7, lr}
 800b42a:	b084      	sub	sp, #16
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b430:	f7ff f8e6 	bl	800a600 <xTaskGetTickCount>
 800b434:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b436:	4b0b      	ldr	r3, [pc, #44]	; (800b464 <prvSampleTimeNow+0x3c>)
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	68fa      	ldr	r2, [r7, #12]
 800b43c:	429a      	cmp	r2, r3
 800b43e:	d205      	bcs.n	800b44c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b440:	f000 f936 	bl	800b6b0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	2201      	movs	r2, #1
 800b448:	601a      	str	r2, [r3, #0]
 800b44a:	e002      	b.n	800b452 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	2200      	movs	r2, #0
 800b450:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b452:	4a04      	ldr	r2, [pc, #16]	; (800b464 <prvSampleTimeNow+0x3c>)
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b458:	68fb      	ldr	r3, [r7, #12]
}
 800b45a:	4618      	mov	r0, r3
 800b45c:	3710      	adds	r7, #16
 800b45e:	46bd      	mov	sp, r7
 800b460:	bd80      	pop	{r7, pc}
 800b462:	bf00      	nop
 800b464:	200020e4 	.word	0x200020e4

0800b468 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b468:	b580      	push	{r7, lr}
 800b46a:	b086      	sub	sp, #24
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	60f8      	str	r0, [r7, #12]
 800b470:	60b9      	str	r1, [r7, #8]
 800b472:	607a      	str	r2, [r7, #4]
 800b474:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b476:	2300      	movs	r3, #0
 800b478:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	68ba      	ldr	r2, [r7, #8]
 800b47e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	68fa      	ldr	r2, [r7, #12]
 800b484:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b486:	68ba      	ldr	r2, [r7, #8]
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	429a      	cmp	r2, r3
 800b48c:	d812      	bhi.n	800b4b4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b48e:	687a      	ldr	r2, [r7, #4]
 800b490:	683b      	ldr	r3, [r7, #0]
 800b492:	1ad2      	subs	r2, r2, r3
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	699b      	ldr	r3, [r3, #24]
 800b498:	429a      	cmp	r2, r3
 800b49a:	d302      	bcc.n	800b4a2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b49c:	2301      	movs	r3, #1
 800b49e:	617b      	str	r3, [r7, #20]
 800b4a0:	e01b      	b.n	800b4da <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b4a2:	4b10      	ldr	r3, [pc, #64]	; (800b4e4 <prvInsertTimerInActiveList+0x7c>)
 800b4a4:	681a      	ldr	r2, [r3, #0]
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	3304      	adds	r3, #4
 800b4aa:	4619      	mov	r1, r3
 800b4ac:	4610      	mov	r0, r2
 800b4ae:	f7fd fd4e 	bl	8008f4e <vListInsert>
 800b4b2:	e012      	b.n	800b4da <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b4b4:	687a      	ldr	r2, [r7, #4]
 800b4b6:	683b      	ldr	r3, [r7, #0]
 800b4b8:	429a      	cmp	r2, r3
 800b4ba:	d206      	bcs.n	800b4ca <prvInsertTimerInActiveList+0x62>
 800b4bc:	68ba      	ldr	r2, [r7, #8]
 800b4be:	683b      	ldr	r3, [r7, #0]
 800b4c0:	429a      	cmp	r2, r3
 800b4c2:	d302      	bcc.n	800b4ca <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b4c4:	2301      	movs	r3, #1
 800b4c6:	617b      	str	r3, [r7, #20]
 800b4c8:	e007      	b.n	800b4da <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b4ca:	4b07      	ldr	r3, [pc, #28]	; (800b4e8 <prvInsertTimerInActiveList+0x80>)
 800b4cc:	681a      	ldr	r2, [r3, #0]
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	3304      	adds	r3, #4
 800b4d2:	4619      	mov	r1, r3
 800b4d4:	4610      	mov	r0, r2
 800b4d6:	f7fd fd3a 	bl	8008f4e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b4da:	697b      	ldr	r3, [r7, #20]
}
 800b4dc:	4618      	mov	r0, r3
 800b4de:	3718      	adds	r7, #24
 800b4e0:	46bd      	mov	sp, r7
 800b4e2:	bd80      	pop	{r7, pc}
 800b4e4:	200020d8 	.word	0x200020d8
 800b4e8:	200020d4 	.word	0x200020d4

0800b4ec <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b4ec:	b580      	push	{r7, lr}
 800b4ee:	b08e      	sub	sp, #56	; 0x38
 800b4f0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b4f2:	e0ca      	b.n	800b68a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	da18      	bge.n	800b52c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b4fa:	1d3b      	adds	r3, r7, #4
 800b4fc:	3304      	adds	r3, #4
 800b4fe:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b502:	2b00      	cmp	r3, #0
 800b504:	d10a      	bne.n	800b51c <prvProcessReceivedCommands+0x30>
	__asm volatile
 800b506:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b50a:	f383 8811 	msr	BASEPRI, r3
 800b50e:	f3bf 8f6f 	isb	sy
 800b512:	f3bf 8f4f 	dsb	sy
 800b516:	61fb      	str	r3, [r7, #28]
}
 800b518:	bf00      	nop
 800b51a:	e7fe      	b.n	800b51a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b51c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b522:	6850      	ldr	r0, [r2, #4]
 800b524:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b526:	6892      	ldr	r2, [r2, #8]
 800b528:	4611      	mov	r1, r2
 800b52a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	2b00      	cmp	r3, #0
 800b530:	f2c0 80aa 	blt.w	800b688 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b53a:	695b      	ldr	r3, [r3, #20]
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d004      	beq.n	800b54a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b542:	3304      	adds	r3, #4
 800b544:	4618      	mov	r0, r3
 800b546:	f7fd fd3b 	bl	8008fc0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b54a:	463b      	mov	r3, r7
 800b54c:	4618      	mov	r0, r3
 800b54e:	f7ff ff6b 	bl	800b428 <prvSampleTimeNow>
 800b552:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	2b09      	cmp	r3, #9
 800b558:	f200 8097 	bhi.w	800b68a <prvProcessReceivedCommands+0x19e>
 800b55c:	a201      	add	r2, pc, #4	; (adr r2, 800b564 <prvProcessReceivedCommands+0x78>)
 800b55e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b562:	bf00      	nop
 800b564:	0800b58d 	.word	0x0800b58d
 800b568:	0800b58d 	.word	0x0800b58d
 800b56c:	0800b58d 	.word	0x0800b58d
 800b570:	0800b601 	.word	0x0800b601
 800b574:	0800b615 	.word	0x0800b615
 800b578:	0800b65f 	.word	0x0800b65f
 800b57c:	0800b58d 	.word	0x0800b58d
 800b580:	0800b58d 	.word	0x0800b58d
 800b584:	0800b601 	.word	0x0800b601
 800b588:	0800b615 	.word	0x0800b615
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b58c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b58e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b592:	f043 0301 	orr.w	r3, r3, #1
 800b596:	b2da      	uxtb	r2, r3
 800b598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b59a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b59e:	68ba      	ldr	r2, [r7, #8]
 800b5a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5a2:	699b      	ldr	r3, [r3, #24]
 800b5a4:	18d1      	adds	r1, r2, r3
 800b5a6:	68bb      	ldr	r3, [r7, #8]
 800b5a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b5aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b5ac:	f7ff ff5c 	bl	800b468 <prvInsertTimerInActiveList>
 800b5b0:	4603      	mov	r3, r0
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d069      	beq.n	800b68a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b5b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5b8:	6a1b      	ldr	r3, [r3, #32]
 800b5ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b5bc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b5be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b5c4:	f003 0304 	and.w	r3, r3, #4
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d05e      	beq.n	800b68a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b5cc:	68ba      	ldr	r2, [r7, #8]
 800b5ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5d0:	699b      	ldr	r3, [r3, #24]
 800b5d2:	441a      	add	r2, r3
 800b5d4:	2300      	movs	r3, #0
 800b5d6:	9300      	str	r3, [sp, #0]
 800b5d8:	2300      	movs	r3, #0
 800b5da:	2100      	movs	r1, #0
 800b5dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b5de:	f7ff fe05 	bl	800b1ec <xTimerGenericCommand>
 800b5e2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b5e4:	6a3b      	ldr	r3, [r7, #32]
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d14f      	bne.n	800b68a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800b5ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5ee:	f383 8811 	msr	BASEPRI, r3
 800b5f2:	f3bf 8f6f 	isb	sy
 800b5f6:	f3bf 8f4f 	dsb	sy
 800b5fa:	61bb      	str	r3, [r7, #24]
}
 800b5fc:	bf00      	nop
 800b5fe:	e7fe      	b.n	800b5fe <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b602:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b606:	f023 0301 	bic.w	r3, r3, #1
 800b60a:	b2da      	uxtb	r2, r3
 800b60c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b60e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800b612:	e03a      	b.n	800b68a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b616:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b61a:	f043 0301 	orr.w	r3, r3, #1
 800b61e:	b2da      	uxtb	r2, r3
 800b620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b622:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b626:	68ba      	ldr	r2, [r7, #8]
 800b628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b62a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b62c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b62e:	699b      	ldr	r3, [r3, #24]
 800b630:	2b00      	cmp	r3, #0
 800b632:	d10a      	bne.n	800b64a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800b634:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b638:	f383 8811 	msr	BASEPRI, r3
 800b63c:	f3bf 8f6f 	isb	sy
 800b640:	f3bf 8f4f 	dsb	sy
 800b644:	617b      	str	r3, [r7, #20]
}
 800b646:	bf00      	nop
 800b648:	e7fe      	b.n	800b648 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b64a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b64c:	699a      	ldr	r2, [r3, #24]
 800b64e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b650:	18d1      	adds	r1, r2, r3
 800b652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b654:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b656:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b658:	f7ff ff06 	bl	800b468 <prvInsertTimerInActiveList>
					break;
 800b65c:	e015      	b.n	800b68a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b65e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b660:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b664:	f003 0302 	and.w	r3, r3, #2
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d103      	bne.n	800b674 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800b66c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b66e:	f000 fbff 	bl	800be70 <vPortFree>
 800b672:	e00a      	b.n	800b68a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b676:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b67a:	f023 0301 	bic.w	r3, r3, #1
 800b67e:	b2da      	uxtb	r2, r3
 800b680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b682:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b686:	e000      	b.n	800b68a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800b688:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b68a:	4b08      	ldr	r3, [pc, #32]	; (800b6ac <prvProcessReceivedCommands+0x1c0>)
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	1d39      	adds	r1, r7, #4
 800b690:	2200      	movs	r2, #0
 800b692:	4618      	mov	r0, r3
 800b694:	f7fe f88c 	bl	80097b0 <xQueueReceive>
 800b698:	4603      	mov	r3, r0
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	f47f af2a 	bne.w	800b4f4 <prvProcessReceivedCommands+0x8>
	}
}
 800b6a0:	bf00      	nop
 800b6a2:	bf00      	nop
 800b6a4:	3730      	adds	r7, #48	; 0x30
 800b6a6:	46bd      	mov	sp, r7
 800b6a8:	bd80      	pop	{r7, pc}
 800b6aa:	bf00      	nop
 800b6ac:	200020dc 	.word	0x200020dc

0800b6b0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b6b0:	b580      	push	{r7, lr}
 800b6b2:	b088      	sub	sp, #32
 800b6b4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b6b6:	e048      	b.n	800b74a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b6b8:	4b2d      	ldr	r3, [pc, #180]	; (800b770 <prvSwitchTimerLists+0xc0>)
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	68db      	ldr	r3, [r3, #12]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b6c2:	4b2b      	ldr	r3, [pc, #172]	; (800b770 <prvSwitchTimerLists+0xc0>)
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	68db      	ldr	r3, [r3, #12]
 800b6c8:	68db      	ldr	r3, [r3, #12]
 800b6ca:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	3304      	adds	r3, #4
 800b6d0:	4618      	mov	r0, r3
 800b6d2:	f7fd fc75 	bl	8008fc0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	6a1b      	ldr	r3, [r3, #32]
 800b6da:	68f8      	ldr	r0, [r7, #12]
 800b6dc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b6e4:	f003 0304 	and.w	r3, r3, #4
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d02e      	beq.n	800b74a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	699b      	ldr	r3, [r3, #24]
 800b6f0:	693a      	ldr	r2, [r7, #16]
 800b6f2:	4413      	add	r3, r2
 800b6f4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b6f6:	68ba      	ldr	r2, [r7, #8]
 800b6f8:	693b      	ldr	r3, [r7, #16]
 800b6fa:	429a      	cmp	r2, r3
 800b6fc:	d90e      	bls.n	800b71c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	68ba      	ldr	r2, [r7, #8]
 800b702:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	68fa      	ldr	r2, [r7, #12]
 800b708:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b70a:	4b19      	ldr	r3, [pc, #100]	; (800b770 <prvSwitchTimerLists+0xc0>)
 800b70c:	681a      	ldr	r2, [r3, #0]
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	3304      	adds	r3, #4
 800b712:	4619      	mov	r1, r3
 800b714:	4610      	mov	r0, r2
 800b716:	f7fd fc1a 	bl	8008f4e <vListInsert>
 800b71a:	e016      	b.n	800b74a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b71c:	2300      	movs	r3, #0
 800b71e:	9300      	str	r3, [sp, #0]
 800b720:	2300      	movs	r3, #0
 800b722:	693a      	ldr	r2, [r7, #16]
 800b724:	2100      	movs	r1, #0
 800b726:	68f8      	ldr	r0, [r7, #12]
 800b728:	f7ff fd60 	bl	800b1ec <xTimerGenericCommand>
 800b72c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	2b00      	cmp	r3, #0
 800b732:	d10a      	bne.n	800b74a <prvSwitchTimerLists+0x9a>
	__asm volatile
 800b734:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b738:	f383 8811 	msr	BASEPRI, r3
 800b73c:	f3bf 8f6f 	isb	sy
 800b740:	f3bf 8f4f 	dsb	sy
 800b744:	603b      	str	r3, [r7, #0]
}
 800b746:	bf00      	nop
 800b748:	e7fe      	b.n	800b748 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b74a:	4b09      	ldr	r3, [pc, #36]	; (800b770 <prvSwitchTimerLists+0xc0>)
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	2b00      	cmp	r3, #0
 800b752:	d1b1      	bne.n	800b6b8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b754:	4b06      	ldr	r3, [pc, #24]	; (800b770 <prvSwitchTimerLists+0xc0>)
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b75a:	4b06      	ldr	r3, [pc, #24]	; (800b774 <prvSwitchTimerLists+0xc4>)
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	4a04      	ldr	r2, [pc, #16]	; (800b770 <prvSwitchTimerLists+0xc0>)
 800b760:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b762:	4a04      	ldr	r2, [pc, #16]	; (800b774 <prvSwitchTimerLists+0xc4>)
 800b764:	697b      	ldr	r3, [r7, #20]
 800b766:	6013      	str	r3, [r2, #0]
}
 800b768:	bf00      	nop
 800b76a:	3718      	adds	r7, #24
 800b76c:	46bd      	mov	sp, r7
 800b76e:	bd80      	pop	{r7, pc}
 800b770:	200020d4 	.word	0x200020d4
 800b774:	200020d8 	.word	0x200020d8

0800b778 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b778:	b580      	push	{r7, lr}
 800b77a:	b082      	sub	sp, #8
 800b77c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b77e:	f000 f989 	bl	800ba94 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b782:	4b15      	ldr	r3, [pc, #84]	; (800b7d8 <prvCheckForValidListAndQueue+0x60>)
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	2b00      	cmp	r3, #0
 800b788:	d120      	bne.n	800b7cc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b78a:	4814      	ldr	r0, [pc, #80]	; (800b7dc <prvCheckForValidListAndQueue+0x64>)
 800b78c:	f7fd fb8e 	bl	8008eac <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b790:	4813      	ldr	r0, [pc, #76]	; (800b7e0 <prvCheckForValidListAndQueue+0x68>)
 800b792:	f7fd fb8b 	bl	8008eac <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b796:	4b13      	ldr	r3, [pc, #76]	; (800b7e4 <prvCheckForValidListAndQueue+0x6c>)
 800b798:	4a10      	ldr	r2, [pc, #64]	; (800b7dc <prvCheckForValidListAndQueue+0x64>)
 800b79a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b79c:	4b12      	ldr	r3, [pc, #72]	; (800b7e8 <prvCheckForValidListAndQueue+0x70>)
 800b79e:	4a10      	ldr	r2, [pc, #64]	; (800b7e0 <prvCheckForValidListAndQueue+0x68>)
 800b7a0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b7a2:	2300      	movs	r3, #0
 800b7a4:	9300      	str	r3, [sp, #0]
 800b7a6:	4b11      	ldr	r3, [pc, #68]	; (800b7ec <prvCheckForValidListAndQueue+0x74>)
 800b7a8:	4a11      	ldr	r2, [pc, #68]	; (800b7f0 <prvCheckForValidListAndQueue+0x78>)
 800b7aa:	2110      	movs	r1, #16
 800b7ac:	200a      	movs	r0, #10
 800b7ae:	f7fd fc99 	bl	80090e4 <xQueueGenericCreateStatic>
 800b7b2:	4603      	mov	r3, r0
 800b7b4:	4a08      	ldr	r2, [pc, #32]	; (800b7d8 <prvCheckForValidListAndQueue+0x60>)
 800b7b6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b7b8:	4b07      	ldr	r3, [pc, #28]	; (800b7d8 <prvCheckForValidListAndQueue+0x60>)
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d005      	beq.n	800b7cc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b7c0:	4b05      	ldr	r3, [pc, #20]	; (800b7d8 <prvCheckForValidListAndQueue+0x60>)
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	490b      	ldr	r1, [pc, #44]	; (800b7f4 <prvCheckForValidListAndQueue+0x7c>)
 800b7c6:	4618      	mov	r0, r3
 800b7c8:	f7fe fbaa 	bl	8009f20 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b7cc:	f000 f992 	bl	800baf4 <vPortExitCritical>
}
 800b7d0:	bf00      	nop
 800b7d2:	46bd      	mov	sp, r7
 800b7d4:	bd80      	pop	{r7, pc}
 800b7d6:	bf00      	nop
 800b7d8:	200020dc 	.word	0x200020dc
 800b7dc:	200020ac 	.word	0x200020ac
 800b7e0:	200020c0 	.word	0x200020c0
 800b7e4:	200020d4 	.word	0x200020d4
 800b7e8:	200020d8 	.word	0x200020d8
 800b7ec:	20002188 	.word	0x20002188
 800b7f0:	200020e8 	.word	0x200020e8
 800b7f4:	0800d930 	.word	0x0800d930

0800b7f8 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800b7f8:	b580      	push	{r7, lr}
 800b7fa:	b086      	sub	sp, #24
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	2b00      	cmp	r3, #0
 800b808:	d10a      	bne.n	800b820 <pvTimerGetTimerID+0x28>
	__asm volatile
 800b80a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b80e:	f383 8811 	msr	BASEPRI, r3
 800b812:	f3bf 8f6f 	isb	sy
 800b816:	f3bf 8f4f 	dsb	sy
 800b81a:	60fb      	str	r3, [r7, #12]
}
 800b81c:	bf00      	nop
 800b81e:	e7fe      	b.n	800b81e <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 800b820:	f000 f938 	bl	800ba94 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800b824:	697b      	ldr	r3, [r7, #20]
 800b826:	69db      	ldr	r3, [r3, #28]
 800b828:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800b82a:	f000 f963 	bl	800baf4 <vPortExitCritical>

	return pvReturn;
 800b82e:	693b      	ldr	r3, [r7, #16]
}
 800b830:	4618      	mov	r0, r3
 800b832:	3718      	adds	r7, #24
 800b834:	46bd      	mov	sp, r7
 800b836:	bd80      	pop	{r7, pc}

0800b838 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b838:	b480      	push	{r7}
 800b83a:	b085      	sub	sp, #20
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	60f8      	str	r0, [r7, #12]
 800b840:	60b9      	str	r1, [r7, #8]
 800b842:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	3b04      	subs	r3, #4
 800b848:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b850:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	3b04      	subs	r3, #4
 800b856:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b858:	68bb      	ldr	r3, [r7, #8]
 800b85a:	f023 0201 	bic.w	r2, r3, #1
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b862:	68fb      	ldr	r3, [r7, #12]
 800b864:	3b04      	subs	r3, #4
 800b866:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b868:	4a0c      	ldr	r2, [pc, #48]	; (800b89c <pxPortInitialiseStack+0x64>)
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	3b14      	subs	r3, #20
 800b872:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b874:	687a      	ldr	r2, [r7, #4]
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	3b04      	subs	r3, #4
 800b87e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	f06f 0202 	mvn.w	r2, #2
 800b886:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	3b20      	subs	r3, #32
 800b88c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b88e:	68fb      	ldr	r3, [r7, #12]
}
 800b890:	4618      	mov	r0, r3
 800b892:	3714      	adds	r7, #20
 800b894:	46bd      	mov	sp, r7
 800b896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b89a:	4770      	bx	lr
 800b89c:	0800b8a1 	.word	0x0800b8a1

0800b8a0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b8a0:	b480      	push	{r7}
 800b8a2:	b085      	sub	sp, #20
 800b8a4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b8a6:	2300      	movs	r3, #0
 800b8a8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b8aa:	4b12      	ldr	r3, [pc, #72]	; (800b8f4 <prvTaskExitError+0x54>)
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b8b2:	d00a      	beq.n	800b8ca <prvTaskExitError+0x2a>
	__asm volatile
 800b8b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8b8:	f383 8811 	msr	BASEPRI, r3
 800b8bc:	f3bf 8f6f 	isb	sy
 800b8c0:	f3bf 8f4f 	dsb	sy
 800b8c4:	60fb      	str	r3, [r7, #12]
}
 800b8c6:	bf00      	nop
 800b8c8:	e7fe      	b.n	800b8c8 <prvTaskExitError+0x28>
	__asm volatile
 800b8ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8ce:	f383 8811 	msr	BASEPRI, r3
 800b8d2:	f3bf 8f6f 	isb	sy
 800b8d6:	f3bf 8f4f 	dsb	sy
 800b8da:	60bb      	str	r3, [r7, #8]
}
 800b8dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b8de:	bf00      	nop
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d0fc      	beq.n	800b8e0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b8e6:	bf00      	nop
 800b8e8:	bf00      	nop
 800b8ea:	3714      	adds	r7, #20
 800b8ec:	46bd      	mov	sp, r7
 800b8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f2:	4770      	bx	lr
 800b8f4:	20000020 	.word	0x20000020
	...

0800b900 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b900:	4b07      	ldr	r3, [pc, #28]	; (800b920 <pxCurrentTCBConst2>)
 800b902:	6819      	ldr	r1, [r3, #0]
 800b904:	6808      	ldr	r0, [r1, #0]
 800b906:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b90a:	f380 8809 	msr	PSP, r0
 800b90e:	f3bf 8f6f 	isb	sy
 800b912:	f04f 0000 	mov.w	r0, #0
 800b916:	f380 8811 	msr	BASEPRI, r0
 800b91a:	4770      	bx	lr
 800b91c:	f3af 8000 	nop.w

0800b920 <pxCurrentTCBConst2>:
 800b920:	20001bac 	.word	0x20001bac
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b924:	bf00      	nop
 800b926:	bf00      	nop

0800b928 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b928:	4808      	ldr	r0, [pc, #32]	; (800b94c <prvPortStartFirstTask+0x24>)
 800b92a:	6800      	ldr	r0, [r0, #0]
 800b92c:	6800      	ldr	r0, [r0, #0]
 800b92e:	f380 8808 	msr	MSP, r0
 800b932:	f04f 0000 	mov.w	r0, #0
 800b936:	f380 8814 	msr	CONTROL, r0
 800b93a:	b662      	cpsie	i
 800b93c:	b661      	cpsie	f
 800b93e:	f3bf 8f4f 	dsb	sy
 800b942:	f3bf 8f6f 	isb	sy
 800b946:	df00      	svc	0
 800b948:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b94a:	bf00      	nop
 800b94c:	e000ed08 	.word	0xe000ed08

0800b950 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b950:	b580      	push	{r7, lr}
 800b952:	b086      	sub	sp, #24
 800b954:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b956:	4b46      	ldr	r3, [pc, #280]	; (800ba70 <xPortStartScheduler+0x120>)
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	4a46      	ldr	r2, [pc, #280]	; (800ba74 <xPortStartScheduler+0x124>)
 800b95c:	4293      	cmp	r3, r2
 800b95e:	d10a      	bne.n	800b976 <xPortStartScheduler+0x26>
	__asm volatile
 800b960:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b964:	f383 8811 	msr	BASEPRI, r3
 800b968:	f3bf 8f6f 	isb	sy
 800b96c:	f3bf 8f4f 	dsb	sy
 800b970:	613b      	str	r3, [r7, #16]
}
 800b972:	bf00      	nop
 800b974:	e7fe      	b.n	800b974 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b976:	4b3e      	ldr	r3, [pc, #248]	; (800ba70 <xPortStartScheduler+0x120>)
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	4a3f      	ldr	r2, [pc, #252]	; (800ba78 <xPortStartScheduler+0x128>)
 800b97c:	4293      	cmp	r3, r2
 800b97e:	d10a      	bne.n	800b996 <xPortStartScheduler+0x46>
	__asm volatile
 800b980:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b984:	f383 8811 	msr	BASEPRI, r3
 800b988:	f3bf 8f6f 	isb	sy
 800b98c:	f3bf 8f4f 	dsb	sy
 800b990:	60fb      	str	r3, [r7, #12]
}
 800b992:	bf00      	nop
 800b994:	e7fe      	b.n	800b994 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b996:	4b39      	ldr	r3, [pc, #228]	; (800ba7c <xPortStartScheduler+0x12c>)
 800b998:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b99a:	697b      	ldr	r3, [r7, #20]
 800b99c:	781b      	ldrb	r3, [r3, #0]
 800b99e:	b2db      	uxtb	r3, r3
 800b9a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b9a2:	697b      	ldr	r3, [r7, #20]
 800b9a4:	22ff      	movs	r2, #255	; 0xff
 800b9a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b9a8:	697b      	ldr	r3, [r7, #20]
 800b9aa:	781b      	ldrb	r3, [r3, #0]
 800b9ac:	b2db      	uxtb	r3, r3
 800b9ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b9b0:	78fb      	ldrb	r3, [r7, #3]
 800b9b2:	b2db      	uxtb	r3, r3
 800b9b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b9b8:	b2da      	uxtb	r2, r3
 800b9ba:	4b31      	ldr	r3, [pc, #196]	; (800ba80 <xPortStartScheduler+0x130>)
 800b9bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b9be:	4b31      	ldr	r3, [pc, #196]	; (800ba84 <xPortStartScheduler+0x134>)
 800b9c0:	2207      	movs	r2, #7
 800b9c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b9c4:	e009      	b.n	800b9da <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800b9c6:	4b2f      	ldr	r3, [pc, #188]	; (800ba84 <xPortStartScheduler+0x134>)
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	3b01      	subs	r3, #1
 800b9cc:	4a2d      	ldr	r2, [pc, #180]	; (800ba84 <xPortStartScheduler+0x134>)
 800b9ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b9d0:	78fb      	ldrb	r3, [r7, #3]
 800b9d2:	b2db      	uxtb	r3, r3
 800b9d4:	005b      	lsls	r3, r3, #1
 800b9d6:	b2db      	uxtb	r3, r3
 800b9d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b9da:	78fb      	ldrb	r3, [r7, #3]
 800b9dc:	b2db      	uxtb	r3, r3
 800b9de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b9e2:	2b80      	cmp	r3, #128	; 0x80
 800b9e4:	d0ef      	beq.n	800b9c6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b9e6:	4b27      	ldr	r3, [pc, #156]	; (800ba84 <xPortStartScheduler+0x134>)
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	f1c3 0307 	rsb	r3, r3, #7
 800b9ee:	2b04      	cmp	r3, #4
 800b9f0:	d00a      	beq.n	800ba08 <xPortStartScheduler+0xb8>
	__asm volatile
 800b9f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9f6:	f383 8811 	msr	BASEPRI, r3
 800b9fa:	f3bf 8f6f 	isb	sy
 800b9fe:	f3bf 8f4f 	dsb	sy
 800ba02:	60bb      	str	r3, [r7, #8]
}
 800ba04:	bf00      	nop
 800ba06:	e7fe      	b.n	800ba06 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ba08:	4b1e      	ldr	r3, [pc, #120]	; (800ba84 <xPortStartScheduler+0x134>)
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	021b      	lsls	r3, r3, #8
 800ba0e:	4a1d      	ldr	r2, [pc, #116]	; (800ba84 <xPortStartScheduler+0x134>)
 800ba10:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ba12:	4b1c      	ldr	r3, [pc, #112]	; (800ba84 <xPortStartScheduler+0x134>)
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ba1a:	4a1a      	ldr	r2, [pc, #104]	; (800ba84 <xPortStartScheduler+0x134>)
 800ba1c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	b2da      	uxtb	r2, r3
 800ba22:	697b      	ldr	r3, [r7, #20]
 800ba24:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ba26:	4b18      	ldr	r3, [pc, #96]	; (800ba88 <xPortStartScheduler+0x138>)
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	4a17      	ldr	r2, [pc, #92]	; (800ba88 <xPortStartScheduler+0x138>)
 800ba2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ba30:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ba32:	4b15      	ldr	r3, [pc, #84]	; (800ba88 <xPortStartScheduler+0x138>)
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	4a14      	ldr	r2, [pc, #80]	; (800ba88 <xPortStartScheduler+0x138>)
 800ba38:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ba3c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ba3e:	f000 f8dd 	bl	800bbfc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ba42:	4b12      	ldr	r3, [pc, #72]	; (800ba8c <xPortStartScheduler+0x13c>)
 800ba44:	2200      	movs	r2, #0
 800ba46:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ba48:	f000 f8fc 	bl	800bc44 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ba4c:	4b10      	ldr	r3, [pc, #64]	; (800ba90 <xPortStartScheduler+0x140>)
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	4a0f      	ldr	r2, [pc, #60]	; (800ba90 <xPortStartScheduler+0x140>)
 800ba52:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ba56:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ba58:	f7ff ff66 	bl	800b928 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ba5c:	f7fe fe9a 	bl	800a794 <vTaskSwitchContext>
	prvTaskExitError();
 800ba60:	f7ff ff1e 	bl	800b8a0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ba64:	2300      	movs	r3, #0
}
 800ba66:	4618      	mov	r0, r3
 800ba68:	3718      	adds	r7, #24
 800ba6a:	46bd      	mov	sp, r7
 800ba6c:	bd80      	pop	{r7, pc}
 800ba6e:	bf00      	nop
 800ba70:	e000ed00 	.word	0xe000ed00
 800ba74:	410fc271 	.word	0x410fc271
 800ba78:	410fc270 	.word	0x410fc270
 800ba7c:	e000e400 	.word	0xe000e400
 800ba80:	200021d8 	.word	0x200021d8
 800ba84:	200021dc 	.word	0x200021dc
 800ba88:	e000ed20 	.word	0xe000ed20
 800ba8c:	20000020 	.word	0x20000020
 800ba90:	e000ef34 	.word	0xe000ef34

0800ba94 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ba94:	b480      	push	{r7}
 800ba96:	b083      	sub	sp, #12
 800ba98:	af00      	add	r7, sp, #0
	__asm volatile
 800ba9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba9e:	f383 8811 	msr	BASEPRI, r3
 800baa2:	f3bf 8f6f 	isb	sy
 800baa6:	f3bf 8f4f 	dsb	sy
 800baaa:	607b      	str	r3, [r7, #4]
}
 800baac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800baae:	4b0f      	ldr	r3, [pc, #60]	; (800baec <vPortEnterCritical+0x58>)
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	3301      	adds	r3, #1
 800bab4:	4a0d      	ldr	r2, [pc, #52]	; (800baec <vPortEnterCritical+0x58>)
 800bab6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800bab8:	4b0c      	ldr	r3, [pc, #48]	; (800baec <vPortEnterCritical+0x58>)
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	2b01      	cmp	r3, #1
 800babe:	d10f      	bne.n	800bae0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800bac0:	4b0b      	ldr	r3, [pc, #44]	; (800baf0 <vPortEnterCritical+0x5c>)
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	b2db      	uxtb	r3, r3
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d00a      	beq.n	800bae0 <vPortEnterCritical+0x4c>
	__asm volatile
 800baca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bace:	f383 8811 	msr	BASEPRI, r3
 800bad2:	f3bf 8f6f 	isb	sy
 800bad6:	f3bf 8f4f 	dsb	sy
 800bada:	603b      	str	r3, [r7, #0]
}
 800badc:	bf00      	nop
 800bade:	e7fe      	b.n	800bade <vPortEnterCritical+0x4a>
	}
}
 800bae0:	bf00      	nop
 800bae2:	370c      	adds	r7, #12
 800bae4:	46bd      	mov	sp, r7
 800bae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baea:	4770      	bx	lr
 800baec:	20000020 	.word	0x20000020
 800baf0:	e000ed04 	.word	0xe000ed04

0800baf4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800baf4:	b480      	push	{r7}
 800baf6:	b083      	sub	sp, #12
 800baf8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800bafa:	4b12      	ldr	r3, [pc, #72]	; (800bb44 <vPortExitCritical+0x50>)
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d10a      	bne.n	800bb18 <vPortExitCritical+0x24>
	__asm volatile
 800bb02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb06:	f383 8811 	msr	BASEPRI, r3
 800bb0a:	f3bf 8f6f 	isb	sy
 800bb0e:	f3bf 8f4f 	dsb	sy
 800bb12:	607b      	str	r3, [r7, #4]
}
 800bb14:	bf00      	nop
 800bb16:	e7fe      	b.n	800bb16 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800bb18:	4b0a      	ldr	r3, [pc, #40]	; (800bb44 <vPortExitCritical+0x50>)
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	3b01      	subs	r3, #1
 800bb1e:	4a09      	ldr	r2, [pc, #36]	; (800bb44 <vPortExitCritical+0x50>)
 800bb20:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800bb22:	4b08      	ldr	r3, [pc, #32]	; (800bb44 <vPortExitCritical+0x50>)
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d105      	bne.n	800bb36 <vPortExitCritical+0x42>
 800bb2a:	2300      	movs	r3, #0
 800bb2c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bb2e:	683b      	ldr	r3, [r7, #0]
 800bb30:	f383 8811 	msr	BASEPRI, r3
}
 800bb34:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800bb36:	bf00      	nop
 800bb38:	370c      	adds	r7, #12
 800bb3a:	46bd      	mov	sp, r7
 800bb3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb40:	4770      	bx	lr
 800bb42:	bf00      	nop
 800bb44:	20000020 	.word	0x20000020
	...

0800bb50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800bb50:	f3ef 8009 	mrs	r0, PSP
 800bb54:	f3bf 8f6f 	isb	sy
 800bb58:	4b15      	ldr	r3, [pc, #84]	; (800bbb0 <pxCurrentTCBConst>)
 800bb5a:	681a      	ldr	r2, [r3, #0]
 800bb5c:	f01e 0f10 	tst.w	lr, #16
 800bb60:	bf08      	it	eq
 800bb62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800bb66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb6a:	6010      	str	r0, [r2, #0]
 800bb6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800bb70:	f04f 0050 	mov.w	r0, #80	; 0x50
 800bb74:	f380 8811 	msr	BASEPRI, r0
 800bb78:	f3bf 8f4f 	dsb	sy
 800bb7c:	f3bf 8f6f 	isb	sy
 800bb80:	f7fe fe08 	bl	800a794 <vTaskSwitchContext>
 800bb84:	f04f 0000 	mov.w	r0, #0
 800bb88:	f380 8811 	msr	BASEPRI, r0
 800bb8c:	bc09      	pop	{r0, r3}
 800bb8e:	6819      	ldr	r1, [r3, #0]
 800bb90:	6808      	ldr	r0, [r1, #0]
 800bb92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb96:	f01e 0f10 	tst.w	lr, #16
 800bb9a:	bf08      	it	eq
 800bb9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800bba0:	f380 8809 	msr	PSP, r0
 800bba4:	f3bf 8f6f 	isb	sy
 800bba8:	4770      	bx	lr
 800bbaa:	bf00      	nop
 800bbac:	f3af 8000 	nop.w

0800bbb0 <pxCurrentTCBConst>:
 800bbb0:	20001bac 	.word	0x20001bac
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800bbb4:	bf00      	nop
 800bbb6:	bf00      	nop

0800bbb8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800bbb8:	b580      	push	{r7, lr}
 800bbba:	b082      	sub	sp, #8
 800bbbc:	af00      	add	r7, sp, #0
	__asm volatile
 800bbbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbc2:	f383 8811 	msr	BASEPRI, r3
 800bbc6:	f3bf 8f6f 	isb	sy
 800bbca:	f3bf 8f4f 	dsb	sy
 800bbce:	607b      	str	r3, [r7, #4]
}
 800bbd0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800bbd2:	f7fe fd25 	bl	800a620 <xTaskIncrementTick>
 800bbd6:	4603      	mov	r3, r0
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d003      	beq.n	800bbe4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bbdc:	4b06      	ldr	r3, [pc, #24]	; (800bbf8 <xPortSysTickHandler+0x40>)
 800bbde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bbe2:	601a      	str	r2, [r3, #0]
 800bbe4:	2300      	movs	r3, #0
 800bbe6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bbe8:	683b      	ldr	r3, [r7, #0]
 800bbea:	f383 8811 	msr	BASEPRI, r3
}
 800bbee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800bbf0:	bf00      	nop
 800bbf2:	3708      	adds	r7, #8
 800bbf4:	46bd      	mov	sp, r7
 800bbf6:	bd80      	pop	{r7, pc}
 800bbf8:	e000ed04 	.word	0xe000ed04

0800bbfc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800bbfc:	b480      	push	{r7}
 800bbfe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800bc00:	4b0b      	ldr	r3, [pc, #44]	; (800bc30 <vPortSetupTimerInterrupt+0x34>)
 800bc02:	2200      	movs	r2, #0
 800bc04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bc06:	4b0b      	ldr	r3, [pc, #44]	; (800bc34 <vPortSetupTimerInterrupt+0x38>)
 800bc08:	2200      	movs	r2, #0
 800bc0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800bc0c:	4b0a      	ldr	r3, [pc, #40]	; (800bc38 <vPortSetupTimerInterrupt+0x3c>)
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	4a0a      	ldr	r2, [pc, #40]	; (800bc3c <vPortSetupTimerInterrupt+0x40>)
 800bc12:	fba2 2303 	umull	r2, r3, r2, r3
 800bc16:	099b      	lsrs	r3, r3, #6
 800bc18:	4a09      	ldr	r2, [pc, #36]	; (800bc40 <vPortSetupTimerInterrupt+0x44>)
 800bc1a:	3b01      	subs	r3, #1
 800bc1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800bc1e:	4b04      	ldr	r3, [pc, #16]	; (800bc30 <vPortSetupTimerInterrupt+0x34>)
 800bc20:	2207      	movs	r2, #7
 800bc22:	601a      	str	r2, [r3, #0]
}
 800bc24:	bf00      	nop
 800bc26:	46bd      	mov	sp, r7
 800bc28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc2c:	4770      	bx	lr
 800bc2e:	bf00      	nop
 800bc30:	e000e010 	.word	0xe000e010
 800bc34:	e000e018 	.word	0xe000e018
 800bc38:	20000000 	.word	0x20000000
 800bc3c:	10624dd3 	.word	0x10624dd3
 800bc40:	e000e014 	.word	0xe000e014

0800bc44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800bc44:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800bc54 <vPortEnableVFP+0x10>
 800bc48:	6801      	ldr	r1, [r0, #0]
 800bc4a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800bc4e:	6001      	str	r1, [r0, #0]
 800bc50:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800bc52:	bf00      	nop
 800bc54:	e000ed88 	.word	0xe000ed88

0800bc58 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800bc58:	b480      	push	{r7}
 800bc5a:	b085      	sub	sp, #20
 800bc5c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800bc5e:	f3ef 8305 	mrs	r3, IPSR
 800bc62:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	2b0f      	cmp	r3, #15
 800bc68:	d914      	bls.n	800bc94 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800bc6a:	4a17      	ldr	r2, [pc, #92]	; (800bcc8 <vPortValidateInterruptPriority+0x70>)
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	4413      	add	r3, r2
 800bc70:	781b      	ldrb	r3, [r3, #0]
 800bc72:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800bc74:	4b15      	ldr	r3, [pc, #84]	; (800bccc <vPortValidateInterruptPriority+0x74>)
 800bc76:	781b      	ldrb	r3, [r3, #0]
 800bc78:	7afa      	ldrb	r2, [r7, #11]
 800bc7a:	429a      	cmp	r2, r3
 800bc7c:	d20a      	bcs.n	800bc94 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800bc7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc82:	f383 8811 	msr	BASEPRI, r3
 800bc86:	f3bf 8f6f 	isb	sy
 800bc8a:	f3bf 8f4f 	dsb	sy
 800bc8e:	607b      	str	r3, [r7, #4]
}
 800bc90:	bf00      	nop
 800bc92:	e7fe      	b.n	800bc92 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800bc94:	4b0e      	ldr	r3, [pc, #56]	; (800bcd0 <vPortValidateInterruptPriority+0x78>)
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800bc9c:	4b0d      	ldr	r3, [pc, #52]	; (800bcd4 <vPortValidateInterruptPriority+0x7c>)
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	429a      	cmp	r2, r3
 800bca2:	d90a      	bls.n	800bcba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800bca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bca8:	f383 8811 	msr	BASEPRI, r3
 800bcac:	f3bf 8f6f 	isb	sy
 800bcb0:	f3bf 8f4f 	dsb	sy
 800bcb4:	603b      	str	r3, [r7, #0]
}
 800bcb6:	bf00      	nop
 800bcb8:	e7fe      	b.n	800bcb8 <vPortValidateInterruptPriority+0x60>
	}
 800bcba:	bf00      	nop
 800bcbc:	3714      	adds	r7, #20
 800bcbe:	46bd      	mov	sp, r7
 800bcc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc4:	4770      	bx	lr
 800bcc6:	bf00      	nop
 800bcc8:	e000e3f0 	.word	0xe000e3f0
 800bccc:	200021d8 	.word	0x200021d8
 800bcd0:	e000ed0c 	.word	0xe000ed0c
 800bcd4:	200021dc 	.word	0x200021dc

0800bcd8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800bcd8:	b580      	push	{r7, lr}
 800bcda:	b08a      	sub	sp, #40	; 0x28
 800bcdc:	af00      	add	r7, sp, #0
 800bcde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800bce0:	2300      	movs	r3, #0
 800bce2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800bce4:	f7fe fbe0 	bl	800a4a8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800bce8:	4b5b      	ldr	r3, [pc, #364]	; (800be58 <pvPortMalloc+0x180>)
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d101      	bne.n	800bcf4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800bcf0:	f000 f920 	bl	800bf34 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800bcf4:	4b59      	ldr	r3, [pc, #356]	; (800be5c <pvPortMalloc+0x184>)
 800bcf6:	681a      	ldr	r2, [r3, #0]
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	4013      	ands	r3, r2
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	f040 8093 	bne.w	800be28 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d01d      	beq.n	800bd44 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800bd08:	2208      	movs	r2, #8
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	4413      	add	r3, r2
 800bd0e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	f003 0307 	and.w	r3, r3, #7
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d014      	beq.n	800bd44 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	f023 0307 	bic.w	r3, r3, #7
 800bd20:	3308      	adds	r3, #8
 800bd22:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	f003 0307 	and.w	r3, r3, #7
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d00a      	beq.n	800bd44 <pvPortMalloc+0x6c>
	__asm volatile
 800bd2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd32:	f383 8811 	msr	BASEPRI, r3
 800bd36:	f3bf 8f6f 	isb	sy
 800bd3a:	f3bf 8f4f 	dsb	sy
 800bd3e:	617b      	str	r3, [r7, #20]
}
 800bd40:	bf00      	nop
 800bd42:	e7fe      	b.n	800bd42 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d06e      	beq.n	800be28 <pvPortMalloc+0x150>
 800bd4a:	4b45      	ldr	r3, [pc, #276]	; (800be60 <pvPortMalloc+0x188>)
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	687a      	ldr	r2, [r7, #4]
 800bd50:	429a      	cmp	r2, r3
 800bd52:	d869      	bhi.n	800be28 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800bd54:	4b43      	ldr	r3, [pc, #268]	; (800be64 <pvPortMalloc+0x18c>)
 800bd56:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800bd58:	4b42      	ldr	r3, [pc, #264]	; (800be64 <pvPortMalloc+0x18c>)
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bd5e:	e004      	b.n	800bd6a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800bd60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd62:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800bd64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bd6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd6c:	685b      	ldr	r3, [r3, #4]
 800bd6e:	687a      	ldr	r2, [r7, #4]
 800bd70:	429a      	cmp	r2, r3
 800bd72:	d903      	bls.n	800bd7c <pvPortMalloc+0xa4>
 800bd74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d1f1      	bne.n	800bd60 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800bd7c:	4b36      	ldr	r3, [pc, #216]	; (800be58 <pvPortMalloc+0x180>)
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bd82:	429a      	cmp	r2, r3
 800bd84:	d050      	beq.n	800be28 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800bd86:	6a3b      	ldr	r3, [r7, #32]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	2208      	movs	r2, #8
 800bd8c:	4413      	add	r3, r2
 800bd8e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800bd90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd92:	681a      	ldr	r2, [r3, #0]
 800bd94:	6a3b      	ldr	r3, [r7, #32]
 800bd96:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800bd98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd9a:	685a      	ldr	r2, [r3, #4]
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	1ad2      	subs	r2, r2, r3
 800bda0:	2308      	movs	r3, #8
 800bda2:	005b      	lsls	r3, r3, #1
 800bda4:	429a      	cmp	r2, r3
 800bda6:	d91f      	bls.n	800bde8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800bda8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	4413      	add	r3, r2
 800bdae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bdb0:	69bb      	ldr	r3, [r7, #24]
 800bdb2:	f003 0307 	and.w	r3, r3, #7
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d00a      	beq.n	800bdd0 <pvPortMalloc+0xf8>
	__asm volatile
 800bdba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdbe:	f383 8811 	msr	BASEPRI, r3
 800bdc2:	f3bf 8f6f 	isb	sy
 800bdc6:	f3bf 8f4f 	dsb	sy
 800bdca:	613b      	str	r3, [r7, #16]
}
 800bdcc:	bf00      	nop
 800bdce:	e7fe      	b.n	800bdce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800bdd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdd2:	685a      	ldr	r2, [r3, #4]
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	1ad2      	subs	r2, r2, r3
 800bdd8:	69bb      	ldr	r3, [r7, #24]
 800bdda:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800bddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdde:	687a      	ldr	r2, [r7, #4]
 800bde0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800bde2:	69b8      	ldr	r0, [r7, #24]
 800bde4:	f000 f908 	bl	800bff8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800bde8:	4b1d      	ldr	r3, [pc, #116]	; (800be60 <pvPortMalloc+0x188>)
 800bdea:	681a      	ldr	r2, [r3, #0]
 800bdec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdee:	685b      	ldr	r3, [r3, #4]
 800bdf0:	1ad3      	subs	r3, r2, r3
 800bdf2:	4a1b      	ldr	r2, [pc, #108]	; (800be60 <pvPortMalloc+0x188>)
 800bdf4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800bdf6:	4b1a      	ldr	r3, [pc, #104]	; (800be60 <pvPortMalloc+0x188>)
 800bdf8:	681a      	ldr	r2, [r3, #0]
 800bdfa:	4b1b      	ldr	r3, [pc, #108]	; (800be68 <pvPortMalloc+0x190>)
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	429a      	cmp	r2, r3
 800be00:	d203      	bcs.n	800be0a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800be02:	4b17      	ldr	r3, [pc, #92]	; (800be60 <pvPortMalloc+0x188>)
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	4a18      	ldr	r2, [pc, #96]	; (800be68 <pvPortMalloc+0x190>)
 800be08:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800be0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be0c:	685a      	ldr	r2, [r3, #4]
 800be0e:	4b13      	ldr	r3, [pc, #76]	; (800be5c <pvPortMalloc+0x184>)
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	431a      	orrs	r2, r3
 800be14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be16:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800be18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be1a:	2200      	movs	r2, #0
 800be1c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800be1e:	4b13      	ldr	r3, [pc, #76]	; (800be6c <pvPortMalloc+0x194>)
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	3301      	adds	r3, #1
 800be24:	4a11      	ldr	r2, [pc, #68]	; (800be6c <pvPortMalloc+0x194>)
 800be26:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800be28:	f7fe fb4c 	bl	800a4c4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800be2c:	69fb      	ldr	r3, [r7, #28]
 800be2e:	f003 0307 	and.w	r3, r3, #7
 800be32:	2b00      	cmp	r3, #0
 800be34:	d00a      	beq.n	800be4c <pvPortMalloc+0x174>
	__asm volatile
 800be36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be3a:	f383 8811 	msr	BASEPRI, r3
 800be3e:	f3bf 8f6f 	isb	sy
 800be42:	f3bf 8f4f 	dsb	sy
 800be46:	60fb      	str	r3, [r7, #12]
}
 800be48:	bf00      	nop
 800be4a:	e7fe      	b.n	800be4a <pvPortMalloc+0x172>
	return pvReturn;
 800be4c:	69fb      	ldr	r3, [r7, #28]
}
 800be4e:	4618      	mov	r0, r3
 800be50:	3728      	adds	r7, #40	; 0x28
 800be52:	46bd      	mov	sp, r7
 800be54:	bd80      	pop	{r7, pc}
 800be56:	bf00      	nop
 800be58:	20005de8 	.word	0x20005de8
 800be5c:	20005dfc 	.word	0x20005dfc
 800be60:	20005dec 	.word	0x20005dec
 800be64:	20005de0 	.word	0x20005de0
 800be68:	20005df0 	.word	0x20005df0
 800be6c:	20005df4 	.word	0x20005df4

0800be70 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800be70:	b580      	push	{r7, lr}
 800be72:	b086      	sub	sp, #24
 800be74:	af00      	add	r7, sp, #0
 800be76:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d04d      	beq.n	800bf1e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800be82:	2308      	movs	r3, #8
 800be84:	425b      	negs	r3, r3
 800be86:	697a      	ldr	r2, [r7, #20]
 800be88:	4413      	add	r3, r2
 800be8a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800be8c:	697b      	ldr	r3, [r7, #20]
 800be8e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800be90:	693b      	ldr	r3, [r7, #16]
 800be92:	685a      	ldr	r2, [r3, #4]
 800be94:	4b24      	ldr	r3, [pc, #144]	; (800bf28 <vPortFree+0xb8>)
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	4013      	ands	r3, r2
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d10a      	bne.n	800beb4 <vPortFree+0x44>
	__asm volatile
 800be9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bea2:	f383 8811 	msr	BASEPRI, r3
 800bea6:	f3bf 8f6f 	isb	sy
 800beaa:	f3bf 8f4f 	dsb	sy
 800beae:	60fb      	str	r3, [r7, #12]
}
 800beb0:	bf00      	nop
 800beb2:	e7fe      	b.n	800beb2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800beb4:	693b      	ldr	r3, [r7, #16]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d00a      	beq.n	800bed2 <vPortFree+0x62>
	__asm volatile
 800bebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bec0:	f383 8811 	msr	BASEPRI, r3
 800bec4:	f3bf 8f6f 	isb	sy
 800bec8:	f3bf 8f4f 	dsb	sy
 800becc:	60bb      	str	r3, [r7, #8]
}
 800bece:	bf00      	nop
 800bed0:	e7fe      	b.n	800bed0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800bed2:	693b      	ldr	r3, [r7, #16]
 800bed4:	685a      	ldr	r2, [r3, #4]
 800bed6:	4b14      	ldr	r3, [pc, #80]	; (800bf28 <vPortFree+0xb8>)
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	4013      	ands	r3, r2
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d01e      	beq.n	800bf1e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800bee0:	693b      	ldr	r3, [r7, #16]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d11a      	bne.n	800bf1e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800bee8:	693b      	ldr	r3, [r7, #16]
 800beea:	685a      	ldr	r2, [r3, #4]
 800beec:	4b0e      	ldr	r3, [pc, #56]	; (800bf28 <vPortFree+0xb8>)
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	43db      	mvns	r3, r3
 800bef2:	401a      	ands	r2, r3
 800bef4:	693b      	ldr	r3, [r7, #16]
 800bef6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800bef8:	f7fe fad6 	bl	800a4a8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800befc:	693b      	ldr	r3, [r7, #16]
 800befe:	685a      	ldr	r2, [r3, #4]
 800bf00:	4b0a      	ldr	r3, [pc, #40]	; (800bf2c <vPortFree+0xbc>)
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	4413      	add	r3, r2
 800bf06:	4a09      	ldr	r2, [pc, #36]	; (800bf2c <vPortFree+0xbc>)
 800bf08:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800bf0a:	6938      	ldr	r0, [r7, #16]
 800bf0c:	f000 f874 	bl	800bff8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800bf10:	4b07      	ldr	r3, [pc, #28]	; (800bf30 <vPortFree+0xc0>)
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	3301      	adds	r3, #1
 800bf16:	4a06      	ldr	r2, [pc, #24]	; (800bf30 <vPortFree+0xc0>)
 800bf18:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800bf1a:	f7fe fad3 	bl	800a4c4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800bf1e:	bf00      	nop
 800bf20:	3718      	adds	r7, #24
 800bf22:	46bd      	mov	sp, r7
 800bf24:	bd80      	pop	{r7, pc}
 800bf26:	bf00      	nop
 800bf28:	20005dfc 	.word	0x20005dfc
 800bf2c:	20005dec 	.word	0x20005dec
 800bf30:	20005df8 	.word	0x20005df8

0800bf34 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800bf34:	b480      	push	{r7}
 800bf36:	b085      	sub	sp, #20
 800bf38:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800bf3a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800bf3e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800bf40:	4b27      	ldr	r3, [pc, #156]	; (800bfe0 <prvHeapInit+0xac>)
 800bf42:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	f003 0307 	and.w	r3, r3, #7
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d00c      	beq.n	800bf68 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	3307      	adds	r3, #7
 800bf52:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	f023 0307 	bic.w	r3, r3, #7
 800bf5a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800bf5c:	68ba      	ldr	r2, [r7, #8]
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	1ad3      	subs	r3, r2, r3
 800bf62:	4a1f      	ldr	r2, [pc, #124]	; (800bfe0 <prvHeapInit+0xac>)
 800bf64:	4413      	add	r3, r2
 800bf66:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800bf6c:	4a1d      	ldr	r2, [pc, #116]	; (800bfe4 <prvHeapInit+0xb0>)
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800bf72:	4b1c      	ldr	r3, [pc, #112]	; (800bfe4 <prvHeapInit+0xb0>)
 800bf74:	2200      	movs	r2, #0
 800bf76:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	68ba      	ldr	r2, [r7, #8]
 800bf7c:	4413      	add	r3, r2
 800bf7e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800bf80:	2208      	movs	r2, #8
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	1a9b      	subs	r3, r3, r2
 800bf86:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	f023 0307 	bic.w	r3, r3, #7
 800bf8e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	4a15      	ldr	r2, [pc, #84]	; (800bfe8 <prvHeapInit+0xb4>)
 800bf94:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800bf96:	4b14      	ldr	r3, [pc, #80]	; (800bfe8 <prvHeapInit+0xb4>)
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	2200      	movs	r2, #0
 800bf9c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800bf9e:	4b12      	ldr	r3, [pc, #72]	; (800bfe8 <prvHeapInit+0xb4>)
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	2200      	movs	r2, #0
 800bfa4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800bfaa:	683b      	ldr	r3, [r7, #0]
 800bfac:	68fa      	ldr	r2, [r7, #12]
 800bfae:	1ad2      	subs	r2, r2, r3
 800bfb0:	683b      	ldr	r3, [r7, #0]
 800bfb2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800bfb4:	4b0c      	ldr	r3, [pc, #48]	; (800bfe8 <prvHeapInit+0xb4>)
 800bfb6:	681a      	ldr	r2, [r3, #0]
 800bfb8:	683b      	ldr	r3, [r7, #0]
 800bfba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bfbc:	683b      	ldr	r3, [r7, #0]
 800bfbe:	685b      	ldr	r3, [r3, #4]
 800bfc0:	4a0a      	ldr	r2, [pc, #40]	; (800bfec <prvHeapInit+0xb8>)
 800bfc2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bfc4:	683b      	ldr	r3, [r7, #0]
 800bfc6:	685b      	ldr	r3, [r3, #4]
 800bfc8:	4a09      	ldr	r2, [pc, #36]	; (800bff0 <prvHeapInit+0xbc>)
 800bfca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800bfcc:	4b09      	ldr	r3, [pc, #36]	; (800bff4 <prvHeapInit+0xc0>)
 800bfce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800bfd2:	601a      	str	r2, [r3, #0]
}
 800bfd4:	bf00      	nop
 800bfd6:	3714      	adds	r7, #20
 800bfd8:	46bd      	mov	sp, r7
 800bfda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfde:	4770      	bx	lr
 800bfe0:	200021e0 	.word	0x200021e0
 800bfe4:	20005de0 	.word	0x20005de0
 800bfe8:	20005de8 	.word	0x20005de8
 800bfec:	20005df0 	.word	0x20005df0
 800bff0:	20005dec 	.word	0x20005dec
 800bff4:	20005dfc 	.word	0x20005dfc

0800bff8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800bff8:	b480      	push	{r7}
 800bffa:	b085      	sub	sp, #20
 800bffc:	af00      	add	r7, sp, #0
 800bffe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c000:	4b28      	ldr	r3, [pc, #160]	; (800c0a4 <prvInsertBlockIntoFreeList+0xac>)
 800c002:	60fb      	str	r3, [r7, #12]
 800c004:	e002      	b.n	800c00c <prvInsertBlockIntoFreeList+0x14>
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	60fb      	str	r3, [r7, #12]
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	687a      	ldr	r2, [r7, #4]
 800c012:	429a      	cmp	r2, r3
 800c014:	d8f7      	bhi.n	800c006 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	685b      	ldr	r3, [r3, #4]
 800c01e:	68ba      	ldr	r2, [r7, #8]
 800c020:	4413      	add	r3, r2
 800c022:	687a      	ldr	r2, [r7, #4]
 800c024:	429a      	cmp	r2, r3
 800c026:	d108      	bne.n	800c03a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	685a      	ldr	r2, [r3, #4]
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	685b      	ldr	r3, [r3, #4]
 800c030:	441a      	add	r2, r3
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	685b      	ldr	r3, [r3, #4]
 800c042:	68ba      	ldr	r2, [r7, #8]
 800c044:	441a      	add	r2, r3
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	429a      	cmp	r2, r3
 800c04c:	d118      	bne.n	800c080 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	681a      	ldr	r2, [r3, #0]
 800c052:	4b15      	ldr	r3, [pc, #84]	; (800c0a8 <prvInsertBlockIntoFreeList+0xb0>)
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	429a      	cmp	r2, r3
 800c058:	d00d      	beq.n	800c076 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	685a      	ldr	r2, [r3, #4]
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	685b      	ldr	r3, [r3, #4]
 800c064:	441a      	add	r2, r3
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	681a      	ldr	r2, [r3, #0]
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	601a      	str	r2, [r3, #0]
 800c074:	e008      	b.n	800c088 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c076:	4b0c      	ldr	r3, [pc, #48]	; (800c0a8 <prvInsertBlockIntoFreeList+0xb0>)
 800c078:	681a      	ldr	r2, [r3, #0]
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	601a      	str	r2, [r3, #0]
 800c07e:	e003      	b.n	800c088 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	681a      	ldr	r2, [r3, #0]
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c088:	68fa      	ldr	r2, [r7, #12]
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	429a      	cmp	r2, r3
 800c08e:	d002      	beq.n	800c096 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	687a      	ldr	r2, [r7, #4]
 800c094:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c096:	bf00      	nop
 800c098:	3714      	adds	r7, #20
 800c09a:	46bd      	mov	sp, r7
 800c09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a0:	4770      	bx	lr
 800c0a2:	bf00      	nop
 800c0a4:	20005de0 	.word	0x20005de0
 800c0a8:	20005de8 	.word	0x20005de8

0800c0ac <APP_timeoutTimerIRQHandler>:
/********************************************************************************/

#if 1 /* Software Timer IRQ Handlers */

void APP_timeoutTimerIRQHandler(void* param)
{
 800c0ac:	b480      	push	{r7}
 800c0ae:	b083      	sub	sp, #12
 800c0b0:	af00      	add	r7, sp, #0
 800c0b2:	6078      	str	r0, [r7, #4]

}
 800c0b4:	bf00      	nop
 800c0b6:	370c      	adds	r7, #12
 800c0b8:	46bd      	mov	sp, r7
 800c0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0be:	4770      	bx	lr

0800c0c0 <APP_periodicTimerIRQHandler>:

void APP_periodicTimerIRQHandler(void* param)
{
 800c0c0:	b480      	push	{r7}
 800c0c2:	b083      	sub	sp, #12
 800c0c4:	af00      	add	r7, sp, #0
 800c0c6:	6078      	str	r0, [r7, #4]

}
 800c0c8:	bf00      	nop
 800c0ca:	370c      	adds	r7, #12
 800c0cc:	46bd      	mov	sp, r7
 800c0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d2:	4770      	bx	lr

0800c0d4 <Initilialise_App>:

#endif


void Initilialise_App(void)
{
 800c0d4:	b580      	push	{r7, lr}
 800c0d6:	b084      	sub	sp, #16
 800c0d8:	af04      	add	r7, sp, #16
	/***************** Create Static Threads ******************************/

	/* Create Static TelemetryMAIN Thread */
#ifdef BSP_PROCESS_TELEMETRYMAIN

	xHandle.Process_TelemetryMAIN = xTaskCreateStatic
 800c0da:	4b63      	ldr	r3, [pc, #396]	; (800c268 <Initilialise_App+0x194>)
 800c0dc:	9302      	str	r3, [sp, #8]
 800c0de:	4b63      	ldr	r3, [pc, #396]	; (800c26c <Initilialise_App+0x198>)
 800c0e0:	9301      	str	r3, [sp, #4]
 800c0e2:	2301      	movs	r3, #1
 800c0e4:	9300      	str	r3, [sp, #0]
 800c0e6:	2301      	movs	r3, #1
 800c0e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c0ec:	4960      	ldr	r1, [pc, #384]	; (800c270 <Initilialise_App+0x19c>)
 800c0ee:	4861      	ldr	r0, [pc, #388]	; (800c274 <Initilialise_App+0x1a0>)
 800c0f0:	f7fd ff9e 	bl	800a030 <xTaskCreateStatic>
 800c0f4:	4603      	mov	r3, r0
 800c0f6:	4a60      	ldr	r2, [pc, #384]	; (800c278 <Initilialise_App+0x1a4>)
 800c0f8:	6013      	str	r3, [r2, #0]
#endif


#ifdef BSP_PROCESS_FLASH
	/* Create Static Flash Task	*/
    xHandle.Process_Flash = xTaskCreateStatic(
 800c0fa:	4b60      	ldr	r3, [pc, #384]	; (800c27c <Initilialise_App+0x1a8>)
 800c0fc:	9302      	str	r3, [sp, #8]
 800c0fe:	4b60      	ldr	r3, [pc, #384]	; (800c280 <Initilialise_App+0x1ac>)
 800c100:	9301      	str	r3, [sp, #4]
 800c102:	2303      	movs	r3, #3
 800c104:	9300      	str	r3, [sp, #0]
 800c106:	2301      	movs	r3, #1
 800c108:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c10c:	495d      	ldr	r1, [pc, #372]	; (800c284 <Initilialise_App+0x1b0>)
 800c10e:	485e      	ldr	r0, [pc, #376]	; (800c288 <Initilialise_App+0x1b4>)
 800c110:	f7fd ff8e 	bl	800a030 <xTaskCreateStatic>
 800c114:	4603      	mov	r3, r0
 800c116:	4a58      	ldr	r2, [pc, #352]	; (800c278 <Initilialise_App+0x1a4>)
 800c118:	6053      	str	r3, [r2, #4]
#endif


#ifdef BSP_PROCESS_CAN
    /* Create Static can Task	*/
    xHandle.Process_CAN = xTaskCreateStatic(
 800c11a:	4b5c      	ldr	r3, [pc, #368]	; (800c28c <Initilialise_App+0x1b8>)
 800c11c:	9302      	str	r3, [sp, #8]
 800c11e:	4b5c      	ldr	r3, [pc, #368]	; (800c290 <Initilialise_App+0x1bc>)
 800c120:	9301      	str	r3, [sp, #4]
 800c122:	2302      	movs	r3, #2
 800c124:	9300      	str	r3, [sp, #0]
 800c126:	2301      	movs	r3, #1
 800c128:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c12c:	4959      	ldr	r1, [pc, #356]	; (800c294 <Initilialise_App+0x1c0>)
 800c12e:	485a      	ldr	r0, [pc, #360]	; (800c298 <Initilialise_App+0x1c4>)
 800c130:	f7fd ff7e 	bl	800a030 <xTaskCreateStatic>
 800c134:	4603      	mov	r3, r0
 800c136:	4a50      	ldr	r2, [pc, #320]	; (800c278 <Initilialise_App+0x1a4>)
 800c138:	6093      	str	r3, [r2, #8]
#endif


#ifdef BSP_PROCESS_RTC
    /* Create Static RTC Task	*/
    xHandle.Process_RTC = xTaskCreateStatic(
 800c13a:	4b58      	ldr	r3, [pc, #352]	; (800c29c <Initilialise_App+0x1c8>)
 800c13c:	9302      	str	r3, [sp, #8]
 800c13e:	4b58      	ldr	r3, [pc, #352]	; (800c2a0 <Initilialise_App+0x1cc>)
 800c140:	9301      	str	r3, [sp, #4]
 800c142:	2304      	movs	r3, #4
 800c144:	9300      	str	r3, [sp, #0]
 800c146:	2301      	movs	r3, #1
 800c148:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c14c:	4955      	ldr	r1, [pc, #340]	; (800c2a4 <Initilialise_App+0x1d0>)
 800c14e:	4856      	ldr	r0, [pc, #344]	; (800c2a8 <Initilialise_App+0x1d4>)
 800c150:	f7fd ff6e 	bl	800a030 <xTaskCreateStatic>
 800c154:	4603      	mov	r3, r0
 800c156:	4a48      	ldr	r2, [pc, #288]	; (800c278 <Initilialise_App+0x1a4>)
 800c158:	60d3      	str	r3, [r2, #12]

#endif

#ifdef BSP_PROCESS_SDCARD
    /* Create Static sdcard Task	*/
    xHandle.Process_SDCARD = xTaskCreateStatic(
 800c15a:	4b54      	ldr	r3, [pc, #336]	; (800c2ac <Initilialise_App+0x1d8>)
 800c15c:	9302      	str	r3, [sp, #8]
 800c15e:	4b54      	ldr	r3, [pc, #336]	; (800c2b0 <Initilialise_App+0x1dc>)
 800c160:	9301      	str	r3, [sp, #4]
 800c162:	2307      	movs	r3, #7
 800c164:	9300      	str	r3, [sp, #0]
 800c166:	2301      	movs	r3, #1
 800c168:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c16c:	4951      	ldr	r1, [pc, #324]	; (800c2b4 <Initilialise_App+0x1e0>)
 800c16e:	4852      	ldr	r0, [pc, #328]	; (800c2b8 <Initilialise_App+0x1e4>)
 800c170:	f7fd ff5e 	bl	800a030 <xTaskCreateStatic>
 800c174:	4603      	mov	r3, r0
 800c176:	4a40      	ldr	r2, [pc, #256]	; (800c278 <Initilialise_App+0x1a4>)
 800c178:	6113      	str	r3, [r2, #16]

#endif

#ifdef BSP_PROCESS_WIFI
    /* Create Static wifi Task	*/
    xHandle.Process_WIFI = xTaskCreateStatic(
 800c17a:	4b50      	ldr	r3, [pc, #320]	; (800c2bc <Initilialise_App+0x1e8>)
 800c17c:	9302      	str	r3, [sp, #8]
 800c17e:	4b50      	ldr	r3, [pc, #320]	; (800c2c0 <Initilialise_App+0x1ec>)
 800c180:	9301      	str	r3, [sp, #4]
 800c182:	2306      	movs	r3, #6
 800c184:	9300      	str	r3, [sp, #0]
 800c186:	2301      	movs	r3, #1
 800c188:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c18c:	494d      	ldr	r1, [pc, #308]	; (800c2c4 <Initilialise_App+0x1f0>)
 800c18e:	484e      	ldr	r0, [pc, #312]	; (800c2c8 <Initilialise_App+0x1f4>)
 800c190:	f7fd ff4e 	bl	800a030 <xTaskCreateStatic>
 800c194:	4603      	mov	r3, r0
 800c196:	4a38      	ldr	r2, [pc, #224]	; (800c278 <Initilialise_App+0x1a4>)
 800c198:	6153      	str	r3, [r2, #20]

#endif

#ifdef BSP_PROCESS_NEXTION
    /* Create Static nextion Task	*/
    xHandle.Process_NEXTION = xTaskCreateStatic(
 800c19a:	4b4c      	ldr	r3, [pc, #304]	; (800c2cc <Initilialise_App+0x1f8>)
 800c19c:	9302      	str	r3, [sp, #8]
 800c19e:	4b4c      	ldr	r3, [pc, #304]	; (800c2d0 <Initilialise_App+0x1fc>)
 800c1a0:	9301      	str	r3, [sp, #4]
 800c1a2:	2305      	movs	r3, #5
 800c1a4:	9300      	str	r3, [sp, #0]
 800c1a6:	2301      	movs	r3, #1
 800c1a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c1ac:	4949      	ldr	r1, [pc, #292]	; (800c2d4 <Initilialise_App+0x200>)
 800c1ae:	484a      	ldr	r0, [pc, #296]	; (800c2d8 <Initilialise_App+0x204>)
 800c1b0:	f7fd ff3e 	bl	800a030 <xTaskCreateStatic>
 800c1b4:	4603      	mov	r3, r0
 800c1b6:	4a30      	ldr	r2, [pc, #192]	; (800c278 <Initilialise_App+0x1a4>)
 800c1b8:	6193      	str	r3, [r2, #24]

/********************* Binary Semaphore Create **********************/

#ifdef BSP_PROCESS_FLASH
	/* Create Static Flash Semaphore	*/
	xSemHandle.Process_Flash 	 = xSemaphoreCreateBinaryStatic(&xSemaphore.Process_Flash		);
 800c1ba:	2303      	movs	r3, #3
 800c1bc:	9300      	str	r3, [sp, #0]
 800c1be:	4b47      	ldr	r3, [pc, #284]	; (800c2dc <Initilialise_App+0x208>)
 800c1c0:	2200      	movs	r2, #0
 800c1c2:	2100      	movs	r1, #0
 800c1c4:	2001      	movs	r0, #1
 800c1c6:	f7fc ff8d 	bl	80090e4 <xQueueGenericCreateStatic>
 800c1ca:	4603      	mov	r3, r0
 800c1cc:	4a44      	ldr	r2, [pc, #272]	; (800c2e0 <Initilialise_App+0x20c>)
 800c1ce:	6013      	str	r3, [r2, #0]
#endif


#ifdef BSP_PROCESS_CAN
    /* Create Static can Semaphore	*/
	xSemHandle.Process_CAN 		  = xSemaphoreCreateBinaryStatic(&xSemaphore.Process_CAN		);
 800c1d0:	2303      	movs	r3, #3
 800c1d2:	9300      	str	r3, [sp, #0]
 800c1d4:	4b43      	ldr	r3, [pc, #268]	; (800c2e4 <Initilialise_App+0x210>)
 800c1d6:	2200      	movs	r2, #0
 800c1d8:	2100      	movs	r1, #0
 800c1da:	2001      	movs	r0, #1
 800c1dc:	f7fc ff82 	bl	80090e4 <xQueueGenericCreateStatic>
 800c1e0:	4603      	mov	r3, r0
 800c1e2:	4a3f      	ldr	r2, [pc, #252]	; (800c2e0 <Initilialise_App+0x20c>)
 800c1e4:	6053      	str	r3, [r2, #4]
#endif


#ifdef BSP_PROCESS_RTC
    /* Create Static RTC Semaphore	*/
	xSemHandle.Process_RTC 		  = xSemaphoreCreateBinaryStatic(&xSemaphore.Process_RTC		);
 800c1e6:	2303      	movs	r3, #3
 800c1e8:	9300      	str	r3, [sp, #0]
 800c1ea:	4b3f      	ldr	r3, [pc, #252]	; (800c2e8 <Initilialise_App+0x214>)
 800c1ec:	2200      	movs	r2, #0
 800c1ee:	2100      	movs	r1, #0
 800c1f0:	2001      	movs	r0, #1
 800c1f2:	f7fc ff77 	bl	80090e4 <xQueueGenericCreateStatic>
 800c1f6:	4603      	mov	r3, r0
 800c1f8:	4a39      	ldr	r2, [pc, #228]	; (800c2e0 <Initilialise_App+0x20c>)
 800c1fa:	6093      	str	r3, [r2, #8]
#endif

#ifdef BSP_PROCESS_SDCARD
    /* Create Static sdcard Semaphore	*/
	xSemHandle.Process_SDCARD 	  = xSemaphoreCreateBinaryStatic(&xSemaphore.Process_SDCARD		);
 800c1fc:	2303      	movs	r3, #3
 800c1fe:	9300      	str	r3, [sp, #0]
 800c200:	4b3a      	ldr	r3, [pc, #232]	; (800c2ec <Initilialise_App+0x218>)
 800c202:	2200      	movs	r2, #0
 800c204:	2100      	movs	r1, #0
 800c206:	2001      	movs	r0, #1
 800c208:	f7fc ff6c 	bl	80090e4 <xQueueGenericCreateStatic>
 800c20c:	4603      	mov	r3, r0
 800c20e:	4a34      	ldr	r2, [pc, #208]	; (800c2e0 <Initilialise_App+0x20c>)
 800c210:	60d3      	str	r3, [r2, #12]
#endif

#ifdef BSP_PROCESS_WIFI
    /* Create Static wifi Semaphore	*/
	xSemHandle.Process_WIFI 	  = xSemaphoreCreateBinaryStatic(&xSemaphore.Process_WIFI		);
 800c212:	2303      	movs	r3, #3
 800c214:	9300      	str	r3, [sp, #0]
 800c216:	4b36      	ldr	r3, [pc, #216]	; (800c2f0 <Initilialise_App+0x21c>)
 800c218:	2200      	movs	r2, #0
 800c21a:	2100      	movs	r1, #0
 800c21c:	2001      	movs	r0, #1
 800c21e:	f7fc ff61 	bl	80090e4 <xQueueGenericCreateStatic>
 800c222:	4603      	mov	r3, r0
 800c224:	4a2e      	ldr	r2, [pc, #184]	; (800c2e0 <Initilialise_App+0x20c>)
 800c226:	6113      	str	r3, [r2, #16]
#endif

#ifdef BSP_PROCESS_NEXTION
    /* Create Static nextion Semaphore	*/
	xSemHandle.Process_NEXTION 	  = xSemaphoreCreateBinaryStatic(&xSemaphore.Process_NEXTION	);
 800c228:	2303      	movs	r3, #3
 800c22a:	9300      	str	r3, [sp, #0]
 800c22c:	4b31      	ldr	r3, [pc, #196]	; (800c2f4 <Initilialise_App+0x220>)
 800c22e:	2200      	movs	r2, #0
 800c230:	2100      	movs	r1, #0
 800c232:	2001      	movs	r0, #1
 800c234:	f7fc ff56 	bl	80090e4 <xQueueGenericCreateStatic>
 800c238:	4603      	mov	r3, r0
 800c23a:	4a29      	ldr	r2, [pc, #164]	; (800c2e0 <Initilialise_App+0x20c>)
 800c23c:	6153      	str	r3, [r2, #20]
#endif

	/************************ Create  Software Timers ***********************************/

    xTimerID.periodic = 	osTimerNew( APP_periodicTimerIRQHandler			,
 800c23e:	4b2e      	ldr	r3, [pc, #184]	; (800c2f8 <Initilialise_App+0x224>)
 800c240:	2200      	movs	r2, #0
 800c242:	2101      	movs	r1, #1
 800c244:	482d      	ldr	r0, [pc, #180]	; (800c2fc <Initilialise_App+0x228>)
 800c246:	f7fc fc3d 	bl	8008ac4 <osTimerNew>
 800c24a:	4603      	mov	r3, r0
 800c24c:	4a2c      	ldr	r2, [pc, #176]	; (800c300 <Initilialise_App+0x22c>)
 800c24e:	6013      	str	r3, [r2, #0]
    									osTimerPeriodic						,
										NULL								,
										&APP_periodic_attributes			);

    xTimerID.timeout  = 	osTimerNew( APP_timeoutTimerIRQHandler			,
 800c250:	4b2c      	ldr	r3, [pc, #176]	; (800c304 <Initilialise_App+0x230>)
 800c252:	2200      	movs	r2, #0
 800c254:	2100      	movs	r1, #0
 800c256:	482c      	ldr	r0, [pc, #176]	; (800c308 <Initilialise_App+0x234>)
 800c258:	f7fc fc34 	bl	8008ac4 <osTimerNew>
 800c25c:	4603      	mov	r3, r0
 800c25e:	4a28      	ldr	r2, [pc, #160]	; (800c300 <Initilialise_App+0x22c>)
 800c260:	6053      	str	r3, [r2, #4]

#ifdef DEBUG_MODE
    HAL_UART_Receive_DMA(&huart1, (U8 *)&__GL.DEBUG_Buffer[0], (U8)DEBUG_MSG_SIZE);
#endif

}
 800c262:	bf00      	nop
 800c264:	46bd      	mov	sp, r7
 800c266:	bd80      	pop	{r7, pc}
 800c268:	20005e00 	.word	0x20005e00
 800c26c:	20006084 	.word	0x20006084
 800c270:	0800d964 	.word	0x0800d964
 800c274:	0800c31d 	.word	0x0800c31d
 800c278:	2000a484 	.word	0x2000a484
 800c27c:	20005e5c 	.word	0x20005e5c
 800c280:	20007084 	.word	0x20007084
 800c284:	0800d980 	.word	0x0800d980
 800c288:	0800c349 	.word	0x0800c349
 800c28c:	20005eb8 	.word	0x20005eb8
 800c290:	20007884 	.word	0x20007884
 800c294:	0800d994 	.word	0x0800d994
 800c298:	0800c39d 	.word	0x0800c39d
 800c29c:	20005f14 	.word	0x20005f14
 800c2a0:	20008084 	.word	0x20008084
 800c2a4:	0800d9a8 	.word	0x0800d9a8
 800c2a8:	0800c3f1 	.word	0x0800c3f1
 800c2ac:	20005f70 	.word	0x20005f70
 800c2b0:	20008484 	.word	0x20008484
 800c2b4:	0800d9bc 	.word	0x0800d9bc
 800c2b8:	0800c445 	.word	0x0800c445
 800c2bc:	20005fcc 	.word	0x20005fcc
 800c2c0:	20008c84 	.word	0x20008c84
 800c2c4:	0800d9d0 	.word	0x0800d9d0
 800c2c8:	0800c499 	.word	0x0800c499
 800c2cc:	20006028 	.word	0x20006028
 800c2d0:	20009c84 	.word	0x20009c84
 800c2d4:	0800d9e4 	.word	0x0800d9e4
 800c2d8:	0800c4ed 	.word	0x0800c4ed
 800c2dc:	2000a4a0 	.word	0x2000a4a0
 800c2e0:	2000a680 	.word	0x2000a680
 800c2e4:	2000a4f0 	.word	0x2000a4f0
 800c2e8:	2000a540 	.word	0x2000a540
 800c2ec:	2000a590 	.word	0x2000a590
 800c2f0:	2000a5e0 	.word	0x2000a5e0
 800c2f4:	2000a630 	.word	0x2000a630
 800c2f8:	0800dfb0 	.word	0x0800dfb0
 800c2fc:	0800c0c1 	.word	0x0800c0c1
 800c300:	2000a6b0 	.word	0x2000a6b0
 800c304:	0800dfc0 	.word	0x0800dfc0
 800c308:	0800c0ad 	.word	0x0800c0ad

0800c30c <MAIN_App>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void MAIN_App(void)
{
 800c30c:	b580      	push	{r7, lr}
 800c30e:	af00      	add	r7, sp, #0
	/* Create Threads, Semph, SW Timers */
    Initilialise_App();
 800c310:	f7ff fee0 	bl	800c0d4 <Initilialise_App>
    /* Start Scheduler */
    vTaskStartScheduler();
 800c314:	f7fe f862 	bl	800a3dc <vTaskStartScheduler>

}
 800c318:	bf00      	nop
 800c31a:	bd80      	pop	{r7, pc}

0800c31c <Process_TelemetryMAIN_TaskHandler>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void Process_TelemetryMAIN_TaskHandler(void* param)
{
 800c31c:	b580      	push	{r7, lr}
 800c31e:	b082      	sub	sp, #8
 800c320:	af00      	add	r7, sp, #0
 800c322:	6078      	str	r0, [r7, #4]

	TelemetryMain_StartUP();
 800c324:	f000 fdd4 	bl	800ced0 <TelemetryMain_StartUP>
#ifdef DEBUG_THREAD
        DEBUG_printThread((char *)PROCESS_TELEMETRYMAIN_THREADNAME, "STARTED");
#endif
        // [[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[

        TelemetyMain_MAIN(); /* Main Application */
 800c328:	f000 fde8 	bl	800cefc <TelemetyMain_MAIN>

        Process_Can_Run();
 800c32c:	f000 f93e 	bl	800c5ac <Process_Can_Run>

        Process_Flash_Run();
 800c330:	f000 f906 	bl	800c540 <Process_Flash_Run>

        Process_NEXTION_Run();
 800c334:	f000 f9dc 	bl	800c6f0 <Process_NEXTION_Run>

        Process_SDCARD_Run();
 800c338:	f000 f96e 	bl	800c618 <Process_SDCARD_Run>

        Process_WIFI_Run();
 800c33c:	f000 f9a2 	bl	800c684 <Process_WIFI_Run>


		vTaskDelay(10);  /* Main Thread Checkout every 10ms tick */
 800c340:	200a      	movs	r0, #10
 800c342:	f7fe f817 	bl	800a374 <vTaskDelay>
        TelemetyMain_MAIN(); /* Main Application */
 800c346:	e7ef      	b.n	800c328 <Process_TelemetryMAIN_TaskHandler+0xc>

0800c348 <Process_Flash_TaskHandler>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void Process_Flash_TaskHandler(void* param)
{
 800c348:	b580      	push	{r7, lr}
 800c34a:	b084      	sub	sp, #16
 800c34c:	af02      	add	r7, sp, #8
 800c34e:	6078      	str	r0, [r7, #4]

	ModuleFlash_StartUP();
 800c350:	f000 fa60 	bl	800c814 <ModuleFlash_StartUP>

	while(1)
	{

	/* Semaphore Wait */
	xSemResult.Process_Flash = xQueueSemaphoreTake(xSemHandle.Process_Flash, osWaitForever);
 800c354:	4b0e      	ldr	r3, [pc, #56]	; (800c390 <Process_Flash_TaskHandler+0x48>)
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	f04f 31ff 	mov.w	r1, #4294967295
 800c35c:	4618      	mov	r0, r3
 800c35e:	f7fd fb07 	bl	8009970 <xQueueSemaphoreTake>
 800c362:	4603      	mov	r3, r0
 800c364:	4a0b      	ldr	r2, [pc, #44]	; (800c394 <Process_Flash_TaskHandler+0x4c>)
 800c366:	6013      	str	r3, [r2, #0]
	if (pdTRUE == xSemResult.Process_Flash)
 800c368:	4b0a      	ldr	r3, [pc, #40]	; (800c394 <Process_Flash_TaskHandler+0x4c>)
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	2b01      	cmp	r3, #1
 800c36e:	d102      	bne.n	800c376 <Process_Flash_TaskHandler+0x2e>
#ifdef DEBUG_THREAD
        DEBUG_printThread((char *)PROCESS_FLASH_THREADNAME, "STARTED");
#endif
        // [[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[

        ModuleFlash_MAIN(); /* Main Application */
 800c370:	f000 fa66 	bl	800c840 <ModuleFlash_MAIN>
 800c374:	e7ee      	b.n	800c354 <Process_Flash_TaskHandler+0xc>


	else
	{
		/* Semaphore fail / Create Again                                                             */
		xSemHandle.Process_Flash = xSemaphoreCreateBinaryStatic(&xSemaphore.Process_Flash);
 800c376:	2303      	movs	r3, #3
 800c378:	9300      	str	r3, [sp, #0]
 800c37a:	4b07      	ldr	r3, [pc, #28]	; (800c398 <Process_Flash_TaskHandler+0x50>)
 800c37c:	2200      	movs	r2, #0
 800c37e:	2100      	movs	r1, #0
 800c380:	2001      	movs	r0, #1
 800c382:	f7fc feaf 	bl	80090e4 <xQueueGenericCreateStatic>
 800c386:	4603      	mov	r3, r0
 800c388:	4a01      	ldr	r2, [pc, #4]	; (800c390 <Process_Flash_TaskHandler+0x48>)
 800c38a:	6013      	str	r3, [r2, #0]
	xSemResult.Process_Flash = xQueueSemaphoreTake(xSemHandle.Process_Flash, osWaitForever);
 800c38c:	e7e2      	b.n	800c354 <Process_Flash_TaskHandler+0xc>
 800c38e:	bf00      	nop
 800c390:	2000a680 	.word	0x2000a680
 800c394:	2000a698 	.word	0x2000a698
 800c398:	2000a4a0 	.word	0x2000a4a0

0800c39c <Process_CAN_TaskHandler>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void Process_CAN_TaskHandler(void* param)
{
 800c39c:	b580      	push	{r7, lr}
 800c39e:	b084      	sub	sp, #16
 800c3a0:	af02      	add	r7, sp, #8
 800c3a2:	6078      	str	r0, [r7, #4]
	ModuleCAN_StartUP();
 800c3a4:	f000 f9e8 	bl	800c778 <ModuleCAN_StartUP>

while(1)
    {
	/* Semaphore Wait */
	xSemResult.Process_CAN = xQueueSemaphoreTake(xSemHandle.Process_CAN, osWaitForever);
 800c3a8:	4b0e      	ldr	r3, [pc, #56]	; (800c3e4 <Process_CAN_TaskHandler+0x48>)
 800c3aa:	685b      	ldr	r3, [r3, #4]
 800c3ac:	f04f 31ff 	mov.w	r1, #4294967295
 800c3b0:	4618      	mov	r0, r3
 800c3b2:	f7fd fadd 	bl	8009970 <xQueueSemaphoreTake>
 800c3b6:	4603      	mov	r3, r0
 800c3b8:	4a0b      	ldr	r2, [pc, #44]	; (800c3e8 <Process_CAN_TaskHandler+0x4c>)
 800c3ba:	6053      	str	r3, [r2, #4]
	if (pdTRUE == xSemResult.Process_CAN)
 800c3bc:	4b0a      	ldr	r3, [pc, #40]	; (800c3e8 <Process_CAN_TaskHandler+0x4c>)
 800c3be:	685b      	ldr	r3, [r3, #4]
 800c3c0:	2b01      	cmp	r3, #1
 800c3c2:	d102      	bne.n	800c3ca <Process_CAN_TaskHandler+0x2e>
#ifdef DEBUG_THREAD
        DEBUG_printThread((char *)PROCESS_CAN_THREADNAME, "STARTED");
#endif
        // [[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[

        ModuleCAN_MAIN(); /* Main Application */
 800c3c4:	f000 f9ee 	bl	800c7a4 <ModuleCAN_MAIN>
 800c3c8:	e7ee      	b.n	800c3a8 <Process_CAN_TaskHandler+0xc>

	}
	else
	{
		/* Semaphore fail / Create Again                                                             */
		xSemHandle.Process_CAN = xSemaphoreCreateBinaryStatic(&xSemaphore.Process_CAN);
 800c3ca:	2303      	movs	r3, #3
 800c3cc:	9300      	str	r3, [sp, #0]
 800c3ce:	4b07      	ldr	r3, [pc, #28]	; (800c3ec <Process_CAN_TaskHandler+0x50>)
 800c3d0:	2200      	movs	r2, #0
 800c3d2:	2100      	movs	r1, #0
 800c3d4:	2001      	movs	r0, #1
 800c3d6:	f7fc fe85 	bl	80090e4 <xQueueGenericCreateStatic>
 800c3da:	4603      	mov	r3, r0
 800c3dc:	4a01      	ldr	r2, [pc, #4]	; (800c3e4 <Process_CAN_TaskHandler+0x48>)
 800c3de:	6053      	str	r3, [r2, #4]
	xSemResult.Process_CAN = xQueueSemaphoreTake(xSemHandle.Process_CAN, osWaitForever);
 800c3e0:	e7e2      	b.n	800c3a8 <Process_CAN_TaskHandler+0xc>
 800c3e2:	bf00      	nop
 800c3e4:	2000a680 	.word	0x2000a680
 800c3e8:	2000a698 	.word	0x2000a698
 800c3ec:	2000a4f0 	.word	0x2000a4f0

0800c3f0 <Process_RTC_TaskHandler>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void Process_RTC_TaskHandler(void* param)
{
 800c3f0:	b580      	push	{r7, lr}
 800c3f2:	b084      	sub	sp, #16
 800c3f4:	af02      	add	r7, sp, #8
 800c3f6:	6078      	str	r0, [r7, #4]
	ModuleRTC_StartUP();
 800c3f8:	f000 fbf8 	bl	800cbec <ModuleRTC_StartUP>

	while(1)
	{

	/* Semaphore Wait */
	xSemResult.Process_RTC = xQueueSemaphoreTake(xSemHandle.Process_RTC, osWaitForever);
 800c3fc:	4b0e      	ldr	r3, [pc, #56]	; (800c438 <Process_RTC_TaskHandler+0x48>)
 800c3fe:	689b      	ldr	r3, [r3, #8]
 800c400:	f04f 31ff 	mov.w	r1, #4294967295
 800c404:	4618      	mov	r0, r3
 800c406:	f7fd fab3 	bl	8009970 <xQueueSemaphoreTake>
 800c40a:	4603      	mov	r3, r0
 800c40c:	4a0b      	ldr	r2, [pc, #44]	; (800c43c <Process_RTC_TaskHandler+0x4c>)
 800c40e:	6093      	str	r3, [r2, #8]
	if (pdTRUE == xSemResult.Process_RTC)
 800c410:	4b0a      	ldr	r3, [pc, #40]	; (800c43c <Process_RTC_TaskHandler+0x4c>)
 800c412:	689b      	ldr	r3, [r3, #8]
 800c414:	2b01      	cmp	r3, #1
 800c416:	d102      	bne.n	800c41e <Process_RTC_TaskHandler+0x2e>
#ifdef DEBUG_THREAD
        DEBUG_printThread((char *)PROCESS_RTC_THREADNAME, "STARTED");
#endif
        // [[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[

        ModuleRTC_MAIN(); /* Main Application */
 800c418:	f000 fc30 	bl	800cc7c <ModuleRTC_MAIN>
 800c41c:	e7ee      	b.n	800c3fc <Process_RTC_TaskHandler+0xc>


	else
	{
		/* Semaphore fail / Create Again  */
		xSemHandle.Process_RTC = xSemaphoreCreateBinaryStatic(&xSemaphore.Process_RTC);
 800c41e:	2303      	movs	r3, #3
 800c420:	9300      	str	r3, [sp, #0]
 800c422:	4b07      	ldr	r3, [pc, #28]	; (800c440 <Process_RTC_TaskHandler+0x50>)
 800c424:	2200      	movs	r2, #0
 800c426:	2100      	movs	r1, #0
 800c428:	2001      	movs	r0, #1
 800c42a:	f7fc fe5b 	bl	80090e4 <xQueueGenericCreateStatic>
 800c42e:	4603      	mov	r3, r0
 800c430:	4a01      	ldr	r2, [pc, #4]	; (800c438 <Process_RTC_TaskHandler+0x48>)
 800c432:	6093      	str	r3, [r2, #8]
	xSemResult.Process_RTC = xQueueSemaphoreTake(xSemHandle.Process_RTC, osWaitForever);
 800c434:	e7e2      	b.n	800c3fc <Process_RTC_TaskHandler+0xc>
 800c436:	bf00      	nop
 800c438:	2000a680 	.word	0x2000a680
 800c43c:	2000a698 	.word	0x2000a698
 800c440:	2000a540 	.word	0x2000a540

0800c444 <Process_SDCARD_TaskHandler>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void Process_SDCARD_TaskHandler(void* param)
{
 800c444:	b580      	push	{r7, lr}
 800c446:	b084      	sub	sp, #16
 800c448:	af02      	add	r7, sp, #8
 800c44a:	6078      	str	r0, [r7, #4]
	ModuleSDCard_StartUP();
 800c44c:	f000 fc61 	bl	800cd12 <ModuleSDCard_StartUP>

	while(1)
	{

	/* Semaphore Wait */
	xSemResult.Process_SDCARD = xQueueSemaphoreTake(xSemHandle.Process_SDCARD, osWaitForever);
 800c450:	4b0e      	ldr	r3, [pc, #56]	; (800c48c <Process_SDCARD_TaskHandler+0x48>)
 800c452:	68db      	ldr	r3, [r3, #12]
 800c454:	f04f 31ff 	mov.w	r1, #4294967295
 800c458:	4618      	mov	r0, r3
 800c45a:	f7fd fa89 	bl	8009970 <xQueueSemaphoreTake>
 800c45e:	4603      	mov	r3, r0
 800c460:	4a0b      	ldr	r2, [pc, #44]	; (800c490 <Process_SDCARD_TaskHandler+0x4c>)
 800c462:	60d3      	str	r3, [r2, #12]
	if (pdTRUE == xSemResult.Process_SDCARD)
 800c464:	4b0a      	ldr	r3, [pc, #40]	; (800c490 <Process_SDCARD_TaskHandler+0x4c>)
 800c466:	68db      	ldr	r3, [r3, #12]
 800c468:	2b01      	cmp	r3, #1
 800c46a:	d102      	bne.n	800c472 <Process_SDCARD_TaskHandler+0x2e>
#ifdef DEBUG_THREAD
        DEBUG_printThread((char *)PROCESS_SDCARD_THREADNAME, "STARTED");
#endif
        // [[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[

        ModuleSDCard_MAIN(); /* Main Application */
 800c46c:	f000 fcae 	bl	800cdcc <ModuleSDCard_MAIN>
 800c470:	e7ee      	b.n	800c450 <Process_SDCARD_TaskHandler+0xc>


	else
	{
		/* Semaphore fail / Create Again  */
		xSemHandle.Process_SDCARD = xSemaphoreCreateBinaryStatic(&xSemaphore.Process_SDCARD);
 800c472:	2303      	movs	r3, #3
 800c474:	9300      	str	r3, [sp, #0]
 800c476:	4b07      	ldr	r3, [pc, #28]	; (800c494 <Process_SDCARD_TaskHandler+0x50>)
 800c478:	2200      	movs	r2, #0
 800c47a:	2100      	movs	r1, #0
 800c47c:	2001      	movs	r0, #1
 800c47e:	f7fc fe31 	bl	80090e4 <xQueueGenericCreateStatic>
 800c482:	4603      	mov	r3, r0
 800c484:	4a01      	ldr	r2, [pc, #4]	; (800c48c <Process_SDCARD_TaskHandler+0x48>)
 800c486:	60d3      	str	r3, [r2, #12]
	xSemResult.Process_SDCARD = xQueueSemaphoreTake(xSemHandle.Process_SDCARD, osWaitForever);
 800c488:	e7e2      	b.n	800c450 <Process_SDCARD_TaskHandler+0xc>
 800c48a:	bf00      	nop
 800c48c:	2000a680 	.word	0x2000a680
 800c490:	2000a698 	.word	0x2000a698
 800c494:	2000a590 	.word	0x2000a590

0800c498 <Process_WIFI_TaskHandler>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void Process_WIFI_TaskHandler(void* param)
{
 800c498:	b580      	push	{r7, lr}
 800c49a:	b084      	sub	sp, #16
 800c49c:	af02      	add	r7, sp, #8
 800c49e:	6078      	str	r0, [r7, #4]
	ModuleWIFI_StartUP();
 800c4a0:	f000 fcca 	bl	800ce38 <ModuleWIFI_StartUP>

	while(1)
	{

	/* Semaphore Wait */
	xSemResult.Process_WIFI = xQueueSemaphoreTake(xSemHandle.Process_WIFI, osWaitForever);
 800c4a4:	4b0e      	ldr	r3, [pc, #56]	; (800c4e0 <Process_WIFI_TaskHandler+0x48>)
 800c4a6:	691b      	ldr	r3, [r3, #16]
 800c4a8:	f04f 31ff 	mov.w	r1, #4294967295
 800c4ac:	4618      	mov	r0, r3
 800c4ae:	f7fd fa5f 	bl	8009970 <xQueueSemaphoreTake>
 800c4b2:	4603      	mov	r3, r0
 800c4b4:	4a0b      	ldr	r2, [pc, #44]	; (800c4e4 <Process_WIFI_TaskHandler+0x4c>)
 800c4b6:	6113      	str	r3, [r2, #16]
	if (pdTRUE == xSemResult.Process_WIFI)
 800c4b8:	4b0a      	ldr	r3, [pc, #40]	; (800c4e4 <Process_WIFI_TaskHandler+0x4c>)
 800c4ba:	691b      	ldr	r3, [r3, #16]
 800c4bc:	2b01      	cmp	r3, #1
 800c4be:	d102      	bne.n	800c4c6 <Process_WIFI_TaskHandler+0x2e>
#ifdef DEBUG_THREAD
        DEBUG_printThread((char *)PROCESS_WIFI_THREADNAME, "STARTED");
#endif
        // [[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[

        ModuleWIFI_MAIN(); /* Main Application */
 800c4c0:	f000 fcd0 	bl	800ce64 <ModuleWIFI_MAIN>
 800c4c4:	e7ee      	b.n	800c4a4 <Process_WIFI_TaskHandler+0xc>


	else
	{
		/* Semaphore fail / Create Again  */
		xSemHandle.Process_WIFI = xSemaphoreCreateBinaryStatic(&xSemaphore.Process_WIFI);
 800c4c6:	2303      	movs	r3, #3
 800c4c8:	9300      	str	r3, [sp, #0]
 800c4ca:	4b07      	ldr	r3, [pc, #28]	; (800c4e8 <Process_WIFI_TaskHandler+0x50>)
 800c4cc:	2200      	movs	r2, #0
 800c4ce:	2100      	movs	r1, #0
 800c4d0:	2001      	movs	r0, #1
 800c4d2:	f7fc fe07 	bl	80090e4 <xQueueGenericCreateStatic>
 800c4d6:	4603      	mov	r3, r0
 800c4d8:	4a01      	ldr	r2, [pc, #4]	; (800c4e0 <Process_WIFI_TaskHandler+0x48>)
 800c4da:	6113      	str	r3, [r2, #16]
	xSemResult.Process_WIFI = xQueueSemaphoreTake(xSemHandle.Process_WIFI, osWaitForever);
 800c4dc:	e7e2      	b.n	800c4a4 <Process_WIFI_TaskHandler+0xc>
 800c4de:	bf00      	nop
 800c4e0:	2000a680 	.word	0x2000a680
 800c4e4:	2000a698 	.word	0x2000a698
 800c4e8:	2000a5e0 	.word	0x2000a5e0

0800c4ec <Process_NEXTION_TaskHandler>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void Process_NEXTION_TaskHandler(void* param)
{
 800c4ec:	b580      	push	{r7, lr}
 800c4ee:	b084      	sub	sp, #16
 800c4f0:	af02      	add	r7, sp, #8
 800c4f2:	6078      	str	r0, [r7, #4]
	ModuleNEXTION_StartUP();
 800c4f4:	f000 f9f9 	bl	800c8ea <ModuleNEXTION_StartUP>


	while(1)
	{
	/* Semaphore Wait */
	xSemResult.Process_NEXTION = xQueueSemaphoreTake(xSemHandle.Process_NEXTION, osWaitForever);
 800c4f8:	4b0e      	ldr	r3, [pc, #56]	; (800c534 <Process_NEXTION_TaskHandler+0x48>)
 800c4fa:	695b      	ldr	r3, [r3, #20]
 800c4fc:	f04f 31ff 	mov.w	r1, #4294967295
 800c500:	4618      	mov	r0, r3
 800c502:	f7fd fa35 	bl	8009970 <xQueueSemaphoreTake>
 800c506:	4603      	mov	r3, r0
 800c508:	4a0b      	ldr	r2, [pc, #44]	; (800c538 <Process_NEXTION_TaskHandler+0x4c>)
 800c50a:	6153      	str	r3, [r2, #20]
	if (pdTRUE == xSemResult.Process_NEXTION)
 800c50c:	4b0a      	ldr	r3, [pc, #40]	; (800c538 <Process_NEXTION_TaskHandler+0x4c>)
 800c50e:	695b      	ldr	r3, [r3, #20]
 800c510:	2b01      	cmp	r3, #1
 800c512:	d102      	bne.n	800c51a <Process_NEXTION_TaskHandler+0x2e>
#ifdef DEBUG_THREAD
        DEBUG_printThread((char *)PROCESS_NEXTION_THREADNAME, "STARTED");
#endif
        // [[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[

        ModuleNEXTION_MAIN(); /* Main Application */
 800c514:	f000 fb08 	bl	800cb28 <ModuleNEXTION_MAIN>
 800c518:	e7ee      	b.n	800c4f8 <Process_NEXTION_TaskHandler+0xc>
		}

	else
	{
		/* Semaphore fail / Create Again  */
		xSemHandle.Process_NEXTION = xSemaphoreCreateBinaryStatic(&xSemaphore.Process_NEXTION);
 800c51a:	2303      	movs	r3, #3
 800c51c:	9300      	str	r3, [sp, #0]
 800c51e:	4b07      	ldr	r3, [pc, #28]	; (800c53c <Process_NEXTION_TaskHandler+0x50>)
 800c520:	2200      	movs	r2, #0
 800c522:	2100      	movs	r1, #0
 800c524:	2001      	movs	r0, #1
 800c526:	f7fc fddd 	bl	80090e4 <xQueueGenericCreateStatic>
 800c52a:	4603      	mov	r3, r0
 800c52c:	4a01      	ldr	r2, [pc, #4]	; (800c534 <Process_NEXTION_TaskHandler+0x48>)
 800c52e:	6153      	str	r3, [r2, #20]
	xSemResult.Process_NEXTION = xQueueSemaphoreTake(xSemHandle.Process_NEXTION, osWaitForever);
 800c530:	e7e2      	b.n	800c4f8 <Process_NEXTION_TaskHandler+0xc>
 800c532:	bf00      	nop
 800c534:	2000a680 	.word	0x2000a680
 800c538:	2000a698 	.word	0x2000a698
 800c53c:	2000a630 	.word	0x2000a630

0800c540 <Process_Flash_Run>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void     Process_Flash_Run(void)
{
 800c540:	b580      	push	{r7, lr}
 800c542:	b082      	sub	sp, #8
 800c544:	af02      	add	r7, sp, #8

#ifdef DEBUG_THREAD
    DEBUG_printThread((char *)PROCESS_FLASH_SEMAPHORENAME, "RELEASED");
#endif

    xSemResult.Process_Flash = xSemaphoreGive(xSemHandle.Process_Flash);
 800c546:	4b15      	ldr	r3, [pc, #84]	; (800c59c <Process_Flash_Run+0x5c>)
 800c548:	6818      	ldr	r0, [r3, #0]
 800c54a:	2300      	movs	r3, #0
 800c54c:	2200      	movs	r2, #0
 800c54e:	2100      	movs	r1, #0
 800c550:	f7fc ff08 	bl	8009364 <xQueueGenericSend>
 800c554:	4603      	mov	r3, r0
 800c556:	4a12      	ldr	r2, [pc, #72]	; (800c5a0 <Process_Flash_Run+0x60>)
 800c558:	6013      	str	r3, [r2, #0]

    if (pdPASS == xSemResult.Process_Flash)
 800c55a:	4b11      	ldr	r3, [pc, #68]	; (800c5a0 <Process_Flash_Run+0x60>)
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	2b01      	cmp	r3, #1
 800c560:	d107      	bne.n	800c572 <Process_Flash_Run+0x32>
    {
        /* Bootloader Semaphore is Passed */
    	__GL.itc.flag.flash = TRUE;
 800c562:	4a10      	ldr	r2, [pc, #64]	; (800c5a4 <Process_Flash_Run+0x64>)
 800c564:	f892 3b00 	ldrb.w	r3, [r2, #2816]	; 0xb00
 800c568:	f043 0301 	orr.w	r3, r3, #1
 800c56c:	f882 3b00 	strb.w	r3, [r2, #2816]	; 0xb00
#endif

        xSemHandle.Process_Flash = xSemaphoreCreateBinaryStatic(&xSemaphore.Process_Flash);
    }
#endif
}
 800c570:	e011      	b.n	800c596 <Process_Flash_Run+0x56>
    	__GL.itc.flag.flash = FALSE;
 800c572:	4a0c      	ldr	r2, [pc, #48]	; (800c5a4 <Process_Flash_Run+0x64>)
 800c574:	f892 3b00 	ldrb.w	r3, [r2, #2816]	; 0xb00
 800c578:	f36f 0300 	bfc	r3, #0, #1
 800c57c:	f882 3b00 	strb.w	r3, [r2, #2816]	; 0xb00
        xSemHandle.Process_Flash = xSemaphoreCreateBinaryStatic(&xSemaphore.Process_Flash);
 800c580:	2303      	movs	r3, #3
 800c582:	9300      	str	r3, [sp, #0]
 800c584:	4b08      	ldr	r3, [pc, #32]	; (800c5a8 <Process_Flash_Run+0x68>)
 800c586:	2200      	movs	r2, #0
 800c588:	2100      	movs	r1, #0
 800c58a:	2001      	movs	r0, #1
 800c58c:	f7fc fdaa 	bl	80090e4 <xQueueGenericCreateStatic>
 800c590:	4603      	mov	r3, r0
 800c592:	4a02      	ldr	r2, [pc, #8]	; (800c59c <Process_Flash_Run+0x5c>)
 800c594:	6013      	str	r3, [r2, #0]
}
 800c596:	bf00      	nop
 800c598:	46bd      	mov	sp, r7
 800c59a:	bd80      	pop	{r7, pc}
 800c59c:	2000a680 	.word	0x2000a680
 800c5a0:	2000a698 	.word	0x2000a698
 800c5a4:	200000a4 	.word	0x200000a4
 800c5a8:	2000a4a0 	.word	0x2000a4a0

0800c5ac <Process_Can_Run>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void     Process_Can_Run(void)
{
 800c5ac:	b580      	push	{r7, lr}
 800c5ae:	b082      	sub	sp, #8
 800c5b0:	af02      	add	r7, sp, #8

#ifdef DEBUG_THREAD
    DEBUG_printThread((char *)PROCESS_CAN_SEMAPHORENAME, "RELEASED");
#endif

    xSemResult.Process_CAN = xSemaphoreGive(xSemHandle.Process_CAN);
 800c5b2:	4b15      	ldr	r3, [pc, #84]	; (800c608 <Process_Can_Run+0x5c>)
 800c5b4:	6858      	ldr	r0, [r3, #4]
 800c5b6:	2300      	movs	r3, #0
 800c5b8:	2200      	movs	r2, #0
 800c5ba:	2100      	movs	r1, #0
 800c5bc:	f7fc fed2 	bl	8009364 <xQueueGenericSend>
 800c5c0:	4603      	mov	r3, r0
 800c5c2:	4a12      	ldr	r2, [pc, #72]	; (800c60c <Process_Can_Run+0x60>)
 800c5c4:	6053      	str	r3, [r2, #4]

    if (pdPASS == xSemResult.Process_CAN)
 800c5c6:	4b11      	ldr	r3, [pc, #68]	; (800c60c <Process_Can_Run+0x60>)
 800c5c8:	685b      	ldr	r3, [r3, #4]
 800c5ca:	2b01      	cmp	r3, #1
 800c5cc:	d107      	bne.n	800c5de <Process_Can_Run+0x32>
    {
        /* Bootloader Semaphore is Passed */
    	__GL.itc.flag.can = TRUE;
 800c5ce:	4a10      	ldr	r2, [pc, #64]	; (800c610 <Process_Can_Run+0x64>)
 800c5d0:	f892 3b00 	ldrb.w	r3, [r2, #2816]	; 0xb00
 800c5d4:	f043 0302 	orr.w	r3, r3, #2
 800c5d8:	f882 3b00 	strb.w	r3, [r2, #2816]	; 0xb00
#endif

        xSemHandle.Process_CAN = xSemaphoreCreateBinaryStatic(&xSemaphore.Process_CAN);
    }
#endif
}
 800c5dc:	e011      	b.n	800c602 <Process_Can_Run+0x56>
    	__GL.itc.flag.can = FALSE;
 800c5de:	4a0c      	ldr	r2, [pc, #48]	; (800c610 <Process_Can_Run+0x64>)
 800c5e0:	f892 3b00 	ldrb.w	r3, [r2, #2816]	; 0xb00
 800c5e4:	f36f 0341 	bfc	r3, #1, #1
 800c5e8:	f882 3b00 	strb.w	r3, [r2, #2816]	; 0xb00
        xSemHandle.Process_CAN = xSemaphoreCreateBinaryStatic(&xSemaphore.Process_CAN);
 800c5ec:	2303      	movs	r3, #3
 800c5ee:	9300      	str	r3, [sp, #0]
 800c5f0:	4b08      	ldr	r3, [pc, #32]	; (800c614 <Process_Can_Run+0x68>)
 800c5f2:	2200      	movs	r2, #0
 800c5f4:	2100      	movs	r1, #0
 800c5f6:	2001      	movs	r0, #1
 800c5f8:	f7fc fd74 	bl	80090e4 <xQueueGenericCreateStatic>
 800c5fc:	4603      	mov	r3, r0
 800c5fe:	4a02      	ldr	r2, [pc, #8]	; (800c608 <Process_Can_Run+0x5c>)
 800c600:	6053      	str	r3, [r2, #4]
}
 800c602:	bf00      	nop
 800c604:	46bd      	mov	sp, r7
 800c606:	bd80      	pop	{r7, pc}
 800c608:	2000a680 	.word	0x2000a680
 800c60c:	2000a698 	.word	0x2000a698
 800c610:	200000a4 	.word	0x200000a4
 800c614:	2000a4f0 	.word	0x2000a4f0

0800c618 <Process_SDCARD_Run>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void     Process_SDCARD_Run(void)
{
 800c618:	b580      	push	{r7, lr}
 800c61a:	b082      	sub	sp, #8
 800c61c:	af02      	add	r7, sp, #8

#ifdef DEBUG_THREAD
    DEBUG_printThread((char *)PROCESS_SDCARD_SEMAPHORENAME, "RELEASED");
#endif

    xSemResult.Process_SDCARD = xSemaphoreGive(xSemHandle.Process_SDCARD);
 800c61e:	4b15      	ldr	r3, [pc, #84]	; (800c674 <Process_SDCARD_Run+0x5c>)
 800c620:	68d8      	ldr	r0, [r3, #12]
 800c622:	2300      	movs	r3, #0
 800c624:	2200      	movs	r2, #0
 800c626:	2100      	movs	r1, #0
 800c628:	f7fc fe9c 	bl	8009364 <xQueueGenericSend>
 800c62c:	4603      	mov	r3, r0
 800c62e:	4a12      	ldr	r2, [pc, #72]	; (800c678 <Process_SDCARD_Run+0x60>)
 800c630:	60d3      	str	r3, [r2, #12]

    if (pdPASS == xSemResult.Process_SDCARD)
 800c632:	4b11      	ldr	r3, [pc, #68]	; (800c678 <Process_SDCARD_Run+0x60>)
 800c634:	68db      	ldr	r3, [r3, #12]
 800c636:	2b01      	cmp	r3, #1
 800c638:	d107      	bne.n	800c64a <Process_SDCARD_Run+0x32>
    {
        /* Bootloader Semaphore is Passed */
    	__GL.itc.flag.sdcard = TRUE;
 800c63a:	4a10      	ldr	r2, [pc, #64]	; (800c67c <Process_SDCARD_Run+0x64>)
 800c63c:	f892 3b00 	ldrb.w	r3, [r2, #2816]	; 0xb00
 800c640:	f043 0308 	orr.w	r3, r3, #8
 800c644:	f882 3b00 	strb.w	r3, [r2, #2816]	; 0xb00
#endif

        xSemHandle.Process_SDCARD = xSemaphoreCreateBinaryStatic(&xSemaphore.Process_SDCARD);
    }
#endif
}
 800c648:	e011      	b.n	800c66e <Process_SDCARD_Run+0x56>
    	__GL.itc.flag.sdcard = FALSE;
 800c64a:	4a0c      	ldr	r2, [pc, #48]	; (800c67c <Process_SDCARD_Run+0x64>)
 800c64c:	f892 3b00 	ldrb.w	r3, [r2, #2816]	; 0xb00
 800c650:	f36f 03c3 	bfc	r3, #3, #1
 800c654:	f882 3b00 	strb.w	r3, [r2, #2816]	; 0xb00
        xSemHandle.Process_SDCARD = xSemaphoreCreateBinaryStatic(&xSemaphore.Process_SDCARD);
 800c658:	2303      	movs	r3, #3
 800c65a:	9300      	str	r3, [sp, #0]
 800c65c:	4b08      	ldr	r3, [pc, #32]	; (800c680 <Process_SDCARD_Run+0x68>)
 800c65e:	2200      	movs	r2, #0
 800c660:	2100      	movs	r1, #0
 800c662:	2001      	movs	r0, #1
 800c664:	f7fc fd3e 	bl	80090e4 <xQueueGenericCreateStatic>
 800c668:	4603      	mov	r3, r0
 800c66a:	4a02      	ldr	r2, [pc, #8]	; (800c674 <Process_SDCARD_Run+0x5c>)
 800c66c:	60d3      	str	r3, [r2, #12]
}
 800c66e:	bf00      	nop
 800c670:	46bd      	mov	sp, r7
 800c672:	bd80      	pop	{r7, pc}
 800c674:	2000a680 	.word	0x2000a680
 800c678:	2000a698 	.word	0x2000a698
 800c67c:	200000a4 	.word	0x200000a4
 800c680:	2000a590 	.word	0x2000a590

0800c684 <Process_WIFI_Run>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void     Process_WIFI_Run(void)
{
 800c684:	b580      	push	{r7, lr}
 800c686:	b082      	sub	sp, #8
 800c688:	af02      	add	r7, sp, #8

#ifdef DEBUG_THREAD
    DEBUG_printThread((char *)PROCESS_WIFI_SEMAPHORENAME, "RELEASED");
#endif

    xSemResult.Process_WIFI = xSemaphoreGive(xSemHandle.Process_WIFI);
 800c68a:	4b15      	ldr	r3, [pc, #84]	; (800c6e0 <Process_WIFI_Run+0x5c>)
 800c68c:	6918      	ldr	r0, [r3, #16]
 800c68e:	2300      	movs	r3, #0
 800c690:	2200      	movs	r2, #0
 800c692:	2100      	movs	r1, #0
 800c694:	f7fc fe66 	bl	8009364 <xQueueGenericSend>
 800c698:	4603      	mov	r3, r0
 800c69a:	4a12      	ldr	r2, [pc, #72]	; (800c6e4 <Process_WIFI_Run+0x60>)
 800c69c:	6113      	str	r3, [r2, #16]

    if (pdPASS == xSemResult.Process_WIFI)
 800c69e:	4b11      	ldr	r3, [pc, #68]	; (800c6e4 <Process_WIFI_Run+0x60>)
 800c6a0:	691b      	ldr	r3, [r3, #16]
 800c6a2:	2b01      	cmp	r3, #1
 800c6a4:	d107      	bne.n	800c6b6 <Process_WIFI_Run+0x32>
    {
        /* Bootloader Semaphore is Passed */
    	__GL.itc.flag.wifi = TRUE;
 800c6a6:	4a10      	ldr	r2, [pc, #64]	; (800c6e8 <Process_WIFI_Run+0x64>)
 800c6a8:	f892 3b00 	ldrb.w	r3, [r2, #2816]	; 0xb00
 800c6ac:	f043 0310 	orr.w	r3, r3, #16
 800c6b0:	f882 3b00 	strb.w	r3, [r2, #2816]	; 0xb00
#endif

        xSemHandle.Process_WIFI = xSemaphoreCreateBinaryStatic(&xSemaphore.Process_WIFI);
    }
#endif
}
 800c6b4:	e011      	b.n	800c6da <Process_WIFI_Run+0x56>
    	__GL.itc.flag.wifi = FALSE;
 800c6b6:	4a0c      	ldr	r2, [pc, #48]	; (800c6e8 <Process_WIFI_Run+0x64>)
 800c6b8:	f892 3b00 	ldrb.w	r3, [r2, #2816]	; 0xb00
 800c6bc:	f36f 1304 	bfc	r3, #4, #1
 800c6c0:	f882 3b00 	strb.w	r3, [r2, #2816]	; 0xb00
        xSemHandle.Process_WIFI = xSemaphoreCreateBinaryStatic(&xSemaphore.Process_WIFI);
 800c6c4:	2303      	movs	r3, #3
 800c6c6:	9300      	str	r3, [sp, #0]
 800c6c8:	4b08      	ldr	r3, [pc, #32]	; (800c6ec <Process_WIFI_Run+0x68>)
 800c6ca:	2200      	movs	r2, #0
 800c6cc:	2100      	movs	r1, #0
 800c6ce:	2001      	movs	r0, #1
 800c6d0:	f7fc fd08 	bl	80090e4 <xQueueGenericCreateStatic>
 800c6d4:	4603      	mov	r3, r0
 800c6d6:	4a02      	ldr	r2, [pc, #8]	; (800c6e0 <Process_WIFI_Run+0x5c>)
 800c6d8:	6113      	str	r3, [r2, #16]
}
 800c6da:	bf00      	nop
 800c6dc:	46bd      	mov	sp, r7
 800c6de:	bd80      	pop	{r7, pc}
 800c6e0:	2000a680 	.word	0x2000a680
 800c6e4:	2000a698 	.word	0x2000a698
 800c6e8:	200000a4 	.word	0x200000a4
 800c6ec:	2000a5e0 	.word	0x2000a5e0

0800c6f0 <Process_NEXTION_Run>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void     Process_NEXTION_Run(void)
{
 800c6f0:	b580      	push	{r7, lr}
 800c6f2:	b082      	sub	sp, #8
 800c6f4:	af02      	add	r7, sp, #8

#ifdef DEBUG_THREAD
    DEBUG_printThread((char *)PROCESS_NEXTION_SEMAPHORENAME, "RELEASED");
#endif

    xSemResult.Process_NEXTION = xSemaphoreGive(xSemHandle.Process_NEXTION);
 800c6f6:	4b15      	ldr	r3, [pc, #84]	; (800c74c <Process_NEXTION_Run+0x5c>)
 800c6f8:	6958      	ldr	r0, [r3, #20]
 800c6fa:	2300      	movs	r3, #0
 800c6fc:	2200      	movs	r2, #0
 800c6fe:	2100      	movs	r1, #0
 800c700:	f7fc fe30 	bl	8009364 <xQueueGenericSend>
 800c704:	4603      	mov	r3, r0
 800c706:	4a12      	ldr	r2, [pc, #72]	; (800c750 <Process_NEXTION_Run+0x60>)
 800c708:	6153      	str	r3, [r2, #20]

    if (pdPASS == xSemResult.Process_NEXTION)
 800c70a:	4b11      	ldr	r3, [pc, #68]	; (800c750 <Process_NEXTION_Run+0x60>)
 800c70c:	695b      	ldr	r3, [r3, #20]
 800c70e:	2b01      	cmp	r3, #1
 800c710:	d107      	bne.n	800c722 <Process_NEXTION_Run+0x32>
    {
        /* Bootloader Semaphore is Passed */
    	__GL.itc.flag.wifi = TRUE;
 800c712:	4a10      	ldr	r2, [pc, #64]	; (800c754 <Process_NEXTION_Run+0x64>)
 800c714:	f892 3b00 	ldrb.w	r3, [r2, #2816]	; 0xb00
 800c718:	f043 0310 	orr.w	r3, r3, #16
 800c71c:	f882 3b00 	strb.w	r3, [r2, #2816]	; 0xb00
#endif

        xSemHandle.Process_NEXTION = xSemaphoreCreateBinaryStatic(&xSemaphore.Process_NEXTION);
    }
#endif
}
 800c720:	e011      	b.n	800c746 <Process_NEXTION_Run+0x56>
    	__GL.itc.flag.wifi = FALSE;
 800c722:	4a0c      	ldr	r2, [pc, #48]	; (800c754 <Process_NEXTION_Run+0x64>)
 800c724:	f892 3b00 	ldrb.w	r3, [r2, #2816]	; 0xb00
 800c728:	f36f 1304 	bfc	r3, #4, #1
 800c72c:	f882 3b00 	strb.w	r3, [r2, #2816]	; 0xb00
        xSemHandle.Process_NEXTION = xSemaphoreCreateBinaryStatic(&xSemaphore.Process_NEXTION);
 800c730:	2303      	movs	r3, #3
 800c732:	9300      	str	r3, [sp, #0]
 800c734:	4b08      	ldr	r3, [pc, #32]	; (800c758 <Process_NEXTION_Run+0x68>)
 800c736:	2200      	movs	r2, #0
 800c738:	2100      	movs	r1, #0
 800c73a:	2001      	movs	r0, #1
 800c73c:	f7fc fcd2 	bl	80090e4 <xQueueGenericCreateStatic>
 800c740:	4603      	mov	r3, r0
 800c742:	4a02      	ldr	r2, [pc, #8]	; (800c74c <Process_NEXTION_Run+0x5c>)
 800c744:	6153      	str	r3, [r2, #20]
}
 800c746:	bf00      	nop
 800c748:	46bd      	mov	sp, r7
 800c74a:	bd80      	pop	{r7, pc}
 800c74c:	2000a680 	.word	0x2000a680
 800c750:	2000a698 	.word	0x2000a698
 800c754:	200000a4 	.word	0x200000a4
 800c758:	2000a630 	.word	0x2000a630

0800c75c <ModuleCAN_HWInit>:
	 @return  : 
	 @date	  : 
	 @INFO		:	
********************************************************************************/
void ModuleCAN_HWInit(void)
{
 800c75c:	b480      	push	{r7}
 800c75e:	af00      	add	r7, sp, #0
	//@INFO: WIFI thread'ine ait donanımsal init fonksiyonları
}
 800c760:	bf00      	nop
 800c762:	46bd      	mov	sp, r7
 800c764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c768:	4770      	bx	lr

0800c76a <ModuleCAN_SWInit>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModuleCAN_SWInit(void)
{
 800c76a:	b480      	push	{r7}
 800c76c:	af00      	add	r7, sp, #0
	//@INFO: WIFI thread'ine ait yazilimsal init fonksiyonları
}
 800c76e:	bf00      	nop
 800c770:	46bd      	mov	sp, r7
 800c772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c776:	4770      	bx	lr

0800c778 <ModuleCAN_StartUP>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModuleCAN_StartUP(void)
{
 800c778:	b580      	push	{r7, lr}
 800c77a:	af00      	add	r7, sp, #0
	ModuleCAN_HWInit();
 800c77c:	f7ff ffee 	bl	800c75c <ModuleCAN_HWInit>
	ModuleCAN_SWInit();
 800c780:	f7ff fff3 	bl	800c76a <ModuleCAN_SWInit>
}
 800c784:	bf00      	nop
 800c786:	bd80      	pop	{r7, pc}

0800c788 <ModuleCAN_MAIN_Routine>:
	 @date	  :
	 @INFO		:
********************************************************************************/

void ModuleCAN_MAIN_Routine(void)
{
 800c788:	b480      	push	{r7}
 800c78a:	af00      	add	r7, sp, #0

}
 800c78c:	bf00      	nop
 800c78e:	46bd      	mov	sp, r7
 800c790:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c794:	4770      	bx	lr

0800c796 <ModuleCAN_MAIN_Process>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModuleCAN_MAIN_Process(void)
{
 800c796:	b480      	push	{r7}
 800c798:	af00      	add	r7, sp, #0

}
 800c79a:	bf00      	nop
 800c79c:	46bd      	mov	sp, r7
 800c79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a2:	4770      	bx	lr

0800c7a4 <ModuleCAN_MAIN>:
	 @date	  :
	 @INFO		:
********************************************************************************/

void ModuleCAN_MAIN(void)
{
 800c7a4:	b580      	push	{r7, lr}
 800c7a6:	af00      	add	r7, sp, #0
	ModuleCAN_StartUP();
 800c7a8:	f7ff ffe6 	bl	800c778 <ModuleCAN_StartUP>


		switch(ModuleCAN_MAIN_State)
 800c7ac:	4b11      	ldr	r3, [pc, #68]	; (800c7f4 <ModuleCAN_MAIN+0x50>)
 800c7ae:	781b      	ldrb	r3, [r3, #0]
 800c7b0:	2b03      	cmp	r3, #3
 800c7b2:	d819      	bhi.n	800c7e8 <ModuleCAN_MAIN+0x44>
 800c7b4:	a201      	add	r2, pc, #4	; (adr r2, 800c7bc <ModuleCAN_MAIN+0x18>)
 800c7b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7ba:	bf00      	nop
 800c7bc:	0800c7cd 	.word	0x0800c7cd
 800c7c0:	0800c7d5 	.word	0x0800c7d5
 800c7c4:	0800c7db 	.word	0x0800c7db
 800c7c8:	0800c7e1 	.word	0x0800c7e1
		{
		    case ModuleCAN_MAIN_State_IDLE:
		    	//@INFO: IDLE Operations ..
		    	ModuleCAN_MAIN_State = ModuleCAN_MAIN_State_ROUTINE;
 800c7cc:	4b09      	ldr	r3, [pc, #36]	; (800c7f4 <ModuleCAN_MAIN+0x50>)
 800c7ce:	2201      	movs	r2, #1
 800c7d0:	701a      	strb	r2, [r3, #0]
		    break;
 800c7d2:	e00d      	b.n	800c7f0 <ModuleCAN_MAIN+0x4c>

		    case ModuleCAN_MAIN_State_ROUTINE:

		    	ModuleCAN_MAIN_Routine();
 800c7d4:	f7ff ffd8 	bl	800c788 <ModuleCAN_MAIN_Routine>
		    break;
 800c7d8:	e00a      	b.n	800c7f0 <ModuleCAN_MAIN+0x4c>

		    case ModuleCAN_MAIN_State_PROCESS:

		    	ModuleCAN_MAIN_Process();
 800c7da:	f7ff ffdc 	bl	800c796 <ModuleCAN_MAIN_Process>

		    break;
 800c7de:	e007      	b.n	800c7f0 <ModuleCAN_MAIN+0x4c>

		    case ModuleCAN_MAIN_State_SUSPEND:
		    	ModuleCAN_MAIN_State = ModuleCAN_MAIN_State_IDLE;
 800c7e0:	4b04      	ldr	r3, [pc, #16]	; (800c7f4 <ModuleCAN_MAIN+0x50>)
 800c7e2:	2200      	movs	r2, #0
 800c7e4:	701a      	strb	r2, [r3, #0]
		    break;
 800c7e6:	e003      	b.n	800c7f0 <ModuleCAN_MAIN+0x4c>

		    default:
		    	ModuleCAN_MAIN_State = ModuleCAN_MAIN_State_SUSPEND;
 800c7e8:	4b02      	ldr	r3, [pc, #8]	; (800c7f4 <ModuleCAN_MAIN+0x50>)
 800c7ea:	2203      	movs	r2, #3
 800c7ec:	701a      	strb	r2, [r3, #0]
		    break;
 800c7ee:	bf00      	nop

		}

}
 800c7f0:	bf00      	nop
 800c7f2:	bd80      	pop	{r7, pc}
 800c7f4:	2000a710 	.word	0x2000a710

0800c7f8 <ModuleFlash_HWInit>:
	 @return  : 
	 @date	  : 
	 @INFO		:	
********************************************************************************/
void ModuleFlash_HWInit(void)
{
 800c7f8:	b480      	push	{r7}
 800c7fa:	af00      	add	r7, sp, #0
	//@INFO: WIFI thread'ine ait donanımsal init fonksiyonları
}
 800c7fc:	bf00      	nop
 800c7fe:	46bd      	mov	sp, r7
 800c800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c804:	4770      	bx	lr

0800c806 <ModuleFlash_SWInit>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModuleFlash_SWInit(void)
{
 800c806:	b480      	push	{r7}
 800c808:	af00      	add	r7, sp, #0
	//@INFO: WIFI thread'ine ait yazilimsal init fonksiyonları
}
 800c80a:	bf00      	nop
 800c80c:	46bd      	mov	sp, r7
 800c80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c812:	4770      	bx	lr

0800c814 <ModuleFlash_StartUP>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModuleFlash_StartUP(void)
{
 800c814:	b580      	push	{r7, lr}
 800c816:	af00      	add	r7, sp, #0
	ModuleFlash_HWInit();
 800c818:	f7ff ffee 	bl	800c7f8 <ModuleFlash_HWInit>
	ModuleFlash_SWInit();
 800c81c:	f7ff fff3 	bl	800c806 <ModuleFlash_SWInit>
}
 800c820:	bf00      	nop
 800c822:	bd80      	pop	{r7, pc}

0800c824 <ModuleFlash_MAIN_Routine>:
	 @date	  :
	 @INFO		:
********************************************************************************/

void ModuleFlash_MAIN_Routine(void)
{
 800c824:	b480      	push	{r7}
 800c826:	af00      	add	r7, sp, #0

}
 800c828:	bf00      	nop
 800c82a:	46bd      	mov	sp, r7
 800c82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c830:	4770      	bx	lr

0800c832 <ModuleFlash_MAIN_Process>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModuleFlash_MAIN_Process(void)
{
 800c832:	b480      	push	{r7}
 800c834:	af00      	add	r7, sp, #0

}
 800c836:	bf00      	nop
 800c838:	46bd      	mov	sp, r7
 800c83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c83e:	4770      	bx	lr

0800c840 <ModuleFlash_MAIN>:
	 @date	  :
	 @INFO		:
********************************************************************************/

void ModuleFlash_MAIN(void)
{
 800c840:	b580      	push	{r7, lr}
 800c842:	af00      	add	r7, sp, #0

	switch(ModuleFlash_MAIN_State)
 800c844:	4b11      	ldr	r3, [pc, #68]	; (800c88c <ModuleFlash_MAIN+0x4c>)
 800c846:	781b      	ldrb	r3, [r3, #0]
 800c848:	2b03      	cmp	r3, #3
 800c84a:	d819      	bhi.n	800c880 <ModuleFlash_MAIN+0x40>
 800c84c:	a201      	add	r2, pc, #4	; (adr r2, 800c854 <ModuleFlash_MAIN+0x14>)
 800c84e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c852:	bf00      	nop
 800c854:	0800c865 	.word	0x0800c865
 800c858:	0800c86d 	.word	0x0800c86d
 800c85c:	0800c873 	.word	0x0800c873
 800c860:	0800c879 	.word	0x0800c879
	{
	    case ModuleFlash_MAIN_State_IDLE:
	    	//@INFO: IDLE Operations ..
	    	ModuleFlash_MAIN_State = ModuleFlash_MAIN_State_ROUTINE;
 800c864:	4b09      	ldr	r3, [pc, #36]	; (800c88c <ModuleFlash_MAIN+0x4c>)
 800c866:	2201      	movs	r2, #1
 800c868:	701a      	strb	r2, [r3, #0]
	    break;
 800c86a:	e00d      	b.n	800c888 <ModuleFlash_MAIN+0x48>

	    case ModuleFlash_MAIN_State_ROUTINE:

	    	ModuleFlash_MAIN_Routine();
 800c86c:	f7ff ffda 	bl	800c824 <ModuleFlash_MAIN_Routine>
	    break;
 800c870:	e00a      	b.n	800c888 <ModuleFlash_MAIN+0x48>

	    case ModuleFlash_MAIN_State_PROCESS:

	    	ModuleFlash_MAIN_Process();
 800c872:	f7ff ffde 	bl	800c832 <ModuleFlash_MAIN_Process>

	    break;
 800c876:	e007      	b.n	800c888 <ModuleFlash_MAIN+0x48>

	    case ModuleFlash_MAIN_State_SUSPEND:
	    	ModuleFlash_MAIN_State = ModuleFlash_MAIN_State_IDLE;
 800c878:	4b04      	ldr	r3, [pc, #16]	; (800c88c <ModuleFlash_MAIN+0x4c>)
 800c87a:	2200      	movs	r2, #0
 800c87c:	701a      	strb	r2, [r3, #0]
	    break;
 800c87e:	e003      	b.n	800c888 <ModuleFlash_MAIN+0x48>

	    default:
	    	ModuleFlash_MAIN_State = ModuleFlash_MAIN_State_SUSPEND;
 800c880:	4b02      	ldr	r3, [pc, #8]	; (800c88c <ModuleFlash_MAIN+0x4c>)
 800c882:	2203      	movs	r2, #3
 800c884:	701a      	strb	r2, [r3, #0]
	    break;
 800c886:	bf00      	nop

	}

}
 800c888:	bf00      	nop
 800c88a:	bd80      	pop	{r7, pc}
 800c88c:	2000a711 	.word	0x2000a711

0800c890 <ModuleNEXTION_HWInit>:
	 @return  : 
	 @date	  : 
	 @INFO		:	
********************************************************************************/
void ModuleNEXTION_HWInit(void)
{
 800c890:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c892:	b091      	sub	sp, #68	; 0x44
 800c894:	af10      	add	r7, sp, #64	; 0x40
	 CTOR_nextion(&nextion,huart1,nexOps);
 800c896:	4e0e      	ldr	r6, [pc, #56]	; (800c8d0 <ModuleNEXTION_HWInit+0x40>)
 800c898:	4a0e      	ldr	r2, [pc, #56]	; (800c8d4 <ModuleNEXTION_HWInit+0x44>)
 800c89a:	ab0e      	add	r3, sp, #56	; 0x38
 800c89c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c8a0:	e883 0003 	stmia.w	r3, {r0, r1}
 800c8a4:	466d      	mov	r5, sp
 800c8a6:	f106 040c 	add.w	r4, r6, #12
 800c8aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c8ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c8ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c8b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c8b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c8b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c8b6:	e894 0003 	ldmia.w	r4, {r0, r1}
 800c8ba:	e885 0003 	stmia.w	r5, {r0, r1}
 800c8be:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800c8c2:	4805      	ldr	r0, [pc, #20]	; (800c8d8 <ModuleNEXTION_HWInit+0x48>)
 800c8c4:	f7f5 f8df 	bl	8001a86 <CTOR_nextion>


	//@INFO: NEXTION thread'ine ait donanımsal init fonksiyonları
}
 800c8c8:	bf00      	nop
 800c8ca:	3704      	adds	r7, #4
 800c8cc:	46bd      	mov	sp, r7
 800c8ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c8d0:	2000138c 	.word	0x2000138c
 800c8d4:	0800db68 	.word	0x0800db68
 800c8d8:	2000a714 	.word	0x2000a714

0800c8dc <ModuleNEXTION_SWInit>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModuleNEXTION_SWInit(void)
{
 800c8dc:	b480      	push	{r7}
 800c8de:	af00      	add	r7, sp, #0
	//@INFO: NEXTION thread'ine ait yazilimsal init fonksiyonları
}
 800c8e0:	bf00      	nop
 800c8e2:	46bd      	mov	sp, r7
 800c8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8e8:	4770      	bx	lr

0800c8ea <ModuleNEXTION_StartUP>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModuleNEXTION_StartUP(void)
{
 800c8ea:	b580      	push	{r7, lr}
 800c8ec:	af00      	add	r7, sp, #0
	ModuleNEXTION_HWInit();
 800c8ee:	f7ff ffcf 	bl	800c890 <ModuleNEXTION_HWInit>
	ModuleNEXTION_SWInit();
 800c8f2:	f7ff fff3 	bl	800c8dc <ModuleNEXTION_SWInit>
}
 800c8f6:	bf00      	nop
 800c8f8:	bd80      	pop	{r7, pc}

0800c8fa <ModuleNEXTION_MAIN_Routine>:
	 @date	  :
	 @INFO	  :
********************************************************************************/

void ModuleNEXTION_MAIN_Routine(void)
{
 800c8fa:	b480      	push	{r7}
 800c8fc:	af00      	add	r7, sp, #0




}
 800c8fe:	bf00      	nop
 800c900:	46bd      	mov	sp, r7
 800c902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c906:	4770      	bx	lr

0800c908 <ModuleNEXTION_MAIN_Process>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModuleNEXTION_MAIN_Process(void)
{
 800c908:	b580      	push	{r7, lr}
 800c90a:	af00      	add	r7, sp, #0


	switch(ModuleNEXTION_PROCESS_State)
 800c90c:	4b72      	ldr	r3, [pc, #456]	; (800cad8 <ModuleNEXTION_MAIN_Process+0x1d0>)
 800c90e:	781b      	ldrb	r3, [r3, #0]
 800c910:	2b10      	cmp	r3, #16
 800c912:	f200 80dd 	bhi.w	800cad0 <ModuleNEXTION_MAIN_Process+0x1c8>
 800c916:	a201      	add	r2, pc, #4	; (adr r2, 800c91c <ModuleNEXTION_MAIN_Process+0x14>)
 800c918:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c91c:	0800c961 	.word	0x0800c961
 800c920:	0800c979 	.word	0x0800c979
 800c924:	0800c991 	.word	0x0800c991
 800c928:	0800c9a9 	.word	0x0800c9a9
 800c92c:	0800c9c1 	.word	0x0800c9c1
 800c930:	0800c9d9 	.word	0x0800c9d9
 800c934:	0800c9f1 	.word	0x0800c9f1
 800c938:	0800ca0b 	.word	0x0800ca0b
 800c93c:	0800ca23 	.word	0x0800ca23
 800c940:	0800ca3b 	.word	0x0800ca3b
 800c944:	0800cad1 	.word	0x0800cad1
 800c948:	0800cad1 	.word	0x0800cad1
 800c94c:	0800ca53 	.word	0x0800ca53
 800c950:	0800ca6b 	.word	0x0800ca6b
 800c954:	0800ca83 	.word	0x0800ca83
 800c958:	0800ca9d 	.word	0x0800ca9d
 800c95c:	0800cab7 	.word	0x0800cab7
		{
		    case ModuleNEXTION_PROCESS_State_RF_SIGNAL:

                nextion.ops.sendCmd(&nextion.obj,RF_SIGNAL,__GL.nextion.icons.flags.rf);
 800c960:	4b5e      	ldr	r3, [pc, #376]	; (800cadc <ModuleNEXTION_MAIN_Process+0x1d4>)
 800c962:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c964:	4a5e      	ldr	r2, [pc, #376]	; (800cae0 <ModuleNEXTION_MAIN_Process+0x1d8>)
 800c966:	f892 2900 	ldrb.w	r2, [r2, #2304]	; 0x900
 800c96a:	f3c2 0200 	ubfx	r2, r2, #0, #1
 800c96e:	b2d2      	uxtb	r2, r2
 800c970:	495c      	ldr	r1, [pc, #368]	; (800cae4 <ModuleNEXTION_MAIN_Process+0x1dc>)
 800c972:	485a      	ldr	r0, [pc, #360]	; (800cadc <ModuleNEXTION_MAIN_Process+0x1d4>)
 800c974:	4798      	blx	r3


		    break;
 800c976:	e0ac      	b.n	800cad2 <ModuleNEXTION_MAIN_Process+0x1ca>

		    case ModuleNEXTION_PROCESS_State_WI_FI:

		    	nextion.ops.sendCmd(&nextion.obj,WI_FI,__GL.nextion.icons.flags.wi_fi);
 800c978:	4b58      	ldr	r3, [pc, #352]	; (800cadc <ModuleNEXTION_MAIN_Process+0x1d4>)
 800c97a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c97c:	4a58      	ldr	r2, [pc, #352]	; (800cae0 <ModuleNEXTION_MAIN_Process+0x1d8>)
 800c97e:	f892 2900 	ldrb.w	r2, [r2, #2304]	; 0x900
 800c982:	f3c2 0240 	ubfx	r2, r2, #1, #1
 800c986:	b2d2      	uxtb	r2, r2
 800c988:	4957      	ldr	r1, [pc, #348]	; (800cae8 <ModuleNEXTION_MAIN_Process+0x1e0>)
 800c98a:	4854      	ldr	r0, [pc, #336]	; (800cadc <ModuleNEXTION_MAIN_Process+0x1d4>)
 800c98c:	4798      	blx	r3

		    break;
 800c98e:	e0a0      	b.n	800cad2 <ModuleNEXTION_MAIN_Process+0x1ca>

		    case ModuleNEXTION_PROCESS_State_LEFT_SIGNAL:

		    	nextion.ops.sendCmd(&nextion.obj,LEFT_SIGNAL,__GL.nextion.icons.flags.left_signal);
 800c990:	4b52      	ldr	r3, [pc, #328]	; (800cadc <ModuleNEXTION_MAIN_Process+0x1d4>)
 800c992:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c994:	4a52      	ldr	r2, [pc, #328]	; (800cae0 <ModuleNEXTION_MAIN_Process+0x1d8>)
 800c996:	f892 2900 	ldrb.w	r2, [r2, #2304]	; 0x900
 800c99a:	f3c2 0280 	ubfx	r2, r2, #2, #1
 800c99e:	b2d2      	uxtb	r2, r2
 800c9a0:	4952      	ldr	r1, [pc, #328]	; (800caec <ModuleNEXTION_MAIN_Process+0x1e4>)
 800c9a2:	484e      	ldr	r0, [pc, #312]	; (800cadc <ModuleNEXTION_MAIN_Process+0x1d4>)
 800c9a4:	4798      	blx	r3

		    break;
 800c9a6:	e094      	b.n	800cad2 <ModuleNEXTION_MAIN_Process+0x1ca>

		    case ModuleNEXTION_PROCESS_State_RIGT_SIGNAL:

		    	nextion.ops.sendCmd(&nextion.obj,RIGT_SIGNAL,__GL.nextion.icons.flags.right_signal);
 800c9a8:	4b4c      	ldr	r3, [pc, #304]	; (800cadc <ModuleNEXTION_MAIN_Process+0x1d4>)
 800c9aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c9ac:	4a4c      	ldr	r2, [pc, #304]	; (800cae0 <ModuleNEXTION_MAIN_Process+0x1d8>)
 800c9ae:	f892 2900 	ldrb.w	r2, [r2, #2304]	; 0x900
 800c9b2:	f3c2 02c0 	ubfx	r2, r2, #3, #1
 800c9b6:	b2d2      	uxtb	r2, r2
 800c9b8:	494d      	ldr	r1, [pc, #308]	; (800caf0 <ModuleNEXTION_MAIN_Process+0x1e8>)
 800c9ba:	4848      	ldr	r0, [pc, #288]	; (800cadc <ModuleNEXTION_MAIN_Process+0x1d4>)
 800c9bc:	4798      	blx	r3

		    break;
 800c9be:	e088      	b.n	800cad2 <ModuleNEXTION_MAIN_Process+0x1ca>

		    case ModuleNEXTION_PROCESS_State_HEAD_LIGHT:

		    	nextion.ops.sendCmd(&nextion.obj, HEAD_LIGHT, __GL.nextion.icons.flags.head_light);
 800c9c0:	4b46      	ldr	r3, [pc, #280]	; (800cadc <ModuleNEXTION_MAIN_Process+0x1d4>)
 800c9c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c9c4:	4a46      	ldr	r2, [pc, #280]	; (800cae0 <ModuleNEXTION_MAIN_Process+0x1d8>)
 800c9c6:	f892 2900 	ldrb.w	r2, [r2, #2304]	; 0x900
 800c9ca:	f3c2 1200 	ubfx	r2, r2, #4, #1
 800c9ce:	b2d2      	uxtb	r2, r2
 800c9d0:	4948      	ldr	r1, [pc, #288]	; (800caf4 <ModuleNEXTION_MAIN_Process+0x1ec>)
 800c9d2:	4842      	ldr	r0, [pc, #264]	; (800cadc <ModuleNEXTION_MAIN_Process+0x1d4>)
 800c9d4:	4798      	blx	r3

		    break;
 800c9d6:	e07c      	b.n	800cad2 <ModuleNEXTION_MAIN_Process+0x1ca>

		    case ModuleNEXTION_PROCESS_State_WIPERS:

		    	nextion.ops.sendCmd(&nextion.obj,WIPERS,__GL.nextion.icons.flags.wipers);
 800c9d8:	4b40      	ldr	r3, [pc, #256]	; (800cadc <ModuleNEXTION_MAIN_Process+0x1d4>)
 800c9da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c9dc:	4a40      	ldr	r2, [pc, #256]	; (800cae0 <ModuleNEXTION_MAIN_Process+0x1d8>)
 800c9de:	f892 2900 	ldrb.w	r2, [r2, #2304]	; 0x900
 800c9e2:	f3c2 1240 	ubfx	r2, r2, #5, #1
 800c9e6:	b2d2      	uxtb	r2, r2
 800c9e8:	4943      	ldr	r1, [pc, #268]	; (800caf8 <ModuleNEXTION_MAIN_Process+0x1f0>)
 800c9ea:	483c      	ldr	r0, [pc, #240]	; (800cadc <ModuleNEXTION_MAIN_Process+0x1d4>)
 800c9ec:	4798      	blx	r3

		    break;
 800c9ee:	e070      	b.n	800cad2 <ModuleNEXTION_MAIN_Process+0x1ca>

		    case ModuleNEXTION_PROCESS_State_WHEEL_ANGLE:

		    	nextion.ops.sendNum(&nextion.obj,WHEEL_ANGLE_R,25);
 800c9f0:	4b3a      	ldr	r3, [pc, #232]	; (800cadc <ModuleNEXTION_MAIN_Process+0x1d4>)
 800c9f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c9f4:	2219      	movs	r2, #25
 800c9f6:	4941      	ldr	r1, [pc, #260]	; (800cafc <ModuleNEXTION_MAIN_Process+0x1f4>)
 800c9f8:	4838      	ldr	r0, [pc, #224]	; (800cadc <ModuleNEXTION_MAIN_Process+0x1d4>)
 800c9fa:	4798      	blx	r3
		    	nextion.ops.sendNum(&nextion.obj,WHEEL_ANGLE_L,20);
 800c9fc:	4b37      	ldr	r3, [pc, #220]	; (800cadc <ModuleNEXTION_MAIN_Process+0x1d4>)
 800c9fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ca00:	2214      	movs	r2, #20
 800ca02:	493f      	ldr	r1, [pc, #252]	; (800cb00 <ModuleNEXTION_MAIN_Process+0x1f8>)
 800ca04:	4835      	ldr	r0, [pc, #212]	; (800cadc <ModuleNEXTION_MAIN_Process+0x1d4>)
 800ca06:	4798      	blx	r3

		    break;
 800ca08:	e063      	b.n	800cad2 <ModuleNEXTION_MAIN_Process+0x1ca>


		    case ModuleNEXTION_PROCESS_State_UP_HILL:

		    nextion.ops.sendCmd(&nextion.obj,UP_HILL,__GL.nextion.icons.flags.up_hıll);
 800ca0a:	4b34      	ldr	r3, [pc, #208]	; (800cadc <ModuleNEXTION_MAIN_Process+0x1d4>)
 800ca0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca0e:	4a34      	ldr	r2, [pc, #208]	; (800cae0 <ModuleNEXTION_MAIN_Process+0x1d8>)
 800ca10:	f892 2901 	ldrb.w	r2, [r2, #2305]	; 0x901
 800ca14:	f3c2 0200 	ubfx	r2, r2, #0, #1
 800ca18:	b2d2      	uxtb	r2, r2
 800ca1a:	493a      	ldr	r1, [pc, #232]	; (800cb04 <ModuleNEXTION_MAIN_Process+0x1fc>)
 800ca1c:	482f      	ldr	r0, [pc, #188]	; (800cadc <ModuleNEXTION_MAIN_Process+0x1d4>)
 800ca1e:	4798      	blx	r3


		    break;
 800ca20:	e057      	b.n	800cad2 <ModuleNEXTION_MAIN_Process+0x1ca>

		    case ModuleNEXTION_PROCESS_State_DOWN_HILL:

		    	nextion.ops.sendCmd(&nextion.obj,DOWN_HILL,__GL.nextion.icons.flags.down_hıll);
 800ca22:	4b2e      	ldr	r3, [pc, #184]	; (800cadc <ModuleNEXTION_MAIN_Process+0x1d4>)
 800ca24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca26:	4a2e      	ldr	r2, [pc, #184]	; (800cae0 <ModuleNEXTION_MAIN_Process+0x1d8>)
 800ca28:	f892 2901 	ldrb.w	r2, [r2, #2305]	; 0x901
 800ca2c:	f3c2 0240 	ubfx	r2, r2, #1, #1
 800ca30:	b2d2      	uxtb	r2, r2
 800ca32:	4935      	ldr	r1, [pc, #212]	; (800cb08 <ModuleNEXTION_MAIN_Process+0x200>)
 800ca34:	4829      	ldr	r0, [pc, #164]	; (800cadc <ModuleNEXTION_MAIN_Process+0x1d4>)
 800ca36:	4798      	blx	r3


		    break;
 800ca38:	e04b      	b.n	800cad2 <ModuleNEXTION_MAIN_Process+0x1ca>

		    case ModuleNEXTION_PROCESS_State_STRAIGHT:

		    	nextion.ops.sendCmd(&nextion.obj,STRAIGHT,__GL.nextion.icons.flags.straight);
 800ca3a:	4b28      	ldr	r3, [pc, #160]	; (800cadc <ModuleNEXTION_MAIN_Process+0x1d4>)
 800ca3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca3e:	4a28      	ldr	r2, [pc, #160]	; (800cae0 <ModuleNEXTION_MAIN_Process+0x1d8>)
 800ca40:	f892 2901 	ldrb.w	r2, [r2, #2305]	; 0x901
 800ca44:	f3c2 0280 	ubfx	r2, r2, #2, #1
 800ca48:	b2d2      	uxtb	r2, r2
 800ca4a:	4930      	ldr	r1, [pc, #192]	; (800cb0c <ModuleNEXTION_MAIN_Process+0x204>)
 800ca4c:	4823      	ldr	r0, [pc, #140]	; (800cadc <ModuleNEXTION_MAIN_Process+0x1d4>)
 800ca4e:	4798      	blx	r3

		    break;
 800ca50:	e03f      	b.n	800cad2 <ModuleNEXTION_MAIN_Process+0x1ca>

		    case ModuleNEXTION_PROCESS_State_HAND_BREAK:

		    	nextion.ops.sendCmd(&nextion.obj,HAND_BREAK,__GL.nextion.icons.flags.hand_breaker);
 800ca52:	4b22      	ldr	r3, [pc, #136]	; (800cadc <ModuleNEXTION_MAIN_Process+0x1d4>)
 800ca54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca56:	4a22      	ldr	r2, [pc, #136]	; (800cae0 <ModuleNEXTION_MAIN_Process+0x1d8>)
 800ca58:	f892 2901 	ldrb.w	r2, [r2, #2305]	; 0x901
 800ca5c:	f3c2 1200 	ubfx	r2, r2, #4, #1
 800ca60:	b2d2      	uxtb	r2, r2
 800ca62:	492b      	ldr	r1, [pc, #172]	; (800cb10 <ModuleNEXTION_MAIN_Process+0x208>)
 800ca64:	481d      	ldr	r0, [pc, #116]	; (800cadc <ModuleNEXTION_MAIN_Process+0x1d4>)
 800ca66:	4798      	blx	r3

		    break;
 800ca68:	e033      	b.n	800cad2 <ModuleNEXTION_MAIN_Process+0x1ca>

		    case ModuleNEXTION_PROCESS_State_FLASHER:

		    	nextion.ops.sendCmd(&nextion.obj,FLASHER,__GL.nextion.icons.flags.flasher);
 800ca6a:	4b1c      	ldr	r3, [pc, #112]	; (800cadc <ModuleNEXTION_MAIN_Process+0x1d4>)
 800ca6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca6e:	4a1c      	ldr	r2, [pc, #112]	; (800cae0 <ModuleNEXTION_MAIN_Process+0x1d8>)
 800ca70:	f892 2901 	ldrb.w	r2, [r2, #2305]	; 0x901
 800ca74:	f3c2 1240 	ubfx	r2, r2, #5, #1
 800ca78:	b2d2      	uxtb	r2, r2
 800ca7a:	4926      	ldr	r1, [pc, #152]	; (800cb14 <ModuleNEXTION_MAIN_Process+0x20c>)
 800ca7c:	4817      	ldr	r0, [pc, #92]	; (800cadc <ModuleNEXTION_MAIN_Process+0x1d4>)
 800ca7e:	4798      	blx	r3

		    break;
 800ca80:	e027      	b.n	800cad2 <ModuleNEXTION_MAIN_Process+0x1ca>

		    case ModuleNEXTION_PROCESS_State_SPEED:

		    	nextion.ops.sendNum(&nextion.obj,SPEED,50);
 800ca82:	4b16      	ldr	r3, [pc, #88]	; (800cadc <ModuleNEXTION_MAIN_Process+0x1d4>)
 800ca84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ca86:	2232      	movs	r2, #50	; 0x32
 800ca88:	4923      	ldr	r1, [pc, #140]	; (800cb18 <ModuleNEXTION_MAIN_Process+0x210>)
 800ca8a:	4814      	ldr	r0, [pc, #80]	; (800cadc <ModuleNEXTION_MAIN_Process+0x1d4>)
 800ca8c:	4798      	blx	r3
		    	nextion.ops.sendNum(&nextion.obj,SPEED_POINTER,50);
 800ca8e:	4b13      	ldr	r3, [pc, #76]	; (800cadc <ModuleNEXTION_MAIN_Process+0x1d4>)
 800ca90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ca92:	2232      	movs	r2, #50	; 0x32
 800ca94:	4921      	ldr	r1, [pc, #132]	; (800cb1c <ModuleNEXTION_MAIN_Process+0x214>)
 800ca96:	4811      	ldr	r0, [pc, #68]	; (800cadc <ModuleNEXTION_MAIN_Process+0x1d4>)
 800ca98:	4798      	blx	r3

		    break;
 800ca9a:	e01a      	b.n	800cad2 <ModuleNEXTION_MAIN_Process+0x1ca>

		    case ModuleNEXTION_PROCESS_State_RAIN:

		    	nextion.ops.sendNum(&nextion.obj,RAIN,__GL.nextion.icons.flags.rain);
 800ca9c:	4b0f      	ldr	r3, [pc, #60]	; (800cadc <ModuleNEXTION_MAIN_Process+0x1d4>)
 800ca9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800caa0:	4a0f      	ldr	r2, [pc, #60]	; (800cae0 <ModuleNEXTION_MAIN_Process+0x1d8>)
 800caa2:	f892 2901 	ldrb.w	r2, [r2, #2305]	; 0x901
 800caa6:	f3c2 1280 	ubfx	r2, r2, #6, #1
 800caaa:	b2d2      	uxtb	r2, r2
 800caac:	b292      	uxth	r2, r2
 800caae:	491c      	ldr	r1, [pc, #112]	; (800cb20 <ModuleNEXTION_MAIN_Process+0x218>)
 800cab0:	480a      	ldr	r0, [pc, #40]	; (800cadc <ModuleNEXTION_MAIN_Process+0x1d4>)
 800cab2:	4798      	blx	r3

		    break;
 800cab4:	e00d      	b.n	800cad2 <ModuleNEXTION_MAIN_Process+0x1ca>

		    case ModuleNEXTION_PROCESS_State_ENGINE_HEAT:

		   	nextion.ops.sendNum(&nextion.obj,ENGINE_HEAT,__GL.nextion.icons.flags.engine_heat);
 800cab6:	4b09      	ldr	r3, [pc, #36]	; (800cadc <ModuleNEXTION_MAIN_Process+0x1d4>)
 800cab8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800caba:	4a09      	ldr	r2, [pc, #36]	; (800cae0 <ModuleNEXTION_MAIN_Process+0x1d8>)
 800cabc:	f892 2901 	ldrb.w	r2, [r2, #2305]	; 0x901
 800cac0:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 800cac4:	b2d2      	uxtb	r2, r2
 800cac6:	b292      	uxth	r2, r2
 800cac8:	4916      	ldr	r1, [pc, #88]	; (800cb24 <ModuleNEXTION_MAIN_Process+0x21c>)
 800caca:	4804      	ldr	r0, [pc, #16]	; (800cadc <ModuleNEXTION_MAIN_Process+0x1d4>)
 800cacc:	4798      	blx	r3

		   	break;
 800cace:	e000      	b.n	800cad2 <ModuleNEXTION_MAIN_Process+0x1ca>

		    default:

		    break;
 800cad0:	bf00      	nop

		}

}
 800cad2:	bf00      	nop
 800cad4:	bd80      	pop	{r7, pc}
 800cad6:	bf00      	nop
 800cad8:	2000a713 	.word	0x2000a713
 800cadc:	2000a714 	.word	0x2000a714
 800cae0:	200000a4 	.word	0x200000a4
 800cae4:	0800d9fc 	.word	0x0800d9fc
 800cae8:	0800da08 	.word	0x0800da08
 800caec:	0800da10 	.word	0x0800da10
 800caf0:	0800da1c 	.word	0x0800da1c
 800caf4:	0800da2c 	.word	0x0800da2c
 800caf8:	0800da38 	.word	0x0800da38
 800cafc:	0800da40 	.word	0x0800da40
 800cb00:	0800da50 	.word	0x0800da50
 800cb04:	0800da60 	.word	0x0800da60
 800cb08:	0800da68 	.word	0x0800da68
 800cb0c:	0800da74 	.word	0x0800da74
 800cb10:	0800da80 	.word	0x0800da80
 800cb14:	0800da8c 	.word	0x0800da8c
 800cb18:	0800da94 	.word	0x0800da94
 800cb1c:	0800da9c 	.word	0x0800da9c
 800cb20:	0800daac 	.word	0x0800daac
 800cb24:	0800dab4 	.word	0x0800dab4

0800cb28 <ModuleNEXTION_MAIN>:
	 @date	  :
	 @INFO		:
********************************************************************************/

void ModuleNEXTION_MAIN(void)
{
 800cb28:	b580      	push	{r7, lr}
 800cb2a:	af00      	add	r7, sp, #0
	switch(ModuleNEXTION_MAIN_State)
 800cb2c:	4b11      	ldr	r3, [pc, #68]	; (800cb74 <ModuleNEXTION_MAIN+0x4c>)
 800cb2e:	781b      	ldrb	r3, [r3, #0]
 800cb30:	2b03      	cmp	r3, #3
 800cb32:	d819      	bhi.n	800cb68 <ModuleNEXTION_MAIN+0x40>
 800cb34:	a201      	add	r2, pc, #4	; (adr r2, 800cb3c <ModuleNEXTION_MAIN+0x14>)
 800cb36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb3a:	bf00      	nop
 800cb3c:	0800cb4d 	.word	0x0800cb4d
 800cb40:	0800cb55 	.word	0x0800cb55
 800cb44:	0800cb5b 	.word	0x0800cb5b
 800cb48:	0800cb61 	.word	0x0800cb61
	{
	    case ModuleNEXTION_MAIN_State_IDLE:
	    	//@INFO: IDLE Operations ..
	    	ModuleNEXTION_MAIN_State = ModuleNEXTION_MAIN_State_ROUTINE;
 800cb4c:	4b09      	ldr	r3, [pc, #36]	; (800cb74 <ModuleNEXTION_MAIN+0x4c>)
 800cb4e:	2201      	movs	r2, #1
 800cb50:	701a      	strb	r2, [r3, #0]
	    break;
 800cb52:	e00d      	b.n	800cb70 <ModuleNEXTION_MAIN+0x48>

	    case ModuleNEXTION_MAIN_State_ROUTINE:

	    	ModuleNEXTION_MAIN_Routine();
 800cb54:	f7ff fed1 	bl	800c8fa <ModuleNEXTION_MAIN_Routine>
	    break;
 800cb58:	e00a      	b.n	800cb70 <ModuleNEXTION_MAIN+0x48>

	    case ModuleNEXTION_MAIN_State_PROCESS:

	    	ModuleNEXTION_MAIN_Process();
 800cb5a:	f7ff fed5 	bl	800c908 <ModuleNEXTION_MAIN_Process>

	    break;
 800cb5e:	e007      	b.n	800cb70 <ModuleNEXTION_MAIN+0x48>

	    case ModuleNEXTION_MAIN_State_SUSPEND:
	    	ModuleNEXTION_MAIN_State = ModuleNEXTION_MAIN_State_IDLE;
 800cb60:	4b04      	ldr	r3, [pc, #16]	; (800cb74 <ModuleNEXTION_MAIN+0x4c>)
 800cb62:	2200      	movs	r2, #0
 800cb64:	701a      	strb	r2, [r3, #0]
	    break;
 800cb66:	e003      	b.n	800cb70 <ModuleNEXTION_MAIN+0x48>

	    default:
	    	ModuleNEXTION_MAIN_State = ModuleNEXTION_MAIN_State_SUSPEND;
 800cb68:	4b02      	ldr	r3, [pc, #8]	; (800cb74 <ModuleNEXTION_MAIN+0x4c>)
 800cb6a:	2203      	movs	r2, #3
 800cb6c:	701a      	strb	r2, [r3, #0]
	    break;
 800cb6e:	bf00      	nop

	}

}
 800cb70:	bf00      	nop
 800cb72:	bd80      	pop	{r7, pc}
 800cb74:	2000a712 	.word	0x2000a712

0800cb78 <ModuleRTC_HWInit>:
	 @return  : 
	 @date	  : 
	 @INFO		:	
********************************************************************************/
void ModuleRTC_HWInit(void)
{
 800cb78:	b5b0      	push	{r4, r5, r7, lr}
 800cb7a:	b0a8      	sub	sp, #160	; 0xa0
 800cb7c:	af28      	add	r7, sp, #160	; 0xa0

	CTOR_DS3231(&ds3231,
 800cb7e:	4c0f      	ldr	r4, [pc, #60]	; (800cbbc <ModuleRTC_HWInit+0x44>)
 800cb80:	4a0f      	ldr	r2, [pc, #60]	; (800cbc0 <ModuleRTC_HWInit+0x48>)
 800cb82:	ab17      	add	r3, sp, #92	; 0x5c
 800cb84:	4611      	mov	r1, r2
 800cb86:	2244      	movs	r2, #68	; 0x44
 800cb88:	4618      	mov	r0, r3
 800cb8a:	f000 fa09 	bl	800cfa0 <memcpy>
 800cb8e:	4b0d      	ldr	r3, [pc, #52]	; (800cbc4 <ModuleRTC_HWInit+0x4c>)
 800cb90:	9316      	str	r3, [sp, #88]	; 0x58
 800cb92:	4b0d      	ldr	r3, [pc, #52]	; (800cbc8 <ModuleRTC_HWInit+0x50>)
 800cb94:	ad12      	add	r5, sp, #72	; 0x48
 800cb96:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800cb98:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800cb9c:	4668      	mov	r0, sp
 800cb9e:	f104 030c 	add.w	r3, r4, #12
 800cba2:	2248      	movs	r2, #72	; 0x48
 800cba4:	4619      	mov	r1, r3
 800cba6:	f000 f9fb 	bl	800cfa0 <memcpy>
 800cbaa:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800cbae:	4807      	ldr	r0, [pc, #28]	; (800cbcc <ModuleRTC_HWInit+0x54>)
 800cbb0:	f7f4 fe2b 	bl	800180a <CTOR_DS3231>
			    &iniTime,
				 huart2);


	//@INFO: RTC thread'ine ait donanımsal init fonksiyonları
}
 800cbb4:	bf00      	nop
 800cbb6:	46bd      	mov	sp, r7
 800cbb8:	bdb0      	pop	{r4, r5, r7, pc}
 800cbba:	bf00      	nop
 800cbbc:	200010f8 	.word	0x200010f8
 800cbc0:	200013d0 	.word	0x200013d0
 800cbc4:	20000024 	.word	0x20000024
 800cbc8:	0800db58 	.word	0x0800db58
 800cbcc:	2000a790 	.word	0x2000a790

0800cbd0 <ModuleRTC_SWInit>:
	 @return  :
	 @date	  :
	 @INFO	  :
********************************************************************************/
void ModuleRTC_SWInit(void)
{
 800cbd0:	b580      	push	{r7, lr}
 800cbd2:	af00      	add	r7, sp, #0



	ds3231.ops.setTime(&ds3231.obj,&bcdFormat);
 800cbd4:	4b03      	ldr	r3, [pc, #12]	; (800cbe4 <ModuleRTC_SWInit+0x14>)
 800cbd6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cbd8:	4903      	ldr	r1, [pc, #12]	; (800cbe8 <ModuleRTC_SWInit+0x18>)
 800cbda:	4802      	ldr	r0, [pc, #8]	; (800cbe4 <ModuleRTC_SWInit+0x14>)
 800cbdc:	4798      	blx	r3

	//@INFO: RTC thread'ine ait yazilimsal init fonksiyonları
}
 800cbde:	bf00      	nop
 800cbe0:	bd80      	pop	{r7, pc}
 800cbe2:	bf00      	nop
 800cbe4:	2000a790 	.word	0x2000a790
 800cbe8:	2000a824 	.word	0x2000a824

0800cbec <ModuleRTC_StartUP>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModuleRTC_StartUP(void)
{
 800cbec:	b580      	push	{r7, lr}
 800cbee:	af00      	add	r7, sp, #0
	ModuleRTC_HWInit();
 800cbf0:	f7ff ffc2 	bl	800cb78 <ModuleRTC_HWInit>
	ModuleRTC_SWInit();
 800cbf4:	f7ff ffec 	bl	800cbd0 <ModuleRTC_SWInit>
}
 800cbf8:	bf00      	nop
 800cbfa:	bd80      	pop	{r7, pc}

0800cbfc <ModuleRTC_MAIN_Routine>:
	 @date	  :
	 @INFO	  :
********************************************************************************/

void ModuleRTC_MAIN_Routine(void)
{
 800cbfc:	b590      	push	{r4, r7, lr}
 800cbfe:	b087      	sub	sp, #28
 800cc00:	af00      	add	r7, sp, #0
    uint8_t*rtcPtrGL=(uint8_t*)&__GL.rtc.main;
 800cc02:	4b16      	ldr	r3, [pc, #88]	; (800cc5c <ModuleRTC_MAIN_Routine+0x60>)
 800cc04:	617b      	str	r3, [r7, #20]
    uint8_t*rtcPtr=(uint8_t*)&timeTemp;
 800cc06:	4b16      	ldr	r3, [pc, #88]	; (800cc60 <ModuleRTC_MAIN_Routine+0x64>)
 800cc08:	613b      	str	r3, [r7, #16]

    timeTemp=ds3231.ops.getTime(&ds3231.obj,&bcdFormat);
 800cc0a:	4b16      	ldr	r3, [pc, #88]	; (800cc64 <ModuleRTC_MAIN_Routine+0x68>)
 800cc0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800cc10:	4c13      	ldr	r4, [pc, #76]	; (800cc60 <ModuleRTC_MAIN_Routine+0x64>)
 800cc12:	4638      	mov	r0, r7
 800cc14:	4a14      	ldr	r2, [pc, #80]	; (800cc68 <ModuleRTC_MAIN_Routine+0x6c>)
 800cc16:	4913      	ldr	r1, [pc, #76]	; (800cc64 <ModuleRTC_MAIN_Routine+0x68>)
 800cc18:	4798      	blx	r3
 800cc1a:	4622      	mov	r2, r4
 800cc1c:	463b      	mov	r3, r7
 800cc1e:	6818      	ldr	r0, [r3, #0]
 800cc20:	6010      	str	r0, [r2, #0]
 800cc22:	8899      	ldrh	r1, [r3, #4]
 800cc24:	799b      	ldrb	r3, [r3, #6]
 800cc26:	8091      	strh	r1, [r2, #4]
 800cc28:	7193      	strb	r3, [r2, #6]


    for(int i=0;i<sizeof(timeTemp);i++)
 800cc2a:	2300      	movs	r3, #0
 800cc2c:	60fb      	str	r3, [r7, #12]
 800cc2e:	e00c      	b.n	800cc4a <ModuleRTC_MAIN_Routine+0x4e>
    {
     *rtcPtrGL=*rtcPtr;
 800cc30:	693b      	ldr	r3, [r7, #16]
 800cc32:	781a      	ldrb	r2, [r3, #0]
 800cc34:	697b      	ldr	r3, [r7, #20]
 800cc36:	701a      	strb	r2, [r3, #0]
      rtcPtr++;
 800cc38:	693b      	ldr	r3, [r7, #16]
 800cc3a:	3301      	adds	r3, #1
 800cc3c:	613b      	str	r3, [r7, #16]
      rtcPtrGL++;
 800cc3e:	697b      	ldr	r3, [r7, #20]
 800cc40:	3301      	adds	r3, #1
 800cc42:	617b      	str	r3, [r7, #20]
    for(int i=0;i<sizeof(timeTemp);i++)
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	3301      	adds	r3, #1
 800cc48:	60fb      	str	r3, [r7, #12]
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	2b06      	cmp	r3, #6
 800cc4e:	d9ef      	bls.n	800cc30 <ModuleRTC_MAIN_Routine+0x34>
    }

}
 800cc50:	bf00      	nop
 800cc52:	bf00      	nop
 800cc54:	371c      	adds	r7, #28
 800cc56:	46bd      	mov	sp, r7
 800cc58:	bd90      	pop	{r4, r7, pc}
 800cc5a:	bf00      	nop
 800cc5c:	200004a4 	.word	0x200004a4
 800cc60:	2000a81c 	.word	0x2000a81c
 800cc64:	2000a790 	.word	0x2000a790
 800cc68:	2000a824 	.word	0x2000a824

0800cc6c <ModuleRTC_MAIN_Process>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModuleRTC_MAIN_Process(void)
{
 800cc6c:	b480      	push	{r7}
 800cc6e:	af00      	add	r7, sp, #0

}
 800cc70:	bf00      	nop
 800cc72:	46bd      	mov	sp, r7
 800cc74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc78:	4770      	bx	lr
	...

0800cc7c <ModuleRTC_MAIN>:
	 @date	  :
	 @INFO		:
********************************************************************************/

void ModuleRTC_MAIN(void)
{
 800cc7c:	b580      	push	{r7, lr}
 800cc7e:	af00      	add	r7, sp, #0
	switch(ModuleRTC_MAIN_State)
 800cc80:	4b11      	ldr	r3, [pc, #68]	; (800ccc8 <ModuleRTC_MAIN+0x4c>)
 800cc82:	781b      	ldrb	r3, [r3, #0]
 800cc84:	2b03      	cmp	r3, #3
 800cc86:	d819      	bhi.n	800ccbc <ModuleRTC_MAIN+0x40>
 800cc88:	a201      	add	r2, pc, #4	; (adr r2, 800cc90 <ModuleRTC_MAIN+0x14>)
 800cc8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc8e:	bf00      	nop
 800cc90:	0800cca1 	.word	0x0800cca1
 800cc94:	0800cca9 	.word	0x0800cca9
 800cc98:	0800ccaf 	.word	0x0800ccaf
 800cc9c:	0800ccb5 	.word	0x0800ccb5
	{
	    case ModuleRTC_MAIN_State_IDLE:
	    	//@INFO: IDLE Operations ..
	    	ModuleRTC_MAIN_State = ModuleRTC_MAIN_State_ROUTINE;
 800cca0:	4b09      	ldr	r3, [pc, #36]	; (800ccc8 <ModuleRTC_MAIN+0x4c>)
 800cca2:	2201      	movs	r2, #1
 800cca4:	701a      	strb	r2, [r3, #0]
	    break;
 800cca6:	e00d      	b.n	800ccc4 <ModuleRTC_MAIN+0x48>

	    case ModuleRTC_MAIN_State_ROUTINE:

	    	ModuleRTC_MAIN_Routine();
 800cca8:	f7ff ffa8 	bl	800cbfc <ModuleRTC_MAIN_Routine>
	    break;
 800ccac:	e00a      	b.n	800ccc4 <ModuleRTC_MAIN+0x48>

	    case ModuleRTC_MAIN_State_PROCESS:

	    	ModuleRTC_MAIN_Process();
 800ccae:	f7ff ffdd 	bl	800cc6c <ModuleRTC_MAIN_Process>

	    break;
 800ccb2:	e007      	b.n	800ccc4 <ModuleRTC_MAIN+0x48>

	    case ModuleRTC_MAIN_State_SUSPEND:
	    	ModuleRTC_MAIN_State = ModuleRTC_MAIN_State_IDLE;
 800ccb4:	4b04      	ldr	r3, [pc, #16]	; (800ccc8 <ModuleRTC_MAIN+0x4c>)
 800ccb6:	2200      	movs	r2, #0
 800ccb8:	701a      	strb	r2, [r3, #0]
	    break;
 800ccba:	e003      	b.n	800ccc4 <ModuleRTC_MAIN+0x48>

	    default:
	    	ModuleRTC_MAIN_State = ModuleRTC_MAIN_State_SUSPEND;
 800ccbc:	4b02      	ldr	r3, [pc, #8]	; (800ccc8 <ModuleRTC_MAIN+0x4c>)
 800ccbe:	2203      	movs	r2, #3
 800ccc0:	701a      	strb	r2, [r3, #0]
	    break;
 800ccc2:	bf00      	nop

	}
}
 800ccc4:	bf00      	nop
 800ccc6:	bd80      	pop	{r7, pc}
 800ccc8:	2000a78c 	.word	0x2000a78c

0800cccc <ModuleSDCard_HWInit>:
	 @return  : 
	 @date	  : 
	 @INFO		:	
********************************************************************************/
void ModuleSDCard_HWInit(void)
{
 800cccc:	b580      	push	{r7, lr}
 800ccce:	b082      	sub	sp, #8
 800ccd0:	af00      	add	r7, sp, #0
	FRESULT fresult;

    fresult = f_mount(fs, "", 0);
 800ccd2:	4b09      	ldr	r3, [pc, #36]	; (800ccf8 <ModuleSDCard_HWInit+0x2c>)
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	2200      	movs	r2, #0
 800ccd8:	4908      	ldr	r1, [pc, #32]	; (800ccfc <ModuleSDCard_HWInit+0x30>)
 800ccda:	4618      	mov	r0, r3
 800ccdc:	f7fa fc04 	bl	80074e8 <f_mount>
 800cce0:	4603      	mov	r3, r0
 800cce2:	71fb      	strb	r3, [r7, #7]

    if(fresult!=FR_OK){
 800cce4:	79fb      	ldrb	r3, [r7, #7]
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d002      	beq.n	800ccf0 <ModuleSDCard_HWInit+0x24>

    	ModuleSDCard_MAIN_State=ModuleSDCard_MAIN_State_SUSPEND;
 800ccea:	4b05      	ldr	r3, [pc, #20]	; (800cd00 <ModuleSDCard_HWInit+0x34>)
 800ccec:	2203      	movs	r2, #3
 800ccee:	701a      	strb	r2, [r3, #0]
    }

	//@INFO: SDCard thread'ine ait donanımsal init fonksiyonları
}
 800ccf0:	bf00      	nop
 800ccf2:	3708      	adds	r7, #8
 800ccf4:	46bd      	mov	sp, r7
 800ccf6:	bd80      	pop	{r7, pc}
 800ccf8:	2000a828 	.word	0x2000a828
 800ccfc:	0800dac0 	.word	0x0800dac0
 800cd00:	2000a825 	.word	0x2000a825

0800cd04 <ModuleSDCard_SWInit>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModuleSDCard_SWInit(void)
{
 800cd04:	b480      	push	{r7}
 800cd06:	af00      	add	r7, sp, #0



	 //@INFO: WIFI thread'ine ait yazilimsal init fonksiyonları
}
 800cd08:	bf00      	nop
 800cd0a:	46bd      	mov	sp, r7
 800cd0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd10:	4770      	bx	lr

0800cd12 <ModuleSDCard_StartUP>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModuleSDCard_StartUP(void)
{
 800cd12:	b580      	push	{r7, lr}
 800cd14:	af00      	add	r7, sp, #0
	ModuleSDCard_HWInit();
 800cd16:	f7ff ffd9 	bl	800cccc <ModuleSDCard_HWInit>
	ModuleSDCard_SWInit();
 800cd1a:	f7ff fff3 	bl	800cd04 <ModuleSDCard_SWInit>
}
 800cd1e:	bf00      	nop
 800cd20:	bd80      	pop	{r7, pc}
	...

0800cd24 <ModuleSDCard_MAIN_Routine>:
	 @date	  :
	 @INFO	  :
********************************************************************************/

void ModuleSDCard_MAIN_Routine(void)
{
 800cd24:	b580      	push	{r7, lr}
 800cd26:	b084      	sub	sp, #16
 800cd28:	af02      	add	r7, sp, #8

	 FRESULT fresult;


      fresult = f_open(&file, "SDCard_Logger.txt", FA_OPEN_ALWAYS | FA_OPEN_APPEND| FA_WRITE);
 800cd2a:	2232      	movs	r2, #50	; 0x32
 800cd2c:	491c      	ldr	r1, [pc, #112]	; (800cda0 <ModuleSDCard_MAIN_Routine+0x7c>)
 800cd2e:	481d      	ldr	r0, [pc, #116]	; (800cda4 <ModuleSDCard_MAIN_Routine+0x80>)
 800cd30:	f7fa fc3e 	bl	80075b0 <f_open>
 800cd34:	4603      	mov	r3, r0
 800cd36:	71fb      	strb	r3, [r7, #7]
      if(fresult!=FR_OK)
 800cd38:	79fb      	ldrb	r3, [r7, #7]
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d002      	beq.n	800cd44 <ModuleSDCard_MAIN_Routine+0x20>
      {

    	    ModuleSDCard_MAIN_State=ModuleSDCard_MAIN_State_SUSPEND;
 800cd3e:	4b1a      	ldr	r3, [pc, #104]	; (800cda8 <ModuleSDCard_MAIN_Routine+0x84>)
 800cd40:	2203      	movs	r2, #3
 800cd42:	701a      	strb	r2, [r3, #0]
      }

      sprintf((char*)__GL.sdcard.main.buffadrr , "VOLTAGE:%d \n BATTERY POWER:%d \n TEMPERATURE:%d \n SPEED:%d  \n",50,50,50,50);
 800cd44:	4b19      	ldr	r3, [pc, #100]	; (800cdac <ModuleSDCard_MAIN_Routine+0x88>)
 800cd46:	f8d3 0500 	ldr.w	r0, [r3, #1280]	; 0x500
 800cd4a:	2332      	movs	r3, #50	; 0x32
 800cd4c:	9301      	str	r3, [sp, #4]
 800cd4e:	2332      	movs	r3, #50	; 0x32
 800cd50:	9300      	str	r3, [sp, #0]
 800cd52:	2332      	movs	r3, #50	; 0x32
 800cd54:	2232      	movs	r2, #50	; 0x32
 800cd56:	4916      	ldr	r1, [pc, #88]	; (800cdb0 <ModuleSDCard_MAIN_Routine+0x8c>)
 800cd58:	f000 fa28 	bl	800d1ac <siprintf>
      f_printf(&file, "%s\n",bufferSDcard,__GL.sdcard.main.buffadrr);
 800cd5c:	4b13      	ldr	r3, [pc, #76]	; (800cdac <ModuleSDCard_MAIN_Routine+0x88>)
 800cd5e:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
 800cd62:	4a14      	ldr	r2, [pc, #80]	; (800cdb4 <ModuleSDCard_MAIN_Routine+0x90>)
 800cd64:	4914      	ldr	r1, [pc, #80]	; (800cdb8 <ModuleSDCard_MAIN_Routine+0x94>)
 800cd66:	480f      	ldr	r0, [pc, #60]	; (800cda4 <ModuleSDCard_MAIN_Routine+0x80>)
 800cd68:	f7fb f9e4 	bl	8008134 <f_printf>
     /* Close file */

       fresult = f_close(&file);
 800cd6c:	480d      	ldr	r0, [pc, #52]	; (800cda4 <ModuleSDCard_MAIN_Routine+0x80>)
 800cd6e:	f7fb f93b 	bl	8007fe8 <f_close>
 800cd72:	4603      	mov	r3, r0
 800cd74:	71fb      	strb	r3, [r7, #7]

       if(fresult!=FR_OK)
 800cd76:	79fb      	ldrb	r3, [r7, #7]
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d002      	beq.n	800cd82 <ModuleSDCard_MAIN_Routine+0x5e>
       {

           	 ModuleSDCard_MAIN_State=ModuleSDCard_MAIN_State_SUSPEND;
 800cd7c:	4b0a      	ldr	r3, [pc, #40]	; (800cda8 <ModuleSDCard_MAIN_Routine+0x84>)
 800cd7e:	2203      	movs	r2, #3
 800cd80:	701a      	strb	r2, [r3, #0]




	       /* Close file */
	    fresult = f_close(&file);
 800cd82:	4808      	ldr	r0, [pc, #32]	; (800cda4 <ModuleSDCard_MAIN_Routine+0x80>)
 800cd84:	f7fb f930 	bl	8007fe8 <f_close>
 800cd88:	4603      	mov	r3, r0
 800cd8a:	71fb      	strb	r3, [r7, #7]

		if(fresult!=FR_OK){
 800cd8c:	79fb      	ldrb	r3, [r7, #7]
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d002      	beq.n	800cd98 <ModuleSDCard_MAIN_Routine+0x74>

		    	ModuleSDCard_MAIN_State=ModuleSDCard_MAIN_State_SUSPEND;
 800cd92:	4b05      	ldr	r3, [pc, #20]	; (800cda8 <ModuleSDCard_MAIN_Routine+0x84>)
 800cd94:	2203      	movs	r2, #3
 800cd96:	701a      	strb	r2, [r3, #0]
		  }

}
 800cd98:	bf00      	nop
 800cd9a:	3708      	adds	r7, #8
 800cd9c:	46bd      	mov	sp, r7
 800cd9e:	bd80      	pop	{r7, pc}
 800cda0:	0800dac4 	.word	0x0800dac4
 800cda4:	2000a82c 	.word	0x2000a82c
 800cda8:	2000a825 	.word	0x2000a825
 800cdac:	200000a4 	.word	0x200000a4
 800cdb0:	0800dad8 	.word	0x0800dad8
 800cdb4:	2000002c 	.word	0x2000002c
 800cdb8:	0800db18 	.word	0x0800db18

0800cdbc <ModuleSDCard_MAIN_Process>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModuleSDCard_MAIN_Process(void)
{
 800cdbc:	b480      	push	{r7}
 800cdbe:	af00      	add	r7, sp, #0

}
 800cdc0:	bf00      	nop
 800cdc2:	46bd      	mov	sp, r7
 800cdc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdc8:	4770      	bx	lr
	...

0800cdcc <ModuleSDCard_MAIN>:
	 @date	  :
	 @INFO		:
********************************************************************************/

void ModuleSDCard_MAIN(void)
{
 800cdcc:	b580      	push	{r7, lr}
 800cdce:	af00      	add	r7, sp, #0
	switch(ModuleSDCard_MAIN_State)
 800cdd0:	4b11      	ldr	r3, [pc, #68]	; (800ce18 <ModuleSDCard_MAIN+0x4c>)
 800cdd2:	781b      	ldrb	r3, [r3, #0]
 800cdd4:	2b03      	cmp	r3, #3
 800cdd6:	d819      	bhi.n	800ce0c <ModuleSDCard_MAIN+0x40>
 800cdd8:	a201      	add	r2, pc, #4	; (adr r2, 800cde0 <ModuleSDCard_MAIN+0x14>)
 800cdda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdde:	bf00      	nop
 800cde0:	0800cdf1 	.word	0x0800cdf1
 800cde4:	0800cdf9 	.word	0x0800cdf9
 800cde8:	0800cdff 	.word	0x0800cdff
 800cdec:	0800ce05 	.word	0x0800ce05
	{
	    case ModuleSDCard_MAIN_State_IDLE:
	    	//@INFO: IDLE Operations ..
	    	ModuleSDCard_MAIN_State = ModuleSDCard_MAIN_State_ROUTINE;
 800cdf0:	4b09      	ldr	r3, [pc, #36]	; (800ce18 <ModuleSDCard_MAIN+0x4c>)
 800cdf2:	2201      	movs	r2, #1
 800cdf4:	701a      	strb	r2, [r3, #0]
	    break;
 800cdf6:	e00d      	b.n	800ce14 <ModuleSDCard_MAIN+0x48>

	    case ModuleSDCard_MAIN_State_ROUTINE:

	    	ModuleSDCard_MAIN_Routine();
 800cdf8:	f7ff ff94 	bl	800cd24 <ModuleSDCard_MAIN_Routine>
	    break;
 800cdfc:	e00a      	b.n	800ce14 <ModuleSDCard_MAIN+0x48>

	    case ModuleSDCard_MAIN_State_PROCESS:

	    	ModuleSDCard_MAIN_Process();
 800cdfe:	f7ff ffdd 	bl	800cdbc <ModuleSDCard_MAIN_Process>

	    break;
 800ce02:	e007      	b.n	800ce14 <ModuleSDCard_MAIN+0x48>

	    case ModuleSDCard_MAIN_State_SUSPEND:
	    	ModuleSDCard_MAIN_State = ModuleSDCard_MAIN_State_IDLE;
 800ce04:	4b04      	ldr	r3, [pc, #16]	; (800ce18 <ModuleSDCard_MAIN+0x4c>)
 800ce06:	2200      	movs	r2, #0
 800ce08:	701a      	strb	r2, [r3, #0]
	    break;
 800ce0a:	e003      	b.n	800ce14 <ModuleSDCard_MAIN+0x48>

	    default:
	    	ModuleSDCard_MAIN_State = ModuleSDCard_MAIN_State_SUSPEND;
 800ce0c:	4b02      	ldr	r3, [pc, #8]	; (800ce18 <ModuleSDCard_MAIN+0x4c>)
 800ce0e:	2203      	movs	r2, #3
 800ce10:	701a      	strb	r2, [r3, #0]
	    break;
 800ce12:	bf00      	nop

	}

}
 800ce14:	bf00      	nop
 800ce16:	bd80      	pop	{r7, pc}
 800ce18:	2000a825 	.word	0x2000a825

0800ce1c <ModuleWIFI_HWInit>:
	 @return  : 
	 @date	  : 
	 @INFO		:	
********************************************************************************/
void ModuleWIFI_HWInit(void)
{
 800ce1c:	b480      	push	{r7}
 800ce1e:	af00      	add	r7, sp, #0
	//@INFO: WIFI thread'ine ait donanımsal init fonksiyonları
}
 800ce20:	bf00      	nop
 800ce22:	46bd      	mov	sp, r7
 800ce24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce28:	4770      	bx	lr

0800ce2a <ModuleWIFI_SWInit>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModuleWIFI_SWInit(void)
{
 800ce2a:	b480      	push	{r7}
 800ce2c:	af00      	add	r7, sp, #0
	//@INFO: WIFI thread'ine ait yazilimsal init fonksiyonları
}
 800ce2e:	bf00      	nop
 800ce30:	46bd      	mov	sp, r7
 800ce32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce36:	4770      	bx	lr

0800ce38 <ModuleWIFI_StartUP>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModuleWIFI_StartUP(void)
{
 800ce38:	b580      	push	{r7, lr}
 800ce3a:	af00      	add	r7, sp, #0
	ModuleWIFI_HWInit();
 800ce3c:	f7ff ffee 	bl	800ce1c <ModuleWIFI_HWInit>
	ModuleWIFI_SWInit();
 800ce40:	f7ff fff3 	bl	800ce2a <ModuleWIFI_SWInit>
}
 800ce44:	bf00      	nop
 800ce46:	bd80      	pop	{r7, pc}

0800ce48 <ModuleWIFI_MAIN_Routine>:
	 @date	  :
	 @INFO		:
********************************************************************************/

void ModuleWIFI_MAIN_Routine(void)
{
 800ce48:	b480      	push	{r7}
 800ce4a:	af00      	add	r7, sp, #0

}
 800ce4c:	bf00      	nop
 800ce4e:	46bd      	mov	sp, r7
 800ce50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce54:	4770      	bx	lr

0800ce56 <ModuleWIFI_MAIN_Process>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModuleWIFI_MAIN_Process(void)
{
 800ce56:	b480      	push	{r7}
 800ce58:	af00      	add	r7, sp, #0

}
 800ce5a:	bf00      	nop
 800ce5c:	46bd      	mov	sp, r7
 800ce5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce62:	4770      	bx	lr

0800ce64 <ModuleWIFI_MAIN>:
	 @date	  :
	 @INFO		:
********************************************************************************/

void ModuleWIFI_MAIN(void)
{
 800ce64:	b580      	push	{r7, lr}
 800ce66:	af00      	add	r7, sp, #0
	switch(ModuleWIFI_MAIN_State)
 800ce68:	4b11      	ldr	r3, [pc, #68]	; (800ceb0 <ModuleWIFI_MAIN+0x4c>)
 800ce6a:	781b      	ldrb	r3, [r3, #0]
 800ce6c:	2b03      	cmp	r3, #3
 800ce6e:	d819      	bhi.n	800cea4 <ModuleWIFI_MAIN+0x40>
 800ce70:	a201      	add	r2, pc, #4	; (adr r2, 800ce78 <ModuleWIFI_MAIN+0x14>)
 800ce72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce76:	bf00      	nop
 800ce78:	0800ce89 	.word	0x0800ce89
 800ce7c:	0800ce91 	.word	0x0800ce91
 800ce80:	0800ce97 	.word	0x0800ce97
 800ce84:	0800ce9d 	.word	0x0800ce9d
	{
	    case ModuleWIFI_MAIN_State_IDLE:
	    	//@INFO: IDLE Operations ..
	    	ModuleWIFI_MAIN_State = ModuleWIFI_MAIN_State_ROUTINE;
 800ce88:	4b09      	ldr	r3, [pc, #36]	; (800ceb0 <ModuleWIFI_MAIN+0x4c>)
 800ce8a:	2201      	movs	r2, #1
 800ce8c:	701a      	strb	r2, [r3, #0]
	    break;
 800ce8e:	e00d      	b.n	800ceac <ModuleWIFI_MAIN+0x48>

	    case ModuleWIFI_MAIN_State_ROUTINE:

	    	ModuleWIFI_MAIN_Routine();
 800ce90:	f7ff ffda 	bl	800ce48 <ModuleWIFI_MAIN_Routine>
	    break;
 800ce94:	e00a      	b.n	800ceac <ModuleWIFI_MAIN+0x48>

	    case ModuleWIFI_MAIN_State_PROCESS:

	    	ModuleWIFI_MAIN_Process();
 800ce96:	f7ff ffde 	bl	800ce56 <ModuleWIFI_MAIN_Process>

	    break;
 800ce9a:	e007      	b.n	800ceac <ModuleWIFI_MAIN+0x48>

	    case ModuleWIFI_MAIN_State_SUSPEND:
	    	ModuleWIFI_MAIN_State = ModuleWIFI_MAIN_State_IDLE;
 800ce9c:	4b04      	ldr	r3, [pc, #16]	; (800ceb0 <ModuleWIFI_MAIN+0x4c>)
 800ce9e:	2200      	movs	r2, #0
 800cea0:	701a      	strb	r2, [r3, #0]
	    break;
 800cea2:	e003      	b.n	800ceac <ModuleWIFI_MAIN+0x48>

	    default:
	    	ModuleWIFI_MAIN_State = ModuleWIFI_MAIN_State_SUSPEND;
 800cea4:	4b02      	ldr	r3, [pc, #8]	; (800ceb0 <ModuleWIFI_MAIN+0x4c>)
 800cea6:	2203      	movs	r2, #3
 800cea8:	701a      	strb	r2, [r3, #0]
	    break;
 800ceaa:	bf00      	nop

	}
}
 800ceac:	bf00      	nop
 800ceae:	bd80      	pop	{r7, pc}
 800ceb0:	2000b85c 	.word	0x2000b85c

0800ceb4 <TelemetryMain_HWInit>:
	 @return  : 
	 @date	  : 
	 @INFO		:	
********************************************************************************/
void TelemetryMain_HWInit(void)
{
 800ceb4:	b480      	push	{r7}
 800ceb6:	af00      	add	r7, sp, #0
	//@INFO: Telemetry thread'ine ait donanımsal init fonksiyonları
}
 800ceb8:	bf00      	nop
 800ceba:	46bd      	mov	sp, r7
 800cebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cec0:	4770      	bx	lr

0800cec2 <TelemetryMain_SWInit>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void TelemetryMain_SWInit(void)
{
 800cec2:	b480      	push	{r7}
 800cec4:	af00      	add	r7, sp, #0
	//@INFO: Telemetry thread'ine ait yazilimsal init fonksiyonları
}
 800cec6:	bf00      	nop
 800cec8:	46bd      	mov	sp, r7
 800ceca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cece:	4770      	bx	lr

0800ced0 <TelemetryMain_StartUP>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void TelemetryMain_StartUP(void)
{
 800ced0:	b580      	push	{r7, lr}
 800ced2:	af00      	add	r7, sp, #0
	TelemetryMain_HWInit();
 800ced4:	f7ff ffee 	bl	800ceb4 <TelemetryMain_HWInit>
	TelemetryMain_SWInit();
 800ced8:	f7ff fff3 	bl	800cec2 <TelemetryMain_SWInit>
}
 800cedc:	bf00      	nop
 800cede:	bd80      	pop	{r7, pc}

0800cee0 <TelemetryMain_MAIN_Routine>:
	 @date	  :
	 @INFO		:
********************************************************************************/

void TelemetryMain_MAIN_Routine(void)
{
 800cee0:	b480      	push	{r7}
 800cee2:	af00      	add	r7, sp, #0

}
 800cee4:	bf00      	nop
 800cee6:	46bd      	mov	sp, r7
 800cee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceec:	4770      	bx	lr

0800ceee <TelemetryMain_MAIN_Process>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void TelemetryMain_MAIN_Process(void)
{
 800ceee:	b480      	push	{r7}
 800cef0:	af00      	add	r7, sp, #0

}
 800cef2:	bf00      	nop
 800cef4:	46bd      	mov	sp, r7
 800cef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cefa:	4770      	bx	lr

0800cefc <TelemetyMain_MAIN>:
	 @date	  :
	 @INFO		:
********************************************************************************/

void TelemetyMain_MAIN(void)
{
 800cefc:	b580      	push	{r7, lr}
 800cefe:	af00      	add	r7, sp, #0

	switch(TelemetryMain_MAIN_State)
 800cf00:	4b11      	ldr	r3, [pc, #68]	; (800cf48 <TelemetyMain_MAIN+0x4c>)
 800cf02:	781b      	ldrb	r3, [r3, #0]
 800cf04:	2b03      	cmp	r3, #3
 800cf06:	d819      	bhi.n	800cf3c <TelemetyMain_MAIN+0x40>
 800cf08:	a201      	add	r2, pc, #4	; (adr r2, 800cf10 <TelemetyMain_MAIN+0x14>)
 800cf0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf0e:	bf00      	nop
 800cf10:	0800cf21 	.word	0x0800cf21
 800cf14:	0800cf29 	.word	0x0800cf29
 800cf18:	0800cf2f 	.word	0x0800cf2f
 800cf1c:	0800cf35 	.word	0x0800cf35
	{
	    case TelemetryMain_MAIN_State_IDLE:
	    	//@INFO: IDLE Operations ..
	    	TelemetryMain_MAIN_State = TelemetryMain_MAIN_State_ROUTINE;
 800cf20:	4b09      	ldr	r3, [pc, #36]	; (800cf48 <TelemetyMain_MAIN+0x4c>)
 800cf22:	2201      	movs	r2, #1
 800cf24:	701a      	strb	r2, [r3, #0]
	    break;
 800cf26:	e00d      	b.n	800cf44 <TelemetyMain_MAIN+0x48>

	    case TelemetryMain_MAIN_State_ROUTINE:

	    	TelemetryMain_MAIN_Routine();
 800cf28:	f7ff ffda 	bl	800cee0 <TelemetryMain_MAIN_Routine>

	    break;
 800cf2c:	e00a      	b.n	800cf44 <TelemetyMain_MAIN+0x48>

	    case TelemetryMain_MAIN_State_PROCESS:

	    	TelemetryMain_MAIN_Process();
 800cf2e:	f7ff ffde 	bl	800ceee <TelemetryMain_MAIN_Process>

	    break;
 800cf32:	e007      	b.n	800cf44 <TelemetyMain_MAIN+0x48>

	    case TelemetryMain_MAIN_State_SUSPEND:
	    	TelemetryMain_MAIN_State = TelemetryMain_MAIN_State_IDLE;
 800cf34:	4b04      	ldr	r3, [pc, #16]	; (800cf48 <TelemetyMain_MAIN+0x4c>)
 800cf36:	2200      	movs	r2, #0
 800cf38:	701a      	strb	r2, [r3, #0]
	    break;
 800cf3a:	e003      	b.n	800cf44 <TelemetyMain_MAIN+0x48>

	    default:
	    	TelemetryMain_MAIN_State = TelemetryMain_MAIN_State_SUSPEND;
 800cf3c:	4b02      	ldr	r3, [pc, #8]	; (800cf48 <TelemetyMain_MAIN+0x4c>)
 800cf3e:	2203      	movs	r2, #3
 800cf40:	701a      	strb	r2, [r3, #0]
	    break;
 800cf42:	bf00      	nop

	}

}
 800cf44:	bf00      	nop
 800cf46:	bd80      	pop	{r7, pc}
 800cf48:	2000b85d 	.word	0x2000b85d

0800cf4c <__errno>:
 800cf4c:	4b01      	ldr	r3, [pc, #4]	; (800cf54 <__errno+0x8>)
 800cf4e:	6818      	ldr	r0, [r3, #0]
 800cf50:	4770      	bx	lr
 800cf52:	bf00      	nop
 800cf54:	20000040 	.word	0x20000040

0800cf58 <__libc_init_array>:
 800cf58:	b570      	push	{r4, r5, r6, lr}
 800cf5a:	4d0d      	ldr	r5, [pc, #52]	; (800cf90 <__libc_init_array+0x38>)
 800cf5c:	4c0d      	ldr	r4, [pc, #52]	; (800cf94 <__libc_init_array+0x3c>)
 800cf5e:	1b64      	subs	r4, r4, r5
 800cf60:	10a4      	asrs	r4, r4, #2
 800cf62:	2600      	movs	r6, #0
 800cf64:	42a6      	cmp	r6, r4
 800cf66:	d109      	bne.n	800cf7c <__libc_init_array+0x24>
 800cf68:	4d0b      	ldr	r5, [pc, #44]	; (800cf98 <__libc_init_array+0x40>)
 800cf6a:	4c0c      	ldr	r4, [pc, #48]	; (800cf9c <__libc_init_array+0x44>)
 800cf6c:	f000 fc8c 	bl	800d888 <_init>
 800cf70:	1b64      	subs	r4, r4, r5
 800cf72:	10a4      	asrs	r4, r4, #2
 800cf74:	2600      	movs	r6, #0
 800cf76:	42a6      	cmp	r6, r4
 800cf78:	d105      	bne.n	800cf86 <__libc_init_array+0x2e>
 800cf7a:	bd70      	pop	{r4, r5, r6, pc}
 800cf7c:	f855 3b04 	ldr.w	r3, [r5], #4
 800cf80:	4798      	blx	r3
 800cf82:	3601      	adds	r6, #1
 800cf84:	e7ee      	b.n	800cf64 <__libc_init_array+0xc>
 800cf86:	f855 3b04 	ldr.w	r3, [r5], #4
 800cf8a:	4798      	blx	r3
 800cf8c:	3601      	adds	r6, #1
 800cf8e:	e7f2      	b.n	800cf76 <__libc_init_array+0x1e>
 800cf90:	0800e00c 	.word	0x0800e00c
 800cf94:	0800e00c 	.word	0x0800e00c
 800cf98:	0800e00c 	.word	0x0800e00c
 800cf9c:	0800e010 	.word	0x0800e010

0800cfa0 <memcpy>:
 800cfa0:	440a      	add	r2, r1
 800cfa2:	4291      	cmp	r1, r2
 800cfa4:	f100 33ff 	add.w	r3, r0, #4294967295
 800cfa8:	d100      	bne.n	800cfac <memcpy+0xc>
 800cfaa:	4770      	bx	lr
 800cfac:	b510      	push	{r4, lr}
 800cfae:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cfb2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cfb6:	4291      	cmp	r1, r2
 800cfb8:	d1f9      	bne.n	800cfae <memcpy+0xe>
 800cfba:	bd10      	pop	{r4, pc}

0800cfbc <memset>:
 800cfbc:	4402      	add	r2, r0
 800cfbe:	4603      	mov	r3, r0
 800cfc0:	4293      	cmp	r3, r2
 800cfc2:	d100      	bne.n	800cfc6 <memset+0xa>
 800cfc4:	4770      	bx	lr
 800cfc6:	f803 1b01 	strb.w	r1, [r3], #1
 800cfca:	e7f9      	b.n	800cfc0 <memset+0x4>

0800cfcc <_free_r>:
 800cfcc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cfce:	2900      	cmp	r1, #0
 800cfd0:	d044      	beq.n	800d05c <_free_r+0x90>
 800cfd2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cfd6:	9001      	str	r0, [sp, #4]
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	f1a1 0404 	sub.w	r4, r1, #4
 800cfde:	bfb8      	it	lt
 800cfe0:	18e4      	addlt	r4, r4, r3
 800cfe2:	f000 f903 	bl	800d1ec <__malloc_lock>
 800cfe6:	4a1e      	ldr	r2, [pc, #120]	; (800d060 <_free_r+0x94>)
 800cfe8:	9801      	ldr	r0, [sp, #4]
 800cfea:	6813      	ldr	r3, [r2, #0]
 800cfec:	b933      	cbnz	r3, 800cffc <_free_r+0x30>
 800cfee:	6063      	str	r3, [r4, #4]
 800cff0:	6014      	str	r4, [r2, #0]
 800cff2:	b003      	add	sp, #12
 800cff4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cff8:	f000 b8fe 	b.w	800d1f8 <__malloc_unlock>
 800cffc:	42a3      	cmp	r3, r4
 800cffe:	d908      	bls.n	800d012 <_free_r+0x46>
 800d000:	6825      	ldr	r5, [r4, #0]
 800d002:	1961      	adds	r1, r4, r5
 800d004:	428b      	cmp	r3, r1
 800d006:	bf01      	itttt	eq
 800d008:	6819      	ldreq	r1, [r3, #0]
 800d00a:	685b      	ldreq	r3, [r3, #4]
 800d00c:	1949      	addeq	r1, r1, r5
 800d00e:	6021      	streq	r1, [r4, #0]
 800d010:	e7ed      	b.n	800cfee <_free_r+0x22>
 800d012:	461a      	mov	r2, r3
 800d014:	685b      	ldr	r3, [r3, #4]
 800d016:	b10b      	cbz	r3, 800d01c <_free_r+0x50>
 800d018:	42a3      	cmp	r3, r4
 800d01a:	d9fa      	bls.n	800d012 <_free_r+0x46>
 800d01c:	6811      	ldr	r1, [r2, #0]
 800d01e:	1855      	adds	r5, r2, r1
 800d020:	42a5      	cmp	r5, r4
 800d022:	d10b      	bne.n	800d03c <_free_r+0x70>
 800d024:	6824      	ldr	r4, [r4, #0]
 800d026:	4421      	add	r1, r4
 800d028:	1854      	adds	r4, r2, r1
 800d02a:	42a3      	cmp	r3, r4
 800d02c:	6011      	str	r1, [r2, #0]
 800d02e:	d1e0      	bne.n	800cff2 <_free_r+0x26>
 800d030:	681c      	ldr	r4, [r3, #0]
 800d032:	685b      	ldr	r3, [r3, #4]
 800d034:	6053      	str	r3, [r2, #4]
 800d036:	4421      	add	r1, r4
 800d038:	6011      	str	r1, [r2, #0]
 800d03a:	e7da      	b.n	800cff2 <_free_r+0x26>
 800d03c:	d902      	bls.n	800d044 <_free_r+0x78>
 800d03e:	230c      	movs	r3, #12
 800d040:	6003      	str	r3, [r0, #0]
 800d042:	e7d6      	b.n	800cff2 <_free_r+0x26>
 800d044:	6825      	ldr	r5, [r4, #0]
 800d046:	1961      	adds	r1, r4, r5
 800d048:	428b      	cmp	r3, r1
 800d04a:	bf04      	itt	eq
 800d04c:	6819      	ldreq	r1, [r3, #0]
 800d04e:	685b      	ldreq	r3, [r3, #4]
 800d050:	6063      	str	r3, [r4, #4]
 800d052:	bf04      	itt	eq
 800d054:	1949      	addeq	r1, r1, r5
 800d056:	6021      	streq	r1, [r4, #0]
 800d058:	6054      	str	r4, [r2, #4]
 800d05a:	e7ca      	b.n	800cff2 <_free_r+0x26>
 800d05c:	b003      	add	sp, #12
 800d05e:	bd30      	pop	{r4, r5, pc}
 800d060:	2000b860 	.word	0x2000b860

0800d064 <sbrk_aligned>:
 800d064:	b570      	push	{r4, r5, r6, lr}
 800d066:	4e0e      	ldr	r6, [pc, #56]	; (800d0a0 <sbrk_aligned+0x3c>)
 800d068:	460c      	mov	r4, r1
 800d06a:	6831      	ldr	r1, [r6, #0]
 800d06c:	4605      	mov	r5, r0
 800d06e:	b911      	cbnz	r1, 800d076 <sbrk_aligned+0x12>
 800d070:	f000 f88c 	bl	800d18c <_sbrk_r>
 800d074:	6030      	str	r0, [r6, #0]
 800d076:	4621      	mov	r1, r4
 800d078:	4628      	mov	r0, r5
 800d07a:	f000 f887 	bl	800d18c <_sbrk_r>
 800d07e:	1c43      	adds	r3, r0, #1
 800d080:	d00a      	beq.n	800d098 <sbrk_aligned+0x34>
 800d082:	1cc4      	adds	r4, r0, #3
 800d084:	f024 0403 	bic.w	r4, r4, #3
 800d088:	42a0      	cmp	r0, r4
 800d08a:	d007      	beq.n	800d09c <sbrk_aligned+0x38>
 800d08c:	1a21      	subs	r1, r4, r0
 800d08e:	4628      	mov	r0, r5
 800d090:	f000 f87c 	bl	800d18c <_sbrk_r>
 800d094:	3001      	adds	r0, #1
 800d096:	d101      	bne.n	800d09c <sbrk_aligned+0x38>
 800d098:	f04f 34ff 	mov.w	r4, #4294967295
 800d09c:	4620      	mov	r0, r4
 800d09e:	bd70      	pop	{r4, r5, r6, pc}
 800d0a0:	2000b864 	.word	0x2000b864

0800d0a4 <_malloc_r>:
 800d0a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0a8:	1ccd      	adds	r5, r1, #3
 800d0aa:	f025 0503 	bic.w	r5, r5, #3
 800d0ae:	3508      	adds	r5, #8
 800d0b0:	2d0c      	cmp	r5, #12
 800d0b2:	bf38      	it	cc
 800d0b4:	250c      	movcc	r5, #12
 800d0b6:	2d00      	cmp	r5, #0
 800d0b8:	4607      	mov	r7, r0
 800d0ba:	db01      	blt.n	800d0c0 <_malloc_r+0x1c>
 800d0bc:	42a9      	cmp	r1, r5
 800d0be:	d905      	bls.n	800d0cc <_malloc_r+0x28>
 800d0c0:	230c      	movs	r3, #12
 800d0c2:	603b      	str	r3, [r7, #0]
 800d0c4:	2600      	movs	r6, #0
 800d0c6:	4630      	mov	r0, r6
 800d0c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d0cc:	4e2e      	ldr	r6, [pc, #184]	; (800d188 <_malloc_r+0xe4>)
 800d0ce:	f000 f88d 	bl	800d1ec <__malloc_lock>
 800d0d2:	6833      	ldr	r3, [r6, #0]
 800d0d4:	461c      	mov	r4, r3
 800d0d6:	bb34      	cbnz	r4, 800d126 <_malloc_r+0x82>
 800d0d8:	4629      	mov	r1, r5
 800d0da:	4638      	mov	r0, r7
 800d0dc:	f7ff ffc2 	bl	800d064 <sbrk_aligned>
 800d0e0:	1c43      	adds	r3, r0, #1
 800d0e2:	4604      	mov	r4, r0
 800d0e4:	d14d      	bne.n	800d182 <_malloc_r+0xde>
 800d0e6:	6834      	ldr	r4, [r6, #0]
 800d0e8:	4626      	mov	r6, r4
 800d0ea:	2e00      	cmp	r6, #0
 800d0ec:	d140      	bne.n	800d170 <_malloc_r+0xcc>
 800d0ee:	6823      	ldr	r3, [r4, #0]
 800d0f0:	4631      	mov	r1, r6
 800d0f2:	4638      	mov	r0, r7
 800d0f4:	eb04 0803 	add.w	r8, r4, r3
 800d0f8:	f000 f848 	bl	800d18c <_sbrk_r>
 800d0fc:	4580      	cmp	r8, r0
 800d0fe:	d13a      	bne.n	800d176 <_malloc_r+0xd2>
 800d100:	6821      	ldr	r1, [r4, #0]
 800d102:	3503      	adds	r5, #3
 800d104:	1a6d      	subs	r5, r5, r1
 800d106:	f025 0503 	bic.w	r5, r5, #3
 800d10a:	3508      	adds	r5, #8
 800d10c:	2d0c      	cmp	r5, #12
 800d10e:	bf38      	it	cc
 800d110:	250c      	movcc	r5, #12
 800d112:	4629      	mov	r1, r5
 800d114:	4638      	mov	r0, r7
 800d116:	f7ff ffa5 	bl	800d064 <sbrk_aligned>
 800d11a:	3001      	adds	r0, #1
 800d11c:	d02b      	beq.n	800d176 <_malloc_r+0xd2>
 800d11e:	6823      	ldr	r3, [r4, #0]
 800d120:	442b      	add	r3, r5
 800d122:	6023      	str	r3, [r4, #0]
 800d124:	e00e      	b.n	800d144 <_malloc_r+0xa0>
 800d126:	6822      	ldr	r2, [r4, #0]
 800d128:	1b52      	subs	r2, r2, r5
 800d12a:	d41e      	bmi.n	800d16a <_malloc_r+0xc6>
 800d12c:	2a0b      	cmp	r2, #11
 800d12e:	d916      	bls.n	800d15e <_malloc_r+0xba>
 800d130:	1961      	adds	r1, r4, r5
 800d132:	42a3      	cmp	r3, r4
 800d134:	6025      	str	r5, [r4, #0]
 800d136:	bf18      	it	ne
 800d138:	6059      	strne	r1, [r3, #4]
 800d13a:	6863      	ldr	r3, [r4, #4]
 800d13c:	bf08      	it	eq
 800d13e:	6031      	streq	r1, [r6, #0]
 800d140:	5162      	str	r2, [r4, r5]
 800d142:	604b      	str	r3, [r1, #4]
 800d144:	4638      	mov	r0, r7
 800d146:	f104 060b 	add.w	r6, r4, #11
 800d14a:	f000 f855 	bl	800d1f8 <__malloc_unlock>
 800d14e:	f026 0607 	bic.w	r6, r6, #7
 800d152:	1d23      	adds	r3, r4, #4
 800d154:	1af2      	subs	r2, r6, r3
 800d156:	d0b6      	beq.n	800d0c6 <_malloc_r+0x22>
 800d158:	1b9b      	subs	r3, r3, r6
 800d15a:	50a3      	str	r3, [r4, r2]
 800d15c:	e7b3      	b.n	800d0c6 <_malloc_r+0x22>
 800d15e:	6862      	ldr	r2, [r4, #4]
 800d160:	42a3      	cmp	r3, r4
 800d162:	bf0c      	ite	eq
 800d164:	6032      	streq	r2, [r6, #0]
 800d166:	605a      	strne	r2, [r3, #4]
 800d168:	e7ec      	b.n	800d144 <_malloc_r+0xa0>
 800d16a:	4623      	mov	r3, r4
 800d16c:	6864      	ldr	r4, [r4, #4]
 800d16e:	e7b2      	b.n	800d0d6 <_malloc_r+0x32>
 800d170:	4634      	mov	r4, r6
 800d172:	6876      	ldr	r6, [r6, #4]
 800d174:	e7b9      	b.n	800d0ea <_malloc_r+0x46>
 800d176:	230c      	movs	r3, #12
 800d178:	603b      	str	r3, [r7, #0]
 800d17a:	4638      	mov	r0, r7
 800d17c:	f000 f83c 	bl	800d1f8 <__malloc_unlock>
 800d180:	e7a1      	b.n	800d0c6 <_malloc_r+0x22>
 800d182:	6025      	str	r5, [r4, #0]
 800d184:	e7de      	b.n	800d144 <_malloc_r+0xa0>
 800d186:	bf00      	nop
 800d188:	2000b860 	.word	0x2000b860

0800d18c <_sbrk_r>:
 800d18c:	b538      	push	{r3, r4, r5, lr}
 800d18e:	4d06      	ldr	r5, [pc, #24]	; (800d1a8 <_sbrk_r+0x1c>)
 800d190:	2300      	movs	r3, #0
 800d192:	4604      	mov	r4, r0
 800d194:	4608      	mov	r0, r1
 800d196:	602b      	str	r3, [r5, #0]
 800d198:	f7f4 fa44 	bl	8001624 <_sbrk>
 800d19c:	1c43      	adds	r3, r0, #1
 800d19e:	d102      	bne.n	800d1a6 <_sbrk_r+0x1a>
 800d1a0:	682b      	ldr	r3, [r5, #0]
 800d1a2:	b103      	cbz	r3, 800d1a6 <_sbrk_r+0x1a>
 800d1a4:	6023      	str	r3, [r4, #0]
 800d1a6:	bd38      	pop	{r3, r4, r5, pc}
 800d1a8:	2000b868 	.word	0x2000b868

0800d1ac <siprintf>:
 800d1ac:	b40e      	push	{r1, r2, r3}
 800d1ae:	b500      	push	{lr}
 800d1b0:	b09c      	sub	sp, #112	; 0x70
 800d1b2:	ab1d      	add	r3, sp, #116	; 0x74
 800d1b4:	9002      	str	r0, [sp, #8]
 800d1b6:	9006      	str	r0, [sp, #24]
 800d1b8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d1bc:	4809      	ldr	r0, [pc, #36]	; (800d1e4 <siprintf+0x38>)
 800d1be:	9107      	str	r1, [sp, #28]
 800d1c0:	9104      	str	r1, [sp, #16]
 800d1c2:	4909      	ldr	r1, [pc, #36]	; (800d1e8 <siprintf+0x3c>)
 800d1c4:	f853 2b04 	ldr.w	r2, [r3], #4
 800d1c8:	9105      	str	r1, [sp, #20]
 800d1ca:	6800      	ldr	r0, [r0, #0]
 800d1cc:	9301      	str	r3, [sp, #4]
 800d1ce:	a902      	add	r1, sp, #8
 800d1d0:	f000 f874 	bl	800d2bc <_svfiprintf_r>
 800d1d4:	9b02      	ldr	r3, [sp, #8]
 800d1d6:	2200      	movs	r2, #0
 800d1d8:	701a      	strb	r2, [r3, #0]
 800d1da:	b01c      	add	sp, #112	; 0x70
 800d1dc:	f85d eb04 	ldr.w	lr, [sp], #4
 800d1e0:	b003      	add	sp, #12
 800d1e2:	4770      	bx	lr
 800d1e4:	20000040 	.word	0x20000040
 800d1e8:	ffff0208 	.word	0xffff0208

0800d1ec <__malloc_lock>:
 800d1ec:	4801      	ldr	r0, [pc, #4]	; (800d1f4 <__malloc_lock+0x8>)
 800d1ee:	f7f4 bae4 	b.w	80017ba <__retarget_lock_acquire_recursive>
 800d1f2:	bf00      	nop
 800d1f4:	20001464 	.word	0x20001464

0800d1f8 <__malloc_unlock>:
 800d1f8:	4801      	ldr	r0, [pc, #4]	; (800d200 <__malloc_unlock+0x8>)
 800d1fa:	f7f4 baf2 	b.w	80017e2 <__retarget_lock_release_recursive>
 800d1fe:	bf00      	nop
 800d200:	20001464 	.word	0x20001464

0800d204 <__ssputs_r>:
 800d204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d208:	688e      	ldr	r6, [r1, #8]
 800d20a:	429e      	cmp	r6, r3
 800d20c:	4682      	mov	sl, r0
 800d20e:	460c      	mov	r4, r1
 800d210:	4690      	mov	r8, r2
 800d212:	461f      	mov	r7, r3
 800d214:	d838      	bhi.n	800d288 <__ssputs_r+0x84>
 800d216:	898a      	ldrh	r2, [r1, #12]
 800d218:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d21c:	d032      	beq.n	800d284 <__ssputs_r+0x80>
 800d21e:	6825      	ldr	r5, [r4, #0]
 800d220:	6909      	ldr	r1, [r1, #16]
 800d222:	eba5 0901 	sub.w	r9, r5, r1
 800d226:	6965      	ldr	r5, [r4, #20]
 800d228:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d22c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d230:	3301      	adds	r3, #1
 800d232:	444b      	add	r3, r9
 800d234:	106d      	asrs	r5, r5, #1
 800d236:	429d      	cmp	r5, r3
 800d238:	bf38      	it	cc
 800d23a:	461d      	movcc	r5, r3
 800d23c:	0553      	lsls	r3, r2, #21
 800d23e:	d531      	bpl.n	800d2a4 <__ssputs_r+0xa0>
 800d240:	4629      	mov	r1, r5
 800d242:	f7ff ff2f 	bl	800d0a4 <_malloc_r>
 800d246:	4606      	mov	r6, r0
 800d248:	b950      	cbnz	r0, 800d260 <__ssputs_r+0x5c>
 800d24a:	230c      	movs	r3, #12
 800d24c:	f8ca 3000 	str.w	r3, [sl]
 800d250:	89a3      	ldrh	r3, [r4, #12]
 800d252:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d256:	81a3      	strh	r3, [r4, #12]
 800d258:	f04f 30ff 	mov.w	r0, #4294967295
 800d25c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d260:	6921      	ldr	r1, [r4, #16]
 800d262:	464a      	mov	r2, r9
 800d264:	f7ff fe9c 	bl	800cfa0 <memcpy>
 800d268:	89a3      	ldrh	r3, [r4, #12]
 800d26a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d26e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d272:	81a3      	strh	r3, [r4, #12]
 800d274:	6126      	str	r6, [r4, #16]
 800d276:	6165      	str	r5, [r4, #20]
 800d278:	444e      	add	r6, r9
 800d27a:	eba5 0509 	sub.w	r5, r5, r9
 800d27e:	6026      	str	r6, [r4, #0]
 800d280:	60a5      	str	r5, [r4, #8]
 800d282:	463e      	mov	r6, r7
 800d284:	42be      	cmp	r6, r7
 800d286:	d900      	bls.n	800d28a <__ssputs_r+0x86>
 800d288:	463e      	mov	r6, r7
 800d28a:	6820      	ldr	r0, [r4, #0]
 800d28c:	4632      	mov	r2, r6
 800d28e:	4641      	mov	r1, r8
 800d290:	f000 faa8 	bl	800d7e4 <memmove>
 800d294:	68a3      	ldr	r3, [r4, #8]
 800d296:	1b9b      	subs	r3, r3, r6
 800d298:	60a3      	str	r3, [r4, #8]
 800d29a:	6823      	ldr	r3, [r4, #0]
 800d29c:	4433      	add	r3, r6
 800d29e:	6023      	str	r3, [r4, #0]
 800d2a0:	2000      	movs	r0, #0
 800d2a2:	e7db      	b.n	800d25c <__ssputs_r+0x58>
 800d2a4:	462a      	mov	r2, r5
 800d2a6:	f000 fab7 	bl	800d818 <_realloc_r>
 800d2aa:	4606      	mov	r6, r0
 800d2ac:	2800      	cmp	r0, #0
 800d2ae:	d1e1      	bne.n	800d274 <__ssputs_r+0x70>
 800d2b0:	6921      	ldr	r1, [r4, #16]
 800d2b2:	4650      	mov	r0, sl
 800d2b4:	f7ff fe8a 	bl	800cfcc <_free_r>
 800d2b8:	e7c7      	b.n	800d24a <__ssputs_r+0x46>
	...

0800d2bc <_svfiprintf_r>:
 800d2bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2c0:	4698      	mov	r8, r3
 800d2c2:	898b      	ldrh	r3, [r1, #12]
 800d2c4:	061b      	lsls	r3, r3, #24
 800d2c6:	b09d      	sub	sp, #116	; 0x74
 800d2c8:	4607      	mov	r7, r0
 800d2ca:	460d      	mov	r5, r1
 800d2cc:	4614      	mov	r4, r2
 800d2ce:	d50e      	bpl.n	800d2ee <_svfiprintf_r+0x32>
 800d2d0:	690b      	ldr	r3, [r1, #16]
 800d2d2:	b963      	cbnz	r3, 800d2ee <_svfiprintf_r+0x32>
 800d2d4:	2140      	movs	r1, #64	; 0x40
 800d2d6:	f7ff fee5 	bl	800d0a4 <_malloc_r>
 800d2da:	6028      	str	r0, [r5, #0]
 800d2dc:	6128      	str	r0, [r5, #16]
 800d2de:	b920      	cbnz	r0, 800d2ea <_svfiprintf_r+0x2e>
 800d2e0:	230c      	movs	r3, #12
 800d2e2:	603b      	str	r3, [r7, #0]
 800d2e4:	f04f 30ff 	mov.w	r0, #4294967295
 800d2e8:	e0d1      	b.n	800d48e <_svfiprintf_r+0x1d2>
 800d2ea:	2340      	movs	r3, #64	; 0x40
 800d2ec:	616b      	str	r3, [r5, #20]
 800d2ee:	2300      	movs	r3, #0
 800d2f0:	9309      	str	r3, [sp, #36]	; 0x24
 800d2f2:	2320      	movs	r3, #32
 800d2f4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d2f8:	f8cd 800c 	str.w	r8, [sp, #12]
 800d2fc:	2330      	movs	r3, #48	; 0x30
 800d2fe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d4a8 <_svfiprintf_r+0x1ec>
 800d302:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d306:	f04f 0901 	mov.w	r9, #1
 800d30a:	4623      	mov	r3, r4
 800d30c:	469a      	mov	sl, r3
 800d30e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d312:	b10a      	cbz	r2, 800d318 <_svfiprintf_r+0x5c>
 800d314:	2a25      	cmp	r2, #37	; 0x25
 800d316:	d1f9      	bne.n	800d30c <_svfiprintf_r+0x50>
 800d318:	ebba 0b04 	subs.w	fp, sl, r4
 800d31c:	d00b      	beq.n	800d336 <_svfiprintf_r+0x7a>
 800d31e:	465b      	mov	r3, fp
 800d320:	4622      	mov	r2, r4
 800d322:	4629      	mov	r1, r5
 800d324:	4638      	mov	r0, r7
 800d326:	f7ff ff6d 	bl	800d204 <__ssputs_r>
 800d32a:	3001      	adds	r0, #1
 800d32c:	f000 80aa 	beq.w	800d484 <_svfiprintf_r+0x1c8>
 800d330:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d332:	445a      	add	r2, fp
 800d334:	9209      	str	r2, [sp, #36]	; 0x24
 800d336:	f89a 3000 	ldrb.w	r3, [sl]
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	f000 80a2 	beq.w	800d484 <_svfiprintf_r+0x1c8>
 800d340:	2300      	movs	r3, #0
 800d342:	f04f 32ff 	mov.w	r2, #4294967295
 800d346:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d34a:	f10a 0a01 	add.w	sl, sl, #1
 800d34e:	9304      	str	r3, [sp, #16]
 800d350:	9307      	str	r3, [sp, #28]
 800d352:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d356:	931a      	str	r3, [sp, #104]	; 0x68
 800d358:	4654      	mov	r4, sl
 800d35a:	2205      	movs	r2, #5
 800d35c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d360:	4851      	ldr	r0, [pc, #324]	; (800d4a8 <_svfiprintf_r+0x1ec>)
 800d362:	f7f2 ff45 	bl	80001f0 <memchr>
 800d366:	9a04      	ldr	r2, [sp, #16]
 800d368:	b9d8      	cbnz	r0, 800d3a2 <_svfiprintf_r+0xe6>
 800d36a:	06d0      	lsls	r0, r2, #27
 800d36c:	bf44      	itt	mi
 800d36e:	2320      	movmi	r3, #32
 800d370:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d374:	0711      	lsls	r1, r2, #28
 800d376:	bf44      	itt	mi
 800d378:	232b      	movmi	r3, #43	; 0x2b
 800d37a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d37e:	f89a 3000 	ldrb.w	r3, [sl]
 800d382:	2b2a      	cmp	r3, #42	; 0x2a
 800d384:	d015      	beq.n	800d3b2 <_svfiprintf_r+0xf6>
 800d386:	9a07      	ldr	r2, [sp, #28]
 800d388:	4654      	mov	r4, sl
 800d38a:	2000      	movs	r0, #0
 800d38c:	f04f 0c0a 	mov.w	ip, #10
 800d390:	4621      	mov	r1, r4
 800d392:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d396:	3b30      	subs	r3, #48	; 0x30
 800d398:	2b09      	cmp	r3, #9
 800d39a:	d94e      	bls.n	800d43a <_svfiprintf_r+0x17e>
 800d39c:	b1b0      	cbz	r0, 800d3cc <_svfiprintf_r+0x110>
 800d39e:	9207      	str	r2, [sp, #28]
 800d3a0:	e014      	b.n	800d3cc <_svfiprintf_r+0x110>
 800d3a2:	eba0 0308 	sub.w	r3, r0, r8
 800d3a6:	fa09 f303 	lsl.w	r3, r9, r3
 800d3aa:	4313      	orrs	r3, r2
 800d3ac:	9304      	str	r3, [sp, #16]
 800d3ae:	46a2      	mov	sl, r4
 800d3b0:	e7d2      	b.n	800d358 <_svfiprintf_r+0x9c>
 800d3b2:	9b03      	ldr	r3, [sp, #12]
 800d3b4:	1d19      	adds	r1, r3, #4
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	9103      	str	r1, [sp, #12]
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	bfbb      	ittet	lt
 800d3be:	425b      	neglt	r3, r3
 800d3c0:	f042 0202 	orrlt.w	r2, r2, #2
 800d3c4:	9307      	strge	r3, [sp, #28]
 800d3c6:	9307      	strlt	r3, [sp, #28]
 800d3c8:	bfb8      	it	lt
 800d3ca:	9204      	strlt	r2, [sp, #16]
 800d3cc:	7823      	ldrb	r3, [r4, #0]
 800d3ce:	2b2e      	cmp	r3, #46	; 0x2e
 800d3d0:	d10c      	bne.n	800d3ec <_svfiprintf_r+0x130>
 800d3d2:	7863      	ldrb	r3, [r4, #1]
 800d3d4:	2b2a      	cmp	r3, #42	; 0x2a
 800d3d6:	d135      	bne.n	800d444 <_svfiprintf_r+0x188>
 800d3d8:	9b03      	ldr	r3, [sp, #12]
 800d3da:	1d1a      	adds	r2, r3, #4
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	9203      	str	r2, [sp, #12]
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	bfb8      	it	lt
 800d3e4:	f04f 33ff 	movlt.w	r3, #4294967295
 800d3e8:	3402      	adds	r4, #2
 800d3ea:	9305      	str	r3, [sp, #20]
 800d3ec:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d4b8 <_svfiprintf_r+0x1fc>
 800d3f0:	7821      	ldrb	r1, [r4, #0]
 800d3f2:	2203      	movs	r2, #3
 800d3f4:	4650      	mov	r0, sl
 800d3f6:	f7f2 fefb 	bl	80001f0 <memchr>
 800d3fa:	b140      	cbz	r0, 800d40e <_svfiprintf_r+0x152>
 800d3fc:	2340      	movs	r3, #64	; 0x40
 800d3fe:	eba0 000a 	sub.w	r0, r0, sl
 800d402:	fa03 f000 	lsl.w	r0, r3, r0
 800d406:	9b04      	ldr	r3, [sp, #16]
 800d408:	4303      	orrs	r3, r0
 800d40a:	3401      	adds	r4, #1
 800d40c:	9304      	str	r3, [sp, #16]
 800d40e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d412:	4826      	ldr	r0, [pc, #152]	; (800d4ac <_svfiprintf_r+0x1f0>)
 800d414:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d418:	2206      	movs	r2, #6
 800d41a:	f7f2 fee9 	bl	80001f0 <memchr>
 800d41e:	2800      	cmp	r0, #0
 800d420:	d038      	beq.n	800d494 <_svfiprintf_r+0x1d8>
 800d422:	4b23      	ldr	r3, [pc, #140]	; (800d4b0 <_svfiprintf_r+0x1f4>)
 800d424:	bb1b      	cbnz	r3, 800d46e <_svfiprintf_r+0x1b2>
 800d426:	9b03      	ldr	r3, [sp, #12]
 800d428:	3307      	adds	r3, #7
 800d42a:	f023 0307 	bic.w	r3, r3, #7
 800d42e:	3308      	adds	r3, #8
 800d430:	9303      	str	r3, [sp, #12]
 800d432:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d434:	4433      	add	r3, r6
 800d436:	9309      	str	r3, [sp, #36]	; 0x24
 800d438:	e767      	b.n	800d30a <_svfiprintf_r+0x4e>
 800d43a:	fb0c 3202 	mla	r2, ip, r2, r3
 800d43e:	460c      	mov	r4, r1
 800d440:	2001      	movs	r0, #1
 800d442:	e7a5      	b.n	800d390 <_svfiprintf_r+0xd4>
 800d444:	2300      	movs	r3, #0
 800d446:	3401      	adds	r4, #1
 800d448:	9305      	str	r3, [sp, #20]
 800d44a:	4619      	mov	r1, r3
 800d44c:	f04f 0c0a 	mov.w	ip, #10
 800d450:	4620      	mov	r0, r4
 800d452:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d456:	3a30      	subs	r2, #48	; 0x30
 800d458:	2a09      	cmp	r2, #9
 800d45a:	d903      	bls.n	800d464 <_svfiprintf_r+0x1a8>
 800d45c:	2b00      	cmp	r3, #0
 800d45e:	d0c5      	beq.n	800d3ec <_svfiprintf_r+0x130>
 800d460:	9105      	str	r1, [sp, #20]
 800d462:	e7c3      	b.n	800d3ec <_svfiprintf_r+0x130>
 800d464:	fb0c 2101 	mla	r1, ip, r1, r2
 800d468:	4604      	mov	r4, r0
 800d46a:	2301      	movs	r3, #1
 800d46c:	e7f0      	b.n	800d450 <_svfiprintf_r+0x194>
 800d46e:	ab03      	add	r3, sp, #12
 800d470:	9300      	str	r3, [sp, #0]
 800d472:	462a      	mov	r2, r5
 800d474:	4b0f      	ldr	r3, [pc, #60]	; (800d4b4 <_svfiprintf_r+0x1f8>)
 800d476:	a904      	add	r1, sp, #16
 800d478:	4638      	mov	r0, r7
 800d47a:	f3af 8000 	nop.w
 800d47e:	1c42      	adds	r2, r0, #1
 800d480:	4606      	mov	r6, r0
 800d482:	d1d6      	bne.n	800d432 <_svfiprintf_r+0x176>
 800d484:	89ab      	ldrh	r3, [r5, #12]
 800d486:	065b      	lsls	r3, r3, #25
 800d488:	f53f af2c 	bmi.w	800d2e4 <_svfiprintf_r+0x28>
 800d48c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d48e:	b01d      	add	sp, #116	; 0x74
 800d490:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d494:	ab03      	add	r3, sp, #12
 800d496:	9300      	str	r3, [sp, #0]
 800d498:	462a      	mov	r2, r5
 800d49a:	4b06      	ldr	r3, [pc, #24]	; (800d4b4 <_svfiprintf_r+0x1f8>)
 800d49c:	a904      	add	r1, sp, #16
 800d49e:	4638      	mov	r0, r7
 800d4a0:	f000 f87a 	bl	800d598 <_printf_i>
 800d4a4:	e7eb      	b.n	800d47e <_svfiprintf_r+0x1c2>
 800d4a6:	bf00      	nop
 800d4a8:	0800dfd0 	.word	0x0800dfd0
 800d4ac:	0800dfda 	.word	0x0800dfda
 800d4b0:	00000000 	.word	0x00000000
 800d4b4:	0800d205 	.word	0x0800d205
 800d4b8:	0800dfd6 	.word	0x0800dfd6

0800d4bc <_printf_common>:
 800d4bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d4c0:	4616      	mov	r6, r2
 800d4c2:	4699      	mov	r9, r3
 800d4c4:	688a      	ldr	r2, [r1, #8]
 800d4c6:	690b      	ldr	r3, [r1, #16]
 800d4c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d4cc:	4293      	cmp	r3, r2
 800d4ce:	bfb8      	it	lt
 800d4d0:	4613      	movlt	r3, r2
 800d4d2:	6033      	str	r3, [r6, #0]
 800d4d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d4d8:	4607      	mov	r7, r0
 800d4da:	460c      	mov	r4, r1
 800d4dc:	b10a      	cbz	r2, 800d4e2 <_printf_common+0x26>
 800d4de:	3301      	adds	r3, #1
 800d4e0:	6033      	str	r3, [r6, #0]
 800d4e2:	6823      	ldr	r3, [r4, #0]
 800d4e4:	0699      	lsls	r1, r3, #26
 800d4e6:	bf42      	ittt	mi
 800d4e8:	6833      	ldrmi	r3, [r6, #0]
 800d4ea:	3302      	addmi	r3, #2
 800d4ec:	6033      	strmi	r3, [r6, #0]
 800d4ee:	6825      	ldr	r5, [r4, #0]
 800d4f0:	f015 0506 	ands.w	r5, r5, #6
 800d4f4:	d106      	bne.n	800d504 <_printf_common+0x48>
 800d4f6:	f104 0a19 	add.w	sl, r4, #25
 800d4fa:	68e3      	ldr	r3, [r4, #12]
 800d4fc:	6832      	ldr	r2, [r6, #0]
 800d4fe:	1a9b      	subs	r3, r3, r2
 800d500:	42ab      	cmp	r3, r5
 800d502:	dc26      	bgt.n	800d552 <_printf_common+0x96>
 800d504:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d508:	1e13      	subs	r3, r2, #0
 800d50a:	6822      	ldr	r2, [r4, #0]
 800d50c:	bf18      	it	ne
 800d50e:	2301      	movne	r3, #1
 800d510:	0692      	lsls	r2, r2, #26
 800d512:	d42b      	bmi.n	800d56c <_printf_common+0xb0>
 800d514:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d518:	4649      	mov	r1, r9
 800d51a:	4638      	mov	r0, r7
 800d51c:	47c0      	blx	r8
 800d51e:	3001      	adds	r0, #1
 800d520:	d01e      	beq.n	800d560 <_printf_common+0xa4>
 800d522:	6823      	ldr	r3, [r4, #0]
 800d524:	68e5      	ldr	r5, [r4, #12]
 800d526:	6832      	ldr	r2, [r6, #0]
 800d528:	f003 0306 	and.w	r3, r3, #6
 800d52c:	2b04      	cmp	r3, #4
 800d52e:	bf08      	it	eq
 800d530:	1aad      	subeq	r5, r5, r2
 800d532:	68a3      	ldr	r3, [r4, #8]
 800d534:	6922      	ldr	r2, [r4, #16]
 800d536:	bf0c      	ite	eq
 800d538:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d53c:	2500      	movne	r5, #0
 800d53e:	4293      	cmp	r3, r2
 800d540:	bfc4      	itt	gt
 800d542:	1a9b      	subgt	r3, r3, r2
 800d544:	18ed      	addgt	r5, r5, r3
 800d546:	2600      	movs	r6, #0
 800d548:	341a      	adds	r4, #26
 800d54a:	42b5      	cmp	r5, r6
 800d54c:	d11a      	bne.n	800d584 <_printf_common+0xc8>
 800d54e:	2000      	movs	r0, #0
 800d550:	e008      	b.n	800d564 <_printf_common+0xa8>
 800d552:	2301      	movs	r3, #1
 800d554:	4652      	mov	r2, sl
 800d556:	4649      	mov	r1, r9
 800d558:	4638      	mov	r0, r7
 800d55a:	47c0      	blx	r8
 800d55c:	3001      	adds	r0, #1
 800d55e:	d103      	bne.n	800d568 <_printf_common+0xac>
 800d560:	f04f 30ff 	mov.w	r0, #4294967295
 800d564:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d568:	3501      	adds	r5, #1
 800d56a:	e7c6      	b.n	800d4fa <_printf_common+0x3e>
 800d56c:	18e1      	adds	r1, r4, r3
 800d56e:	1c5a      	adds	r2, r3, #1
 800d570:	2030      	movs	r0, #48	; 0x30
 800d572:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d576:	4422      	add	r2, r4
 800d578:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d57c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d580:	3302      	adds	r3, #2
 800d582:	e7c7      	b.n	800d514 <_printf_common+0x58>
 800d584:	2301      	movs	r3, #1
 800d586:	4622      	mov	r2, r4
 800d588:	4649      	mov	r1, r9
 800d58a:	4638      	mov	r0, r7
 800d58c:	47c0      	blx	r8
 800d58e:	3001      	adds	r0, #1
 800d590:	d0e6      	beq.n	800d560 <_printf_common+0xa4>
 800d592:	3601      	adds	r6, #1
 800d594:	e7d9      	b.n	800d54a <_printf_common+0x8e>
	...

0800d598 <_printf_i>:
 800d598:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d59c:	7e0f      	ldrb	r7, [r1, #24]
 800d59e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d5a0:	2f78      	cmp	r7, #120	; 0x78
 800d5a2:	4691      	mov	r9, r2
 800d5a4:	4680      	mov	r8, r0
 800d5a6:	460c      	mov	r4, r1
 800d5a8:	469a      	mov	sl, r3
 800d5aa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d5ae:	d807      	bhi.n	800d5c0 <_printf_i+0x28>
 800d5b0:	2f62      	cmp	r7, #98	; 0x62
 800d5b2:	d80a      	bhi.n	800d5ca <_printf_i+0x32>
 800d5b4:	2f00      	cmp	r7, #0
 800d5b6:	f000 80d8 	beq.w	800d76a <_printf_i+0x1d2>
 800d5ba:	2f58      	cmp	r7, #88	; 0x58
 800d5bc:	f000 80a3 	beq.w	800d706 <_printf_i+0x16e>
 800d5c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d5c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d5c8:	e03a      	b.n	800d640 <_printf_i+0xa8>
 800d5ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d5ce:	2b15      	cmp	r3, #21
 800d5d0:	d8f6      	bhi.n	800d5c0 <_printf_i+0x28>
 800d5d2:	a101      	add	r1, pc, #4	; (adr r1, 800d5d8 <_printf_i+0x40>)
 800d5d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d5d8:	0800d631 	.word	0x0800d631
 800d5dc:	0800d645 	.word	0x0800d645
 800d5e0:	0800d5c1 	.word	0x0800d5c1
 800d5e4:	0800d5c1 	.word	0x0800d5c1
 800d5e8:	0800d5c1 	.word	0x0800d5c1
 800d5ec:	0800d5c1 	.word	0x0800d5c1
 800d5f0:	0800d645 	.word	0x0800d645
 800d5f4:	0800d5c1 	.word	0x0800d5c1
 800d5f8:	0800d5c1 	.word	0x0800d5c1
 800d5fc:	0800d5c1 	.word	0x0800d5c1
 800d600:	0800d5c1 	.word	0x0800d5c1
 800d604:	0800d751 	.word	0x0800d751
 800d608:	0800d675 	.word	0x0800d675
 800d60c:	0800d733 	.word	0x0800d733
 800d610:	0800d5c1 	.word	0x0800d5c1
 800d614:	0800d5c1 	.word	0x0800d5c1
 800d618:	0800d773 	.word	0x0800d773
 800d61c:	0800d5c1 	.word	0x0800d5c1
 800d620:	0800d675 	.word	0x0800d675
 800d624:	0800d5c1 	.word	0x0800d5c1
 800d628:	0800d5c1 	.word	0x0800d5c1
 800d62c:	0800d73b 	.word	0x0800d73b
 800d630:	682b      	ldr	r3, [r5, #0]
 800d632:	1d1a      	adds	r2, r3, #4
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	602a      	str	r2, [r5, #0]
 800d638:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d63c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d640:	2301      	movs	r3, #1
 800d642:	e0a3      	b.n	800d78c <_printf_i+0x1f4>
 800d644:	6820      	ldr	r0, [r4, #0]
 800d646:	6829      	ldr	r1, [r5, #0]
 800d648:	0606      	lsls	r6, r0, #24
 800d64a:	f101 0304 	add.w	r3, r1, #4
 800d64e:	d50a      	bpl.n	800d666 <_printf_i+0xce>
 800d650:	680e      	ldr	r6, [r1, #0]
 800d652:	602b      	str	r3, [r5, #0]
 800d654:	2e00      	cmp	r6, #0
 800d656:	da03      	bge.n	800d660 <_printf_i+0xc8>
 800d658:	232d      	movs	r3, #45	; 0x2d
 800d65a:	4276      	negs	r6, r6
 800d65c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d660:	485e      	ldr	r0, [pc, #376]	; (800d7dc <_printf_i+0x244>)
 800d662:	230a      	movs	r3, #10
 800d664:	e019      	b.n	800d69a <_printf_i+0x102>
 800d666:	680e      	ldr	r6, [r1, #0]
 800d668:	602b      	str	r3, [r5, #0]
 800d66a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d66e:	bf18      	it	ne
 800d670:	b236      	sxthne	r6, r6
 800d672:	e7ef      	b.n	800d654 <_printf_i+0xbc>
 800d674:	682b      	ldr	r3, [r5, #0]
 800d676:	6820      	ldr	r0, [r4, #0]
 800d678:	1d19      	adds	r1, r3, #4
 800d67a:	6029      	str	r1, [r5, #0]
 800d67c:	0601      	lsls	r1, r0, #24
 800d67e:	d501      	bpl.n	800d684 <_printf_i+0xec>
 800d680:	681e      	ldr	r6, [r3, #0]
 800d682:	e002      	b.n	800d68a <_printf_i+0xf2>
 800d684:	0646      	lsls	r6, r0, #25
 800d686:	d5fb      	bpl.n	800d680 <_printf_i+0xe8>
 800d688:	881e      	ldrh	r6, [r3, #0]
 800d68a:	4854      	ldr	r0, [pc, #336]	; (800d7dc <_printf_i+0x244>)
 800d68c:	2f6f      	cmp	r7, #111	; 0x6f
 800d68e:	bf0c      	ite	eq
 800d690:	2308      	moveq	r3, #8
 800d692:	230a      	movne	r3, #10
 800d694:	2100      	movs	r1, #0
 800d696:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d69a:	6865      	ldr	r5, [r4, #4]
 800d69c:	60a5      	str	r5, [r4, #8]
 800d69e:	2d00      	cmp	r5, #0
 800d6a0:	bfa2      	ittt	ge
 800d6a2:	6821      	ldrge	r1, [r4, #0]
 800d6a4:	f021 0104 	bicge.w	r1, r1, #4
 800d6a8:	6021      	strge	r1, [r4, #0]
 800d6aa:	b90e      	cbnz	r6, 800d6b0 <_printf_i+0x118>
 800d6ac:	2d00      	cmp	r5, #0
 800d6ae:	d04d      	beq.n	800d74c <_printf_i+0x1b4>
 800d6b0:	4615      	mov	r5, r2
 800d6b2:	fbb6 f1f3 	udiv	r1, r6, r3
 800d6b6:	fb03 6711 	mls	r7, r3, r1, r6
 800d6ba:	5dc7      	ldrb	r7, [r0, r7]
 800d6bc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d6c0:	4637      	mov	r7, r6
 800d6c2:	42bb      	cmp	r3, r7
 800d6c4:	460e      	mov	r6, r1
 800d6c6:	d9f4      	bls.n	800d6b2 <_printf_i+0x11a>
 800d6c8:	2b08      	cmp	r3, #8
 800d6ca:	d10b      	bne.n	800d6e4 <_printf_i+0x14c>
 800d6cc:	6823      	ldr	r3, [r4, #0]
 800d6ce:	07de      	lsls	r6, r3, #31
 800d6d0:	d508      	bpl.n	800d6e4 <_printf_i+0x14c>
 800d6d2:	6923      	ldr	r3, [r4, #16]
 800d6d4:	6861      	ldr	r1, [r4, #4]
 800d6d6:	4299      	cmp	r1, r3
 800d6d8:	bfde      	ittt	le
 800d6da:	2330      	movle	r3, #48	; 0x30
 800d6dc:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d6e0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d6e4:	1b52      	subs	r2, r2, r5
 800d6e6:	6122      	str	r2, [r4, #16]
 800d6e8:	f8cd a000 	str.w	sl, [sp]
 800d6ec:	464b      	mov	r3, r9
 800d6ee:	aa03      	add	r2, sp, #12
 800d6f0:	4621      	mov	r1, r4
 800d6f2:	4640      	mov	r0, r8
 800d6f4:	f7ff fee2 	bl	800d4bc <_printf_common>
 800d6f8:	3001      	adds	r0, #1
 800d6fa:	d14c      	bne.n	800d796 <_printf_i+0x1fe>
 800d6fc:	f04f 30ff 	mov.w	r0, #4294967295
 800d700:	b004      	add	sp, #16
 800d702:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d706:	4835      	ldr	r0, [pc, #212]	; (800d7dc <_printf_i+0x244>)
 800d708:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d70c:	6829      	ldr	r1, [r5, #0]
 800d70e:	6823      	ldr	r3, [r4, #0]
 800d710:	f851 6b04 	ldr.w	r6, [r1], #4
 800d714:	6029      	str	r1, [r5, #0]
 800d716:	061d      	lsls	r5, r3, #24
 800d718:	d514      	bpl.n	800d744 <_printf_i+0x1ac>
 800d71a:	07df      	lsls	r7, r3, #31
 800d71c:	bf44      	itt	mi
 800d71e:	f043 0320 	orrmi.w	r3, r3, #32
 800d722:	6023      	strmi	r3, [r4, #0]
 800d724:	b91e      	cbnz	r6, 800d72e <_printf_i+0x196>
 800d726:	6823      	ldr	r3, [r4, #0]
 800d728:	f023 0320 	bic.w	r3, r3, #32
 800d72c:	6023      	str	r3, [r4, #0]
 800d72e:	2310      	movs	r3, #16
 800d730:	e7b0      	b.n	800d694 <_printf_i+0xfc>
 800d732:	6823      	ldr	r3, [r4, #0]
 800d734:	f043 0320 	orr.w	r3, r3, #32
 800d738:	6023      	str	r3, [r4, #0]
 800d73a:	2378      	movs	r3, #120	; 0x78
 800d73c:	4828      	ldr	r0, [pc, #160]	; (800d7e0 <_printf_i+0x248>)
 800d73e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d742:	e7e3      	b.n	800d70c <_printf_i+0x174>
 800d744:	0659      	lsls	r1, r3, #25
 800d746:	bf48      	it	mi
 800d748:	b2b6      	uxthmi	r6, r6
 800d74a:	e7e6      	b.n	800d71a <_printf_i+0x182>
 800d74c:	4615      	mov	r5, r2
 800d74e:	e7bb      	b.n	800d6c8 <_printf_i+0x130>
 800d750:	682b      	ldr	r3, [r5, #0]
 800d752:	6826      	ldr	r6, [r4, #0]
 800d754:	6961      	ldr	r1, [r4, #20]
 800d756:	1d18      	adds	r0, r3, #4
 800d758:	6028      	str	r0, [r5, #0]
 800d75a:	0635      	lsls	r5, r6, #24
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	d501      	bpl.n	800d764 <_printf_i+0x1cc>
 800d760:	6019      	str	r1, [r3, #0]
 800d762:	e002      	b.n	800d76a <_printf_i+0x1d2>
 800d764:	0670      	lsls	r0, r6, #25
 800d766:	d5fb      	bpl.n	800d760 <_printf_i+0x1c8>
 800d768:	8019      	strh	r1, [r3, #0]
 800d76a:	2300      	movs	r3, #0
 800d76c:	6123      	str	r3, [r4, #16]
 800d76e:	4615      	mov	r5, r2
 800d770:	e7ba      	b.n	800d6e8 <_printf_i+0x150>
 800d772:	682b      	ldr	r3, [r5, #0]
 800d774:	1d1a      	adds	r2, r3, #4
 800d776:	602a      	str	r2, [r5, #0]
 800d778:	681d      	ldr	r5, [r3, #0]
 800d77a:	6862      	ldr	r2, [r4, #4]
 800d77c:	2100      	movs	r1, #0
 800d77e:	4628      	mov	r0, r5
 800d780:	f7f2 fd36 	bl	80001f0 <memchr>
 800d784:	b108      	cbz	r0, 800d78a <_printf_i+0x1f2>
 800d786:	1b40      	subs	r0, r0, r5
 800d788:	6060      	str	r0, [r4, #4]
 800d78a:	6863      	ldr	r3, [r4, #4]
 800d78c:	6123      	str	r3, [r4, #16]
 800d78e:	2300      	movs	r3, #0
 800d790:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d794:	e7a8      	b.n	800d6e8 <_printf_i+0x150>
 800d796:	6923      	ldr	r3, [r4, #16]
 800d798:	462a      	mov	r2, r5
 800d79a:	4649      	mov	r1, r9
 800d79c:	4640      	mov	r0, r8
 800d79e:	47d0      	blx	sl
 800d7a0:	3001      	adds	r0, #1
 800d7a2:	d0ab      	beq.n	800d6fc <_printf_i+0x164>
 800d7a4:	6823      	ldr	r3, [r4, #0]
 800d7a6:	079b      	lsls	r3, r3, #30
 800d7a8:	d413      	bmi.n	800d7d2 <_printf_i+0x23a>
 800d7aa:	68e0      	ldr	r0, [r4, #12]
 800d7ac:	9b03      	ldr	r3, [sp, #12]
 800d7ae:	4298      	cmp	r0, r3
 800d7b0:	bfb8      	it	lt
 800d7b2:	4618      	movlt	r0, r3
 800d7b4:	e7a4      	b.n	800d700 <_printf_i+0x168>
 800d7b6:	2301      	movs	r3, #1
 800d7b8:	4632      	mov	r2, r6
 800d7ba:	4649      	mov	r1, r9
 800d7bc:	4640      	mov	r0, r8
 800d7be:	47d0      	blx	sl
 800d7c0:	3001      	adds	r0, #1
 800d7c2:	d09b      	beq.n	800d6fc <_printf_i+0x164>
 800d7c4:	3501      	adds	r5, #1
 800d7c6:	68e3      	ldr	r3, [r4, #12]
 800d7c8:	9903      	ldr	r1, [sp, #12]
 800d7ca:	1a5b      	subs	r3, r3, r1
 800d7cc:	42ab      	cmp	r3, r5
 800d7ce:	dcf2      	bgt.n	800d7b6 <_printf_i+0x21e>
 800d7d0:	e7eb      	b.n	800d7aa <_printf_i+0x212>
 800d7d2:	2500      	movs	r5, #0
 800d7d4:	f104 0619 	add.w	r6, r4, #25
 800d7d8:	e7f5      	b.n	800d7c6 <_printf_i+0x22e>
 800d7da:	bf00      	nop
 800d7dc:	0800dfe1 	.word	0x0800dfe1
 800d7e0:	0800dff2 	.word	0x0800dff2

0800d7e4 <memmove>:
 800d7e4:	4288      	cmp	r0, r1
 800d7e6:	b510      	push	{r4, lr}
 800d7e8:	eb01 0402 	add.w	r4, r1, r2
 800d7ec:	d902      	bls.n	800d7f4 <memmove+0x10>
 800d7ee:	4284      	cmp	r4, r0
 800d7f0:	4623      	mov	r3, r4
 800d7f2:	d807      	bhi.n	800d804 <memmove+0x20>
 800d7f4:	1e43      	subs	r3, r0, #1
 800d7f6:	42a1      	cmp	r1, r4
 800d7f8:	d008      	beq.n	800d80c <memmove+0x28>
 800d7fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d7fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d802:	e7f8      	b.n	800d7f6 <memmove+0x12>
 800d804:	4402      	add	r2, r0
 800d806:	4601      	mov	r1, r0
 800d808:	428a      	cmp	r2, r1
 800d80a:	d100      	bne.n	800d80e <memmove+0x2a>
 800d80c:	bd10      	pop	{r4, pc}
 800d80e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d812:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d816:	e7f7      	b.n	800d808 <memmove+0x24>

0800d818 <_realloc_r>:
 800d818:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d81c:	4680      	mov	r8, r0
 800d81e:	4614      	mov	r4, r2
 800d820:	460e      	mov	r6, r1
 800d822:	b921      	cbnz	r1, 800d82e <_realloc_r+0x16>
 800d824:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d828:	4611      	mov	r1, r2
 800d82a:	f7ff bc3b 	b.w	800d0a4 <_malloc_r>
 800d82e:	b92a      	cbnz	r2, 800d83c <_realloc_r+0x24>
 800d830:	f7ff fbcc 	bl	800cfcc <_free_r>
 800d834:	4625      	mov	r5, r4
 800d836:	4628      	mov	r0, r5
 800d838:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d83c:	f000 f81b 	bl	800d876 <_malloc_usable_size_r>
 800d840:	4284      	cmp	r4, r0
 800d842:	4607      	mov	r7, r0
 800d844:	d802      	bhi.n	800d84c <_realloc_r+0x34>
 800d846:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d84a:	d812      	bhi.n	800d872 <_realloc_r+0x5a>
 800d84c:	4621      	mov	r1, r4
 800d84e:	4640      	mov	r0, r8
 800d850:	f7ff fc28 	bl	800d0a4 <_malloc_r>
 800d854:	4605      	mov	r5, r0
 800d856:	2800      	cmp	r0, #0
 800d858:	d0ed      	beq.n	800d836 <_realloc_r+0x1e>
 800d85a:	42bc      	cmp	r4, r7
 800d85c:	4622      	mov	r2, r4
 800d85e:	4631      	mov	r1, r6
 800d860:	bf28      	it	cs
 800d862:	463a      	movcs	r2, r7
 800d864:	f7ff fb9c 	bl	800cfa0 <memcpy>
 800d868:	4631      	mov	r1, r6
 800d86a:	4640      	mov	r0, r8
 800d86c:	f7ff fbae 	bl	800cfcc <_free_r>
 800d870:	e7e1      	b.n	800d836 <_realloc_r+0x1e>
 800d872:	4635      	mov	r5, r6
 800d874:	e7df      	b.n	800d836 <_realloc_r+0x1e>

0800d876 <_malloc_usable_size_r>:
 800d876:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d87a:	1f18      	subs	r0, r3, #4
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	bfbc      	itt	lt
 800d880:	580b      	ldrlt	r3, [r1, r0]
 800d882:	18c0      	addlt	r0, r0, r3
 800d884:	4770      	bx	lr
	...

0800d888 <_init>:
 800d888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d88a:	bf00      	nop
 800d88c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d88e:	bc08      	pop	{r3}
 800d890:	469e      	mov	lr, r3
 800d892:	4770      	bx	lr

0800d894 <_fini>:
 800d894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d896:	bf00      	nop
 800d898:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d89a:	bc08      	pop	{r3}
 800d89c:	469e      	mov	lr, r3
 800d89e:	4770      	bx	lr
