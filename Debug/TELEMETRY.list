
TELEMETRY.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b9b8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000624  0800bb58  0800bb58  0001bb58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c17c  0800c17c  00021024  2**0
                  CONTENTS
  4 .ARM          00000008  0800c17c  0800c17c  0001c17c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c184  0800c184  00021024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c184  0800c184  0001c184  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c188  0800c188  0001c188  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  0800c18c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ARM.__at_0x20000000 00001000  20000024  0800c1b0  00020024  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          0000b6f4  20001024  0800d1b0  00021024  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  2000c718  0800d1b0  0002c718  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00021024  2**0
                  CONTENTS, READONLY
 13 .debug_info   00022179  00000000  00000000  00021054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004733  00000000  00000000  000431cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001f80  00000000  00000000  00047900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001d80  00000000  00000000  00049880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00008284  00000000  00000000  0004b600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002b38e  00000000  00000000  00053884  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000abe66  00000000  00000000  0007ec12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012aa78  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008460  00000000  00000000  0012aac8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20001024 	.word	0x20001024
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800bb40 	.word	0x0800bb40

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20001028 	.word	0x20001028
 80001dc:	0800bb40 	.word	0x0800bb40

080001e0 <__aeabi_dmul>:
 80001e0:	b570      	push	{r4, r5, r6, lr}
 80001e2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001e6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001ea:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001ee:	bf1d      	ittte	ne
 80001f0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001f4:	ea94 0f0c 	teqne	r4, ip
 80001f8:	ea95 0f0c 	teqne	r5, ip
 80001fc:	f000 f8de 	bleq	80003bc <__aeabi_dmul+0x1dc>
 8000200:	442c      	add	r4, r5
 8000202:	ea81 0603 	eor.w	r6, r1, r3
 8000206:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800020a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800020e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000212:	bf18      	it	ne
 8000214:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000218:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800021c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000220:	d038      	beq.n	8000294 <__aeabi_dmul+0xb4>
 8000222:	fba0 ce02 	umull	ip, lr, r0, r2
 8000226:	f04f 0500 	mov.w	r5, #0
 800022a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800022e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000232:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000236:	f04f 0600 	mov.w	r6, #0
 800023a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800023e:	f09c 0f00 	teq	ip, #0
 8000242:	bf18      	it	ne
 8000244:	f04e 0e01 	orrne.w	lr, lr, #1
 8000248:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800024c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000250:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000254:	d204      	bcs.n	8000260 <__aeabi_dmul+0x80>
 8000256:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800025a:	416d      	adcs	r5, r5
 800025c:	eb46 0606 	adc.w	r6, r6, r6
 8000260:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000264:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000268:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800026c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000270:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000274:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000278:	bf88      	it	hi
 800027a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800027e:	d81e      	bhi.n	80002be <__aeabi_dmul+0xde>
 8000280:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000284:	bf08      	it	eq
 8000286:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800028a:	f150 0000 	adcs.w	r0, r0, #0
 800028e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000292:	bd70      	pop	{r4, r5, r6, pc}
 8000294:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000298:	ea46 0101 	orr.w	r1, r6, r1
 800029c:	ea40 0002 	orr.w	r0, r0, r2
 80002a0:	ea81 0103 	eor.w	r1, r1, r3
 80002a4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002a8:	bfc2      	ittt	gt
 80002aa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002ae:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002b2:	bd70      	popgt	{r4, r5, r6, pc}
 80002b4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002b8:	f04f 0e00 	mov.w	lr, #0
 80002bc:	3c01      	subs	r4, #1
 80002be:	f300 80ab 	bgt.w	8000418 <__aeabi_dmul+0x238>
 80002c2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002c6:	bfde      	ittt	le
 80002c8:	2000      	movle	r0, #0
 80002ca:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002ce:	bd70      	pople	{r4, r5, r6, pc}
 80002d0:	f1c4 0400 	rsb	r4, r4, #0
 80002d4:	3c20      	subs	r4, #32
 80002d6:	da35      	bge.n	8000344 <__aeabi_dmul+0x164>
 80002d8:	340c      	adds	r4, #12
 80002da:	dc1b      	bgt.n	8000314 <__aeabi_dmul+0x134>
 80002dc:	f104 0414 	add.w	r4, r4, #20
 80002e0:	f1c4 0520 	rsb	r5, r4, #32
 80002e4:	fa00 f305 	lsl.w	r3, r0, r5
 80002e8:	fa20 f004 	lsr.w	r0, r0, r4
 80002ec:	fa01 f205 	lsl.w	r2, r1, r5
 80002f0:	ea40 0002 	orr.w	r0, r0, r2
 80002f4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002fc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000300:	fa21 f604 	lsr.w	r6, r1, r4
 8000304:	eb42 0106 	adc.w	r1, r2, r6
 8000308:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800030c:	bf08      	it	eq
 800030e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000312:	bd70      	pop	{r4, r5, r6, pc}
 8000314:	f1c4 040c 	rsb	r4, r4, #12
 8000318:	f1c4 0520 	rsb	r5, r4, #32
 800031c:	fa00 f304 	lsl.w	r3, r0, r4
 8000320:	fa20 f005 	lsr.w	r0, r0, r5
 8000324:	fa01 f204 	lsl.w	r2, r1, r4
 8000328:	ea40 0002 	orr.w	r0, r0, r2
 800032c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000330:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000334:	f141 0100 	adc.w	r1, r1, #0
 8000338:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800033c:	bf08      	it	eq
 800033e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000342:	bd70      	pop	{r4, r5, r6, pc}
 8000344:	f1c4 0520 	rsb	r5, r4, #32
 8000348:	fa00 f205 	lsl.w	r2, r0, r5
 800034c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000350:	fa20 f304 	lsr.w	r3, r0, r4
 8000354:	fa01 f205 	lsl.w	r2, r1, r5
 8000358:	ea43 0302 	orr.w	r3, r3, r2
 800035c:	fa21 f004 	lsr.w	r0, r1, r4
 8000360:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000364:	fa21 f204 	lsr.w	r2, r1, r4
 8000368:	ea20 0002 	bic.w	r0, r0, r2
 800036c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000370:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000374:	bf08      	it	eq
 8000376:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800037a:	bd70      	pop	{r4, r5, r6, pc}
 800037c:	f094 0f00 	teq	r4, #0
 8000380:	d10f      	bne.n	80003a2 <__aeabi_dmul+0x1c2>
 8000382:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000386:	0040      	lsls	r0, r0, #1
 8000388:	eb41 0101 	adc.w	r1, r1, r1
 800038c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000390:	bf08      	it	eq
 8000392:	3c01      	subeq	r4, #1
 8000394:	d0f7      	beq.n	8000386 <__aeabi_dmul+0x1a6>
 8000396:	ea41 0106 	orr.w	r1, r1, r6
 800039a:	f095 0f00 	teq	r5, #0
 800039e:	bf18      	it	ne
 80003a0:	4770      	bxne	lr
 80003a2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003a6:	0052      	lsls	r2, r2, #1
 80003a8:	eb43 0303 	adc.w	r3, r3, r3
 80003ac:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003b0:	bf08      	it	eq
 80003b2:	3d01      	subeq	r5, #1
 80003b4:	d0f7      	beq.n	80003a6 <__aeabi_dmul+0x1c6>
 80003b6:	ea43 0306 	orr.w	r3, r3, r6
 80003ba:	4770      	bx	lr
 80003bc:	ea94 0f0c 	teq	r4, ip
 80003c0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003c4:	bf18      	it	ne
 80003c6:	ea95 0f0c 	teqne	r5, ip
 80003ca:	d00c      	beq.n	80003e6 <__aeabi_dmul+0x206>
 80003cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d0:	bf18      	it	ne
 80003d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003d6:	d1d1      	bne.n	800037c <__aeabi_dmul+0x19c>
 80003d8:	ea81 0103 	eor.w	r1, r1, r3
 80003dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003e0:	f04f 0000 	mov.w	r0, #0
 80003e4:	bd70      	pop	{r4, r5, r6, pc}
 80003e6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003ea:	bf06      	itte	eq
 80003ec:	4610      	moveq	r0, r2
 80003ee:	4619      	moveq	r1, r3
 80003f0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003f4:	d019      	beq.n	800042a <__aeabi_dmul+0x24a>
 80003f6:	ea94 0f0c 	teq	r4, ip
 80003fa:	d102      	bne.n	8000402 <__aeabi_dmul+0x222>
 80003fc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000400:	d113      	bne.n	800042a <__aeabi_dmul+0x24a>
 8000402:	ea95 0f0c 	teq	r5, ip
 8000406:	d105      	bne.n	8000414 <__aeabi_dmul+0x234>
 8000408:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800040c:	bf1c      	itt	ne
 800040e:	4610      	movne	r0, r2
 8000410:	4619      	movne	r1, r3
 8000412:	d10a      	bne.n	800042a <__aeabi_dmul+0x24a>
 8000414:	ea81 0103 	eor.w	r1, r1, r3
 8000418:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800041c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd70      	pop	{r4, r5, r6, pc}
 800042a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800042e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000432:	bd70      	pop	{r4, r5, r6, pc}

08000434 <__aeabi_drsub>:
 8000434:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000438:	e002      	b.n	8000440 <__adddf3>
 800043a:	bf00      	nop

0800043c <__aeabi_dsub>:
 800043c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000440 <__adddf3>:
 8000440:	b530      	push	{r4, r5, lr}
 8000442:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000446:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800044a:	ea94 0f05 	teq	r4, r5
 800044e:	bf08      	it	eq
 8000450:	ea90 0f02 	teqeq	r0, r2
 8000454:	bf1f      	itttt	ne
 8000456:	ea54 0c00 	orrsne.w	ip, r4, r0
 800045a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800045e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000462:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000466:	f000 80e2 	beq.w	800062e <__adddf3+0x1ee>
 800046a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800046e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000472:	bfb8      	it	lt
 8000474:	426d      	neglt	r5, r5
 8000476:	dd0c      	ble.n	8000492 <__adddf3+0x52>
 8000478:	442c      	add	r4, r5
 800047a:	ea80 0202 	eor.w	r2, r0, r2
 800047e:	ea81 0303 	eor.w	r3, r1, r3
 8000482:	ea82 0000 	eor.w	r0, r2, r0
 8000486:	ea83 0101 	eor.w	r1, r3, r1
 800048a:	ea80 0202 	eor.w	r2, r0, r2
 800048e:	ea81 0303 	eor.w	r3, r1, r3
 8000492:	2d36      	cmp	r5, #54	; 0x36
 8000494:	bf88      	it	hi
 8000496:	bd30      	pophi	{r4, r5, pc}
 8000498:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800049c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004a0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004a4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004a8:	d002      	beq.n	80004b0 <__adddf3+0x70>
 80004aa:	4240      	negs	r0, r0
 80004ac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004b0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004b4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004b8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004bc:	d002      	beq.n	80004c4 <__adddf3+0x84>
 80004be:	4252      	negs	r2, r2
 80004c0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004c4:	ea94 0f05 	teq	r4, r5
 80004c8:	f000 80a7 	beq.w	800061a <__adddf3+0x1da>
 80004cc:	f1a4 0401 	sub.w	r4, r4, #1
 80004d0:	f1d5 0e20 	rsbs	lr, r5, #32
 80004d4:	db0d      	blt.n	80004f2 <__adddf3+0xb2>
 80004d6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004da:	fa22 f205 	lsr.w	r2, r2, r5
 80004de:	1880      	adds	r0, r0, r2
 80004e0:	f141 0100 	adc.w	r1, r1, #0
 80004e4:	fa03 f20e 	lsl.w	r2, r3, lr
 80004e8:	1880      	adds	r0, r0, r2
 80004ea:	fa43 f305 	asr.w	r3, r3, r5
 80004ee:	4159      	adcs	r1, r3
 80004f0:	e00e      	b.n	8000510 <__adddf3+0xd0>
 80004f2:	f1a5 0520 	sub.w	r5, r5, #32
 80004f6:	f10e 0e20 	add.w	lr, lr, #32
 80004fa:	2a01      	cmp	r2, #1
 80004fc:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000500:	bf28      	it	cs
 8000502:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000506:	fa43 f305 	asr.w	r3, r3, r5
 800050a:	18c0      	adds	r0, r0, r3
 800050c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000514:	d507      	bpl.n	8000526 <__adddf3+0xe6>
 8000516:	f04f 0e00 	mov.w	lr, #0
 800051a:	f1dc 0c00 	rsbs	ip, ip, #0
 800051e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000522:	eb6e 0101 	sbc.w	r1, lr, r1
 8000526:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800052a:	d31b      	bcc.n	8000564 <__adddf3+0x124>
 800052c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000530:	d30c      	bcc.n	800054c <__adddf3+0x10c>
 8000532:	0849      	lsrs	r1, r1, #1
 8000534:	ea5f 0030 	movs.w	r0, r0, rrx
 8000538:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800053c:	f104 0401 	add.w	r4, r4, #1
 8000540:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000544:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000548:	f080 809a 	bcs.w	8000680 <__adddf3+0x240>
 800054c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000550:	bf08      	it	eq
 8000552:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000556:	f150 0000 	adcs.w	r0, r0, #0
 800055a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800055e:	ea41 0105 	orr.w	r1, r1, r5
 8000562:	bd30      	pop	{r4, r5, pc}
 8000564:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000568:	4140      	adcs	r0, r0
 800056a:	eb41 0101 	adc.w	r1, r1, r1
 800056e:	3c01      	subs	r4, #1
 8000570:	bf28      	it	cs
 8000572:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000576:	d2e9      	bcs.n	800054c <__adddf3+0x10c>
 8000578:	f091 0f00 	teq	r1, #0
 800057c:	bf04      	itt	eq
 800057e:	4601      	moveq	r1, r0
 8000580:	2000      	moveq	r0, #0
 8000582:	fab1 f381 	clz	r3, r1
 8000586:	bf08      	it	eq
 8000588:	3320      	addeq	r3, #32
 800058a:	f1a3 030b 	sub.w	r3, r3, #11
 800058e:	f1b3 0220 	subs.w	r2, r3, #32
 8000592:	da0c      	bge.n	80005ae <__adddf3+0x16e>
 8000594:	320c      	adds	r2, #12
 8000596:	dd08      	ble.n	80005aa <__adddf3+0x16a>
 8000598:	f102 0c14 	add.w	ip, r2, #20
 800059c:	f1c2 020c 	rsb	r2, r2, #12
 80005a0:	fa01 f00c 	lsl.w	r0, r1, ip
 80005a4:	fa21 f102 	lsr.w	r1, r1, r2
 80005a8:	e00c      	b.n	80005c4 <__adddf3+0x184>
 80005aa:	f102 0214 	add.w	r2, r2, #20
 80005ae:	bfd8      	it	le
 80005b0:	f1c2 0c20 	rsble	ip, r2, #32
 80005b4:	fa01 f102 	lsl.w	r1, r1, r2
 80005b8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005bc:	bfdc      	itt	le
 80005be:	ea41 010c 	orrle.w	r1, r1, ip
 80005c2:	4090      	lslle	r0, r2
 80005c4:	1ae4      	subs	r4, r4, r3
 80005c6:	bfa2      	ittt	ge
 80005c8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005cc:	4329      	orrge	r1, r5
 80005ce:	bd30      	popge	{r4, r5, pc}
 80005d0:	ea6f 0404 	mvn.w	r4, r4
 80005d4:	3c1f      	subs	r4, #31
 80005d6:	da1c      	bge.n	8000612 <__adddf3+0x1d2>
 80005d8:	340c      	adds	r4, #12
 80005da:	dc0e      	bgt.n	80005fa <__adddf3+0x1ba>
 80005dc:	f104 0414 	add.w	r4, r4, #20
 80005e0:	f1c4 0220 	rsb	r2, r4, #32
 80005e4:	fa20 f004 	lsr.w	r0, r0, r4
 80005e8:	fa01 f302 	lsl.w	r3, r1, r2
 80005ec:	ea40 0003 	orr.w	r0, r0, r3
 80005f0:	fa21 f304 	lsr.w	r3, r1, r4
 80005f4:	ea45 0103 	orr.w	r1, r5, r3
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	f1c4 040c 	rsb	r4, r4, #12
 80005fe:	f1c4 0220 	rsb	r2, r4, #32
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 f304 	lsl.w	r3, r1, r4
 800060a:	ea40 0003 	orr.w	r0, r0, r3
 800060e:	4629      	mov	r1, r5
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	fa21 f004 	lsr.w	r0, r1, r4
 8000616:	4629      	mov	r1, r5
 8000618:	bd30      	pop	{r4, r5, pc}
 800061a:	f094 0f00 	teq	r4, #0
 800061e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000622:	bf06      	itte	eq
 8000624:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000628:	3401      	addeq	r4, #1
 800062a:	3d01      	subne	r5, #1
 800062c:	e74e      	b.n	80004cc <__adddf3+0x8c>
 800062e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000632:	bf18      	it	ne
 8000634:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000638:	d029      	beq.n	800068e <__adddf3+0x24e>
 800063a:	ea94 0f05 	teq	r4, r5
 800063e:	bf08      	it	eq
 8000640:	ea90 0f02 	teqeq	r0, r2
 8000644:	d005      	beq.n	8000652 <__adddf3+0x212>
 8000646:	ea54 0c00 	orrs.w	ip, r4, r0
 800064a:	bf04      	itt	eq
 800064c:	4619      	moveq	r1, r3
 800064e:	4610      	moveq	r0, r2
 8000650:	bd30      	pop	{r4, r5, pc}
 8000652:	ea91 0f03 	teq	r1, r3
 8000656:	bf1e      	ittt	ne
 8000658:	2100      	movne	r1, #0
 800065a:	2000      	movne	r0, #0
 800065c:	bd30      	popne	{r4, r5, pc}
 800065e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000662:	d105      	bne.n	8000670 <__adddf3+0x230>
 8000664:	0040      	lsls	r0, r0, #1
 8000666:	4149      	adcs	r1, r1
 8000668:	bf28      	it	cs
 800066a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd30      	pop	{r4, r5, pc}
 8000670:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000674:	bf3c      	itt	cc
 8000676:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800067a:	bd30      	popcc	{r4, r5, pc}
 800067c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000680:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000684:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000688:	f04f 0000 	mov.w	r0, #0
 800068c:	bd30      	pop	{r4, r5, pc}
 800068e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000692:	bf1a      	itte	ne
 8000694:	4619      	movne	r1, r3
 8000696:	4610      	movne	r0, r2
 8000698:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800069c:	bf1c      	itt	ne
 800069e:	460b      	movne	r3, r1
 80006a0:	4602      	movne	r2, r0
 80006a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006a6:	bf06      	itte	eq
 80006a8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006ac:	ea91 0f03 	teqeq	r1, r3
 80006b0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006b4:	bd30      	pop	{r4, r5, pc}
 80006b6:	bf00      	nop

080006b8 <__aeabi_ui2d>:
 80006b8:	f090 0f00 	teq	r0, #0
 80006bc:	bf04      	itt	eq
 80006be:	2100      	moveq	r1, #0
 80006c0:	4770      	bxeq	lr
 80006c2:	b530      	push	{r4, r5, lr}
 80006c4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006cc:	f04f 0500 	mov.w	r5, #0
 80006d0:	f04f 0100 	mov.w	r1, #0
 80006d4:	e750      	b.n	8000578 <__adddf3+0x138>
 80006d6:	bf00      	nop

080006d8 <__aeabi_i2d>:
 80006d8:	f090 0f00 	teq	r0, #0
 80006dc:	bf04      	itt	eq
 80006de:	2100      	moveq	r1, #0
 80006e0:	4770      	bxeq	lr
 80006e2:	b530      	push	{r4, r5, lr}
 80006e4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006e8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ec:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006f0:	bf48      	it	mi
 80006f2:	4240      	negmi	r0, r0
 80006f4:	f04f 0100 	mov.w	r1, #0
 80006f8:	e73e      	b.n	8000578 <__adddf3+0x138>
 80006fa:	bf00      	nop

080006fc <__aeabi_f2d>:
 80006fc:	0042      	lsls	r2, r0, #1
 80006fe:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000702:	ea4f 0131 	mov.w	r1, r1, rrx
 8000706:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800070a:	bf1f      	itttt	ne
 800070c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000710:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000714:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000718:	4770      	bxne	lr
 800071a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800071e:	bf08      	it	eq
 8000720:	4770      	bxeq	lr
 8000722:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000726:	bf04      	itt	eq
 8000728:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800072c:	4770      	bxeq	lr
 800072e:	b530      	push	{r4, r5, lr}
 8000730:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000734:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000738:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800073c:	e71c      	b.n	8000578 <__adddf3+0x138>
 800073e:	bf00      	nop

08000740 <__aeabi_ul2d>:
 8000740:	ea50 0201 	orrs.w	r2, r0, r1
 8000744:	bf08      	it	eq
 8000746:	4770      	bxeq	lr
 8000748:	b530      	push	{r4, r5, lr}
 800074a:	f04f 0500 	mov.w	r5, #0
 800074e:	e00a      	b.n	8000766 <__aeabi_l2d+0x16>

08000750 <__aeabi_l2d>:
 8000750:	ea50 0201 	orrs.w	r2, r0, r1
 8000754:	bf08      	it	eq
 8000756:	4770      	bxeq	lr
 8000758:	b530      	push	{r4, r5, lr}
 800075a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800075e:	d502      	bpl.n	8000766 <__aeabi_l2d+0x16>
 8000760:	4240      	negs	r0, r0
 8000762:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000766:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800076a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800076e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000772:	f43f aed8 	beq.w	8000526 <__adddf3+0xe6>
 8000776:	f04f 0203 	mov.w	r2, #3
 800077a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800077e:	bf18      	it	ne
 8000780:	3203      	addne	r2, #3
 8000782:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000786:	bf18      	it	ne
 8000788:	3203      	addne	r2, #3
 800078a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800078e:	f1c2 0320 	rsb	r3, r2, #32
 8000792:	fa00 fc03 	lsl.w	ip, r0, r3
 8000796:	fa20 f002 	lsr.w	r0, r0, r2
 800079a:	fa01 fe03 	lsl.w	lr, r1, r3
 800079e:	ea40 000e 	orr.w	r0, r0, lr
 80007a2:	fa21 f102 	lsr.w	r1, r1, r2
 80007a6:	4414      	add	r4, r2
 80007a8:	e6bd      	b.n	8000526 <__adddf3+0xe6>
 80007aa:	bf00      	nop

080007ac <__aeabi_d2uiz>:
 80007ac:	004a      	lsls	r2, r1, #1
 80007ae:	d211      	bcs.n	80007d4 <__aeabi_d2uiz+0x28>
 80007b0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80007b4:	d211      	bcs.n	80007da <__aeabi_d2uiz+0x2e>
 80007b6:	d50d      	bpl.n	80007d4 <__aeabi_d2uiz+0x28>
 80007b8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80007bc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007c0:	d40e      	bmi.n	80007e0 <__aeabi_d2uiz+0x34>
 80007c2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007ca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007ce:	fa23 f002 	lsr.w	r0, r3, r2
 80007d2:	4770      	bx	lr
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	4770      	bx	lr
 80007da:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80007de:	d102      	bne.n	80007e6 <__aeabi_d2uiz+0x3a>
 80007e0:	f04f 30ff 	mov.w	r0, #4294967295
 80007e4:	4770      	bx	lr
 80007e6:	f04f 0000 	mov.w	r0, #0
 80007ea:	4770      	bx	lr

080007ec <__aeabi_uldivmod>:
 80007ec:	b953      	cbnz	r3, 8000804 <__aeabi_uldivmod+0x18>
 80007ee:	b94a      	cbnz	r2, 8000804 <__aeabi_uldivmod+0x18>
 80007f0:	2900      	cmp	r1, #0
 80007f2:	bf08      	it	eq
 80007f4:	2800      	cmpeq	r0, #0
 80007f6:	bf1c      	itt	ne
 80007f8:	f04f 31ff 	movne.w	r1, #4294967295
 80007fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000800:	f000 b974 	b.w	8000aec <__aeabi_idiv0>
 8000804:	f1ad 0c08 	sub.w	ip, sp, #8
 8000808:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800080c:	f000 f806 	bl	800081c <__udivmoddi4>
 8000810:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000814:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000818:	b004      	add	sp, #16
 800081a:	4770      	bx	lr

0800081c <__udivmoddi4>:
 800081c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000820:	9d08      	ldr	r5, [sp, #32]
 8000822:	4604      	mov	r4, r0
 8000824:	468e      	mov	lr, r1
 8000826:	2b00      	cmp	r3, #0
 8000828:	d14d      	bne.n	80008c6 <__udivmoddi4+0xaa>
 800082a:	428a      	cmp	r2, r1
 800082c:	4694      	mov	ip, r2
 800082e:	d969      	bls.n	8000904 <__udivmoddi4+0xe8>
 8000830:	fab2 f282 	clz	r2, r2
 8000834:	b152      	cbz	r2, 800084c <__udivmoddi4+0x30>
 8000836:	fa01 f302 	lsl.w	r3, r1, r2
 800083a:	f1c2 0120 	rsb	r1, r2, #32
 800083e:	fa20 f101 	lsr.w	r1, r0, r1
 8000842:	fa0c fc02 	lsl.w	ip, ip, r2
 8000846:	ea41 0e03 	orr.w	lr, r1, r3
 800084a:	4094      	lsls	r4, r2
 800084c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000850:	0c21      	lsrs	r1, r4, #16
 8000852:	fbbe f6f8 	udiv	r6, lr, r8
 8000856:	fa1f f78c 	uxth.w	r7, ip
 800085a:	fb08 e316 	mls	r3, r8, r6, lr
 800085e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000862:	fb06 f107 	mul.w	r1, r6, r7
 8000866:	4299      	cmp	r1, r3
 8000868:	d90a      	bls.n	8000880 <__udivmoddi4+0x64>
 800086a:	eb1c 0303 	adds.w	r3, ip, r3
 800086e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000872:	f080 811f 	bcs.w	8000ab4 <__udivmoddi4+0x298>
 8000876:	4299      	cmp	r1, r3
 8000878:	f240 811c 	bls.w	8000ab4 <__udivmoddi4+0x298>
 800087c:	3e02      	subs	r6, #2
 800087e:	4463      	add	r3, ip
 8000880:	1a5b      	subs	r3, r3, r1
 8000882:	b2a4      	uxth	r4, r4
 8000884:	fbb3 f0f8 	udiv	r0, r3, r8
 8000888:	fb08 3310 	mls	r3, r8, r0, r3
 800088c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000890:	fb00 f707 	mul.w	r7, r0, r7
 8000894:	42a7      	cmp	r7, r4
 8000896:	d90a      	bls.n	80008ae <__udivmoddi4+0x92>
 8000898:	eb1c 0404 	adds.w	r4, ip, r4
 800089c:	f100 33ff 	add.w	r3, r0, #4294967295
 80008a0:	f080 810a 	bcs.w	8000ab8 <__udivmoddi4+0x29c>
 80008a4:	42a7      	cmp	r7, r4
 80008a6:	f240 8107 	bls.w	8000ab8 <__udivmoddi4+0x29c>
 80008aa:	4464      	add	r4, ip
 80008ac:	3802      	subs	r0, #2
 80008ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80008b2:	1be4      	subs	r4, r4, r7
 80008b4:	2600      	movs	r6, #0
 80008b6:	b11d      	cbz	r5, 80008c0 <__udivmoddi4+0xa4>
 80008b8:	40d4      	lsrs	r4, r2
 80008ba:	2300      	movs	r3, #0
 80008bc:	e9c5 4300 	strd	r4, r3, [r5]
 80008c0:	4631      	mov	r1, r6
 80008c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008c6:	428b      	cmp	r3, r1
 80008c8:	d909      	bls.n	80008de <__udivmoddi4+0xc2>
 80008ca:	2d00      	cmp	r5, #0
 80008cc:	f000 80ef 	beq.w	8000aae <__udivmoddi4+0x292>
 80008d0:	2600      	movs	r6, #0
 80008d2:	e9c5 0100 	strd	r0, r1, [r5]
 80008d6:	4630      	mov	r0, r6
 80008d8:	4631      	mov	r1, r6
 80008da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008de:	fab3 f683 	clz	r6, r3
 80008e2:	2e00      	cmp	r6, #0
 80008e4:	d14a      	bne.n	800097c <__udivmoddi4+0x160>
 80008e6:	428b      	cmp	r3, r1
 80008e8:	d302      	bcc.n	80008f0 <__udivmoddi4+0xd4>
 80008ea:	4282      	cmp	r2, r0
 80008ec:	f200 80f9 	bhi.w	8000ae2 <__udivmoddi4+0x2c6>
 80008f0:	1a84      	subs	r4, r0, r2
 80008f2:	eb61 0303 	sbc.w	r3, r1, r3
 80008f6:	2001      	movs	r0, #1
 80008f8:	469e      	mov	lr, r3
 80008fa:	2d00      	cmp	r5, #0
 80008fc:	d0e0      	beq.n	80008c0 <__udivmoddi4+0xa4>
 80008fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000902:	e7dd      	b.n	80008c0 <__udivmoddi4+0xa4>
 8000904:	b902      	cbnz	r2, 8000908 <__udivmoddi4+0xec>
 8000906:	deff      	udf	#255	; 0xff
 8000908:	fab2 f282 	clz	r2, r2
 800090c:	2a00      	cmp	r2, #0
 800090e:	f040 8092 	bne.w	8000a36 <__udivmoddi4+0x21a>
 8000912:	eba1 010c 	sub.w	r1, r1, ip
 8000916:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800091a:	fa1f fe8c 	uxth.w	lr, ip
 800091e:	2601      	movs	r6, #1
 8000920:	0c20      	lsrs	r0, r4, #16
 8000922:	fbb1 f3f7 	udiv	r3, r1, r7
 8000926:	fb07 1113 	mls	r1, r7, r3, r1
 800092a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800092e:	fb0e f003 	mul.w	r0, lr, r3
 8000932:	4288      	cmp	r0, r1
 8000934:	d908      	bls.n	8000948 <__udivmoddi4+0x12c>
 8000936:	eb1c 0101 	adds.w	r1, ip, r1
 800093a:	f103 38ff 	add.w	r8, r3, #4294967295
 800093e:	d202      	bcs.n	8000946 <__udivmoddi4+0x12a>
 8000940:	4288      	cmp	r0, r1
 8000942:	f200 80cb 	bhi.w	8000adc <__udivmoddi4+0x2c0>
 8000946:	4643      	mov	r3, r8
 8000948:	1a09      	subs	r1, r1, r0
 800094a:	b2a4      	uxth	r4, r4
 800094c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000950:	fb07 1110 	mls	r1, r7, r0, r1
 8000954:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000958:	fb0e fe00 	mul.w	lr, lr, r0
 800095c:	45a6      	cmp	lr, r4
 800095e:	d908      	bls.n	8000972 <__udivmoddi4+0x156>
 8000960:	eb1c 0404 	adds.w	r4, ip, r4
 8000964:	f100 31ff 	add.w	r1, r0, #4294967295
 8000968:	d202      	bcs.n	8000970 <__udivmoddi4+0x154>
 800096a:	45a6      	cmp	lr, r4
 800096c:	f200 80bb 	bhi.w	8000ae6 <__udivmoddi4+0x2ca>
 8000970:	4608      	mov	r0, r1
 8000972:	eba4 040e 	sub.w	r4, r4, lr
 8000976:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800097a:	e79c      	b.n	80008b6 <__udivmoddi4+0x9a>
 800097c:	f1c6 0720 	rsb	r7, r6, #32
 8000980:	40b3      	lsls	r3, r6
 8000982:	fa22 fc07 	lsr.w	ip, r2, r7
 8000986:	ea4c 0c03 	orr.w	ip, ip, r3
 800098a:	fa20 f407 	lsr.w	r4, r0, r7
 800098e:	fa01 f306 	lsl.w	r3, r1, r6
 8000992:	431c      	orrs	r4, r3
 8000994:	40f9      	lsrs	r1, r7
 8000996:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800099a:	fa00 f306 	lsl.w	r3, r0, r6
 800099e:	fbb1 f8f9 	udiv	r8, r1, r9
 80009a2:	0c20      	lsrs	r0, r4, #16
 80009a4:	fa1f fe8c 	uxth.w	lr, ip
 80009a8:	fb09 1118 	mls	r1, r9, r8, r1
 80009ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80009b0:	fb08 f00e 	mul.w	r0, r8, lr
 80009b4:	4288      	cmp	r0, r1
 80009b6:	fa02 f206 	lsl.w	r2, r2, r6
 80009ba:	d90b      	bls.n	80009d4 <__udivmoddi4+0x1b8>
 80009bc:	eb1c 0101 	adds.w	r1, ip, r1
 80009c0:	f108 3aff 	add.w	sl, r8, #4294967295
 80009c4:	f080 8088 	bcs.w	8000ad8 <__udivmoddi4+0x2bc>
 80009c8:	4288      	cmp	r0, r1
 80009ca:	f240 8085 	bls.w	8000ad8 <__udivmoddi4+0x2bc>
 80009ce:	f1a8 0802 	sub.w	r8, r8, #2
 80009d2:	4461      	add	r1, ip
 80009d4:	1a09      	subs	r1, r1, r0
 80009d6:	b2a4      	uxth	r4, r4
 80009d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80009dc:	fb09 1110 	mls	r1, r9, r0, r1
 80009e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80009e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80009e8:	458e      	cmp	lr, r1
 80009ea:	d908      	bls.n	80009fe <__udivmoddi4+0x1e2>
 80009ec:	eb1c 0101 	adds.w	r1, ip, r1
 80009f0:	f100 34ff 	add.w	r4, r0, #4294967295
 80009f4:	d26c      	bcs.n	8000ad0 <__udivmoddi4+0x2b4>
 80009f6:	458e      	cmp	lr, r1
 80009f8:	d96a      	bls.n	8000ad0 <__udivmoddi4+0x2b4>
 80009fa:	3802      	subs	r0, #2
 80009fc:	4461      	add	r1, ip
 80009fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000a02:	fba0 9402 	umull	r9, r4, r0, r2
 8000a06:	eba1 010e 	sub.w	r1, r1, lr
 8000a0a:	42a1      	cmp	r1, r4
 8000a0c:	46c8      	mov	r8, r9
 8000a0e:	46a6      	mov	lr, r4
 8000a10:	d356      	bcc.n	8000ac0 <__udivmoddi4+0x2a4>
 8000a12:	d053      	beq.n	8000abc <__udivmoddi4+0x2a0>
 8000a14:	b15d      	cbz	r5, 8000a2e <__udivmoddi4+0x212>
 8000a16:	ebb3 0208 	subs.w	r2, r3, r8
 8000a1a:	eb61 010e 	sbc.w	r1, r1, lr
 8000a1e:	fa01 f707 	lsl.w	r7, r1, r7
 8000a22:	fa22 f306 	lsr.w	r3, r2, r6
 8000a26:	40f1      	lsrs	r1, r6
 8000a28:	431f      	orrs	r7, r3
 8000a2a:	e9c5 7100 	strd	r7, r1, [r5]
 8000a2e:	2600      	movs	r6, #0
 8000a30:	4631      	mov	r1, r6
 8000a32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a36:	f1c2 0320 	rsb	r3, r2, #32
 8000a3a:	40d8      	lsrs	r0, r3
 8000a3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a40:	fa21 f303 	lsr.w	r3, r1, r3
 8000a44:	4091      	lsls	r1, r2
 8000a46:	4301      	orrs	r1, r0
 8000a48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a4c:	fa1f fe8c 	uxth.w	lr, ip
 8000a50:	fbb3 f0f7 	udiv	r0, r3, r7
 8000a54:	fb07 3610 	mls	r6, r7, r0, r3
 8000a58:	0c0b      	lsrs	r3, r1, #16
 8000a5a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000a5e:	fb00 f60e 	mul.w	r6, r0, lr
 8000a62:	429e      	cmp	r6, r3
 8000a64:	fa04 f402 	lsl.w	r4, r4, r2
 8000a68:	d908      	bls.n	8000a7c <__udivmoddi4+0x260>
 8000a6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000a6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000a72:	d22f      	bcs.n	8000ad4 <__udivmoddi4+0x2b8>
 8000a74:	429e      	cmp	r6, r3
 8000a76:	d92d      	bls.n	8000ad4 <__udivmoddi4+0x2b8>
 8000a78:	3802      	subs	r0, #2
 8000a7a:	4463      	add	r3, ip
 8000a7c:	1b9b      	subs	r3, r3, r6
 8000a7e:	b289      	uxth	r1, r1
 8000a80:	fbb3 f6f7 	udiv	r6, r3, r7
 8000a84:	fb07 3316 	mls	r3, r7, r6, r3
 8000a88:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a8c:	fb06 f30e 	mul.w	r3, r6, lr
 8000a90:	428b      	cmp	r3, r1
 8000a92:	d908      	bls.n	8000aa6 <__udivmoddi4+0x28a>
 8000a94:	eb1c 0101 	adds.w	r1, ip, r1
 8000a98:	f106 38ff 	add.w	r8, r6, #4294967295
 8000a9c:	d216      	bcs.n	8000acc <__udivmoddi4+0x2b0>
 8000a9e:	428b      	cmp	r3, r1
 8000aa0:	d914      	bls.n	8000acc <__udivmoddi4+0x2b0>
 8000aa2:	3e02      	subs	r6, #2
 8000aa4:	4461      	add	r1, ip
 8000aa6:	1ac9      	subs	r1, r1, r3
 8000aa8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000aac:	e738      	b.n	8000920 <__udivmoddi4+0x104>
 8000aae:	462e      	mov	r6, r5
 8000ab0:	4628      	mov	r0, r5
 8000ab2:	e705      	b.n	80008c0 <__udivmoddi4+0xa4>
 8000ab4:	4606      	mov	r6, r0
 8000ab6:	e6e3      	b.n	8000880 <__udivmoddi4+0x64>
 8000ab8:	4618      	mov	r0, r3
 8000aba:	e6f8      	b.n	80008ae <__udivmoddi4+0x92>
 8000abc:	454b      	cmp	r3, r9
 8000abe:	d2a9      	bcs.n	8000a14 <__udivmoddi4+0x1f8>
 8000ac0:	ebb9 0802 	subs.w	r8, r9, r2
 8000ac4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ac8:	3801      	subs	r0, #1
 8000aca:	e7a3      	b.n	8000a14 <__udivmoddi4+0x1f8>
 8000acc:	4646      	mov	r6, r8
 8000ace:	e7ea      	b.n	8000aa6 <__udivmoddi4+0x28a>
 8000ad0:	4620      	mov	r0, r4
 8000ad2:	e794      	b.n	80009fe <__udivmoddi4+0x1e2>
 8000ad4:	4640      	mov	r0, r8
 8000ad6:	e7d1      	b.n	8000a7c <__udivmoddi4+0x260>
 8000ad8:	46d0      	mov	r8, sl
 8000ada:	e77b      	b.n	80009d4 <__udivmoddi4+0x1b8>
 8000adc:	3b02      	subs	r3, #2
 8000ade:	4461      	add	r1, ip
 8000ae0:	e732      	b.n	8000948 <__udivmoddi4+0x12c>
 8000ae2:	4630      	mov	r0, r6
 8000ae4:	e709      	b.n	80008fa <__udivmoddi4+0xde>
 8000ae6:	4464      	add	r4, ip
 8000ae8:	3802      	subs	r0, #2
 8000aea:	e742      	b.n	8000972 <__udivmoddi4+0x156>

08000aec <__aeabi_idiv0>:
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000af4:	f001 f880 	bl	8001bf8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000af8:	f000 f832 	bl	8000b60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000afc:	f000 fb56 	bl	80011ac <MX_GPIO_Init>
  MX_ADC1_Init();
 8000b00:	f000 f89a 	bl	8000c38 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000b04:	f000 f8ea 	bl	8000cdc <MX_I2C1_Init>
  MX_I2C2_Init();
 8000b08:	f000 f916 	bl	8000d38 <MX_I2C2_Init>
  MX_I2C3_Init();
 8000b0c:	f000 f942 	bl	8000d94 <MX_I2C3_Init>
  MX_SPI1_Init();
 8000b10:	f000 f96e 	bl	8000df0 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000b14:	f000 f9a2 	bl	8000e5c <MX_SPI2_Init>
  MX_SPI3_Init();
 8000b18:	f000 f9d6 	bl	8000ec8 <MX_SPI3_Init>
  MX_TIM3_Init();
 8000b1c:	f000 fa0a 	bl	8000f34 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000b20:	f000 fa6c 	bl	8000ffc <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8000b24:	f000 fac4 	bl	80010b0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000b28:	f000 faec 	bl	8001104 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8000b2c:	f000 fb14 	bl	8001158 <MX_USART6_UART_Init>
  MX_FATFS_Init();
 8000b30:	f003 fabc 	bl	80040ac <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  MAIN_App(); /* Jump Into Telemetry Code */
 8000b34:	f00a fb22 	bl	800b17c <MAIN_App>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000b38:	f006 fdee 	bl	8007718 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000b3c:	4a05      	ldr	r2, [pc, #20]	; (8000b54 <main+0x64>)
 8000b3e:	2100      	movs	r1, #0
 8000b40:	4805      	ldr	r0, [pc, #20]	; (8000b58 <main+0x68>)
 8000b42:	f006 fe33 	bl	80077ac <osThreadNew>
 8000b46:	4603      	mov	r3, r0
 8000b48:	4a04      	ldr	r2, [pc, #16]	; (8000b5c <main+0x6c>)
 8000b4a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000b4c:	f006 fe08 	bl	8007760 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b50:	e7fe      	b.n	8000b50 <main+0x60>
 8000b52:	bf00      	nop
 8000b54:	0800bce0 	.word	0x0800bce0
 8000b58:	08001371 	.word	0x08001371
 8000b5c:	200013e8 	.word	0x200013e8

08000b60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b094      	sub	sp, #80	; 0x50
 8000b64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b66:	f107 0320 	add.w	r3, r7, #32
 8000b6a:	2230      	movs	r2, #48	; 0x30
 8000b6c:	2100      	movs	r1, #0
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f00a ffde 	bl	800bb30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b74:	f107 030c 	add.w	r3, r7, #12
 8000b78:	2200      	movs	r2, #0
 8000b7a:	601a      	str	r2, [r3, #0]
 8000b7c:	605a      	str	r2, [r3, #4]
 8000b7e:	609a      	str	r2, [r3, #8]
 8000b80:	60da      	str	r2, [r3, #12]
 8000b82:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b84:	2300      	movs	r3, #0
 8000b86:	60bb      	str	r3, [r7, #8]
 8000b88:	4b29      	ldr	r3, [pc, #164]	; (8000c30 <SystemClock_Config+0xd0>)
 8000b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8c:	4a28      	ldr	r2, [pc, #160]	; (8000c30 <SystemClock_Config+0xd0>)
 8000b8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b92:	6413      	str	r3, [r2, #64]	; 0x40
 8000b94:	4b26      	ldr	r3, [pc, #152]	; (8000c30 <SystemClock_Config+0xd0>)
 8000b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b9c:	60bb      	str	r3, [r7, #8]
 8000b9e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	607b      	str	r3, [r7, #4]
 8000ba4:	4b23      	ldr	r3, [pc, #140]	; (8000c34 <SystemClock_Config+0xd4>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000bac:	4a21      	ldr	r2, [pc, #132]	; (8000c34 <SystemClock_Config+0xd4>)
 8000bae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000bb2:	6013      	str	r3, [r2, #0]
 8000bb4:	4b1f      	ldr	r3, [pc, #124]	; (8000c34 <SystemClock_Config+0xd4>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000bbc:	607b      	str	r3, [r7, #4]
 8000bbe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bc4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bc8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bca:	2302      	movs	r3, #2
 8000bcc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000bd2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000bd4:	2304      	movs	r3, #4
 8000bd6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000bd8:	2354      	movs	r3, #84	; 0x54
 8000bda:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000bdc:	2302      	movs	r3, #2
 8000bde:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000be0:	2304      	movs	r3, #4
 8000be2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000be4:	f107 0320 	add.w	r3, r7, #32
 8000be8:	4618      	mov	r0, r3
 8000bea:	f001 fef1 	bl	80029d0 <HAL_RCC_OscConfig>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000bf4:	f000 fbc4 	bl	8001380 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bf8:	230f      	movs	r3, #15
 8000bfa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bfc:	2302      	movs	r3, #2
 8000bfe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c00:	2300      	movs	r3, #0
 8000c02:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c08:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c0e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c10:	f107 030c 	add.w	r3, r7, #12
 8000c14:	2102      	movs	r1, #2
 8000c16:	4618      	mov	r0, r3
 8000c18:	f002 f952 	bl	8002ec0 <HAL_RCC_ClockConfig>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000c22:	f000 fbad 	bl	8001380 <Error_Handler>
  }
}
 8000c26:	bf00      	nop
 8000c28:	3750      	adds	r7, #80	; 0x50
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	40023800 	.word	0x40023800
 8000c34:	40007000 	.word	0x40007000

08000c38 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b084      	sub	sp, #16
 8000c3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c3e:	463b      	mov	r3, r7
 8000c40:	2200      	movs	r2, #0
 8000c42:	601a      	str	r2, [r3, #0]
 8000c44:	605a      	str	r2, [r3, #4]
 8000c46:	609a      	str	r2, [r3, #8]
 8000c48:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000c4a:	4b21      	ldr	r3, [pc, #132]	; (8000cd0 <MX_ADC1_Init+0x98>)
 8000c4c:	4a21      	ldr	r2, [pc, #132]	; (8000cd4 <MX_ADC1_Init+0x9c>)
 8000c4e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000c50:	4b1f      	ldr	r3, [pc, #124]	; (8000cd0 <MX_ADC1_Init+0x98>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c56:	4b1e      	ldr	r3, [pc, #120]	; (8000cd0 <MX_ADC1_Init+0x98>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000c5c:	4b1c      	ldr	r3, [pc, #112]	; (8000cd0 <MX_ADC1_Init+0x98>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000c62:	4b1b      	ldr	r3, [pc, #108]	; (8000cd0 <MX_ADC1_Init+0x98>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c68:	4b19      	ldr	r3, [pc, #100]	; (8000cd0 <MX_ADC1_Init+0x98>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c70:	4b17      	ldr	r3, [pc, #92]	; (8000cd0 <MX_ADC1_Init+0x98>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c76:	4b16      	ldr	r3, [pc, #88]	; (8000cd0 <MX_ADC1_Init+0x98>)
 8000c78:	4a17      	ldr	r2, [pc, #92]	; (8000cd8 <MX_ADC1_Init+0xa0>)
 8000c7a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c7c:	4b14      	ldr	r3, [pc, #80]	; (8000cd0 <MX_ADC1_Init+0x98>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000c82:	4b13      	ldr	r3, [pc, #76]	; (8000cd0 <MX_ADC1_Init+0x98>)
 8000c84:	2201      	movs	r2, #1
 8000c86:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000c88:	4b11      	ldr	r3, [pc, #68]	; (8000cd0 <MX_ADC1_Init+0x98>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c90:	4b0f      	ldr	r3, [pc, #60]	; (8000cd0 <MX_ADC1_Init+0x98>)
 8000c92:	2201      	movs	r2, #1
 8000c94:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c96:	480e      	ldr	r0, [pc, #56]	; (8000cd0 <MX_ADC1_Init+0x98>)
 8000c98:	f001 f820 	bl	8001cdc <HAL_ADC_Init>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000ca2:	f000 fb6d 	bl	8001380 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000caa:	2301      	movs	r3, #1
 8000cac:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cb2:	463b      	mov	r3, r7
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	4806      	ldr	r0, [pc, #24]	; (8000cd0 <MX_ADC1_Init+0x98>)
 8000cb8:	f001 f854 	bl	8001d64 <HAL_ADC_ConfigChannel>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d001      	beq.n	8000cc6 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000cc2:	f000 fb5d 	bl	8001380 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000cc6:	bf00      	nop
 8000cc8:	3710      	adds	r7, #16
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	20001040 	.word	0x20001040
 8000cd4:	40012000 	.word	0x40012000
 8000cd8:	0f000001 	.word	0x0f000001

08000cdc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ce0:	4b12      	ldr	r3, [pc, #72]	; (8000d2c <MX_I2C1_Init+0x50>)
 8000ce2:	4a13      	ldr	r2, [pc, #76]	; (8000d30 <MX_I2C1_Init+0x54>)
 8000ce4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000ce6:	4b11      	ldr	r3, [pc, #68]	; (8000d2c <MX_I2C1_Init+0x50>)
 8000ce8:	4a12      	ldr	r2, [pc, #72]	; (8000d34 <MX_I2C1_Init+0x58>)
 8000cea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000cec:	4b0f      	ldr	r3, [pc, #60]	; (8000d2c <MX_I2C1_Init+0x50>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000cf2:	4b0e      	ldr	r3, [pc, #56]	; (8000d2c <MX_I2C1_Init+0x50>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cf8:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <MX_I2C1_Init+0x50>)
 8000cfa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000cfe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d00:	4b0a      	ldr	r3, [pc, #40]	; (8000d2c <MX_I2C1_Init+0x50>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000d06:	4b09      	ldr	r3, [pc, #36]	; (8000d2c <MX_I2C1_Init+0x50>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d0c:	4b07      	ldr	r3, [pc, #28]	; (8000d2c <MX_I2C1_Init+0x50>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d12:	4b06      	ldr	r3, [pc, #24]	; (8000d2c <MX_I2C1_Init+0x50>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d18:	4804      	ldr	r0, [pc, #16]	; (8000d2c <MX_I2C1_Init+0x50>)
 8000d1a:	f001 fd15 	bl	8002748 <HAL_I2C_Init>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d001      	beq.n	8000d28 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000d24:	f000 fb2c 	bl	8001380 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d28:	bf00      	nop
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	20001088 	.word	0x20001088
 8000d30:	40005400 	.word	0x40005400
 8000d34:	000186a0 	.word	0x000186a0

08000d38 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000d3c:	4b12      	ldr	r3, [pc, #72]	; (8000d88 <MX_I2C2_Init+0x50>)
 8000d3e:	4a13      	ldr	r2, [pc, #76]	; (8000d8c <MX_I2C2_Init+0x54>)
 8000d40:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000d42:	4b11      	ldr	r3, [pc, #68]	; (8000d88 <MX_I2C2_Init+0x50>)
 8000d44:	4a12      	ldr	r2, [pc, #72]	; (8000d90 <MX_I2C2_Init+0x58>)
 8000d46:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d48:	4b0f      	ldr	r3, [pc, #60]	; (8000d88 <MX_I2C2_Init+0x50>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000d4e:	4b0e      	ldr	r3, [pc, #56]	; (8000d88 <MX_I2C2_Init+0x50>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d54:	4b0c      	ldr	r3, [pc, #48]	; (8000d88 <MX_I2C2_Init+0x50>)
 8000d56:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d5a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d5c:	4b0a      	ldr	r3, [pc, #40]	; (8000d88 <MX_I2C2_Init+0x50>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000d62:	4b09      	ldr	r3, [pc, #36]	; (8000d88 <MX_I2C2_Init+0x50>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d68:	4b07      	ldr	r3, [pc, #28]	; (8000d88 <MX_I2C2_Init+0x50>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d6e:	4b06      	ldr	r3, [pc, #24]	; (8000d88 <MX_I2C2_Init+0x50>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000d74:	4804      	ldr	r0, [pc, #16]	; (8000d88 <MX_I2C2_Init+0x50>)
 8000d76:	f001 fce7 	bl	8002748 <HAL_I2C_Init>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d001      	beq.n	8000d84 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000d80:	f000 fafe 	bl	8001380 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000d84:	bf00      	nop
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	200010dc 	.word	0x200010dc
 8000d8c:	40005800 	.word	0x40005800
 8000d90:	000186a0 	.word	0x000186a0

08000d94 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000d98:	4b12      	ldr	r3, [pc, #72]	; (8000de4 <MX_I2C3_Init+0x50>)
 8000d9a:	4a13      	ldr	r2, [pc, #76]	; (8000de8 <MX_I2C3_Init+0x54>)
 8000d9c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000d9e:	4b11      	ldr	r3, [pc, #68]	; (8000de4 <MX_I2C3_Init+0x50>)
 8000da0:	4a12      	ldr	r2, [pc, #72]	; (8000dec <MX_I2C3_Init+0x58>)
 8000da2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000da4:	4b0f      	ldr	r3, [pc, #60]	; (8000de4 <MX_I2C3_Init+0x50>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000daa:	4b0e      	ldr	r3, [pc, #56]	; (8000de4 <MX_I2C3_Init+0x50>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000db0:	4b0c      	ldr	r3, [pc, #48]	; (8000de4 <MX_I2C3_Init+0x50>)
 8000db2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000db6:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000db8:	4b0a      	ldr	r3, [pc, #40]	; (8000de4 <MX_I2C3_Init+0x50>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000dbe:	4b09      	ldr	r3, [pc, #36]	; (8000de4 <MX_I2C3_Init+0x50>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000dc4:	4b07      	ldr	r3, [pc, #28]	; (8000de4 <MX_I2C3_Init+0x50>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000dca:	4b06      	ldr	r3, [pc, #24]	; (8000de4 <MX_I2C3_Init+0x50>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000dd0:	4804      	ldr	r0, [pc, #16]	; (8000de4 <MX_I2C3_Init+0x50>)
 8000dd2:	f001 fcb9 	bl	8002748 <HAL_I2C_Init>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000ddc:	f000 fad0 	bl	8001380 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000de0:	bf00      	nop
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	20001130 	.word	0x20001130
 8000de8:	40005c00 	.word	0x40005c00
 8000dec:	000186a0 	.word	0x000186a0

08000df0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000df4:	4b17      	ldr	r3, [pc, #92]	; (8000e54 <MX_SPI1_Init+0x64>)
 8000df6:	4a18      	ldr	r2, [pc, #96]	; (8000e58 <MX_SPI1_Init+0x68>)
 8000df8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000dfa:	4b16      	ldr	r3, [pc, #88]	; (8000e54 <MX_SPI1_Init+0x64>)
 8000dfc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e00:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e02:	4b14      	ldr	r3, [pc, #80]	; (8000e54 <MX_SPI1_Init+0x64>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e08:	4b12      	ldr	r3, [pc, #72]	; (8000e54 <MX_SPI1_Init+0x64>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e0e:	4b11      	ldr	r3, [pc, #68]	; (8000e54 <MX_SPI1_Init+0x64>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e14:	4b0f      	ldr	r3, [pc, #60]	; (8000e54 <MX_SPI1_Init+0x64>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000e1a:	4b0e      	ldr	r3, [pc, #56]	; (8000e54 <MX_SPI1_Init+0x64>)
 8000e1c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000e20:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000e22:	4b0c      	ldr	r3, [pc, #48]	; (8000e54 <MX_SPI1_Init+0x64>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e28:	4b0a      	ldr	r3, [pc, #40]	; (8000e54 <MX_SPI1_Init+0x64>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e2e:	4b09      	ldr	r3, [pc, #36]	; (8000e54 <MX_SPI1_Init+0x64>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e34:	4b07      	ldr	r3, [pc, #28]	; (8000e54 <MX_SPI1_Init+0x64>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000e3a:	4b06      	ldr	r3, [pc, #24]	; (8000e54 <MX_SPI1_Init+0x64>)
 8000e3c:	220a      	movs	r2, #10
 8000e3e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000e40:	4804      	ldr	r0, [pc, #16]	; (8000e54 <MX_SPI1_Init+0x64>)
 8000e42:	f002 fa5d 	bl	8003300 <HAL_SPI_Init>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000e4c:	f000 fa98 	bl	8001380 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000e50:	bf00      	nop
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	20001184 	.word	0x20001184
 8000e58:	40013000 	.word	0x40013000

08000e5c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000e60:	4b17      	ldr	r3, [pc, #92]	; (8000ec0 <MX_SPI2_Init+0x64>)
 8000e62:	4a18      	ldr	r2, [pc, #96]	; (8000ec4 <MX_SPI2_Init+0x68>)
 8000e64:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000e66:	4b16      	ldr	r3, [pc, #88]	; (8000ec0 <MX_SPI2_Init+0x64>)
 8000e68:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e6c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000e6e:	4b14      	ldr	r3, [pc, #80]	; (8000ec0 <MX_SPI2_Init+0x64>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e74:	4b12      	ldr	r3, [pc, #72]	; (8000ec0 <MX_SPI2_Init+0x64>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e7a:	4b11      	ldr	r3, [pc, #68]	; (8000ec0 <MX_SPI2_Init+0x64>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e80:	4b0f      	ldr	r3, [pc, #60]	; (8000ec0 <MX_SPI2_Init+0x64>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000e86:	4b0e      	ldr	r3, [pc, #56]	; (8000ec0 <MX_SPI2_Init+0x64>)
 8000e88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e8c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000e8e:	4b0c      	ldr	r3, [pc, #48]	; (8000ec0 <MX_SPI2_Init+0x64>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e94:	4b0a      	ldr	r3, [pc, #40]	; (8000ec0 <MX_SPI2_Init+0x64>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e9a:	4b09      	ldr	r3, [pc, #36]	; (8000ec0 <MX_SPI2_Init+0x64>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ea0:	4b07      	ldr	r3, [pc, #28]	; (8000ec0 <MX_SPI2_Init+0x64>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000ea6:	4b06      	ldr	r3, [pc, #24]	; (8000ec0 <MX_SPI2_Init+0x64>)
 8000ea8:	220a      	movs	r2, #10
 8000eaa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000eac:	4804      	ldr	r0, [pc, #16]	; (8000ec0 <MX_SPI2_Init+0x64>)
 8000eae:	f002 fa27 	bl	8003300 <HAL_SPI_Init>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d001      	beq.n	8000ebc <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000eb8:	f000 fa62 	bl	8001380 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000ebc:	bf00      	nop
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	200011dc 	.word	0x200011dc
 8000ec4:	40003800 	.word	0x40003800

08000ec8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000ecc:	4b17      	ldr	r3, [pc, #92]	; (8000f2c <MX_SPI3_Init+0x64>)
 8000ece:	4a18      	ldr	r2, [pc, #96]	; (8000f30 <MX_SPI3_Init+0x68>)
 8000ed0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000ed2:	4b16      	ldr	r3, [pc, #88]	; (8000f2c <MX_SPI3_Init+0x64>)
 8000ed4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ed8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000eda:	4b14      	ldr	r3, [pc, #80]	; (8000f2c <MX_SPI3_Init+0x64>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ee0:	4b12      	ldr	r3, [pc, #72]	; (8000f2c <MX_SPI3_Init+0x64>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ee6:	4b11      	ldr	r3, [pc, #68]	; (8000f2c <MX_SPI3_Init+0x64>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000eec:	4b0f      	ldr	r3, [pc, #60]	; (8000f2c <MX_SPI3_Init+0x64>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000ef2:	4b0e      	ldr	r3, [pc, #56]	; (8000f2c <MX_SPI3_Init+0x64>)
 8000ef4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000ef8:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000efa:	4b0c      	ldr	r3, [pc, #48]	; (8000f2c <MX_SPI3_Init+0x64>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f00:	4b0a      	ldr	r3, [pc, #40]	; (8000f2c <MX_SPI3_Init+0x64>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f06:	4b09      	ldr	r3, [pc, #36]	; (8000f2c <MX_SPI3_Init+0x64>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f0c:	4b07      	ldr	r3, [pc, #28]	; (8000f2c <MX_SPI3_Init+0x64>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000f12:	4b06      	ldr	r3, [pc, #24]	; (8000f2c <MX_SPI3_Init+0x64>)
 8000f14:	220a      	movs	r2, #10
 8000f16:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000f18:	4804      	ldr	r0, [pc, #16]	; (8000f2c <MX_SPI3_Init+0x64>)
 8000f1a:	f002 f9f1 	bl	8003300 <HAL_SPI_Init>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8000f24:	f000 fa2c 	bl	8001380 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000f28:	bf00      	nop
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	20001234 	.word	0x20001234
 8000f30:	40003c00 	.word	0x40003c00

08000f34 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b08a      	sub	sp, #40	; 0x28
 8000f38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f3a:	f107 0320 	add.w	r3, r7, #32
 8000f3e:	2200      	movs	r2, #0
 8000f40:	601a      	str	r2, [r3, #0]
 8000f42:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f44:	1d3b      	adds	r3, r7, #4
 8000f46:	2200      	movs	r2, #0
 8000f48:	601a      	str	r2, [r3, #0]
 8000f4a:	605a      	str	r2, [r3, #4]
 8000f4c:	609a      	str	r2, [r3, #8]
 8000f4e:	60da      	str	r2, [r3, #12]
 8000f50:	611a      	str	r2, [r3, #16]
 8000f52:	615a      	str	r2, [r3, #20]
 8000f54:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f56:	4b27      	ldr	r3, [pc, #156]	; (8000ff4 <MX_TIM3_Init+0xc0>)
 8000f58:	4a27      	ldr	r2, [pc, #156]	; (8000ff8 <MX_TIM3_Init+0xc4>)
 8000f5a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000f5c:	4b25      	ldr	r3, [pc, #148]	; (8000ff4 <MX_TIM3_Init+0xc0>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f62:	4b24      	ldr	r3, [pc, #144]	; (8000ff4 <MX_TIM3_Init+0xc0>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000f68:	4b22      	ldr	r3, [pc, #136]	; (8000ff4 <MX_TIM3_Init+0xc0>)
 8000f6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f6e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f70:	4b20      	ldr	r3, [pc, #128]	; (8000ff4 <MX_TIM3_Init+0xc0>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f76:	4b1f      	ldr	r3, [pc, #124]	; (8000ff4 <MX_TIM3_Init+0xc0>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000f7c:	481d      	ldr	r0, [pc, #116]	; (8000ff4 <MX_TIM3_Init+0xc0>)
 8000f7e:	f002 fa48 	bl	8003412 <HAL_TIM_PWM_Init>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000f88:	f000 f9fa 	bl	8001380 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f90:	2300      	movs	r3, #0
 8000f92:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f94:	f107 0320 	add.w	r3, r7, #32
 8000f98:	4619      	mov	r1, r3
 8000f9a:	4816      	ldr	r0, [pc, #88]	; (8000ff4 <MX_TIM3_Init+0xc0>)
 8000f9c:	f002 fd56 	bl	8003a4c <HAL_TIMEx_MasterConfigSynchronization>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000fa6:	f000 f9eb 	bl	8001380 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000faa:	2360      	movs	r3, #96	; 0x60
 8000fac:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000fba:	1d3b      	adds	r3, r7, #4
 8000fbc:	2208      	movs	r2, #8
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	480c      	ldr	r0, [pc, #48]	; (8000ff4 <MX_TIM3_Init+0xc0>)
 8000fc2:	f002 fa75 	bl	80034b0 <HAL_TIM_PWM_ConfigChannel>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000fcc:	f000 f9d8 	bl	8001380 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000fd0:	1d3b      	adds	r3, r7, #4
 8000fd2:	220c      	movs	r2, #12
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	4807      	ldr	r0, [pc, #28]	; (8000ff4 <MX_TIM3_Init+0xc0>)
 8000fd8:	f002 fa6a 	bl	80034b0 <HAL_TIM_PWM_ConfigChannel>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000fe2:	f000 f9cd 	bl	8001380 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000fe6:	4803      	ldr	r0, [pc, #12]	; (8000ff4 <MX_TIM3_Init+0xc0>)
 8000fe8:	f000 fc50 	bl	800188c <HAL_TIM_MspPostInit>

}
 8000fec:	bf00      	nop
 8000fee:	3728      	adds	r7, #40	; 0x28
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	2000128c 	.word	0x2000128c
 8000ff8:	40000400 	.word	0x40000400

08000ffc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b08a      	sub	sp, #40	; 0x28
 8001000:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001002:	f107 0320 	add.w	r3, r7, #32
 8001006:	2200      	movs	r2, #0
 8001008:	601a      	str	r2, [r3, #0]
 800100a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800100c:	1d3b      	adds	r3, r7, #4
 800100e:	2200      	movs	r2, #0
 8001010:	601a      	str	r2, [r3, #0]
 8001012:	605a      	str	r2, [r3, #4]
 8001014:	609a      	str	r2, [r3, #8]
 8001016:	60da      	str	r2, [r3, #12]
 8001018:	611a      	str	r2, [r3, #16]
 800101a:	615a      	str	r2, [r3, #20]
 800101c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800101e:	4b22      	ldr	r3, [pc, #136]	; (80010a8 <MX_TIM4_Init+0xac>)
 8001020:	4a22      	ldr	r2, [pc, #136]	; (80010ac <MX_TIM4_Init+0xb0>)
 8001022:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001024:	4b20      	ldr	r3, [pc, #128]	; (80010a8 <MX_TIM4_Init+0xac>)
 8001026:	2200      	movs	r2, #0
 8001028:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800102a:	4b1f      	ldr	r3, [pc, #124]	; (80010a8 <MX_TIM4_Init+0xac>)
 800102c:	2200      	movs	r2, #0
 800102e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001030:	4b1d      	ldr	r3, [pc, #116]	; (80010a8 <MX_TIM4_Init+0xac>)
 8001032:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001036:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001038:	4b1b      	ldr	r3, [pc, #108]	; (80010a8 <MX_TIM4_Init+0xac>)
 800103a:	2200      	movs	r2, #0
 800103c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800103e:	4b1a      	ldr	r3, [pc, #104]	; (80010a8 <MX_TIM4_Init+0xac>)
 8001040:	2200      	movs	r2, #0
 8001042:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001044:	4818      	ldr	r0, [pc, #96]	; (80010a8 <MX_TIM4_Init+0xac>)
 8001046:	f002 f9e4 	bl	8003412 <HAL_TIM_PWM_Init>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8001050:	f000 f996 	bl	8001380 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001054:	2300      	movs	r3, #0
 8001056:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001058:	2300      	movs	r3, #0
 800105a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800105c:	f107 0320 	add.w	r3, r7, #32
 8001060:	4619      	mov	r1, r3
 8001062:	4811      	ldr	r0, [pc, #68]	; (80010a8 <MX_TIM4_Init+0xac>)
 8001064:	f002 fcf2 	bl	8003a4c <HAL_TIMEx_MasterConfigSynchronization>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 800106e:	f000 f987 	bl	8001380 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001072:	2360      	movs	r3, #96	; 0x60
 8001074:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001076:	2300      	movs	r3, #0
 8001078:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800107a:	2300      	movs	r3, #0
 800107c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800107e:	2300      	movs	r3, #0
 8001080:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001082:	1d3b      	adds	r3, r7, #4
 8001084:	2200      	movs	r2, #0
 8001086:	4619      	mov	r1, r3
 8001088:	4807      	ldr	r0, [pc, #28]	; (80010a8 <MX_TIM4_Init+0xac>)
 800108a:	f002 fa11 	bl	80034b0 <HAL_TIM_PWM_ConfigChannel>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8001094:	f000 f974 	bl	8001380 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001098:	4803      	ldr	r0, [pc, #12]	; (80010a8 <MX_TIM4_Init+0xac>)
 800109a:	f000 fbf7 	bl	800188c <HAL_TIM_MspPostInit>

}
 800109e:	bf00      	nop
 80010a0:	3728      	adds	r7, #40	; 0x28
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	200012d4 	.word	0x200012d4
 80010ac:	40000800 	.word	0x40000800

080010b0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80010b4:	4b11      	ldr	r3, [pc, #68]	; (80010fc <MX_USART1_UART_Init+0x4c>)
 80010b6:	4a12      	ldr	r2, [pc, #72]	; (8001100 <MX_USART1_UART_Init+0x50>)
 80010b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80010ba:	4b10      	ldr	r3, [pc, #64]	; (80010fc <MX_USART1_UART_Init+0x4c>)
 80010bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80010c2:	4b0e      	ldr	r3, [pc, #56]	; (80010fc <MX_USART1_UART_Init+0x4c>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80010c8:	4b0c      	ldr	r3, [pc, #48]	; (80010fc <MX_USART1_UART_Init+0x4c>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80010ce:	4b0b      	ldr	r3, [pc, #44]	; (80010fc <MX_USART1_UART_Init+0x4c>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80010d4:	4b09      	ldr	r3, [pc, #36]	; (80010fc <MX_USART1_UART_Init+0x4c>)
 80010d6:	220c      	movs	r2, #12
 80010d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010da:	4b08      	ldr	r3, [pc, #32]	; (80010fc <MX_USART1_UART_Init+0x4c>)
 80010dc:	2200      	movs	r2, #0
 80010de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80010e0:	4b06      	ldr	r3, [pc, #24]	; (80010fc <MX_USART1_UART_Init+0x4c>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80010e6:	4805      	ldr	r0, [pc, #20]	; (80010fc <MX_USART1_UART_Init+0x4c>)
 80010e8:	f002 fd1e 	bl	8003b28 <HAL_UART_Init>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80010f2:	f000 f945 	bl	8001380 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80010f6:	bf00      	nop
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	2000131c 	.word	0x2000131c
 8001100:	40011000 	.word	0x40011000

08001104 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001108:	4b11      	ldr	r3, [pc, #68]	; (8001150 <MX_USART2_UART_Init+0x4c>)
 800110a:	4a12      	ldr	r2, [pc, #72]	; (8001154 <MX_USART2_UART_Init+0x50>)
 800110c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800110e:	4b10      	ldr	r3, [pc, #64]	; (8001150 <MX_USART2_UART_Init+0x4c>)
 8001110:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001114:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001116:	4b0e      	ldr	r3, [pc, #56]	; (8001150 <MX_USART2_UART_Init+0x4c>)
 8001118:	2200      	movs	r2, #0
 800111a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800111c:	4b0c      	ldr	r3, [pc, #48]	; (8001150 <MX_USART2_UART_Init+0x4c>)
 800111e:	2200      	movs	r2, #0
 8001120:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001122:	4b0b      	ldr	r3, [pc, #44]	; (8001150 <MX_USART2_UART_Init+0x4c>)
 8001124:	2200      	movs	r2, #0
 8001126:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001128:	4b09      	ldr	r3, [pc, #36]	; (8001150 <MX_USART2_UART_Init+0x4c>)
 800112a:	220c      	movs	r2, #12
 800112c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800112e:	4b08      	ldr	r3, [pc, #32]	; (8001150 <MX_USART2_UART_Init+0x4c>)
 8001130:	2200      	movs	r2, #0
 8001132:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001134:	4b06      	ldr	r3, [pc, #24]	; (8001150 <MX_USART2_UART_Init+0x4c>)
 8001136:	2200      	movs	r2, #0
 8001138:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800113a:	4805      	ldr	r0, [pc, #20]	; (8001150 <MX_USART2_UART_Init+0x4c>)
 800113c:	f002 fcf4 	bl	8003b28 <HAL_UART_Init>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001146:	f000 f91b 	bl	8001380 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800114a:	bf00      	nop
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	20001360 	.word	0x20001360
 8001154:	40004400 	.word	0x40004400

08001158 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800115c:	4b11      	ldr	r3, [pc, #68]	; (80011a4 <MX_USART6_UART_Init+0x4c>)
 800115e:	4a12      	ldr	r2, [pc, #72]	; (80011a8 <MX_USART6_UART_Init+0x50>)
 8001160:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001162:	4b10      	ldr	r3, [pc, #64]	; (80011a4 <MX_USART6_UART_Init+0x4c>)
 8001164:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001168:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800116a:	4b0e      	ldr	r3, [pc, #56]	; (80011a4 <MX_USART6_UART_Init+0x4c>)
 800116c:	2200      	movs	r2, #0
 800116e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001170:	4b0c      	ldr	r3, [pc, #48]	; (80011a4 <MX_USART6_UART_Init+0x4c>)
 8001172:	2200      	movs	r2, #0
 8001174:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001176:	4b0b      	ldr	r3, [pc, #44]	; (80011a4 <MX_USART6_UART_Init+0x4c>)
 8001178:	2200      	movs	r2, #0
 800117a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800117c:	4b09      	ldr	r3, [pc, #36]	; (80011a4 <MX_USART6_UART_Init+0x4c>)
 800117e:	220c      	movs	r2, #12
 8001180:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001182:	4b08      	ldr	r3, [pc, #32]	; (80011a4 <MX_USART6_UART_Init+0x4c>)
 8001184:	2200      	movs	r2, #0
 8001186:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001188:	4b06      	ldr	r3, [pc, #24]	; (80011a4 <MX_USART6_UART_Init+0x4c>)
 800118a:	2200      	movs	r2, #0
 800118c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800118e:	4805      	ldr	r0, [pc, #20]	; (80011a4 <MX_USART6_UART_Init+0x4c>)
 8001190:	f002 fcca 	bl	8003b28 <HAL_UART_Init>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800119a:	f000 f8f1 	bl	8001380 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800119e:	bf00      	nop
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	200013a4 	.word	0x200013a4
 80011a8:	40011400 	.word	0x40011400

080011ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b08a      	sub	sp, #40	; 0x28
 80011b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b2:	f107 0314 	add.w	r3, r7, #20
 80011b6:	2200      	movs	r2, #0
 80011b8:	601a      	str	r2, [r3, #0]
 80011ba:	605a      	str	r2, [r3, #4]
 80011bc:	609a      	str	r2, [r3, #8]
 80011be:	60da      	str	r2, [r3, #12]
 80011c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011c2:	2300      	movs	r3, #0
 80011c4:	613b      	str	r3, [r7, #16]
 80011c6:	4b65      	ldr	r3, [pc, #404]	; (800135c <MX_GPIO_Init+0x1b0>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ca:	4a64      	ldr	r2, [pc, #400]	; (800135c <MX_GPIO_Init+0x1b0>)
 80011cc:	f043 0304 	orr.w	r3, r3, #4
 80011d0:	6313      	str	r3, [r2, #48]	; 0x30
 80011d2:	4b62      	ldr	r3, [pc, #392]	; (800135c <MX_GPIO_Init+0x1b0>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d6:	f003 0304 	and.w	r3, r3, #4
 80011da:	613b      	str	r3, [r7, #16]
 80011dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011de:	2300      	movs	r3, #0
 80011e0:	60fb      	str	r3, [r7, #12]
 80011e2:	4b5e      	ldr	r3, [pc, #376]	; (800135c <MX_GPIO_Init+0x1b0>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e6:	4a5d      	ldr	r2, [pc, #372]	; (800135c <MX_GPIO_Init+0x1b0>)
 80011e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011ec:	6313      	str	r3, [r2, #48]	; 0x30
 80011ee:	4b5b      	ldr	r3, [pc, #364]	; (800135c <MX_GPIO_Init+0x1b0>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011f6:	60fb      	str	r3, [r7, #12]
 80011f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011fa:	2300      	movs	r3, #0
 80011fc:	60bb      	str	r3, [r7, #8]
 80011fe:	4b57      	ldr	r3, [pc, #348]	; (800135c <MX_GPIO_Init+0x1b0>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001202:	4a56      	ldr	r2, [pc, #344]	; (800135c <MX_GPIO_Init+0x1b0>)
 8001204:	f043 0301 	orr.w	r3, r3, #1
 8001208:	6313      	str	r3, [r2, #48]	; 0x30
 800120a:	4b54      	ldr	r3, [pc, #336]	; (800135c <MX_GPIO_Init+0x1b0>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120e:	f003 0301 	and.w	r3, r3, #1
 8001212:	60bb      	str	r3, [r7, #8]
 8001214:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001216:	2300      	movs	r3, #0
 8001218:	607b      	str	r3, [r7, #4]
 800121a:	4b50      	ldr	r3, [pc, #320]	; (800135c <MX_GPIO_Init+0x1b0>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121e:	4a4f      	ldr	r2, [pc, #316]	; (800135c <MX_GPIO_Init+0x1b0>)
 8001220:	f043 0302 	orr.w	r3, r3, #2
 8001224:	6313      	str	r3, [r2, #48]	; 0x30
 8001226:	4b4d      	ldr	r3, [pc, #308]	; (800135c <MX_GPIO_Init+0x1b0>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122a:	f003 0302 	and.w	r3, r3, #2
 800122e:	607b      	str	r3, [r7, #4]
 8001230:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001232:	2300      	movs	r3, #0
 8001234:	603b      	str	r3, [r7, #0]
 8001236:	4b49      	ldr	r3, [pc, #292]	; (800135c <MX_GPIO_Init+0x1b0>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123a:	4a48      	ldr	r2, [pc, #288]	; (800135c <MX_GPIO_Init+0x1b0>)
 800123c:	f043 0308 	orr.w	r3, r3, #8
 8001240:	6313      	str	r3, [r2, #48]	; 0x30
 8001242:	4b46      	ldr	r3, [pc, #280]	; (800135c <MX_GPIO_Init+0x1b0>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001246:	f003 0308 	and.w	r3, r3, #8
 800124a:	603b      	str	r3, [r7, #0]
 800124c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, S0_Pin|S1_Pin|S2_Pin|GPIO_PIN_1
 800124e:	2200      	movs	r2, #0
 8001250:	f24e 11a2 	movw	r1, #57762	; 0xe1a2
 8001254:	4842      	ldr	r0, [pc, #264]	; (8001360 <MX_GPIO_Init+0x1b4>)
 8001256:	f001 fa39 	bl	80026cc <HAL_GPIO_WritePin>
                          |RESET_Pin|TXEN_Pin|SET_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|DIO2_Pin|DIO1_Pin|DS_Pin
 800125a:	2200      	movs	r2, #0
 800125c:	f24d 2130 	movw	r1, #53808	; 0xd230
 8001260:	4840      	ldr	r0, [pc, #256]	; (8001364 <MX_GPIO_Init+0x1b8>)
 8001262:	f001 fa33 	bl	80026cc <HAL_GPIO_WritePin>
                          |SQ_Pin|LED_RESET_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8001266:	2200      	movs	r2, #0
 8001268:	2104      	movs	r1, #4
 800126a:	483f      	ldr	r0, [pc, #252]	; (8001368 <MX_GPIO_Init+0x1bc>)
 800126c:	f001 fa2e 	bl	80026cc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : S0_Pin S1_Pin S2_Pin PC1
                           RESET_Pin TXEN_Pin SET_Pin */
  GPIO_InitStruct.Pin = S0_Pin|S1_Pin|S2_Pin|GPIO_PIN_1
 8001270:	f24e 13a2 	movw	r3, #57762	; 0xe1a2
 8001274:	617b      	str	r3, [r7, #20]
                          |RESET_Pin|TXEN_Pin|SET_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001276:	2301      	movs	r3, #1
 8001278:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127a:	2300      	movs	r3, #0
 800127c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800127e:	2300      	movs	r3, #0
 8001280:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001282:	f107 0314 	add.w	r3, r7, #20
 8001286:	4619      	mov	r1, r3
 8001288:	4835      	ldr	r0, [pc, #212]	; (8001360 <MX_GPIO_Init+0x1b4>)
 800128a:	f001 f89b 	bl	80023c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800128e:	2301      	movs	r3, #1
 8001290:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001292:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001296:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001298:	2300      	movs	r3, #0
 800129a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800129c:	f107 0314 	add.w	r3, r7, #20
 80012a0:	4619      	mov	r1, r3
 80012a2:	482f      	ldr	r0, [pc, #188]	; (8001360 <MX_GPIO_Init+0x1b4>)
 80012a4:	f001 f88e 	bl	80023c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80012a8:	2301      	movs	r3, #1
 80012aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ac:	2302      	movs	r3, #2
 80012ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b0:	2300      	movs	r3, #0
 80012b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b4:	2300      	movs	r3, #0
 80012b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80012b8:	2301      	movs	r3, #1
 80012ba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012bc:	f107 0314 	add.w	r3, r7, #20
 80012c0:	4619      	mov	r1, r3
 80012c2:	482a      	ldr	r0, [pc, #168]	; (800136c <MX_GPIO_Init+0x1c0>)
 80012c4:	f001 f87e 	bl	80023c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUSY_Pin RXEN_Pin */
  GPIO_InitStruct.Pin = BUSY_Pin|RXEN_Pin;
 80012c8:	2350      	movs	r3, #80	; 0x50
 80012ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012cc:	2303      	movs	r3, #3
 80012ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d0:	2300      	movs	r3, #0
 80012d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012d4:	f107 0314 	add.w	r3, r7, #20
 80012d8:	4619      	mov	r1, r3
 80012da:	4821      	ldr	r0, [pc, #132]	; (8001360 <MX_GPIO_Init+0x1b4>)
 80012dc:	f001 f872 	bl	80023c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80012e0:	2304      	movs	r3, #4
 80012e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012e4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80012e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ea:	2300      	movs	r3, #0
 80012ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ee:	f107 0314 	add.w	r3, r7, #20
 80012f2:	4619      	mov	r1, r3
 80012f4:	481b      	ldr	r0, [pc, #108]	; (8001364 <MX_GPIO_Init+0x1b8>)
 80012f6:	f001 f865 	bl	80023c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 DIO2_Pin DIO1_Pin DS_Pin
                           SQ_Pin LED_RESET_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_12|DIO2_Pin|DIO1_Pin|DS_Pin
 80012fa:	f24d 2330 	movw	r3, #53808	; 0xd230
 80012fe:	617b      	str	r3, [r7, #20]
                          |SQ_Pin|LED_RESET_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001300:	2301      	movs	r3, #1
 8001302:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001304:	2300      	movs	r3, #0
 8001306:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001308:	2300      	movs	r3, #0
 800130a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800130c:	f107 0314 	add.w	r3, r7, #20
 8001310:	4619      	mov	r1, r3
 8001312:	4814      	ldr	r0, [pc, #80]	; (8001364 <MX_GPIO_Init+0x1b8>)
 8001314:	f001 f856 	bl	80023c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001318:	2304      	movs	r3, #4
 800131a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800131c:	2301      	movs	r3, #1
 800131e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001320:	2300      	movs	r3, #0
 8001322:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001324:	2300      	movs	r3, #0
 8001326:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001328:	f107 0314 	add.w	r3, r7, #20
 800132c:	4619      	mov	r1, r3
 800132e:	480e      	ldr	r0, [pc, #56]	; (8001368 <MX_GPIO_Init+0x1bc>)
 8001330:	f001 f848 	bl	80023c4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8001334:	2200      	movs	r2, #0
 8001336:	2105      	movs	r1, #5
 8001338:	2006      	movs	r0, #6
 800133a:	f001 f80c 	bl	8002356 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800133e:	2006      	movs	r0, #6
 8001340:	f001 f825 	bl	800238e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8001344:	2200      	movs	r2, #0
 8001346:	2105      	movs	r1, #5
 8001348:	2008      	movs	r0, #8
 800134a:	f001 f804 	bl	8002356 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800134e:	2008      	movs	r0, #8
 8001350:	f001 f81d 	bl	800238e <HAL_NVIC_EnableIRQ>

}
 8001354:	bf00      	nop
 8001356:	3728      	adds	r7, #40	; 0x28
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	40023800 	.word	0x40023800
 8001360:	40020800 	.word	0x40020800
 8001364:	40020400 	.word	0x40020400
 8001368:	40020c00 	.word	0x40020c00
 800136c:	40020000 	.word	0x40020000

08001370 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001378:	2001      	movs	r0, #1
 800137a:	f006 faa9 	bl	80078d0 <osDelay>
 800137e:	e7fb      	b.n	8001378 <StartDefaultTask+0x8>

08001380 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001384:	b672      	cpsid	i
}
 8001386:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001388:	e7fe      	b.n	8001388 <Error_Handler+0x8>
	...

0800138c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001392:	2300      	movs	r3, #0
 8001394:	607b      	str	r3, [r7, #4]
 8001396:	4b12      	ldr	r3, [pc, #72]	; (80013e0 <HAL_MspInit+0x54>)
 8001398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800139a:	4a11      	ldr	r2, [pc, #68]	; (80013e0 <HAL_MspInit+0x54>)
 800139c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013a0:	6453      	str	r3, [r2, #68]	; 0x44
 80013a2:	4b0f      	ldr	r3, [pc, #60]	; (80013e0 <HAL_MspInit+0x54>)
 80013a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013aa:	607b      	str	r3, [r7, #4]
 80013ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013ae:	2300      	movs	r3, #0
 80013b0:	603b      	str	r3, [r7, #0]
 80013b2:	4b0b      	ldr	r3, [pc, #44]	; (80013e0 <HAL_MspInit+0x54>)
 80013b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b6:	4a0a      	ldr	r2, [pc, #40]	; (80013e0 <HAL_MspInit+0x54>)
 80013b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013bc:	6413      	str	r3, [r2, #64]	; 0x40
 80013be:	4b08      	ldr	r3, [pc, #32]	; (80013e0 <HAL_MspInit+0x54>)
 80013c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013c6:	603b      	str	r3, [r7, #0]
 80013c8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80013ca:	2200      	movs	r2, #0
 80013cc:	210f      	movs	r1, #15
 80013ce:	f06f 0001 	mvn.w	r0, #1
 80013d2:	f000 ffc0 	bl	8002356 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013d6:	bf00      	nop
 80013d8:	3708      	adds	r7, #8
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	40023800 	.word	0x40023800

080013e4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b08a      	sub	sp, #40	; 0x28
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ec:	f107 0314 	add.w	r3, r7, #20
 80013f0:	2200      	movs	r2, #0
 80013f2:	601a      	str	r2, [r3, #0]
 80013f4:	605a      	str	r2, [r3, #4]
 80013f6:	609a      	str	r2, [r3, #8]
 80013f8:	60da      	str	r2, [r3, #12]
 80013fa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a17      	ldr	r2, [pc, #92]	; (8001460 <HAL_ADC_MspInit+0x7c>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d127      	bne.n	8001456 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001406:	2300      	movs	r3, #0
 8001408:	613b      	str	r3, [r7, #16]
 800140a:	4b16      	ldr	r3, [pc, #88]	; (8001464 <HAL_ADC_MspInit+0x80>)
 800140c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800140e:	4a15      	ldr	r2, [pc, #84]	; (8001464 <HAL_ADC_MspInit+0x80>)
 8001410:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001414:	6453      	str	r3, [r2, #68]	; 0x44
 8001416:	4b13      	ldr	r3, [pc, #76]	; (8001464 <HAL_ADC_MspInit+0x80>)
 8001418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800141a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800141e:	613b      	str	r3, [r7, #16]
 8001420:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001422:	2300      	movs	r3, #0
 8001424:	60fb      	str	r3, [r7, #12]
 8001426:	4b0f      	ldr	r3, [pc, #60]	; (8001464 <HAL_ADC_MspInit+0x80>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142a:	4a0e      	ldr	r2, [pc, #56]	; (8001464 <HAL_ADC_MspInit+0x80>)
 800142c:	f043 0301 	orr.w	r3, r3, #1
 8001430:	6313      	str	r3, [r2, #48]	; 0x30
 8001432:	4b0c      	ldr	r3, [pc, #48]	; (8001464 <HAL_ADC_MspInit+0x80>)
 8001434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001436:	f003 0301 	and.w	r3, r3, #1
 800143a:	60fb      	str	r3, [r7, #12]
 800143c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800143e:	2302      	movs	r3, #2
 8001440:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001442:	2303      	movs	r3, #3
 8001444:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001446:	2300      	movs	r3, #0
 8001448:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800144a:	f107 0314 	add.w	r3, r7, #20
 800144e:	4619      	mov	r1, r3
 8001450:	4805      	ldr	r0, [pc, #20]	; (8001468 <HAL_ADC_MspInit+0x84>)
 8001452:	f000 ffb7 	bl	80023c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001456:	bf00      	nop
 8001458:	3728      	adds	r7, #40	; 0x28
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	40012000 	.word	0x40012000
 8001464:	40023800 	.word	0x40023800
 8001468:	40020000 	.word	0x40020000

0800146c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b08e      	sub	sp, #56	; 0x38
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001474:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001478:	2200      	movs	r2, #0
 800147a:	601a      	str	r2, [r3, #0]
 800147c:	605a      	str	r2, [r3, #4]
 800147e:	609a      	str	r2, [r3, #8]
 8001480:	60da      	str	r2, [r3, #12]
 8001482:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a64      	ldr	r2, [pc, #400]	; (800161c <HAL_I2C_MspInit+0x1b0>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d12d      	bne.n	80014ea <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800148e:	2300      	movs	r3, #0
 8001490:	623b      	str	r3, [r7, #32]
 8001492:	4b63      	ldr	r3, [pc, #396]	; (8001620 <HAL_I2C_MspInit+0x1b4>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001496:	4a62      	ldr	r2, [pc, #392]	; (8001620 <HAL_I2C_MspInit+0x1b4>)
 8001498:	f043 0302 	orr.w	r3, r3, #2
 800149c:	6313      	str	r3, [r2, #48]	; 0x30
 800149e:	4b60      	ldr	r3, [pc, #384]	; (8001620 <HAL_I2C_MspInit+0x1b4>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a2:	f003 0302 	and.w	r3, r3, #2
 80014a6:	623b      	str	r3, [r7, #32]
 80014a8:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80014aa:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80014ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014b0:	2312      	movs	r3, #18
 80014b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b4:	2300      	movs	r3, #0
 80014b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014b8:	2303      	movs	r3, #3
 80014ba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014bc:	2304      	movs	r3, #4
 80014be:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014c4:	4619      	mov	r1, r3
 80014c6:	4857      	ldr	r0, [pc, #348]	; (8001624 <HAL_I2C_MspInit+0x1b8>)
 80014c8:	f000 ff7c 	bl	80023c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014cc:	2300      	movs	r3, #0
 80014ce:	61fb      	str	r3, [r7, #28]
 80014d0:	4b53      	ldr	r3, [pc, #332]	; (8001620 <HAL_I2C_MspInit+0x1b4>)
 80014d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d4:	4a52      	ldr	r2, [pc, #328]	; (8001620 <HAL_I2C_MspInit+0x1b4>)
 80014d6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014da:	6413      	str	r3, [r2, #64]	; 0x40
 80014dc:	4b50      	ldr	r3, [pc, #320]	; (8001620 <HAL_I2C_MspInit+0x1b4>)
 80014de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014e4:	61fb      	str	r3, [r7, #28]
 80014e6:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80014e8:	e093      	b.n	8001612 <HAL_I2C_MspInit+0x1a6>
  else if(hi2c->Instance==I2C2)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a4e      	ldr	r2, [pc, #312]	; (8001628 <HAL_I2C_MspInit+0x1bc>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d13d      	bne.n	8001570 <HAL_I2C_MspInit+0x104>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014f4:	2300      	movs	r3, #0
 80014f6:	61bb      	str	r3, [r7, #24]
 80014f8:	4b49      	ldr	r3, [pc, #292]	; (8001620 <HAL_I2C_MspInit+0x1b4>)
 80014fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fc:	4a48      	ldr	r2, [pc, #288]	; (8001620 <HAL_I2C_MspInit+0x1b4>)
 80014fe:	f043 0302 	orr.w	r3, r3, #2
 8001502:	6313      	str	r3, [r2, #48]	; 0x30
 8001504:	4b46      	ldr	r3, [pc, #280]	; (8001620 <HAL_I2C_MspInit+0x1b4>)
 8001506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001508:	f003 0302 	and.w	r3, r3, #2
 800150c:	61bb      	str	r3, [r7, #24]
 800150e:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001510:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001514:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001516:	2312      	movs	r3, #18
 8001518:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151a:	2300      	movs	r3, #0
 800151c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800151e:	2303      	movs	r3, #3
 8001520:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001522:	2304      	movs	r3, #4
 8001524:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001526:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800152a:	4619      	mov	r1, r3
 800152c:	483d      	ldr	r0, [pc, #244]	; (8001624 <HAL_I2C_MspInit+0x1b8>)
 800152e:	f000 ff49 	bl	80023c4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001532:	2308      	movs	r3, #8
 8001534:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001536:	2312      	movs	r3, #18
 8001538:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153a:	2300      	movs	r3, #0
 800153c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800153e:	2303      	movs	r3, #3
 8001540:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8001542:	2309      	movs	r3, #9
 8001544:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001546:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800154a:	4619      	mov	r1, r3
 800154c:	4835      	ldr	r0, [pc, #212]	; (8001624 <HAL_I2C_MspInit+0x1b8>)
 800154e:	f000 ff39 	bl	80023c4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001552:	2300      	movs	r3, #0
 8001554:	617b      	str	r3, [r7, #20]
 8001556:	4b32      	ldr	r3, [pc, #200]	; (8001620 <HAL_I2C_MspInit+0x1b4>)
 8001558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155a:	4a31      	ldr	r2, [pc, #196]	; (8001620 <HAL_I2C_MspInit+0x1b4>)
 800155c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001560:	6413      	str	r3, [r2, #64]	; 0x40
 8001562:	4b2f      	ldr	r3, [pc, #188]	; (8001620 <HAL_I2C_MspInit+0x1b4>)
 8001564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001566:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800156a:	617b      	str	r3, [r7, #20]
 800156c:	697b      	ldr	r3, [r7, #20]
}
 800156e:	e050      	b.n	8001612 <HAL_I2C_MspInit+0x1a6>
  else if(hi2c->Instance==I2C3)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a2d      	ldr	r2, [pc, #180]	; (800162c <HAL_I2C_MspInit+0x1c0>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d14b      	bne.n	8001612 <HAL_I2C_MspInit+0x1a6>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800157a:	2300      	movs	r3, #0
 800157c:	613b      	str	r3, [r7, #16]
 800157e:	4b28      	ldr	r3, [pc, #160]	; (8001620 <HAL_I2C_MspInit+0x1b4>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001582:	4a27      	ldr	r2, [pc, #156]	; (8001620 <HAL_I2C_MspInit+0x1b4>)
 8001584:	f043 0304 	orr.w	r3, r3, #4
 8001588:	6313      	str	r3, [r2, #48]	; 0x30
 800158a:	4b25      	ldr	r3, [pc, #148]	; (8001620 <HAL_I2C_MspInit+0x1b4>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158e:	f003 0304 	and.w	r3, r3, #4
 8001592:	613b      	str	r3, [r7, #16]
 8001594:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001596:	2300      	movs	r3, #0
 8001598:	60fb      	str	r3, [r7, #12]
 800159a:	4b21      	ldr	r3, [pc, #132]	; (8001620 <HAL_I2C_MspInit+0x1b4>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159e:	4a20      	ldr	r2, [pc, #128]	; (8001620 <HAL_I2C_MspInit+0x1b4>)
 80015a0:	f043 0301 	orr.w	r3, r3, #1
 80015a4:	6313      	str	r3, [r2, #48]	; 0x30
 80015a6:	4b1e      	ldr	r3, [pc, #120]	; (8001620 <HAL_I2C_MspInit+0x1b4>)
 80015a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015aa:	f003 0301 	and.w	r3, r3, #1
 80015ae:	60fb      	str	r3, [r7, #12]
 80015b0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80015b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015b8:	2312      	movs	r3, #18
 80015ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015bc:	2300      	movs	r3, #0
 80015be:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015c0:	2303      	movs	r3, #3
 80015c2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80015c4:	2304      	movs	r3, #4
 80015c6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015cc:	4619      	mov	r1, r3
 80015ce:	4818      	ldr	r0, [pc, #96]	; (8001630 <HAL_I2C_MspInit+0x1c4>)
 80015d0:	f000 fef8 	bl	80023c4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80015d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015da:	2312      	movs	r3, #18
 80015dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015de:	2300      	movs	r3, #0
 80015e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015e2:	2303      	movs	r3, #3
 80015e4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80015e6:	2304      	movs	r3, #4
 80015e8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015ee:	4619      	mov	r1, r3
 80015f0:	4810      	ldr	r0, [pc, #64]	; (8001634 <HAL_I2C_MspInit+0x1c8>)
 80015f2:	f000 fee7 	bl	80023c4 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80015f6:	2300      	movs	r3, #0
 80015f8:	60bb      	str	r3, [r7, #8]
 80015fa:	4b09      	ldr	r3, [pc, #36]	; (8001620 <HAL_I2C_MspInit+0x1b4>)
 80015fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fe:	4a08      	ldr	r2, [pc, #32]	; (8001620 <HAL_I2C_MspInit+0x1b4>)
 8001600:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001604:	6413      	str	r3, [r2, #64]	; 0x40
 8001606:	4b06      	ldr	r3, [pc, #24]	; (8001620 <HAL_I2C_MspInit+0x1b4>)
 8001608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800160e:	60bb      	str	r3, [r7, #8]
 8001610:	68bb      	ldr	r3, [r7, #8]
}
 8001612:	bf00      	nop
 8001614:	3738      	adds	r7, #56	; 0x38
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	40005400 	.word	0x40005400
 8001620:	40023800 	.word	0x40023800
 8001624:	40020400 	.word	0x40020400
 8001628:	40005800 	.word	0x40005800
 800162c:	40005c00 	.word	0x40005c00
 8001630:	40020800 	.word	0x40020800
 8001634:	40020000 	.word	0x40020000

08001638 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b090      	sub	sp, #64	; 0x40
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001640:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001644:	2200      	movs	r2, #0
 8001646:	601a      	str	r2, [r3, #0]
 8001648:	605a      	str	r2, [r3, #4]
 800164a:	609a      	str	r2, [r3, #8]
 800164c:	60da      	str	r2, [r3, #12]
 800164e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a6a      	ldr	r2, [pc, #424]	; (8001800 <HAL_SPI_MspInit+0x1c8>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d12c      	bne.n	80016b4 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800165a:	2300      	movs	r3, #0
 800165c:	62bb      	str	r3, [r7, #40]	; 0x28
 800165e:	4b69      	ldr	r3, [pc, #420]	; (8001804 <HAL_SPI_MspInit+0x1cc>)
 8001660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001662:	4a68      	ldr	r2, [pc, #416]	; (8001804 <HAL_SPI_MspInit+0x1cc>)
 8001664:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001668:	6453      	str	r3, [r2, #68]	; 0x44
 800166a:	4b66      	ldr	r3, [pc, #408]	; (8001804 <HAL_SPI_MspInit+0x1cc>)
 800166c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800166e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001672:	62bb      	str	r3, [r7, #40]	; 0x28
 8001674:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001676:	2300      	movs	r3, #0
 8001678:	627b      	str	r3, [r7, #36]	; 0x24
 800167a:	4b62      	ldr	r3, [pc, #392]	; (8001804 <HAL_SPI_MspInit+0x1cc>)
 800167c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167e:	4a61      	ldr	r2, [pc, #388]	; (8001804 <HAL_SPI_MspInit+0x1cc>)
 8001680:	f043 0301 	orr.w	r3, r3, #1
 8001684:	6313      	str	r3, [r2, #48]	; 0x30
 8001686:	4b5f      	ldr	r3, [pc, #380]	; (8001804 <HAL_SPI_MspInit+0x1cc>)
 8001688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168a:	f003 0301 	and.w	r3, r3, #1
 800168e:	627b      	str	r3, [r7, #36]	; 0x24
 8001690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001692:	23f0      	movs	r3, #240	; 0xf0
 8001694:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001696:	2302      	movs	r3, #2
 8001698:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169a:	2300      	movs	r3, #0
 800169c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800169e:	2303      	movs	r3, #3
 80016a0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80016a2:	2305      	movs	r3, #5
 80016a4:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016aa:	4619      	mov	r1, r3
 80016ac:	4856      	ldr	r0, [pc, #344]	; (8001808 <HAL_SPI_MspInit+0x1d0>)
 80016ae:	f000 fe89 	bl	80023c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80016b2:	e0a1      	b.n	80017f8 <HAL_SPI_MspInit+0x1c0>
  else if(hspi->Instance==SPI2)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a54      	ldr	r2, [pc, #336]	; (800180c <HAL_SPI_MspInit+0x1d4>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d14b      	bne.n	8001756 <HAL_SPI_MspInit+0x11e>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80016be:	2300      	movs	r3, #0
 80016c0:	623b      	str	r3, [r7, #32]
 80016c2:	4b50      	ldr	r3, [pc, #320]	; (8001804 <HAL_SPI_MspInit+0x1cc>)
 80016c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c6:	4a4f      	ldr	r2, [pc, #316]	; (8001804 <HAL_SPI_MspInit+0x1cc>)
 80016c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016cc:	6413      	str	r3, [r2, #64]	; 0x40
 80016ce:	4b4d      	ldr	r3, [pc, #308]	; (8001804 <HAL_SPI_MspInit+0x1cc>)
 80016d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016d6:	623b      	str	r3, [r7, #32]
 80016d8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016da:	2300      	movs	r3, #0
 80016dc:	61fb      	str	r3, [r7, #28]
 80016de:	4b49      	ldr	r3, [pc, #292]	; (8001804 <HAL_SPI_MspInit+0x1cc>)
 80016e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e2:	4a48      	ldr	r2, [pc, #288]	; (8001804 <HAL_SPI_MspInit+0x1cc>)
 80016e4:	f043 0304 	orr.w	r3, r3, #4
 80016e8:	6313      	str	r3, [r2, #48]	; 0x30
 80016ea:	4b46      	ldr	r3, [pc, #280]	; (8001804 <HAL_SPI_MspInit+0x1cc>)
 80016ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ee:	f003 0304 	and.w	r3, r3, #4
 80016f2:	61fb      	str	r3, [r7, #28]
 80016f4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016f6:	2300      	movs	r3, #0
 80016f8:	61bb      	str	r3, [r7, #24]
 80016fa:	4b42      	ldr	r3, [pc, #264]	; (8001804 <HAL_SPI_MspInit+0x1cc>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fe:	4a41      	ldr	r2, [pc, #260]	; (8001804 <HAL_SPI_MspInit+0x1cc>)
 8001700:	f043 0302 	orr.w	r3, r3, #2
 8001704:	6313      	str	r3, [r2, #48]	; 0x30
 8001706:	4b3f      	ldr	r3, [pc, #252]	; (8001804 <HAL_SPI_MspInit+0x1cc>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170a:	f003 0302 	and.w	r3, r3, #2
 800170e:	61bb      	str	r3, [r7, #24]
 8001710:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001712:	230c      	movs	r3, #12
 8001714:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001716:	2302      	movs	r3, #2
 8001718:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171a:	2300      	movs	r3, #0
 800171c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800171e:	2303      	movs	r3, #3
 8001720:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001722:	2305      	movs	r3, #5
 8001724:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001726:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800172a:	4619      	mov	r1, r3
 800172c:	4838      	ldr	r0, [pc, #224]	; (8001810 <HAL_SPI_MspInit+0x1d8>)
 800172e:	f000 fe49 	bl	80023c4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001732:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001736:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001738:	2302      	movs	r3, #2
 800173a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173c:	2300      	movs	r3, #0
 800173e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001740:	2303      	movs	r3, #3
 8001742:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001744:	2305      	movs	r3, #5
 8001746:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001748:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800174c:	4619      	mov	r1, r3
 800174e:	4831      	ldr	r0, [pc, #196]	; (8001814 <HAL_SPI_MspInit+0x1dc>)
 8001750:	f000 fe38 	bl	80023c4 <HAL_GPIO_Init>
}
 8001754:	e050      	b.n	80017f8 <HAL_SPI_MspInit+0x1c0>
  else if(hspi->Instance==SPI3)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a2f      	ldr	r2, [pc, #188]	; (8001818 <HAL_SPI_MspInit+0x1e0>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d14b      	bne.n	80017f8 <HAL_SPI_MspInit+0x1c0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001760:	2300      	movs	r3, #0
 8001762:	617b      	str	r3, [r7, #20]
 8001764:	4b27      	ldr	r3, [pc, #156]	; (8001804 <HAL_SPI_MspInit+0x1cc>)
 8001766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001768:	4a26      	ldr	r2, [pc, #152]	; (8001804 <HAL_SPI_MspInit+0x1cc>)
 800176a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800176e:	6413      	str	r3, [r2, #64]	; 0x40
 8001770:	4b24      	ldr	r3, [pc, #144]	; (8001804 <HAL_SPI_MspInit+0x1cc>)
 8001772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001774:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001778:	617b      	str	r3, [r7, #20]
 800177a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800177c:	2300      	movs	r3, #0
 800177e:	613b      	str	r3, [r7, #16]
 8001780:	4b20      	ldr	r3, [pc, #128]	; (8001804 <HAL_SPI_MspInit+0x1cc>)
 8001782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001784:	4a1f      	ldr	r2, [pc, #124]	; (8001804 <HAL_SPI_MspInit+0x1cc>)
 8001786:	f043 0301 	orr.w	r3, r3, #1
 800178a:	6313      	str	r3, [r2, #48]	; 0x30
 800178c:	4b1d      	ldr	r3, [pc, #116]	; (8001804 <HAL_SPI_MspInit+0x1cc>)
 800178e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001790:	f003 0301 	and.w	r3, r3, #1
 8001794:	613b      	str	r3, [r7, #16]
 8001796:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001798:	2300      	movs	r3, #0
 800179a:	60fb      	str	r3, [r7, #12]
 800179c:	4b19      	ldr	r3, [pc, #100]	; (8001804 <HAL_SPI_MspInit+0x1cc>)
 800179e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a0:	4a18      	ldr	r2, [pc, #96]	; (8001804 <HAL_SPI_MspInit+0x1cc>)
 80017a2:	f043 0304 	orr.w	r3, r3, #4
 80017a6:	6313      	str	r3, [r2, #48]	; 0x30
 80017a8:	4b16      	ldr	r3, [pc, #88]	; (8001804 <HAL_SPI_MspInit+0x1cc>)
 80017aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ac:	f003 0304 	and.w	r3, r3, #4
 80017b0:	60fb      	str	r3, [r7, #12]
 80017b2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80017b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80017b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ba:	2302      	movs	r3, #2
 80017bc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017be:	2300      	movs	r3, #0
 80017c0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017c2:	2303      	movs	r3, #3
 80017c4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80017c6:	2306      	movs	r3, #6
 80017c8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017ce:	4619      	mov	r1, r3
 80017d0:	480d      	ldr	r0, [pc, #52]	; (8001808 <HAL_SPI_MspInit+0x1d0>)
 80017d2:	f000 fdf7 	bl	80023c4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80017d6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80017da:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017dc:	2302      	movs	r3, #2
 80017de:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e0:	2300      	movs	r3, #0
 80017e2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017e4:	2303      	movs	r3, #3
 80017e6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80017e8:	2306      	movs	r3, #6
 80017ea:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017f0:	4619      	mov	r1, r3
 80017f2:	4807      	ldr	r0, [pc, #28]	; (8001810 <HAL_SPI_MspInit+0x1d8>)
 80017f4:	f000 fde6 	bl	80023c4 <HAL_GPIO_Init>
}
 80017f8:	bf00      	nop
 80017fa:	3740      	adds	r7, #64	; 0x40
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	40013000 	.word	0x40013000
 8001804:	40023800 	.word	0x40023800
 8001808:	40020000 	.word	0x40020000
 800180c:	40003800 	.word	0x40003800
 8001810:	40020800 	.word	0x40020800
 8001814:	40020400 	.word	0x40020400
 8001818:	40003c00 	.word	0x40003c00

0800181c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800181c:	b480      	push	{r7}
 800181e:	b085      	sub	sp, #20
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a15      	ldr	r2, [pc, #84]	; (8001880 <HAL_TIM_PWM_MspInit+0x64>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d10e      	bne.n	800184c <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800182e:	2300      	movs	r3, #0
 8001830:	60fb      	str	r3, [r7, #12]
 8001832:	4b14      	ldr	r3, [pc, #80]	; (8001884 <HAL_TIM_PWM_MspInit+0x68>)
 8001834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001836:	4a13      	ldr	r2, [pc, #76]	; (8001884 <HAL_TIM_PWM_MspInit+0x68>)
 8001838:	f043 0302 	orr.w	r3, r3, #2
 800183c:	6413      	str	r3, [r2, #64]	; 0x40
 800183e:	4b11      	ldr	r3, [pc, #68]	; (8001884 <HAL_TIM_PWM_MspInit+0x68>)
 8001840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001842:	f003 0302 	and.w	r3, r3, #2
 8001846:	60fb      	str	r3, [r7, #12]
 8001848:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800184a:	e012      	b.n	8001872 <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM4)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a0d      	ldr	r2, [pc, #52]	; (8001888 <HAL_TIM_PWM_MspInit+0x6c>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d10d      	bne.n	8001872 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001856:	2300      	movs	r3, #0
 8001858:	60bb      	str	r3, [r7, #8]
 800185a:	4b0a      	ldr	r3, [pc, #40]	; (8001884 <HAL_TIM_PWM_MspInit+0x68>)
 800185c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185e:	4a09      	ldr	r2, [pc, #36]	; (8001884 <HAL_TIM_PWM_MspInit+0x68>)
 8001860:	f043 0304 	orr.w	r3, r3, #4
 8001864:	6413      	str	r3, [r2, #64]	; 0x40
 8001866:	4b07      	ldr	r3, [pc, #28]	; (8001884 <HAL_TIM_PWM_MspInit+0x68>)
 8001868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186a:	f003 0304 	and.w	r3, r3, #4
 800186e:	60bb      	str	r3, [r7, #8]
 8001870:	68bb      	ldr	r3, [r7, #8]
}
 8001872:	bf00      	nop
 8001874:	3714      	adds	r7, #20
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	40000400 	.word	0x40000400
 8001884:	40023800 	.word	0x40023800
 8001888:	40000800 	.word	0x40000800

0800188c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b08a      	sub	sp, #40	; 0x28
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001894:	f107 0314 	add.w	r3, r7, #20
 8001898:	2200      	movs	r2, #0
 800189a:	601a      	str	r2, [r3, #0]
 800189c:	605a      	str	r2, [r3, #4]
 800189e:	609a      	str	r2, [r3, #8]
 80018a0:	60da      	str	r2, [r3, #12]
 80018a2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a24      	ldr	r2, [pc, #144]	; (800193c <HAL_TIM_MspPostInit+0xb0>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d11e      	bne.n	80018ec <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ae:	2300      	movs	r3, #0
 80018b0:	613b      	str	r3, [r7, #16]
 80018b2:	4b23      	ldr	r3, [pc, #140]	; (8001940 <HAL_TIM_MspPostInit+0xb4>)
 80018b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b6:	4a22      	ldr	r2, [pc, #136]	; (8001940 <HAL_TIM_MspPostInit+0xb4>)
 80018b8:	f043 0302 	orr.w	r3, r3, #2
 80018bc:	6313      	str	r3, [r2, #48]	; 0x30
 80018be:	4b20      	ldr	r3, [pc, #128]	; (8001940 <HAL_TIM_MspPostInit+0xb4>)
 80018c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c2:	f003 0302 	and.w	r3, r3, #2
 80018c6:	613b      	str	r3, [r7, #16]
 80018c8:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80018ca:	2303      	movs	r3, #3
 80018cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ce:	2302      	movs	r3, #2
 80018d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d2:	2300      	movs	r3, #0
 80018d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d6:	2300      	movs	r3, #0
 80018d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80018da:	2302      	movs	r3, #2
 80018dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018de:	f107 0314 	add.w	r3, r7, #20
 80018e2:	4619      	mov	r1, r3
 80018e4:	4817      	ldr	r0, [pc, #92]	; (8001944 <HAL_TIM_MspPostInit+0xb8>)
 80018e6:	f000 fd6d 	bl	80023c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80018ea:	e022      	b.n	8001932 <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM4)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a15      	ldr	r2, [pc, #84]	; (8001948 <HAL_TIM_MspPostInit+0xbc>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d11d      	bne.n	8001932 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018f6:	2300      	movs	r3, #0
 80018f8:	60fb      	str	r3, [r7, #12]
 80018fa:	4b11      	ldr	r3, [pc, #68]	; (8001940 <HAL_TIM_MspPostInit+0xb4>)
 80018fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fe:	4a10      	ldr	r2, [pc, #64]	; (8001940 <HAL_TIM_MspPostInit+0xb4>)
 8001900:	f043 0302 	orr.w	r3, r3, #2
 8001904:	6313      	str	r3, [r2, #48]	; 0x30
 8001906:	4b0e      	ldr	r3, [pc, #56]	; (8001940 <HAL_TIM_MspPostInit+0xb4>)
 8001908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190a:	f003 0302 	and.w	r3, r3, #2
 800190e:	60fb      	str	r3, [r7, #12]
 8001910:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001912:	2340      	movs	r3, #64	; 0x40
 8001914:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001916:	2302      	movs	r3, #2
 8001918:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191a:	2300      	movs	r3, #0
 800191c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800191e:	2300      	movs	r3, #0
 8001920:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001922:	2302      	movs	r3, #2
 8001924:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001926:	f107 0314 	add.w	r3, r7, #20
 800192a:	4619      	mov	r1, r3
 800192c:	4805      	ldr	r0, [pc, #20]	; (8001944 <HAL_TIM_MspPostInit+0xb8>)
 800192e:	f000 fd49 	bl	80023c4 <HAL_GPIO_Init>
}
 8001932:	bf00      	nop
 8001934:	3728      	adds	r7, #40	; 0x28
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	40000400 	.word	0x40000400
 8001940:	40023800 	.word	0x40023800
 8001944:	40020400 	.word	0x40020400
 8001948:	40000800 	.word	0x40000800

0800194c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b08e      	sub	sp, #56	; 0x38
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001954:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001958:	2200      	movs	r2, #0
 800195a:	601a      	str	r2, [r3, #0]
 800195c:	605a      	str	r2, [r3, #4]
 800195e:	609a      	str	r2, [r3, #8]
 8001960:	60da      	str	r2, [r3, #12]
 8001962:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a4c      	ldr	r2, [pc, #304]	; (8001a9c <HAL_UART_MspInit+0x150>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d12d      	bne.n	80019ca <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800196e:	2300      	movs	r3, #0
 8001970:	623b      	str	r3, [r7, #32]
 8001972:	4b4b      	ldr	r3, [pc, #300]	; (8001aa0 <HAL_UART_MspInit+0x154>)
 8001974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001976:	4a4a      	ldr	r2, [pc, #296]	; (8001aa0 <HAL_UART_MspInit+0x154>)
 8001978:	f043 0310 	orr.w	r3, r3, #16
 800197c:	6453      	str	r3, [r2, #68]	; 0x44
 800197e:	4b48      	ldr	r3, [pc, #288]	; (8001aa0 <HAL_UART_MspInit+0x154>)
 8001980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001982:	f003 0310 	and.w	r3, r3, #16
 8001986:	623b      	str	r3, [r7, #32]
 8001988:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800198a:	2300      	movs	r3, #0
 800198c:	61fb      	str	r3, [r7, #28]
 800198e:	4b44      	ldr	r3, [pc, #272]	; (8001aa0 <HAL_UART_MspInit+0x154>)
 8001990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001992:	4a43      	ldr	r2, [pc, #268]	; (8001aa0 <HAL_UART_MspInit+0x154>)
 8001994:	f043 0301 	orr.w	r3, r3, #1
 8001998:	6313      	str	r3, [r2, #48]	; 0x30
 800199a:	4b41      	ldr	r3, [pc, #260]	; (8001aa0 <HAL_UART_MspInit+0x154>)
 800199c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199e:	f003 0301 	and.w	r3, r3, #1
 80019a2:	61fb      	str	r3, [r7, #28]
 80019a4:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80019a6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80019aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ac:	2302      	movs	r3, #2
 80019ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b0:	2300      	movs	r3, #0
 80019b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019b4:	2303      	movs	r3, #3
 80019b6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80019b8:	2307      	movs	r3, #7
 80019ba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019c0:	4619      	mov	r1, r3
 80019c2:	4838      	ldr	r0, [pc, #224]	; (8001aa4 <HAL_UART_MspInit+0x158>)
 80019c4:	f000 fcfe 	bl	80023c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80019c8:	e063      	b.n	8001a92 <HAL_UART_MspInit+0x146>
  else if(huart->Instance==USART2)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a36      	ldr	r2, [pc, #216]	; (8001aa8 <HAL_UART_MspInit+0x15c>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d12c      	bne.n	8001a2e <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART2_CLK_ENABLE();
 80019d4:	2300      	movs	r3, #0
 80019d6:	61bb      	str	r3, [r7, #24]
 80019d8:	4b31      	ldr	r3, [pc, #196]	; (8001aa0 <HAL_UART_MspInit+0x154>)
 80019da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019dc:	4a30      	ldr	r2, [pc, #192]	; (8001aa0 <HAL_UART_MspInit+0x154>)
 80019de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019e2:	6413      	str	r3, [r2, #64]	; 0x40
 80019e4:	4b2e      	ldr	r3, [pc, #184]	; (8001aa0 <HAL_UART_MspInit+0x154>)
 80019e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ec:	61bb      	str	r3, [r7, #24]
 80019ee:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019f0:	2300      	movs	r3, #0
 80019f2:	617b      	str	r3, [r7, #20]
 80019f4:	4b2a      	ldr	r3, [pc, #168]	; (8001aa0 <HAL_UART_MspInit+0x154>)
 80019f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f8:	4a29      	ldr	r2, [pc, #164]	; (8001aa0 <HAL_UART_MspInit+0x154>)
 80019fa:	f043 0301 	orr.w	r3, r3, #1
 80019fe:	6313      	str	r3, [r2, #48]	; 0x30
 8001a00:	4b27      	ldr	r3, [pc, #156]	; (8001aa0 <HAL_UART_MspInit+0x154>)
 8001a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a04:	f003 0301 	and.w	r3, r3, #1
 8001a08:	617b      	str	r3, [r7, #20]
 8001a0a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001a0c:	230c      	movs	r3, #12
 8001a0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a10:	2302      	movs	r3, #2
 8001a12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a14:	2300      	movs	r3, #0
 8001a16:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a18:	2303      	movs	r3, #3
 8001a1a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a1c:	2307      	movs	r3, #7
 8001a1e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a24:	4619      	mov	r1, r3
 8001a26:	481f      	ldr	r0, [pc, #124]	; (8001aa4 <HAL_UART_MspInit+0x158>)
 8001a28:	f000 fccc 	bl	80023c4 <HAL_GPIO_Init>
}
 8001a2c:	e031      	b.n	8001a92 <HAL_UART_MspInit+0x146>
  else if(huart->Instance==USART6)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a1e      	ldr	r2, [pc, #120]	; (8001aac <HAL_UART_MspInit+0x160>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d12c      	bne.n	8001a92 <HAL_UART_MspInit+0x146>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001a38:	2300      	movs	r3, #0
 8001a3a:	613b      	str	r3, [r7, #16]
 8001a3c:	4b18      	ldr	r3, [pc, #96]	; (8001aa0 <HAL_UART_MspInit+0x154>)
 8001a3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a40:	4a17      	ldr	r2, [pc, #92]	; (8001aa0 <HAL_UART_MspInit+0x154>)
 8001a42:	f043 0320 	orr.w	r3, r3, #32
 8001a46:	6453      	str	r3, [r2, #68]	; 0x44
 8001a48:	4b15      	ldr	r3, [pc, #84]	; (8001aa0 <HAL_UART_MspInit+0x154>)
 8001a4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a4c:	f003 0320 	and.w	r3, r3, #32
 8001a50:	613b      	str	r3, [r7, #16]
 8001a52:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a54:	2300      	movs	r3, #0
 8001a56:	60fb      	str	r3, [r7, #12]
 8001a58:	4b11      	ldr	r3, [pc, #68]	; (8001aa0 <HAL_UART_MspInit+0x154>)
 8001a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5c:	4a10      	ldr	r2, [pc, #64]	; (8001aa0 <HAL_UART_MspInit+0x154>)
 8001a5e:	f043 0301 	orr.w	r3, r3, #1
 8001a62:	6313      	str	r3, [r2, #48]	; 0x30
 8001a64:	4b0e      	ldr	r3, [pc, #56]	; (8001aa0 <HAL_UART_MspInit+0x154>)
 8001a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a68:	f003 0301 	and.w	r3, r3, #1
 8001a6c:	60fb      	str	r3, [r7, #12]
 8001a6e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001a70:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001a74:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a76:	2302      	movs	r3, #2
 8001a78:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001a82:	2308      	movs	r3, #8
 8001a84:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	4805      	ldr	r0, [pc, #20]	; (8001aa4 <HAL_UART_MspInit+0x158>)
 8001a8e:	f000 fc99 	bl	80023c4 <HAL_GPIO_Init>
}
 8001a92:	bf00      	nop
 8001a94:	3738      	adds	r7, #56	; 0x38
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	40011000 	.word	0x40011000
 8001aa0:	40023800 	.word	0x40023800
 8001aa4:	40020000 	.word	0x40020000
 8001aa8:	40004400 	.word	0x40004400
 8001aac:	40011400 	.word	0x40011400

08001ab0 <SDTimer_Handler>:

volatile uint8_t FatFsCnt=0;
volatile uint8_t Timer1,Timer2;


void SDTimer_Handler(void){
 8001ab0:	b480      	push	{r7}
 8001ab2:	af00      	add	r7, sp, #0
	if(Timer1>0)
 8001ab4:	4b0e      	ldr	r3, [pc, #56]	; (8001af0 <SDTimer_Handler+0x40>)
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d006      	beq.n	8001acc <SDTimer_Handler+0x1c>
		Timer1--;
 8001abe:	4b0c      	ldr	r3, [pc, #48]	; (8001af0 <SDTimer_Handler+0x40>)
 8001ac0:	781b      	ldrb	r3, [r3, #0]
 8001ac2:	b2db      	uxtb	r3, r3
 8001ac4:	3b01      	subs	r3, #1
 8001ac6:	b2da      	uxtb	r2, r3
 8001ac8:	4b09      	ldr	r3, [pc, #36]	; (8001af0 <SDTimer_Handler+0x40>)
 8001aca:	701a      	strb	r2, [r3, #0]
	if(Timer2>0)
 8001acc:	4b09      	ldr	r3, [pc, #36]	; (8001af4 <SDTimer_Handler+0x44>)
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d006      	beq.n	8001ae4 <SDTimer_Handler+0x34>
		Timer2--;
 8001ad6:	4b07      	ldr	r3, [pc, #28]	; (8001af4 <SDTimer_Handler+0x44>)
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	b2db      	uxtb	r3, r3
 8001adc:	3b01      	subs	r3, #1
 8001ade:	b2da      	uxtb	r2, r3
 8001ae0:	4b04      	ldr	r3, [pc, #16]	; (8001af4 <SDTimer_Handler+0x44>)
 8001ae2:	701a      	strb	r2, [r3, #0]

}
 8001ae4:	bf00      	nop
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr
 8001aee:	bf00      	nop
 8001af0:	200013ed 	.word	0x200013ed
 8001af4:	200013ee 	.word	0x200013ee

08001af8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001afc:	e7fe      	b.n	8001afc <NMI_Handler+0x4>

08001afe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001afe:	b480      	push	{r7}
 8001b00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b02:	e7fe      	b.n	8001b02 <HardFault_Handler+0x4>

08001b04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b08:	e7fe      	b.n	8001b08 <MemManage_Handler+0x4>

08001b0a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b0a:	b480      	push	{r7}
 8001b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b0e:	e7fe      	b.n	8001b0e <BusFault_Handler+0x4>

08001b10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b14:	e7fe      	b.n	8001b14 <UsageFault_Handler+0x4>

08001b16 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b16:	b480      	push	{r7}
 8001b18:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b1a:	bf00      	nop
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr

08001b24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	  FatFsCnt++;
 8001b28:	4b0d      	ldr	r3, [pc, #52]	; (8001b60 <SysTick_Handler+0x3c>)
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	3301      	adds	r3, #1
 8001b30:	b2da      	uxtb	r2, r3
 8001b32:	4b0b      	ldr	r3, [pc, #44]	; (8001b60 <SysTick_Handler+0x3c>)
 8001b34:	701a      	strb	r2, [r3, #0]

	  if(FatFsCnt>=10)
 8001b36:	4b0a      	ldr	r3, [pc, #40]	; (8001b60 <SysTick_Handler+0x3c>)
 8001b38:	781b      	ldrb	r3, [r3, #0]
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	2b09      	cmp	r3, #9
 8001b3e:	d904      	bls.n	8001b4a <SysTick_Handler+0x26>
	  {
		  FatFsCnt=0;
 8001b40:	4b07      	ldr	r3, [pc, #28]	; (8001b60 <SysTick_Handler+0x3c>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	701a      	strb	r2, [r3, #0]
		  SDTimer_Handler();
 8001b46:	f7ff ffb3 	bl	8001ab0 <SDTimer_Handler>
	  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b4a:	f000 f8a7 	bl	8001c9c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001b4e:	f007 ffc3 	bl	8009ad8 <xTaskGetSchedulerState>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d001      	beq.n	8001b5c <SysTick_Handler+0x38>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001b58:	f008 ff66 	bl	800aa28 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b5c:	bf00      	nop
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	200013ec 	.word	0x200013ec

08001b64 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001b68:	2001      	movs	r0, #1
 8001b6a:	f000 fdc9 	bl	8002700 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001b6e:	bf00      	nop
 8001b70:	bd80      	pop	{r7, pc}

08001b72 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001b72:	b580      	push	{r7, lr}
 8001b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001b76:	2004      	movs	r0, #4
 8001b78:	f000 fdc2 	bl	8002700 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001b7c:	bf00      	nop
 8001b7e:	bd80      	pop	{r7, pc}

08001b80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b84:	4b06      	ldr	r3, [pc, #24]	; (8001ba0 <SystemInit+0x20>)
 8001b86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b8a:	4a05      	ldr	r2, [pc, #20]	; (8001ba0 <SystemInit+0x20>)
 8001b8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b94:	bf00      	nop
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	e000ed00 	.word	0xe000ed00

08001ba4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001ba4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bdc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ba8:	480d      	ldr	r0, [pc, #52]	; (8001be0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001baa:	490e      	ldr	r1, [pc, #56]	; (8001be4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001bac:	4a0e      	ldr	r2, [pc, #56]	; (8001be8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001bae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bb0:	e002      	b.n	8001bb8 <LoopCopyDataInit>

08001bb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bb6:	3304      	adds	r3, #4

08001bb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bbc:	d3f9      	bcc.n	8001bb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bbe:	4a0b      	ldr	r2, [pc, #44]	; (8001bec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001bc0:	4c0b      	ldr	r4, [pc, #44]	; (8001bf0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001bc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bc4:	e001      	b.n	8001bca <LoopFillZerobss>

08001bc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bc8:	3204      	adds	r2, #4

08001bca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bcc:	d3fb      	bcc.n	8001bc6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001bce:	f7ff ffd7 	bl	8001b80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bd2:	f009 ff7b 	bl	800bacc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bd6:	f7fe ff8b 	bl	8000af0 <main>
  bx  lr    
 8001bda:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001bdc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001be0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001be4:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8001be8:	0800c18c 	.word	0x0800c18c
  ldr r2, =_sbss
 8001bec:	20001024 	.word	0x20001024
  ldr r4, =_ebss
 8001bf0:	2000c718 	.word	0x2000c718

08001bf4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bf4:	e7fe      	b.n	8001bf4 <ADC_IRQHandler>
	...

08001bf8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001bfc:	4b0e      	ldr	r3, [pc, #56]	; (8001c38 <HAL_Init+0x40>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a0d      	ldr	r2, [pc, #52]	; (8001c38 <HAL_Init+0x40>)
 8001c02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c06:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c08:	4b0b      	ldr	r3, [pc, #44]	; (8001c38 <HAL_Init+0x40>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a0a      	ldr	r2, [pc, #40]	; (8001c38 <HAL_Init+0x40>)
 8001c0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c12:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c14:	4b08      	ldr	r3, [pc, #32]	; (8001c38 <HAL_Init+0x40>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a07      	ldr	r2, [pc, #28]	; (8001c38 <HAL_Init+0x40>)
 8001c1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c20:	2003      	movs	r0, #3
 8001c22:	f000 fb8d 	bl	8002340 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c26:	200f      	movs	r0, #15
 8001c28:	f000 f808 	bl	8001c3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c2c:	f7ff fbae 	bl	800138c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c30:	2300      	movs	r3, #0
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	40023c00 	.word	0x40023c00

08001c3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c44:	4b12      	ldr	r3, [pc, #72]	; (8001c90 <HAL_InitTick+0x54>)
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	4b12      	ldr	r3, [pc, #72]	; (8001c94 <HAL_InitTick+0x58>)
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c52:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c56:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f000 fba5 	bl	80023aa <HAL_SYSTICK_Config>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e00e      	b.n	8001c88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2b0f      	cmp	r3, #15
 8001c6e:	d80a      	bhi.n	8001c86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c70:	2200      	movs	r2, #0
 8001c72:	6879      	ldr	r1, [r7, #4]
 8001c74:	f04f 30ff 	mov.w	r0, #4294967295
 8001c78:	f000 fb6d 	bl	8002356 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c7c:	4a06      	ldr	r2, [pc, #24]	; (8001c98 <HAL_InitTick+0x5c>)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c82:	2300      	movs	r3, #0
 8001c84:	e000      	b.n	8001c88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3708      	adds	r7, #8
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	20000000 	.word	0x20000000
 8001c94:	20000008 	.word	0x20000008
 8001c98:	20000004 	.word	0x20000004

08001c9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ca0:	4b06      	ldr	r3, [pc, #24]	; (8001cbc <HAL_IncTick+0x20>)
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	4b06      	ldr	r3, [pc, #24]	; (8001cc0 <HAL_IncTick+0x24>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4413      	add	r3, r2
 8001cac:	4a04      	ldr	r2, [pc, #16]	; (8001cc0 <HAL_IncTick+0x24>)
 8001cae:	6013      	str	r3, [r2, #0]
}
 8001cb0:	bf00      	nop
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop
 8001cbc:	20000008 	.word	0x20000008
 8001cc0:	200013f0 	.word	0x200013f0

08001cc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
  return uwTick;
 8001cc8:	4b03      	ldr	r3, [pc, #12]	; (8001cd8 <HAL_GetTick+0x14>)
 8001cca:	681b      	ldr	r3, [r3, #0]
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	200013f0 	.word	0x200013f0

08001cdc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b084      	sub	sp, #16
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d101      	bne.n	8001cf2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e033      	b.n	8001d5a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d109      	bne.n	8001d0e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	f7ff fb72 	bl	80013e4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2200      	movs	r2, #0
 8001d04:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d12:	f003 0310 	and.w	r3, r3, #16
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d118      	bne.n	8001d4c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001d22:	f023 0302 	bic.w	r3, r3, #2
 8001d26:	f043 0202 	orr.w	r2, r3, #2
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f000 f93a 	bl	8001fa8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2200      	movs	r2, #0
 8001d38:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3e:	f023 0303 	bic.w	r3, r3, #3
 8001d42:	f043 0201 	orr.w	r2, r3, #1
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	641a      	str	r2, [r3, #64]	; 0x40
 8001d4a:	e001      	b.n	8001d50 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2200      	movs	r2, #0
 8001d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001d58:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3710      	adds	r7, #16
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
	...

08001d64 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b085      	sub	sp, #20
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	d101      	bne.n	8001d80 <HAL_ADC_ConfigChannel+0x1c>
 8001d7c:	2302      	movs	r3, #2
 8001d7e:	e105      	b.n	8001f8c <HAL_ADC_ConfigChannel+0x228>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2201      	movs	r2, #1
 8001d84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	2b09      	cmp	r3, #9
 8001d8e:	d925      	bls.n	8001ddc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	68d9      	ldr	r1, [r3, #12]
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	b29b      	uxth	r3, r3
 8001d9c:	461a      	mov	r2, r3
 8001d9e:	4613      	mov	r3, r2
 8001da0:	005b      	lsls	r3, r3, #1
 8001da2:	4413      	add	r3, r2
 8001da4:	3b1e      	subs	r3, #30
 8001da6:	2207      	movs	r2, #7
 8001da8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dac:	43da      	mvns	r2, r3
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	400a      	ands	r2, r1
 8001db4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	68d9      	ldr	r1, [r3, #12]
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	689a      	ldr	r2, [r3, #8]
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	b29b      	uxth	r3, r3
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	4603      	mov	r3, r0
 8001dca:	005b      	lsls	r3, r3, #1
 8001dcc:	4403      	add	r3, r0
 8001dce:	3b1e      	subs	r3, #30
 8001dd0:	409a      	lsls	r2, r3
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	430a      	orrs	r2, r1
 8001dd8:	60da      	str	r2, [r3, #12]
 8001dda:	e022      	b.n	8001e22 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	6919      	ldr	r1, [r3, #16]
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	b29b      	uxth	r3, r3
 8001de8:	461a      	mov	r2, r3
 8001dea:	4613      	mov	r3, r2
 8001dec:	005b      	lsls	r3, r3, #1
 8001dee:	4413      	add	r3, r2
 8001df0:	2207      	movs	r2, #7
 8001df2:	fa02 f303 	lsl.w	r3, r2, r3
 8001df6:	43da      	mvns	r2, r3
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	400a      	ands	r2, r1
 8001dfe:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	6919      	ldr	r1, [r3, #16]
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	689a      	ldr	r2, [r3, #8]
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	b29b      	uxth	r3, r3
 8001e10:	4618      	mov	r0, r3
 8001e12:	4603      	mov	r3, r0
 8001e14:	005b      	lsls	r3, r3, #1
 8001e16:	4403      	add	r3, r0
 8001e18:	409a      	lsls	r2, r3
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	430a      	orrs	r2, r1
 8001e20:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	2b06      	cmp	r3, #6
 8001e28:	d824      	bhi.n	8001e74 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	685a      	ldr	r2, [r3, #4]
 8001e34:	4613      	mov	r3, r2
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	4413      	add	r3, r2
 8001e3a:	3b05      	subs	r3, #5
 8001e3c:	221f      	movs	r2, #31
 8001e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e42:	43da      	mvns	r2, r3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	400a      	ands	r2, r1
 8001e4a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	b29b      	uxth	r3, r3
 8001e58:	4618      	mov	r0, r3
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	685a      	ldr	r2, [r3, #4]
 8001e5e:	4613      	mov	r3, r2
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	4413      	add	r3, r2
 8001e64:	3b05      	subs	r3, #5
 8001e66:	fa00 f203 	lsl.w	r2, r0, r3
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	430a      	orrs	r2, r1
 8001e70:	635a      	str	r2, [r3, #52]	; 0x34
 8001e72:	e04c      	b.n	8001f0e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	2b0c      	cmp	r3, #12
 8001e7a:	d824      	bhi.n	8001ec6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	685a      	ldr	r2, [r3, #4]
 8001e86:	4613      	mov	r3, r2
 8001e88:	009b      	lsls	r3, r3, #2
 8001e8a:	4413      	add	r3, r2
 8001e8c:	3b23      	subs	r3, #35	; 0x23
 8001e8e:	221f      	movs	r2, #31
 8001e90:	fa02 f303 	lsl.w	r3, r2, r3
 8001e94:	43da      	mvns	r2, r3
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	400a      	ands	r2, r1
 8001e9c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	b29b      	uxth	r3, r3
 8001eaa:	4618      	mov	r0, r3
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	685a      	ldr	r2, [r3, #4]
 8001eb0:	4613      	mov	r3, r2
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	4413      	add	r3, r2
 8001eb6:	3b23      	subs	r3, #35	; 0x23
 8001eb8:	fa00 f203 	lsl.w	r2, r0, r3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	430a      	orrs	r2, r1
 8001ec2:	631a      	str	r2, [r3, #48]	; 0x30
 8001ec4:	e023      	b.n	8001f0e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	685a      	ldr	r2, [r3, #4]
 8001ed0:	4613      	mov	r3, r2
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	4413      	add	r3, r2
 8001ed6:	3b41      	subs	r3, #65	; 0x41
 8001ed8:	221f      	movs	r2, #31
 8001eda:	fa02 f303 	lsl.w	r3, r2, r3
 8001ede:	43da      	mvns	r2, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	400a      	ands	r2, r1
 8001ee6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	b29b      	uxth	r3, r3
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	685a      	ldr	r2, [r3, #4]
 8001efa:	4613      	mov	r3, r2
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	4413      	add	r3, r2
 8001f00:	3b41      	subs	r3, #65	; 0x41
 8001f02:	fa00 f203 	lsl.w	r2, r0, r3
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	430a      	orrs	r2, r1
 8001f0c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f0e:	4b22      	ldr	r3, [pc, #136]	; (8001f98 <HAL_ADC_ConfigChannel+0x234>)
 8001f10:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a21      	ldr	r2, [pc, #132]	; (8001f9c <HAL_ADC_ConfigChannel+0x238>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d109      	bne.n	8001f30 <HAL_ADC_ConfigChannel+0x1cc>
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	2b12      	cmp	r3, #18
 8001f22:	d105      	bne.n	8001f30 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a19      	ldr	r2, [pc, #100]	; (8001f9c <HAL_ADC_ConfigChannel+0x238>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d123      	bne.n	8001f82 <HAL_ADC_ConfigChannel+0x21e>
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	2b10      	cmp	r3, #16
 8001f40:	d003      	beq.n	8001f4a <HAL_ADC_ConfigChannel+0x1e6>
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	2b11      	cmp	r3, #17
 8001f48:	d11b      	bne.n	8001f82 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	2b10      	cmp	r3, #16
 8001f5c:	d111      	bne.n	8001f82 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001f5e:	4b10      	ldr	r3, [pc, #64]	; (8001fa0 <HAL_ADC_ConfigChannel+0x23c>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a10      	ldr	r2, [pc, #64]	; (8001fa4 <HAL_ADC_ConfigChannel+0x240>)
 8001f64:	fba2 2303 	umull	r2, r3, r2, r3
 8001f68:	0c9a      	lsrs	r2, r3, #18
 8001f6a:	4613      	mov	r3, r2
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	4413      	add	r3, r2
 8001f70:	005b      	lsls	r3, r3, #1
 8001f72:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001f74:	e002      	b.n	8001f7c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	3b01      	subs	r3, #1
 8001f7a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d1f9      	bne.n	8001f76 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2200      	movs	r2, #0
 8001f86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001f8a:	2300      	movs	r3, #0
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3714      	adds	r7, #20
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr
 8001f98:	40012300 	.word	0x40012300
 8001f9c:	40012000 	.word	0x40012000
 8001fa0:	20000000 	.word	0x20000000
 8001fa4:	431bde83 	.word	0x431bde83

08001fa8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b085      	sub	sp, #20
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001fb0:	4b79      	ldr	r3, [pc, #484]	; (8002198 <ADC_Init+0x1f0>)
 8001fb2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	685a      	ldr	r2, [r3, #4]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	431a      	orrs	r2, r3
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	685a      	ldr	r2, [r3, #4]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001fdc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	6859      	ldr	r1, [r3, #4]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	691b      	ldr	r3, [r3, #16]
 8001fe8:	021a      	lsls	r2, r3, #8
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	430a      	orrs	r2, r1
 8001ff0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	685a      	ldr	r2, [r3, #4]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002000:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	6859      	ldr	r1, [r3, #4]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	689a      	ldr	r2, [r3, #8]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	430a      	orrs	r2, r1
 8002012:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	689a      	ldr	r2, [r3, #8]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002022:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	6899      	ldr	r1, [r3, #8]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	68da      	ldr	r2, [r3, #12]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	430a      	orrs	r2, r1
 8002034:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800203a:	4a58      	ldr	r2, [pc, #352]	; (800219c <ADC_Init+0x1f4>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d022      	beq.n	8002086 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	689a      	ldr	r2, [r3, #8]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800204e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	6899      	ldr	r1, [r3, #8]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	430a      	orrs	r2, r1
 8002060:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	689a      	ldr	r2, [r3, #8]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002070:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	6899      	ldr	r1, [r3, #8]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	430a      	orrs	r2, r1
 8002082:	609a      	str	r2, [r3, #8]
 8002084:	e00f      	b.n	80020a6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	689a      	ldr	r2, [r3, #8]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002094:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	689a      	ldr	r2, [r3, #8]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80020a4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	689a      	ldr	r2, [r3, #8]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f022 0202 	bic.w	r2, r2, #2
 80020b4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	6899      	ldr	r1, [r3, #8]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	7e1b      	ldrb	r3, [r3, #24]
 80020c0:	005a      	lsls	r2, r3, #1
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	430a      	orrs	r2, r1
 80020c8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d01b      	beq.n	800210c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	685a      	ldr	r2, [r3, #4]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80020e2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	685a      	ldr	r2, [r3, #4]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80020f2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	6859      	ldr	r1, [r3, #4]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020fe:	3b01      	subs	r3, #1
 8002100:	035a      	lsls	r2, r3, #13
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	430a      	orrs	r2, r1
 8002108:	605a      	str	r2, [r3, #4]
 800210a:	e007      	b.n	800211c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	685a      	ldr	r2, [r3, #4]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800211a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800212a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	69db      	ldr	r3, [r3, #28]
 8002136:	3b01      	subs	r3, #1
 8002138:	051a      	lsls	r2, r3, #20
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	430a      	orrs	r2, r1
 8002140:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	689a      	ldr	r2, [r3, #8]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002150:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	6899      	ldr	r1, [r3, #8]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800215e:	025a      	lsls	r2, r3, #9
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	430a      	orrs	r2, r1
 8002166:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	689a      	ldr	r2, [r3, #8]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002176:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	6899      	ldr	r1, [r3, #8]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	695b      	ldr	r3, [r3, #20]
 8002182:	029a      	lsls	r2, r3, #10
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	430a      	orrs	r2, r1
 800218a:	609a      	str	r2, [r3, #8]
}
 800218c:	bf00      	nop
 800218e:	3714      	adds	r7, #20
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr
 8002198:	40012300 	.word	0x40012300
 800219c:	0f000001 	.word	0x0f000001

080021a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b085      	sub	sp, #20
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	f003 0307 	and.w	r3, r3, #7
 80021ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021b0:	4b0c      	ldr	r3, [pc, #48]	; (80021e4 <__NVIC_SetPriorityGrouping+0x44>)
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021b6:	68ba      	ldr	r2, [r7, #8]
 80021b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021bc:	4013      	ands	r3, r2
 80021be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021d2:	4a04      	ldr	r2, [pc, #16]	; (80021e4 <__NVIC_SetPriorityGrouping+0x44>)
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	60d3      	str	r3, [r2, #12]
}
 80021d8:	bf00      	nop
 80021da:	3714      	adds	r7, #20
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr
 80021e4:	e000ed00 	.word	0xe000ed00

080021e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021e8:	b480      	push	{r7}
 80021ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021ec:	4b04      	ldr	r3, [pc, #16]	; (8002200 <__NVIC_GetPriorityGrouping+0x18>)
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	0a1b      	lsrs	r3, r3, #8
 80021f2:	f003 0307 	and.w	r3, r3, #7
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr
 8002200:	e000ed00 	.word	0xe000ed00

08002204 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	4603      	mov	r3, r0
 800220c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800220e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002212:	2b00      	cmp	r3, #0
 8002214:	db0b      	blt.n	800222e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002216:	79fb      	ldrb	r3, [r7, #7]
 8002218:	f003 021f 	and.w	r2, r3, #31
 800221c:	4907      	ldr	r1, [pc, #28]	; (800223c <__NVIC_EnableIRQ+0x38>)
 800221e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002222:	095b      	lsrs	r3, r3, #5
 8002224:	2001      	movs	r0, #1
 8002226:	fa00 f202 	lsl.w	r2, r0, r2
 800222a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800222e:	bf00      	nop
 8002230:	370c      	adds	r7, #12
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop
 800223c:	e000e100 	.word	0xe000e100

08002240 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002240:	b480      	push	{r7}
 8002242:	b083      	sub	sp, #12
 8002244:	af00      	add	r7, sp, #0
 8002246:	4603      	mov	r3, r0
 8002248:	6039      	str	r1, [r7, #0]
 800224a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800224c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002250:	2b00      	cmp	r3, #0
 8002252:	db0a      	blt.n	800226a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	b2da      	uxtb	r2, r3
 8002258:	490c      	ldr	r1, [pc, #48]	; (800228c <__NVIC_SetPriority+0x4c>)
 800225a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800225e:	0112      	lsls	r2, r2, #4
 8002260:	b2d2      	uxtb	r2, r2
 8002262:	440b      	add	r3, r1
 8002264:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002268:	e00a      	b.n	8002280 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	b2da      	uxtb	r2, r3
 800226e:	4908      	ldr	r1, [pc, #32]	; (8002290 <__NVIC_SetPriority+0x50>)
 8002270:	79fb      	ldrb	r3, [r7, #7]
 8002272:	f003 030f 	and.w	r3, r3, #15
 8002276:	3b04      	subs	r3, #4
 8002278:	0112      	lsls	r2, r2, #4
 800227a:	b2d2      	uxtb	r2, r2
 800227c:	440b      	add	r3, r1
 800227e:	761a      	strb	r2, [r3, #24]
}
 8002280:	bf00      	nop
 8002282:	370c      	adds	r7, #12
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr
 800228c:	e000e100 	.word	0xe000e100
 8002290:	e000ed00 	.word	0xe000ed00

08002294 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002294:	b480      	push	{r7}
 8002296:	b089      	sub	sp, #36	; 0x24
 8002298:	af00      	add	r7, sp, #0
 800229a:	60f8      	str	r0, [r7, #12]
 800229c:	60b9      	str	r1, [r7, #8]
 800229e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	f003 0307 	and.w	r3, r3, #7
 80022a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022a8:	69fb      	ldr	r3, [r7, #28]
 80022aa:	f1c3 0307 	rsb	r3, r3, #7
 80022ae:	2b04      	cmp	r3, #4
 80022b0:	bf28      	it	cs
 80022b2:	2304      	movcs	r3, #4
 80022b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	3304      	adds	r3, #4
 80022ba:	2b06      	cmp	r3, #6
 80022bc:	d902      	bls.n	80022c4 <NVIC_EncodePriority+0x30>
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	3b03      	subs	r3, #3
 80022c2:	e000      	b.n	80022c6 <NVIC_EncodePriority+0x32>
 80022c4:	2300      	movs	r3, #0
 80022c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022c8:	f04f 32ff 	mov.w	r2, #4294967295
 80022cc:	69bb      	ldr	r3, [r7, #24]
 80022ce:	fa02 f303 	lsl.w	r3, r2, r3
 80022d2:	43da      	mvns	r2, r3
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	401a      	ands	r2, r3
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022dc:	f04f 31ff 	mov.w	r1, #4294967295
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	fa01 f303 	lsl.w	r3, r1, r3
 80022e6:	43d9      	mvns	r1, r3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022ec:	4313      	orrs	r3, r2
         );
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3724      	adds	r7, #36	; 0x24
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr
	...

080022fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b082      	sub	sp, #8
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	3b01      	subs	r3, #1
 8002308:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800230c:	d301      	bcc.n	8002312 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800230e:	2301      	movs	r3, #1
 8002310:	e00f      	b.n	8002332 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002312:	4a0a      	ldr	r2, [pc, #40]	; (800233c <SysTick_Config+0x40>)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	3b01      	subs	r3, #1
 8002318:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800231a:	210f      	movs	r1, #15
 800231c:	f04f 30ff 	mov.w	r0, #4294967295
 8002320:	f7ff ff8e 	bl	8002240 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002324:	4b05      	ldr	r3, [pc, #20]	; (800233c <SysTick_Config+0x40>)
 8002326:	2200      	movs	r2, #0
 8002328:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800232a:	4b04      	ldr	r3, [pc, #16]	; (800233c <SysTick_Config+0x40>)
 800232c:	2207      	movs	r2, #7
 800232e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002330:	2300      	movs	r3, #0
}
 8002332:	4618      	mov	r0, r3
 8002334:	3708      	adds	r7, #8
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	e000e010 	.word	0xe000e010

08002340 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002348:	6878      	ldr	r0, [r7, #4]
 800234a:	f7ff ff29 	bl	80021a0 <__NVIC_SetPriorityGrouping>
}
 800234e:	bf00      	nop
 8002350:	3708      	adds	r7, #8
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}

08002356 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002356:	b580      	push	{r7, lr}
 8002358:	b086      	sub	sp, #24
 800235a:	af00      	add	r7, sp, #0
 800235c:	4603      	mov	r3, r0
 800235e:	60b9      	str	r1, [r7, #8]
 8002360:	607a      	str	r2, [r7, #4]
 8002362:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002364:	2300      	movs	r3, #0
 8002366:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002368:	f7ff ff3e 	bl	80021e8 <__NVIC_GetPriorityGrouping>
 800236c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	68b9      	ldr	r1, [r7, #8]
 8002372:	6978      	ldr	r0, [r7, #20]
 8002374:	f7ff ff8e 	bl	8002294 <NVIC_EncodePriority>
 8002378:	4602      	mov	r2, r0
 800237a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800237e:	4611      	mov	r1, r2
 8002380:	4618      	mov	r0, r3
 8002382:	f7ff ff5d 	bl	8002240 <__NVIC_SetPriority>
}
 8002386:	bf00      	nop
 8002388:	3718      	adds	r7, #24
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}

0800238e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800238e:	b580      	push	{r7, lr}
 8002390:	b082      	sub	sp, #8
 8002392:	af00      	add	r7, sp, #0
 8002394:	4603      	mov	r3, r0
 8002396:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002398:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800239c:	4618      	mov	r0, r3
 800239e:	f7ff ff31 	bl	8002204 <__NVIC_EnableIRQ>
}
 80023a2:	bf00      	nop
 80023a4:	3708      	adds	r7, #8
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}

080023aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023aa:	b580      	push	{r7, lr}
 80023ac:	b082      	sub	sp, #8
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	f7ff ffa2 	bl	80022fc <SysTick_Config>
 80023b8:	4603      	mov	r3, r0
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3708      	adds	r7, #8
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
	...

080023c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b089      	sub	sp, #36	; 0x24
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
 80023cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80023ce:	2300      	movs	r3, #0
 80023d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80023d2:	2300      	movs	r3, #0
 80023d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80023d6:	2300      	movs	r3, #0
 80023d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023da:	2300      	movs	r3, #0
 80023dc:	61fb      	str	r3, [r7, #28]
 80023de:	e159      	b.n	8002694 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80023e0:	2201      	movs	r2, #1
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	fa02 f303 	lsl.w	r3, r2, r3
 80023e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	697a      	ldr	r2, [r7, #20]
 80023f0:	4013      	ands	r3, r2
 80023f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80023f4:	693a      	ldr	r2, [r7, #16]
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	429a      	cmp	r2, r3
 80023fa:	f040 8148 	bne.w	800268e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	f003 0303 	and.w	r3, r3, #3
 8002406:	2b01      	cmp	r3, #1
 8002408:	d005      	beq.n	8002416 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002412:	2b02      	cmp	r3, #2
 8002414:	d130      	bne.n	8002478 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800241c:	69fb      	ldr	r3, [r7, #28]
 800241e:	005b      	lsls	r3, r3, #1
 8002420:	2203      	movs	r2, #3
 8002422:	fa02 f303 	lsl.w	r3, r2, r3
 8002426:	43db      	mvns	r3, r3
 8002428:	69ba      	ldr	r2, [r7, #24]
 800242a:	4013      	ands	r3, r2
 800242c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	68da      	ldr	r2, [r3, #12]
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	005b      	lsls	r3, r3, #1
 8002436:	fa02 f303 	lsl.w	r3, r2, r3
 800243a:	69ba      	ldr	r2, [r7, #24]
 800243c:	4313      	orrs	r3, r2
 800243e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	69ba      	ldr	r2, [r7, #24]
 8002444:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800244c:	2201      	movs	r2, #1
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	fa02 f303 	lsl.w	r3, r2, r3
 8002454:	43db      	mvns	r3, r3
 8002456:	69ba      	ldr	r2, [r7, #24]
 8002458:	4013      	ands	r3, r2
 800245a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	091b      	lsrs	r3, r3, #4
 8002462:	f003 0201 	and.w	r2, r3, #1
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	fa02 f303 	lsl.w	r3, r2, r3
 800246c:	69ba      	ldr	r2, [r7, #24]
 800246e:	4313      	orrs	r3, r2
 8002470:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	69ba      	ldr	r2, [r7, #24]
 8002476:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	f003 0303 	and.w	r3, r3, #3
 8002480:	2b03      	cmp	r3, #3
 8002482:	d017      	beq.n	80024b4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	005b      	lsls	r3, r3, #1
 800248e:	2203      	movs	r2, #3
 8002490:	fa02 f303 	lsl.w	r3, r2, r3
 8002494:	43db      	mvns	r3, r3
 8002496:	69ba      	ldr	r2, [r7, #24]
 8002498:	4013      	ands	r3, r2
 800249a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	689a      	ldr	r2, [r3, #8]
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	005b      	lsls	r3, r3, #1
 80024a4:	fa02 f303 	lsl.w	r3, r2, r3
 80024a8:	69ba      	ldr	r2, [r7, #24]
 80024aa:	4313      	orrs	r3, r2
 80024ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	69ba      	ldr	r2, [r7, #24]
 80024b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f003 0303 	and.w	r3, r3, #3
 80024bc:	2b02      	cmp	r3, #2
 80024be:	d123      	bne.n	8002508 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	08da      	lsrs	r2, r3, #3
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	3208      	adds	r2, #8
 80024c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	f003 0307 	and.w	r3, r3, #7
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	220f      	movs	r2, #15
 80024d8:	fa02 f303 	lsl.w	r3, r2, r3
 80024dc:	43db      	mvns	r3, r3
 80024de:	69ba      	ldr	r2, [r7, #24]
 80024e0:	4013      	ands	r3, r2
 80024e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	691a      	ldr	r2, [r3, #16]
 80024e8:	69fb      	ldr	r3, [r7, #28]
 80024ea:	f003 0307 	and.w	r3, r3, #7
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	fa02 f303 	lsl.w	r3, r2, r3
 80024f4:	69ba      	ldr	r2, [r7, #24]
 80024f6:	4313      	orrs	r3, r2
 80024f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	08da      	lsrs	r2, r3, #3
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	3208      	adds	r2, #8
 8002502:	69b9      	ldr	r1, [r7, #24]
 8002504:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	005b      	lsls	r3, r3, #1
 8002512:	2203      	movs	r2, #3
 8002514:	fa02 f303 	lsl.w	r3, r2, r3
 8002518:	43db      	mvns	r3, r3
 800251a:	69ba      	ldr	r2, [r7, #24]
 800251c:	4013      	ands	r3, r2
 800251e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	f003 0203 	and.w	r2, r3, #3
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	005b      	lsls	r3, r3, #1
 800252c:	fa02 f303 	lsl.w	r3, r2, r3
 8002530:	69ba      	ldr	r2, [r7, #24]
 8002532:	4313      	orrs	r3, r2
 8002534:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	69ba      	ldr	r2, [r7, #24]
 800253a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002544:	2b00      	cmp	r3, #0
 8002546:	f000 80a2 	beq.w	800268e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800254a:	2300      	movs	r3, #0
 800254c:	60fb      	str	r3, [r7, #12]
 800254e:	4b57      	ldr	r3, [pc, #348]	; (80026ac <HAL_GPIO_Init+0x2e8>)
 8002550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002552:	4a56      	ldr	r2, [pc, #344]	; (80026ac <HAL_GPIO_Init+0x2e8>)
 8002554:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002558:	6453      	str	r3, [r2, #68]	; 0x44
 800255a:	4b54      	ldr	r3, [pc, #336]	; (80026ac <HAL_GPIO_Init+0x2e8>)
 800255c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800255e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002562:	60fb      	str	r3, [r7, #12]
 8002564:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002566:	4a52      	ldr	r2, [pc, #328]	; (80026b0 <HAL_GPIO_Init+0x2ec>)
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	089b      	lsrs	r3, r3, #2
 800256c:	3302      	adds	r3, #2
 800256e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002572:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	f003 0303 	and.w	r3, r3, #3
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	220f      	movs	r2, #15
 800257e:	fa02 f303 	lsl.w	r3, r2, r3
 8002582:	43db      	mvns	r3, r3
 8002584:	69ba      	ldr	r2, [r7, #24]
 8002586:	4013      	ands	r3, r2
 8002588:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	4a49      	ldr	r2, [pc, #292]	; (80026b4 <HAL_GPIO_Init+0x2f0>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d019      	beq.n	80025c6 <HAL_GPIO_Init+0x202>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	4a48      	ldr	r2, [pc, #288]	; (80026b8 <HAL_GPIO_Init+0x2f4>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d013      	beq.n	80025c2 <HAL_GPIO_Init+0x1fe>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4a47      	ldr	r2, [pc, #284]	; (80026bc <HAL_GPIO_Init+0x2f8>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d00d      	beq.n	80025be <HAL_GPIO_Init+0x1fa>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	4a46      	ldr	r2, [pc, #280]	; (80026c0 <HAL_GPIO_Init+0x2fc>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d007      	beq.n	80025ba <HAL_GPIO_Init+0x1f6>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	4a45      	ldr	r2, [pc, #276]	; (80026c4 <HAL_GPIO_Init+0x300>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d101      	bne.n	80025b6 <HAL_GPIO_Init+0x1f2>
 80025b2:	2304      	movs	r3, #4
 80025b4:	e008      	b.n	80025c8 <HAL_GPIO_Init+0x204>
 80025b6:	2307      	movs	r3, #7
 80025b8:	e006      	b.n	80025c8 <HAL_GPIO_Init+0x204>
 80025ba:	2303      	movs	r3, #3
 80025bc:	e004      	b.n	80025c8 <HAL_GPIO_Init+0x204>
 80025be:	2302      	movs	r3, #2
 80025c0:	e002      	b.n	80025c8 <HAL_GPIO_Init+0x204>
 80025c2:	2301      	movs	r3, #1
 80025c4:	e000      	b.n	80025c8 <HAL_GPIO_Init+0x204>
 80025c6:	2300      	movs	r3, #0
 80025c8:	69fa      	ldr	r2, [r7, #28]
 80025ca:	f002 0203 	and.w	r2, r2, #3
 80025ce:	0092      	lsls	r2, r2, #2
 80025d0:	4093      	lsls	r3, r2
 80025d2:	69ba      	ldr	r2, [r7, #24]
 80025d4:	4313      	orrs	r3, r2
 80025d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025d8:	4935      	ldr	r1, [pc, #212]	; (80026b0 <HAL_GPIO_Init+0x2ec>)
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	089b      	lsrs	r3, r3, #2
 80025de:	3302      	adds	r3, #2
 80025e0:	69ba      	ldr	r2, [r7, #24]
 80025e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025e6:	4b38      	ldr	r3, [pc, #224]	; (80026c8 <HAL_GPIO_Init+0x304>)
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	43db      	mvns	r3, r3
 80025f0:	69ba      	ldr	r2, [r7, #24]
 80025f2:	4013      	ands	r3, r2
 80025f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d003      	beq.n	800260a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002602:	69ba      	ldr	r2, [r7, #24]
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	4313      	orrs	r3, r2
 8002608:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800260a:	4a2f      	ldr	r2, [pc, #188]	; (80026c8 <HAL_GPIO_Init+0x304>)
 800260c:	69bb      	ldr	r3, [r7, #24]
 800260e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002610:	4b2d      	ldr	r3, [pc, #180]	; (80026c8 <HAL_GPIO_Init+0x304>)
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	43db      	mvns	r3, r3
 800261a:	69ba      	ldr	r2, [r7, #24]
 800261c:	4013      	ands	r3, r2
 800261e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002628:	2b00      	cmp	r3, #0
 800262a:	d003      	beq.n	8002634 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800262c:	69ba      	ldr	r2, [r7, #24]
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	4313      	orrs	r3, r2
 8002632:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002634:	4a24      	ldr	r2, [pc, #144]	; (80026c8 <HAL_GPIO_Init+0x304>)
 8002636:	69bb      	ldr	r3, [r7, #24]
 8002638:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800263a:	4b23      	ldr	r3, [pc, #140]	; (80026c8 <HAL_GPIO_Init+0x304>)
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	43db      	mvns	r3, r3
 8002644:	69ba      	ldr	r2, [r7, #24]
 8002646:	4013      	ands	r3, r2
 8002648:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d003      	beq.n	800265e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002656:	69ba      	ldr	r2, [r7, #24]
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	4313      	orrs	r3, r2
 800265c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800265e:	4a1a      	ldr	r2, [pc, #104]	; (80026c8 <HAL_GPIO_Init+0x304>)
 8002660:	69bb      	ldr	r3, [r7, #24]
 8002662:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002664:	4b18      	ldr	r3, [pc, #96]	; (80026c8 <HAL_GPIO_Init+0x304>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	43db      	mvns	r3, r3
 800266e:	69ba      	ldr	r2, [r7, #24]
 8002670:	4013      	ands	r3, r2
 8002672:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800267c:	2b00      	cmp	r3, #0
 800267e:	d003      	beq.n	8002688 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002680:	69ba      	ldr	r2, [r7, #24]
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	4313      	orrs	r3, r2
 8002686:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002688:	4a0f      	ldr	r2, [pc, #60]	; (80026c8 <HAL_GPIO_Init+0x304>)
 800268a:	69bb      	ldr	r3, [r7, #24]
 800268c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	3301      	adds	r3, #1
 8002692:	61fb      	str	r3, [r7, #28]
 8002694:	69fb      	ldr	r3, [r7, #28]
 8002696:	2b0f      	cmp	r3, #15
 8002698:	f67f aea2 	bls.w	80023e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800269c:	bf00      	nop
 800269e:	bf00      	nop
 80026a0:	3724      	adds	r7, #36	; 0x24
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr
 80026aa:	bf00      	nop
 80026ac:	40023800 	.word	0x40023800
 80026b0:	40013800 	.word	0x40013800
 80026b4:	40020000 	.word	0x40020000
 80026b8:	40020400 	.word	0x40020400
 80026bc:	40020800 	.word	0x40020800
 80026c0:	40020c00 	.word	0x40020c00
 80026c4:	40021000 	.word	0x40021000
 80026c8:	40013c00 	.word	0x40013c00

080026cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b083      	sub	sp, #12
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
 80026d4:	460b      	mov	r3, r1
 80026d6:	807b      	strh	r3, [r7, #2]
 80026d8:	4613      	mov	r3, r2
 80026da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80026dc:	787b      	ldrb	r3, [r7, #1]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d003      	beq.n	80026ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026e2:	887a      	ldrh	r2, [r7, #2]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80026e8:	e003      	b.n	80026f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80026ea:	887b      	ldrh	r3, [r7, #2]
 80026ec:	041a      	lsls	r2, r3, #16
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	619a      	str	r2, [r3, #24]
}
 80026f2:	bf00      	nop
 80026f4:	370c      	adds	r7, #12
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr
	...

08002700 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b082      	sub	sp, #8
 8002704:	af00      	add	r7, sp, #0
 8002706:	4603      	mov	r3, r0
 8002708:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800270a:	4b08      	ldr	r3, [pc, #32]	; (800272c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800270c:	695a      	ldr	r2, [r3, #20]
 800270e:	88fb      	ldrh	r3, [r7, #6]
 8002710:	4013      	ands	r3, r2
 8002712:	2b00      	cmp	r3, #0
 8002714:	d006      	beq.n	8002724 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002716:	4a05      	ldr	r2, [pc, #20]	; (800272c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002718:	88fb      	ldrh	r3, [r7, #6]
 800271a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800271c:	88fb      	ldrh	r3, [r7, #6]
 800271e:	4618      	mov	r0, r3
 8002720:	f000 f806 	bl	8002730 <HAL_GPIO_EXTI_Callback>
  }
}
 8002724:	bf00      	nop
 8002726:	3708      	adds	r7, #8
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}
 800272c:	40013c00 	.word	0x40013c00

08002730 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002730:	b480      	push	{r7}
 8002732:	b083      	sub	sp, #12
 8002734:	af00      	add	r7, sp, #0
 8002736:	4603      	mov	r3, r0
 8002738:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800273a:	bf00      	nop
 800273c:	370c      	adds	r7, #12
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr
	...

08002748 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b084      	sub	sp, #16
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d101      	bne.n	800275a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e12b      	b.n	80029b2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002760:	b2db      	uxtb	r3, r3
 8002762:	2b00      	cmp	r3, #0
 8002764:	d106      	bne.n	8002774 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2200      	movs	r2, #0
 800276a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800276e:	6878      	ldr	r0, [r7, #4]
 8002770:	f7fe fe7c 	bl	800146c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2224      	movs	r2, #36	; 0x24
 8002778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f022 0201 	bic.w	r2, r2, #1
 800278a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800279a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80027aa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80027ac:	f000 fd80 	bl	80032b0 <HAL_RCC_GetPCLK1Freq>
 80027b0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	4a81      	ldr	r2, [pc, #516]	; (80029bc <HAL_I2C_Init+0x274>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d807      	bhi.n	80027cc <HAL_I2C_Init+0x84>
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	4a80      	ldr	r2, [pc, #512]	; (80029c0 <HAL_I2C_Init+0x278>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	bf94      	ite	ls
 80027c4:	2301      	movls	r3, #1
 80027c6:	2300      	movhi	r3, #0
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	e006      	b.n	80027da <HAL_I2C_Init+0x92>
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	4a7d      	ldr	r2, [pc, #500]	; (80029c4 <HAL_I2C_Init+0x27c>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	bf94      	ite	ls
 80027d4:	2301      	movls	r3, #1
 80027d6:	2300      	movhi	r3, #0
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d001      	beq.n	80027e2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e0e7      	b.n	80029b2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	4a78      	ldr	r2, [pc, #480]	; (80029c8 <HAL_I2C_Init+0x280>)
 80027e6:	fba2 2303 	umull	r2, r3, r2, r3
 80027ea:	0c9b      	lsrs	r3, r3, #18
 80027ec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	68ba      	ldr	r2, [r7, #8]
 80027fe:	430a      	orrs	r2, r1
 8002800:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	6a1b      	ldr	r3, [r3, #32]
 8002808:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	4a6a      	ldr	r2, [pc, #424]	; (80029bc <HAL_I2C_Init+0x274>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d802      	bhi.n	800281c <HAL_I2C_Init+0xd4>
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	3301      	adds	r3, #1
 800281a:	e009      	b.n	8002830 <HAL_I2C_Init+0xe8>
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002822:	fb02 f303 	mul.w	r3, r2, r3
 8002826:	4a69      	ldr	r2, [pc, #420]	; (80029cc <HAL_I2C_Init+0x284>)
 8002828:	fba2 2303 	umull	r2, r3, r2, r3
 800282c:	099b      	lsrs	r3, r3, #6
 800282e:	3301      	adds	r3, #1
 8002830:	687a      	ldr	r2, [r7, #4]
 8002832:	6812      	ldr	r2, [r2, #0]
 8002834:	430b      	orrs	r3, r1
 8002836:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	69db      	ldr	r3, [r3, #28]
 800283e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002842:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	495c      	ldr	r1, [pc, #368]	; (80029bc <HAL_I2C_Init+0x274>)
 800284c:	428b      	cmp	r3, r1
 800284e:	d819      	bhi.n	8002884 <HAL_I2C_Init+0x13c>
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	1e59      	subs	r1, r3, #1
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	005b      	lsls	r3, r3, #1
 800285a:	fbb1 f3f3 	udiv	r3, r1, r3
 800285e:	1c59      	adds	r1, r3, #1
 8002860:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002864:	400b      	ands	r3, r1
 8002866:	2b00      	cmp	r3, #0
 8002868:	d00a      	beq.n	8002880 <HAL_I2C_Init+0x138>
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	1e59      	subs	r1, r3, #1
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	005b      	lsls	r3, r3, #1
 8002874:	fbb1 f3f3 	udiv	r3, r1, r3
 8002878:	3301      	adds	r3, #1
 800287a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800287e:	e051      	b.n	8002924 <HAL_I2C_Init+0x1dc>
 8002880:	2304      	movs	r3, #4
 8002882:	e04f      	b.n	8002924 <HAL_I2C_Init+0x1dc>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d111      	bne.n	80028b0 <HAL_I2C_Init+0x168>
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	1e58      	subs	r0, r3, #1
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6859      	ldr	r1, [r3, #4]
 8002894:	460b      	mov	r3, r1
 8002896:	005b      	lsls	r3, r3, #1
 8002898:	440b      	add	r3, r1
 800289a:	fbb0 f3f3 	udiv	r3, r0, r3
 800289e:	3301      	adds	r3, #1
 80028a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	bf0c      	ite	eq
 80028a8:	2301      	moveq	r3, #1
 80028aa:	2300      	movne	r3, #0
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	e012      	b.n	80028d6 <HAL_I2C_Init+0x18e>
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	1e58      	subs	r0, r3, #1
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6859      	ldr	r1, [r3, #4]
 80028b8:	460b      	mov	r3, r1
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	440b      	add	r3, r1
 80028be:	0099      	lsls	r1, r3, #2
 80028c0:	440b      	add	r3, r1
 80028c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80028c6:	3301      	adds	r3, #1
 80028c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	bf0c      	ite	eq
 80028d0:	2301      	moveq	r3, #1
 80028d2:	2300      	movne	r3, #0
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d001      	beq.n	80028de <HAL_I2C_Init+0x196>
 80028da:	2301      	movs	r3, #1
 80028dc:	e022      	b.n	8002924 <HAL_I2C_Init+0x1dc>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d10e      	bne.n	8002904 <HAL_I2C_Init+0x1bc>
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	1e58      	subs	r0, r3, #1
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6859      	ldr	r1, [r3, #4]
 80028ee:	460b      	mov	r3, r1
 80028f0:	005b      	lsls	r3, r3, #1
 80028f2:	440b      	add	r3, r1
 80028f4:	fbb0 f3f3 	udiv	r3, r0, r3
 80028f8:	3301      	adds	r3, #1
 80028fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002902:	e00f      	b.n	8002924 <HAL_I2C_Init+0x1dc>
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	1e58      	subs	r0, r3, #1
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6859      	ldr	r1, [r3, #4]
 800290c:	460b      	mov	r3, r1
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	440b      	add	r3, r1
 8002912:	0099      	lsls	r1, r3, #2
 8002914:	440b      	add	r3, r1
 8002916:	fbb0 f3f3 	udiv	r3, r0, r3
 800291a:	3301      	adds	r3, #1
 800291c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002920:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002924:	6879      	ldr	r1, [r7, #4]
 8002926:	6809      	ldr	r1, [r1, #0]
 8002928:	4313      	orrs	r3, r2
 800292a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	69da      	ldr	r2, [r3, #28]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6a1b      	ldr	r3, [r3, #32]
 800293e:	431a      	orrs	r2, r3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	430a      	orrs	r2, r1
 8002946:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002952:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002956:	687a      	ldr	r2, [r7, #4]
 8002958:	6911      	ldr	r1, [r2, #16]
 800295a:	687a      	ldr	r2, [r7, #4]
 800295c:	68d2      	ldr	r2, [r2, #12]
 800295e:	4311      	orrs	r1, r2
 8002960:	687a      	ldr	r2, [r7, #4]
 8002962:	6812      	ldr	r2, [r2, #0]
 8002964:	430b      	orrs	r3, r1
 8002966:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	68db      	ldr	r3, [r3, #12]
 800296e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	695a      	ldr	r2, [r3, #20]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	699b      	ldr	r3, [r3, #24]
 800297a:	431a      	orrs	r2, r3
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	430a      	orrs	r2, r1
 8002982:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f042 0201 	orr.w	r2, r2, #1
 8002992:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2200      	movs	r2, #0
 8002998:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2220      	movs	r2, #32
 800299e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2200      	movs	r2, #0
 80029a6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2200      	movs	r2, #0
 80029ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80029b0:	2300      	movs	r3, #0
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3710      	adds	r7, #16
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop
 80029bc:	000186a0 	.word	0x000186a0
 80029c0:	001e847f 	.word	0x001e847f
 80029c4:	003d08ff 	.word	0x003d08ff
 80029c8:	431bde83 	.word	0x431bde83
 80029cc:	10624dd3 	.word	0x10624dd3

080029d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b086      	sub	sp, #24
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d101      	bne.n	80029e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e267      	b.n	8002eb2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 0301 	and.w	r3, r3, #1
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d075      	beq.n	8002ada <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80029ee:	4b88      	ldr	r3, [pc, #544]	; (8002c10 <HAL_RCC_OscConfig+0x240>)
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	f003 030c 	and.w	r3, r3, #12
 80029f6:	2b04      	cmp	r3, #4
 80029f8:	d00c      	beq.n	8002a14 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029fa:	4b85      	ldr	r3, [pc, #532]	; (8002c10 <HAL_RCC_OscConfig+0x240>)
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002a02:	2b08      	cmp	r3, #8
 8002a04:	d112      	bne.n	8002a2c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a06:	4b82      	ldr	r3, [pc, #520]	; (8002c10 <HAL_RCC_OscConfig+0x240>)
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a12:	d10b      	bne.n	8002a2c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a14:	4b7e      	ldr	r3, [pc, #504]	; (8002c10 <HAL_RCC_OscConfig+0x240>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d05b      	beq.n	8002ad8 <HAL_RCC_OscConfig+0x108>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d157      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e242      	b.n	8002eb2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a34:	d106      	bne.n	8002a44 <HAL_RCC_OscConfig+0x74>
 8002a36:	4b76      	ldr	r3, [pc, #472]	; (8002c10 <HAL_RCC_OscConfig+0x240>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a75      	ldr	r2, [pc, #468]	; (8002c10 <HAL_RCC_OscConfig+0x240>)
 8002a3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a40:	6013      	str	r3, [r2, #0]
 8002a42:	e01d      	b.n	8002a80 <HAL_RCC_OscConfig+0xb0>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a4c:	d10c      	bne.n	8002a68 <HAL_RCC_OscConfig+0x98>
 8002a4e:	4b70      	ldr	r3, [pc, #448]	; (8002c10 <HAL_RCC_OscConfig+0x240>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a6f      	ldr	r2, [pc, #444]	; (8002c10 <HAL_RCC_OscConfig+0x240>)
 8002a54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a58:	6013      	str	r3, [r2, #0]
 8002a5a:	4b6d      	ldr	r3, [pc, #436]	; (8002c10 <HAL_RCC_OscConfig+0x240>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a6c      	ldr	r2, [pc, #432]	; (8002c10 <HAL_RCC_OscConfig+0x240>)
 8002a60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a64:	6013      	str	r3, [r2, #0]
 8002a66:	e00b      	b.n	8002a80 <HAL_RCC_OscConfig+0xb0>
 8002a68:	4b69      	ldr	r3, [pc, #420]	; (8002c10 <HAL_RCC_OscConfig+0x240>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a68      	ldr	r2, [pc, #416]	; (8002c10 <HAL_RCC_OscConfig+0x240>)
 8002a6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a72:	6013      	str	r3, [r2, #0]
 8002a74:	4b66      	ldr	r3, [pc, #408]	; (8002c10 <HAL_RCC_OscConfig+0x240>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a65      	ldr	r2, [pc, #404]	; (8002c10 <HAL_RCC_OscConfig+0x240>)
 8002a7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d013      	beq.n	8002ab0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a88:	f7ff f91c 	bl	8001cc4 <HAL_GetTick>
 8002a8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a8e:	e008      	b.n	8002aa2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a90:	f7ff f918 	bl	8001cc4 <HAL_GetTick>
 8002a94:	4602      	mov	r2, r0
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	2b64      	cmp	r3, #100	; 0x64
 8002a9c:	d901      	bls.n	8002aa2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	e207      	b.n	8002eb2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aa2:	4b5b      	ldr	r3, [pc, #364]	; (8002c10 <HAL_RCC_OscConfig+0x240>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d0f0      	beq.n	8002a90 <HAL_RCC_OscConfig+0xc0>
 8002aae:	e014      	b.n	8002ada <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ab0:	f7ff f908 	bl	8001cc4 <HAL_GetTick>
 8002ab4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ab6:	e008      	b.n	8002aca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ab8:	f7ff f904 	bl	8001cc4 <HAL_GetTick>
 8002abc:	4602      	mov	r2, r0
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	2b64      	cmp	r3, #100	; 0x64
 8002ac4:	d901      	bls.n	8002aca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	e1f3      	b.n	8002eb2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002aca:	4b51      	ldr	r3, [pc, #324]	; (8002c10 <HAL_RCC_OscConfig+0x240>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d1f0      	bne.n	8002ab8 <HAL_RCC_OscConfig+0xe8>
 8002ad6:	e000      	b.n	8002ada <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ad8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 0302 	and.w	r3, r3, #2
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d063      	beq.n	8002bae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ae6:	4b4a      	ldr	r3, [pc, #296]	; (8002c10 <HAL_RCC_OscConfig+0x240>)
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	f003 030c 	and.w	r3, r3, #12
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d00b      	beq.n	8002b0a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002af2:	4b47      	ldr	r3, [pc, #284]	; (8002c10 <HAL_RCC_OscConfig+0x240>)
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002afa:	2b08      	cmp	r3, #8
 8002afc:	d11c      	bne.n	8002b38 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002afe:	4b44      	ldr	r3, [pc, #272]	; (8002c10 <HAL_RCC_OscConfig+0x240>)
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d116      	bne.n	8002b38 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b0a:	4b41      	ldr	r3, [pc, #260]	; (8002c10 <HAL_RCC_OscConfig+0x240>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0302 	and.w	r3, r3, #2
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d005      	beq.n	8002b22 <HAL_RCC_OscConfig+0x152>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	68db      	ldr	r3, [r3, #12]
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d001      	beq.n	8002b22 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e1c7      	b.n	8002eb2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b22:	4b3b      	ldr	r3, [pc, #236]	; (8002c10 <HAL_RCC_OscConfig+0x240>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	691b      	ldr	r3, [r3, #16]
 8002b2e:	00db      	lsls	r3, r3, #3
 8002b30:	4937      	ldr	r1, [pc, #220]	; (8002c10 <HAL_RCC_OscConfig+0x240>)
 8002b32:	4313      	orrs	r3, r2
 8002b34:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b36:	e03a      	b.n	8002bae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	68db      	ldr	r3, [r3, #12]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d020      	beq.n	8002b82 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b40:	4b34      	ldr	r3, [pc, #208]	; (8002c14 <HAL_RCC_OscConfig+0x244>)
 8002b42:	2201      	movs	r2, #1
 8002b44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b46:	f7ff f8bd 	bl	8001cc4 <HAL_GetTick>
 8002b4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b4c:	e008      	b.n	8002b60 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b4e:	f7ff f8b9 	bl	8001cc4 <HAL_GetTick>
 8002b52:	4602      	mov	r2, r0
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	1ad3      	subs	r3, r2, r3
 8002b58:	2b02      	cmp	r3, #2
 8002b5a:	d901      	bls.n	8002b60 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002b5c:	2303      	movs	r3, #3
 8002b5e:	e1a8      	b.n	8002eb2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b60:	4b2b      	ldr	r3, [pc, #172]	; (8002c10 <HAL_RCC_OscConfig+0x240>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0302 	and.w	r3, r3, #2
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d0f0      	beq.n	8002b4e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b6c:	4b28      	ldr	r3, [pc, #160]	; (8002c10 <HAL_RCC_OscConfig+0x240>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	691b      	ldr	r3, [r3, #16]
 8002b78:	00db      	lsls	r3, r3, #3
 8002b7a:	4925      	ldr	r1, [pc, #148]	; (8002c10 <HAL_RCC_OscConfig+0x240>)
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	600b      	str	r3, [r1, #0]
 8002b80:	e015      	b.n	8002bae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b82:	4b24      	ldr	r3, [pc, #144]	; (8002c14 <HAL_RCC_OscConfig+0x244>)
 8002b84:	2200      	movs	r2, #0
 8002b86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b88:	f7ff f89c 	bl	8001cc4 <HAL_GetTick>
 8002b8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b8e:	e008      	b.n	8002ba2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b90:	f7ff f898 	bl	8001cc4 <HAL_GetTick>
 8002b94:	4602      	mov	r2, r0
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d901      	bls.n	8002ba2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	e187      	b.n	8002eb2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ba2:	4b1b      	ldr	r3, [pc, #108]	; (8002c10 <HAL_RCC_OscConfig+0x240>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 0302 	and.w	r3, r3, #2
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d1f0      	bne.n	8002b90 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 0308 	and.w	r3, r3, #8
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d036      	beq.n	8002c28 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	695b      	ldr	r3, [r3, #20]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d016      	beq.n	8002bf0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bc2:	4b15      	ldr	r3, [pc, #84]	; (8002c18 <HAL_RCC_OscConfig+0x248>)
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bc8:	f7ff f87c 	bl	8001cc4 <HAL_GetTick>
 8002bcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bce:	e008      	b.n	8002be2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bd0:	f7ff f878 	bl	8001cc4 <HAL_GetTick>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	2b02      	cmp	r3, #2
 8002bdc:	d901      	bls.n	8002be2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002bde:	2303      	movs	r3, #3
 8002be0:	e167      	b.n	8002eb2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002be2:	4b0b      	ldr	r3, [pc, #44]	; (8002c10 <HAL_RCC_OscConfig+0x240>)
 8002be4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002be6:	f003 0302 	and.w	r3, r3, #2
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d0f0      	beq.n	8002bd0 <HAL_RCC_OscConfig+0x200>
 8002bee:	e01b      	b.n	8002c28 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002bf0:	4b09      	ldr	r3, [pc, #36]	; (8002c18 <HAL_RCC_OscConfig+0x248>)
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bf6:	f7ff f865 	bl	8001cc4 <HAL_GetTick>
 8002bfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bfc:	e00e      	b.n	8002c1c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bfe:	f7ff f861 	bl	8001cc4 <HAL_GetTick>
 8002c02:	4602      	mov	r2, r0
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	1ad3      	subs	r3, r2, r3
 8002c08:	2b02      	cmp	r3, #2
 8002c0a:	d907      	bls.n	8002c1c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002c0c:	2303      	movs	r3, #3
 8002c0e:	e150      	b.n	8002eb2 <HAL_RCC_OscConfig+0x4e2>
 8002c10:	40023800 	.word	0x40023800
 8002c14:	42470000 	.word	0x42470000
 8002c18:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c1c:	4b88      	ldr	r3, [pc, #544]	; (8002e40 <HAL_RCC_OscConfig+0x470>)
 8002c1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c20:	f003 0302 	and.w	r3, r3, #2
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d1ea      	bne.n	8002bfe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 0304 	and.w	r3, r3, #4
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	f000 8097 	beq.w	8002d64 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c36:	2300      	movs	r3, #0
 8002c38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c3a:	4b81      	ldr	r3, [pc, #516]	; (8002e40 <HAL_RCC_OscConfig+0x470>)
 8002c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d10f      	bne.n	8002c66 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c46:	2300      	movs	r3, #0
 8002c48:	60bb      	str	r3, [r7, #8]
 8002c4a:	4b7d      	ldr	r3, [pc, #500]	; (8002e40 <HAL_RCC_OscConfig+0x470>)
 8002c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4e:	4a7c      	ldr	r2, [pc, #496]	; (8002e40 <HAL_RCC_OscConfig+0x470>)
 8002c50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c54:	6413      	str	r3, [r2, #64]	; 0x40
 8002c56:	4b7a      	ldr	r3, [pc, #488]	; (8002e40 <HAL_RCC_OscConfig+0x470>)
 8002c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c5e:	60bb      	str	r3, [r7, #8]
 8002c60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c62:	2301      	movs	r3, #1
 8002c64:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c66:	4b77      	ldr	r3, [pc, #476]	; (8002e44 <HAL_RCC_OscConfig+0x474>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d118      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c72:	4b74      	ldr	r3, [pc, #464]	; (8002e44 <HAL_RCC_OscConfig+0x474>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a73      	ldr	r2, [pc, #460]	; (8002e44 <HAL_RCC_OscConfig+0x474>)
 8002c78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c7e:	f7ff f821 	bl	8001cc4 <HAL_GetTick>
 8002c82:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c84:	e008      	b.n	8002c98 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c86:	f7ff f81d 	bl	8001cc4 <HAL_GetTick>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	1ad3      	subs	r3, r2, r3
 8002c90:	2b02      	cmp	r3, #2
 8002c92:	d901      	bls.n	8002c98 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002c94:	2303      	movs	r3, #3
 8002c96:	e10c      	b.n	8002eb2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c98:	4b6a      	ldr	r3, [pc, #424]	; (8002e44 <HAL_RCC_OscConfig+0x474>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d0f0      	beq.n	8002c86 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d106      	bne.n	8002cba <HAL_RCC_OscConfig+0x2ea>
 8002cac:	4b64      	ldr	r3, [pc, #400]	; (8002e40 <HAL_RCC_OscConfig+0x470>)
 8002cae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cb0:	4a63      	ldr	r2, [pc, #396]	; (8002e40 <HAL_RCC_OscConfig+0x470>)
 8002cb2:	f043 0301 	orr.w	r3, r3, #1
 8002cb6:	6713      	str	r3, [r2, #112]	; 0x70
 8002cb8:	e01c      	b.n	8002cf4 <HAL_RCC_OscConfig+0x324>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	2b05      	cmp	r3, #5
 8002cc0:	d10c      	bne.n	8002cdc <HAL_RCC_OscConfig+0x30c>
 8002cc2:	4b5f      	ldr	r3, [pc, #380]	; (8002e40 <HAL_RCC_OscConfig+0x470>)
 8002cc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cc6:	4a5e      	ldr	r2, [pc, #376]	; (8002e40 <HAL_RCC_OscConfig+0x470>)
 8002cc8:	f043 0304 	orr.w	r3, r3, #4
 8002ccc:	6713      	str	r3, [r2, #112]	; 0x70
 8002cce:	4b5c      	ldr	r3, [pc, #368]	; (8002e40 <HAL_RCC_OscConfig+0x470>)
 8002cd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cd2:	4a5b      	ldr	r2, [pc, #364]	; (8002e40 <HAL_RCC_OscConfig+0x470>)
 8002cd4:	f043 0301 	orr.w	r3, r3, #1
 8002cd8:	6713      	str	r3, [r2, #112]	; 0x70
 8002cda:	e00b      	b.n	8002cf4 <HAL_RCC_OscConfig+0x324>
 8002cdc:	4b58      	ldr	r3, [pc, #352]	; (8002e40 <HAL_RCC_OscConfig+0x470>)
 8002cde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ce0:	4a57      	ldr	r2, [pc, #348]	; (8002e40 <HAL_RCC_OscConfig+0x470>)
 8002ce2:	f023 0301 	bic.w	r3, r3, #1
 8002ce6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ce8:	4b55      	ldr	r3, [pc, #340]	; (8002e40 <HAL_RCC_OscConfig+0x470>)
 8002cea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cec:	4a54      	ldr	r2, [pc, #336]	; (8002e40 <HAL_RCC_OscConfig+0x470>)
 8002cee:	f023 0304 	bic.w	r3, r3, #4
 8002cf2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d015      	beq.n	8002d28 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cfc:	f7fe ffe2 	bl	8001cc4 <HAL_GetTick>
 8002d00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d02:	e00a      	b.n	8002d1a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d04:	f7fe ffde 	bl	8001cc4 <HAL_GetTick>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d901      	bls.n	8002d1a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002d16:	2303      	movs	r3, #3
 8002d18:	e0cb      	b.n	8002eb2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d1a:	4b49      	ldr	r3, [pc, #292]	; (8002e40 <HAL_RCC_OscConfig+0x470>)
 8002d1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d1e:	f003 0302 	and.w	r3, r3, #2
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d0ee      	beq.n	8002d04 <HAL_RCC_OscConfig+0x334>
 8002d26:	e014      	b.n	8002d52 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d28:	f7fe ffcc 	bl	8001cc4 <HAL_GetTick>
 8002d2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d2e:	e00a      	b.n	8002d46 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d30:	f7fe ffc8 	bl	8001cc4 <HAL_GetTick>
 8002d34:	4602      	mov	r2, r0
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d901      	bls.n	8002d46 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002d42:	2303      	movs	r3, #3
 8002d44:	e0b5      	b.n	8002eb2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d46:	4b3e      	ldr	r3, [pc, #248]	; (8002e40 <HAL_RCC_OscConfig+0x470>)
 8002d48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d4a:	f003 0302 	and.w	r3, r3, #2
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d1ee      	bne.n	8002d30 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d52:	7dfb      	ldrb	r3, [r7, #23]
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d105      	bne.n	8002d64 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d58:	4b39      	ldr	r3, [pc, #228]	; (8002e40 <HAL_RCC_OscConfig+0x470>)
 8002d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5c:	4a38      	ldr	r2, [pc, #224]	; (8002e40 <HAL_RCC_OscConfig+0x470>)
 8002d5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d62:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	699b      	ldr	r3, [r3, #24]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	f000 80a1 	beq.w	8002eb0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d6e:	4b34      	ldr	r3, [pc, #208]	; (8002e40 <HAL_RCC_OscConfig+0x470>)
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	f003 030c 	and.w	r3, r3, #12
 8002d76:	2b08      	cmp	r3, #8
 8002d78:	d05c      	beq.n	8002e34 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	699b      	ldr	r3, [r3, #24]
 8002d7e:	2b02      	cmp	r3, #2
 8002d80:	d141      	bne.n	8002e06 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d82:	4b31      	ldr	r3, [pc, #196]	; (8002e48 <HAL_RCC_OscConfig+0x478>)
 8002d84:	2200      	movs	r2, #0
 8002d86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d88:	f7fe ff9c 	bl	8001cc4 <HAL_GetTick>
 8002d8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d8e:	e008      	b.n	8002da2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d90:	f7fe ff98 	bl	8001cc4 <HAL_GetTick>
 8002d94:	4602      	mov	r2, r0
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	d901      	bls.n	8002da2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	e087      	b.n	8002eb2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002da2:	4b27      	ldr	r3, [pc, #156]	; (8002e40 <HAL_RCC_OscConfig+0x470>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d1f0      	bne.n	8002d90 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	69da      	ldr	r2, [r3, #28]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6a1b      	ldr	r3, [r3, #32]
 8002db6:	431a      	orrs	r2, r3
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dbc:	019b      	lsls	r3, r3, #6
 8002dbe:	431a      	orrs	r2, r3
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dc4:	085b      	lsrs	r3, r3, #1
 8002dc6:	3b01      	subs	r3, #1
 8002dc8:	041b      	lsls	r3, r3, #16
 8002dca:	431a      	orrs	r2, r3
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dd0:	061b      	lsls	r3, r3, #24
 8002dd2:	491b      	ldr	r1, [pc, #108]	; (8002e40 <HAL_RCC_OscConfig+0x470>)
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002dd8:	4b1b      	ldr	r3, [pc, #108]	; (8002e48 <HAL_RCC_OscConfig+0x478>)
 8002dda:	2201      	movs	r2, #1
 8002ddc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dde:	f7fe ff71 	bl	8001cc4 <HAL_GetTick>
 8002de2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002de4:	e008      	b.n	8002df8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002de6:	f7fe ff6d 	bl	8001cc4 <HAL_GetTick>
 8002dea:	4602      	mov	r2, r0
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	1ad3      	subs	r3, r2, r3
 8002df0:	2b02      	cmp	r3, #2
 8002df2:	d901      	bls.n	8002df8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002df4:	2303      	movs	r3, #3
 8002df6:	e05c      	b.n	8002eb2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002df8:	4b11      	ldr	r3, [pc, #68]	; (8002e40 <HAL_RCC_OscConfig+0x470>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d0f0      	beq.n	8002de6 <HAL_RCC_OscConfig+0x416>
 8002e04:	e054      	b.n	8002eb0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e06:	4b10      	ldr	r3, [pc, #64]	; (8002e48 <HAL_RCC_OscConfig+0x478>)
 8002e08:	2200      	movs	r2, #0
 8002e0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e0c:	f7fe ff5a 	bl	8001cc4 <HAL_GetTick>
 8002e10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e12:	e008      	b.n	8002e26 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e14:	f7fe ff56 	bl	8001cc4 <HAL_GetTick>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	2b02      	cmp	r3, #2
 8002e20:	d901      	bls.n	8002e26 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002e22:	2303      	movs	r3, #3
 8002e24:	e045      	b.n	8002eb2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e26:	4b06      	ldr	r3, [pc, #24]	; (8002e40 <HAL_RCC_OscConfig+0x470>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d1f0      	bne.n	8002e14 <HAL_RCC_OscConfig+0x444>
 8002e32:	e03d      	b.n	8002eb0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	699b      	ldr	r3, [r3, #24]
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d107      	bne.n	8002e4c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e038      	b.n	8002eb2 <HAL_RCC_OscConfig+0x4e2>
 8002e40:	40023800 	.word	0x40023800
 8002e44:	40007000 	.word	0x40007000
 8002e48:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002e4c:	4b1b      	ldr	r3, [pc, #108]	; (8002ebc <HAL_RCC_OscConfig+0x4ec>)
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	699b      	ldr	r3, [r3, #24]
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d028      	beq.n	8002eac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d121      	bne.n	8002eac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e72:	429a      	cmp	r2, r3
 8002e74:	d11a      	bne.n	8002eac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e76:	68fa      	ldr	r2, [r7, #12]
 8002e78:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002e82:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d111      	bne.n	8002eac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e92:	085b      	lsrs	r3, r3, #1
 8002e94:	3b01      	subs	r3, #1
 8002e96:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d107      	bne.n	8002eac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ea6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d001      	beq.n	8002eb0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	e000      	b.n	8002eb2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002eb0:	2300      	movs	r3, #0
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3718      	adds	r7, #24
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	40023800 	.word	0x40023800

08002ec0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b084      	sub	sp, #16
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
 8002ec8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d101      	bne.n	8002ed4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e0cc      	b.n	800306e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ed4:	4b68      	ldr	r3, [pc, #416]	; (8003078 <HAL_RCC_ClockConfig+0x1b8>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 0307 	and.w	r3, r3, #7
 8002edc:	683a      	ldr	r2, [r7, #0]
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	d90c      	bls.n	8002efc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ee2:	4b65      	ldr	r3, [pc, #404]	; (8003078 <HAL_RCC_ClockConfig+0x1b8>)
 8002ee4:	683a      	ldr	r2, [r7, #0]
 8002ee6:	b2d2      	uxtb	r2, r2
 8002ee8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eea:	4b63      	ldr	r3, [pc, #396]	; (8003078 <HAL_RCC_ClockConfig+0x1b8>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 0307 	and.w	r3, r3, #7
 8002ef2:	683a      	ldr	r2, [r7, #0]
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d001      	beq.n	8002efc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	e0b8      	b.n	800306e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 0302 	and.w	r3, r3, #2
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d020      	beq.n	8002f4a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 0304 	and.w	r3, r3, #4
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d005      	beq.n	8002f20 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f14:	4b59      	ldr	r3, [pc, #356]	; (800307c <HAL_RCC_ClockConfig+0x1bc>)
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	4a58      	ldr	r2, [pc, #352]	; (800307c <HAL_RCC_ClockConfig+0x1bc>)
 8002f1a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002f1e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 0308 	and.w	r3, r3, #8
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d005      	beq.n	8002f38 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f2c:	4b53      	ldr	r3, [pc, #332]	; (800307c <HAL_RCC_ClockConfig+0x1bc>)
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	4a52      	ldr	r2, [pc, #328]	; (800307c <HAL_RCC_ClockConfig+0x1bc>)
 8002f32:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002f36:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f38:	4b50      	ldr	r3, [pc, #320]	; (800307c <HAL_RCC_ClockConfig+0x1bc>)
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	494d      	ldr	r1, [pc, #308]	; (800307c <HAL_RCC_ClockConfig+0x1bc>)
 8002f46:	4313      	orrs	r3, r2
 8002f48:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 0301 	and.w	r3, r3, #1
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d044      	beq.n	8002fe0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	d107      	bne.n	8002f6e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f5e:	4b47      	ldr	r3, [pc, #284]	; (800307c <HAL_RCC_ClockConfig+0x1bc>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d119      	bne.n	8002f9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e07f      	b.n	800306e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	2b02      	cmp	r3, #2
 8002f74:	d003      	beq.n	8002f7e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f7a:	2b03      	cmp	r3, #3
 8002f7c:	d107      	bne.n	8002f8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f7e:	4b3f      	ldr	r3, [pc, #252]	; (800307c <HAL_RCC_ClockConfig+0x1bc>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d109      	bne.n	8002f9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e06f      	b.n	800306e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f8e:	4b3b      	ldr	r3, [pc, #236]	; (800307c <HAL_RCC_ClockConfig+0x1bc>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 0302 	and.w	r3, r3, #2
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d101      	bne.n	8002f9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e067      	b.n	800306e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f9e:	4b37      	ldr	r3, [pc, #220]	; (800307c <HAL_RCC_ClockConfig+0x1bc>)
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	f023 0203 	bic.w	r2, r3, #3
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	4934      	ldr	r1, [pc, #208]	; (800307c <HAL_RCC_ClockConfig+0x1bc>)
 8002fac:	4313      	orrs	r3, r2
 8002fae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fb0:	f7fe fe88 	bl	8001cc4 <HAL_GetTick>
 8002fb4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fb6:	e00a      	b.n	8002fce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fb8:	f7fe fe84 	bl	8001cc4 <HAL_GetTick>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	1ad3      	subs	r3, r2, r3
 8002fc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d901      	bls.n	8002fce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002fca:	2303      	movs	r3, #3
 8002fcc:	e04f      	b.n	800306e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fce:	4b2b      	ldr	r3, [pc, #172]	; (800307c <HAL_RCC_ClockConfig+0x1bc>)
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	f003 020c 	and.w	r2, r3, #12
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d1eb      	bne.n	8002fb8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002fe0:	4b25      	ldr	r3, [pc, #148]	; (8003078 <HAL_RCC_ClockConfig+0x1b8>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 0307 	and.w	r3, r3, #7
 8002fe8:	683a      	ldr	r2, [r7, #0]
 8002fea:	429a      	cmp	r2, r3
 8002fec:	d20c      	bcs.n	8003008 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fee:	4b22      	ldr	r3, [pc, #136]	; (8003078 <HAL_RCC_ClockConfig+0x1b8>)
 8002ff0:	683a      	ldr	r2, [r7, #0]
 8002ff2:	b2d2      	uxtb	r2, r2
 8002ff4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ff6:	4b20      	ldr	r3, [pc, #128]	; (8003078 <HAL_RCC_ClockConfig+0x1b8>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 0307 	and.w	r3, r3, #7
 8002ffe:	683a      	ldr	r2, [r7, #0]
 8003000:	429a      	cmp	r2, r3
 8003002:	d001      	beq.n	8003008 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	e032      	b.n	800306e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 0304 	and.w	r3, r3, #4
 8003010:	2b00      	cmp	r3, #0
 8003012:	d008      	beq.n	8003026 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003014:	4b19      	ldr	r3, [pc, #100]	; (800307c <HAL_RCC_ClockConfig+0x1bc>)
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	4916      	ldr	r1, [pc, #88]	; (800307c <HAL_RCC_ClockConfig+0x1bc>)
 8003022:	4313      	orrs	r3, r2
 8003024:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 0308 	and.w	r3, r3, #8
 800302e:	2b00      	cmp	r3, #0
 8003030:	d009      	beq.n	8003046 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003032:	4b12      	ldr	r3, [pc, #72]	; (800307c <HAL_RCC_ClockConfig+0x1bc>)
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	691b      	ldr	r3, [r3, #16]
 800303e:	00db      	lsls	r3, r3, #3
 8003040:	490e      	ldr	r1, [pc, #56]	; (800307c <HAL_RCC_ClockConfig+0x1bc>)
 8003042:	4313      	orrs	r3, r2
 8003044:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003046:	f000 f821 	bl	800308c <HAL_RCC_GetSysClockFreq>
 800304a:	4602      	mov	r2, r0
 800304c:	4b0b      	ldr	r3, [pc, #44]	; (800307c <HAL_RCC_ClockConfig+0x1bc>)
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	091b      	lsrs	r3, r3, #4
 8003052:	f003 030f 	and.w	r3, r3, #15
 8003056:	490a      	ldr	r1, [pc, #40]	; (8003080 <HAL_RCC_ClockConfig+0x1c0>)
 8003058:	5ccb      	ldrb	r3, [r1, r3]
 800305a:	fa22 f303 	lsr.w	r3, r2, r3
 800305e:	4a09      	ldr	r2, [pc, #36]	; (8003084 <HAL_RCC_ClockConfig+0x1c4>)
 8003060:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003062:	4b09      	ldr	r3, [pc, #36]	; (8003088 <HAL_RCC_ClockConfig+0x1c8>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4618      	mov	r0, r3
 8003068:	f7fe fde8 	bl	8001c3c <HAL_InitTick>

  return HAL_OK;
 800306c:	2300      	movs	r3, #0
}
 800306e:	4618      	mov	r0, r3
 8003070:	3710      	adds	r7, #16
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}
 8003076:	bf00      	nop
 8003078:	40023c00 	.word	0x40023c00
 800307c:	40023800 	.word	0x40023800
 8003080:	0800bd04 	.word	0x0800bd04
 8003084:	20000000 	.word	0x20000000
 8003088:	20000004 	.word	0x20000004

0800308c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800308c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003090:	b094      	sub	sp, #80	; 0x50
 8003092:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003094:	2300      	movs	r3, #0
 8003096:	647b      	str	r3, [r7, #68]	; 0x44
 8003098:	2300      	movs	r3, #0
 800309a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800309c:	2300      	movs	r3, #0
 800309e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80030a0:	2300      	movs	r3, #0
 80030a2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80030a4:	4b79      	ldr	r3, [pc, #484]	; (800328c <HAL_RCC_GetSysClockFreq+0x200>)
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	f003 030c 	and.w	r3, r3, #12
 80030ac:	2b08      	cmp	r3, #8
 80030ae:	d00d      	beq.n	80030cc <HAL_RCC_GetSysClockFreq+0x40>
 80030b0:	2b08      	cmp	r3, #8
 80030b2:	f200 80e1 	bhi.w	8003278 <HAL_RCC_GetSysClockFreq+0x1ec>
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d002      	beq.n	80030c0 <HAL_RCC_GetSysClockFreq+0x34>
 80030ba:	2b04      	cmp	r3, #4
 80030bc:	d003      	beq.n	80030c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80030be:	e0db      	b.n	8003278 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80030c0:	4b73      	ldr	r3, [pc, #460]	; (8003290 <HAL_RCC_GetSysClockFreq+0x204>)
 80030c2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80030c4:	e0db      	b.n	800327e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80030c6:	4b73      	ldr	r3, [pc, #460]	; (8003294 <HAL_RCC_GetSysClockFreq+0x208>)
 80030c8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80030ca:	e0d8      	b.n	800327e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80030cc:	4b6f      	ldr	r3, [pc, #444]	; (800328c <HAL_RCC_GetSysClockFreq+0x200>)
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80030d4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80030d6:	4b6d      	ldr	r3, [pc, #436]	; (800328c <HAL_RCC_GetSysClockFreq+0x200>)
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d063      	beq.n	80031aa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030e2:	4b6a      	ldr	r3, [pc, #424]	; (800328c <HAL_RCC_GetSysClockFreq+0x200>)
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	099b      	lsrs	r3, r3, #6
 80030e8:	2200      	movs	r2, #0
 80030ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80030ec:	63fa      	str	r2, [r7, #60]	; 0x3c
 80030ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030f4:	633b      	str	r3, [r7, #48]	; 0x30
 80030f6:	2300      	movs	r3, #0
 80030f8:	637b      	str	r3, [r7, #52]	; 0x34
 80030fa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80030fe:	4622      	mov	r2, r4
 8003100:	462b      	mov	r3, r5
 8003102:	f04f 0000 	mov.w	r0, #0
 8003106:	f04f 0100 	mov.w	r1, #0
 800310a:	0159      	lsls	r1, r3, #5
 800310c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003110:	0150      	lsls	r0, r2, #5
 8003112:	4602      	mov	r2, r0
 8003114:	460b      	mov	r3, r1
 8003116:	4621      	mov	r1, r4
 8003118:	1a51      	subs	r1, r2, r1
 800311a:	6139      	str	r1, [r7, #16]
 800311c:	4629      	mov	r1, r5
 800311e:	eb63 0301 	sbc.w	r3, r3, r1
 8003122:	617b      	str	r3, [r7, #20]
 8003124:	f04f 0200 	mov.w	r2, #0
 8003128:	f04f 0300 	mov.w	r3, #0
 800312c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003130:	4659      	mov	r1, fp
 8003132:	018b      	lsls	r3, r1, #6
 8003134:	4651      	mov	r1, sl
 8003136:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800313a:	4651      	mov	r1, sl
 800313c:	018a      	lsls	r2, r1, #6
 800313e:	4651      	mov	r1, sl
 8003140:	ebb2 0801 	subs.w	r8, r2, r1
 8003144:	4659      	mov	r1, fp
 8003146:	eb63 0901 	sbc.w	r9, r3, r1
 800314a:	f04f 0200 	mov.w	r2, #0
 800314e:	f04f 0300 	mov.w	r3, #0
 8003152:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003156:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800315a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800315e:	4690      	mov	r8, r2
 8003160:	4699      	mov	r9, r3
 8003162:	4623      	mov	r3, r4
 8003164:	eb18 0303 	adds.w	r3, r8, r3
 8003168:	60bb      	str	r3, [r7, #8]
 800316a:	462b      	mov	r3, r5
 800316c:	eb49 0303 	adc.w	r3, r9, r3
 8003170:	60fb      	str	r3, [r7, #12]
 8003172:	f04f 0200 	mov.w	r2, #0
 8003176:	f04f 0300 	mov.w	r3, #0
 800317a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800317e:	4629      	mov	r1, r5
 8003180:	024b      	lsls	r3, r1, #9
 8003182:	4621      	mov	r1, r4
 8003184:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003188:	4621      	mov	r1, r4
 800318a:	024a      	lsls	r2, r1, #9
 800318c:	4610      	mov	r0, r2
 800318e:	4619      	mov	r1, r3
 8003190:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003192:	2200      	movs	r2, #0
 8003194:	62bb      	str	r3, [r7, #40]	; 0x28
 8003196:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003198:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800319c:	f7fd fb26 	bl	80007ec <__aeabi_uldivmod>
 80031a0:	4602      	mov	r2, r0
 80031a2:	460b      	mov	r3, r1
 80031a4:	4613      	mov	r3, r2
 80031a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80031a8:	e058      	b.n	800325c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031aa:	4b38      	ldr	r3, [pc, #224]	; (800328c <HAL_RCC_GetSysClockFreq+0x200>)
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	099b      	lsrs	r3, r3, #6
 80031b0:	2200      	movs	r2, #0
 80031b2:	4618      	mov	r0, r3
 80031b4:	4611      	mov	r1, r2
 80031b6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80031ba:	623b      	str	r3, [r7, #32]
 80031bc:	2300      	movs	r3, #0
 80031be:	627b      	str	r3, [r7, #36]	; 0x24
 80031c0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80031c4:	4642      	mov	r2, r8
 80031c6:	464b      	mov	r3, r9
 80031c8:	f04f 0000 	mov.w	r0, #0
 80031cc:	f04f 0100 	mov.w	r1, #0
 80031d0:	0159      	lsls	r1, r3, #5
 80031d2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031d6:	0150      	lsls	r0, r2, #5
 80031d8:	4602      	mov	r2, r0
 80031da:	460b      	mov	r3, r1
 80031dc:	4641      	mov	r1, r8
 80031de:	ebb2 0a01 	subs.w	sl, r2, r1
 80031e2:	4649      	mov	r1, r9
 80031e4:	eb63 0b01 	sbc.w	fp, r3, r1
 80031e8:	f04f 0200 	mov.w	r2, #0
 80031ec:	f04f 0300 	mov.w	r3, #0
 80031f0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80031f4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80031f8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80031fc:	ebb2 040a 	subs.w	r4, r2, sl
 8003200:	eb63 050b 	sbc.w	r5, r3, fp
 8003204:	f04f 0200 	mov.w	r2, #0
 8003208:	f04f 0300 	mov.w	r3, #0
 800320c:	00eb      	lsls	r3, r5, #3
 800320e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003212:	00e2      	lsls	r2, r4, #3
 8003214:	4614      	mov	r4, r2
 8003216:	461d      	mov	r5, r3
 8003218:	4643      	mov	r3, r8
 800321a:	18e3      	adds	r3, r4, r3
 800321c:	603b      	str	r3, [r7, #0]
 800321e:	464b      	mov	r3, r9
 8003220:	eb45 0303 	adc.w	r3, r5, r3
 8003224:	607b      	str	r3, [r7, #4]
 8003226:	f04f 0200 	mov.w	r2, #0
 800322a:	f04f 0300 	mov.w	r3, #0
 800322e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003232:	4629      	mov	r1, r5
 8003234:	028b      	lsls	r3, r1, #10
 8003236:	4621      	mov	r1, r4
 8003238:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800323c:	4621      	mov	r1, r4
 800323e:	028a      	lsls	r2, r1, #10
 8003240:	4610      	mov	r0, r2
 8003242:	4619      	mov	r1, r3
 8003244:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003246:	2200      	movs	r2, #0
 8003248:	61bb      	str	r3, [r7, #24]
 800324a:	61fa      	str	r2, [r7, #28]
 800324c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003250:	f7fd facc 	bl	80007ec <__aeabi_uldivmod>
 8003254:	4602      	mov	r2, r0
 8003256:	460b      	mov	r3, r1
 8003258:	4613      	mov	r3, r2
 800325a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800325c:	4b0b      	ldr	r3, [pc, #44]	; (800328c <HAL_RCC_GetSysClockFreq+0x200>)
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	0c1b      	lsrs	r3, r3, #16
 8003262:	f003 0303 	and.w	r3, r3, #3
 8003266:	3301      	adds	r3, #1
 8003268:	005b      	lsls	r3, r3, #1
 800326a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800326c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800326e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003270:	fbb2 f3f3 	udiv	r3, r2, r3
 8003274:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003276:	e002      	b.n	800327e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003278:	4b05      	ldr	r3, [pc, #20]	; (8003290 <HAL_RCC_GetSysClockFreq+0x204>)
 800327a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800327c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800327e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003280:	4618      	mov	r0, r3
 8003282:	3750      	adds	r7, #80	; 0x50
 8003284:	46bd      	mov	sp, r7
 8003286:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800328a:	bf00      	nop
 800328c:	40023800 	.word	0x40023800
 8003290:	00f42400 	.word	0x00f42400
 8003294:	007a1200 	.word	0x007a1200

08003298 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003298:	b480      	push	{r7}
 800329a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800329c:	4b03      	ldr	r3, [pc, #12]	; (80032ac <HAL_RCC_GetHCLKFreq+0x14>)
 800329e:	681b      	ldr	r3, [r3, #0]
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr
 80032aa:	bf00      	nop
 80032ac:	20000000 	.word	0x20000000

080032b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80032b4:	f7ff fff0 	bl	8003298 <HAL_RCC_GetHCLKFreq>
 80032b8:	4602      	mov	r2, r0
 80032ba:	4b05      	ldr	r3, [pc, #20]	; (80032d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	0a9b      	lsrs	r3, r3, #10
 80032c0:	f003 0307 	and.w	r3, r3, #7
 80032c4:	4903      	ldr	r1, [pc, #12]	; (80032d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032c6:	5ccb      	ldrb	r3, [r1, r3]
 80032c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	bd80      	pop	{r7, pc}
 80032d0:	40023800 	.word	0x40023800
 80032d4:	0800bd14 	.word	0x0800bd14

080032d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80032dc:	f7ff ffdc 	bl	8003298 <HAL_RCC_GetHCLKFreq>
 80032e0:	4602      	mov	r2, r0
 80032e2:	4b05      	ldr	r3, [pc, #20]	; (80032f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	0b5b      	lsrs	r3, r3, #13
 80032e8:	f003 0307 	and.w	r3, r3, #7
 80032ec:	4903      	ldr	r1, [pc, #12]	; (80032fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80032ee:	5ccb      	ldrb	r3, [r1, r3]
 80032f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	bd80      	pop	{r7, pc}
 80032f8:	40023800 	.word	0x40023800
 80032fc:	0800bd14 	.word	0x0800bd14

08003300 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b082      	sub	sp, #8
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d101      	bne.n	8003312 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e07b      	b.n	800340a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003316:	2b00      	cmp	r3, #0
 8003318:	d108      	bne.n	800332c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003322:	d009      	beq.n	8003338 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2200      	movs	r2, #0
 8003328:	61da      	str	r2, [r3, #28]
 800332a:	e005      	b.n	8003338 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2200      	movs	r2, #0
 8003330:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2200      	movs	r2, #0
 8003336:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2200      	movs	r2, #0
 800333c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003344:	b2db      	uxtb	r3, r3
 8003346:	2b00      	cmp	r3, #0
 8003348:	d106      	bne.n	8003358 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2200      	movs	r2, #0
 800334e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	f7fe f970 	bl	8001638 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2202      	movs	r2, #2
 800335c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800336e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003380:	431a      	orrs	r2, r3
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	68db      	ldr	r3, [r3, #12]
 8003386:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800338a:	431a      	orrs	r2, r3
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	691b      	ldr	r3, [r3, #16]
 8003390:	f003 0302 	and.w	r3, r3, #2
 8003394:	431a      	orrs	r2, r3
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	695b      	ldr	r3, [r3, #20]
 800339a:	f003 0301 	and.w	r3, r3, #1
 800339e:	431a      	orrs	r2, r3
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	699b      	ldr	r3, [r3, #24]
 80033a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80033a8:	431a      	orrs	r2, r3
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	69db      	ldr	r3, [r3, #28]
 80033ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80033b2:	431a      	orrs	r2, r3
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6a1b      	ldr	r3, [r3, #32]
 80033b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033bc:	ea42 0103 	orr.w	r1, r2, r3
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033c4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	430a      	orrs	r2, r1
 80033ce:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	699b      	ldr	r3, [r3, #24]
 80033d4:	0c1b      	lsrs	r3, r3, #16
 80033d6:	f003 0104 	and.w	r1, r3, #4
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033de:	f003 0210 	and.w	r2, r3, #16
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	430a      	orrs	r2, r1
 80033e8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	69da      	ldr	r2, [r3, #28]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033f8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2200      	movs	r2, #0
 80033fe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2201      	movs	r2, #1
 8003404:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003408:	2300      	movs	r3, #0
}
 800340a:	4618      	mov	r0, r3
 800340c:	3708      	adds	r7, #8
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}

08003412 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003412:	b580      	push	{r7, lr}
 8003414:	b082      	sub	sp, #8
 8003416:	af00      	add	r7, sp, #0
 8003418:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d101      	bne.n	8003424 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	e041      	b.n	80034a8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800342a:	b2db      	uxtb	r3, r3
 800342c:	2b00      	cmp	r3, #0
 800342e:	d106      	bne.n	800343e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2200      	movs	r2, #0
 8003434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003438:	6878      	ldr	r0, [r7, #4]
 800343a:	f7fe f9ef 	bl	800181c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2202      	movs	r2, #2
 8003442:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	3304      	adds	r3, #4
 800344e:	4619      	mov	r1, r3
 8003450:	4610      	mov	r0, r2
 8003452:	f000 f8ef 	bl	8003634 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2201      	movs	r2, #1
 800345a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2201      	movs	r2, #1
 8003462:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2201      	movs	r2, #1
 800346a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2201      	movs	r2, #1
 8003472:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2201      	movs	r2, #1
 800347a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2201      	movs	r2, #1
 8003482:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2201      	movs	r2, #1
 800348a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2201      	movs	r2, #1
 8003492:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2201      	movs	r2, #1
 800349a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2201      	movs	r2, #1
 80034a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80034a6:	2300      	movs	r3, #0
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	3708      	adds	r7, #8
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}

080034b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b086      	sub	sp, #24
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	60f8      	str	r0, [r7, #12]
 80034b8:	60b9      	str	r1, [r7, #8]
 80034ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034bc:	2300      	movs	r3, #0
 80034be:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d101      	bne.n	80034ce <HAL_TIM_PWM_ConfigChannel+0x1e>
 80034ca:	2302      	movs	r3, #2
 80034cc:	e0ae      	b.n	800362c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2201      	movs	r2, #1
 80034d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2b0c      	cmp	r3, #12
 80034da:	f200 809f 	bhi.w	800361c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80034de:	a201      	add	r2, pc, #4	; (adr r2, 80034e4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80034e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034e4:	08003519 	.word	0x08003519
 80034e8:	0800361d 	.word	0x0800361d
 80034ec:	0800361d 	.word	0x0800361d
 80034f0:	0800361d 	.word	0x0800361d
 80034f4:	08003559 	.word	0x08003559
 80034f8:	0800361d 	.word	0x0800361d
 80034fc:	0800361d 	.word	0x0800361d
 8003500:	0800361d 	.word	0x0800361d
 8003504:	0800359b 	.word	0x0800359b
 8003508:	0800361d 	.word	0x0800361d
 800350c:	0800361d 	.word	0x0800361d
 8003510:	0800361d 	.word	0x0800361d
 8003514:	080035db 	.word	0x080035db
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	68b9      	ldr	r1, [r7, #8]
 800351e:	4618      	mov	r0, r3
 8003520:	f000 f908 	bl	8003734 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	699a      	ldr	r2, [r3, #24]
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f042 0208 	orr.w	r2, r2, #8
 8003532:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	699a      	ldr	r2, [r3, #24]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f022 0204 	bic.w	r2, r2, #4
 8003542:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	6999      	ldr	r1, [r3, #24]
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	691a      	ldr	r2, [r3, #16]
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	430a      	orrs	r2, r1
 8003554:	619a      	str	r2, [r3, #24]
      break;
 8003556:	e064      	b.n	8003622 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	68b9      	ldr	r1, [r7, #8]
 800355e:	4618      	mov	r0, r3
 8003560:	f000 f94e 	bl	8003800 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	699a      	ldr	r2, [r3, #24]
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003572:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	699a      	ldr	r2, [r3, #24]
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003582:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	6999      	ldr	r1, [r3, #24]
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	691b      	ldr	r3, [r3, #16]
 800358e:	021a      	lsls	r2, r3, #8
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	430a      	orrs	r2, r1
 8003596:	619a      	str	r2, [r3, #24]
      break;
 8003598:	e043      	b.n	8003622 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	68b9      	ldr	r1, [r7, #8]
 80035a0:	4618      	mov	r0, r3
 80035a2:	f000 f999 	bl	80038d8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	69da      	ldr	r2, [r3, #28]
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f042 0208 	orr.w	r2, r2, #8
 80035b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	69da      	ldr	r2, [r3, #28]
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f022 0204 	bic.w	r2, r2, #4
 80035c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	69d9      	ldr	r1, [r3, #28]
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	691a      	ldr	r2, [r3, #16]
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	430a      	orrs	r2, r1
 80035d6:	61da      	str	r2, [r3, #28]
      break;
 80035d8:	e023      	b.n	8003622 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	68b9      	ldr	r1, [r7, #8]
 80035e0:	4618      	mov	r0, r3
 80035e2:	f000 f9e3 	bl	80039ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	69da      	ldr	r2, [r3, #28]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	69da      	ldr	r2, [r3, #28]
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003604:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	69d9      	ldr	r1, [r3, #28]
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	691b      	ldr	r3, [r3, #16]
 8003610:	021a      	lsls	r2, r3, #8
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	430a      	orrs	r2, r1
 8003618:	61da      	str	r2, [r3, #28]
      break;
 800361a:	e002      	b.n	8003622 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	75fb      	strb	r3, [r7, #23]
      break;
 8003620:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2200      	movs	r2, #0
 8003626:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800362a:	7dfb      	ldrb	r3, [r7, #23]
}
 800362c:	4618      	mov	r0, r3
 800362e:	3718      	adds	r7, #24
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}

08003634 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003634:	b480      	push	{r7}
 8003636:	b085      	sub	sp, #20
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
 800363c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	4a34      	ldr	r2, [pc, #208]	; (8003718 <TIM_Base_SetConfig+0xe4>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d00f      	beq.n	800366c <TIM_Base_SetConfig+0x38>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003652:	d00b      	beq.n	800366c <TIM_Base_SetConfig+0x38>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	4a31      	ldr	r2, [pc, #196]	; (800371c <TIM_Base_SetConfig+0xe8>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d007      	beq.n	800366c <TIM_Base_SetConfig+0x38>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	4a30      	ldr	r2, [pc, #192]	; (8003720 <TIM_Base_SetConfig+0xec>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d003      	beq.n	800366c <TIM_Base_SetConfig+0x38>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	4a2f      	ldr	r2, [pc, #188]	; (8003724 <TIM_Base_SetConfig+0xf0>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d108      	bne.n	800367e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003672:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	68fa      	ldr	r2, [r7, #12]
 800367a:	4313      	orrs	r3, r2
 800367c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	4a25      	ldr	r2, [pc, #148]	; (8003718 <TIM_Base_SetConfig+0xe4>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d01b      	beq.n	80036be <TIM_Base_SetConfig+0x8a>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800368c:	d017      	beq.n	80036be <TIM_Base_SetConfig+0x8a>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	4a22      	ldr	r2, [pc, #136]	; (800371c <TIM_Base_SetConfig+0xe8>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d013      	beq.n	80036be <TIM_Base_SetConfig+0x8a>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	4a21      	ldr	r2, [pc, #132]	; (8003720 <TIM_Base_SetConfig+0xec>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d00f      	beq.n	80036be <TIM_Base_SetConfig+0x8a>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	4a20      	ldr	r2, [pc, #128]	; (8003724 <TIM_Base_SetConfig+0xf0>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d00b      	beq.n	80036be <TIM_Base_SetConfig+0x8a>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	4a1f      	ldr	r2, [pc, #124]	; (8003728 <TIM_Base_SetConfig+0xf4>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d007      	beq.n	80036be <TIM_Base_SetConfig+0x8a>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	4a1e      	ldr	r2, [pc, #120]	; (800372c <TIM_Base_SetConfig+0xf8>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d003      	beq.n	80036be <TIM_Base_SetConfig+0x8a>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	4a1d      	ldr	r2, [pc, #116]	; (8003730 <TIM_Base_SetConfig+0xfc>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d108      	bne.n	80036d0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	68db      	ldr	r3, [r3, #12]
 80036ca:	68fa      	ldr	r2, [r7, #12]
 80036cc:	4313      	orrs	r3, r2
 80036ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	695b      	ldr	r3, [r3, #20]
 80036da:	4313      	orrs	r3, r2
 80036dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	68fa      	ldr	r2, [r7, #12]
 80036e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	689a      	ldr	r2, [r3, #8]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	4a08      	ldr	r2, [pc, #32]	; (8003718 <TIM_Base_SetConfig+0xe4>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d103      	bne.n	8003704 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	691a      	ldr	r2, [r3, #16]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2201      	movs	r2, #1
 8003708:	615a      	str	r2, [r3, #20]
}
 800370a:	bf00      	nop
 800370c:	3714      	adds	r7, #20
 800370e:	46bd      	mov	sp, r7
 8003710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003714:	4770      	bx	lr
 8003716:	bf00      	nop
 8003718:	40010000 	.word	0x40010000
 800371c:	40000400 	.word	0x40000400
 8003720:	40000800 	.word	0x40000800
 8003724:	40000c00 	.word	0x40000c00
 8003728:	40014000 	.word	0x40014000
 800372c:	40014400 	.word	0x40014400
 8003730:	40014800 	.word	0x40014800

08003734 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003734:	b480      	push	{r7}
 8003736:	b087      	sub	sp, #28
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
 800373c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6a1b      	ldr	r3, [r3, #32]
 8003742:	f023 0201 	bic.w	r2, r3, #1
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6a1b      	ldr	r3, [r3, #32]
 800374e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	699b      	ldr	r3, [r3, #24]
 800375a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003762:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	f023 0303 	bic.w	r3, r3, #3
 800376a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	68fa      	ldr	r2, [r7, #12]
 8003772:	4313      	orrs	r3, r2
 8003774:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	f023 0302 	bic.w	r3, r3, #2
 800377c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	697a      	ldr	r2, [r7, #20]
 8003784:	4313      	orrs	r3, r2
 8003786:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	4a1c      	ldr	r2, [pc, #112]	; (80037fc <TIM_OC1_SetConfig+0xc8>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d10c      	bne.n	80037aa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	f023 0308 	bic.w	r3, r3, #8
 8003796:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	68db      	ldr	r3, [r3, #12]
 800379c:	697a      	ldr	r2, [r7, #20]
 800379e:	4313      	orrs	r3, r2
 80037a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	f023 0304 	bic.w	r3, r3, #4
 80037a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	4a13      	ldr	r2, [pc, #76]	; (80037fc <TIM_OC1_SetConfig+0xc8>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d111      	bne.n	80037d6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80037b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80037c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	695b      	ldr	r3, [r3, #20]
 80037c6:	693a      	ldr	r2, [r7, #16]
 80037c8:	4313      	orrs	r3, r2
 80037ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	699b      	ldr	r3, [r3, #24]
 80037d0:	693a      	ldr	r2, [r7, #16]
 80037d2:	4313      	orrs	r3, r2
 80037d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	693a      	ldr	r2, [r7, #16]
 80037da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	68fa      	ldr	r2, [r7, #12]
 80037e0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	685a      	ldr	r2, [r3, #4]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	697a      	ldr	r2, [r7, #20]
 80037ee:	621a      	str	r2, [r3, #32]
}
 80037f0:	bf00      	nop
 80037f2:	371c      	adds	r7, #28
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr
 80037fc:	40010000 	.word	0x40010000

08003800 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003800:	b480      	push	{r7}
 8003802:	b087      	sub	sp, #28
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
 8003808:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6a1b      	ldr	r3, [r3, #32]
 800380e:	f023 0210 	bic.w	r2, r3, #16
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6a1b      	ldr	r3, [r3, #32]
 800381a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	699b      	ldr	r3, [r3, #24]
 8003826:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800382e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003836:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	021b      	lsls	r3, r3, #8
 800383e:	68fa      	ldr	r2, [r7, #12]
 8003840:	4313      	orrs	r3, r2
 8003842:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	f023 0320 	bic.w	r3, r3, #32
 800384a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	011b      	lsls	r3, r3, #4
 8003852:	697a      	ldr	r2, [r7, #20]
 8003854:	4313      	orrs	r3, r2
 8003856:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	4a1e      	ldr	r2, [pc, #120]	; (80038d4 <TIM_OC2_SetConfig+0xd4>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d10d      	bne.n	800387c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003866:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	68db      	ldr	r3, [r3, #12]
 800386c:	011b      	lsls	r3, r3, #4
 800386e:	697a      	ldr	r2, [r7, #20]
 8003870:	4313      	orrs	r3, r2
 8003872:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800387a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	4a15      	ldr	r2, [pc, #84]	; (80038d4 <TIM_OC2_SetConfig+0xd4>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d113      	bne.n	80038ac <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800388a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003892:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	695b      	ldr	r3, [r3, #20]
 8003898:	009b      	lsls	r3, r3, #2
 800389a:	693a      	ldr	r2, [r7, #16]
 800389c:	4313      	orrs	r3, r2
 800389e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	699b      	ldr	r3, [r3, #24]
 80038a4:	009b      	lsls	r3, r3, #2
 80038a6:	693a      	ldr	r2, [r7, #16]
 80038a8:	4313      	orrs	r3, r2
 80038aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	693a      	ldr	r2, [r7, #16]
 80038b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	68fa      	ldr	r2, [r7, #12]
 80038b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	685a      	ldr	r2, [r3, #4]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	697a      	ldr	r2, [r7, #20]
 80038c4:	621a      	str	r2, [r3, #32]
}
 80038c6:	bf00      	nop
 80038c8:	371c      	adds	r7, #28
 80038ca:	46bd      	mov	sp, r7
 80038cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d0:	4770      	bx	lr
 80038d2:	bf00      	nop
 80038d4:	40010000 	.word	0x40010000

080038d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80038d8:	b480      	push	{r7}
 80038da:	b087      	sub	sp, #28
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
 80038e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6a1b      	ldr	r3, [r3, #32]
 80038e6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6a1b      	ldr	r3, [r3, #32]
 80038f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	69db      	ldr	r3, [r3, #28]
 80038fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003906:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f023 0303 	bic.w	r3, r3, #3
 800390e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	68fa      	ldr	r2, [r7, #12]
 8003916:	4313      	orrs	r3, r2
 8003918:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003920:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	021b      	lsls	r3, r3, #8
 8003928:	697a      	ldr	r2, [r7, #20]
 800392a:	4313      	orrs	r3, r2
 800392c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	4a1d      	ldr	r2, [pc, #116]	; (80039a8 <TIM_OC3_SetConfig+0xd0>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d10d      	bne.n	8003952 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800393c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	68db      	ldr	r3, [r3, #12]
 8003942:	021b      	lsls	r3, r3, #8
 8003944:	697a      	ldr	r2, [r7, #20]
 8003946:	4313      	orrs	r3, r2
 8003948:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003950:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	4a14      	ldr	r2, [pc, #80]	; (80039a8 <TIM_OC3_SetConfig+0xd0>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d113      	bne.n	8003982 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003960:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003968:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	695b      	ldr	r3, [r3, #20]
 800396e:	011b      	lsls	r3, r3, #4
 8003970:	693a      	ldr	r2, [r7, #16]
 8003972:	4313      	orrs	r3, r2
 8003974:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	699b      	ldr	r3, [r3, #24]
 800397a:	011b      	lsls	r3, r3, #4
 800397c:	693a      	ldr	r2, [r7, #16]
 800397e:	4313      	orrs	r3, r2
 8003980:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	693a      	ldr	r2, [r7, #16]
 8003986:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	68fa      	ldr	r2, [r7, #12]
 800398c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	685a      	ldr	r2, [r3, #4]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	697a      	ldr	r2, [r7, #20]
 800399a:	621a      	str	r2, [r3, #32]
}
 800399c:	bf00      	nop
 800399e:	371c      	adds	r7, #28
 80039a0:	46bd      	mov	sp, r7
 80039a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a6:	4770      	bx	lr
 80039a8:	40010000 	.word	0x40010000

080039ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80039ac:	b480      	push	{r7}
 80039ae:	b087      	sub	sp, #28
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
 80039b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6a1b      	ldr	r3, [r3, #32]
 80039ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6a1b      	ldr	r3, [r3, #32]
 80039c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	69db      	ldr	r3, [r3, #28]
 80039d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	021b      	lsls	r3, r3, #8
 80039ea:	68fa      	ldr	r2, [r7, #12]
 80039ec:	4313      	orrs	r3, r2
 80039ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80039f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	031b      	lsls	r3, r3, #12
 80039fe:	693a      	ldr	r2, [r7, #16]
 8003a00:	4313      	orrs	r3, r2
 8003a02:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	4a10      	ldr	r2, [pc, #64]	; (8003a48 <TIM_OC4_SetConfig+0x9c>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d109      	bne.n	8003a20 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a12:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	695b      	ldr	r3, [r3, #20]
 8003a18:	019b      	lsls	r3, r3, #6
 8003a1a:	697a      	ldr	r2, [r7, #20]
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	697a      	ldr	r2, [r7, #20]
 8003a24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	68fa      	ldr	r2, [r7, #12]
 8003a2a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	685a      	ldr	r2, [r3, #4]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	693a      	ldr	r2, [r7, #16]
 8003a38:	621a      	str	r2, [r3, #32]
}
 8003a3a:	bf00      	nop
 8003a3c:	371c      	adds	r7, #28
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr
 8003a46:	bf00      	nop
 8003a48:	40010000 	.word	0x40010000

08003a4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b085      	sub	sp, #20
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
 8003a54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a5c:	2b01      	cmp	r3, #1
 8003a5e:	d101      	bne.n	8003a64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a60:	2302      	movs	r3, #2
 8003a62:	e050      	b.n	8003b06 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2201      	movs	r2, #1
 8003a68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2202      	movs	r2, #2
 8003a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a8a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	68fa      	ldr	r2, [r7, #12]
 8003a92:	4313      	orrs	r3, r2
 8003a94:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	68fa      	ldr	r2, [r7, #12]
 8003a9c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a1c      	ldr	r2, [pc, #112]	; (8003b14 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d018      	beq.n	8003ada <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ab0:	d013      	beq.n	8003ada <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a18      	ldr	r2, [pc, #96]	; (8003b18 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d00e      	beq.n	8003ada <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a16      	ldr	r2, [pc, #88]	; (8003b1c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d009      	beq.n	8003ada <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a15      	ldr	r2, [pc, #84]	; (8003b20 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d004      	beq.n	8003ada <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a13      	ldr	r2, [pc, #76]	; (8003b24 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d10c      	bne.n	8003af4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ae0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	68ba      	ldr	r2, [r7, #8]
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	68ba      	ldr	r2, [r7, #8]
 8003af2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2201      	movs	r2, #1
 8003af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2200      	movs	r2, #0
 8003b00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b04:	2300      	movs	r3, #0
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	3714      	adds	r7, #20
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b10:	4770      	bx	lr
 8003b12:	bf00      	nop
 8003b14:	40010000 	.word	0x40010000
 8003b18:	40000400 	.word	0x40000400
 8003b1c:	40000800 	.word	0x40000800
 8003b20:	40000c00 	.word	0x40000c00
 8003b24:	40014000 	.word	0x40014000

08003b28 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b082      	sub	sp, #8
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d101      	bne.n	8003b3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	e03f      	b.n	8003bba <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b40:	b2db      	uxtb	r3, r3
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d106      	bne.n	8003b54 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	f7fd fefc 	bl	800194c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2224      	movs	r2, #36	; 0x24
 8003b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	68da      	ldr	r2, [r3, #12]
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b6a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003b6c:	6878      	ldr	r0, [r7, #4]
 8003b6e:	f000 f829 	bl	8003bc4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	691a      	ldr	r2, [r3, #16]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b80:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	695a      	ldr	r2, [r3, #20]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b90:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	68da      	ldr	r2, [r3, #12]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ba0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2220      	movs	r2, #32
 8003bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2220      	movs	r2, #32
 8003bb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003bb8:	2300      	movs	r3, #0
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	3708      	adds	r7, #8
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}
	...

08003bc4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003bc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bc8:	b0c0      	sub	sp, #256	; 0x100
 8003bca:	af00      	add	r7, sp, #0
 8003bcc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003bd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	691b      	ldr	r3, [r3, #16]
 8003bd8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003bdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003be0:	68d9      	ldr	r1, [r3, #12]
 8003be2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	ea40 0301 	orr.w	r3, r0, r1
 8003bec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003bee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bf2:	689a      	ldr	r2, [r3, #8]
 8003bf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bf8:	691b      	ldr	r3, [r3, #16]
 8003bfa:	431a      	orrs	r2, r3
 8003bfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c00:	695b      	ldr	r3, [r3, #20]
 8003c02:	431a      	orrs	r2, r3
 8003c04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c08:	69db      	ldr	r3, [r3, #28]
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003c10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	68db      	ldr	r3, [r3, #12]
 8003c18:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003c1c:	f021 010c 	bic.w	r1, r1, #12
 8003c20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003c2a:	430b      	orrs	r3, r1
 8003c2c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003c2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	695b      	ldr	r3, [r3, #20]
 8003c36:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003c3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c3e:	6999      	ldr	r1, [r3, #24]
 8003c40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	ea40 0301 	orr.w	r3, r0, r1
 8003c4a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003c4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	4b8f      	ldr	r3, [pc, #572]	; (8003e90 <UART_SetConfig+0x2cc>)
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d005      	beq.n	8003c64 <UART_SetConfig+0xa0>
 8003c58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	4b8d      	ldr	r3, [pc, #564]	; (8003e94 <UART_SetConfig+0x2d0>)
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d104      	bne.n	8003c6e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003c64:	f7ff fb38 	bl	80032d8 <HAL_RCC_GetPCLK2Freq>
 8003c68:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003c6c:	e003      	b.n	8003c76 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003c6e:	f7ff fb1f 	bl	80032b0 <HAL_RCC_GetPCLK1Freq>
 8003c72:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c7a:	69db      	ldr	r3, [r3, #28]
 8003c7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c80:	f040 810c 	bne.w	8003e9c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003c84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c88:	2200      	movs	r2, #0
 8003c8a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003c8e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003c92:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003c96:	4622      	mov	r2, r4
 8003c98:	462b      	mov	r3, r5
 8003c9a:	1891      	adds	r1, r2, r2
 8003c9c:	65b9      	str	r1, [r7, #88]	; 0x58
 8003c9e:	415b      	adcs	r3, r3
 8003ca0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ca2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003ca6:	4621      	mov	r1, r4
 8003ca8:	eb12 0801 	adds.w	r8, r2, r1
 8003cac:	4629      	mov	r1, r5
 8003cae:	eb43 0901 	adc.w	r9, r3, r1
 8003cb2:	f04f 0200 	mov.w	r2, #0
 8003cb6:	f04f 0300 	mov.w	r3, #0
 8003cba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003cbe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003cc2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003cc6:	4690      	mov	r8, r2
 8003cc8:	4699      	mov	r9, r3
 8003cca:	4623      	mov	r3, r4
 8003ccc:	eb18 0303 	adds.w	r3, r8, r3
 8003cd0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003cd4:	462b      	mov	r3, r5
 8003cd6:	eb49 0303 	adc.w	r3, r9, r3
 8003cda:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003cde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003cea:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003cee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003cf2:	460b      	mov	r3, r1
 8003cf4:	18db      	adds	r3, r3, r3
 8003cf6:	653b      	str	r3, [r7, #80]	; 0x50
 8003cf8:	4613      	mov	r3, r2
 8003cfa:	eb42 0303 	adc.w	r3, r2, r3
 8003cfe:	657b      	str	r3, [r7, #84]	; 0x54
 8003d00:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003d04:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003d08:	f7fc fd70 	bl	80007ec <__aeabi_uldivmod>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	460b      	mov	r3, r1
 8003d10:	4b61      	ldr	r3, [pc, #388]	; (8003e98 <UART_SetConfig+0x2d4>)
 8003d12:	fba3 2302 	umull	r2, r3, r3, r2
 8003d16:	095b      	lsrs	r3, r3, #5
 8003d18:	011c      	lsls	r4, r3, #4
 8003d1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d1e:	2200      	movs	r2, #0
 8003d20:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003d24:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003d28:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003d2c:	4642      	mov	r2, r8
 8003d2e:	464b      	mov	r3, r9
 8003d30:	1891      	adds	r1, r2, r2
 8003d32:	64b9      	str	r1, [r7, #72]	; 0x48
 8003d34:	415b      	adcs	r3, r3
 8003d36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d38:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003d3c:	4641      	mov	r1, r8
 8003d3e:	eb12 0a01 	adds.w	sl, r2, r1
 8003d42:	4649      	mov	r1, r9
 8003d44:	eb43 0b01 	adc.w	fp, r3, r1
 8003d48:	f04f 0200 	mov.w	r2, #0
 8003d4c:	f04f 0300 	mov.w	r3, #0
 8003d50:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003d54:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003d58:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d5c:	4692      	mov	sl, r2
 8003d5e:	469b      	mov	fp, r3
 8003d60:	4643      	mov	r3, r8
 8003d62:	eb1a 0303 	adds.w	r3, sl, r3
 8003d66:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003d6a:	464b      	mov	r3, r9
 8003d6c:	eb4b 0303 	adc.w	r3, fp, r3
 8003d70:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003d74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003d80:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003d84:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003d88:	460b      	mov	r3, r1
 8003d8a:	18db      	adds	r3, r3, r3
 8003d8c:	643b      	str	r3, [r7, #64]	; 0x40
 8003d8e:	4613      	mov	r3, r2
 8003d90:	eb42 0303 	adc.w	r3, r2, r3
 8003d94:	647b      	str	r3, [r7, #68]	; 0x44
 8003d96:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003d9a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003d9e:	f7fc fd25 	bl	80007ec <__aeabi_uldivmod>
 8003da2:	4602      	mov	r2, r0
 8003da4:	460b      	mov	r3, r1
 8003da6:	4611      	mov	r1, r2
 8003da8:	4b3b      	ldr	r3, [pc, #236]	; (8003e98 <UART_SetConfig+0x2d4>)
 8003daa:	fba3 2301 	umull	r2, r3, r3, r1
 8003dae:	095b      	lsrs	r3, r3, #5
 8003db0:	2264      	movs	r2, #100	; 0x64
 8003db2:	fb02 f303 	mul.w	r3, r2, r3
 8003db6:	1acb      	subs	r3, r1, r3
 8003db8:	00db      	lsls	r3, r3, #3
 8003dba:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003dbe:	4b36      	ldr	r3, [pc, #216]	; (8003e98 <UART_SetConfig+0x2d4>)
 8003dc0:	fba3 2302 	umull	r2, r3, r3, r2
 8003dc4:	095b      	lsrs	r3, r3, #5
 8003dc6:	005b      	lsls	r3, r3, #1
 8003dc8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003dcc:	441c      	add	r4, r3
 8003dce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003dd8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003ddc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003de0:	4642      	mov	r2, r8
 8003de2:	464b      	mov	r3, r9
 8003de4:	1891      	adds	r1, r2, r2
 8003de6:	63b9      	str	r1, [r7, #56]	; 0x38
 8003de8:	415b      	adcs	r3, r3
 8003dea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003dec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003df0:	4641      	mov	r1, r8
 8003df2:	1851      	adds	r1, r2, r1
 8003df4:	6339      	str	r1, [r7, #48]	; 0x30
 8003df6:	4649      	mov	r1, r9
 8003df8:	414b      	adcs	r3, r1
 8003dfa:	637b      	str	r3, [r7, #52]	; 0x34
 8003dfc:	f04f 0200 	mov.w	r2, #0
 8003e00:	f04f 0300 	mov.w	r3, #0
 8003e04:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003e08:	4659      	mov	r1, fp
 8003e0a:	00cb      	lsls	r3, r1, #3
 8003e0c:	4651      	mov	r1, sl
 8003e0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e12:	4651      	mov	r1, sl
 8003e14:	00ca      	lsls	r2, r1, #3
 8003e16:	4610      	mov	r0, r2
 8003e18:	4619      	mov	r1, r3
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	4642      	mov	r2, r8
 8003e1e:	189b      	adds	r3, r3, r2
 8003e20:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003e24:	464b      	mov	r3, r9
 8003e26:	460a      	mov	r2, r1
 8003e28:	eb42 0303 	adc.w	r3, r2, r3
 8003e2c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003e30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	2200      	movs	r2, #0
 8003e38:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003e3c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003e40:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003e44:	460b      	mov	r3, r1
 8003e46:	18db      	adds	r3, r3, r3
 8003e48:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e4a:	4613      	mov	r3, r2
 8003e4c:	eb42 0303 	adc.w	r3, r2, r3
 8003e50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e52:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003e56:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003e5a:	f7fc fcc7 	bl	80007ec <__aeabi_uldivmod>
 8003e5e:	4602      	mov	r2, r0
 8003e60:	460b      	mov	r3, r1
 8003e62:	4b0d      	ldr	r3, [pc, #52]	; (8003e98 <UART_SetConfig+0x2d4>)
 8003e64:	fba3 1302 	umull	r1, r3, r3, r2
 8003e68:	095b      	lsrs	r3, r3, #5
 8003e6a:	2164      	movs	r1, #100	; 0x64
 8003e6c:	fb01 f303 	mul.w	r3, r1, r3
 8003e70:	1ad3      	subs	r3, r2, r3
 8003e72:	00db      	lsls	r3, r3, #3
 8003e74:	3332      	adds	r3, #50	; 0x32
 8003e76:	4a08      	ldr	r2, [pc, #32]	; (8003e98 <UART_SetConfig+0x2d4>)
 8003e78:	fba2 2303 	umull	r2, r3, r2, r3
 8003e7c:	095b      	lsrs	r3, r3, #5
 8003e7e:	f003 0207 	and.w	r2, r3, #7
 8003e82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4422      	add	r2, r4
 8003e8a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003e8c:	e105      	b.n	800409a <UART_SetConfig+0x4d6>
 8003e8e:	bf00      	nop
 8003e90:	40011000 	.word	0x40011000
 8003e94:	40011400 	.word	0x40011400
 8003e98:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003ea6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003eaa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003eae:	4642      	mov	r2, r8
 8003eb0:	464b      	mov	r3, r9
 8003eb2:	1891      	adds	r1, r2, r2
 8003eb4:	6239      	str	r1, [r7, #32]
 8003eb6:	415b      	adcs	r3, r3
 8003eb8:	627b      	str	r3, [r7, #36]	; 0x24
 8003eba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003ebe:	4641      	mov	r1, r8
 8003ec0:	1854      	adds	r4, r2, r1
 8003ec2:	4649      	mov	r1, r9
 8003ec4:	eb43 0501 	adc.w	r5, r3, r1
 8003ec8:	f04f 0200 	mov.w	r2, #0
 8003ecc:	f04f 0300 	mov.w	r3, #0
 8003ed0:	00eb      	lsls	r3, r5, #3
 8003ed2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ed6:	00e2      	lsls	r2, r4, #3
 8003ed8:	4614      	mov	r4, r2
 8003eda:	461d      	mov	r5, r3
 8003edc:	4643      	mov	r3, r8
 8003ede:	18e3      	adds	r3, r4, r3
 8003ee0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003ee4:	464b      	mov	r3, r9
 8003ee6:	eb45 0303 	adc.w	r3, r5, r3
 8003eea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003eee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003efa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003efe:	f04f 0200 	mov.w	r2, #0
 8003f02:	f04f 0300 	mov.w	r3, #0
 8003f06:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003f0a:	4629      	mov	r1, r5
 8003f0c:	008b      	lsls	r3, r1, #2
 8003f0e:	4621      	mov	r1, r4
 8003f10:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003f14:	4621      	mov	r1, r4
 8003f16:	008a      	lsls	r2, r1, #2
 8003f18:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003f1c:	f7fc fc66 	bl	80007ec <__aeabi_uldivmod>
 8003f20:	4602      	mov	r2, r0
 8003f22:	460b      	mov	r3, r1
 8003f24:	4b60      	ldr	r3, [pc, #384]	; (80040a8 <UART_SetConfig+0x4e4>)
 8003f26:	fba3 2302 	umull	r2, r3, r3, r2
 8003f2a:	095b      	lsrs	r3, r3, #5
 8003f2c:	011c      	lsls	r4, r3, #4
 8003f2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f32:	2200      	movs	r2, #0
 8003f34:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003f38:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003f3c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003f40:	4642      	mov	r2, r8
 8003f42:	464b      	mov	r3, r9
 8003f44:	1891      	adds	r1, r2, r2
 8003f46:	61b9      	str	r1, [r7, #24]
 8003f48:	415b      	adcs	r3, r3
 8003f4a:	61fb      	str	r3, [r7, #28]
 8003f4c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f50:	4641      	mov	r1, r8
 8003f52:	1851      	adds	r1, r2, r1
 8003f54:	6139      	str	r1, [r7, #16]
 8003f56:	4649      	mov	r1, r9
 8003f58:	414b      	adcs	r3, r1
 8003f5a:	617b      	str	r3, [r7, #20]
 8003f5c:	f04f 0200 	mov.w	r2, #0
 8003f60:	f04f 0300 	mov.w	r3, #0
 8003f64:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003f68:	4659      	mov	r1, fp
 8003f6a:	00cb      	lsls	r3, r1, #3
 8003f6c:	4651      	mov	r1, sl
 8003f6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f72:	4651      	mov	r1, sl
 8003f74:	00ca      	lsls	r2, r1, #3
 8003f76:	4610      	mov	r0, r2
 8003f78:	4619      	mov	r1, r3
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	4642      	mov	r2, r8
 8003f7e:	189b      	adds	r3, r3, r2
 8003f80:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003f84:	464b      	mov	r3, r9
 8003f86:	460a      	mov	r2, r1
 8003f88:	eb42 0303 	adc.w	r3, r2, r3
 8003f8c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003f90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	2200      	movs	r2, #0
 8003f98:	67bb      	str	r3, [r7, #120]	; 0x78
 8003f9a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003f9c:	f04f 0200 	mov.w	r2, #0
 8003fa0:	f04f 0300 	mov.w	r3, #0
 8003fa4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003fa8:	4649      	mov	r1, r9
 8003faa:	008b      	lsls	r3, r1, #2
 8003fac:	4641      	mov	r1, r8
 8003fae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003fb2:	4641      	mov	r1, r8
 8003fb4:	008a      	lsls	r2, r1, #2
 8003fb6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003fba:	f7fc fc17 	bl	80007ec <__aeabi_uldivmod>
 8003fbe:	4602      	mov	r2, r0
 8003fc0:	460b      	mov	r3, r1
 8003fc2:	4b39      	ldr	r3, [pc, #228]	; (80040a8 <UART_SetConfig+0x4e4>)
 8003fc4:	fba3 1302 	umull	r1, r3, r3, r2
 8003fc8:	095b      	lsrs	r3, r3, #5
 8003fca:	2164      	movs	r1, #100	; 0x64
 8003fcc:	fb01 f303 	mul.w	r3, r1, r3
 8003fd0:	1ad3      	subs	r3, r2, r3
 8003fd2:	011b      	lsls	r3, r3, #4
 8003fd4:	3332      	adds	r3, #50	; 0x32
 8003fd6:	4a34      	ldr	r2, [pc, #208]	; (80040a8 <UART_SetConfig+0x4e4>)
 8003fd8:	fba2 2303 	umull	r2, r3, r2, r3
 8003fdc:	095b      	lsrs	r3, r3, #5
 8003fde:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003fe2:	441c      	add	r4, r3
 8003fe4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003fe8:	2200      	movs	r2, #0
 8003fea:	673b      	str	r3, [r7, #112]	; 0x70
 8003fec:	677a      	str	r2, [r7, #116]	; 0x74
 8003fee:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003ff2:	4642      	mov	r2, r8
 8003ff4:	464b      	mov	r3, r9
 8003ff6:	1891      	adds	r1, r2, r2
 8003ff8:	60b9      	str	r1, [r7, #8]
 8003ffa:	415b      	adcs	r3, r3
 8003ffc:	60fb      	str	r3, [r7, #12]
 8003ffe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004002:	4641      	mov	r1, r8
 8004004:	1851      	adds	r1, r2, r1
 8004006:	6039      	str	r1, [r7, #0]
 8004008:	4649      	mov	r1, r9
 800400a:	414b      	adcs	r3, r1
 800400c:	607b      	str	r3, [r7, #4]
 800400e:	f04f 0200 	mov.w	r2, #0
 8004012:	f04f 0300 	mov.w	r3, #0
 8004016:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800401a:	4659      	mov	r1, fp
 800401c:	00cb      	lsls	r3, r1, #3
 800401e:	4651      	mov	r1, sl
 8004020:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004024:	4651      	mov	r1, sl
 8004026:	00ca      	lsls	r2, r1, #3
 8004028:	4610      	mov	r0, r2
 800402a:	4619      	mov	r1, r3
 800402c:	4603      	mov	r3, r0
 800402e:	4642      	mov	r2, r8
 8004030:	189b      	adds	r3, r3, r2
 8004032:	66bb      	str	r3, [r7, #104]	; 0x68
 8004034:	464b      	mov	r3, r9
 8004036:	460a      	mov	r2, r1
 8004038:	eb42 0303 	adc.w	r3, r2, r3
 800403c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800403e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	2200      	movs	r2, #0
 8004046:	663b      	str	r3, [r7, #96]	; 0x60
 8004048:	667a      	str	r2, [r7, #100]	; 0x64
 800404a:	f04f 0200 	mov.w	r2, #0
 800404e:	f04f 0300 	mov.w	r3, #0
 8004052:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004056:	4649      	mov	r1, r9
 8004058:	008b      	lsls	r3, r1, #2
 800405a:	4641      	mov	r1, r8
 800405c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004060:	4641      	mov	r1, r8
 8004062:	008a      	lsls	r2, r1, #2
 8004064:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004068:	f7fc fbc0 	bl	80007ec <__aeabi_uldivmod>
 800406c:	4602      	mov	r2, r0
 800406e:	460b      	mov	r3, r1
 8004070:	4b0d      	ldr	r3, [pc, #52]	; (80040a8 <UART_SetConfig+0x4e4>)
 8004072:	fba3 1302 	umull	r1, r3, r3, r2
 8004076:	095b      	lsrs	r3, r3, #5
 8004078:	2164      	movs	r1, #100	; 0x64
 800407a:	fb01 f303 	mul.w	r3, r1, r3
 800407e:	1ad3      	subs	r3, r2, r3
 8004080:	011b      	lsls	r3, r3, #4
 8004082:	3332      	adds	r3, #50	; 0x32
 8004084:	4a08      	ldr	r2, [pc, #32]	; (80040a8 <UART_SetConfig+0x4e4>)
 8004086:	fba2 2303 	umull	r2, r3, r2, r3
 800408a:	095b      	lsrs	r3, r3, #5
 800408c:	f003 020f 	and.w	r2, r3, #15
 8004090:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4422      	add	r2, r4
 8004098:	609a      	str	r2, [r3, #8]
}
 800409a:	bf00      	nop
 800409c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80040a0:	46bd      	mov	sp, r7
 80040a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80040a6:	bf00      	nop
 80040a8:	51eb851f 	.word	0x51eb851f

080040ac <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80040b0:	4904      	ldr	r1, [pc, #16]	; (80040c4 <MX_FATFS_Init+0x18>)
 80040b2:	4805      	ldr	r0, [pc, #20]	; (80040c8 <MX_FATFS_Init+0x1c>)
 80040b4:	f003 f9de 	bl	8007474 <FATFS_LinkDriver>
 80040b8:	4603      	mov	r3, r0
 80040ba:	461a      	mov	r2, r3
 80040bc:	4b03      	ldr	r3, [pc, #12]	; (80040cc <MX_FATFS_Init+0x20>)
 80040be:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80040c0:	bf00      	nop
 80040c2:	bd80      	pop	{r7, pc}
 80040c4:	200013f8 	.word	0x200013f8
 80040c8:	2000000c 	.word	0x2000000c
 80040cc:	200013f4 	.word	0x200013f4

080040d0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80040d0:	b480      	push	{r7}
 80040d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80040d4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr

080040e0 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b083      	sub	sp, #12
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	4603      	mov	r3, r0
 80040e8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 80040ea:	4b06      	ldr	r3, [pc, #24]	; (8004104 <USER_initialize+0x24>)
 80040ec:	2201      	movs	r2, #1
 80040ee:	701a      	strb	r2, [r3, #0]
    return Stat;
 80040f0:	4b04      	ldr	r3, [pc, #16]	; (8004104 <USER_initialize+0x24>)
 80040f2:	781b      	ldrb	r3, [r3, #0]
 80040f4:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	370c      	adds	r7, #12
 80040fa:	46bd      	mov	sp, r7
 80040fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004100:	4770      	bx	lr
 8004102:	bf00      	nop
 8004104:	20000009 	.word	0x20000009

08004108 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8004108:	b480      	push	{r7}
 800410a:	b083      	sub	sp, #12
 800410c:	af00      	add	r7, sp, #0
 800410e:	4603      	mov	r3, r0
 8004110:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 8004112:	4b06      	ldr	r3, [pc, #24]	; (800412c <USER_status+0x24>)
 8004114:	2201      	movs	r2, #1
 8004116:	701a      	strb	r2, [r3, #0]
    return Stat;
 8004118:	4b04      	ldr	r3, [pc, #16]	; (800412c <USER_status+0x24>)
 800411a:	781b      	ldrb	r3, [r3, #0]
 800411c:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800411e:	4618      	mov	r0, r3
 8004120:	370c      	adds	r7, #12
 8004122:	46bd      	mov	sp, r7
 8004124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004128:	4770      	bx	lr
 800412a:	bf00      	nop
 800412c:	20000009 	.word	0x20000009

08004130 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8004130:	b480      	push	{r7}
 8004132:	b085      	sub	sp, #20
 8004134:	af00      	add	r7, sp, #0
 8004136:	60b9      	str	r1, [r7, #8]
 8004138:	607a      	str	r2, [r7, #4]
 800413a:	603b      	str	r3, [r7, #0]
 800413c:	4603      	mov	r3, r0
 800413e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 8004140:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 8004142:	4618      	mov	r0, r3
 8004144:	3714      	adds	r7, #20
 8004146:	46bd      	mov	sp, r7
 8004148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414c:	4770      	bx	lr

0800414e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800414e:	b480      	push	{r7}
 8004150:	b085      	sub	sp, #20
 8004152:	af00      	add	r7, sp, #0
 8004154:	60b9      	str	r1, [r7, #8]
 8004156:	607a      	str	r2, [r7, #4]
 8004158:	603b      	str	r3, [r7, #0]
 800415a:	4603      	mov	r3, r0
 800415c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 800415e:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 8004160:	4618      	mov	r0, r3
 8004162:	3714      	adds	r7, #20
 8004164:	46bd      	mov	sp, r7
 8004166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416a:	4770      	bx	lr

0800416c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800416c:	b480      	push	{r7}
 800416e:	b085      	sub	sp, #20
 8004170:	af00      	add	r7, sp, #0
 8004172:	4603      	mov	r3, r0
 8004174:	603a      	str	r2, [r7, #0]
 8004176:	71fb      	strb	r3, [r7, #7]
 8004178:	460b      	mov	r3, r1
 800417a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 800417c:	2301      	movs	r3, #1
 800417e:	73fb      	strb	r3, [r7, #15]
    return res;
 8004180:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 8004182:	4618      	mov	r0, r3
 8004184:	3714      	adds	r7, #20
 8004186:	46bd      	mov	sp, r7
 8004188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418c:	4770      	bx	lr
	...

08004190 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b084      	sub	sp, #16
 8004194:	af00      	add	r7, sp, #0
 8004196:	4603      	mov	r3, r0
 8004198:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800419a:	79fb      	ldrb	r3, [r7, #7]
 800419c:	4a08      	ldr	r2, [pc, #32]	; (80041c0 <disk_status+0x30>)
 800419e:	009b      	lsls	r3, r3, #2
 80041a0:	4413      	add	r3, r2
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	79fa      	ldrb	r2, [r7, #7]
 80041a8:	4905      	ldr	r1, [pc, #20]	; (80041c0 <disk_status+0x30>)
 80041aa:	440a      	add	r2, r1
 80041ac:	7a12      	ldrb	r2, [r2, #8]
 80041ae:	4610      	mov	r0, r2
 80041b0:	4798      	blx	r3
 80041b2:	4603      	mov	r3, r0
 80041b4:	73fb      	strb	r3, [r7, #15]
  return stat;
 80041b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	3710      	adds	r7, #16
 80041bc:	46bd      	mov	sp, r7
 80041be:	bd80      	pop	{r7, pc}
 80041c0:	20001424 	.word	0x20001424

080041c4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b084      	sub	sp, #16
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	4603      	mov	r3, r0
 80041cc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80041ce:	2300      	movs	r3, #0
 80041d0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80041d2:	79fb      	ldrb	r3, [r7, #7]
 80041d4:	4a0d      	ldr	r2, [pc, #52]	; (800420c <disk_initialize+0x48>)
 80041d6:	5cd3      	ldrb	r3, [r2, r3]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d111      	bne.n	8004200 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80041dc:	79fb      	ldrb	r3, [r7, #7]
 80041de:	4a0b      	ldr	r2, [pc, #44]	; (800420c <disk_initialize+0x48>)
 80041e0:	2101      	movs	r1, #1
 80041e2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80041e4:	79fb      	ldrb	r3, [r7, #7]
 80041e6:	4a09      	ldr	r2, [pc, #36]	; (800420c <disk_initialize+0x48>)
 80041e8:	009b      	lsls	r3, r3, #2
 80041ea:	4413      	add	r3, r2
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	79fa      	ldrb	r2, [r7, #7]
 80041f2:	4906      	ldr	r1, [pc, #24]	; (800420c <disk_initialize+0x48>)
 80041f4:	440a      	add	r2, r1
 80041f6:	7a12      	ldrb	r2, [r2, #8]
 80041f8:	4610      	mov	r0, r2
 80041fa:	4798      	blx	r3
 80041fc:	4603      	mov	r3, r0
 80041fe:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8004200:	7bfb      	ldrb	r3, [r7, #15]
}
 8004202:	4618      	mov	r0, r3
 8004204:	3710      	adds	r7, #16
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}
 800420a:	bf00      	nop
 800420c:	20001424 	.word	0x20001424

08004210 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8004210:	b590      	push	{r4, r7, lr}
 8004212:	b087      	sub	sp, #28
 8004214:	af00      	add	r7, sp, #0
 8004216:	60b9      	str	r1, [r7, #8]
 8004218:	607a      	str	r2, [r7, #4]
 800421a:	603b      	str	r3, [r7, #0]
 800421c:	4603      	mov	r3, r0
 800421e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8004220:	7bfb      	ldrb	r3, [r7, #15]
 8004222:	4a0a      	ldr	r2, [pc, #40]	; (800424c <disk_read+0x3c>)
 8004224:	009b      	lsls	r3, r3, #2
 8004226:	4413      	add	r3, r2
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	689c      	ldr	r4, [r3, #8]
 800422c:	7bfb      	ldrb	r3, [r7, #15]
 800422e:	4a07      	ldr	r2, [pc, #28]	; (800424c <disk_read+0x3c>)
 8004230:	4413      	add	r3, r2
 8004232:	7a18      	ldrb	r0, [r3, #8]
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	687a      	ldr	r2, [r7, #4]
 8004238:	68b9      	ldr	r1, [r7, #8]
 800423a:	47a0      	blx	r4
 800423c:	4603      	mov	r3, r0
 800423e:	75fb      	strb	r3, [r7, #23]
  return res;
 8004240:	7dfb      	ldrb	r3, [r7, #23]
}
 8004242:	4618      	mov	r0, r3
 8004244:	371c      	adds	r7, #28
 8004246:	46bd      	mov	sp, r7
 8004248:	bd90      	pop	{r4, r7, pc}
 800424a:	bf00      	nop
 800424c:	20001424 	.word	0x20001424

08004250 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8004250:	b590      	push	{r4, r7, lr}
 8004252:	b087      	sub	sp, #28
 8004254:	af00      	add	r7, sp, #0
 8004256:	60b9      	str	r1, [r7, #8]
 8004258:	607a      	str	r2, [r7, #4]
 800425a:	603b      	str	r3, [r7, #0]
 800425c:	4603      	mov	r3, r0
 800425e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8004260:	7bfb      	ldrb	r3, [r7, #15]
 8004262:	4a0a      	ldr	r2, [pc, #40]	; (800428c <disk_write+0x3c>)
 8004264:	009b      	lsls	r3, r3, #2
 8004266:	4413      	add	r3, r2
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	68dc      	ldr	r4, [r3, #12]
 800426c:	7bfb      	ldrb	r3, [r7, #15]
 800426e:	4a07      	ldr	r2, [pc, #28]	; (800428c <disk_write+0x3c>)
 8004270:	4413      	add	r3, r2
 8004272:	7a18      	ldrb	r0, [r3, #8]
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	687a      	ldr	r2, [r7, #4]
 8004278:	68b9      	ldr	r1, [r7, #8]
 800427a:	47a0      	blx	r4
 800427c:	4603      	mov	r3, r0
 800427e:	75fb      	strb	r3, [r7, #23]
  return res;
 8004280:	7dfb      	ldrb	r3, [r7, #23]
}
 8004282:	4618      	mov	r0, r3
 8004284:	371c      	adds	r7, #28
 8004286:	46bd      	mov	sp, r7
 8004288:	bd90      	pop	{r4, r7, pc}
 800428a:	bf00      	nop
 800428c:	20001424 	.word	0x20001424

08004290 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b084      	sub	sp, #16
 8004294:	af00      	add	r7, sp, #0
 8004296:	4603      	mov	r3, r0
 8004298:	603a      	str	r2, [r7, #0]
 800429a:	71fb      	strb	r3, [r7, #7]
 800429c:	460b      	mov	r3, r1
 800429e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80042a0:	79fb      	ldrb	r3, [r7, #7]
 80042a2:	4a09      	ldr	r2, [pc, #36]	; (80042c8 <disk_ioctl+0x38>)
 80042a4:	009b      	lsls	r3, r3, #2
 80042a6:	4413      	add	r3, r2
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	691b      	ldr	r3, [r3, #16]
 80042ac:	79fa      	ldrb	r2, [r7, #7]
 80042ae:	4906      	ldr	r1, [pc, #24]	; (80042c8 <disk_ioctl+0x38>)
 80042b0:	440a      	add	r2, r1
 80042b2:	7a10      	ldrb	r0, [r2, #8]
 80042b4:	79b9      	ldrb	r1, [r7, #6]
 80042b6:	683a      	ldr	r2, [r7, #0]
 80042b8:	4798      	blx	r3
 80042ba:	4603      	mov	r3, r0
 80042bc:	73fb      	strb	r3, [r7, #15]
  return res;
 80042be:	7bfb      	ldrb	r3, [r7, #15]
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	3710      	adds	r7, #16
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bd80      	pop	{r7, pc}
 80042c8:	20001424 	.word	0x20001424

080042cc <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80042cc:	b480      	push	{r7}
 80042ce:	b085      	sub	sp, #20
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	3301      	adds	r3, #1
 80042d8:	781b      	ldrb	r3, [r3, #0]
 80042da:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80042dc:	89fb      	ldrh	r3, [r7, #14]
 80042de:	021b      	lsls	r3, r3, #8
 80042e0:	b21a      	sxth	r2, r3
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	781b      	ldrb	r3, [r3, #0]
 80042e6:	b21b      	sxth	r3, r3
 80042e8:	4313      	orrs	r3, r2
 80042ea:	b21b      	sxth	r3, r3
 80042ec:	81fb      	strh	r3, [r7, #14]
	return rv;
 80042ee:	89fb      	ldrh	r3, [r7, #14]
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	3714      	adds	r7, #20
 80042f4:	46bd      	mov	sp, r7
 80042f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fa:	4770      	bx	lr

080042fc <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80042fc:	b480      	push	{r7}
 80042fe:	b085      	sub	sp, #20
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	3303      	adds	r3, #3
 8004308:	781b      	ldrb	r3, [r3, #0]
 800430a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	021b      	lsls	r3, r3, #8
 8004310:	687a      	ldr	r2, [r7, #4]
 8004312:	3202      	adds	r2, #2
 8004314:	7812      	ldrb	r2, [r2, #0]
 8004316:	4313      	orrs	r3, r2
 8004318:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	021b      	lsls	r3, r3, #8
 800431e:	687a      	ldr	r2, [r7, #4]
 8004320:	3201      	adds	r2, #1
 8004322:	7812      	ldrb	r2, [r2, #0]
 8004324:	4313      	orrs	r3, r2
 8004326:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	021b      	lsls	r3, r3, #8
 800432c:	687a      	ldr	r2, [r7, #4]
 800432e:	7812      	ldrb	r2, [r2, #0]
 8004330:	4313      	orrs	r3, r2
 8004332:	60fb      	str	r3, [r7, #12]
	return rv;
 8004334:	68fb      	ldr	r3, [r7, #12]
}
 8004336:	4618      	mov	r0, r3
 8004338:	3714      	adds	r7, #20
 800433a:	46bd      	mov	sp, r7
 800433c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004340:	4770      	bx	lr

08004342 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8004342:	b480      	push	{r7}
 8004344:	b083      	sub	sp, #12
 8004346:	af00      	add	r7, sp, #0
 8004348:	6078      	str	r0, [r7, #4]
 800434a:	460b      	mov	r3, r1
 800434c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	1c5a      	adds	r2, r3, #1
 8004352:	607a      	str	r2, [r7, #4]
 8004354:	887a      	ldrh	r2, [r7, #2]
 8004356:	b2d2      	uxtb	r2, r2
 8004358:	701a      	strb	r2, [r3, #0]
 800435a:	887b      	ldrh	r3, [r7, #2]
 800435c:	0a1b      	lsrs	r3, r3, #8
 800435e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	1c5a      	adds	r2, r3, #1
 8004364:	607a      	str	r2, [r7, #4]
 8004366:	887a      	ldrh	r2, [r7, #2]
 8004368:	b2d2      	uxtb	r2, r2
 800436a:	701a      	strb	r2, [r3, #0]
}
 800436c:	bf00      	nop
 800436e:	370c      	adds	r7, #12
 8004370:	46bd      	mov	sp, r7
 8004372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004376:	4770      	bx	lr

08004378 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8004378:	b480      	push	{r7}
 800437a:	b083      	sub	sp, #12
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
 8004380:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	1c5a      	adds	r2, r3, #1
 8004386:	607a      	str	r2, [r7, #4]
 8004388:	683a      	ldr	r2, [r7, #0]
 800438a:	b2d2      	uxtb	r2, r2
 800438c:	701a      	strb	r2, [r3, #0]
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	0a1b      	lsrs	r3, r3, #8
 8004392:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	1c5a      	adds	r2, r3, #1
 8004398:	607a      	str	r2, [r7, #4]
 800439a:	683a      	ldr	r2, [r7, #0]
 800439c:	b2d2      	uxtb	r2, r2
 800439e:	701a      	strb	r2, [r3, #0]
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	0a1b      	lsrs	r3, r3, #8
 80043a4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	1c5a      	adds	r2, r3, #1
 80043aa:	607a      	str	r2, [r7, #4]
 80043ac:	683a      	ldr	r2, [r7, #0]
 80043ae:	b2d2      	uxtb	r2, r2
 80043b0:	701a      	strb	r2, [r3, #0]
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	0a1b      	lsrs	r3, r3, #8
 80043b6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	1c5a      	adds	r2, r3, #1
 80043bc:	607a      	str	r2, [r7, #4]
 80043be:	683a      	ldr	r2, [r7, #0]
 80043c0:	b2d2      	uxtb	r2, r2
 80043c2:	701a      	strb	r2, [r3, #0]
}
 80043c4:	bf00      	nop
 80043c6:	370c      	adds	r7, #12
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr

080043d0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80043d0:	b480      	push	{r7}
 80043d2:	b087      	sub	sp, #28
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	60f8      	str	r0, [r7, #12]
 80043d8:	60b9      	str	r1, [r7, #8]
 80043da:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d00d      	beq.n	8004406 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80043ea:	693a      	ldr	r2, [r7, #16]
 80043ec:	1c53      	adds	r3, r2, #1
 80043ee:	613b      	str	r3, [r7, #16]
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	1c59      	adds	r1, r3, #1
 80043f4:	6179      	str	r1, [r7, #20]
 80043f6:	7812      	ldrb	r2, [r2, #0]
 80043f8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	3b01      	subs	r3, #1
 80043fe:	607b      	str	r3, [r7, #4]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d1f1      	bne.n	80043ea <mem_cpy+0x1a>
	}
}
 8004406:	bf00      	nop
 8004408:	371c      	adds	r7, #28
 800440a:	46bd      	mov	sp, r7
 800440c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004410:	4770      	bx	lr

08004412 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8004412:	b480      	push	{r7}
 8004414:	b087      	sub	sp, #28
 8004416:	af00      	add	r7, sp, #0
 8004418:	60f8      	str	r0, [r7, #12]
 800441a:	60b9      	str	r1, [r7, #8]
 800441c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	1c5a      	adds	r2, r3, #1
 8004426:	617a      	str	r2, [r7, #20]
 8004428:	68ba      	ldr	r2, [r7, #8]
 800442a:	b2d2      	uxtb	r2, r2
 800442c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	3b01      	subs	r3, #1
 8004432:	607b      	str	r3, [r7, #4]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d1f3      	bne.n	8004422 <mem_set+0x10>
}
 800443a:	bf00      	nop
 800443c:	bf00      	nop
 800443e:	371c      	adds	r7, #28
 8004440:	46bd      	mov	sp, r7
 8004442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004446:	4770      	bx	lr

08004448 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8004448:	b480      	push	{r7}
 800444a:	b089      	sub	sp, #36	; 0x24
 800444c:	af00      	add	r7, sp, #0
 800444e:	60f8      	str	r0, [r7, #12]
 8004450:	60b9      	str	r1, [r7, #8]
 8004452:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	61fb      	str	r3, [r7, #28]
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800445c:	2300      	movs	r3, #0
 800445e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8004460:	69fb      	ldr	r3, [r7, #28]
 8004462:	1c5a      	adds	r2, r3, #1
 8004464:	61fa      	str	r2, [r7, #28]
 8004466:	781b      	ldrb	r3, [r3, #0]
 8004468:	4619      	mov	r1, r3
 800446a:	69bb      	ldr	r3, [r7, #24]
 800446c:	1c5a      	adds	r2, r3, #1
 800446e:	61ba      	str	r2, [r7, #24]
 8004470:	781b      	ldrb	r3, [r3, #0]
 8004472:	1acb      	subs	r3, r1, r3
 8004474:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	3b01      	subs	r3, #1
 800447a:	607b      	str	r3, [r7, #4]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d002      	beq.n	8004488 <mem_cmp+0x40>
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d0eb      	beq.n	8004460 <mem_cmp+0x18>

	return r;
 8004488:	697b      	ldr	r3, [r7, #20]
}
 800448a:	4618      	mov	r0, r3
 800448c:	3724      	adds	r7, #36	; 0x24
 800448e:	46bd      	mov	sp, r7
 8004490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004494:	4770      	bx	lr

08004496 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8004496:	b480      	push	{r7}
 8004498:	b083      	sub	sp, #12
 800449a:	af00      	add	r7, sp, #0
 800449c:	6078      	str	r0, [r7, #4]
 800449e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80044a0:	e002      	b.n	80044a8 <chk_chr+0x12>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	3301      	adds	r3, #1
 80044a6:	607b      	str	r3, [r7, #4]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	781b      	ldrb	r3, [r3, #0]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d005      	beq.n	80044bc <chk_chr+0x26>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	781b      	ldrb	r3, [r3, #0]
 80044b4:	461a      	mov	r2, r3
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d1f2      	bne.n	80044a2 <chk_chr+0xc>
	return *str;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	781b      	ldrb	r3, [r3, #0]
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	370c      	adds	r7, #12
 80044c4:	46bd      	mov	sp, r7
 80044c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ca:	4770      	bx	lr

080044cc <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b082      	sub	sp, #8
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d009      	beq.n	80044ee <lock_fs+0x22>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	695b      	ldr	r3, [r3, #20]
 80044de:	4618      	mov	r0, r3
 80044e0:	f003 f8c5 	bl	800766e <ff_req_grant>
 80044e4:	4603      	mov	r3, r0
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d001      	beq.n	80044ee <lock_fs+0x22>
 80044ea:	2301      	movs	r3, #1
 80044ec:	e000      	b.n	80044f0 <lock_fs+0x24>
 80044ee:	2300      	movs	r3, #0
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	3708      	adds	r7, #8
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}

080044f8 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b082      	sub	sp, #8
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
 8004500:	460b      	mov	r3, r1
 8004502:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d00d      	beq.n	8004526 <unlock_fs+0x2e>
 800450a:	78fb      	ldrb	r3, [r7, #3]
 800450c:	2b0c      	cmp	r3, #12
 800450e:	d00a      	beq.n	8004526 <unlock_fs+0x2e>
 8004510:	78fb      	ldrb	r3, [r7, #3]
 8004512:	2b0b      	cmp	r3, #11
 8004514:	d007      	beq.n	8004526 <unlock_fs+0x2e>
 8004516:	78fb      	ldrb	r3, [r7, #3]
 8004518:	2b0f      	cmp	r3, #15
 800451a:	d004      	beq.n	8004526 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	695b      	ldr	r3, [r3, #20]
 8004520:	4618      	mov	r0, r3
 8004522:	f003 f8b9 	bl	8007698 <ff_rel_grant>
	}
}
 8004526:	bf00      	nop
 8004528:	3708      	adds	r7, #8
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}
	...

08004530 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004530:	b480      	push	{r7}
 8004532:	b085      	sub	sp, #20
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
 8004538:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800453a:	2300      	movs	r3, #0
 800453c:	60bb      	str	r3, [r7, #8]
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	60fb      	str	r3, [r7, #12]
 8004542:	e029      	b.n	8004598 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8004544:	4a27      	ldr	r2, [pc, #156]	; (80045e4 <chk_lock+0xb4>)
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	011b      	lsls	r3, r3, #4
 800454a:	4413      	add	r3, r2
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d01d      	beq.n	800458e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004552:	4a24      	ldr	r2, [pc, #144]	; (80045e4 <chk_lock+0xb4>)
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	011b      	lsls	r3, r3, #4
 8004558:	4413      	add	r3, r2
 800455a:	681a      	ldr	r2, [r3, #0]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	429a      	cmp	r2, r3
 8004562:	d116      	bne.n	8004592 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8004564:	4a1f      	ldr	r2, [pc, #124]	; (80045e4 <chk_lock+0xb4>)
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	011b      	lsls	r3, r3, #4
 800456a:	4413      	add	r3, r2
 800456c:	3304      	adds	r3, #4
 800456e:	681a      	ldr	r2, [r3, #0]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004574:	429a      	cmp	r2, r3
 8004576:	d10c      	bne.n	8004592 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004578:	4a1a      	ldr	r2, [pc, #104]	; (80045e4 <chk_lock+0xb4>)
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	011b      	lsls	r3, r3, #4
 800457e:	4413      	add	r3, r2
 8004580:	3308      	adds	r3, #8
 8004582:	681a      	ldr	r2, [r3, #0]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8004588:	429a      	cmp	r2, r3
 800458a:	d102      	bne.n	8004592 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800458c:	e007      	b.n	800459e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800458e:	2301      	movs	r3, #1
 8004590:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	3301      	adds	r3, #1
 8004596:	60fb      	str	r3, [r7, #12]
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2b01      	cmp	r3, #1
 800459c:	d9d2      	bls.n	8004544 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	2b02      	cmp	r3, #2
 80045a2:	d109      	bne.n	80045b8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d102      	bne.n	80045b0 <chk_lock+0x80>
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	2b02      	cmp	r3, #2
 80045ae:	d101      	bne.n	80045b4 <chk_lock+0x84>
 80045b0:	2300      	movs	r3, #0
 80045b2:	e010      	b.n	80045d6 <chk_lock+0xa6>
 80045b4:	2312      	movs	r3, #18
 80045b6:	e00e      	b.n	80045d6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d108      	bne.n	80045d0 <chk_lock+0xa0>
 80045be:	4a09      	ldr	r2, [pc, #36]	; (80045e4 <chk_lock+0xb4>)
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	011b      	lsls	r3, r3, #4
 80045c4:	4413      	add	r3, r2
 80045c6:	330c      	adds	r3, #12
 80045c8:	881b      	ldrh	r3, [r3, #0]
 80045ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045ce:	d101      	bne.n	80045d4 <chk_lock+0xa4>
 80045d0:	2310      	movs	r3, #16
 80045d2:	e000      	b.n	80045d6 <chk_lock+0xa6>
 80045d4:	2300      	movs	r3, #0
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	3714      	adds	r7, #20
 80045da:	46bd      	mov	sp, r7
 80045dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e0:	4770      	bx	lr
 80045e2:	bf00      	nop
 80045e4:	20001404 	.word	0x20001404

080045e8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80045e8:	b480      	push	{r7}
 80045ea:	b083      	sub	sp, #12
 80045ec:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80045ee:	2300      	movs	r3, #0
 80045f0:	607b      	str	r3, [r7, #4]
 80045f2:	e002      	b.n	80045fa <enq_lock+0x12>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	3301      	adds	r3, #1
 80045f8:	607b      	str	r3, [r7, #4]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2b01      	cmp	r3, #1
 80045fe:	d806      	bhi.n	800460e <enq_lock+0x26>
 8004600:	4a09      	ldr	r2, [pc, #36]	; (8004628 <enq_lock+0x40>)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	011b      	lsls	r3, r3, #4
 8004606:	4413      	add	r3, r2
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d1f2      	bne.n	80045f4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2b02      	cmp	r3, #2
 8004612:	bf14      	ite	ne
 8004614:	2301      	movne	r3, #1
 8004616:	2300      	moveq	r3, #0
 8004618:	b2db      	uxtb	r3, r3
}
 800461a:	4618      	mov	r0, r3
 800461c:	370c      	adds	r7, #12
 800461e:	46bd      	mov	sp, r7
 8004620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004624:	4770      	bx	lr
 8004626:	bf00      	nop
 8004628:	20001404 	.word	0x20001404

0800462c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800462c:	b480      	push	{r7}
 800462e:	b085      	sub	sp, #20
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
 8004634:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004636:	2300      	movs	r3, #0
 8004638:	60fb      	str	r3, [r7, #12]
 800463a:	e01f      	b.n	800467c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800463c:	4a41      	ldr	r2, [pc, #260]	; (8004744 <inc_lock+0x118>)
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	011b      	lsls	r3, r3, #4
 8004642:	4413      	add	r3, r2
 8004644:	681a      	ldr	r2, [r3, #0]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	429a      	cmp	r2, r3
 800464c:	d113      	bne.n	8004676 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800464e:	4a3d      	ldr	r2, [pc, #244]	; (8004744 <inc_lock+0x118>)
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	011b      	lsls	r3, r3, #4
 8004654:	4413      	add	r3, r2
 8004656:	3304      	adds	r3, #4
 8004658:	681a      	ldr	r2, [r3, #0]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800465e:	429a      	cmp	r2, r3
 8004660:	d109      	bne.n	8004676 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8004662:	4a38      	ldr	r2, [pc, #224]	; (8004744 <inc_lock+0x118>)
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	011b      	lsls	r3, r3, #4
 8004668:	4413      	add	r3, r2
 800466a:	3308      	adds	r3, #8
 800466c:	681a      	ldr	r2, [r3, #0]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8004672:	429a      	cmp	r2, r3
 8004674:	d006      	beq.n	8004684 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	3301      	adds	r3, #1
 800467a:	60fb      	str	r3, [r7, #12]
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	2b01      	cmp	r3, #1
 8004680:	d9dc      	bls.n	800463c <inc_lock+0x10>
 8004682:	e000      	b.n	8004686 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8004684:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2b02      	cmp	r3, #2
 800468a:	d132      	bne.n	80046f2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800468c:	2300      	movs	r3, #0
 800468e:	60fb      	str	r3, [r7, #12]
 8004690:	e002      	b.n	8004698 <inc_lock+0x6c>
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	3301      	adds	r3, #1
 8004696:	60fb      	str	r3, [r7, #12]
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2b01      	cmp	r3, #1
 800469c:	d806      	bhi.n	80046ac <inc_lock+0x80>
 800469e:	4a29      	ldr	r2, [pc, #164]	; (8004744 <inc_lock+0x118>)
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	011b      	lsls	r3, r3, #4
 80046a4:	4413      	add	r3, r2
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d1f2      	bne.n	8004692 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2b02      	cmp	r3, #2
 80046b0:	d101      	bne.n	80046b6 <inc_lock+0x8a>
 80046b2:	2300      	movs	r3, #0
 80046b4:	e040      	b.n	8004738 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	4922      	ldr	r1, [pc, #136]	; (8004744 <inc_lock+0x118>)
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	011b      	lsls	r3, r3, #4
 80046c0:	440b      	add	r3, r1
 80046c2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	689a      	ldr	r2, [r3, #8]
 80046c8:	491e      	ldr	r1, [pc, #120]	; (8004744 <inc_lock+0x118>)
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	011b      	lsls	r3, r3, #4
 80046ce:	440b      	add	r3, r1
 80046d0:	3304      	adds	r3, #4
 80046d2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	695a      	ldr	r2, [r3, #20]
 80046d8:	491a      	ldr	r1, [pc, #104]	; (8004744 <inc_lock+0x118>)
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	011b      	lsls	r3, r3, #4
 80046de:	440b      	add	r3, r1
 80046e0:	3308      	adds	r3, #8
 80046e2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80046e4:	4a17      	ldr	r2, [pc, #92]	; (8004744 <inc_lock+0x118>)
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	011b      	lsls	r3, r3, #4
 80046ea:	4413      	add	r3, r2
 80046ec:	330c      	adds	r3, #12
 80046ee:	2200      	movs	r2, #0
 80046f0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d009      	beq.n	800470c <inc_lock+0xe0>
 80046f8:	4a12      	ldr	r2, [pc, #72]	; (8004744 <inc_lock+0x118>)
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	011b      	lsls	r3, r3, #4
 80046fe:	4413      	add	r3, r2
 8004700:	330c      	adds	r3, #12
 8004702:	881b      	ldrh	r3, [r3, #0]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d001      	beq.n	800470c <inc_lock+0xe0>
 8004708:	2300      	movs	r3, #0
 800470a:	e015      	b.n	8004738 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d108      	bne.n	8004724 <inc_lock+0xf8>
 8004712:	4a0c      	ldr	r2, [pc, #48]	; (8004744 <inc_lock+0x118>)
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	011b      	lsls	r3, r3, #4
 8004718:	4413      	add	r3, r2
 800471a:	330c      	adds	r3, #12
 800471c:	881b      	ldrh	r3, [r3, #0]
 800471e:	3301      	adds	r3, #1
 8004720:	b29a      	uxth	r2, r3
 8004722:	e001      	b.n	8004728 <inc_lock+0xfc>
 8004724:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004728:	4906      	ldr	r1, [pc, #24]	; (8004744 <inc_lock+0x118>)
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	011b      	lsls	r3, r3, #4
 800472e:	440b      	add	r3, r1
 8004730:	330c      	adds	r3, #12
 8004732:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	3301      	adds	r3, #1
}
 8004738:	4618      	mov	r0, r3
 800473a:	3714      	adds	r7, #20
 800473c:	46bd      	mov	sp, r7
 800473e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004742:	4770      	bx	lr
 8004744:	20001404 	.word	0x20001404

08004748 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8004748:	b480      	push	{r7}
 800474a:	b085      	sub	sp, #20
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	3b01      	subs	r3, #1
 8004754:	607b      	str	r3, [r7, #4]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2b01      	cmp	r3, #1
 800475a:	d825      	bhi.n	80047a8 <dec_lock+0x60>
		n = Files[i].ctr;
 800475c:	4a17      	ldr	r2, [pc, #92]	; (80047bc <dec_lock+0x74>)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	011b      	lsls	r3, r3, #4
 8004762:	4413      	add	r3, r2
 8004764:	330c      	adds	r3, #12
 8004766:	881b      	ldrh	r3, [r3, #0]
 8004768:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800476a:	89fb      	ldrh	r3, [r7, #14]
 800476c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004770:	d101      	bne.n	8004776 <dec_lock+0x2e>
 8004772:	2300      	movs	r3, #0
 8004774:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8004776:	89fb      	ldrh	r3, [r7, #14]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d002      	beq.n	8004782 <dec_lock+0x3a>
 800477c:	89fb      	ldrh	r3, [r7, #14]
 800477e:	3b01      	subs	r3, #1
 8004780:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8004782:	4a0e      	ldr	r2, [pc, #56]	; (80047bc <dec_lock+0x74>)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	011b      	lsls	r3, r3, #4
 8004788:	4413      	add	r3, r2
 800478a:	330c      	adds	r3, #12
 800478c:	89fa      	ldrh	r2, [r7, #14]
 800478e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8004790:	89fb      	ldrh	r3, [r7, #14]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d105      	bne.n	80047a2 <dec_lock+0x5a>
 8004796:	4a09      	ldr	r2, [pc, #36]	; (80047bc <dec_lock+0x74>)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	011b      	lsls	r3, r3, #4
 800479c:	4413      	add	r3, r2
 800479e:	2200      	movs	r2, #0
 80047a0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80047a2:	2300      	movs	r3, #0
 80047a4:	737b      	strb	r3, [r7, #13]
 80047a6:	e001      	b.n	80047ac <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80047a8:	2302      	movs	r3, #2
 80047aa:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80047ac:	7b7b      	ldrb	r3, [r7, #13]
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	3714      	adds	r7, #20
 80047b2:	46bd      	mov	sp, r7
 80047b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b8:	4770      	bx	lr
 80047ba:	bf00      	nop
 80047bc:	20001404 	.word	0x20001404

080047c0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b085      	sub	sp, #20
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80047c8:	2300      	movs	r3, #0
 80047ca:	60fb      	str	r3, [r7, #12]
 80047cc:	e010      	b.n	80047f0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80047ce:	4a0d      	ldr	r2, [pc, #52]	; (8004804 <clear_lock+0x44>)
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	011b      	lsls	r3, r3, #4
 80047d4:	4413      	add	r3, r2
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	687a      	ldr	r2, [r7, #4]
 80047da:	429a      	cmp	r2, r3
 80047dc:	d105      	bne.n	80047ea <clear_lock+0x2a>
 80047de:	4a09      	ldr	r2, [pc, #36]	; (8004804 <clear_lock+0x44>)
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	011b      	lsls	r3, r3, #4
 80047e4:	4413      	add	r3, r2
 80047e6:	2200      	movs	r2, #0
 80047e8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	3301      	adds	r3, #1
 80047ee:	60fb      	str	r3, [r7, #12]
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	2b01      	cmp	r3, #1
 80047f4:	d9eb      	bls.n	80047ce <clear_lock+0xe>
	}
}
 80047f6:	bf00      	nop
 80047f8:	bf00      	nop
 80047fa:	3714      	adds	r7, #20
 80047fc:	46bd      	mov	sp, r7
 80047fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004802:	4770      	bx	lr
 8004804:	20001404 	.word	0x20001404

08004808 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b086      	sub	sp, #24
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8004810:	2300      	movs	r3, #0
 8004812:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	78db      	ldrb	r3, [r3, #3]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d034      	beq.n	8004886 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004820:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	7858      	ldrb	r0, [r3, #1]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800482c:	2301      	movs	r3, #1
 800482e:	697a      	ldr	r2, [r7, #20]
 8004830:	f7ff fd0e 	bl	8004250 <disk_write>
 8004834:	4603      	mov	r3, r0
 8004836:	2b00      	cmp	r3, #0
 8004838:	d002      	beq.n	8004840 <sync_window+0x38>
			res = FR_DISK_ERR;
 800483a:	2301      	movs	r3, #1
 800483c:	73fb      	strb	r3, [r7, #15]
 800483e:	e022      	b.n	8004886 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2200      	movs	r2, #0
 8004844:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800484a:	697a      	ldr	r2, [r7, #20]
 800484c:	1ad2      	subs	r2, r2, r3
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004852:	429a      	cmp	r2, r3
 8004854:	d217      	bcs.n	8004886 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	789b      	ldrb	r3, [r3, #2]
 800485a:	613b      	str	r3, [r7, #16]
 800485c:	e010      	b.n	8004880 <sync_window+0x78>
					wsect += fs->fsize;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004862:	697a      	ldr	r2, [r7, #20]
 8004864:	4413      	add	r3, r2
 8004866:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	7858      	ldrb	r0, [r3, #1]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8004872:	2301      	movs	r3, #1
 8004874:	697a      	ldr	r2, [r7, #20]
 8004876:	f7ff fceb 	bl	8004250 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	3b01      	subs	r3, #1
 800487e:	613b      	str	r3, [r7, #16]
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	2b01      	cmp	r3, #1
 8004884:	d8eb      	bhi.n	800485e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8004886:	7bfb      	ldrb	r3, [r7, #15]
}
 8004888:	4618      	mov	r0, r3
 800488a:	3718      	adds	r7, #24
 800488c:	46bd      	mov	sp, r7
 800488e:	bd80      	pop	{r7, pc}

08004890 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b084      	sub	sp, #16
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
 8004898:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800489a:	2300      	movs	r3, #0
 800489c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048a2:	683a      	ldr	r2, [r7, #0]
 80048a4:	429a      	cmp	r2, r3
 80048a6:	d01b      	beq.n	80048e0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80048a8:	6878      	ldr	r0, [r7, #4]
 80048aa:	f7ff ffad 	bl	8004808 <sync_window>
 80048ae:	4603      	mov	r3, r0
 80048b0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80048b2:	7bfb      	ldrb	r3, [r7, #15]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d113      	bne.n	80048e0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	7858      	ldrb	r0, [r3, #1]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80048c2:	2301      	movs	r3, #1
 80048c4:	683a      	ldr	r2, [r7, #0]
 80048c6:	f7ff fca3 	bl	8004210 <disk_read>
 80048ca:	4603      	mov	r3, r0
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d004      	beq.n	80048da <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80048d0:	f04f 33ff 	mov.w	r3, #4294967295
 80048d4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	683a      	ldr	r2, [r7, #0]
 80048de:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
	return res;
 80048e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80048e2:	4618      	mov	r0, r3
 80048e4:	3710      	adds	r7, #16
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bd80      	pop	{r7, pc}
	...

080048ec <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b084      	sub	sp, #16
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80048f4:	6878      	ldr	r0, [r7, #4]
 80048f6:	f7ff ff87 	bl	8004808 <sync_window>
 80048fa:	4603      	mov	r3, r0
 80048fc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80048fe:	7bfb      	ldrb	r3, [r7, #15]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d159      	bne.n	80049b8 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	781b      	ldrb	r3, [r3, #0]
 8004908:	2b03      	cmp	r3, #3
 800490a:	d149      	bne.n	80049a0 <sync_fs+0xb4>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	791b      	ldrb	r3, [r3, #4]
 8004910:	2b01      	cmp	r3, #1
 8004912:	d145      	bne.n	80049a0 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	899b      	ldrh	r3, [r3, #12]
 800491e:	461a      	mov	r2, r3
 8004920:	2100      	movs	r1, #0
 8004922:	f7ff fd76 	bl	8004412 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	333c      	adds	r3, #60	; 0x3c
 800492a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800492e:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8004932:	4618      	mov	r0, r3
 8004934:	f7ff fd05 	bl	8004342 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	333c      	adds	r3, #60	; 0x3c
 800493c:	4921      	ldr	r1, [pc, #132]	; (80049c4 <sync_fs+0xd8>)
 800493e:	4618      	mov	r0, r3
 8004940:	f7ff fd1a 	bl	8004378 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	333c      	adds	r3, #60	; 0x3c
 8004948:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800494c:	491e      	ldr	r1, [pc, #120]	; (80049c8 <sync_fs+0xdc>)
 800494e:	4618      	mov	r0, r3
 8004950:	f7ff fd12 	bl	8004378 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	333c      	adds	r3, #60	; 0x3c
 8004958:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	69db      	ldr	r3, [r3, #28]
 8004960:	4619      	mov	r1, r3
 8004962:	4610      	mov	r0, r2
 8004964:	f7ff fd08 	bl	8004378 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	333c      	adds	r3, #60	; 0x3c
 800496c:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	699b      	ldr	r3, [r3, #24]
 8004974:	4619      	mov	r1, r3
 8004976:	4610      	mov	r0, r2
 8004978:	f7ff fcfe 	bl	8004378 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004980:	1c5a      	adds	r2, r3, #1
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	639a      	str	r2, [r3, #56]	; 0x38
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	7858      	ldrb	r0, [r3, #1]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004994:	2301      	movs	r3, #1
 8004996:	f7ff fc5b 	bl	8004250 <disk_write>
			fs->fsi_flag = 0;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2200      	movs	r2, #0
 800499e:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	785b      	ldrb	r3, [r3, #1]
 80049a4:	2200      	movs	r2, #0
 80049a6:	2100      	movs	r1, #0
 80049a8:	4618      	mov	r0, r3
 80049aa:	f7ff fc71 	bl	8004290 <disk_ioctl>
 80049ae:	4603      	mov	r3, r0
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d001      	beq.n	80049b8 <sync_fs+0xcc>
 80049b4:	2301      	movs	r3, #1
 80049b6:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80049b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3710      	adds	r7, #16
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}
 80049c2:	bf00      	nop
 80049c4:	41615252 	.word	0x41615252
 80049c8:	61417272 	.word	0x61417272

080049cc <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b083      	sub	sp, #12
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
 80049d4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	3b02      	subs	r3, #2
 80049da:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6a1b      	ldr	r3, [r3, #32]
 80049e0:	3b02      	subs	r3, #2
 80049e2:	683a      	ldr	r2, [r7, #0]
 80049e4:	429a      	cmp	r2, r3
 80049e6:	d301      	bcc.n	80049ec <clust2sect+0x20>
 80049e8:	2300      	movs	r3, #0
 80049ea:	e008      	b.n	80049fe <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	895b      	ldrh	r3, [r3, #10]
 80049f0:	461a      	mov	r2, r3
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	fb03 f202 	mul.w	r2, r3, r2
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049fc:	4413      	add	r3, r2
}
 80049fe:	4618      	mov	r0, r3
 8004a00:	370c      	adds	r7, #12
 8004a02:	46bd      	mov	sp, r7
 8004a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a08:	4770      	bx	lr

08004a0a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8004a0a:	b580      	push	{r7, lr}
 8004a0c:	b086      	sub	sp, #24
 8004a0e:	af00      	add	r7, sp, #0
 8004a10:	6078      	str	r0, [r7, #4]
 8004a12:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	2b01      	cmp	r3, #1
 8004a1e:	d904      	bls.n	8004a2a <get_fat+0x20>
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	6a1b      	ldr	r3, [r3, #32]
 8004a24:	683a      	ldr	r2, [r7, #0]
 8004a26:	429a      	cmp	r2, r3
 8004a28:	d302      	bcc.n	8004a30 <get_fat+0x26>
		val = 1;	/* Internal error */
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	617b      	str	r3, [r7, #20]
 8004a2e:	e0bb      	b.n	8004ba8 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8004a30:	f04f 33ff 	mov.w	r3, #4294967295
 8004a34:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	781b      	ldrb	r3, [r3, #0]
 8004a3a:	2b03      	cmp	r3, #3
 8004a3c:	f000 8083 	beq.w	8004b46 <get_fat+0x13c>
 8004a40:	2b03      	cmp	r3, #3
 8004a42:	f300 80a7 	bgt.w	8004b94 <get_fat+0x18a>
 8004a46:	2b01      	cmp	r3, #1
 8004a48:	d002      	beq.n	8004a50 <get_fat+0x46>
 8004a4a:	2b02      	cmp	r3, #2
 8004a4c:	d056      	beq.n	8004afc <get_fat+0xf2>
 8004a4e:	e0a1      	b.n	8004b94 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	60fb      	str	r3, [r7, #12]
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	085b      	lsrs	r3, r3, #1
 8004a58:	68fa      	ldr	r2, [r7, #12]
 8004a5a:	4413      	add	r3, r2
 8004a5c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004a5e:	693b      	ldr	r3, [r7, #16]
 8004a60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	899b      	ldrh	r3, [r3, #12]
 8004a66:	4619      	mov	r1, r3
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8004a6e:	4413      	add	r3, r2
 8004a70:	4619      	mov	r1, r3
 8004a72:	6938      	ldr	r0, [r7, #16]
 8004a74:	f7ff ff0c 	bl	8004890 <move_window>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	f040 808d 	bne.w	8004b9a <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	1c5a      	adds	r2, r3, #1
 8004a84:	60fa      	str	r2, [r7, #12]
 8004a86:	693a      	ldr	r2, [r7, #16]
 8004a88:	8992      	ldrh	r2, [r2, #12]
 8004a8a:	fbb3 f1f2 	udiv	r1, r3, r2
 8004a8e:	fb01 f202 	mul.w	r2, r1, r2
 8004a92:	1a9b      	subs	r3, r3, r2
 8004a94:	693a      	ldr	r2, [r7, #16]
 8004a96:	4413      	add	r3, r2
 8004a98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a9c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	899b      	ldrh	r3, [r3, #12]
 8004aa6:	4619      	mov	r1, r3
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	fbb3 f3f1 	udiv	r3, r3, r1
 8004aae:	4413      	add	r3, r2
 8004ab0:	4619      	mov	r1, r3
 8004ab2:	6938      	ldr	r0, [r7, #16]
 8004ab4:	f7ff feec 	bl	8004890 <move_window>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d16f      	bne.n	8004b9e <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	899b      	ldrh	r3, [r3, #12]
 8004ac2:	461a      	mov	r2, r3
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	fbb3 f1f2 	udiv	r1, r3, r2
 8004aca:	fb01 f202 	mul.w	r2, r1, r2
 8004ace:	1a9b      	subs	r3, r3, r2
 8004ad0:	693a      	ldr	r2, [r7, #16]
 8004ad2:	4413      	add	r3, r2
 8004ad4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ad8:	021b      	lsls	r3, r3, #8
 8004ada:	461a      	mov	r2, r3
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	f003 0301 	and.w	r3, r3, #1
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d002      	beq.n	8004af2 <get_fat+0xe8>
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	091b      	lsrs	r3, r3, #4
 8004af0:	e002      	b.n	8004af8 <get_fat+0xee>
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004af8:	617b      	str	r3, [r7, #20]
			break;
 8004afa:	e055      	b.n	8004ba8 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004afc:	693b      	ldr	r3, [r7, #16]
 8004afe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	899b      	ldrh	r3, [r3, #12]
 8004b04:	085b      	lsrs	r3, r3, #1
 8004b06:	b29b      	uxth	r3, r3
 8004b08:	4619      	mov	r1, r3
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	fbb3 f3f1 	udiv	r3, r3, r1
 8004b10:	4413      	add	r3, r2
 8004b12:	4619      	mov	r1, r3
 8004b14:	6938      	ldr	r0, [r7, #16]
 8004b16:	f7ff febb 	bl	8004890 <move_window>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d140      	bne.n	8004ba2 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	005b      	lsls	r3, r3, #1
 8004b2a:	693a      	ldr	r2, [r7, #16]
 8004b2c:	8992      	ldrh	r2, [r2, #12]
 8004b2e:	fbb3 f0f2 	udiv	r0, r3, r2
 8004b32:	fb00 f202 	mul.w	r2, r0, r2
 8004b36:	1a9b      	subs	r3, r3, r2
 8004b38:	440b      	add	r3, r1
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f7ff fbc6 	bl	80042cc <ld_word>
 8004b40:	4603      	mov	r3, r0
 8004b42:	617b      	str	r3, [r7, #20]
			break;
 8004b44:	e030      	b.n	8004ba8 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	899b      	ldrh	r3, [r3, #12]
 8004b4e:	089b      	lsrs	r3, r3, #2
 8004b50:	b29b      	uxth	r3, r3
 8004b52:	4619      	mov	r1, r3
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	fbb3 f3f1 	udiv	r3, r3, r1
 8004b5a:	4413      	add	r3, r2
 8004b5c:	4619      	mov	r1, r3
 8004b5e:	6938      	ldr	r0, [r7, #16]
 8004b60:	f7ff fe96 	bl	8004890 <move_window>
 8004b64:	4603      	mov	r3, r0
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d11d      	bne.n	8004ba6 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8004b6a:	693b      	ldr	r3, [r7, #16]
 8004b6c:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	009b      	lsls	r3, r3, #2
 8004b74:	693a      	ldr	r2, [r7, #16]
 8004b76:	8992      	ldrh	r2, [r2, #12]
 8004b78:	fbb3 f0f2 	udiv	r0, r3, r2
 8004b7c:	fb00 f202 	mul.w	r2, r0, r2
 8004b80:	1a9b      	subs	r3, r3, r2
 8004b82:	440b      	add	r3, r1
 8004b84:	4618      	mov	r0, r3
 8004b86:	f7ff fbb9 	bl	80042fc <ld_dword>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004b90:	617b      	str	r3, [r7, #20]
			break;
 8004b92:	e009      	b.n	8004ba8 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8004b94:	2301      	movs	r3, #1
 8004b96:	617b      	str	r3, [r7, #20]
 8004b98:	e006      	b.n	8004ba8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004b9a:	bf00      	nop
 8004b9c:	e004      	b.n	8004ba8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004b9e:	bf00      	nop
 8004ba0:	e002      	b.n	8004ba8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004ba2:	bf00      	nop
 8004ba4:	e000      	b.n	8004ba8 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004ba6:	bf00      	nop
		}
	}

	return val;
 8004ba8:	697b      	ldr	r3, [r7, #20]
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	3718      	adds	r7, #24
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}

08004bb2 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8004bb2:	b590      	push	{r4, r7, lr}
 8004bb4:	b089      	sub	sp, #36	; 0x24
 8004bb6:	af00      	add	r7, sp, #0
 8004bb8:	60f8      	str	r0, [r7, #12]
 8004bba:	60b9      	str	r1, [r7, #8]
 8004bbc:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8004bbe:	2302      	movs	r3, #2
 8004bc0:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	2b01      	cmp	r3, #1
 8004bc6:	f240 8102 	bls.w	8004dce <put_fat+0x21c>
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	6a1b      	ldr	r3, [r3, #32]
 8004bce:	68ba      	ldr	r2, [r7, #8]
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	f080 80fc 	bcs.w	8004dce <put_fat+0x21c>
		switch (fs->fs_type) {
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	781b      	ldrb	r3, [r3, #0]
 8004bda:	2b03      	cmp	r3, #3
 8004bdc:	f000 80b6 	beq.w	8004d4c <put_fat+0x19a>
 8004be0:	2b03      	cmp	r3, #3
 8004be2:	f300 80fd 	bgt.w	8004de0 <put_fat+0x22e>
 8004be6:	2b01      	cmp	r3, #1
 8004be8:	d003      	beq.n	8004bf2 <put_fat+0x40>
 8004bea:	2b02      	cmp	r3, #2
 8004bec:	f000 8083 	beq.w	8004cf6 <put_fat+0x144>
 8004bf0:	e0f6      	b.n	8004de0 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	61bb      	str	r3, [r7, #24]
 8004bf6:	69bb      	ldr	r3, [r7, #24]
 8004bf8:	085b      	lsrs	r3, r3, #1
 8004bfa:	69ba      	ldr	r2, [r7, #24]
 8004bfc:	4413      	add	r3, r2
 8004bfe:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	899b      	ldrh	r3, [r3, #12]
 8004c08:	4619      	mov	r1, r3
 8004c0a:	69bb      	ldr	r3, [r7, #24]
 8004c0c:	fbb3 f3f1 	udiv	r3, r3, r1
 8004c10:	4413      	add	r3, r2
 8004c12:	4619      	mov	r1, r3
 8004c14:	68f8      	ldr	r0, [r7, #12]
 8004c16:	f7ff fe3b 	bl	8004890 <move_window>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004c1e:	7ffb      	ldrb	r3, [r7, #31]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	f040 80d6 	bne.w	8004dd2 <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8004c2c:	69bb      	ldr	r3, [r7, #24]
 8004c2e:	1c5a      	adds	r2, r3, #1
 8004c30:	61ba      	str	r2, [r7, #24]
 8004c32:	68fa      	ldr	r2, [r7, #12]
 8004c34:	8992      	ldrh	r2, [r2, #12]
 8004c36:	fbb3 f0f2 	udiv	r0, r3, r2
 8004c3a:	fb00 f202 	mul.w	r2, r0, r2
 8004c3e:	1a9b      	subs	r3, r3, r2
 8004c40:	440b      	add	r3, r1
 8004c42:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	f003 0301 	and.w	r3, r3, #1
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d00d      	beq.n	8004c6a <put_fat+0xb8>
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	781b      	ldrb	r3, [r3, #0]
 8004c52:	b25b      	sxtb	r3, r3
 8004c54:	f003 030f 	and.w	r3, r3, #15
 8004c58:	b25a      	sxtb	r2, r3
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	b2db      	uxtb	r3, r3
 8004c5e:	011b      	lsls	r3, r3, #4
 8004c60:	b25b      	sxtb	r3, r3
 8004c62:	4313      	orrs	r3, r2
 8004c64:	b25b      	sxtb	r3, r3
 8004c66:	b2db      	uxtb	r3, r3
 8004c68:	e001      	b.n	8004c6e <put_fat+0xbc>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	b2db      	uxtb	r3, r3
 8004c6e:	697a      	ldr	r2, [r7, #20]
 8004c70:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2201      	movs	r2, #1
 8004c76:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	899b      	ldrh	r3, [r3, #12]
 8004c80:	4619      	mov	r1, r3
 8004c82:	69bb      	ldr	r3, [r7, #24]
 8004c84:	fbb3 f3f1 	udiv	r3, r3, r1
 8004c88:	4413      	add	r3, r2
 8004c8a:	4619      	mov	r1, r3
 8004c8c:	68f8      	ldr	r0, [r7, #12]
 8004c8e:	f7ff fdff 	bl	8004890 <move_window>
 8004c92:	4603      	mov	r3, r0
 8004c94:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004c96:	7ffb      	ldrb	r3, [r7, #31]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	f040 809c 	bne.w	8004dd6 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	899b      	ldrh	r3, [r3, #12]
 8004ca8:	461a      	mov	r2, r3
 8004caa:	69bb      	ldr	r3, [r7, #24]
 8004cac:	fbb3 f0f2 	udiv	r0, r3, r2
 8004cb0:	fb00 f202 	mul.w	r2, r0, r2
 8004cb4:	1a9b      	subs	r3, r3, r2
 8004cb6:	440b      	add	r3, r1
 8004cb8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	f003 0301 	and.w	r3, r3, #1
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d003      	beq.n	8004ccc <put_fat+0x11a>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	091b      	lsrs	r3, r3, #4
 8004cc8:	b2db      	uxtb	r3, r3
 8004cca:	e00e      	b.n	8004cea <put_fat+0x138>
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	781b      	ldrb	r3, [r3, #0]
 8004cd0:	b25b      	sxtb	r3, r3
 8004cd2:	f023 030f 	bic.w	r3, r3, #15
 8004cd6:	b25a      	sxtb	r2, r3
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	0a1b      	lsrs	r3, r3, #8
 8004cdc:	b25b      	sxtb	r3, r3
 8004cde:	f003 030f 	and.w	r3, r3, #15
 8004ce2:	b25b      	sxtb	r3, r3
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	b25b      	sxtb	r3, r3
 8004ce8:	b2db      	uxtb	r3, r3
 8004cea:	697a      	ldr	r2, [r7, #20]
 8004cec:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	2201      	movs	r2, #1
 8004cf2:	70da      	strb	r2, [r3, #3]
			break;
 8004cf4:	e074      	b.n	8004de0 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	899b      	ldrh	r3, [r3, #12]
 8004cfe:	085b      	lsrs	r3, r3, #1
 8004d00:	b29b      	uxth	r3, r3
 8004d02:	4619      	mov	r1, r3
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	fbb3 f3f1 	udiv	r3, r3, r1
 8004d0a:	4413      	add	r3, r2
 8004d0c:	4619      	mov	r1, r3
 8004d0e:	68f8      	ldr	r0, [r7, #12]
 8004d10:	f7ff fdbe 	bl	8004890 <move_window>
 8004d14:	4603      	mov	r3, r0
 8004d16:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004d18:	7ffb      	ldrb	r3, [r7, #31]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d15d      	bne.n	8004dda <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	005b      	lsls	r3, r3, #1
 8004d28:	68fa      	ldr	r2, [r7, #12]
 8004d2a:	8992      	ldrh	r2, [r2, #12]
 8004d2c:	fbb3 f0f2 	udiv	r0, r3, r2
 8004d30:	fb00 f202 	mul.w	r2, r0, r2
 8004d34:	1a9b      	subs	r3, r3, r2
 8004d36:	440b      	add	r3, r1
 8004d38:	687a      	ldr	r2, [r7, #4]
 8004d3a:	b292      	uxth	r2, r2
 8004d3c:	4611      	mov	r1, r2
 8004d3e:	4618      	mov	r0, r3
 8004d40:	f7ff faff 	bl	8004342 <st_word>
			fs->wflag = 1;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	2201      	movs	r2, #1
 8004d48:	70da      	strb	r2, [r3, #3]
			break;
 8004d4a:	e049      	b.n	8004de0 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	899b      	ldrh	r3, [r3, #12]
 8004d54:	089b      	lsrs	r3, r3, #2
 8004d56:	b29b      	uxth	r3, r3
 8004d58:	4619      	mov	r1, r3
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	fbb3 f3f1 	udiv	r3, r3, r1
 8004d60:	4413      	add	r3, r2
 8004d62:	4619      	mov	r1, r3
 8004d64:	68f8      	ldr	r0, [r7, #12]
 8004d66:	f7ff fd93 	bl	8004890 <move_window>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004d6e:	7ffb      	ldrb	r3, [r7, #31]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d134      	bne.n	8004dde <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	009b      	lsls	r3, r3, #2
 8004d84:	68fa      	ldr	r2, [r7, #12]
 8004d86:	8992      	ldrh	r2, [r2, #12]
 8004d88:	fbb3 f0f2 	udiv	r0, r3, r2
 8004d8c:	fb00 f202 	mul.w	r2, r0, r2
 8004d90:	1a9b      	subs	r3, r3, r2
 8004d92:	440b      	add	r3, r1
 8004d94:	4618      	mov	r0, r3
 8004d96:	f7ff fab1 	bl	80042fc <ld_dword>
 8004d9a:	4603      	mov	r3, r0
 8004d9c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004da0:	4323      	orrs	r3, r4
 8004da2:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	009b      	lsls	r3, r3, #2
 8004dae:	68fa      	ldr	r2, [r7, #12]
 8004db0:	8992      	ldrh	r2, [r2, #12]
 8004db2:	fbb3 f0f2 	udiv	r0, r3, r2
 8004db6:	fb00 f202 	mul.w	r2, r0, r2
 8004dba:	1a9b      	subs	r3, r3, r2
 8004dbc:	440b      	add	r3, r1
 8004dbe:	6879      	ldr	r1, [r7, #4]
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	f7ff fad9 	bl	8004378 <st_dword>
			fs->wflag = 1;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2201      	movs	r2, #1
 8004dca:	70da      	strb	r2, [r3, #3]
			break;
 8004dcc:	e008      	b.n	8004de0 <put_fat+0x22e>
		}
	}
 8004dce:	bf00      	nop
 8004dd0:	e006      	b.n	8004de0 <put_fat+0x22e>
			if (res != FR_OK) break;
 8004dd2:	bf00      	nop
 8004dd4:	e004      	b.n	8004de0 <put_fat+0x22e>
			if (res != FR_OK) break;
 8004dd6:	bf00      	nop
 8004dd8:	e002      	b.n	8004de0 <put_fat+0x22e>
			if (res != FR_OK) break;
 8004dda:	bf00      	nop
 8004ddc:	e000      	b.n	8004de0 <put_fat+0x22e>
			if (res != FR_OK) break;
 8004dde:	bf00      	nop
	return res;
 8004de0:	7ffb      	ldrb	r3, [r7, #31]
}
 8004de2:	4618      	mov	r0, r3
 8004de4:	3724      	adds	r7, #36	; 0x24
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd90      	pop	{r4, r7, pc}

08004dea <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8004dea:	b580      	push	{r7, lr}
 8004dec:	b088      	sub	sp, #32
 8004dee:	af00      	add	r7, sp, #0
 8004df0:	60f8      	str	r0, [r7, #12]
 8004df2:	60b9      	str	r1, [r7, #8]
 8004df4:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8004df6:	2300      	movs	r3, #0
 8004df8:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	2b01      	cmp	r3, #1
 8004e04:	d904      	bls.n	8004e10 <remove_chain+0x26>
 8004e06:	69bb      	ldr	r3, [r7, #24]
 8004e08:	6a1b      	ldr	r3, [r3, #32]
 8004e0a:	68ba      	ldr	r2, [r7, #8]
 8004e0c:	429a      	cmp	r2, r3
 8004e0e:	d301      	bcc.n	8004e14 <remove_chain+0x2a>
 8004e10:	2302      	movs	r3, #2
 8004e12:	e04b      	b.n	8004eac <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d00c      	beq.n	8004e34 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8004e1a:	f04f 32ff 	mov.w	r2, #4294967295
 8004e1e:	6879      	ldr	r1, [r7, #4]
 8004e20:	69b8      	ldr	r0, [r7, #24]
 8004e22:	f7ff fec6 	bl	8004bb2 <put_fat>
 8004e26:	4603      	mov	r3, r0
 8004e28:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8004e2a:	7ffb      	ldrb	r3, [r7, #31]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d001      	beq.n	8004e34 <remove_chain+0x4a>
 8004e30:	7ffb      	ldrb	r3, [r7, #31]
 8004e32:	e03b      	b.n	8004eac <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8004e34:	68b9      	ldr	r1, [r7, #8]
 8004e36:	68f8      	ldr	r0, [r7, #12]
 8004e38:	f7ff fde7 	bl	8004a0a <get_fat>
 8004e3c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d031      	beq.n	8004ea8 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	2b01      	cmp	r3, #1
 8004e48:	d101      	bne.n	8004e4e <remove_chain+0x64>
 8004e4a:	2302      	movs	r3, #2
 8004e4c:	e02e      	b.n	8004eac <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e54:	d101      	bne.n	8004e5a <remove_chain+0x70>
 8004e56:	2301      	movs	r3, #1
 8004e58:	e028      	b.n	8004eac <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	68b9      	ldr	r1, [r7, #8]
 8004e5e:	69b8      	ldr	r0, [r7, #24]
 8004e60:	f7ff fea7 	bl	8004bb2 <put_fat>
 8004e64:	4603      	mov	r3, r0
 8004e66:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8004e68:	7ffb      	ldrb	r3, [r7, #31]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d001      	beq.n	8004e72 <remove_chain+0x88>
 8004e6e:	7ffb      	ldrb	r3, [r7, #31]
 8004e70:	e01c      	b.n	8004eac <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8004e72:	69bb      	ldr	r3, [r7, #24]
 8004e74:	69da      	ldr	r2, [r3, #28]
 8004e76:	69bb      	ldr	r3, [r7, #24]
 8004e78:	6a1b      	ldr	r3, [r3, #32]
 8004e7a:	3b02      	subs	r3, #2
 8004e7c:	429a      	cmp	r2, r3
 8004e7e:	d20b      	bcs.n	8004e98 <remove_chain+0xae>
			fs->free_clst++;
 8004e80:	69bb      	ldr	r3, [r7, #24]
 8004e82:	69db      	ldr	r3, [r3, #28]
 8004e84:	1c5a      	adds	r2, r3, #1
 8004e86:	69bb      	ldr	r3, [r7, #24]
 8004e88:	61da      	str	r2, [r3, #28]
			fs->fsi_flag |= 1;
 8004e8a:	69bb      	ldr	r3, [r7, #24]
 8004e8c:	791b      	ldrb	r3, [r3, #4]
 8004e8e:	f043 0301 	orr.w	r3, r3, #1
 8004e92:	b2da      	uxtb	r2, r3
 8004e94:	69bb      	ldr	r3, [r7, #24]
 8004e96:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8004e9c:	69bb      	ldr	r3, [r7, #24]
 8004e9e:	6a1b      	ldr	r3, [r3, #32]
 8004ea0:	68ba      	ldr	r2, [r7, #8]
 8004ea2:	429a      	cmp	r2, r3
 8004ea4:	d3c6      	bcc.n	8004e34 <remove_chain+0x4a>
 8004ea6:	e000      	b.n	8004eaa <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8004ea8:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8004eaa:	2300      	movs	r3, #0
}
 8004eac:	4618      	mov	r0, r3
 8004eae:	3720      	adds	r7, #32
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bd80      	pop	{r7, pc}

08004eb4 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b088      	sub	sp, #32
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
 8004ebc:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d10d      	bne.n	8004ee6 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	699b      	ldr	r3, [r3, #24]
 8004ece:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8004ed0:	69bb      	ldr	r3, [r7, #24]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d004      	beq.n	8004ee0 <create_chain+0x2c>
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	6a1b      	ldr	r3, [r3, #32]
 8004eda:	69ba      	ldr	r2, [r7, #24]
 8004edc:	429a      	cmp	r2, r3
 8004ede:	d31b      	bcc.n	8004f18 <create_chain+0x64>
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	61bb      	str	r3, [r7, #24]
 8004ee4:	e018      	b.n	8004f18 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8004ee6:	6839      	ldr	r1, [r7, #0]
 8004ee8:	6878      	ldr	r0, [r7, #4]
 8004eea:	f7ff fd8e 	bl	8004a0a <get_fat>
 8004eee:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2b01      	cmp	r3, #1
 8004ef4:	d801      	bhi.n	8004efa <create_chain+0x46>
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	e070      	b.n	8004fdc <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f00:	d101      	bne.n	8004f06 <create_chain+0x52>
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	e06a      	b.n	8004fdc <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	6a1b      	ldr	r3, [r3, #32]
 8004f0a:	68fa      	ldr	r2, [r7, #12]
 8004f0c:	429a      	cmp	r2, r3
 8004f0e:	d201      	bcs.n	8004f14 <create_chain+0x60>
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	e063      	b.n	8004fdc <create_chain+0x128>
		scl = clst;
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8004f18:	69bb      	ldr	r3, [r7, #24]
 8004f1a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8004f1c:	69fb      	ldr	r3, [r7, #28]
 8004f1e:	3301      	adds	r3, #1
 8004f20:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	6a1b      	ldr	r3, [r3, #32]
 8004f26:	69fa      	ldr	r2, [r7, #28]
 8004f28:	429a      	cmp	r2, r3
 8004f2a:	d307      	bcc.n	8004f3c <create_chain+0x88>
				ncl = 2;
 8004f2c:	2302      	movs	r3, #2
 8004f2e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8004f30:	69fa      	ldr	r2, [r7, #28]
 8004f32:	69bb      	ldr	r3, [r7, #24]
 8004f34:	429a      	cmp	r2, r3
 8004f36:	d901      	bls.n	8004f3c <create_chain+0x88>
 8004f38:	2300      	movs	r3, #0
 8004f3a:	e04f      	b.n	8004fdc <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8004f3c:	69f9      	ldr	r1, [r7, #28]
 8004f3e:	6878      	ldr	r0, [r7, #4]
 8004f40:	f7ff fd63 	bl	8004a0a <get_fat>
 8004f44:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d00e      	beq.n	8004f6a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	2b01      	cmp	r3, #1
 8004f50:	d003      	beq.n	8004f5a <create_chain+0xa6>
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f58:	d101      	bne.n	8004f5e <create_chain+0xaa>
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	e03e      	b.n	8004fdc <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8004f5e:	69fa      	ldr	r2, [r7, #28]
 8004f60:	69bb      	ldr	r3, [r7, #24]
 8004f62:	429a      	cmp	r2, r3
 8004f64:	d1da      	bne.n	8004f1c <create_chain+0x68>
 8004f66:	2300      	movs	r3, #0
 8004f68:	e038      	b.n	8004fdc <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8004f6a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8004f6c:	f04f 32ff 	mov.w	r2, #4294967295
 8004f70:	69f9      	ldr	r1, [r7, #28]
 8004f72:	6938      	ldr	r0, [r7, #16]
 8004f74:	f7ff fe1d 	bl	8004bb2 <put_fat>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8004f7c:	7dfb      	ldrb	r3, [r7, #23]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d109      	bne.n	8004f96 <create_chain+0xe2>
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d006      	beq.n	8004f96 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8004f88:	69fa      	ldr	r2, [r7, #28]
 8004f8a:	6839      	ldr	r1, [r7, #0]
 8004f8c:	6938      	ldr	r0, [r7, #16]
 8004f8e:	f7ff fe10 	bl	8004bb2 <put_fat>
 8004f92:	4603      	mov	r3, r0
 8004f94:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8004f96:	7dfb      	ldrb	r3, [r7, #23]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d116      	bne.n	8004fca <create_chain+0x116>
		fs->last_clst = ncl;
 8004f9c:	693b      	ldr	r3, [r7, #16]
 8004f9e:	69fa      	ldr	r2, [r7, #28]
 8004fa0:	619a      	str	r2, [r3, #24]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	69da      	ldr	r2, [r3, #28]
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	6a1b      	ldr	r3, [r3, #32]
 8004faa:	3b02      	subs	r3, #2
 8004fac:	429a      	cmp	r2, r3
 8004fae:	d804      	bhi.n	8004fba <create_chain+0x106>
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	69db      	ldr	r3, [r3, #28]
 8004fb4:	1e5a      	subs	r2, r3, #1
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	61da      	str	r2, [r3, #28]
		fs->fsi_flag |= 1;
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	791b      	ldrb	r3, [r3, #4]
 8004fbe:	f043 0301 	orr.w	r3, r3, #1
 8004fc2:	b2da      	uxtb	r2, r3
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	711a      	strb	r2, [r3, #4]
 8004fc8:	e007      	b.n	8004fda <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8004fca:	7dfb      	ldrb	r3, [r7, #23]
 8004fcc:	2b01      	cmp	r3, #1
 8004fce:	d102      	bne.n	8004fd6 <create_chain+0x122>
 8004fd0:	f04f 33ff 	mov.w	r3, #4294967295
 8004fd4:	e000      	b.n	8004fd8 <create_chain+0x124>
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8004fda:	69fb      	ldr	r3, [r7, #28]
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	3720      	adds	r7, #32
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bd80      	pop	{r7, pc}

08004fe4 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b087      	sub	sp, #28
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
 8004fec:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ff8:	3304      	adds	r3, #4
 8004ffa:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	899b      	ldrh	r3, [r3, #12]
 8005000:	461a      	mov	r2, r3
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	fbb3 f3f2 	udiv	r3, r3, r2
 8005008:	68fa      	ldr	r2, [r7, #12]
 800500a:	8952      	ldrh	r2, [r2, #10]
 800500c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005010:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	1d1a      	adds	r2, r3, #4
 8005016:	613a      	str	r2, [r7, #16]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d101      	bne.n	8005026 <clmt_clust+0x42>
 8005022:	2300      	movs	r3, #0
 8005024:	e010      	b.n	8005048 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8005026:	697a      	ldr	r2, [r7, #20]
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	429a      	cmp	r2, r3
 800502c:	d307      	bcc.n	800503e <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800502e:	697a      	ldr	r2, [r7, #20]
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	1ad3      	subs	r3, r2, r3
 8005034:	617b      	str	r3, [r7, #20]
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	3304      	adds	r3, #4
 800503a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800503c:	e7e9      	b.n	8005012 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800503e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8005040:	693b      	ldr	r3, [r7, #16]
 8005042:	681a      	ldr	r2, [r3, #0]
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	4413      	add	r3, r2
}
 8005048:	4618      	mov	r0, r3
 800504a:	371c      	adds	r7, #28
 800504c:	46bd      	mov	sp, r7
 800504e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005052:	4770      	bx	lr

08005054 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b086      	sub	sp, #24
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
 800505c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800506a:	d204      	bcs.n	8005076 <dir_sdi+0x22>
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	f003 031f 	and.w	r3, r3, #31
 8005072:	2b00      	cmp	r3, #0
 8005074:	d001      	beq.n	800507a <dir_sdi+0x26>
		return FR_INT_ERR;
 8005076:	2302      	movs	r3, #2
 8005078:	e071      	b.n	800515e <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	683a      	ldr	r2, [r7, #0]
 800507e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	689b      	ldr	r3, [r3, #8]
 8005084:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d106      	bne.n	800509a <dir_sdi+0x46>
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	781b      	ldrb	r3, [r3, #0]
 8005090:	2b02      	cmp	r3, #2
 8005092:	d902      	bls.n	800509a <dir_sdi+0x46>
		clst = fs->dirbase;
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005098:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d10c      	bne.n	80050ba <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	095b      	lsrs	r3, r3, #5
 80050a4:	693a      	ldr	r2, [r7, #16]
 80050a6:	8912      	ldrh	r2, [r2, #8]
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d301      	bcc.n	80050b0 <dir_sdi+0x5c>
 80050ac:	2302      	movs	r3, #2
 80050ae:	e056      	b.n	800515e <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	61da      	str	r2, [r3, #28]
 80050b8:	e02d      	b.n	8005116 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	895b      	ldrh	r3, [r3, #10]
 80050be:	461a      	mov	r2, r3
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	899b      	ldrh	r3, [r3, #12]
 80050c4:	fb02 f303 	mul.w	r3, r2, r3
 80050c8:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80050ca:	e019      	b.n	8005100 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6979      	ldr	r1, [r7, #20]
 80050d0:	4618      	mov	r0, r3
 80050d2:	f7ff fc9a 	bl	8004a0a <get_fat>
 80050d6:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050de:	d101      	bne.n	80050e4 <dir_sdi+0x90>
 80050e0:	2301      	movs	r3, #1
 80050e2:	e03c      	b.n	800515e <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	2b01      	cmp	r3, #1
 80050e8:	d904      	bls.n	80050f4 <dir_sdi+0xa0>
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	6a1b      	ldr	r3, [r3, #32]
 80050ee:	697a      	ldr	r2, [r7, #20]
 80050f0:	429a      	cmp	r2, r3
 80050f2:	d301      	bcc.n	80050f8 <dir_sdi+0xa4>
 80050f4:	2302      	movs	r3, #2
 80050f6:	e032      	b.n	800515e <dir_sdi+0x10a>
			ofs -= csz;
 80050f8:	683a      	ldr	r2, [r7, #0]
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	1ad3      	subs	r3, r2, r3
 80050fe:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005100:	683a      	ldr	r2, [r7, #0]
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	429a      	cmp	r2, r3
 8005106:	d2e1      	bcs.n	80050cc <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8005108:	6979      	ldr	r1, [r7, #20]
 800510a:	6938      	ldr	r0, [r7, #16]
 800510c:	f7ff fc5e 	bl	80049cc <clust2sect>
 8005110:	4602      	mov	r2, r0
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	697a      	ldr	r2, [r7, #20]
 800511a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	69db      	ldr	r3, [r3, #28]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d101      	bne.n	8005128 <dir_sdi+0xd4>
 8005124:	2302      	movs	r3, #2
 8005126:	e01a      	b.n	800515e <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	69da      	ldr	r2, [r3, #28]
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	899b      	ldrh	r3, [r3, #12]
 8005130:	4619      	mov	r1, r3
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	fbb3 f3f1 	udiv	r3, r3, r1
 8005138:	441a      	add	r2, r3
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	899b      	ldrh	r3, [r3, #12]
 8005148:	461a      	mov	r2, r3
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	fbb3 f0f2 	udiv	r0, r3, r2
 8005150:	fb00 f202 	mul.w	r2, r0, r2
 8005154:	1a9b      	subs	r3, r3, r2
 8005156:	18ca      	adds	r2, r1, r3
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800515c:	2300      	movs	r3, #0
}
 800515e:	4618      	mov	r0, r3
 8005160:	3718      	adds	r7, #24
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}

08005166 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8005166:	b580      	push	{r7, lr}
 8005168:	b086      	sub	sp, #24
 800516a:	af00      	add	r7, sp, #0
 800516c:	6078      	str	r0, [r7, #4]
 800516e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	695b      	ldr	r3, [r3, #20]
 800517a:	3320      	adds	r3, #32
 800517c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	69db      	ldr	r3, [r3, #28]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d003      	beq.n	800518e <dir_next+0x28>
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800518c:	d301      	bcc.n	8005192 <dir_next+0x2c>
 800518e:	2304      	movs	r3, #4
 8005190:	e0bb      	b.n	800530a <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	899b      	ldrh	r3, [r3, #12]
 8005196:	461a      	mov	r2, r3
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	fbb3 f1f2 	udiv	r1, r3, r2
 800519e:	fb01 f202 	mul.w	r2, r1, r2
 80051a2:	1a9b      	subs	r3, r3, r2
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	f040 809d 	bne.w	80052e4 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	69db      	ldr	r3, [r3, #28]
 80051ae:	1c5a      	adds	r2, r3, #1
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	699b      	ldr	r3, [r3, #24]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d10b      	bne.n	80051d4 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	095b      	lsrs	r3, r3, #5
 80051c0:	68fa      	ldr	r2, [r7, #12]
 80051c2:	8912      	ldrh	r2, [r2, #8]
 80051c4:	4293      	cmp	r3, r2
 80051c6:	f0c0 808d 	bcc.w	80052e4 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2200      	movs	r2, #0
 80051ce:	61da      	str	r2, [r3, #28]
 80051d0:	2304      	movs	r3, #4
 80051d2:	e09a      	b.n	800530a <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	899b      	ldrh	r3, [r3, #12]
 80051d8:	461a      	mov	r2, r3
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80051e0:	68fa      	ldr	r2, [r7, #12]
 80051e2:	8952      	ldrh	r2, [r2, #10]
 80051e4:	3a01      	subs	r2, #1
 80051e6:	4013      	ands	r3, r2
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d17b      	bne.n	80052e4 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80051ec:	687a      	ldr	r2, [r7, #4]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	699b      	ldr	r3, [r3, #24]
 80051f2:	4619      	mov	r1, r3
 80051f4:	4610      	mov	r0, r2
 80051f6:	f7ff fc08 	bl	8004a0a <get_fat>
 80051fa:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	2b01      	cmp	r3, #1
 8005200:	d801      	bhi.n	8005206 <dir_next+0xa0>
 8005202:	2302      	movs	r3, #2
 8005204:	e081      	b.n	800530a <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	f1b3 3fff 	cmp.w	r3, #4294967295
 800520c:	d101      	bne.n	8005212 <dir_next+0xac>
 800520e:	2301      	movs	r3, #1
 8005210:	e07b      	b.n	800530a <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	6a1b      	ldr	r3, [r3, #32]
 8005216:	697a      	ldr	r2, [r7, #20]
 8005218:	429a      	cmp	r2, r3
 800521a:	d359      	bcc.n	80052d0 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d104      	bne.n	800522c <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2200      	movs	r2, #0
 8005226:	61da      	str	r2, [r3, #28]
 8005228:	2304      	movs	r3, #4
 800522a:	e06e      	b.n	800530a <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800522c:	687a      	ldr	r2, [r7, #4]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	699b      	ldr	r3, [r3, #24]
 8005232:	4619      	mov	r1, r3
 8005234:	4610      	mov	r0, r2
 8005236:	f7ff fe3d 	bl	8004eb4 <create_chain>
 800523a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d101      	bne.n	8005246 <dir_next+0xe0>
 8005242:	2307      	movs	r3, #7
 8005244:	e061      	b.n	800530a <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	2b01      	cmp	r3, #1
 800524a:	d101      	bne.n	8005250 <dir_next+0xea>
 800524c:	2302      	movs	r3, #2
 800524e:	e05c      	b.n	800530a <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005256:	d101      	bne.n	800525c <dir_next+0xf6>
 8005258:	2301      	movs	r3, #1
 800525a:	e056      	b.n	800530a <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800525c:	68f8      	ldr	r0, [r7, #12]
 800525e:	f7ff fad3 	bl	8004808 <sync_window>
 8005262:	4603      	mov	r3, r0
 8005264:	2b00      	cmp	r3, #0
 8005266:	d001      	beq.n	800526c <dir_next+0x106>
 8005268:	2301      	movs	r3, #1
 800526a:	e04e      	b.n	800530a <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	899b      	ldrh	r3, [r3, #12]
 8005276:	461a      	mov	r2, r3
 8005278:	2100      	movs	r1, #0
 800527a:	f7ff f8ca 	bl	8004412 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800527e:	2300      	movs	r3, #0
 8005280:	613b      	str	r3, [r7, #16]
 8005282:	6979      	ldr	r1, [r7, #20]
 8005284:	68f8      	ldr	r0, [r7, #12]
 8005286:	f7ff fba1 	bl	80049cc <clust2sect>
 800528a:	4602      	mov	r2, r0
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	639a      	str	r2, [r3, #56]	; 0x38
 8005290:	e012      	b.n	80052b8 <dir_next+0x152>
						fs->wflag = 1;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2201      	movs	r2, #1
 8005296:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8005298:	68f8      	ldr	r0, [r7, #12]
 800529a:	f7ff fab5 	bl	8004808 <sync_window>
 800529e:	4603      	mov	r3, r0
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d001      	beq.n	80052a8 <dir_next+0x142>
 80052a4:	2301      	movs	r3, #1
 80052a6:	e030      	b.n	800530a <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	3301      	adds	r3, #1
 80052ac:	613b      	str	r3, [r7, #16]
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052b2:	1c5a      	adds	r2, r3, #1
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	639a      	str	r2, [r3, #56]	; 0x38
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	895b      	ldrh	r3, [r3, #10]
 80052bc:	461a      	mov	r2, r3
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d3e6      	bcc.n	8005292 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	1ad2      	subs	r2, r2, r3
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	639a      	str	r2, [r3, #56]	; 0x38
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	697a      	ldr	r2, [r7, #20]
 80052d4:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80052d6:	6979      	ldr	r1, [r7, #20]
 80052d8:	68f8      	ldr	r0, [r7, #12]
 80052da:	f7ff fb77 	bl	80049cc <clust2sect>
 80052de:	4602      	mov	r2, r0
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	68ba      	ldr	r2, [r7, #8]
 80052e8:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	899b      	ldrh	r3, [r3, #12]
 80052f4:	461a      	mov	r2, r3
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	fbb3 f0f2 	udiv	r0, r3, r2
 80052fc:	fb00 f202 	mul.w	r2, r0, r2
 8005300:	1a9b      	subs	r3, r3, r2
 8005302:	18ca      	adds	r2, r1, r3
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8005308:	2300      	movs	r3, #0
}
 800530a:	4618      	mov	r0, r3
 800530c:	3718      	adds	r7, #24
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}

08005312 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8005312:	b580      	push	{r7, lr}
 8005314:	b086      	sub	sp, #24
 8005316:	af00      	add	r7, sp, #0
 8005318:	6078      	str	r0, [r7, #4]
 800531a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8005322:	2100      	movs	r1, #0
 8005324:	6878      	ldr	r0, [r7, #4]
 8005326:	f7ff fe95 	bl	8005054 <dir_sdi>
 800532a:	4603      	mov	r3, r0
 800532c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800532e:	7dfb      	ldrb	r3, [r7, #23]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d12b      	bne.n	800538c <dir_alloc+0x7a>
		n = 0;
 8005334:	2300      	movs	r3, #0
 8005336:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	69db      	ldr	r3, [r3, #28]
 800533c:	4619      	mov	r1, r3
 800533e:	68f8      	ldr	r0, [r7, #12]
 8005340:	f7ff faa6 	bl	8004890 <move_window>
 8005344:	4603      	mov	r3, r0
 8005346:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005348:	7dfb      	ldrb	r3, [r7, #23]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d11d      	bne.n	800538a <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6a1b      	ldr	r3, [r3, #32]
 8005352:	781b      	ldrb	r3, [r3, #0]
 8005354:	2be5      	cmp	r3, #229	; 0xe5
 8005356:	d004      	beq.n	8005362 <dir_alloc+0x50>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6a1b      	ldr	r3, [r3, #32]
 800535c:	781b      	ldrb	r3, [r3, #0]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d107      	bne.n	8005372 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	3301      	adds	r3, #1
 8005366:	613b      	str	r3, [r7, #16]
 8005368:	693a      	ldr	r2, [r7, #16]
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	429a      	cmp	r2, r3
 800536e:	d102      	bne.n	8005376 <dir_alloc+0x64>
 8005370:	e00c      	b.n	800538c <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8005372:	2300      	movs	r3, #0
 8005374:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8005376:	2101      	movs	r1, #1
 8005378:	6878      	ldr	r0, [r7, #4]
 800537a:	f7ff fef4 	bl	8005166 <dir_next>
 800537e:	4603      	mov	r3, r0
 8005380:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8005382:	7dfb      	ldrb	r3, [r7, #23]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d0d7      	beq.n	8005338 <dir_alloc+0x26>
 8005388:	e000      	b.n	800538c <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800538a:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800538c:	7dfb      	ldrb	r3, [r7, #23]
 800538e:	2b04      	cmp	r3, #4
 8005390:	d101      	bne.n	8005396 <dir_alloc+0x84>
 8005392:	2307      	movs	r3, #7
 8005394:	75fb      	strb	r3, [r7, #23]
	return res;
 8005396:	7dfb      	ldrb	r3, [r7, #23]
}
 8005398:	4618      	mov	r0, r3
 800539a:	3718      	adds	r7, #24
 800539c:	46bd      	mov	sp, r7
 800539e:	bd80      	pop	{r7, pc}

080053a0 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b084      	sub	sp, #16
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
 80053a8:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	331a      	adds	r3, #26
 80053ae:	4618      	mov	r0, r3
 80053b0:	f7fe ff8c 	bl	80042cc <ld_word>
 80053b4:	4603      	mov	r3, r0
 80053b6:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	781b      	ldrb	r3, [r3, #0]
 80053bc:	2b03      	cmp	r3, #3
 80053be:	d109      	bne.n	80053d4 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	3314      	adds	r3, #20
 80053c4:	4618      	mov	r0, r3
 80053c6:	f7fe ff81 	bl	80042cc <ld_word>
 80053ca:	4603      	mov	r3, r0
 80053cc:	041b      	lsls	r3, r3, #16
 80053ce:	68fa      	ldr	r2, [r7, #12]
 80053d0:	4313      	orrs	r3, r2
 80053d2:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80053d4:	68fb      	ldr	r3, [r7, #12]
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	3710      	adds	r7, #16
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}

080053de <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80053de:	b580      	push	{r7, lr}
 80053e0:	b084      	sub	sp, #16
 80053e2:	af00      	add	r7, sp, #0
 80053e4:	60f8      	str	r0, [r7, #12]
 80053e6:	60b9      	str	r1, [r7, #8]
 80053e8:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	331a      	adds	r3, #26
 80053ee:	687a      	ldr	r2, [r7, #4]
 80053f0:	b292      	uxth	r2, r2
 80053f2:	4611      	mov	r1, r2
 80053f4:	4618      	mov	r0, r3
 80053f6:	f7fe ffa4 	bl	8004342 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	781b      	ldrb	r3, [r3, #0]
 80053fe:	2b03      	cmp	r3, #3
 8005400:	d109      	bne.n	8005416 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	f103 0214 	add.w	r2, r3, #20
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	0c1b      	lsrs	r3, r3, #16
 800540c:	b29b      	uxth	r3, r3
 800540e:	4619      	mov	r1, r3
 8005410:	4610      	mov	r0, r2
 8005412:	f7fe ff96 	bl	8004342 <st_word>
	}
}
 8005416:	bf00      	nop
 8005418:	3710      	adds	r7, #16
 800541a:	46bd      	mov	sp, r7
 800541c:	bd80      	pop	{r7, pc}
	...

08005420 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8005420:	b590      	push	{r4, r7, lr}
 8005422:	b087      	sub	sp, #28
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
 8005428:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	331a      	adds	r3, #26
 800542e:	4618      	mov	r0, r3
 8005430:	f7fe ff4c 	bl	80042cc <ld_word>
 8005434:	4603      	mov	r3, r0
 8005436:	2b00      	cmp	r3, #0
 8005438:	d001      	beq.n	800543e <cmp_lfn+0x1e>
 800543a:	2300      	movs	r3, #0
 800543c:	e059      	b.n	80054f2 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	781b      	ldrb	r3, [r3, #0]
 8005442:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005446:	1e5a      	subs	r2, r3, #1
 8005448:	4613      	mov	r3, r2
 800544a:	005b      	lsls	r3, r3, #1
 800544c:	4413      	add	r3, r2
 800544e:	009b      	lsls	r3, r3, #2
 8005450:	4413      	add	r3, r2
 8005452:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8005454:	2301      	movs	r3, #1
 8005456:	81fb      	strh	r3, [r7, #14]
 8005458:	2300      	movs	r3, #0
 800545a:	613b      	str	r3, [r7, #16]
 800545c:	e033      	b.n	80054c6 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800545e:	4a27      	ldr	r2, [pc, #156]	; (80054fc <cmp_lfn+0xdc>)
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	4413      	add	r3, r2
 8005464:	781b      	ldrb	r3, [r3, #0]
 8005466:	461a      	mov	r2, r3
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	4413      	add	r3, r2
 800546c:	4618      	mov	r0, r3
 800546e:	f7fe ff2d 	bl	80042cc <ld_word>
 8005472:	4603      	mov	r3, r0
 8005474:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8005476:	89fb      	ldrh	r3, [r7, #14]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d01a      	beq.n	80054b2 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	2bfe      	cmp	r3, #254	; 0xfe
 8005480:	d812      	bhi.n	80054a8 <cmp_lfn+0x88>
 8005482:	89bb      	ldrh	r3, [r7, #12]
 8005484:	4618      	mov	r0, r3
 8005486:	f002 f841 	bl	800750c <ff_wtoupper>
 800548a:	4603      	mov	r3, r0
 800548c:	461c      	mov	r4, r3
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	1c5a      	adds	r2, r3, #1
 8005492:	617a      	str	r2, [r7, #20]
 8005494:	005b      	lsls	r3, r3, #1
 8005496:	687a      	ldr	r2, [r7, #4]
 8005498:	4413      	add	r3, r2
 800549a:	881b      	ldrh	r3, [r3, #0]
 800549c:	4618      	mov	r0, r3
 800549e:	f002 f835 	bl	800750c <ff_wtoupper>
 80054a2:	4603      	mov	r3, r0
 80054a4:	429c      	cmp	r4, r3
 80054a6:	d001      	beq.n	80054ac <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 80054a8:	2300      	movs	r3, #0
 80054aa:	e022      	b.n	80054f2 <cmp_lfn+0xd2>
			}
			wc = uc;
 80054ac:	89bb      	ldrh	r3, [r7, #12]
 80054ae:	81fb      	strh	r3, [r7, #14]
 80054b0:	e006      	b.n	80054c0 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80054b2:	89bb      	ldrh	r3, [r7, #12]
 80054b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d001      	beq.n	80054c0 <cmp_lfn+0xa0>
 80054bc:	2300      	movs	r3, #0
 80054be:	e018      	b.n	80054f2 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	3301      	adds	r3, #1
 80054c4:	613b      	str	r3, [r7, #16]
 80054c6:	693b      	ldr	r3, [r7, #16]
 80054c8:	2b0c      	cmp	r3, #12
 80054ca:	d9c8      	bls.n	800545e <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	781b      	ldrb	r3, [r3, #0]
 80054d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d00b      	beq.n	80054f0 <cmp_lfn+0xd0>
 80054d8:	89fb      	ldrh	r3, [r7, #14]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d008      	beq.n	80054f0 <cmp_lfn+0xd0>
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	005b      	lsls	r3, r3, #1
 80054e2:	687a      	ldr	r2, [r7, #4]
 80054e4:	4413      	add	r3, r2
 80054e6:	881b      	ldrh	r3, [r3, #0]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d001      	beq.n	80054f0 <cmp_lfn+0xd0>
 80054ec:	2300      	movs	r3, #0
 80054ee:	e000      	b.n	80054f2 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 80054f0:	2301      	movs	r3, #1
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	371c      	adds	r7, #28
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd90      	pop	{r4, r7, pc}
 80054fa:	bf00      	nop
 80054fc:	0800bd9c 	.word	0x0800bd9c

08005500 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b088      	sub	sp, #32
 8005504:	af00      	add	r7, sp, #0
 8005506:	60f8      	str	r0, [r7, #12]
 8005508:	60b9      	str	r1, [r7, #8]
 800550a:	4611      	mov	r1, r2
 800550c:	461a      	mov	r2, r3
 800550e:	460b      	mov	r3, r1
 8005510:	71fb      	strb	r3, [r7, #7]
 8005512:	4613      	mov	r3, r2
 8005514:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	330d      	adds	r3, #13
 800551a:	79ba      	ldrb	r2, [r7, #6]
 800551c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	330b      	adds	r3, #11
 8005522:	220f      	movs	r2, #15
 8005524:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	330c      	adds	r3, #12
 800552a:	2200      	movs	r2, #0
 800552c:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	331a      	adds	r3, #26
 8005532:	2100      	movs	r1, #0
 8005534:	4618      	mov	r0, r3
 8005536:	f7fe ff04 	bl	8004342 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800553a:	79fb      	ldrb	r3, [r7, #7]
 800553c:	1e5a      	subs	r2, r3, #1
 800553e:	4613      	mov	r3, r2
 8005540:	005b      	lsls	r3, r3, #1
 8005542:	4413      	add	r3, r2
 8005544:	009b      	lsls	r3, r3, #2
 8005546:	4413      	add	r3, r2
 8005548:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800554a:	2300      	movs	r3, #0
 800554c:	82fb      	strh	r3, [r7, #22]
 800554e:	2300      	movs	r3, #0
 8005550:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8005552:	8afb      	ldrh	r3, [r7, #22]
 8005554:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005558:	4293      	cmp	r3, r2
 800555a:	d007      	beq.n	800556c <put_lfn+0x6c>
 800555c:	69fb      	ldr	r3, [r7, #28]
 800555e:	1c5a      	adds	r2, r3, #1
 8005560:	61fa      	str	r2, [r7, #28]
 8005562:	005b      	lsls	r3, r3, #1
 8005564:	68fa      	ldr	r2, [r7, #12]
 8005566:	4413      	add	r3, r2
 8005568:	881b      	ldrh	r3, [r3, #0]
 800556a:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800556c:	4a17      	ldr	r2, [pc, #92]	; (80055cc <put_lfn+0xcc>)
 800556e:	69bb      	ldr	r3, [r7, #24]
 8005570:	4413      	add	r3, r2
 8005572:	781b      	ldrb	r3, [r3, #0]
 8005574:	461a      	mov	r2, r3
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	4413      	add	r3, r2
 800557a:	8afa      	ldrh	r2, [r7, #22]
 800557c:	4611      	mov	r1, r2
 800557e:	4618      	mov	r0, r3
 8005580:	f7fe fedf 	bl	8004342 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8005584:	8afb      	ldrh	r3, [r7, #22]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d102      	bne.n	8005590 <put_lfn+0x90>
 800558a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800558e:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8005590:	69bb      	ldr	r3, [r7, #24]
 8005592:	3301      	adds	r3, #1
 8005594:	61bb      	str	r3, [r7, #24]
 8005596:	69bb      	ldr	r3, [r7, #24]
 8005598:	2b0c      	cmp	r3, #12
 800559a:	d9da      	bls.n	8005552 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800559c:	8afb      	ldrh	r3, [r7, #22]
 800559e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d006      	beq.n	80055b4 <put_lfn+0xb4>
 80055a6:	69fb      	ldr	r3, [r7, #28]
 80055a8:	005b      	lsls	r3, r3, #1
 80055aa:	68fa      	ldr	r2, [r7, #12]
 80055ac:	4413      	add	r3, r2
 80055ae:	881b      	ldrh	r3, [r3, #0]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d103      	bne.n	80055bc <put_lfn+0xbc>
 80055b4:	79fb      	ldrb	r3, [r7, #7]
 80055b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80055ba:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	79fa      	ldrb	r2, [r7, #7]
 80055c0:	701a      	strb	r2, [r3, #0]
}
 80055c2:	bf00      	nop
 80055c4:	3720      	adds	r7, #32
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd80      	pop	{r7, pc}
 80055ca:	bf00      	nop
 80055cc:	0800bd9c 	.word	0x0800bd9c

080055d0 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b08c      	sub	sp, #48	; 0x30
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	60f8      	str	r0, [r7, #12]
 80055d8:	60b9      	str	r1, [r7, #8]
 80055da:	607a      	str	r2, [r7, #4]
 80055dc:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80055de:	220b      	movs	r2, #11
 80055e0:	68b9      	ldr	r1, [r7, #8]
 80055e2:	68f8      	ldr	r0, [r7, #12]
 80055e4:	f7fe fef4 	bl	80043d0 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	2b05      	cmp	r3, #5
 80055ec:	d92b      	bls.n	8005646 <gen_numname+0x76>
		sr = seq;
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80055f2:	e022      	b.n	800563a <gen_numname+0x6a>
			wc = *lfn++;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	1c9a      	adds	r2, r3, #2
 80055f8:	607a      	str	r2, [r7, #4]
 80055fa:	881b      	ldrh	r3, [r3, #0]
 80055fc:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 80055fe:	2300      	movs	r3, #0
 8005600:	62bb      	str	r3, [r7, #40]	; 0x28
 8005602:	e017      	b.n	8005634 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8005604:	69fb      	ldr	r3, [r7, #28]
 8005606:	005a      	lsls	r2, r3, #1
 8005608:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800560a:	f003 0301 	and.w	r3, r3, #1
 800560e:	4413      	add	r3, r2
 8005610:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8005612:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005614:	085b      	lsrs	r3, r3, #1
 8005616:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8005618:	69fb      	ldr	r3, [r7, #28]
 800561a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800561e:	2b00      	cmp	r3, #0
 8005620:	d005      	beq.n	800562e <gen_numname+0x5e>
 8005622:	69fb      	ldr	r3, [r7, #28]
 8005624:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8005628:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800562c:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800562e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005630:	3301      	adds	r3, #1
 8005632:	62bb      	str	r3, [r7, #40]	; 0x28
 8005634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005636:	2b0f      	cmp	r3, #15
 8005638:	d9e4      	bls.n	8005604 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	881b      	ldrh	r3, [r3, #0]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d1d8      	bne.n	80055f4 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8005642:	69fb      	ldr	r3, [r7, #28]
 8005644:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8005646:	2307      	movs	r3, #7
 8005648:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	b2db      	uxtb	r3, r3
 800564e:	f003 030f 	and.w	r3, r3, #15
 8005652:	b2db      	uxtb	r3, r3
 8005654:	3330      	adds	r3, #48	; 0x30
 8005656:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800565a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800565e:	2b39      	cmp	r3, #57	; 0x39
 8005660:	d904      	bls.n	800566c <gen_numname+0x9c>
 8005662:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005666:	3307      	adds	r3, #7
 8005668:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800566c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800566e:	1e5a      	subs	r2, r3, #1
 8005670:	62ba      	str	r2, [r7, #40]	; 0x28
 8005672:	3330      	adds	r3, #48	; 0x30
 8005674:	443b      	add	r3, r7
 8005676:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800567a:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	091b      	lsrs	r3, r3, #4
 8005682:	603b      	str	r3, [r7, #0]
	} while (seq);
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d1df      	bne.n	800564a <gen_numname+0x7a>
	ns[i] = '~';
 800568a:	f107 0214 	add.w	r2, r7, #20
 800568e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005690:	4413      	add	r3, r2
 8005692:	227e      	movs	r2, #126	; 0x7e
 8005694:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8005696:	2300      	movs	r3, #0
 8005698:	627b      	str	r3, [r7, #36]	; 0x24
 800569a:	e002      	b.n	80056a2 <gen_numname+0xd2>
 800569c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800569e:	3301      	adds	r3, #1
 80056a0:	627b      	str	r3, [r7, #36]	; 0x24
 80056a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056a6:	429a      	cmp	r2, r3
 80056a8:	d205      	bcs.n	80056b6 <gen_numname+0xe6>
 80056aa:	68fa      	ldr	r2, [r7, #12]
 80056ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ae:	4413      	add	r3, r2
 80056b0:	781b      	ldrb	r3, [r3, #0]
 80056b2:	2b20      	cmp	r3, #32
 80056b4:	d1f2      	bne.n	800569c <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80056b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056b8:	2b07      	cmp	r3, #7
 80056ba:	d807      	bhi.n	80056cc <gen_numname+0xfc>
 80056bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056be:	1c5a      	adds	r2, r3, #1
 80056c0:	62ba      	str	r2, [r7, #40]	; 0x28
 80056c2:	3330      	adds	r3, #48	; 0x30
 80056c4:	443b      	add	r3, r7
 80056c6:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 80056ca:	e000      	b.n	80056ce <gen_numname+0xfe>
 80056cc:	2120      	movs	r1, #32
 80056ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d0:	1c5a      	adds	r2, r3, #1
 80056d2:	627a      	str	r2, [r7, #36]	; 0x24
 80056d4:	68fa      	ldr	r2, [r7, #12]
 80056d6:	4413      	add	r3, r2
 80056d8:	460a      	mov	r2, r1
 80056da:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 80056dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056de:	2b07      	cmp	r3, #7
 80056e0:	d9e9      	bls.n	80056b6 <gen_numname+0xe6>
}
 80056e2:	bf00      	nop
 80056e4:	bf00      	nop
 80056e6:	3730      	adds	r7, #48	; 0x30
 80056e8:	46bd      	mov	sp, r7
 80056ea:	bd80      	pop	{r7, pc}

080056ec <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b085      	sub	sp, #20
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80056f4:	2300      	movs	r3, #0
 80056f6:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 80056f8:	230b      	movs	r3, #11
 80056fa:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80056fc:	7bfb      	ldrb	r3, [r7, #15]
 80056fe:	b2da      	uxtb	r2, r3
 8005700:	0852      	lsrs	r2, r2, #1
 8005702:	01db      	lsls	r3, r3, #7
 8005704:	4313      	orrs	r3, r2
 8005706:	b2da      	uxtb	r2, r3
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	1c59      	adds	r1, r3, #1
 800570c:	6079      	str	r1, [r7, #4]
 800570e:	781b      	ldrb	r3, [r3, #0]
 8005710:	4413      	add	r3, r2
 8005712:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	3b01      	subs	r3, #1
 8005718:	60bb      	str	r3, [r7, #8]
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d1ed      	bne.n	80056fc <sum_sfn+0x10>
	return sum;
 8005720:	7bfb      	ldrb	r3, [r7, #15]
}
 8005722:	4618      	mov	r0, r3
 8005724:	3714      	adds	r7, #20
 8005726:	46bd      	mov	sp, r7
 8005728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572c:	4770      	bx	lr

0800572e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800572e:	b580      	push	{r7, lr}
 8005730:	b086      	sub	sp, #24
 8005732:	af00      	add	r7, sp, #0
 8005734:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800573c:	2100      	movs	r1, #0
 800573e:	6878      	ldr	r0, [r7, #4]
 8005740:	f7ff fc88 	bl	8005054 <dir_sdi>
 8005744:	4603      	mov	r3, r0
 8005746:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8005748:	7dfb      	ldrb	r3, [r7, #23]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d001      	beq.n	8005752 <dir_find+0x24>
 800574e:	7dfb      	ldrb	r3, [r7, #23]
 8005750:	e0a9      	b.n	80058a6 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8005752:	23ff      	movs	r3, #255	; 0xff
 8005754:	753b      	strb	r3, [r7, #20]
 8005756:	7d3b      	ldrb	r3, [r7, #20]
 8005758:	757b      	strb	r3, [r7, #21]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	f04f 32ff 	mov.w	r2, #4294967295
 8005760:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	69db      	ldr	r3, [r3, #28]
 8005766:	4619      	mov	r1, r3
 8005768:	6938      	ldr	r0, [r7, #16]
 800576a:	f7ff f891 	bl	8004890 <move_window>
 800576e:	4603      	mov	r3, r0
 8005770:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8005772:	7dfb      	ldrb	r3, [r7, #23]
 8005774:	2b00      	cmp	r3, #0
 8005776:	f040 8090 	bne.w	800589a <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6a1b      	ldr	r3, [r3, #32]
 800577e:	781b      	ldrb	r3, [r3, #0]
 8005780:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8005782:	7dbb      	ldrb	r3, [r7, #22]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d102      	bne.n	800578e <dir_find+0x60>
 8005788:	2304      	movs	r3, #4
 800578a:	75fb      	strb	r3, [r7, #23]
 800578c:	e08a      	b.n	80058a4 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6a1b      	ldr	r3, [r3, #32]
 8005792:	330b      	adds	r3, #11
 8005794:	781b      	ldrb	r3, [r3, #0]
 8005796:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800579a:	73fb      	strb	r3, [r7, #15]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	7bfa      	ldrb	r2, [r7, #15]
 80057a0:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80057a2:	7dbb      	ldrb	r3, [r7, #22]
 80057a4:	2be5      	cmp	r3, #229	; 0xe5
 80057a6:	d007      	beq.n	80057b8 <dir_find+0x8a>
 80057a8:	7bfb      	ldrb	r3, [r7, #15]
 80057aa:	f003 0308 	and.w	r3, r3, #8
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d009      	beq.n	80057c6 <dir_find+0x98>
 80057b2:	7bfb      	ldrb	r3, [r7, #15]
 80057b4:	2b0f      	cmp	r3, #15
 80057b6:	d006      	beq.n	80057c6 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80057b8:	23ff      	movs	r3, #255	; 0xff
 80057ba:	757b      	strb	r3, [r7, #21]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	f04f 32ff 	mov.w	r2, #4294967295
 80057c2:	631a      	str	r2, [r3, #48]	; 0x30
 80057c4:	e05e      	b.n	8005884 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80057c6:	7bfb      	ldrb	r3, [r7, #15]
 80057c8:	2b0f      	cmp	r3, #15
 80057ca:	d136      	bne.n	800583a <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80057d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d154      	bne.n	8005884 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80057da:	7dbb      	ldrb	r3, [r7, #22]
 80057dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d00d      	beq.n	8005800 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6a1b      	ldr	r3, [r3, #32]
 80057e8:	7b5b      	ldrb	r3, [r3, #13]
 80057ea:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 80057ec:	7dbb      	ldrb	r3, [r7, #22]
 80057ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057f2:	75bb      	strb	r3, [r7, #22]
 80057f4:	7dbb      	ldrb	r3, [r7, #22]
 80057f6:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	695a      	ldr	r2, [r3, #20]
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8005800:	7dba      	ldrb	r2, [r7, #22]
 8005802:	7d7b      	ldrb	r3, [r7, #21]
 8005804:	429a      	cmp	r2, r3
 8005806:	d115      	bne.n	8005834 <dir_find+0x106>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6a1b      	ldr	r3, [r3, #32]
 800580c:	330d      	adds	r3, #13
 800580e:	781b      	ldrb	r3, [r3, #0]
 8005810:	7d3a      	ldrb	r2, [r7, #20]
 8005812:	429a      	cmp	r2, r3
 8005814:	d10e      	bne.n	8005834 <dir_find+0x106>
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	691a      	ldr	r2, [r3, #16]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6a1b      	ldr	r3, [r3, #32]
 800581e:	4619      	mov	r1, r3
 8005820:	4610      	mov	r0, r2
 8005822:	f7ff fdfd 	bl	8005420 <cmp_lfn>
 8005826:	4603      	mov	r3, r0
 8005828:	2b00      	cmp	r3, #0
 800582a:	d003      	beq.n	8005834 <dir_find+0x106>
 800582c:	7d7b      	ldrb	r3, [r7, #21]
 800582e:	3b01      	subs	r3, #1
 8005830:	b2db      	uxtb	r3, r3
 8005832:	e000      	b.n	8005836 <dir_find+0x108>
 8005834:	23ff      	movs	r3, #255	; 0xff
 8005836:	757b      	strb	r3, [r7, #21]
 8005838:	e024      	b.n	8005884 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800583a:	7d7b      	ldrb	r3, [r7, #21]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d109      	bne.n	8005854 <dir_find+0x126>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6a1b      	ldr	r3, [r3, #32]
 8005844:	4618      	mov	r0, r3
 8005846:	f7ff ff51 	bl	80056ec <sum_sfn>
 800584a:	4603      	mov	r3, r0
 800584c:	461a      	mov	r2, r3
 800584e:	7d3b      	ldrb	r3, [r7, #20]
 8005850:	4293      	cmp	r3, r2
 8005852:	d024      	beq.n	800589e <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800585a:	f003 0301 	and.w	r3, r3, #1
 800585e:	2b00      	cmp	r3, #0
 8005860:	d10a      	bne.n	8005878 <dir_find+0x14a>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6a18      	ldr	r0, [r3, #32]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	3324      	adds	r3, #36	; 0x24
 800586a:	220b      	movs	r2, #11
 800586c:	4619      	mov	r1, r3
 800586e:	f7fe fdeb 	bl	8004448 <mem_cmp>
 8005872:	4603      	mov	r3, r0
 8005874:	2b00      	cmp	r3, #0
 8005876:	d014      	beq.n	80058a2 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8005878:	23ff      	movs	r3, #255	; 0xff
 800587a:	757b      	strb	r3, [r7, #21]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	f04f 32ff 	mov.w	r2, #4294967295
 8005882:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8005884:	2100      	movs	r1, #0
 8005886:	6878      	ldr	r0, [r7, #4]
 8005888:	f7ff fc6d 	bl	8005166 <dir_next>
 800588c:	4603      	mov	r3, r0
 800588e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8005890:	7dfb      	ldrb	r3, [r7, #23]
 8005892:	2b00      	cmp	r3, #0
 8005894:	f43f af65 	beq.w	8005762 <dir_find+0x34>
 8005898:	e004      	b.n	80058a4 <dir_find+0x176>
		if (res != FR_OK) break;
 800589a:	bf00      	nop
 800589c:	e002      	b.n	80058a4 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800589e:	bf00      	nop
 80058a0:	e000      	b.n	80058a4 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80058a2:	bf00      	nop

	return res;
 80058a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80058a6:	4618      	mov	r0, r3
 80058a8:	3718      	adds	r7, #24
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}
	...

080058b0 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b08c      	sub	sp, #48	; 0x30
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80058c4:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d001      	beq.n	80058d0 <dir_register+0x20>
 80058cc:	2306      	movs	r3, #6
 80058ce:	e0e0      	b.n	8005a92 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80058d0:	2300      	movs	r3, #0
 80058d2:	627b      	str	r3, [r7, #36]	; 0x24
 80058d4:	e002      	b.n	80058dc <dir_register+0x2c>
 80058d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d8:	3301      	adds	r3, #1
 80058da:	627b      	str	r3, [r7, #36]	; 0x24
 80058dc:	69fb      	ldr	r3, [r7, #28]
 80058de:	691a      	ldr	r2, [r3, #16]
 80058e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e2:	005b      	lsls	r3, r3, #1
 80058e4:	4413      	add	r3, r2
 80058e6:	881b      	ldrh	r3, [r3, #0]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d1f4      	bne.n	80058d6 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	f103 0124 	add.w	r1, r3, #36	; 0x24
 80058f2:	f107 030c 	add.w	r3, r7, #12
 80058f6:	220c      	movs	r2, #12
 80058f8:	4618      	mov	r0, r3
 80058fa:	f7fe fd69 	bl	80043d0 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80058fe:	7dfb      	ldrb	r3, [r7, #23]
 8005900:	f003 0301 	and.w	r3, r3, #1
 8005904:	2b00      	cmp	r3, #0
 8005906:	d032      	beq.n	800596e <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2240      	movs	r2, #64	; 0x40
 800590c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8005910:	2301      	movs	r3, #1
 8005912:	62bb      	str	r3, [r7, #40]	; 0x28
 8005914:	e016      	b.n	8005944 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800591c:	69fb      	ldr	r3, [r7, #28]
 800591e:	691a      	ldr	r2, [r3, #16]
 8005920:	f107 010c 	add.w	r1, r7, #12
 8005924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005926:	f7ff fe53 	bl	80055d0 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	f7ff feff 	bl	800572e <dir_find>
 8005930:	4603      	mov	r3, r0
 8005932:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8005936:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800593a:	2b00      	cmp	r3, #0
 800593c:	d106      	bne.n	800594c <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800593e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005940:	3301      	adds	r3, #1
 8005942:	62bb      	str	r3, [r7, #40]	; 0x28
 8005944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005946:	2b63      	cmp	r3, #99	; 0x63
 8005948:	d9e5      	bls.n	8005916 <dir_register+0x66>
 800594a:	e000      	b.n	800594e <dir_register+0x9e>
			if (res != FR_OK) break;
 800594c:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800594e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005950:	2b64      	cmp	r3, #100	; 0x64
 8005952:	d101      	bne.n	8005958 <dir_register+0xa8>
 8005954:	2307      	movs	r3, #7
 8005956:	e09c      	b.n	8005a92 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8005958:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800595c:	2b04      	cmp	r3, #4
 800595e:	d002      	beq.n	8005966 <dir_register+0xb6>
 8005960:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005964:	e095      	b.n	8005a92 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8005966:	7dfa      	ldrb	r2, [r7, #23]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800596e:	7dfb      	ldrb	r3, [r7, #23]
 8005970:	f003 0302 	and.w	r3, r3, #2
 8005974:	2b00      	cmp	r3, #0
 8005976:	d007      	beq.n	8005988 <dir_register+0xd8>
 8005978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800597a:	330c      	adds	r3, #12
 800597c:	4a47      	ldr	r2, [pc, #284]	; (8005a9c <dir_register+0x1ec>)
 800597e:	fba2 2303 	umull	r2, r3, r2, r3
 8005982:	089b      	lsrs	r3, r3, #2
 8005984:	3301      	adds	r3, #1
 8005986:	e000      	b.n	800598a <dir_register+0xda>
 8005988:	2301      	movs	r3, #1
 800598a:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800598c:	6a39      	ldr	r1, [r7, #32]
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f7ff fcbf 	bl	8005312 <dir_alloc>
 8005994:	4603      	mov	r3, r0
 8005996:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800599a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d148      	bne.n	8005a34 <dir_register+0x184>
 80059a2:	6a3b      	ldr	r3, [r7, #32]
 80059a4:	3b01      	subs	r3, #1
 80059a6:	623b      	str	r3, [r7, #32]
 80059a8:	6a3b      	ldr	r3, [r7, #32]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d042      	beq.n	8005a34 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	695a      	ldr	r2, [r3, #20]
 80059b2:	6a3b      	ldr	r3, [r7, #32]
 80059b4:	015b      	lsls	r3, r3, #5
 80059b6:	1ad3      	subs	r3, r2, r3
 80059b8:	4619      	mov	r1, r3
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	f7ff fb4a 	bl	8005054 <dir_sdi>
 80059c0:	4603      	mov	r3, r0
 80059c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80059c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d132      	bne.n	8005a34 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	3324      	adds	r3, #36	; 0x24
 80059d2:	4618      	mov	r0, r3
 80059d4:	f7ff fe8a 	bl	80056ec <sum_sfn>
 80059d8:	4603      	mov	r3, r0
 80059da:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	69db      	ldr	r3, [r3, #28]
 80059e0:	4619      	mov	r1, r3
 80059e2:	69f8      	ldr	r0, [r7, #28]
 80059e4:	f7fe ff54 	bl	8004890 <move_window>
 80059e8:	4603      	mov	r3, r0
 80059ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 80059ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d11d      	bne.n	8005a32 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 80059f6:	69fb      	ldr	r3, [r7, #28]
 80059f8:	6918      	ldr	r0, [r3, #16]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6a19      	ldr	r1, [r3, #32]
 80059fe:	6a3b      	ldr	r3, [r7, #32]
 8005a00:	b2da      	uxtb	r2, r3
 8005a02:	7efb      	ldrb	r3, [r7, #27]
 8005a04:	f7ff fd7c 	bl	8005500 <put_lfn>
				fs->wflag = 1;
 8005a08:	69fb      	ldr	r3, [r7, #28]
 8005a0a:	2201      	movs	r2, #1
 8005a0c:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8005a0e:	2100      	movs	r1, #0
 8005a10:	6878      	ldr	r0, [r7, #4]
 8005a12:	f7ff fba8 	bl	8005166 <dir_next>
 8005a16:	4603      	mov	r3, r0
 8005a18:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8005a1c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d107      	bne.n	8005a34 <dir_register+0x184>
 8005a24:	6a3b      	ldr	r3, [r7, #32]
 8005a26:	3b01      	subs	r3, #1
 8005a28:	623b      	str	r3, [r7, #32]
 8005a2a:	6a3b      	ldr	r3, [r7, #32]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d1d5      	bne.n	80059dc <dir_register+0x12c>
 8005a30:	e000      	b.n	8005a34 <dir_register+0x184>
				if (res != FR_OK) break;
 8005a32:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8005a34:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d128      	bne.n	8005a8e <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	69db      	ldr	r3, [r3, #28]
 8005a40:	4619      	mov	r1, r3
 8005a42:	69f8      	ldr	r0, [r7, #28]
 8005a44:	f7fe ff24 	bl	8004890 <move_window>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8005a4e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d11b      	bne.n	8005a8e <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6a1b      	ldr	r3, [r3, #32]
 8005a5a:	2220      	movs	r2, #32
 8005a5c:	2100      	movs	r1, #0
 8005a5e:	4618      	mov	r0, r3
 8005a60:	f7fe fcd7 	bl	8004412 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6a18      	ldr	r0, [r3, #32]
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	3324      	adds	r3, #36	; 0x24
 8005a6c:	220b      	movs	r2, #11
 8005a6e:	4619      	mov	r1, r3
 8005a70:	f7fe fcae 	bl	80043d0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6a1b      	ldr	r3, [r3, #32]
 8005a7e:	330c      	adds	r3, #12
 8005a80:	f002 0218 	and.w	r2, r2, #24
 8005a84:	b2d2      	uxtb	r2, r2
 8005a86:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8005a88:	69fb      	ldr	r3, [r7, #28]
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8005a8e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	3730      	adds	r7, #48	; 0x30
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}
 8005a9a:	bf00      	nop
 8005a9c:	4ec4ec4f 	.word	0x4ec4ec4f

08005aa0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b08a      	sub	sp, #40	; 0x28
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
 8005aa8:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	613b      	str	r3, [r7, #16]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	691b      	ldr	r3, [r3, #16]
 8005ab6:	60fb      	str	r3, [r7, #12]
 8005ab8:	2300      	movs	r3, #0
 8005aba:	617b      	str	r3, [r7, #20]
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8005ac0:	69bb      	ldr	r3, [r7, #24]
 8005ac2:	1c5a      	adds	r2, r3, #1
 8005ac4:	61ba      	str	r2, [r7, #24]
 8005ac6:	693a      	ldr	r2, [r7, #16]
 8005ac8:	4413      	add	r3, r2
 8005aca:	781b      	ldrb	r3, [r3, #0]
 8005acc:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8005ace:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005ad0:	2b1f      	cmp	r3, #31
 8005ad2:	d940      	bls.n	8005b56 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8005ad4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005ad6:	2b2f      	cmp	r3, #47	; 0x2f
 8005ad8:	d006      	beq.n	8005ae8 <create_name+0x48>
 8005ada:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005adc:	2b5c      	cmp	r3, #92	; 0x5c
 8005ade:	d110      	bne.n	8005b02 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8005ae0:	e002      	b.n	8005ae8 <create_name+0x48>
 8005ae2:	69bb      	ldr	r3, [r7, #24]
 8005ae4:	3301      	adds	r3, #1
 8005ae6:	61bb      	str	r3, [r7, #24]
 8005ae8:	693a      	ldr	r2, [r7, #16]
 8005aea:	69bb      	ldr	r3, [r7, #24]
 8005aec:	4413      	add	r3, r2
 8005aee:	781b      	ldrb	r3, [r3, #0]
 8005af0:	2b2f      	cmp	r3, #47	; 0x2f
 8005af2:	d0f6      	beq.n	8005ae2 <create_name+0x42>
 8005af4:	693a      	ldr	r2, [r7, #16]
 8005af6:	69bb      	ldr	r3, [r7, #24]
 8005af8:	4413      	add	r3, r2
 8005afa:	781b      	ldrb	r3, [r3, #0]
 8005afc:	2b5c      	cmp	r3, #92	; 0x5c
 8005afe:	d0f0      	beq.n	8005ae2 <create_name+0x42>
			break;
 8005b00:	e02a      	b.n	8005b58 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	2bfe      	cmp	r3, #254	; 0xfe
 8005b06:	d901      	bls.n	8005b0c <create_name+0x6c>
 8005b08:	2306      	movs	r3, #6
 8005b0a:	e17d      	b.n	8005e08 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8005b0c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005b0e:	b2db      	uxtb	r3, r3
 8005b10:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8005b12:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005b14:	2101      	movs	r1, #1
 8005b16:	4618      	mov	r0, r3
 8005b18:	f001 fcbc 	bl	8007494 <ff_convert>
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8005b20:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d101      	bne.n	8005b2a <create_name+0x8a>
 8005b26:	2306      	movs	r3, #6
 8005b28:	e16e      	b.n	8005e08 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8005b2a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005b2c:	2b7f      	cmp	r3, #127	; 0x7f
 8005b2e:	d809      	bhi.n	8005b44 <create_name+0xa4>
 8005b30:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005b32:	4619      	mov	r1, r3
 8005b34:	488d      	ldr	r0, [pc, #564]	; (8005d6c <create_name+0x2cc>)
 8005b36:	f7fe fcae 	bl	8004496 <chk_chr>
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d001      	beq.n	8005b44 <create_name+0xa4>
 8005b40:	2306      	movs	r3, #6
 8005b42:	e161      	b.n	8005e08 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8005b44:	697b      	ldr	r3, [r7, #20]
 8005b46:	1c5a      	adds	r2, r3, #1
 8005b48:	617a      	str	r2, [r7, #20]
 8005b4a:	005b      	lsls	r3, r3, #1
 8005b4c:	68fa      	ldr	r2, [r7, #12]
 8005b4e:	4413      	add	r3, r2
 8005b50:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005b52:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8005b54:	e7b4      	b.n	8005ac0 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8005b56:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8005b58:	693a      	ldr	r2, [r7, #16]
 8005b5a:	69bb      	ldr	r3, [r7, #24]
 8005b5c:	441a      	add	r2, r3
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8005b62:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005b64:	2b1f      	cmp	r3, #31
 8005b66:	d801      	bhi.n	8005b6c <create_name+0xcc>
 8005b68:	2304      	movs	r3, #4
 8005b6a:	e000      	b.n	8005b6e <create_name+0xce>
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8005b72:	e011      	b.n	8005b98 <create_name+0xf8>
		w = lfn[di - 1];
 8005b74:	697b      	ldr	r3, [r7, #20]
 8005b76:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005b7a:	3b01      	subs	r3, #1
 8005b7c:	005b      	lsls	r3, r3, #1
 8005b7e:	68fa      	ldr	r2, [r7, #12]
 8005b80:	4413      	add	r3, r2
 8005b82:	881b      	ldrh	r3, [r3, #0]
 8005b84:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8005b86:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005b88:	2b20      	cmp	r3, #32
 8005b8a:	d002      	beq.n	8005b92 <create_name+0xf2>
 8005b8c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005b8e:	2b2e      	cmp	r3, #46	; 0x2e
 8005b90:	d106      	bne.n	8005ba0 <create_name+0x100>
		di--;
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	3b01      	subs	r3, #1
 8005b96:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d1ea      	bne.n	8005b74 <create_name+0xd4>
 8005b9e:	e000      	b.n	8005ba2 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8005ba0:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8005ba2:	697b      	ldr	r3, [r7, #20]
 8005ba4:	005b      	lsls	r3, r3, #1
 8005ba6:	68fa      	ldr	r2, [r7, #12]
 8005ba8:	4413      	add	r3, r2
 8005baa:	2200      	movs	r2, #0
 8005bac:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d101      	bne.n	8005bb8 <create_name+0x118>
 8005bb4:	2306      	movs	r3, #6
 8005bb6:	e127      	b.n	8005e08 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	3324      	adds	r3, #36	; 0x24
 8005bbc:	220b      	movs	r2, #11
 8005bbe:	2120      	movs	r1, #32
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	f7fe fc26 	bl	8004412 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	61bb      	str	r3, [r7, #24]
 8005bca:	e002      	b.n	8005bd2 <create_name+0x132>
 8005bcc:	69bb      	ldr	r3, [r7, #24]
 8005bce:	3301      	adds	r3, #1
 8005bd0:	61bb      	str	r3, [r7, #24]
 8005bd2:	69bb      	ldr	r3, [r7, #24]
 8005bd4:	005b      	lsls	r3, r3, #1
 8005bd6:	68fa      	ldr	r2, [r7, #12]
 8005bd8:	4413      	add	r3, r2
 8005bda:	881b      	ldrh	r3, [r3, #0]
 8005bdc:	2b20      	cmp	r3, #32
 8005bde:	d0f5      	beq.n	8005bcc <create_name+0x12c>
 8005be0:	69bb      	ldr	r3, [r7, #24]
 8005be2:	005b      	lsls	r3, r3, #1
 8005be4:	68fa      	ldr	r2, [r7, #12]
 8005be6:	4413      	add	r3, r2
 8005be8:	881b      	ldrh	r3, [r3, #0]
 8005bea:	2b2e      	cmp	r3, #46	; 0x2e
 8005bec:	d0ee      	beq.n	8005bcc <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8005bee:	69bb      	ldr	r3, [r7, #24]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d009      	beq.n	8005c08 <create_name+0x168>
 8005bf4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005bf8:	f043 0303 	orr.w	r3, r3, #3
 8005bfc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8005c00:	e002      	b.n	8005c08 <create_name+0x168>
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	3b01      	subs	r3, #1
 8005c06:	617b      	str	r3, [r7, #20]
 8005c08:	697b      	ldr	r3, [r7, #20]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d009      	beq.n	8005c22 <create_name+0x182>
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005c14:	3b01      	subs	r3, #1
 8005c16:	005b      	lsls	r3, r3, #1
 8005c18:	68fa      	ldr	r2, [r7, #12]
 8005c1a:	4413      	add	r3, r2
 8005c1c:	881b      	ldrh	r3, [r3, #0]
 8005c1e:	2b2e      	cmp	r3, #46	; 0x2e
 8005c20:	d1ef      	bne.n	8005c02 <create_name+0x162>

	i = b = 0; ni = 8;
 8005c22:	2300      	movs	r3, #0
 8005c24:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005c28:	2300      	movs	r3, #0
 8005c2a:	623b      	str	r3, [r7, #32]
 8005c2c:	2308      	movs	r3, #8
 8005c2e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8005c30:	69bb      	ldr	r3, [r7, #24]
 8005c32:	1c5a      	adds	r2, r3, #1
 8005c34:	61ba      	str	r2, [r7, #24]
 8005c36:	005b      	lsls	r3, r3, #1
 8005c38:	68fa      	ldr	r2, [r7, #12]
 8005c3a:	4413      	add	r3, r2
 8005c3c:	881b      	ldrh	r3, [r3, #0]
 8005c3e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8005c40:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	f000 8090 	beq.w	8005d68 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8005c48:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005c4a:	2b20      	cmp	r3, #32
 8005c4c:	d006      	beq.n	8005c5c <create_name+0x1bc>
 8005c4e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005c50:	2b2e      	cmp	r3, #46	; 0x2e
 8005c52:	d10a      	bne.n	8005c6a <create_name+0x1ca>
 8005c54:	69ba      	ldr	r2, [r7, #24]
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	429a      	cmp	r2, r3
 8005c5a:	d006      	beq.n	8005c6a <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8005c5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005c60:	f043 0303 	orr.w	r3, r3, #3
 8005c64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005c68:	e07d      	b.n	8005d66 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8005c6a:	6a3a      	ldr	r2, [r7, #32]
 8005c6c:	69fb      	ldr	r3, [r7, #28]
 8005c6e:	429a      	cmp	r2, r3
 8005c70:	d203      	bcs.n	8005c7a <create_name+0x1da>
 8005c72:	69ba      	ldr	r2, [r7, #24]
 8005c74:	697b      	ldr	r3, [r7, #20]
 8005c76:	429a      	cmp	r2, r3
 8005c78:	d123      	bne.n	8005cc2 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8005c7a:	69fb      	ldr	r3, [r7, #28]
 8005c7c:	2b0b      	cmp	r3, #11
 8005c7e:	d106      	bne.n	8005c8e <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8005c80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005c84:	f043 0303 	orr.w	r3, r3, #3
 8005c88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005c8c:	e075      	b.n	8005d7a <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8005c8e:	69ba      	ldr	r2, [r7, #24]
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	429a      	cmp	r2, r3
 8005c94:	d005      	beq.n	8005ca2 <create_name+0x202>
 8005c96:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005c9a:	f043 0303 	orr.w	r3, r3, #3
 8005c9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8005ca2:	69ba      	ldr	r2, [r7, #24]
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	429a      	cmp	r2, r3
 8005ca8:	d866      	bhi.n	8005d78 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	61bb      	str	r3, [r7, #24]
 8005cae:	2308      	movs	r3, #8
 8005cb0:	623b      	str	r3, [r7, #32]
 8005cb2:	230b      	movs	r3, #11
 8005cb4:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8005cb6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005cba:	009b      	lsls	r3, r3, #2
 8005cbc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005cc0:	e051      	b.n	8005d66 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8005cc2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005cc4:	2b7f      	cmp	r3, #127	; 0x7f
 8005cc6:	d914      	bls.n	8005cf2 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8005cc8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005cca:	2100      	movs	r1, #0
 8005ccc:	4618      	mov	r0, r3
 8005cce:	f001 fbe1 	bl	8007494 <ff_convert>
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8005cd6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d004      	beq.n	8005ce6 <create_name+0x246>
 8005cdc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005cde:	3b80      	subs	r3, #128	; 0x80
 8005ce0:	4a23      	ldr	r2, [pc, #140]	; (8005d70 <create_name+0x2d0>)
 8005ce2:	5cd3      	ldrb	r3, [r2, r3]
 8005ce4:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8005ce6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005cea:	f043 0302 	orr.w	r3, r3, #2
 8005cee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8005cf2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d007      	beq.n	8005d08 <create_name+0x268>
 8005cf8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005cfa:	4619      	mov	r1, r3
 8005cfc:	481d      	ldr	r0, [pc, #116]	; (8005d74 <create_name+0x2d4>)
 8005cfe:	f7fe fbca 	bl	8004496 <chk_chr>
 8005d02:	4603      	mov	r3, r0
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d008      	beq.n	8005d1a <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8005d08:	235f      	movs	r3, #95	; 0x5f
 8005d0a:	84bb      	strh	r3, [r7, #36]	; 0x24
 8005d0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005d10:	f043 0303 	orr.w	r3, r3, #3
 8005d14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005d18:	e01b      	b.n	8005d52 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8005d1a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005d1c:	2b40      	cmp	r3, #64	; 0x40
 8005d1e:	d909      	bls.n	8005d34 <create_name+0x294>
 8005d20:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005d22:	2b5a      	cmp	r3, #90	; 0x5a
 8005d24:	d806      	bhi.n	8005d34 <create_name+0x294>
					b |= 2;
 8005d26:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005d2a:	f043 0302 	orr.w	r3, r3, #2
 8005d2e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005d32:	e00e      	b.n	8005d52 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8005d34:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005d36:	2b60      	cmp	r3, #96	; 0x60
 8005d38:	d90b      	bls.n	8005d52 <create_name+0x2b2>
 8005d3a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005d3c:	2b7a      	cmp	r3, #122	; 0x7a
 8005d3e:	d808      	bhi.n	8005d52 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8005d40:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005d44:	f043 0301 	orr.w	r3, r3, #1
 8005d48:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005d4c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005d4e:	3b20      	subs	r3, #32
 8005d50:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8005d52:	6a3b      	ldr	r3, [r7, #32]
 8005d54:	1c5a      	adds	r2, r3, #1
 8005d56:	623a      	str	r2, [r7, #32]
 8005d58:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005d5a:	b2d1      	uxtb	r1, r2
 8005d5c:	687a      	ldr	r2, [r7, #4]
 8005d5e:	4413      	add	r3, r2
 8005d60:	460a      	mov	r2, r1
 8005d62:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8005d66:	e763      	b.n	8005c30 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8005d68:	bf00      	nop
 8005d6a:	e006      	b.n	8005d7a <create_name+0x2da>
 8005d6c:	0800bb64 	.word	0x0800bb64
 8005d70:	0800bd1c 	.word	0x0800bd1c
 8005d74:	0800bb70 	.word	0x0800bb70
			if (si > di) break;			/* No extension */
 8005d78:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005d80:	2be5      	cmp	r3, #229	; 0xe5
 8005d82:	d103      	bne.n	8005d8c <create_name+0x2ec>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2205      	movs	r2, #5
 8005d88:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8005d8c:	69fb      	ldr	r3, [r7, #28]
 8005d8e:	2b08      	cmp	r3, #8
 8005d90:	d104      	bne.n	8005d9c <create_name+0x2fc>
 8005d92:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005d96:	009b      	lsls	r3, r3, #2
 8005d98:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8005d9c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005da0:	f003 030c 	and.w	r3, r3, #12
 8005da4:	2b0c      	cmp	r3, #12
 8005da6:	d005      	beq.n	8005db4 <create_name+0x314>
 8005da8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005dac:	f003 0303 	and.w	r3, r3, #3
 8005db0:	2b03      	cmp	r3, #3
 8005db2:	d105      	bne.n	8005dc0 <create_name+0x320>
 8005db4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005db8:	f043 0302 	orr.w	r3, r3, #2
 8005dbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8005dc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005dc4:	f003 0302 	and.w	r3, r3, #2
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d117      	bne.n	8005dfc <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8005dcc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005dd0:	f003 0303 	and.w	r3, r3, #3
 8005dd4:	2b01      	cmp	r3, #1
 8005dd6:	d105      	bne.n	8005de4 <create_name+0x344>
 8005dd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005ddc:	f043 0310 	orr.w	r3, r3, #16
 8005de0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8005de4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005de8:	f003 030c 	and.w	r3, r3, #12
 8005dec:	2b04      	cmp	r3, #4
 8005dee:	d105      	bne.n	8005dfc <create_name+0x35c>
 8005df0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005df4:	f043 0308 	orr.w	r3, r3, #8
 8005df8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8005e02:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8005e06:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8005e08:	4618      	mov	r0, r3
 8005e0a:	3728      	adds	r7, #40	; 0x28
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	bd80      	pop	{r7, pc}

08005e10 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b086      	sub	sp, #24
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
 8005e18:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8005e1e:	693b      	ldr	r3, [r7, #16]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8005e24:	e002      	b.n	8005e2c <follow_path+0x1c>
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	3301      	adds	r3, #1
 8005e2a:	603b      	str	r3, [r7, #0]
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	781b      	ldrb	r3, [r3, #0]
 8005e30:	2b2f      	cmp	r3, #47	; 0x2f
 8005e32:	d0f8      	beq.n	8005e26 <follow_path+0x16>
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	781b      	ldrb	r3, [r3, #0]
 8005e38:	2b5c      	cmp	r3, #92	; 0x5c
 8005e3a:	d0f4      	beq.n	8005e26 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8005e3c:	693b      	ldr	r3, [r7, #16]
 8005e3e:	2200      	movs	r2, #0
 8005e40:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	781b      	ldrb	r3, [r3, #0]
 8005e46:	2b1f      	cmp	r3, #31
 8005e48:	d80a      	bhi.n	8005e60 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2280      	movs	r2, #128	; 0x80
 8005e4e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8005e52:	2100      	movs	r1, #0
 8005e54:	6878      	ldr	r0, [r7, #4]
 8005e56:	f7ff f8fd 	bl	8005054 <dir_sdi>
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	75fb      	strb	r3, [r7, #23]
 8005e5e:	e048      	b.n	8005ef2 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005e60:	463b      	mov	r3, r7
 8005e62:	4619      	mov	r1, r3
 8005e64:	6878      	ldr	r0, [r7, #4]
 8005e66:	f7ff fe1b 	bl	8005aa0 <create_name>
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005e6e:	7dfb      	ldrb	r3, [r7, #23]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d139      	bne.n	8005ee8 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8005e74:	6878      	ldr	r0, [r7, #4]
 8005e76:	f7ff fc5a 	bl	800572e <dir_find>
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005e84:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8005e86:	7dfb      	ldrb	r3, [r7, #23]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d00a      	beq.n	8005ea2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8005e8c:	7dfb      	ldrb	r3, [r7, #23]
 8005e8e:	2b04      	cmp	r3, #4
 8005e90:	d12c      	bne.n	8005eec <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8005e92:	7afb      	ldrb	r3, [r7, #11]
 8005e94:	f003 0304 	and.w	r3, r3, #4
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d127      	bne.n	8005eec <follow_path+0xdc>
 8005e9c:	2305      	movs	r3, #5
 8005e9e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8005ea0:	e024      	b.n	8005eec <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005ea2:	7afb      	ldrb	r3, [r7, #11]
 8005ea4:	f003 0304 	and.w	r3, r3, #4
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d121      	bne.n	8005ef0 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8005eac:	693b      	ldr	r3, [r7, #16]
 8005eae:	799b      	ldrb	r3, [r3, #6]
 8005eb0:	f003 0310 	and.w	r3, r3, #16
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d102      	bne.n	8005ebe <follow_path+0xae>
				res = FR_NO_PATH; break;
 8005eb8:	2305      	movs	r3, #5
 8005eba:	75fb      	strb	r3, [r7, #23]
 8005ebc:	e019      	b.n	8005ef2 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	695b      	ldr	r3, [r3, #20]
 8005ec8:	68fa      	ldr	r2, [r7, #12]
 8005eca:	8992      	ldrh	r2, [r2, #12]
 8005ecc:	fbb3 f0f2 	udiv	r0, r3, r2
 8005ed0:	fb00 f202 	mul.w	r2, r0, r2
 8005ed4:	1a9b      	subs	r3, r3, r2
 8005ed6:	440b      	add	r3, r1
 8005ed8:	4619      	mov	r1, r3
 8005eda:	68f8      	ldr	r0, [r7, #12]
 8005edc:	f7ff fa60 	bl	80053a0 <ld_clust>
 8005ee0:	4602      	mov	r2, r0
 8005ee2:	693b      	ldr	r3, [r7, #16]
 8005ee4:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005ee6:	e7bb      	b.n	8005e60 <follow_path+0x50>
			if (res != FR_OK) break;
 8005ee8:	bf00      	nop
 8005eea:	e002      	b.n	8005ef2 <follow_path+0xe2>
				break;
 8005eec:	bf00      	nop
 8005eee:	e000      	b.n	8005ef2 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005ef0:	bf00      	nop
			}
		}
	}

	return res;
 8005ef2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	3718      	adds	r7, #24
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	bd80      	pop	{r7, pc}

08005efc <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8005efc:	b480      	push	{r7}
 8005efe:	b087      	sub	sp, #28
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8005f04:	f04f 33ff 	mov.w	r3, #4294967295
 8005f08:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d031      	beq.n	8005f76 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	617b      	str	r3, [r7, #20]
 8005f18:	e002      	b.n	8005f20 <get_ldnumber+0x24>
 8005f1a:	697b      	ldr	r3, [r7, #20]
 8005f1c:	3301      	adds	r3, #1
 8005f1e:	617b      	str	r3, [r7, #20]
 8005f20:	697b      	ldr	r3, [r7, #20]
 8005f22:	781b      	ldrb	r3, [r3, #0]
 8005f24:	2b1f      	cmp	r3, #31
 8005f26:	d903      	bls.n	8005f30 <get_ldnumber+0x34>
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	781b      	ldrb	r3, [r3, #0]
 8005f2c:	2b3a      	cmp	r3, #58	; 0x3a
 8005f2e:	d1f4      	bne.n	8005f1a <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	781b      	ldrb	r3, [r3, #0]
 8005f34:	2b3a      	cmp	r3, #58	; 0x3a
 8005f36:	d11c      	bne.n	8005f72 <get_ldnumber+0x76>
			tp = *path;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	1c5a      	adds	r2, r3, #1
 8005f42:	60fa      	str	r2, [r7, #12]
 8005f44:	781b      	ldrb	r3, [r3, #0]
 8005f46:	3b30      	subs	r3, #48	; 0x30
 8005f48:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	2b09      	cmp	r3, #9
 8005f4e:	d80e      	bhi.n	8005f6e <get_ldnumber+0x72>
 8005f50:	68fa      	ldr	r2, [r7, #12]
 8005f52:	697b      	ldr	r3, [r7, #20]
 8005f54:	429a      	cmp	r2, r3
 8005f56:	d10a      	bne.n	8005f6e <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d107      	bne.n	8005f6e <get_ldnumber+0x72>
					vol = (int)i;
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	3301      	adds	r3, #1
 8005f66:	617b      	str	r3, [r7, #20]
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	697a      	ldr	r2, [r7, #20]
 8005f6c:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8005f6e:	693b      	ldr	r3, [r7, #16]
 8005f70:	e002      	b.n	8005f78 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8005f72:	2300      	movs	r3, #0
 8005f74:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8005f76:	693b      	ldr	r3, [r7, #16]
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	371c      	adds	r7, #28
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f82:	4770      	bx	lr

08005f84 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b082      	sub	sp, #8
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
 8005f8c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2200      	movs	r2, #0
 8005f92:	70da      	strb	r2, [r3, #3]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	f04f 32ff 	mov.w	r2, #4294967295
 8005f9a:	639a      	str	r2, [r3, #56]	; 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8005f9c:	6839      	ldr	r1, [r7, #0]
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f7fe fc76 	bl	8004890 <move_window>
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d001      	beq.n	8005fae <check_fs+0x2a>
 8005faa:	2304      	movs	r3, #4
 8005fac:	e038      	b.n	8006020 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	333c      	adds	r3, #60	; 0x3c
 8005fb2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	f7fe f988 	bl	80042cc <ld_word>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	461a      	mov	r2, r3
 8005fc0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8005fc4:	429a      	cmp	r2, r3
 8005fc6:	d001      	beq.n	8005fcc <check_fs+0x48>
 8005fc8:	2303      	movs	r3, #3
 8005fca:	e029      	b.n	8006020 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fd2:	2be9      	cmp	r3, #233	; 0xe9
 8005fd4:	d009      	beq.n	8005fea <check_fs+0x66>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fdc:	2beb      	cmp	r3, #235	; 0xeb
 8005fde:	d11e      	bne.n	800601e <check_fs+0x9a>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005fe6:	2b90      	cmp	r3, #144	; 0x90
 8005fe8:	d119      	bne.n	800601e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	333c      	adds	r3, #60	; 0x3c
 8005fee:	3336      	adds	r3, #54	; 0x36
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	f7fe f983 	bl	80042fc <ld_dword>
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005ffc:	4a0a      	ldr	r2, [pc, #40]	; (8006028 <check_fs+0xa4>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d101      	bne.n	8006006 <check_fs+0x82>
 8006002:	2300      	movs	r3, #0
 8006004:	e00c      	b.n	8006020 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	333c      	adds	r3, #60	; 0x3c
 800600a:	3352      	adds	r3, #82	; 0x52
 800600c:	4618      	mov	r0, r3
 800600e:	f7fe f975 	bl	80042fc <ld_dword>
 8006012:	4603      	mov	r3, r0
 8006014:	4a05      	ldr	r2, [pc, #20]	; (800602c <check_fs+0xa8>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d101      	bne.n	800601e <check_fs+0x9a>
 800601a:	2300      	movs	r3, #0
 800601c:	e000      	b.n	8006020 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800601e:	2302      	movs	r3, #2
}
 8006020:	4618      	mov	r0, r3
 8006022:	3708      	adds	r7, #8
 8006024:	46bd      	mov	sp, r7
 8006026:	bd80      	pop	{r7, pc}
 8006028:	00544146 	.word	0x00544146
 800602c:	33544146 	.word	0x33544146

08006030 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b096      	sub	sp, #88	; 0x58
 8006034:	af00      	add	r7, sp, #0
 8006036:	60f8      	str	r0, [r7, #12]
 8006038:	60b9      	str	r1, [r7, #8]
 800603a:	4613      	mov	r3, r2
 800603c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	2200      	movs	r2, #0
 8006042:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8006044:	68f8      	ldr	r0, [r7, #12]
 8006046:	f7ff ff59 	bl	8005efc <get_ldnumber>
 800604a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800604c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800604e:	2b00      	cmp	r3, #0
 8006050:	da01      	bge.n	8006056 <find_volume+0x26>
 8006052:	230b      	movs	r3, #11
 8006054:	e26a      	b.n	800652c <find_volume+0x4fc>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8006056:	4aa3      	ldr	r2, [pc, #652]	; (80062e4 <find_volume+0x2b4>)
 8006058:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800605a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800605e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006062:	2b00      	cmp	r3, #0
 8006064:	d101      	bne.n	800606a <find_volume+0x3a>
 8006066:	230c      	movs	r3, #12
 8006068:	e260      	b.n	800652c <find_volume+0x4fc>

	ENTER_FF(fs);						/* Lock the volume */
 800606a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800606c:	f7fe fa2e 	bl	80044cc <lock_fs>
 8006070:	4603      	mov	r3, r0
 8006072:	2b00      	cmp	r3, #0
 8006074:	d101      	bne.n	800607a <find_volume+0x4a>
 8006076:	230f      	movs	r3, #15
 8006078:	e258      	b.n	800652c <find_volume+0x4fc>
	*rfs = fs;							/* Return pointer to the file system object */
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800607e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8006080:	79fb      	ldrb	r3, [r7, #7]
 8006082:	f023 0301 	bic.w	r3, r3, #1
 8006086:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8006088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800608a:	781b      	ldrb	r3, [r3, #0]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d01a      	beq.n	80060c6 <find_volume+0x96>
		stat = disk_status(fs->drv);
 8006090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006092:	785b      	ldrb	r3, [r3, #1]
 8006094:	4618      	mov	r0, r3
 8006096:	f7fe f87b 	bl	8004190 <disk_status>
 800609a:	4603      	mov	r3, r0
 800609c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80060a0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80060a4:	f003 0301 	and.w	r3, r3, #1
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d10c      	bne.n	80060c6 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80060ac:	79fb      	ldrb	r3, [r7, #7]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d007      	beq.n	80060c2 <find_volume+0x92>
 80060b2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80060b6:	f003 0304 	and.w	r3, r3, #4
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d001      	beq.n	80060c2 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 80060be:	230a      	movs	r3, #10
 80060c0:	e234      	b.n	800652c <find_volume+0x4fc>
			}
			return FR_OK;				/* The file system object is valid */
 80060c2:	2300      	movs	r3, #0
 80060c4:	e232      	b.n	800652c <find_volume+0x4fc>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80060c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060c8:	2200      	movs	r2, #0
 80060ca:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80060cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060ce:	b2da      	uxtb	r2, r3
 80060d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060d2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80060d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060d6:	785b      	ldrb	r3, [r3, #1]
 80060d8:	4618      	mov	r0, r3
 80060da:	f7fe f873 	bl	80041c4 <disk_initialize>
 80060de:	4603      	mov	r3, r0
 80060e0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80060e4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80060e8:	f003 0301 	and.w	r3, r3, #1
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d001      	beq.n	80060f4 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80060f0:	2303      	movs	r3, #3
 80060f2:	e21b      	b.n	800652c <find_volume+0x4fc>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80060f4:	79fb      	ldrb	r3, [r7, #7]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d007      	beq.n	800610a <find_volume+0xda>
 80060fa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80060fe:	f003 0304 	and.w	r3, r3, #4
 8006102:	2b00      	cmp	r3, #0
 8006104:	d001      	beq.n	800610a <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 8006106:	230a      	movs	r3, #10
 8006108:	e210      	b.n	800652c <find_volume+0x4fc>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800610a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800610c:	7858      	ldrb	r0, [r3, #1]
 800610e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006110:	330c      	adds	r3, #12
 8006112:	461a      	mov	r2, r3
 8006114:	2102      	movs	r1, #2
 8006116:	f7fe f8bb 	bl	8004290 <disk_ioctl>
 800611a:	4603      	mov	r3, r0
 800611c:	2b00      	cmp	r3, #0
 800611e:	d001      	beq.n	8006124 <find_volume+0xf4>
 8006120:	2301      	movs	r3, #1
 8006122:	e203      	b.n	800652c <find_volume+0x4fc>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8006124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006126:	899b      	ldrh	r3, [r3, #12]
 8006128:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800612c:	d80d      	bhi.n	800614a <find_volume+0x11a>
 800612e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006130:	899b      	ldrh	r3, [r3, #12]
 8006132:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006136:	d308      	bcc.n	800614a <find_volume+0x11a>
 8006138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800613a:	899b      	ldrh	r3, [r3, #12]
 800613c:	461a      	mov	r2, r3
 800613e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006140:	899b      	ldrh	r3, [r3, #12]
 8006142:	3b01      	subs	r3, #1
 8006144:	4013      	ands	r3, r2
 8006146:	2b00      	cmp	r3, #0
 8006148:	d001      	beq.n	800614e <find_volume+0x11e>
 800614a:	2301      	movs	r3, #1
 800614c:	e1ee      	b.n	800652c <find_volume+0x4fc>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800614e:	2300      	movs	r3, #0
 8006150:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8006152:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006154:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006156:	f7ff ff15 	bl	8005f84 <check_fs>
 800615a:	4603      	mov	r3, r0
 800615c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8006160:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006164:	2b02      	cmp	r3, #2
 8006166:	d149      	bne.n	80061fc <find_volume+0x1cc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006168:	2300      	movs	r3, #0
 800616a:	643b      	str	r3, [r7, #64]	; 0x40
 800616c:	e01e      	b.n	80061ac <find_volume+0x17c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800616e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006170:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8006174:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006176:	011b      	lsls	r3, r3, #4
 8006178:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800617c:	4413      	add	r3, r2
 800617e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8006180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006182:	3304      	adds	r3, #4
 8006184:	781b      	ldrb	r3, [r3, #0]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d006      	beq.n	8006198 <find_volume+0x168>
 800618a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800618c:	3308      	adds	r3, #8
 800618e:	4618      	mov	r0, r3
 8006190:	f7fe f8b4 	bl	80042fc <ld_dword>
 8006194:	4602      	mov	r2, r0
 8006196:	e000      	b.n	800619a <find_volume+0x16a>
 8006198:	2200      	movs	r2, #0
 800619a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800619c:	009b      	lsls	r3, r3, #2
 800619e:	3358      	adds	r3, #88	; 0x58
 80061a0:	443b      	add	r3, r7
 80061a2:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80061a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061a8:	3301      	adds	r3, #1
 80061aa:	643b      	str	r3, [r7, #64]	; 0x40
 80061ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061ae:	2b03      	cmp	r3, #3
 80061b0:	d9dd      	bls.n	800616e <find_volume+0x13e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80061b2:	2300      	movs	r3, #0
 80061b4:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80061b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d002      	beq.n	80061c2 <find_volume+0x192>
 80061bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061be:	3b01      	subs	r3, #1
 80061c0:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80061c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061c4:	009b      	lsls	r3, r3, #2
 80061c6:	3358      	adds	r3, #88	; 0x58
 80061c8:	443b      	add	r3, r7
 80061ca:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80061ce:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80061d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d005      	beq.n	80061e2 <find_volume+0x1b2>
 80061d6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80061d8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80061da:	f7ff fed3 	bl	8005f84 <check_fs>
 80061de:	4603      	mov	r3, r0
 80061e0:	e000      	b.n	80061e4 <find_volume+0x1b4>
 80061e2:	2303      	movs	r3, #3
 80061e4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80061e8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80061ec:	2b01      	cmp	r3, #1
 80061ee:	d905      	bls.n	80061fc <find_volume+0x1cc>
 80061f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061f2:	3301      	adds	r3, #1
 80061f4:	643b      	str	r3, [r7, #64]	; 0x40
 80061f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80061f8:	2b03      	cmp	r3, #3
 80061fa:	d9e2      	bls.n	80061c2 <find_volume+0x192>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80061fc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006200:	2b04      	cmp	r3, #4
 8006202:	d101      	bne.n	8006208 <find_volume+0x1d8>
 8006204:	2301      	movs	r3, #1
 8006206:	e191      	b.n	800652c <find_volume+0x4fc>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8006208:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800620c:	2b01      	cmp	r3, #1
 800620e:	d901      	bls.n	8006214 <find_volume+0x1e4>
 8006210:	230d      	movs	r3, #13
 8006212:	e18b      	b.n	800652c <find_volume+0x4fc>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8006214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006216:	333c      	adds	r3, #60	; 0x3c
 8006218:	330b      	adds	r3, #11
 800621a:	4618      	mov	r0, r3
 800621c:	f7fe f856 	bl	80042cc <ld_word>
 8006220:	4603      	mov	r3, r0
 8006222:	461a      	mov	r2, r3
 8006224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006226:	899b      	ldrh	r3, [r3, #12]
 8006228:	429a      	cmp	r2, r3
 800622a:	d001      	beq.n	8006230 <find_volume+0x200>
 800622c:	230d      	movs	r3, #13
 800622e:	e17d      	b.n	800652c <find_volume+0x4fc>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8006230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006232:	333c      	adds	r3, #60	; 0x3c
 8006234:	3316      	adds	r3, #22
 8006236:	4618      	mov	r0, r3
 8006238:	f7fe f848 	bl	80042cc <ld_word>
 800623c:	4603      	mov	r3, r0
 800623e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8006240:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006242:	2b00      	cmp	r3, #0
 8006244:	d106      	bne.n	8006254 <find_volume+0x224>
 8006246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006248:	333c      	adds	r3, #60	; 0x3c
 800624a:	3324      	adds	r3, #36	; 0x24
 800624c:	4618      	mov	r0, r3
 800624e:	f7fe f855 	bl	80042fc <ld_dword>
 8006252:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8006254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006256:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006258:	625a      	str	r2, [r3, #36]	; 0x24

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800625a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800625c:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 8006260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006262:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8006264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006266:	789b      	ldrb	r3, [r3, #2]
 8006268:	2b01      	cmp	r3, #1
 800626a:	d005      	beq.n	8006278 <find_volume+0x248>
 800626c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800626e:	789b      	ldrb	r3, [r3, #2]
 8006270:	2b02      	cmp	r3, #2
 8006272:	d001      	beq.n	8006278 <find_volume+0x248>
 8006274:	230d      	movs	r3, #13
 8006276:	e159      	b.n	800652c <find_volume+0x4fc>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8006278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800627a:	789b      	ldrb	r3, [r3, #2]
 800627c:	461a      	mov	r2, r3
 800627e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006280:	fb02 f303 	mul.w	r3, r2, r3
 8006284:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8006286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006288:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800628c:	b29a      	uxth	r2, r3
 800628e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006290:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8006292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006294:	895b      	ldrh	r3, [r3, #10]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d008      	beq.n	80062ac <find_volume+0x27c>
 800629a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800629c:	895b      	ldrh	r3, [r3, #10]
 800629e:	461a      	mov	r2, r3
 80062a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062a2:	895b      	ldrh	r3, [r3, #10]
 80062a4:	3b01      	subs	r3, #1
 80062a6:	4013      	ands	r3, r2
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d001      	beq.n	80062b0 <find_volume+0x280>
 80062ac:	230d      	movs	r3, #13
 80062ae:	e13d      	b.n	800652c <find_volume+0x4fc>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80062b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062b2:	333c      	adds	r3, #60	; 0x3c
 80062b4:	3311      	adds	r3, #17
 80062b6:	4618      	mov	r0, r3
 80062b8:	f7fe f808 	bl	80042cc <ld_word>
 80062bc:	4603      	mov	r3, r0
 80062be:	461a      	mov	r2, r3
 80062c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062c2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80062c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062c6:	891b      	ldrh	r3, [r3, #8]
 80062c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80062ca:	8992      	ldrh	r2, [r2, #12]
 80062cc:	0952      	lsrs	r2, r2, #5
 80062ce:	b292      	uxth	r2, r2
 80062d0:	fbb3 f1f2 	udiv	r1, r3, r2
 80062d4:	fb01 f202 	mul.w	r2, r1, r2
 80062d8:	1a9b      	subs	r3, r3, r2
 80062da:	b29b      	uxth	r3, r3
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d003      	beq.n	80062e8 <find_volume+0x2b8>
 80062e0:	230d      	movs	r3, #13
 80062e2:	e123      	b.n	800652c <find_volume+0x4fc>
 80062e4:	200013fc 	.word	0x200013fc

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80062e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062ea:	333c      	adds	r3, #60	; 0x3c
 80062ec:	3313      	adds	r3, #19
 80062ee:	4618      	mov	r0, r3
 80062f0:	f7fd ffec 	bl	80042cc <ld_word>
 80062f4:	4603      	mov	r3, r0
 80062f6:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80062f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d106      	bne.n	800630c <find_volume+0x2dc>
 80062fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006300:	333c      	adds	r3, #60	; 0x3c
 8006302:	3320      	adds	r3, #32
 8006304:	4618      	mov	r0, r3
 8006306:	f7fd fff9 	bl	80042fc <ld_dword>
 800630a:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800630c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800630e:	333c      	adds	r3, #60	; 0x3c
 8006310:	330e      	adds	r3, #14
 8006312:	4618      	mov	r0, r3
 8006314:	f7fd ffda 	bl	80042cc <ld_word>
 8006318:	4603      	mov	r3, r0
 800631a:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800631c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800631e:	2b00      	cmp	r3, #0
 8006320:	d101      	bne.n	8006326 <find_volume+0x2f6>
 8006322:	230d      	movs	r3, #13
 8006324:	e102      	b.n	800652c <find_volume+0x4fc>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8006326:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006328:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800632a:	4413      	add	r3, r2
 800632c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800632e:	8911      	ldrh	r1, [r2, #8]
 8006330:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006332:	8992      	ldrh	r2, [r2, #12]
 8006334:	0952      	lsrs	r2, r2, #5
 8006336:	b292      	uxth	r2, r2
 8006338:	fbb1 f2f2 	udiv	r2, r1, r2
 800633c:	b292      	uxth	r2, r2
 800633e:	4413      	add	r3, r2
 8006340:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8006342:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006346:	429a      	cmp	r2, r3
 8006348:	d201      	bcs.n	800634e <find_volume+0x31e>
 800634a:	230d      	movs	r3, #13
 800634c:	e0ee      	b.n	800652c <find_volume+0x4fc>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800634e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006352:	1ad3      	subs	r3, r2, r3
 8006354:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006356:	8952      	ldrh	r2, [r2, #10]
 8006358:	fbb3 f3f2 	udiv	r3, r3, r2
 800635c:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800635e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006360:	2b00      	cmp	r3, #0
 8006362:	d101      	bne.n	8006368 <find_volume+0x338>
 8006364:	230d      	movs	r3, #13
 8006366:	e0e1      	b.n	800652c <find_volume+0x4fc>
		fmt = FS_FAT32;
 8006368:	2303      	movs	r3, #3
 800636a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800636e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006370:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8006374:	4293      	cmp	r3, r2
 8006376:	d802      	bhi.n	800637e <find_volume+0x34e>
 8006378:	2302      	movs	r3, #2
 800637a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800637e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006380:	f640 72f5 	movw	r2, #4085	; 0xff5
 8006384:	4293      	cmp	r3, r2
 8006386:	d802      	bhi.n	800638e <find_volume+0x35e>
 8006388:	2301      	movs	r3, #1
 800638a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800638e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006390:	1c9a      	adds	r2, r3, #2
 8006392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006394:	621a      	str	r2, [r3, #32]
		fs->volbase = bsect;							/* Volume start sector */
 8006396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006398:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800639a:	629a      	str	r2, [r3, #40]	; 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800639c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800639e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063a0:	441a      	add	r2, r3
 80063a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063a4:	62da      	str	r2, [r3, #44]	; 0x2c
		fs->database = bsect + sysect;					/* Data start sector */
 80063a6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80063a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063aa:	441a      	add	r2, r3
 80063ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063ae:	635a      	str	r2, [r3, #52]	; 0x34
		if (fmt == FS_FAT32) {
 80063b0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80063b4:	2b03      	cmp	r3, #3
 80063b6:	d11e      	bne.n	80063f6 <find_volume+0x3c6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80063b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063ba:	333c      	adds	r3, #60	; 0x3c
 80063bc:	332a      	adds	r3, #42	; 0x2a
 80063be:	4618      	mov	r0, r3
 80063c0:	f7fd ff84 	bl	80042cc <ld_word>
 80063c4:	4603      	mov	r3, r0
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d001      	beq.n	80063ce <find_volume+0x39e>
 80063ca:	230d      	movs	r3, #13
 80063cc:	e0ae      	b.n	800652c <find_volume+0x4fc>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80063ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063d0:	891b      	ldrh	r3, [r3, #8]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d001      	beq.n	80063da <find_volume+0x3aa>
 80063d6:	230d      	movs	r3, #13
 80063d8:	e0a8      	b.n	800652c <find_volume+0x4fc>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80063da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063dc:	333c      	adds	r3, #60	; 0x3c
 80063de:	332c      	adds	r3, #44	; 0x2c
 80063e0:	4618      	mov	r0, r3
 80063e2:	f7fd ff8b 	bl	80042fc <ld_dword>
 80063e6:	4602      	mov	r2, r0
 80063e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063ea:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80063ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063ee:	6a1b      	ldr	r3, [r3, #32]
 80063f0:	009b      	lsls	r3, r3, #2
 80063f2:	647b      	str	r3, [r7, #68]	; 0x44
 80063f4:	e01f      	b.n	8006436 <find_volume+0x406>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80063f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063f8:	891b      	ldrh	r3, [r3, #8]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d101      	bne.n	8006402 <find_volume+0x3d2>
 80063fe:	230d      	movs	r3, #13
 8006400:	e094      	b.n	800652c <find_volume+0x4fc>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8006402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006404:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006406:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006408:	441a      	add	r2, r3
 800640a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800640c:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800640e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006412:	2b02      	cmp	r3, #2
 8006414:	d103      	bne.n	800641e <find_volume+0x3ee>
 8006416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006418:	6a1b      	ldr	r3, [r3, #32]
 800641a:	005b      	lsls	r3, r3, #1
 800641c:	e00a      	b.n	8006434 <find_volume+0x404>
 800641e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006420:	6a1a      	ldr	r2, [r3, #32]
 8006422:	4613      	mov	r3, r2
 8006424:	005b      	lsls	r3, r3, #1
 8006426:	4413      	add	r3, r2
 8006428:	085a      	lsrs	r2, r3, #1
 800642a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800642c:	6a1b      	ldr	r3, [r3, #32]
 800642e:	f003 0301 	and.w	r3, r3, #1
 8006432:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8006434:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8006436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006438:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800643a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800643c:	899b      	ldrh	r3, [r3, #12]
 800643e:	4619      	mov	r1, r3
 8006440:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006442:	440b      	add	r3, r1
 8006444:	3b01      	subs	r3, #1
 8006446:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006448:	8989      	ldrh	r1, [r1, #12]
 800644a:	fbb3 f3f1 	udiv	r3, r3, r1
 800644e:	429a      	cmp	r2, r3
 8006450:	d201      	bcs.n	8006456 <find_volume+0x426>
 8006452:	230d      	movs	r3, #13
 8006454:	e06a      	b.n	800652c <find_volume+0x4fc>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8006456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006458:	f04f 32ff 	mov.w	r2, #4294967295
 800645c:	61da      	str	r2, [r3, #28]
 800645e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006460:	69da      	ldr	r2, [r3, #28]
 8006462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006464:	619a      	str	r2, [r3, #24]
		fs->fsi_flag = 0x80;
 8006466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006468:	2280      	movs	r2, #128	; 0x80
 800646a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800646c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006470:	2b03      	cmp	r3, #3
 8006472:	d149      	bne.n	8006508 <find_volume+0x4d8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8006474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006476:	333c      	adds	r3, #60	; 0x3c
 8006478:	3330      	adds	r3, #48	; 0x30
 800647a:	4618      	mov	r0, r3
 800647c:	f7fd ff26 	bl	80042cc <ld_word>
 8006480:	4603      	mov	r3, r0
 8006482:	2b01      	cmp	r3, #1
 8006484:	d140      	bne.n	8006508 <find_volume+0x4d8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8006486:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006488:	3301      	adds	r3, #1
 800648a:	4619      	mov	r1, r3
 800648c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800648e:	f7fe f9ff 	bl	8004890 <move_window>
 8006492:	4603      	mov	r3, r0
 8006494:	2b00      	cmp	r3, #0
 8006496:	d137      	bne.n	8006508 <find_volume+0x4d8>
		{
			fs->fsi_flag = 0;
 8006498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800649a:	2200      	movs	r2, #0
 800649c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800649e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064a0:	333c      	adds	r3, #60	; 0x3c
 80064a2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80064a6:	4618      	mov	r0, r3
 80064a8:	f7fd ff10 	bl	80042cc <ld_word>
 80064ac:	4603      	mov	r3, r0
 80064ae:	461a      	mov	r2, r3
 80064b0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80064b4:	429a      	cmp	r2, r3
 80064b6:	d127      	bne.n	8006508 <find_volume+0x4d8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80064b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064ba:	333c      	adds	r3, #60	; 0x3c
 80064bc:	4618      	mov	r0, r3
 80064be:	f7fd ff1d 	bl	80042fc <ld_dword>
 80064c2:	4603      	mov	r3, r0
 80064c4:	4a1b      	ldr	r2, [pc, #108]	; (8006534 <find_volume+0x504>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d11e      	bne.n	8006508 <find_volume+0x4d8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80064ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064cc:	333c      	adds	r3, #60	; 0x3c
 80064ce:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80064d2:	4618      	mov	r0, r3
 80064d4:	f7fd ff12 	bl	80042fc <ld_dword>
 80064d8:	4603      	mov	r3, r0
 80064da:	4a17      	ldr	r2, [pc, #92]	; (8006538 <find_volume+0x508>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	d113      	bne.n	8006508 <find_volume+0x4d8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80064e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064e2:	333c      	adds	r3, #60	; 0x3c
 80064e4:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80064e8:	4618      	mov	r0, r3
 80064ea:	f7fd ff07 	bl	80042fc <ld_dword>
 80064ee:	4602      	mov	r2, r0
 80064f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064f2:	61da      	str	r2, [r3, #28]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80064f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064f6:	333c      	adds	r3, #60	; 0x3c
 80064f8:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80064fc:	4618      	mov	r0, r3
 80064fe:	f7fd fefd 	bl	80042fc <ld_dword>
 8006502:	4602      	mov	r2, r0
 8006504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006506:	619a      	str	r2, [r3, #24]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8006508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800650a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800650e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8006510:	4b0a      	ldr	r3, [pc, #40]	; (800653c <find_volume+0x50c>)
 8006512:	881b      	ldrh	r3, [r3, #0]
 8006514:	3301      	adds	r3, #1
 8006516:	b29a      	uxth	r2, r3
 8006518:	4b08      	ldr	r3, [pc, #32]	; (800653c <find_volume+0x50c>)
 800651a:	801a      	strh	r2, [r3, #0]
 800651c:	4b07      	ldr	r3, [pc, #28]	; (800653c <find_volume+0x50c>)
 800651e:	881a      	ldrh	r2, [r3, #0]
 8006520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006522:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8006524:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006526:	f7fe f94b 	bl	80047c0 <clear_lock>
#endif
	return FR_OK;
 800652a:	2300      	movs	r3, #0
}
 800652c:	4618      	mov	r0, r3
 800652e:	3758      	adds	r7, #88	; 0x58
 8006530:	46bd      	mov	sp, r7
 8006532:	bd80      	pop	{r7, pc}
 8006534:	41615252 	.word	0x41615252
 8006538:	61417272 	.word	0x61417272
 800653c:	20001400 	.word	0x20001400

08006540 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b084      	sub	sp, #16
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
 8006548:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800654a:	2309      	movs	r3, #9
 800654c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d02e      	beq.n	80065b2 <validate+0x72>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d02a      	beq.n	80065b2 <validate+0x72>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	781b      	ldrb	r3, [r3, #0]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d025      	beq.n	80065b2 <validate+0x72>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	889a      	ldrh	r2, [r3, #4]
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	88db      	ldrh	r3, [r3, #6]
 8006570:	429a      	cmp	r2, r3
 8006572:	d11e      	bne.n	80065b2 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4618      	mov	r0, r3
 800657a:	f7fd ffa7 	bl	80044cc <lock_fs>
 800657e:	4603      	mov	r3, r0
 8006580:	2b00      	cmp	r3, #0
 8006582:	d014      	beq.n	80065ae <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	785b      	ldrb	r3, [r3, #1]
 800658a:	4618      	mov	r0, r3
 800658c:	f7fd fe00 	bl	8004190 <disk_status>
 8006590:	4603      	mov	r3, r0
 8006592:	f003 0301 	and.w	r3, r3, #1
 8006596:	2b00      	cmp	r3, #0
 8006598:	d102      	bne.n	80065a0 <validate+0x60>
				res = FR_OK;
 800659a:	2300      	movs	r3, #0
 800659c:	73fb      	strb	r3, [r7, #15]
 800659e:	e008      	b.n	80065b2 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	2100      	movs	r1, #0
 80065a6:	4618      	mov	r0, r3
 80065a8:	f7fd ffa6 	bl	80044f8 <unlock_fs>
 80065ac:	e001      	b.n	80065b2 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 80065ae:	230f      	movs	r3, #15
 80065b0:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80065b2:	7bfb      	ldrb	r3, [r7, #15]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d102      	bne.n	80065be <validate+0x7e>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	e000      	b.n	80065c0 <validate+0x80>
 80065be:	2300      	movs	r3, #0
 80065c0:	683a      	ldr	r2, [r7, #0]
 80065c2:	6013      	str	r3, [r2, #0]
	return res;
 80065c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80065c6:	4618      	mov	r0, r3
 80065c8:	3710      	adds	r7, #16
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bd80      	pop	{r7, pc}
	...

080065d0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b088      	sub	sp, #32
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	60f8      	str	r0, [r7, #12]
 80065d8:	60b9      	str	r1, [r7, #8]
 80065da:	4613      	mov	r3, r2
 80065dc:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80065de:	68bb      	ldr	r3, [r7, #8]
 80065e0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80065e2:	f107 0310 	add.w	r3, r7, #16
 80065e6:	4618      	mov	r0, r3
 80065e8:	f7ff fc88 	bl	8005efc <get_ldnumber>
 80065ec:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80065ee:	69fb      	ldr	r3, [r7, #28]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	da01      	bge.n	80065f8 <f_mount+0x28>
 80065f4:	230b      	movs	r3, #11
 80065f6:	e048      	b.n	800668a <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80065f8:	4a26      	ldr	r2, [pc, #152]	; (8006694 <f_mount+0xc4>)
 80065fa:	69fb      	ldr	r3, [r7, #28]
 80065fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006600:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8006602:	69bb      	ldr	r3, [r7, #24]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d00f      	beq.n	8006628 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8006608:	69b8      	ldr	r0, [r7, #24]
 800660a:	f7fe f8d9 	bl	80047c0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800660e:	69bb      	ldr	r3, [r7, #24]
 8006610:	695b      	ldr	r3, [r3, #20]
 8006612:	4618      	mov	r0, r3
 8006614:	f001 f81f 	bl	8007656 <ff_del_syncobj>
 8006618:	4603      	mov	r3, r0
 800661a:	2b00      	cmp	r3, #0
 800661c:	d101      	bne.n	8006622 <f_mount+0x52>
 800661e:	2302      	movs	r3, #2
 8006620:	e033      	b.n	800668a <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8006622:	69bb      	ldr	r3, [r7, #24]
 8006624:	2200      	movs	r2, #0
 8006626:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d00f      	beq.n	800664e <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	2200      	movs	r2, #0
 8006632:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8006634:	69fb      	ldr	r3, [r7, #28]
 8006636:	b2da      	uxtb	r2, r3
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	3314      	adds	r3, #20
 800663c:	4619      	mov	r1, r3
 800663e:	4610      	mov	r0, r2
 8006640:	f000 ffee 	bl	8007620 <ff_cre_syncobj>
 8006644:	4603      	mov	r3, r0
 8006646:	2b00      	cmp	r3, #0
 8006648:	d101      	bne.n	800664e <f_mount+0x7e>
 800664a:	2302      	movs	r3, #2
 800664c:	e01d      	b.n	800668a <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800664e:	68fa      	ldr	r2, [r7, #12]
 8006650:	4910      	ldr	r1, [pc, #64]	; (8006694 <f_mount+0xc4>)
 8006652:	69fb      	ldr	r3, [r7, #28]
 8006654:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d002      	beq.n	8006664 <f_mount+0x94>
 800665e:	79fb      	ldrb	r3, [r7, #7]
 8006660:	2b01      	cmp	r3, #1
 8006662:	d001      	beq.n	8006668 <f_mount+0x98>
 8006664:	2300      	movs	r3, #0
 8006666:	e010      	b.n	800668a <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8006668:	f107 010c 	add.w	r1, r7, #12
 800666c:	f107 0308 	add.w	r3, r7, #8
 8006670:	2200      	movs	r2, #0
 8006672:	4618      	mov	r0, r3
 8006674:	f7ff fcdc 	bl	8006030 <find_volume>
 8006678:	4603      	mov	r3, r0
 800667a:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	7dfa      	ldrb	r2, [r7, #23]
 8006680:	4611      	mov	r1, r2
 8006682:	4618      	mov	r0, r3
 8006684:	f7fd ff38 	bl	80044f8 <unlock_fs>
 8006688:	7dfb      	ldrb	r3, [r7, #23]
}
 800668a:	4618      	mov	r0, r3
 800668c:	3720      	adds	r7, #32
 800668e:	46bd      	mov	sp, r7
 8006690:	bd80      	pop	{r7, pc}
 8006692:	bf00      	nop
 8006694:	200013fc 	.word	0x200013fc

08006698 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
 800669e:	af00      	add	r7, sp, #0
 80066a0:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80066a4:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80066a8:	6018      	str	r0, [r3, #0]
 80066aa:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80066ae:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80066b2:	6019      	str	r1, [r3, #0]
 80066b4:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80066b8:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 80066bc:	701a      	strb	r2, [r3, #0]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80066be:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80066c2:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d101      	bne.n	80066d0 <f_open+0x38>
 80066cc:	2309      	movs	r3, #9
 80066ce:	e2ae      	b.n	8006c2e <f_open+0x596>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80066d0:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80066d4:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 80066d8:	f507 721a 	add.w	r2, r7, #616	; 0x268
 80066dc:	f2a2 2261 	subw	r2, r2, #609	; 0x261
 80066e0:	7812      	ldrb	r2, [r2, #0]
 80066e2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80066e6:	701a      	strb	r2, [r3, #0]
	res = find_volume(&path, &fs, mode);
 80066e8:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80066ec:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 80066f0:	781a      	ldrb	r2, [r3, #0]
 80066f2:	f507 7105 	add.w	r1, r7, #532	; 0x214
 80066f6:	f107 0308 	add.w	r3, r7, #8
 80066fa:	4618      	mov	r0, r3
 80066fc:	f7ff fc98 	bl	8006030 <find_volume>
 8006700:	4603      	mov	r3, r0
 8006702:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
	if (res == FR_OK) {
 8006706:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800670a:	2b00      	cmp	r3, #0
 800670c:	f040 827a 	bne.w	8006c04 <f_open+0x56c>
		dj.obj.fs = fs;
 8006710:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8006714:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
		INIT_NAMBUF(fs);
 8006718:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800671c:	f107 0214 	add.w	r2, r7, #20
 8006720:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 8006722:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8006726:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 800672a:	681a      	ldr	r2, [r3, #0]
 800672c:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8006730:	4611      	mov	r1, r2
 8006732:	4618      	mov	r0, r3
 8006734:	f7ff fb6c 	bl	8005e10 <follow_path>
 8006738:	4603      	mov	r3, r0
 800673a:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800673e:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8006742:	2b00      	cmp	r3, #0
 8006744:	d11e      	bne.n	8006784 <f_open+0xec>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8006746:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
 800674a:	b25b      	sxtb	r3, r3
 800674c:	2b00      	cmp	r3, #0
 800674e:	da03      	bge.n	8006758 <f_open+0xc0>
				res = FR_INVALID_NAME;
 8006750:	2306      	movs	r3, #6
 8006752:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 8006756:	e015      	b.n	8006784 <f_open+0xec>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006758:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800675c:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8006760:	781b      	ldrb	r3, [r3, #0]
 8006762:	f023 0301 	bic.w	r3, r3, #1
 8006766:	2b00      	cmp	r3, #0
 8006768:	bf14      	ite	ne
 800676a:	2301      	movne	r3, #1
 800676c:	2300      	moveq	r3, #0
 800676e:	b2db      	uxtb	r3, r3
 8006770:	461a      	mov	r2, r3
 8006772:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8006776:	4611      	mov	r1, r2
 8006778:	4618      	mov	r0, r3
 800677a:	f7fd fed9 	bl	8004530 <chk_lock>
 800677e:	4603      	mov	r3, r0
 8006780:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8006784:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8006788:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800678c:	781b      	ldrb	r3, [r3, #0]
 800678e:	f003 031c 	and.w	r3, r3, #28
 8006792:	2b00      	cmp	r3, #0
 8006794:	f000 80a7 	beq.w	80068e6 <f_open+0x24e>
			if (res != FR_OK) {					/* No file, create new */
 8006798:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800679c:	2b00      	cmp	r3, #0
 800679e:	d01f      	beq.n	80067e0 <f_open+0x148>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80067a0:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 80067a4:	2b04      	cmp	r3, #4
 80067a6:	d10e      	bne.n	80067c6 <f_open+0x12e>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80067a8:	f7fd ff1e 	bl	80045e8 <enq_lock>
 80067ac:	4603      	mov	r3, r0
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d006      	beq.n	80067c0 <f_open+0x128>
 80067b2:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80067b6:	4618      	mov	r0, r3
 80067b8:	f7ff f87a 	bl	80058b0 <dir_register>
 80067bc:	4603      	mov	r3, r0
 80067be:	e000      	b.n	80067c2 <f_open+0x12a>
 80067c0:	2312      	movs	r3, #18
 80067c2:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80067c6:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80067ca:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 80067ce:	f507 721a 	add.w	r2, r7, #616	; 0x268
 80067d2:	f2a2 2261 	subw	r2, r2, #609	; 0x261
 80067d6:	7812      	ldrb	r2, [r2, #0]
 80067d8:	f042 0208 	orr.w	r2, r2, #8
 80067dc:	701a      	strb	r2, [r3, #0]
 80067de:	e015      	b.n	800680c <f_open+0x174>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80067e0:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 80067e4:	f003 0311 	and.w	r3, r3, #17
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d003      	beq.n	80067f4 <f_open+0x15c>
					res = FR_DENIED;
 80067ec:	2307      	movs	r3, #7
 80067ee:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 80067f2:	e00b      	b.n	800680c <f_open+0x174>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80067f4:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80067f8:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 80067fc:	781b      	ldrb	r3, [r3, #0]
 80067fe:	f003 0304 	and.w	r3, r3, #4
 8006802:	2b00      	cmp	r3, #0
 8006804:	d002      	beq.n	800680c <f_open+0x174>
 8006806:	2308      	movs	r3, #8
 8006808:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800680c:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8006810:	2b00      	cmp	r3, #0
 8006812:	f040 8088 	bne.w	8006926 <f_open+0x28e>
 8006816:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800681a:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800681e:	781b      	ldrb	r3, [r3, #0]
 8006820:	f003 0308 	and.w	r3, r3, #8
 8006824:	2b00      	cmp	r3, #0
 8006826:	d07e      	beq.n	8006926 <f_open+0x28e>
				dw = GET_FATTIME();
 8006828:	f7fd fc52 	bl	80040d0 <get_fattime>
 800682c:	f8c7 0258 	str.w	r0, [r7, #600]	; 0x258
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8006830:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8006834:	330e      	adds	r3, #14
 8006836:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 800683a:	4618      	mov	r0, r3
 800683c:	f7fd fd9c 	bl	8004378 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8006840:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8006844:	3316      	adds	r3, #22
 8006846:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 800684a:	4618      	mov	r0, r3
 800684c:	f7fd fd94 	bl	8004378 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8006850:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8006854:	330b      	adds	r3, #11
 8006856:	2220      	movs	r2, #32
 8006858:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800685a:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800685e:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 8006862:	4611      	mov	r1, r2
 8006864:	4618      	mov	r0, r3
 8006866:	f7fe fd9b 	bl	80053a0 <ld_clust>
 800686a:	f8c7 0254 	str.w	r0, [r7, #596]	; 0x254
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800686e:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8006872:	f8d7 1238 	ldr.w	r1, [r7, #568]	; 0x238
 8006876:	2200      	movs	r2, #0
 8006878:	4618      	mov	r0, r3
 800687a:	f7fe fdb0 	bl	80053de <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800687e:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8006882:	331c      	adds	r3, #28
 8006884:	2100      	movs	r1, #0
 8006886:	4618      	mov	r0, r3
 8006888:	f7fd fd76 	bl	8004378 <st_dword>
					fs->wflag = 1;
 800688c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8006890:	2201      	movs	r2, #1
 8006892:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8006894:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8006898:	2b00      	cmp	r3, #0
 800689a:	d044      	beq.n	8006926 <f_open+0x28e>
						dw = fs->winsect;
 800689c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80068a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068a2:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
						res = remove_chain(&dj.obj, cl, 0);
 80068a6:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80068aa:	2200      	movs	r2, #0
 80068ac:	f8d7 1254 	ldr.w	r1, [r7, #596]	; 0x254
 80068b0:	4618      	mov	r0, r3
 80068b2:	f7fe fa9a 	bl	8004dea <remove_chain>
 80068b6:	4603      	mov	r3, r0
 80068b8:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
						if (res == FR_OK) {
 80068bc:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d130      	bne.n	8006926 <f_open+0x28e>
							res = move_window(fs, dw);
 80068c4:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80068c8:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 80068cc:	4618      	mov	r0, r3
 80068ce:	f7fd ffdf 	bl	8004890 <move_window>
 80068d2:	4603      	mov	r3, r0
 80068d4:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80068d8:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80068dc:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 80068e0:	3a01      	subs	r2, #1
 80068e2:	619a      	str	r2, [r3, #24]
 80068e4:	e01f      	b.n	8006926 <f_open+0x28e>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80068e6:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d11b      	bne.n	8006926 <f_open+0x28e>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80068ee:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 80068f2:	f003 0310 	and.w	r3, r3, #16
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d003      	beq.n	8006902 <f_open+0x26a>
					res = FR_NO_FILE;
 80068fa:	2304      	movs	r3, #4
 80068fc:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 8006900:	e011      	b.n	8006926 <f_open+0x28e>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8006902:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8006906:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 800690a:	781b      	ldrb	r3, [r3, #0]
 800690c:	f003 0302 	and.w	r3, r3, #2
 8006910:	2b00      	cmp	r3, #0
 8006912:	d008      	beq.n	8006926 <f_open+0x28e>
 8006914:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 8006918:	f003 0301 	and.w	r3, r3, #1
 800691c:	2b00      	cmp	r3, #0
 800691e:	d002      	beq.n	8006926 <f_open+0x28e>
						res = FR_DENIED;
 8006920:	2307      	movs	r3, #7
 8006922:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					}
				}
			}
		}
		if (res == FR_OK) {
 8006926:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800692a:	2b00      	cmp	r3, #0
 800692c:	d14a      	bne.n	80069c4 <f_open+0x32c>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800692e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8006932:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8006936:	781b      	ldrb	r3, [r3, #0]
 8006938:	f003 0308 	and.w	r3, r3, #8
 800693c:	2b00      	cmp	r3, #0
 800693e:	d00b      	beq.n	8006958 <f_open+0x2c0>
				mode |= FA_MODIFIED;
 8006940:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8006944:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8006948:	f507 721a 	add.w	r2, r7, #616	; 0x268
 800694c:	f2a2 2261 	subw	r2, r2, #609	; 0x261
 8006950:	7812      	ldrb	r2, [r2, #0]
 8006952:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006956:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8006958:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800695c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800695e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8006962:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800696a:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 800696e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8006972:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800697a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 800697e:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8006982:	781b      	ldrb	r3, [r3, #0]
 8006984:	f023 0301 	bic.w	r3, r3, #1
 8006988:	2b00      	cmp	r3, #0
 800698a:	bf14      	ite	ne
 800698c:	2301      	movne	r3, #1
 800698e:	2300      	moveq	r3, #0
 8006990:	b2db      	uxtb	r3, r3
 8006992:	461a      	mov	r2, r3
 8006994:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8006998:	4611      	mov	r1, r2
 800699a:	4618      	mov	r0, r3
 800699c:	f7fd fe46 	bl	800462c <inc_lock>
 80069a0:	4602      	mov	r2, r0
 80069a2:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80069a6:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80069ae:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80069b2:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	691b      	ldr	r3, [r3, #16]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d102      	bne.n	80069c4 <f_open+0x32c>
 80069be:	2302      	movs	r3, #2
 80069c0:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
		}
#endif

		if (res == FR_OK) {
 80069c4:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	f040 811b 	bne.w	8006c04 <f_open+0x56c>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80069ce:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80069d2:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 80069d6:	4611      	mov	r1, r2
 80069d8:	4618      	mov	r0, r3
 80069da:	f7fe fce1 	bl	80053a0 <ld_clust>
 80069de:	4602      	mov	r2, r0
 80069e0:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80069e4:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80069ec:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80069f0:	331c      	adds	r3, #28
 80069f2:	4618      	mov	r0, r3
 80069f4:	f7fd fc82 	bl	80042fc <ld_dword>
 80069f8:	4602      	mov	r2, r0
 80069fa:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80069fe:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8006a06:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8006a0a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	2200      	movs	r2, #0
 8006a12:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8006a14:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8006a18:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8006a1c:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8006a24:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8006a28:	88da      	ldrh	r2, [r3, #6]
 8006a2a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8006a2e:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8006a36:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8006a3a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f507 721a 	add.w	r2, r7, #616	; 0x268
 8006a44:	f2a2 2261 	subw	r2, r2, #609	; 0x261
 8006a48:	7812      	ldrb	r2, [r2, #0]
 8006a4a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8006a4c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8006a50:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	2200      	movs	r2, #0
 8006a58:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8006a5a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8006a5e:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	2200      	movs	r2, #0
 8006a66:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8006a68:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8006a6c:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	2200      	movs	r2, #0
 8006a74:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8006a76:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8006a7a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	3330      	adds	r3, #48	; 0x30
 8006a82:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006a86:	2100      	movs	r1, #0
 8006a88:	4618      	mov	r0, r3
 8006a8a:	f7fd fcc2 	bl	8004412 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8006a8e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8006a92:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8006a96:	781b      	ldrb	r3, [r3, #0]
 8006a98:	f003 0320 	and.w	r3, r3, #32
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	f000 80b1 	beq.w	8006c04 <f_open+0x56c>
 8006aa2:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8006aa6:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	68db      	ldr	r3, [r3, #12]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	f000 80a8 	beq.w	8006c04 <f_open+0x56c>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8006ab4:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8006ab8:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	68da      	ldr	r2, [r3, #12]
 8006ac0:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8006ac4:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8006acc:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8006ad0:	895b      	ldrh	r3, [r3, #10]
 8006ad2:	461a      	mov	r2, r3
 8006ad4:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8006ad8:	899b      	ldrh	r3, [r3, #12]
 8006ada:	fb02 f303 	mul.w	r3, r2, r3
 8006ade:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8006ae2:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8006ae6:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	689b      	ldr	r3, [r3, #8]
 8006aee:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006af2:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8006af6:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	68db      	ldr	r3, [r3, #12]
 8006afe:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 8006b02:	e021      	b.n	8006b48 <f_open+0x4b0>
					clst = get_fat(&fp->obj, clst);
 8006b04:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8006b08:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 8006b12:	4618      	mov	r0, r3
 8006b14:	f7fd ff79 	bl	8004a0a <get_fat>
 8006b18:	f8c7 0260 	str.w	r0, [r7, #608]	; 0x260
					if (clst <= 1) res = FR_INT_ERR;
 8006b1c:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8006b20:	2b01      	cmp	r3, #1
 8006b22:	d802      	bhi.n	8006b2a <f_open+0x492>
 8006b24:	2302      	movs	r3, #2
 8006b26:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8006b2a:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8006b2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b32:	d102      	bne.n	8006b3a <f_open+0x4a2>
 8006b34:	2301      	movs	r3, #1
 8006b36:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006b3a:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 8006b3e:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8006b42:	1ad3      	subs	r3, r2, r3
 8006b44:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 8006b48:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d105      	bne.n	8006b5c <f_open+0x4c4>
 8006b50:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 8006b54:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8006b58:	429a      	cmp	r2, r3
 8006b5a:	d8d3      	bhi.n	8006b04 <f_open+0x46c>
				}
				fp->clust = clst;
 8006b5c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8006b60:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 8006b6a:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8006b6c:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d147      	bne.n	8006c04 <f_open+0x56c>
 8006b74:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8006b78:	899b      	ldrh	r3, [r3, #12]
 8006b7a:	461a      	mov	r2, r3
 8006b7c:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8006b80:	fbb3 f1f2 	udiv	r1, r3, r2
 8006b84:	fb01 f202 	mul.w	r2, r1, r2
 8006b88:	1a9b      	subs	r3, r3, r2
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d03a      	beq.n	8006c04 <f_open+0x56c>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8006b8e:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8006b92:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 8006b96:	4618      	mov	r0, r3
 8006b98:	f7fd ff18 	bl	80049cc <clust2sect>
 8006b9c:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
 8006ba0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d103      	bne.n	8006bb0 <f_open+0x518>
						res = FR_INT_ERR;
 8006ba8:	2302      	movs	r3, #2
 8006baa:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 8006bae:	e029      	b.n	8006c04 <f_open+0x56c>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8006bb0:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8006bb4:	899b      	ldrh	r3, [r3, #12]
 8006bb6:	461a      	mov	r2, r3
 8006bb8:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8006bbc:	fbb3 f2f2 	udiv	r2, r3, r2
 8006bc0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8006bc4:	441a      	add	r2, r3
 8006bc6:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8006bca:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8006bd2:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8006bd6:	7858      	ldrb	r0, [r3, #1]
 8006bd8:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8006bdc:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006be6:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8006bea:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	6a1a      	ldr	r2, [r3, #32]
 8006bf2:	2301      	movs	r3, #1
 8006bf4:	f7fd fb0c 	bl	8004210 <disk_read>
 8006bf8:	4603      	mov	r3, r0
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d002      	beq.n	8006c04 <f_open+0x56c>
 8006bfe:	2301      	movs	r3, #1
 8006c00:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8006c04:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d006      	beq.n	8006c1a <f_open+0x582>
 8006c0c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8006c10:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	2200      	movs	r2, #0
 8006c18:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8006c1a:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8006c1e:	f897 2267 	ldrb.w	r2, [r7, #615]	; 0x267
 8006c22:	4611      	mov	r1, r2
 8006c24:	4618      	mov	r0, r3
 8006c26:	f7fd fc67 	bl	80044f8 <unlock_fs>
 8006c2a:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
}
 8006c2e:	4618      	mov	r0, r3
 8006c30:	f507 771a 	add.w	r7, r7, #616	; 0x268
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bd80      	pop	{r7, pc}

08006c38 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b08c      	sub	sp, #48	; 0x30
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	60f8      	str	r0, [r7, #12]
 8006c40:	60b9      	str	r1, [r7, #8]
 8006c42:	607a      	str	r2, [r7, #4]
 8006c44:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8006c46:	68bb      	ldr	r3, [r7, #8]
 8006c48:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	f107 0210 	add.w	r2, r7, #16
 8006c56:	4611      	mov	r1, r2
 8006c58:	4618      	mov	r0, r3
 8006c5a:	f7ff fc71 	bl	8006540 <validate>
 8006c5e:	4603      	mov	r3, r0
 8006c60:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8006c64:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d107      	bne.n	8006c7c <f_write+0x44>
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	7d5b      	ldrb	r3, [r3, #21]
 8006c70:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8006c74:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d009      	beq.n	8006c90 <f_write+0x58>
 8006c7c:	693b      	ldr	r3, [r7, #16]
 8006c7e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8006c82:	4611      	mov	r1, r2
 8006c84:	4618      	mov	r0, r3
 8006c86:	f7fd fc37 	bl	80044f8 <unlock_fs>
 8006c8a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006c8e:	e192      	b.n	8006fb6 <f_write+0x37e>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	7d1b      	ldrb	r3, [r3, #20]
 8006c94:	f003 0302 	and.w	r3, r3, #2
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d106      	bne.n	8006caa <f_write+0x72>
 8006c9c:	693b      	ldr	r3, [r7, #16]
 8006c9e:	2107      	movs	r1, #7
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	f7fd fc29 	bl	80044f8 <unlock_fs>
 8006ca6:	2307      	movs	r3, #7
 8006ca8:	e185      	b.n	8006fb6 <f_write+0x37e>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	699a      	ldr	r2, [r3, #24]
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	441a      	add	r2, r3
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	699b      	ldr	r3, [r3, #24]
 8006cb6:	429a      	cmp	r2, r3
 8006cb8:	f080 816a 	bcs.w	8006f90 <f_write+0x358>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	699b      	ldr	r3, [r3, #24]
 8006cc0:	43db      	mvns	r3, r3
 8006cc2:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8006cc4:	e164      	b.n	8006f90 <f_write+0x358>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	699b      	ldr	r3, [r3, #24]
 8006cca:	693a      	ldr	r2, [r7, #16]
 8006ccc:	8992      	ldrh	r2, [r2, #12]
 8006cce:	fbb3 f1f2 	udiv	r1, r3, r2
 8006cd2:	fb01 f202 	mul.w	r2, r1, r2
 8006cd6:	1a9b      	subs	r3, r3, r2
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	f040 810f 	bne.w	8006efc <f_write+0x2c4>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	699b      	ldr	r3, [r3, #24]
 8006ce2:	693a      	ldr	r2, [r7, #16]
 8006ce4:	8992      	ldrh	r2, [r2, #12]
 8006ce6:	fbb3 f3f2 	udiv	r3, r3, r2
 8006cea:	693a      	ldr	r2, [r7, #16]
 8006cec:	8952      	ldrh	r2, [r2, #10]
 8006cee:	3a01      	subs	r2, #1
 8006cf0:	4013      	ands	r3, r2
 8006cf2:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8006cf4:	69bb      	ldr	r3, [r7, #24]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d14d      	bne.n	8006d96 <f_write+0x15e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	699b      	ldr	r3, [r3, #24]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d10c      	bne.n	8006d1c <f_write+0xe4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	689b      	ldr	r3, [r3, #8]
 8006d06:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8006d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d11a      	bne.n	8006d44 <f_write+0x10c>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	2100      	movs	r1, #0
 8006d12:	4618      	mov	r0, r3
 8006d14:	f7fe f8ce 	bl	8004eb4 <create_chain>
 8006d18:	62b8      	str	r0, [r7, #40]	; 0x28
 8006d1a:	e013      	b.n	8006d44 <f_write+0x10c>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d007      	beq.n	8006d34 <f_write+0xfc>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	699b      	ldr	r3, [r3, #24]
 8006d28:	4619      	mov	r1, r3
 8006d2a:	68f8      	ldr	r0, [r7, #12]
 8006d2c:	f7fe f95a 	bl	8004fe4 <clmt_clust>
 8006d30:	62b8      	str	r0, [r7, #40]	; 0x28
 8006d32:	e007      	b.n	8006d44 <f_write+0x10c>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8006d34:	68fa      	ldr	r2, [r7, #12]
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	69db      	ldr	r3, [r3, #28]
 8006d3a:	4619      	mov	r1, r3
 8006d3c:	4610      	mov	r0, r2
 8006d3e:	f7fe f8b9 	bl	8004eb4 <create_chain>
 8006d42:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8006d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	f000 8127 	beq.w	8006f9a <f_write+0x362>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8006d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d4e:	2b01      	cmp	r3, #1
 8006d50:	d109      	bne.n	8006d66 <f_write+0x12e>
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	2202      	movs	r2, #2
 8006d56:	755a      	strb	r2, [r3, #21]
 8006d58:	693b      	ldr	r3, [r7, #16]
 8006d5a:	2102      	movs	r1, #2
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	f7fd fbcb 	bl	80044f8 <unlock_fs>
 8006d62:	2302      	movs	r3, #2
 8006d64:	e127      	b.n	8006fb6 <f_write+0x37e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d6c:	d109      	bne.n	8006d82 <f_write+0x14a>
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	2201      	movs	r2, #1
 8006d72:	755a      	strb	r2, [r3, #21]
 8006d74:	693b      	ldr	r3, [r7, #16]
 8006d76:	2101      	movs	r1, #1
 8006d78:	4618      	mov	r0, r3
 8006d7a:	f7fd fbbd 	bl	80044f8 <unlock_fs>
 8006d7e:	2301      	movs	r3, #1
 8006d80:	e119      	b.n	8006fb6 <f_write+0x37e>
				fp->clust = clst;			/* Update current cluster */
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d86:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	689b      	ldr	r3, [r3, #8]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d102      	bne.n	8006d96 <f_write+0x15e>
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d94:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	7d1b      	ldrb	r3, [r3, #20]
 8006d9a:	b25b      	sxtb	r3, r3
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	da1d      	bge.n	8006ddc <f_write+0x1a4>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006da0:	693b      	ldr	r3, [r7, #16]
 8006da2:	7858      	ldrb	r0, [r3, #1]
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	6a1a      	ldr	r2, [r3, #32]
 8006dae:	2301      	movs	r3, #1
 8006db0:	f7fd fa4e 	bl	8004250 <disk_write>
 8006db4:	4603      	mov	r3, r0
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d009      	beq.n	8006dce <f_write+0x196>
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	2201      	movs	r2, #1
 8006dbe:	755a      	strb	r2, [r3, #21]
 8006dc0:	693b      	ldr	r3, [r7, #16]
 8006dc2:	2101      	movs	r1, #1
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	f7fd fb97 	bl	80044f8 <unlock_fs>
 8006dca:	2301      	movs	r3, #1
 8006dcc:	e0f3      	b.n	8006fb6 <f_write+0x37e>
				fp->flag &= (BYTE)~FA_DIRTY;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	7d1b      	ldrb	r3, [r3, #20]
 8006dd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006dd6:	b2da      	uxtb	r2, r3
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8006ddc:	693a      	ldr	r2, [r7, #16]
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	69db      	ldr	r3, [r3, #28]
 8006de2:	4619      	mov	r1, r3
 8006de4:	4610      	mov	r0, r2
 8006de6:	f7fd fdf1 	bl	80049cc <clust2sect>
 8006dea:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8006dec:	697b      	ldr	r3, [r7, #20]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d109      	bne.n	8006e06 <f_write+0x1ce>
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	2202      	movs	r2, #2
 8006df6:	755a      	strb	r2, [r3, #21]
 8006df8:	693b      	ldr	r3, [r7, #16]
 8006dfa:	2102      	movs	r1, #2
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	f7fd fb7b 	bl	80044f8 <unlock_fs>
 8006e02:	2302      	movs	r3, #2
 8006e04:	e0d7      	b.n	8006fb6 <f_write+0x37e>
			sect += csect;
 8006e06:	697a      	ldr	r2, [r7, #20]
 8006e08:	69bb      	ldr	r3, [r7, #24]
 8006e0a:	4413      	add	r3, r2
 8006e0c:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8006e0e:	693b      	ldr	r3, [r7, #16]
 8006e10:	899b      	ldrh	r3, [r3, #12]
 8006e12:	461a      	mov	r2, r3
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	fbb3 f3f2 	udiv	r3, r3, r2
 8006e1a:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8006e1c:	6a3b      	ldr	r3, [r7, #32]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d048      	beq.n	8006eb4 <f_write+0x27c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8006e22:	69ba      	ldr	r2, [r7, #24]
 8006e24:	6a3b      	ldr	r3, [r7, #32]
 8006e26:	4413      	add	r3, r2
 8006e28:	693a      	ldr	r2, [r7, #16]
 8006e2a:	8952      	ldrh	r2, [r2, #10]
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d905      	bls.n	8006e3c <f_write+0x204>
					cc = fs->csize - csect;
 8006e30:	693b      	ldr	r3, [r7, #16]
 8006e32:	895b      	ldrh	r3, [r3, #10]
 8006e34:	461a      	mov	r2, r3
 8006e36:	69bb      	ldr	r3, [r7, #24]
 8006e38:	1ad3      	subs	r3, r2, r3
 8006e3a:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006e3c:	693b      	ldr	r3, [r7, #16]
 8006e3e:	7858      	ldrb	r0, [r3, #1]
 8006e40:	6a3b      	ldr	r3, [r7, #32]
 8006e42:	697a      	ldr	r2, [r7, #20]
 8006e44:	69f9      	ldr	r1, [r7, #28]
 8006e46:	f7fd fa03 	bl	8004250 <disk_write>
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d009      	beq.n	8006e64 <f_write+0x22c>
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	2201      	movs	r2, #1
 8006e54:	755a      	strb	r2, [r3, #21]
 8006e56:	693b      	ldr	r3, [r7, #16]
 8006e58:	2101      	movs	r1, #1
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	f7fd fb4c 	bl	80044f8 <unlock_fs>
 8006e60:	2301      	movs	r3, #1
 8006e62:	e0a8      	b.n	8006fb6 <f_write+0x37e>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	6a1a      	ldr	r2, [r3, #32]
 8006e68:	697b      	ldr	r3, [r7, #20]
 8006e6a:	1ad3      	subs	r3, r2, r3
 8006e6c:	6a3a      	ldr	r2, [r7, #32]
 8006e6e:	429a      	cmp	r2, r3
 8006e70:	d918      	bls.n	8006ea4 <f_write+0x26c>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	6a1a      	ldr	r2, [r3, #32]
 8006e7c:	697b      	ldr	r3, [r7, #20]
 8006e7e:	1ad3      	subs	r3, r2, r3
 8006e80:	693a      	ldr	r2, [r7, #16]
 8006e82:	8992      	ldrh	r2, [r2, #12]
 8006e84:	fb02 f303 	mul.w	r3, r2, r3
 8006e88:	69fa      	ldr	r2, [r7, #28]
 8006e8a:	18d1      	adds	r1, r2, r3
 8006e8c:	693b      	ldr	r3, [r7, #16]
 8006e8e:	899b      	ldrh	r3, [r3, #12]
 8006e90:	461a      	mov	r2, r3
 8006e92:	f7fd fa9d 	bl	80043d0 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	7d1b      	ldrb	r3, [r3, #20]
 8006e9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e9e:	b2da      	uxtb	r2, r3
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8006ea4:	693b      	ldr	r3, [r7, #16]
 8006ea6:	899b      	ldrh	r3, [r3, #12]
 8006ea8:	461a      	mov	r2, r3
 8006eaa:	6a3b      	ldr	r3, [r7, #32]
 8006eac:	fb02 f303 	mul.w	r3, r2, r3
 8006eb0:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8006eb2:	e050      	b.n	8006f56 <f_write+0x31e>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	6a1b      	ldr	r3, [r3, #32]
 8006eb8:	697a      	ldr	r2, [r7, #20]
 8006eba:	429a      	cmp	r2, r3
 8006ebc:	d01b      	beq.n	8006ef6 <f_write+0x2be>
				fp->fptr < fp->obj.objsize &&
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	699a      	ldr	r2, [r3, #24]
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8006ec6:	429a      	cmp	r2, r3
 8006ec8:	d215      	bcs.n	8006ef6 <f_write+0x2be>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8006eca:	693b      	ldr	r3, [r7, #16]
 8006ecc:	7858      	ldrb	r0, [r3, #1]
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006ed4:	2301      	movs	r3, #1
 8006ed6:	697a      	ldr	r2, [r7, #20]
 8006ed8:	f7fd f99a 	bl	8004210 <disk_read>
 8006edc:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d009      	beq.n	8006ef6 <f_write+0x2be>
					ABORT(fs, FR_DISK_ERR);
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	2201      	movs	r2, #1
 8006ee6:	755a      	strb	r2, [r3, #21]
 8006ee8:	693b      	ldr	r3, [r7, #16]
 8006eea:	2101      	movs	r1, #1
 8006eec:	4618      	mov	r0, r3
 8006eee:	f7fd fb03 	bl	80044f8 <unlock_fs>
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	e05f      	b.n	8006fb6 <f_write+0x37e>
			}
#endif
			fp->sect = sect;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	697a      	ldr	r2, [r7, #20]
 8006efa:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8006efc:	693b      	ldr	r3, [r7, #16]
 8006efe:	899b      	ldrh	r3, [r3, #12]
 8006f00:	4618      	mov	r0, r3
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	699b      	ldr	r3, [r3, #24]
 8006f06:	693a      	ldr	r2, [r7, #16]
 8006f08:	8992      	ldrh	r2, [r2, #12]
 8006f0a:	fbb3 f1f2 	udiv	r1, r3, r2
 8006f0e:	fb01 f202 	mul.w	r2, r1, r2
 8006f12:	1a9b      	subs	r3, r3, r2
 8006f14:	1ac3      	subs	r3, r0, r3
 8006f16:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8006f18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	429a      	cmp	r2, r3
 8006f1e:	d901      	bls.n	8006f24 <f_write+0x2ec>
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	699b      	ldr	r3, [r3, #24]
 8006f2e:	693a      	ldr	r2, [r7, #16]
 8006f30:	8992      	ldrh	r2, [r2, #12]
 8006f32:	fbb3 f0f2 	udiv	r0, r3, r2
 8006f36:	fb00 f202 	mul.w	r2, r0, r2
 8006f3a:	1a9b      	subs	r3, r3, r2
 8006f3c:	440b      	add	r3, r1
 8006f3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f40:	69f9      	ldr	r1, [r7, #28]
 8006f42:	4618      	mov	r0, r3
 8006f44:	f7fd fa44 	bl	80043d0 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	7d1b      	ldrb	r3, [r3, #20]
 8006f4c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006f50:	b2da      	uxtb	r2, r3
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8006f56:	69fa      	ldr	r2, [r7, #28]
 8006f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f5a:	4413      	add	r3, r2
 8006f5c:	61fb      	str	r3, [r7, #28]
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	699a      	ldr	r2, [r3, #24]
 8006f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f64:	441a      	add	r2, r3
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	619a      	str	r2, [r3, #24]
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	68da      	ldr	r2, [r3, #12]
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	699b      	ldr	r3, [r3, #24]
 8006f72:	429a      	cmp	r2, r3
 8006f74:	bf38      	it	cc
 8006f76:	461a      	movcc	r2, r3
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	60da      	str	r2, [r3, #12]
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	681a      	ldr	r2, [r3, #0]
 8006f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f82:	441a      	add	r2, r3
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	601a      	str	r2, [r3, #0]
 8006f88:	687a      	ldr	r2, [r7, #4]
 8006f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f8c:	1ad3      	subs	r3, r2, r3
 8006f8e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	f47f ae97 	bne.w	8006cc6 <f_write+0x8e>
 8006f98:	e000      	b.n	8006f9c <f_write+0x364>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8006f9a:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	7d1b      	ldrb	r3, [r3, #20]
 8006fa0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006fa4:	b2da      	uxtb	r2, r3
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8006faa:	693b      	ldr	r3, [r7, #16]
 8006fac:	2100      	movs	r1, #0
 8006fae:	4618      	mov	r0, r3
 8006fb0:	f7fd faa2 	bl	80044f8 <unlock_fs>
 8006fb4:	2300      	movs	r3, #0
}
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	3730      	adds	r7, #48	; 0x30
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	bd80      	pop	{r7, pc}

08006fbe <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8006fbe:	b580      	push	{r7, lr}
 8006fc0:	b086      	sub	sp, #24
 8006fc2:	af00      	add	r7, sp, #0
 8006fc4:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	f107 0208 	add.w	r2, r7, #8
 8006fcc:	4611      	mov	r1, r2
 8006fce:	4618      	mov	r0, r3
 8006fd0:	f7ff fab6 	bl	8006540 <validate>
 8006fd4:	4603      	mov	r3, r0
 8006fd6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006fd8:	7dfb      	ldrb	r3, [r7, #23]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d16d      	bne.n	80070ba <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	7d1b      	ldrb	r3, [r3, #20]
 8006fe2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d067      	beq.n	80070ba <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	7d1b      	ldrb	r3, [r3, #20]
 8006fee:	b25b      	sxtb	r3, r3
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	da1a      	bge.n	800702a <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	7858      	ldrb	r0, [r3, #1]
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6a1a      	ldr	r2, [r3, #32]
 8007002:	2301      	movs	r3, #1
 8007004:	f7fd f924 	bl	8004250 <disk_write>
 8007008:	4603      	mov	r3, r0
 800700a:	2b00      	cmp	r3, #0
 800700c:	d006      	beq.n	800701c <f_sync+0x5e>
 800700e:	68bb      	ldr	r3, [r7, #8]
 8007010:	2101      	movs	r1, #1
 8007012:	4618      	mov	r0, r3
 8007014:	f7fd fa70 	bl	80044f8 <unlock_fs>
 8007018:	2301      	movs	r3, #1
 800701a:	e055      	b.n	80070c8 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	7d1b      	ldrb	r3, [r3, #20]
 8007020:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007024:	b2da      	uxtb	r2, r3
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800702a:	f7fd f851 	bl	80040d0 <get_fattime>
 800702e:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8007030:	68ba      	ldr	r2, [r7, #8]
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007036:	4619      	mov	r1, r3
 8007038:	4610      	mov	r0, r2
 800703a:	f7fd fc29 	bl	8004890 <move_window>
 800703e:	4603      	mov	r3, r0
 8007040:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8007042:	7dfb      	ldrb	r3, [r7, #23]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d138      	bne.n	80070ba <f_sync+0xfc>
					dir = fp->dir_ptr;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800704c:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	330b      	adds	r3, #11
 8007052:	781a      	ldrb	r2, [r3, #0]
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	330b      	adds	r3, #11
 8007058:	f042 0220 	orr.w	r2, r2, #32
 800705c:	b2d2      	uxtb	r2, r2
 800705e:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6818      	ldr	r0, [r3, #0]
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	689b      	ldr	r3, [r3, #8]
 8007068:	461a      	mov	r2, r3
 800706a:	68f9      	ldr	r1, [r7, #12]
 800706c:	f7fe f9b7 	bl	80053de <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	f103 021c 	add.w	r2, r3, #28
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	68db      	ldr	r3, [r3, #12]
 800707a:	4619      	mov	r1, r3
 800707c:	4610      	mov	r0, r2
 800707e:	f7fd f97b 	bl	8004378 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	3316      	adds	r3, #22
 8007086:	6939      	ldr	r1, [r7, #16]
 8007088:	4618      	mov	r0, r3
 800708a:	f7fd f975 	bl	8004378 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	3312      	adds	r3, #18
 8007092:	2100      	movs	r1, #0
 8007094:	4618      	mov	r0, r3
 8007096:	f7fd f954 	bl	8004342 <st_word>
					fs->wflag = 1;
 800709a:	68bb      	ldr	r3, [r7, #8]
 800709c:	2201      	movs	r2, #1
 800709e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	4618      	mov	r0, r3
 80070a4:	f7fd fc22 	bl	80048ec <sync_fs>
 80070a8:	4603      	mov	r3, r0
 80070aa:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	7d1b      	ldrb	r3, [r3, #20]
 80070b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80070b4:	b2da      	uxtb	r2, r3
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80070ba:	68bb      	ldr	r3, [r7, #8]
 80070bc:	7dfa      	ldrb	r2, [r7, #23]
 80070be:	4611      	mov	r1, r2
 80070c0:	4618      	mov	r0, r3
 80070c2:	f7fd fa19 	bl	80044f8 <unlock_fs>
 80070c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80070c8:	4618      	mov	r0, r3
 80070ca:	3718      	adds	r7, #24
 80070cc:	46bd      	mov	sp, r7
 80070ce:	bd80      	pop	{r7, pc}

080070d0 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b084      	sub	sp, #16
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80070d8:	6878      	ldr	r0, [r7, #4]
 80070da:	f7ff ff70 	bl	8006fbe <f_sync>
 80070de:	4603      	mov	r3, r0
 80070e0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80070e2:	7bfb      	ldrb	r3, [r7, #15]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d11d      	bne.n	8007124 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	f107 0208 	add.w	r2, r7, #8
 80070ee:	4611      	mov	r1, r2
 80070f0:	4618      	mov	r0, r3
 80070f2:	f7ff fa25 	bl	8006540 <validate>
 80070f6:	4603      	mov	r3, r0
 80070f8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80070fa:	7bfb      	ldrb	r3, [r7, #15]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d111      	bne.n	8007124 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	691b      	ldr	r3, [r3, #16]
 8007104:	4618      	mov	r0, r3
 8007106:	f7fd fb1f 	bl	8004748 <dec_lock>
 800710a:	4603      	mov	r3, r0
 800710c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800710e:	7bfb      	ldrb	r3, [r7, #15]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d102      	bne.n	800711a <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2200      	movs	r2, #0
 8007118:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	2100      	movs	r1, #0
 800711e:	4618      	mov	r0, r3
 8007120:	f7fd f9ea 	bl	80044f8 <unlock_fs>
#endif
		}
	}
	return res;
 8007124:	7bfb      	ldrb	r3, [r7, #15]
}
 8007126:	4618      	mov	r0, r3
 8007128:	3710      	adds	r7, #16
 800712a:	46bd      	mov	sp, r7
 800712c:	bd80      	pop	{r7, pc}

0800712e <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800712e:	b580      	push	{r7, lr}
 8007130:	b092      	sub	sp, #72	; 0x48
 8007132:	af00      	add	r7, sp, #0
 8007134:	60f8      	str	r0, [r7, #12]
 8007136:	60b9      	str	r1, [r7, #8]
 8007138:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800713a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800713e:	f107 030c 	add.w	r3, r7, #12
 8007142:	2200      	movs	r2, #0
 8007144:	4618      	mov	r0, r3
 8007146:	f7fe ff73 	bl	8006030 <find_volume>
 800714a:	4603      	mov	r3, r0
 800714c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 8007150:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007154:	2b00      	cmp	r3, #0
 8007156:	f040 8099 	bne.w	800728c <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800715a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8007160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007162:	69da      	ldr	r2, [r3, #28]
 8007164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007166:	6a1b      	ldr	r3, [r3, #32]
 8007168:	3b02      	subs	r3, #2
 800716a:	429a      	cmp	r2, r3
 800716c:	d804      	bhi.n	8007178 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800716e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007170:	69da      	ldr	r2, [r3, #28]
 8007172:	68bb      	ldr	r3, [r7, #8]
 8007174:	601a      	str	r2, [r3, #0]
 8007176:	e089      	b.n	800728c <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8007178:	2300      	movs	r3, #0
 800717a:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800717c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800717e:	781b      	ldrb	r3, [r3, #0]
 8007180:	2b01      	cmp	r3, #1
 8007182:	d128      	bne.n	80071d6 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8007184:	2302      	movs	r3, #2
 8007186:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800718a:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800718c:	f107 0314 	add.w	r3, r7, #20
 8007190:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007192:	4618      	mov	r0, r3
 8007194:	f7fd fc39 	bl	8004a0a <get_fat>
 8007198:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800719a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800719c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071a0:	d103      	bne.n	80071aa <f_getfree+0x7c>
 80071a2:	2301      	movs	r3, #1
 80071a4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80071a8:	e063      	b.n	8007272 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 80071aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071ac:	2b01      	cmp	r3, #1
 80071ae:	d103      	bne.n	80071b8 <f_getfree+0x8a>
 80071b0:	2302      	movs	r3, #2
 80071b2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80071b6:	e05c      	b.n	8007272 <f_getfree+0x144>
					if (stat == 0) nfree++;
 80071b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d102      	bne.n	80071c4 <f_getfree+0x96>
 80071be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80071c0:	3301      	adds	r3, #1
 80071c2:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 80071c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071c6:	3301      	adds	r3, #1
 80071c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80071ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071cc:	6a1b      	ldr	r3, [r3, #32]
 80071ce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80071d0:	429a      	cmp	r2, r3
 80071d2:	d3db      	bcc.n	800718c <f_getfree+0x5e>
 80071d4:	e04d      	b.n	8007272 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 80071d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071d8:	6a1b      	ldr	r3, [r3, #32]
 80071da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80071dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071e0:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 80071e2:	2300      	movs	r3, #0
 80071e4:	637b      	str	r3, [r7, #52]	; 0x34
 80071e6:	2300      	movs	r3, #0
 80071e8:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 80071ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d113      	bne.n	8007218 <f_getfree+0xea>
							res = move_window(fs, sect++);
 80071f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80071f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071f4:	1c5a      	adds	r2, r3, #1
 80071f6:	63ba      	str	r2, [r7, #56]	; 0x38
 80071f8:	4619      	mov	r1, r3
 80071fa:	f7fd fb49 	bl	8004890 <move_window>
 80071fe:	4603      	mov	r3, r0
 8007200:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 8007204:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007208:	2b00      	cmp	r3, #0
 800720a:	d131      	bne.n	8007270 <f_getfree+0x142>
							p = fs->win;
 800720c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800720e:	333c      	adds	r3, #60	; 0x3c
 8007210:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 8007212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007214:	899b      	ldrh	r3, [r3, #12]
 8007216:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8007218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800721a:	781b      	ldrb	r3, [r3, #0]
 800721c:	2b02      	cmp	r3, #2
 800721e:	d10f      	bne.n	8007240 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8007220:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007222:	f7fd f853 	bl	80042cc <ld_word>
 8007226:	4603      	mov	r3, r0
 8007228:	2b00      	cmp	r3, #0
 800722a:	d102      	bne.n	8007232 <f_getfree+0x104>
 800722c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800722e:	3301      	adds	r3, #1
 8007230:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 8007232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007234:	3302      	adds	r3, #2
 8007236:	633b      	str	r3, [r7, #48]	; 0x30
 8007238:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800723a:	3b02      	subs	r3, #2
 800723c:	637b      	str	r3, [r7, #52]	; 0x34
 800723e:	e010      	b.n	8007262 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8007240:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007242:	f7fd f85b 	bl	80042fc <ld_dword>
 8007246:	4603      	mov	r3, r0
 8007248:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800724c:	2b00      	cmp	r3, #0
 800724e:	d102      	bne.n	8007256 <f_getfree+0x128>
 8007250:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007252:	3301      	adds	r3, #1
 8007254:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 8007256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007258:	3304      	adds	r3, #4
 800725a:	633b      	str	r3, [r7, #48]	; 0x30
 800725c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800725e:	3b04      	subs	r3, #4
 8007260:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 8007262:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007264:	3b01      	subs	r3, #1
 8007266:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007268:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800726a:	2b00      	cmp	r3, #0
 800726c:	d1bd      	bne.n	80071ea <f_getfree+0xbc>
 800726e:	e000      	b.n	8007272 <f_getfree+0x144>
							if (res != FR_OK) break;
 8007270:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8007272:	68bb      	ldr	r3, [r7, #8]
 8007274:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007276:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8007278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800727a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800727c:	61da      	str	r2, [r3, #28]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800727e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007280:	791a      	ldrb	r2, [r3, #4]
 8007282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007284:	f042 0201 	orr.w	r2, r2, #1
 8007288:	b2d2      	uxtb	r2, r2
 800728a:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800728c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800728e:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8007292:	4611      	mov	r1, r2
 8007294:	4618      	mov	r0, r3
 8007296:	f7fd f92f 	bl	80044f8 <unlock_fs>
 800729a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800729e:	4618      	mov	r0, r3
 80072a0:	3748      	adds	r7, #72	; 0x48
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bd80      	pop	{r7, pc}

080072a6 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 80072a6:	b580      	push	{r7, lr}
 80072a8:	b084      	sub	sp, #16
 80072aa:	af00      	add	r7, sp, #0
 80072ac:	6078      	str	r0, [r7, #4]
 80072ae:	460b      	mov	r3, r1
 80072b0:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 80072b2:	78fb      	ldrb	r3, [r7, #3]
 80072b4:	2b0a      	cmp	r3, #10
 80072b6:	d103      	bne.n	80072c0 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 80072b8:	210d      	movs	r1, #13
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	f7ff fff3 	bl	80072a6 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	685b      	ldr	r3, [r3, #4]
 80072c4:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	db25      	blt.n	8007318 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	1c5a      	adds	r2, r3, #1
 80072d0:	60fa      	str	r2, [r7, #12]
 80072d2:	687a      	ldr	r2, [r7, #4]
 80072d4:	4413      	add	r3, r2
 80072d6:	78fa      	ldrb	r2, [r7, #3]
 80072d8:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	2b3c      	cmp	r3, #60	; 0x3c
 80072de:	dd12      	ble.n	8007306 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	6818      	ldr	r0, [r3, #0]
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	f103 010c 	add.w	r1, r3, #12
 80072ea:	68fa      	ldr	r2, [r7, #12]
 80072ec:	f107 0308 	add.w	r3, r7, #8
 80072f0:	f7ff fca2 	bl	8006c38 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 80072f4:	68ba      	ldr	r2, [r7, #8]
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	429a      	cmp	r2, r3
 80072fa:	d101      	bne.n	8007300 <putc_bfd+0x5a>
 80072fc:	2300      	movs	r3, #0
 80072fe:	e001      	b.n	8007304 <putc_bfd+0x5e>
 8007300:	f04f 33ff 	mov.w	r3, #4294967295
 8007304:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	68fa      	ldr	r2, [r7, #12]
 800730a:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	689b      	ldr	r3, [r3, #8]
 8007310:	1c5a      	adds	r2, r3, #1
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	609a      	str	r2, [r3, #8]
 8007316:	e000      	b.n	800731a <putc_bfd+0x74>
	if (i < 0) return;
 8007318:	bf00      	nop
}
 800731a:	3710      	adds	r7, #16
 800731c:	46bd      	mov	sp, r7
 800731e:	bd80      	pop	{r7, pc}

08007320 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b084      	sub	sp, #16
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	685b      	ldr	r3, [r3, #4]
 800732c:	2b00      	cmp	r3, #0
 800732e:	db16      	blt.n	800735e <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	6818      	ldr	r0, [r3, #0]
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	f103 010c 	add.w	r1, r3, #12
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	685b      	ldr	r3, [r3, #4]
 800733e:	461a      	mov	r2, r3
 8007340:	f107 030c 	add.w	r3, r7, #12
 8007344:	f7ff fc78 	bl	8006c38 <f_write>
 8007348:	4603      	mov	r3, r0
 800734a:	2b00      	cmp	r3, #0
 800734c:	d107      	bne.n	800735e <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	685b      	ldr	r3, [r3, #4]
 8007352:	68fa      	ldr	r2, [r7, #12]
 8007354:	4293      	cmp	r3, r2
 8007356:	d102      	bne.n	800735e <putc_flush+0x3e>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	689b      	ldr	r3, [r3, #8]
 800735c:	e001      	b.n	8007362 <putc_flush+0x42>
	return EOF;
 800735e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007362:	4618      	mov	r0, r3
 8007364:	3710      	adds	r7, #16
 8007366:	46bd      	mov	sp, r7
 8007368:	bd80      	pop	{r7, pc}

0800736a <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800736a:	b480      	push	{r7}
 800736c:	b083      	sub	sp, #12
 800736e:	af00      	add	r7, sp, #0
 8007370:	6078      	str	r0, [r7, #4]
 8007372:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	683a      	ldr	r2, [r7, #0]
 8007378:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2200      	movs	r2, #0
 800737e:	605a      	str	r2, [r3, #4]
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	685a      	ldr	r2, [r3, #4]
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	609a      	str	r2, [r3, #8]
}
 8007388:	bf00      	nop
 800738a:	370c      	adds	r7, #12
 800738c:	46bd      	mov	sp, r7
 800738e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007392:	4770      	bx	lr

08007394 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b096      	sub	sp, #88	; 0x58
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
 800739c:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 800739e:	f107 030c 	add.w	r3, r7, #12
 80073a2:	6839      	ldr	r1, [r7, #0]
 80073a4:	4618      	mov	r0, r3
 80073a6:	f7ff ffe0 	bl	800736a <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 80073aa:	e009      	b.n	80073c0 <f_puts+0x2c>
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	1c5a      	adds	r2, r3, #1
 80073b0:	607a      	str	r2, [r7, #4]
 80073b2:	781a      	ldrb	r2, [r3, #0]
 80073b4:	f107 030c 	add.w	r3, r7, #12
 80073b8:	4611      	mov	r1, r2
 80073ba:	4618      	mov	r0, r3
 80073bc:	f7ff ff73 	bl	80072a6 <putc_bfd>
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	781b      	ldrb	r3, [r3, #0]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d1f1      	bne.n	80073ac <f_puts+0x18>
	return putc_flush(&pb);
 80073c8:	f107 030c 	add.w	r3, r7, #12
 80073cc:	4618      	mov	r0, r3
 80073ce:	f7ff ffa7 	bl	8007320 <putc_flush>
 80073d2:	4603      	mov	r3, r0
}
 80073d4:	4618      	mov	r0, r3
 80073d6:	3758      	adds	r7, #88	; 0x58
 80073d8:	46bd      	mov	sp, r7
 80073da:	bd80      	pop	{r7, pc}

080073dc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80073dc:	b480      	push	{r7}
 80073de:	b087      	sub	sp, #28
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	60f8      	str	r0, [r7, #12]
 80073e4:	60b9      	str	r1, [r7, #8]
 80073e6:	4613      	mov	r3, r2
 80073e8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80073ea:	2301      	movs	r3, #1
 80073ec:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80073ee:	2300      	movs	r3, #0
 80073f0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80073f2:	4b1f      	ldr	r3, [pc, #124]	; (8007470 <FATFS_LinkDriverEx+0x94>)
 80073f4:	7a5b      	ldrb	r3, [r3, #9]
 80073f6:	b2db      	uxtb	r3, r3
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d131      	bne.n	8007460 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80073fc:	4b1c      	ldr	r3, [pc, #112]	; (8007470 <FATFS_LinkDriverEx+0x94>)
 80073fe:	7a5b      	ldrb	r3, [r3, #9]
 8007400:	b2db      	uxtb	r3, r3
 8007402:	461a      	mov	r2, r3
 8007404:	4b1a      	ldr	r3, [pc, #104]	; (8007470 <FATFS_LinkDriverEx+0x94>)
 8007406:	2100      	movs	r1, #0
 8007408:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800740a:	4b19      	ldr	r3, [pc, #100]	; (8007470 <FATFS_LinkDriverEx+0x94>)
 800740c:	7a5b      	ldrb	r3, [r3, #9]
 800740e:	b2db      	uxtb	r3, r3
 8007410:	4a17      	ldr	r2, [pc, #92]	; (8007470 <FATFS_LinkDriverEx+0x94>)
 8007412:	009b      	lsls	r3, r3, #2
 8007414:	4413      	add	r3, r2
 8007416:	68fa      	ldr	r2, [r7, #12]
 8007418:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800741a:	4b15      	ldr	r3, [pc, #84]	; (8007470 <FATFS_LinkDriverEx+0x94>)
 800741c:	7a5b      	ldrb	r3, [r3, #9]
 800741e:	b2db      	uxtb	r3, r3
 8007420:	461a      	mov	r2, r3
 8007422:	4b13      	ldr	r3, [pc, #76]	; (8007470 <FATFS_LinkDriverEx+0x94>)
 8007424:	4413      	add	r3, r2
 8007426:	79fa      	ldrb	r2, [r7, #7]
 8007428:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800742a:	4b11      	ldr	r3, [pc, #68]	; (8007470 <FATFS_LinkDriverEx+0x94>)
 800742c:	7a5b      	ldrb	r3, [r3, #9]
 800742e:	b2db      	uxtb	r3, r3
 8007430:	1c5a      	adds	r2, r3, #1
 8007432:	b2d1      	uxtb	r1, r2
 8007434:	4a0e      	ldr	r2, [pc, #56]	; (8007470 <FATFS_LinkDriverEx+0x94>)
 8007436:	7251      	strb	r1, [r2, #9]
 8007438:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800743a:	7dbb      	ldrb	r3, [r7, #22]
 800743c:	3330      	adds	r3, #48	; 0x30
 800743e:	b2da      	uxtb	r2, r3
 8007440:	68bb      	ldr	r3, [r7, #8]
 8007442:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	3301      	adds	r3, #1
 8007448:	223a      	movs	r2, #58	; 0x3a
 800744a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	3302      	adds	r3, #2
 8007450:	222f      	movs	r2, #47	; 0x2f
 8007452:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007454:	68bb      	ldr	r3, [r7, #8]
 8007456:	3303      	adds	r3, #3
 8007458:	2200      	movs	r2, #0
 800745a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800745c:	2300      	movs	r3, #0
 800745e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8007460:	7dfb      	ldrb	r3, [r7, #23]
}
 8007462:	4618      	mov	r0, r3
 8007464:	371c      	adds	r7, #28
 8007466:	46bd      	mov	sp, r7
 8007468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746c:	4770      	bx	lr
 800746e:	bf00      	nop
 8007470:	20001424 	.word	0x20001424

08007474 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b082      	sub	sp, #8
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
 800747c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800747e:	2200      	movs	r2, #0
 8007480:	6839      	ldr	r1, [r7, #0]
 8007482:	6878      	ldr	r0, [r7, #4]
 8007484:	f7ff ffaa 	bl	80073dc <FATFS_LinkDriverEx>
 8007488:	4603      	mov	r3, r0
}
 800748a:	4618      	mov	r0, r3
 800748c:	3708      	adds	r7, #8
 800748e:	46bd      	mov	sp, r7
 8007490:	bd80      	pop	{r7, pc}
	...

08007494 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8007494:	b480      	push	{r7}
 8007496:	b085      	sub	sp, #20
 8007498:	af00      	add	r7, sp, #0
 800749a:	4603      	mov	r3, r0
 800749c:	6039      	str	r1, [r7, #0]
 800749e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 80074a0:	88fb      	ldrh	r3, [r7, #6]
 80074a2:	2b7f      	cmp	r3, #127	; 0x7f
 80074a4:	d802      	bhi.n	80074ac <ff_convert+0x18>
		c = chr;
 80074a6:	88fb      	ldrh	r3, [r7, #6]
 80074a8:	81fb      	strh	r3, [r7, #14]
 80074aa:	e025      	b.n	80074f8 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d00b      	beq.n	80074ca <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 80074b2:	88fb      	ldrh	r3, [r7, #6]
 80074b4:	2bff      	cmp	r3, #255	; 0xff
 80074b6:	d805      	bhi.n	80074c4 <ff_convert+0x30>
 80074b8:	88fb      	ldrh	r3, [r7, #6]
 80074ba:	3b80      	subs	r3, #128	; 0x80
 80074bc:	4a12      	ldr	r2, [pc, #72]	; (8007508 <ff_convert+0x74>)
 80074be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80074c2:	e000      	b.n	80074c6 <ff_convert+0x32>
 80074c4:	2300      	movs	r3, #0
 80074c6:	81fb      	strh	r3, [r7, #14]
 80074c8:	e016      	b.n	80074f8 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 80074ca:	2300      	movs	r3, #0
 80074cc:	81fb      	strh	r3, [r7, #14]
 80074ce:	e009      	b.n	80074e4 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 80074d0:	89fb      	ldrh	r3, [r7, #14]
 80074d2:	4a0d      	ldr	r2, [pc, #52]	; (8007508 <ff_convert+0x74>)
 80074d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80074d8:	88fa      	ldrh	r2, [r7, #6]
 80074da:	429a      	cmp	r2, r3
 80074dc:	d006      	beq.n	80074ec <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 80074de:	89fb      	ldrh	r3, [r7, #14]
 80074e0:	3301      	adds	r3, #1
 80074e2:	81fb      	strh	r3, [r7, #14]
 80074e4:	89fb      	ldrh	r3, [r7, #14]
 80074e6:	2b7f      	cmp	r3, #127	; 0x7f
 80074e8:	d9f2      	bls.n	80074d0 <ff_convert+0x3c>
 80074ea:	e000      	b.n	80074ee <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 80074ec:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 80074ee:	89fb      	ldrh	r3, [r7, #14]
 80074f0:	3380      	adds	r3, #128	; 0x80
 80074f2:	b29b      	uxth	r3, r3
 80074f4:	b2db      	uxtb	r3, r3
 80074f6:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 80074f8:	89fb      	ldrh	r3, [r7, #14]
}
 80074fa:	4618      	mov	r0, r3
 80074fc:	3714      	adds	r7, #20
 80074fe:	46bd      	mov	sp, r7
 8007500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007504:	4770      	bx	lr
 8007506:	bf00      	nop
 8007508:	0800bdac 	.word	0x0800bdac

0800750c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800750c:	b480      	push	{r7}
 800750e:	b087      	sub	sp, #28
 8007510:	af00      	add	r7, sp, #0
 8007512:	4603      	mov	r3, r0
 8007514:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8007516:	88fb      	ldrh	r3, [r7, #6]
 8007518:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800751c:	d201      	bcs.n	8007522 <ff_wtoupper+0x16>
 800751e:	4b3e      	ldr	r3, [pc, #248]	; (8007618 <ff_wtoupper+0x10c>)
 8007520:	e000      	b.n	8007524 <ff_wtoupper+0x18>
 8007522:	4b3e      	ldr	r3, [pc, #248]	; (800761c <ff_wtoupper+0x110>)
 8007524:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8007526:	697b      	ldr	r3, [r7, #20]
 8007528:	1c9a      	adds	r2, r3, #2
 800752a:	617a      	str	r2, [r7, #20]
 800752c:	881b      	ldrh	r3, [r3, #0]
 800752e:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8007530:	8a7b      	ldrh	r3, [r7, #18]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d068      	beq.n	8007608 <ff_wtoupper+0xfc>
 8007536:	88fa      	ldrh	r2, [r7, #6]
 8007538:	8a7b      	ldrh	r3, [r7, #18]
 800753a:	429a      	cmp	r2, r3
 800753c:	d364      	bcc.n	8007608 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800753e:	697b      	ldr	r3, [r7, #20]
 8007540:	1c9a      	adds	r2, r3, #2
 8007542:	617a      	str	r2, [r7, #20]
 8007544:	881b      	ldrh	r3, [r3, #0]
 8007546:	823b      	strh	r3, [r7, #16]
 8007548:	8a3b      	ldrh	r3, [r7, #16]
 800754a:	0a1b      	lsrs	r3, r3, #8
 800754c:	81fb      	strh	r3, [r7, #14]
 800754e:	8a3b      	ldrh	r3, [r7, #16]
 8007550:	b2db      	uxtb	r3, r3
 8007552:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8007554:	88fa      	ldrh	r2, [r7, #6]
 8007556:	8a79      	ldrh	r1, [r7, #18]
 8007558:	8a3b      	ldrh	r3, [r7, #16]
 800755a:	440b      	add	r3, r1
 800755c:	429a      	cmp	r2, r3
 800755e:	da49      	bge.n	80075f4 <ff_wtoupper+0xe8>
			switch (cmd) {
 8007560:	89fb      	ldrh	r3, [r7, #14]
 8007562:	2b08      	cmp	r3, #8
 8007564:	d84f      	bhi.n	8007606 <ff_wtoupper+0xfa>
 8007566:	a201      	add	r2, pc, #4	; (adr r2, 800756c <ff_wtoupper+0x60>)
 8007568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800756c:	08007591 	.word	0x08007591
 8007570:	080075a3 	.word	0x080075a3
 8007574:	080075b9 	.word	0x080075b9
 8007578:	080075c1 	.word	0x080075c1
 800757c:	080075c9 	.word	0x080075c9
 8007580:	080075d1 	.word	0x080075d1
 8007584:	080075d9 	.word	0x080075d9
 8007588:	080075e1 	.word	0x080075e1
 800758c:	080075e9 	.word	0x080075e9
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8007590:	88fa      	ldrh	r2, [r7, #6]
 8007592:	8a7b      	ldrh	r3, [r7, #18]
 8007594:	1ad3      	subs	r3, r2, r3
 8007596:	005b      	lsls	r3, r3, #1
 8007598:	697a      	ldr	r2, [r7, #20]
 800759a:	4413      	add	r3, r2
 800759c:	881b      	ldrh	r3, [r3, #0]
 800759e:	80fb      	strh	r3, [r7, #6]
 80075a0:	e027      	b.n	80075f2 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 80075a2:	88fa      	ldrh	r2, [r7, #6]
 80075a4:	8a7b      	ldrh	r3, [r7, #18]
 80075a6:	1ad3      	subs	r3, r2, r3
 80075a8:	b29b      	uxth	r3, r3
 80075aa:	f003 0301 	and.w	r3, r3, #1
 80075ae:	b29b      	uxth	r3, r3
 80075b0:	88fa      	ldrh	r2, [r7, #6]
 80075b2:	1ad3      	subs	r3, r2, r3
 80075b4:	80fb      	strh	r3, [r7, #6]
 80075b6:	e01c      	b.n	80075f2 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 80075b8:	88fb      	ldrh	r3, [r7, #6]
 80075ba:	3b10      	subs	r3, #16
 80075bc:	80fb      	strh	r3, [r7, #6]
 80075be:	e018      	b.n	80075f2 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 80075c0:	88fb      	ldrh	r3, [r7, #6]
 80075c2:	3b20      	subs	r3, #32
 80075c4:	80fb      	strh	r3, [r7, #6]
 80075c6:	e014      	b.n	80075f2 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 80075c8:	88fb      	ldrh	r3, [r7, #6]
 80075ca:	3b30      	subs	r3, #48	; 0x30
 80075cc:	80fb      	strh	r3, [r7, #6]
 80075ce:	e010      	b.n	80075f2 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 80075d0:	88fb      	ldrh	r3, [r7, #6]
 80075d2:	3b1a      	subs	r3, #26
 80075d4:	80fb      	strh	r3, [r7, #6]
 80075d6:	e00c      	b.n	80075f2 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 80075d8:	88fb      	ldrh	r3, [r7, #6]
 80075da:	3308      	adds	r3, #8
 80075dc:	80fb      	strh	r3, [r7, #6]
 80075de:	e008      	b.n	80075f2 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 80075e0:	88fb      	ldrh	r3, [r7, #6]
 80075e2:	3b50      	subs	r3, #80	; 0x50
 80075e4:	80fb      	strh	r3, [r7, #6]
 80075e6:	e004      	b.n	80075f2 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 80075e8:	88fb      	ldrh	r3, [r7, #6]
 80075ea:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 80075ee:	80fb      	strh	r3, [r7, #6]
 80075f0:	bf00      	nop
			}
			break;
 80075f2:	e008      	b.n	8007606 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 80075f4:	89fb      	ldrh	r3, [r7, #14]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d195      	bne.n	8007526 <ff_wtoupper+0x1a>
 80075fa:	8a3b      	ldrh	r3, [r7, #16]
 80075fc:	005b      	lsls	r3, r3, #1
 80075fe:	697a      	ldr	r2, [r7, #20]
 8007600:	4413      	add	r3, r2
 8007602:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8007604:	e78f      	b.n	8007526 <ff_wtoupper+0x1a>
			break;
 8007606:	bf00      	nop
	}

	return chr;
 8007608:	88fb      	ldrh	r3, [r7, #6]
}
 800760a:	4618      	mov	r0, r3
 800760c:	371c      	adds	r7, #28
 800760e:	46bd      	mov	sp, r7
 8007610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007614:	4770      	bx	lr
 8007616:	bf00      	nop
 8007618:	0800beac 	.word	0x0800beac
 800761c:	0800c0a0 	.word	0x0800c0a0

08007620 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b084      	sub	sp, #16
 8007624:	af00      	add	r7, sp, #0
 8007626:	4603      	mov	r3, r0
 8007628:	6039      	str	r1, [r7, #0]
 800762a:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 800762c:	2200      	movs	r2, #0
 800762e:	2101      	movs	r1, #1
 8007630:	2001      	movs	r0, #1
 8007632:	f000 f9f9 	bl	8007a28 <osSemaphoreNew>
 8007636:	4602      	mov	r2, r0
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	2b00      	cmp	r3, #0
 8007642:	bf14      	ite	ne
 8007644:	2301      	movne	r3, #1
 8007646:	2300      	moveq	r3, #0
 8007648:	b2db      	uxtb	r3, r3
 800764a:	60fb      	str	r3, [r7, #12]

    return ret;
 800764c:	68fb      	ldr	r3, [r7, #12]
}
 800764e:	4618      	mov	r0, r3
 8007650:	3710      	adds	r7, #16
 8007652:	46bd      	mov	sp, r7
 8007654:	bd80      	pop	{r7, pc}

08007656 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8007656:	b580      	push	{r7, lr}
 8007658:	b082      	sub	sp, #8
 800765a:	af00      	add	r7, sp, #0
 800765c:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 800765e:	6878      	ldr	r0, [r7, #4]
 8007660:	f000 fb02 	bl	8007c68 <osSemaphoreDelete>
#endif
    return 1;
 8007664:	2301      	movs	r3, #1
}
 8007666:	4618      	mov	r0, r3
 8007668:	3708      	adds	r7, #8
 800766a:	46bd      	mov	sp, r7
 800766c:	bd80      	pop	{r7, pc}

0800766e <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800766e:	b580      	push	{r7, lr}
 8007670:	b084      	sub	sp, #16
 8007672:	af00      	add	r7, sp, #0
 8007674:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8007676:	2300      	movs	r3, #0
 8007678:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 800767a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	f000 fa5c 	bl	8007b3c <osSemaphoreAcquire>
 8007684:	4603      	mov	r3, r0
 8007686:	2b00      	cmp	r3, #0
 8007688:	d101      	bne.n	800768e <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 800768a:	2301      	movs	r3, #1
 800768c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800768e:	68fb      	ldr	r3, [r7, #12]
}
 8007690:	4618      	mov	r0, r3
 8007692:	3710      	adds	r7, #16
 8007694:	46bd      	mov	sp, r7
 8007696:	bd80      	pop	{r7, pc}

08007698 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b082      	sub	sp, #8
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 80076a0:	6878      	ldr	r0, [r7, #4]
 80076a2:	f000 fa9d 	bl	8007be0 <osSemaphoreRelease>
#endif
}
 80076a6:	bf00      	nop
 80076a8:	3708      	adds	r7, #8
 80076aa:	46bd      	mov	sp, r7
 80076ac:	bd80      	pop	{r7, pc}
	...

080076b0 <__NVIC_SetPriority>:
{
 80076b0:	b480      	push	{r7}
 80076b2:	b083      	sub	sp, #12
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	4603      	mov	r3, r0
 80076b8:	6039      	str	r1, [r7, #0]
 80076ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80076bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	db0a      	blt.n	80076da <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	b2da      	uxtb	r2, r3
 80076c8:	490c      	ldr	r1, [pc, #48]	; (80076fc <__NVIC_SetPriority+0x4c>)
 80076ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80076ce:	0112      	lsls	r2, r2, #4
 80076d0:	b2d2      	uxtb	r2, r2
 80076d2:	440b      	add	r3, r1
 80076d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80076d8:	e00a      	b.n	80076f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	b2da      	uxtb	r2, r3
 80076de:	4908      	ldr	r1, [pc, #32]	; (8007700 <__NVIC_SetPriority+0x50>)
 80076e0:	79fb      	ldrb	r3, [r7, #7]
 80076e2:	f003 030f 	and.w	r3, r3, #15
 80076e6:	3b04      	subs	r3, #4
 80076e8:	0112      	lsls	r2, r2, #4
 80076ea:	b2d2      	uxtb	r2, r2
 80076ec:	440b      	add	r3, r1
 80076ee:	761a      	strb	r2, [r3, #24]
}
 80076f0:	bf00      	nop
 80076f2:	370c      	adds	r7, #12
 80076f4:	46bd      	mov	sp, r7
 80076f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fa:	4770      	bx	lr
 80076fc:	e000e100 	.word	0xe000e100
 8007700:	e000ed00 	.word	0xe000ed00

08007704 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007704:	b580      	push	{r7, lr}
 8007706:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007708:	2100      	movs	r1, #0
 800770a:	f06f 0004 	mvn.w	r0, #4
 800770e:	f7ff ffcf 	bl	80076b0 <__NVIC_SetPriority>
#endif
}
 8007712:	bf00      	nop
 8007714:	bd80      	pop	{r7, pc}
	...

08007718 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007718:	b480      	push	{r7}
 800771a:	b083      	sub	sp, #12
 800771c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800771e:	f3ef 8305 	mrs	r3, IPSR
 8007722:	603b      	str	r3, [r7, #0]
  return(result);
 8007724:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007726:	2b00      	cmp	r3, #0
 8007728:	d003      	beq.n	8007732 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800772a:	f06f 0305 	mvn.w	r3, #5
 800772e:	607b      	str	r3, [r7, #4]
 8007730:	e00c      	b.n	800774c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007732:	4b0a      	ldr	r3, [pc, #40]	; (800775c <osKernelInitialize+0x44>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d105      	bne.n	8007746 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800773a:	4b08      	ldr	r3, [pc, #32]	; (800775c <osKernelInitialize+0x44>)
 800773c:	2201      	movs	r2, #1
 800773e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007740:	2300      	movs	r3, #0
 8007742:	607b      	str	r3, [r7, #4]
 8007744:	e002      	b.n	800774c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007746:	f04f 33ff 	mov.w	r3, #4294967295
 800774a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800774c:	687b      	ldr	r3, [r7, #4]
}
 800774e:	4618      	mov	r0, r3
 8007750:	370c      	adds	r7, #12
 8007752:	46bd      	mov	sp, r7
 8007754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007758:	4770      	bx	lr
 800775a:	bf00      	nop
 800775c:	20001430 	.word	0x20001430

08007760 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007760:	b580      	push	{r7, lr}
 8007762:	b082      	sub	sp, #8
 8007764:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007766:	f3ef 8305 	mrs	r3, IPSR
 800776a:	603b      	str	r3, [r7, #0]
  return(result);
 800776c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800776e:	2b00      	cmp	r3, #0
 8007770:	d003      	beq.n	800777a <osKernelStart+0x1a>
    stat = osErrorISR;
 8007772:	f06f 0305 	mvn.w	r3, #5
 8007776:	607b      	str	r3, [r7, #4]
 8007778:	e010      	b.n	800779c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800777a:	4b0b      	ldr	r3, [pc, #44]	; (80077a8 <osKernelStart+0x48>)
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	2b01      	cmp	r3, #1
 8007780:	d109      	bne.n	8007796 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007782:	f7ff ffbf 	bl	8007704 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007786:	4b08      	ldr	r3, [pc, #32]	; (80077a8 <osKernelStart+0x48>)
 8007788:	2202      	movs	r2, #2
 800778a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800778c:	f001 fd5c 	bl	8009248 <vTaskStartScheduler>
      stat = osOK;
 8007790:	2300      	movs	r3, #0
 8007792:	607b      	str	r3, [r7, #4]
 8007794:	e002      	b.n	800779c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007796:	f04f 33ff 	mov.w	r3, #4294967295
 800779a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800779c:	687b      	ldr	r3, [r7, #4]
}
 800779e:	4618      	mov	r0, r3
 80077a0:	3708      	adds	r7, #8
 80077a2:	46bd      	mov	sp, r7
 80077a4:	bd80      	pop	{r7, pc}
 80077a6:	bf00      	nop
 80077a8:	20001430 	.word	0x20001430

080077ac <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b08e      	sub	sp, #56	; 0x38
 80077b0:	af04      	add	r7, sp, #16
 80077b2:	60f8      	str	r0, [r7, #12]
 80077b4:	60b9      	str	r1, [r7, #8]
 80077b6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80077b8:	2300      	movs	r3, #0
 80077ba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80077bc:	f3ef 8305 	mrs	r3, IPSR
 80077c0:	617b      	str	r3, [r7, #20]
  return(result);
 80077c2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d17e      	bne.n	80078c6 <osThreadNew+0x11a>
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d07b      	beq.n	80078c6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80077ce:	2380      	movs	r3, #128	; 0x80
 80077d0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80077d2:	2318      	movs	r3, #24
 80077d4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80077d6:	2300      	movs	r3, #0
 80077d8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80077da:	f04f 33ff 	mov.w	r3, #4294967295
 80077de:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d045      	beq.n	8007872 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d002      	beq.n	80077f4 <osThreadNew+0x48>
        name = attr->name;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	699b      	ldr	r3, [r3, #24]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d002      	beq.n	8007802 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	699b      	ldr	r3, [r3, #24]
 8007800:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007802:	69fb      	ldr	r3, [r7, #28]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d008      	beq.n	800781a <osThreadNew+0x6e>
 8007808:	69fb      	ldr	r3, [r7, #28]
 800780a:	2b38      	cmp	r3, #56	; 0x38
 800780c:	d805      	bhi.n	800781a <osThreadNew+0x6e>
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	685b      	ldr	r3, [r3, #4]
 8007812:	f003 0301 	and.w	r3, r3, #1
 8007816:	2b00      	cmp	r3, #0
 8007818:	d001      	beq.n	800781e <osThreadNew+0x72>
        return (NULL);
 800781a:	2300      	movs	r3, #0
 800781c:	e054      	b.n	80078c8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	695b      	ldr	r3, [r3, #20]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d003      	beq.n	800782e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	695b      	ldr	r3, [r3, #20]
 800782a:	089b      	lsrs	r3, r3, #2
 800782c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	689b      	ldr	r3, [r3, #8]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d00e      	beq.n	8007854 <osThreadNew+0xa8>
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	68db      	ldr	r3, [r3, #12]
 800783a:	2b5b      	cmp	r3, #91	; 0x5b
 800783c:	d90a      	bls.n	8007854 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007842:	2b00      	cmp	r3, #0
 8007844:	d006      	beq.n	8007854 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	695b      	ldr	r3, [r3, #20]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d002      	beq.n	8007854 <osThreadNew+0xa8>
        mem = 1;
 800784e:	2301      	movs	r3, #1
 8007850:	61bb      	str	r3, [r7, #24]
 8007852:	e010      	b.n	8007876 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	689b      	ldr	r3, [r3, #8]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d10c      	bne.n	8007876 <osThreadNew+0xca>
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	68db      	ldr	r3, [r3, #12]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d108      	bne.n	8007876 <osThreadNew+0xca>
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	691b      	ldr	r3, [r3, #16]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d104      	bne.n	8007876 <osThreadNew+0xca>
          mem = 0;
 800786c:	2300      	movs	r3, #0
 800786e:	61bb      	str	r3, [r7, #24]
 8007870:	e001      	b.n	8007876 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007872:	2300      	movs	r3, #0
 8007874:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007876:	69bb      	ldr	r3, [r7, #24]
 8007878:	2b01      	cmp	r3, #1
 800787a:	d110      	bne.n	800789e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007880:	687a      	ldr	r2, [r7, #4]
 8007882:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007884:	9202      	str	r2, [sp, #8]
 8007886:	9301      	str	r3, [sp, #4]
 8007888:	69fb      	ldr	r3, [r7, #28]
 800788a:	9300      	str	r3, [sp, #0]
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	6a3a      	ldr	r2, [r7, #32]
 8007890:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007892:	68f8      	ldr	r0, [r7, #12]
 8007894:	f001 fb02 	bl	8008e9c <xTaskCreateStatic>
 8007898:	4603      	mov	r3, r0
 800789a:	613b      	str	r3, [r7, #16]
 800789c:	e013      	b.n	80078c6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800789e:	69bb      	ldr	r3, [r7, #24]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d110      	bne.n	80078c6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80078a4:	6a3b      	ldr	r3, [r7, #32]
 80078a6:	b29a      	uxth	r2, r3
 80078a8:	f107 0310 	add.w	r3, r7, #16
 80078ac:	9301      	str	r3, [sp, #4]
 80078ae:	69fb      	ldr	r3, [r7, #28]
 80078b0:	9300      	str	r3, [sp, #0]
 80078b2:	68bb      	ldr	r3, [r7, #8]
 80078b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80078b6:	68f8      	ldr	r0, [r7, #12]
 80078b8:	f001 fb4d 	bl	8008f56 <xTaskCreate>
 80078bc:	4603      	mov	r3, r0
 80078be:	2b01      	cmp	r3, #1
 80078c0:	d001      	beq.n	80078c6 <osThreadNew+0x11a>
            hTask = NULL;
 80078c2:	2300      	movs	r3, #0
 80078c4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80078c6:	693b      	ldr	r3, [r7, #16]
}
 80078c8:	4618      	mov	r0, r3
 80078ca:	3728      	adds	r7, #40	; 0x28
 80078cc:	46bd      	mov	sp, r7
 80078ce:	bd80      	pop	{r7, pc}

080078d0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b084      	sub	sp, #16
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80078d8:	f3ef 8305 	mrs	r3, IPSR
 80078dc:	60bb      	str	r3, [r7, #8]
  return(result);
 80078de:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d003      	beq.n	80078ec <osDelay+0x1c>
    stat = osErrorISR;
 80078e4:	f06f 0305 	mvn.w	r3, #5
 80078e8:	60fb      	str	r3, [r7, #12]
 80078ea:	e007      	b.n	80078fc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80078ec:	2300      	movs	r3, #0
 80078ee:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d002      	beq.n	80078fc <osDelay+0x2c>
      vTaskDelay(ticks);
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	f001 fc72 	bl	80091e0 <vTaskDelay>
    }
  }

  return (stat);
 80078fc:	68fb      	ldr	r3, [r7, #12]
}
 80078fe:	4618      	mov	r0, r3
 8007900:	3710      	adds	r7, #16
 8007902:	46bd      	mov	sp, r7
 8007904:	bd80      	pop	{r7, pc}

08007906 <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 8007906:	b580      	push	{r7, lr}
 8007908:	b084      	sub	sp, #16
 800790a:	af00      	add	r7, sp, #0
 800790c:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	f002 fea8 	bl	800a664 <pvTimerGetTimerID>
 8007914:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d005      	beq.n	8007928 <TimerCallback+0x22>
    callb->func (callb->arg);
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	68fa      	ldr	r2, [r7, #12]
 8007922:	6852      	ldr	r2, [r2, #4]
 8007924:	4610      	mov	r0, r2
 8007926:	4798      	blx	r3
  }
}
 8007928:	bf00      	nop
 800792a:	3710      	adds	r7, #16
 800792c:	46bd      	mov	sp, r7
 800792e:	bd80      	pop	{r7, pc}

08007930 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8007930:	b580      	push	{r7, lr}
 8007932:	b08c      	sub	sp, #48	; 0x30
 8007934:	af02      	add	r7, sp, #8
 8007936:	60f8      	str	r0, [r7, #12]
 8007938:	607a      	str	r2, [r7, #4]
 800793a:	603b      	str	r3, [r7, #0]
 800793c:	460b      	mov	r3, r1
 800793e:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8007940:	2300      	movs	r3, #0
 8007942:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007944:	f3ef 8305 	mrs	r3, IPSR
 8007948:	613b      	str	r3, [r7, #16]
  return(result);
 800794a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 800794c:	2b00      	cmp	r3, #0
 800794e:	d163      	bne.n	8007a18 <osTimerNew+0xe8>
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d060      	beq.n	8007a18 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8007956:	2008      	movs	r0, #8
 8007958:	f003 f8f6 	bl	800ab48 <pvPortMalloc>
 800795c:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 800795e:	697b      	ldr	r3, [r7, #20]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d059      	beq.n	8007a18 <osTimerNew+0xe8>
      callb->func = func;
 8007964:	697b      	ldr	r3, [r7, #20]
 8007966:	68fa      	ldr	r2, [r7, #12]
 8007968:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800796a:	697b      	ldr	r3, [r7, #20]
 800796c:	687a      	ldr	r2, [r7, #4]
 800796e:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8007970:	7afb      	ldrb	r3, [r7, #11]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d102      	bne.n	800797c <osTimerNew+0x4c>
        reload = pdFALSE;
 8007976:	2300      	movs	r3, #0
 8007978:	61fb      	str	r3, [r7, #28]
 800797a:	e001      	b.n	8007980 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 800797c:	2301      	movs	r3, #1
 800797e:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 8007980:	f04f 33ff 	mov.w	r3, #4294967295
 8007984:	61bb      	str	r3, [r7, #24]
      name = NULL;
 8007986:	2300      	movs	r3, #0
 8007988:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d01c      	beq.n	80079ca <osTimerNew+0x9a>
        if (attr->name != NULL) {
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d002      	beq.n	800799e <osTimerNew+0x6e>
          name = attr->name;
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	689b      	ldr	r3, [r3, #8]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d006      	beq.n	80079b4 <osTimerNew+0x84>
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	68db      	ldr	r3, [r3, #12]
 80079aa:	2b2b      	cmp	r3, #43	; 0x2b
 80079ac:	d902      	bls.n	80079b4 <osTimerNew+0x84>
          mem = 1;
 80079ae:	2301      	movs	r3, #1
 80079b0:	61bb      	str	r3, [r7, #24]
 80079b2:	e00c      	b.n	80079ce <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	689b      	ldr	r3, [r3, #8]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d108      	bne.n	80079ce <osTimerNew+0x9e>
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	68db      	ldr	r3, [r3, #12]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d104      	bne.n	80079ce <osTimerNew+0x9e>
            mem = 0;
 80079c4:	2300      	movs	r3, #0
 80079c6:	61bb      	str	r3, [r7, #24]
 80079c8:	e001      	b.n	80079ce <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 80079ca:	2300      	movs	r3, #0
 80079cc:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 80079ce:	69bb      	ldr	r3, [r7, #24]
 80079d0:	2b01      	cmp	r3, #1
 80079d2:	d10c      	bne.n	80079ee <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	689b      	ldr	r3, [r3, #8]
 80079d8:	9301      	str	r3, [sp, #4]
 80079da:	4b12      	ldr	r3, [pc, #72]	; (8007a24 <osTimerNew+0xf4>)
 80079dc:	9300      	str	r3, [sp, #0]
 80079de:	697b      	ldr	r3, [r7, #20]
 80079e0:	69fa      	ldr	r2, [r7, #28]
 80079e2:	2101      	movs	r1, #1
 80079e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80079e6:	f002 fabe 	bl	8009f66 <xTimerCreateStatic>
 80079ea:	6238      	str	r0, [r7, #32]
 80079ec:	e00b      	b.n	8007a06 <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 80079ee:	69bb      	ldr	r3, [r7, #24]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d108      	bne.n	8007a06 <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 80079f4:	4b0b      	ldr	r3, [pc, #44]	; (8007a24 <osTimerNew+0xf4>)
 80079f6:	9300      	str	r3, [sp, #0]
 80079f8:	697b      	ldr	r3, [r7, #20]
 80079fa:	69fa      	ldr	r2, [r7, #28]
 80079fc:	2101      	movs	r1, #1
 80079fe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007a00:	f002 fa90 	bl	8009f24 <xTimerCreate>
 8007a04:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 8007a06:	6a3b      	ldr	r3, [r7, #32]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d105      	bne.n	8007a18 <osTimerNew+0xe8>
 8007a0c:	697b      	ldr	r3, [r7, #20]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d002      	beq.n	8007a18 <osTimerNew+0xe8>
        vPortFree (callb);
 8007a12:	6978      	ldr	r0, [r7, #20]
 8007a14:	f003 f964 	bl	800ace0 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8007a18:	6a3b      	ldr	r3, [r7, #32]
}
 8007a1a:	4618      	mov	r0, r3
 8007a1c:	3728      	adds	r7, #40	; 0x28
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	bd80      	pop	{r7, pc}
 8007a22:	bf00      	nop
 8007a24:	08007907 	.word	0x08007907

08007a28 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b08a      	sub	sp, #40	; 0x28
 8007a2c:	af02      	add	r7, sp, #8
 8007a2e:	60f8      	str	r0, [r7, #12]
 8007a30:	60b9      	str	r1, [r7, #8]
 8007a32:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8007a34:	2300      	movs	r3, #0
 8007a36:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007a38:	f3ef 8305 	mrs	r3, IPSR
 8007a3c:	613b      	str	r3, [r7, #16]
  return(result);
 8007a3e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d175      	bne.n	8007b30 <osSemaphoreNew+0x108>
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d072      	beq.n	8007b30 <osSemaphoreNew+0x108>
 8007a4a:	68ba      	ldr	r2, [r7, #8]
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	429a      	cmp	r2, r3
 8007a50:	d86e      	bhi.n	8007b30 <osSemaphoreNew+0x108>
    mem = -1;
 8007a52:	f04f 33ff 	mov.w	r3, #4294967295
 8007a56:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d015      	beq.n	8007a8a <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	689b      	ldr	r3, [r3, #8]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d006      	beq.n	8007a74 <osSemaphoreNew+0x4c>
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	68db      	ldr	r3, [r3, #12]
 8007a6a:	2b4f      	cmp	r3, #79	; 0x4f
 8007a6c:	d902      	bls.n	8007a74 <osSemaphoreNew+0x4c>
        mem = 1;
 8007a6e:	2301      	movs	r3, #1
 8007a70:	61bb      	str	r3, [r7, #24]
 8007a72:	e00c      	b.n	8007a8e <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	689b      	ldr	r3, [r3, #8]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d108      	bne.n	8007a8e <osSemaphoreNew+0x66>
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	68db      	ldr	r3, [r3, #12]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d104      	bne.n	8007a8e <osSemaphoreNew+0x66>
          mem = 0;
 8007a84:	2300      	movs	r3, #0
 8007a86:	61bb      	str	r3, [r7, #24]
 8007a88:	e001      	b.n	8007a8e <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8007a8e:	69bb      	ldr	r3, [r7, #24]
 8007a90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a94:	d04c      	beq.n	8007b30 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	2b01      	cmp	r3, #1
 8007a9a:	d128      	bne.n	8007aee <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8007a9c:	69bb      	ldr	r3, [r7, #24]
 8007a9e:	2b01      	cmp	r3, #1
 8007aa0:	d10a      	bne.n	8007ab8 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	689b      	ldr	r3, [r3, #8]
 8007aa6:	2203      	movs	r2, #3
 8007aa8:	9200      	str	r2, [sp, #0]
 8007aaa:	2200      	movs	r2, #0
 8007aac:	2100      	movs	r1, #0
 8007aae:	2001      	movs	r0, #1
 8007ab0:	f000 fa4e 	bl	8007f50 <xQueueGenericCreateStatic>
 8007ab4:	61f8      	str	r0, [r7, #28]
 8007ab6:	e005      	b.n	8007ac4 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8007ab8:	2203      	movs	r2, #3
 8007aba:	2100      	movs	r1, #0
 8007abc:	2001      	movs	r0, #1
 8007abe:	f000 fabf 	bl	8008040 <xQueueGenericCreate>
 8007ac2:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8007ac4:	69fb      	ldr	r3, [r7, #28]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d022      	beq.n	8007b10 <osSemaphoreNew+0xe8>
 8007aca:	68bb      	ldr	r3, [r7, #8]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d01f      	beq.n	8007b10 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	2100      	movs	r1, #0
 8007ad6:	69f8      	ldr	r0, [r7, #28]
 8007ad8:	f000 fb7a 	bl	80081d0 <xQueueGenericSend>
 8007adc:	4603      	mov	r3, r0
 8007ade:	2b01      	cmp	r3, #1
 8007ae0:	d016      	beq.n	8007b10 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8007ae2:	69f8      	ldr	r0, [r7, #28]
 8007ae4:	f001 f806 	bl	8008af4 <vQueueDelete>
            hSemaphore = NULL;
 8007ae8:	2300      	movs	r3, #0
 8007aea:	61fb      	str	r3, [r7, #28]
 8007aec:	e010      	b.n	8007b10 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8007aee:	69bb      	ldr	r3, [r7, #24]
 8007af0:	2b01      	cmp	r3, #1
 8007af2:	d108      	bne.n	8007b06 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	689b      	ldr	r3, [r3, #8]
 8007af8:	461a      	mov	r2, r3
 8007afa:	68b9      	ldr	r1, [r7, #8]
 8007afc:	68f8      	ldr	r0, [r7, #12]
 8007afe:	f000 fafc 	bl	80080fa <xQueueCreateCountingSemaphoreStatic>
 8007b02:	61f8      	str	r0, [r7, #28]
 8007b04:	e004      	b.n	8007b10 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8007b06:	68b9      	ldr	r1, [r7, #8]
 8007b08:	68f8      	ldr	r0, [r7, #12]
 8007b0a:	f000 fb2d 	bl	8008168 <xQueueCreateCountingSemaphore>
 8007b0e:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8007b10:	69fb      	ldr	r3, [r7, #28]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d00c      	beq.n	8007b30 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d003      	beq.n	8007b24 <osSemaphoreNew+0xfc>
          name = attr->name;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	617b      	str	r3, [r7, #20]
 8007b22:	e001      	b.n	8007b28 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8007b24:	2300      	movs	r3, #0
 8007b26:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8007b28:	6979      	ldr	r1, [r7, #20]
 8007b2a:	69f8      	ldr	r0, [r7, #28]
 8007b2c:	f001 f92e 	bl	8008d8c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8007b30:	69fb      	ldr	r3, [r7, #28]
}
 8007b32:	4618      	mov	r0, r3
 8007b34:	3720      	adds	r7, #32
 8007b36:	46bd      	mov	sp, r7
 8007b38:	bd80      	pop	{r7, pc}
	...

08007b3c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b086      	sub	sp, #24
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
 8007b44:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8007b4e:	693b      	ldr	r3, [r7, #16]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d103      	bne.n	8007b5c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8007b54:	f06f 0303 	mvn.w	r3, #3
 8007b58:	617b      	str	r3, [r7, #20]
 8007b5a:	e039      	b.n	8007bd0 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007b5c:	f3ef 8305 	mrs	r3, IPSR
 8007b60:	60fb      	str	r3, [r7, #12]
  return(result);
 8007b62:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d022      	beq.n	8007bae <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d003      	beq.n	8007b76 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8007b6e:	f06f 0303 	mvn.w	r3, #3
 8007b72:	617b      	str	r3, [r7, #20]
 8007b74:	e02c      	b.n	8007bd0 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8007b76:	2300      	movs	r3, #0
 8007b78:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8007b7a:	f107 0308 	add.w	r3, r7, #8
 8007b7e:	461a      	mov	r2, r3
 8007b80:	2100      	movs	r1, #0
 8007b82:	6938      	ldr	r0, [r7, #16]
 8007b84:	f000 ff36 	bl	80089f4 <xQueueReceiveFromISR>
 8007b88:	4603      	mov	r3, r0
 8007b8a:	2b01      	cmp	r3, #1
 8007b8c:	d003      	beq.n	8007b96 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8007b8e:	f06f 0302 	mvn.w	r3, #2
 8007b92:	617b      	str	r3, [r7, #20]
 8007b94:	e01c      	b.n	8007bd0 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d019      	beq.n	8007bd0 <osSemaphoreAcquire+0x94>
 8007b9c:	4b0f      	ldr	r3, [pc, #60]	; (8007bdc <osSemaphoreAcquire+0xa0>)
 8007b9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ba2:	601a      	str	r2, [r3, #0]
 8007ba4:	f3bf 8f4f 	dsb	sy
 8007ba8:	f3bf 8f6f 	isb	sy
 8007bac:	e010      	b.n	8007bd0 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8007bae:	6839      	ldr	r1, [r7, #0]
 8007bb0:	6938      	ldr	r0, [r7, #16]
 8007bb2:	f000 fe13 	bl	80087dc <xQueueSemaphoreTake>
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	2b01      	cmp	r3, #1
 8007bba:	d009      	beq.n	8007bd0 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d003      	beq.n	8007bca <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8007bc2:	f06f 0301 	mvn.w	r3, #1
 8007bc6:	617b      	str	r3, [r7, #20]
 8007bc8:	e002      	b.n	8007bd0 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8007bca:	f06f 0302 	mvn.w	r3, #2
 8007bce:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8007bd0:	697b      	ldr	r3, [r7, #20]
}
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	3718      	adds	r7, #24
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	bd80      	pop	{r7, pc}
 8007bda:	bf00      	nop
 8007bdc:	e000ed04 	.word	0xe000ed04

08007be0 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b086      	sub	sp, #24
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8007bec:	2300      	movs	r3, #0
 8007bee:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8007bf0:	693b      	ldr	r3, [r7, #16]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d103      	bne.n	8007bfe <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8007bf6:	f06f 0303 	mvn.w	r3, #3
 8007bfa:	617b      	str	r3, [r7, #20]
 8007bfc:	e02c      	b.n	8007c58 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007bfe:	f3ef 8305 	mrs	r3, IPSR
 8007c02:	60fb      	str	r3, [r7, #12]
  return(result);
 8007c04:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d01a      	beq.n	8007c40 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8007c0e:	f107 0308 	add.w	r3, r7, #8
 8007c12:	4619      	mov	r1, r3
 8007c14:	6938      	ldr	r0, [r7, #16]
 8007c16:	f000 fc74 	bl	8008502 <xQueueGiveFromISR>
 8007c1a:	4603      	mov	r3, r0
 8007c1c:	2b01      	cmp	r3, #1
 8007c1e:	d003      	beq.n	8007c28 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8007c20:	f06f 0302 	mvn.w	r3, #2
 8007c24:	617b      	str	r3, [r7, #20]
 8007c26:	e017      	b.n	8007c58 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d014      	beq.n	8007c58 <osSemaphoreRelease+0x78>
 8007c2e:	4b0d      	ldr	r3, [pc, #52]	; (8007c64 <osSemaphoreRelease+0x84>)
 8007c30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c34:	601a      	str	r2, [r3, #0]
 8007c36:	f3bf 8f4f 	dsb	sy
 8007c3a:	f3bf 8f6f 	isb	sy
 8007c3e:	e00b      	b.n	8007c58 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8007c40:	2300      	movs	r3, #0
 8007c42:	2200      	movs	r2, #0
 8007c44:	2100      	movs	r1, #0
 8007c46:	6938      	ldr	r0, [r7, #16]
 8007c48:	f000 fac2 	bl	80081d0 <xQueueGenericSend>
 8007c4c:	4603      	mov	r3, r0
 8007c4e:	2b01      	cmp	r3, #1
 8007c50:	d002      	beq.n	8007c58 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8007c52:	f06f 0302 	mvn.w	r3, #2
 8007c56:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8007c58:	697b      	ldr	r3, [r7, #20]
}
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	3718      	adds	r7, #24
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	bd80      	pop	{r7, pc}
 8007c62:	bf00      	nop
 8007c64:	e000ed04 	.word	0xe000ed04

08007c68 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b086      	sub	sp, #24
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007c74:	f3ef 8305 	mrs	r3, IPSR
 8007c78:	60fb      	str	r3, [r7, #12]
  return(result);
 8007c7a:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d003      	beq.n	8007c88 <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 8007c80:	f06f 0305 	mvn.w	r3, #5
 8007c84:	617b      	str	r3, [r7, #20]
 8007c86:	e00e      	b.n	8007ca6 <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 8007c88:	693b      	ldr	r3, [r7, #16]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d103      	bne.n	8007c96 <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 8007c8e:	f06f 0303 	mvn.w	r3, #3
 8007c92:	617b      	str	r3, [r7, #20]
 8007c94:	e007      	b.n	8007ca6 <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 8007c96:	6938      	ldr	r0, [r7, #16]
 8007c98:	f001 f8a2 	bl	8008de0 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 8007ca0:	6938      	ldr	r0, [r7, #16]
 8007ca2:	f000 ff27 	bl	8008af4 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8007ca6:	697b      	ldr	r3, [r7, #20]
}
 8007ca8:	4618      	mov	r0, r3
 8007caa:	3718      	adds	r7, #24
 8007cac:	46bd      	mov	sp, r7
 8007cae:	bd80      	pop	{r7, pc}

08007cb0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007cb0:	b480      	push	{r7}
 8007cb2:	b085      	sub	sp, #20
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	60f8      	str	r0, [r7, #12]
 8007cb8:	60b9      	str	r1, [r7, #8]
 8007cba:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	4a07      	ldr	r2, [pc, #28]	; (8007cdc <vApplicationGetIdleTaskMemory+0x2c>)
 8007cc0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007cc2:	68bb      	ldr	r3, [r7, #8]
 8007cc4:	4a06      	ldr	r2, [pc, #24]	; (8007ce0 <vApplicationGetIdleTaskMemory+0x30>)
 8007cc6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2280      	movs	r2, #128	; 0x80
 8007ccc:	601a      	str	r2, [r3, #0]
}
 8007cce:	bf00      	nop
 8007cd0:	3714      	adds	r7, #20
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd8:	4770      	bx	lr
 8007cda:	bf00      	nop
 8007cdc:	20001434 	.word	0x20001434
 8007ce0:	20001490 	.word	0x20001490

08007ce4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007ce4:	b480      	push	{r7}
 8007ce6:	b085      	sub	sp, #20
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	60f8      	str	r0, [r7, #12]
 8007cec:	60b9      	str	r1, [r7, #8]
 8007cee:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	4a07      	ldr	r2, [pc, #28]	; (8007d10 <vApplicationGetTimerTaskMemory+0x2c>)
 8007cf4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007cf6:	68bb      	ldr	r3, [r7, #8]
 8007cf8:	4a06      	ldr	r2, [pc, #24]	; (8007d14 <vApplicationGetTimerTaskMemory+0x30>)
 8007cfa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007d02:	601a      	str	r2, [r3, #0]
}
 8007d04:	bf00      	nop
 8007d06:	3714      	adds	r7, #20
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0e:	4770      	bx	lr
 8007d10:	20001690 	.word	0x20001690
 8007d14:	200016ec 	.word	0x200016ec

08007d18 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007d18:	b480      	push	{r7}
 8007d1a:	b083      	sub	sp, #12
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	f103 0208 	add.w	r2, r3, #8
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	f04f 32ff 	mov.w	r2, #4294967295
 8007d30:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	f103 0208 	add.w	r2, r3, #8
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	f103 0208 	add.w	r2, r3, #8
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2200      	movs	r2, #0
 8007d4a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007d4c:	bf00      	nop
 8007d4e:	370c      	adds	r7, #12
 8007d50:	46bd      	mov	sp, r7
 8007d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d56:	4770      	bx	lr

08007d58 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007d58:	b480      	push	{r7}
 8007d5a:	b083      	sub	sp, #12
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2200      	movs	r2, #0
 8007d64:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007d66:	bf00      	nop
 8007d68:	370c      	adds	r7, #12
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d70:	4770      	bx	lr

08007d72 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007d72:	b480      	push	{r7}
 8007d74:	b085      	sub	sp, #20
 8007d76:	af00      	add	r7, sp, #0
 8007d78:	6078      	str	r0, [r7, #4]
 8007d7a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	685b      	ldr	r3, [r3, #4]
 8007d80:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007d82:	683b      	ldr	r3, [r7, #0]
 8007d84:	68fa      	ldr	r2, [r7, #12]
 8007d86:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	689a      	ldr	r2, [r3, #8]
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	689b      	ldr	r3, [r3, #8]
 8007d94:	683a      	ldr	r2, [r7, #0]
 8007d96:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	683a      	ldr	r2, [r7, #0]
 8007d9c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	687a      	ldr	r2, [r7, #4]
 8007da2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	1c5a      	adds	r2, r3, #1
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	601a      	str	r2, [r3, #0]
}
 8007dae:	bf00      	nop
 8007db0:	3714      	adds	r7, #20
 8007db2:	46bd      	mov	sp, r7
 8007db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db8:	4770      	bx	lr

08007dba <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007dba:	b480      	push	{r7}
 8007dbc:	b085      	sub	sp, #20
 8007dbe:	af00      	add	r7, sp, #0
 8007dc0:	6078      	str	r0, [r7, #4]
 8007dc2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007dca:	68bb      	ldr	r3, [r7, #8]
 8007dcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dd0:	d103      	bne.n	8007dda <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	691b      	ldr	r3, [r3, #16]
 8007dd6:	60fb      	str	r3, [r7, #12]
 8007dd8:	e00c      	b.n	8007df4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	3308      	adds	r3, #8
 8007dde:	60fb      	str	r3, [r7, #12]
 8007de0:	e002      	b.n	8007de8 <vListInsert+0x2e>
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	685b      	ldr	r3, [r3, #4]
 8007de6:	60fb      	str	r3, [r7, #12]
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	685b      	ldr	r3, [r3, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	68ba      	ldr	r2, [r7, #8]
 8007df0:	429a      	cmp	r2, r3
 8007df2:	d2f6      	bcs.n	8007de2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	685a      	ldr	r2, [r3, #4]
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	685b      	ldr	r3, [r3, #4]
 8007e00:	683a      	ldr	r2, [r7, #0]
 8007e02:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	68fa      	ldr	r2, [r7, #12]
 8007e08:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	683a      	ldr	r2, [r7, #0]
 8007e0e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	687a      	ldr	r2, [r7, #4]
 8007e14:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	1c5a      	adds	r2, r3, #1
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	601a      	str	r2, [r3, #0]
}
 8007e20:	bf00      	nop
 8007e22:	3714      	adds	r7, #20
 8007e24:	46bd      	mov	sp, r7
 8007e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2a:	4770      	bx	lr

08007e2c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007e2c:	b480      	push	{r7}
 8007e2e:	b085      	sub	sp, #20
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	691b      	ldr	r3, [r3, #16]
 8007e38:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	685b      	ldr	r3, [r3, #4]
 8007e3e:	687a      	ldr	r2, [r7, #4]
 8007e40:	6892      	ldr	r2, [r2, #8]
 8007e42:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	689b      	ldr	r3, [r3, #8]
 8007e48:	687a      	ldr	r2, [r7, #4]
 8007e4a:	6852      	ldr	r2, [r2, #4]
 8007e4c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	685b      	ldr	r3, [r3, #4]
 8007e52:	687a      	ldr	r2, [r7, #4]
 8007e54:	429a      	cmp	r2, r3
 8007e56:	d103      	bne.n	8007e60 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	689a      	ldr	r2, [r3, #8]
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2200      	movs	r2, #0
 8007e64:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	1e5a      	subs	r2, r3, #1
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	681b      	ldr	r3, [r3, #0]
}
 8007e74:	4618      	mov	r0, r3
 8007e76:	3714      	adds	r7, #20
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7e:	4770      	bx	lr

08007e80 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007e80:	b580      	push	{r7, lr}
 8007e82:	b084      	sub	sp, #16
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
 8007e88:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d10a      	bne.n	8007eaa <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e98:	f383 8811 	msr	BASEPRI, r3
 8007e9c:	f3bf 8f6f 	isb	sy
 8007ea0:	f3bf 8f4f 	dsb	sy
 8007ea4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007ea6:	bf00      	nop
 8007ea8:	e7fe      	b.n	8007ea8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007eaa:	f002 fd2b 	bl	800a904 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	681a      	ldr	r2, [r3, #0]
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007eb6:	68f9      	ldr	r1, [r7, #12]
 8007eb8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007eba:	fb01 f303 	mul.w	r3, r1, r3
 8007ebe:	441a      	add	r2, r3
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	2200      	movs	r2, #0
 8007ec8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	681a      	ldr	r2, [r3, #0]
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	681a      	ldr	r2, [r3, #0]
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007eda:	3b01      	subs	r3, #1
 8007edc:	68f9      	ldr	r1, [r7, #12]
 8007ede:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007ee0:	fb01 f303 	mul.w	r3, r1, r3
 8007ee4:	441a      	add	r2, r3
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	22ff      	movs	r2, #255	; 0xff
 8007eee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	22ff      	movs	r2, #255	; 0xff
 8007ef6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d114      	bne.n	8007f2a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	691b      	ldr	r3, [r3, #16]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d01a      	beq.n	8007f3e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	3310      	adds	r3, #16
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	f001 fc25 	bl	800975c <xTaskRemoveFromEventList>
 8007f12:	4603      	mov	r3, r0
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d012      	beq.n	8007f3e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007f18:	4b0c      	ldr	r3, [pc, #48]	; (8007f4c <xQueueGenericReset+0xcc>)
 8007f1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f1e:	601a      	str	r2, [r3, #0]
 8007f20:	f3bf 8f4f 	dsb	sy
 8007f24:	f3bf 8f6f 	isb	sy
 8007f28:	e009      	b.n	8007f3e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	3310      	adds	r3, #16
 8007f2e:	4618      	mov	r0, r3
 8007f30:	f7ff fef2 	bl	8007d18 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	3324      	adds	r3, #36	; 0x24
 8007f38:	4618      	mov	r0, r3
 8007f3a:	f7ff feed 	bl	8007d18 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007f3e:	f002 fd11 	bl	800a964 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007f42:	2301      	movs	r3, #1
}
 8007f44:	4618      	mov	r0, r3
 8007f46:	3710      	adds	r7, #16
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	bd80      	pop	{r7, pc}
 8007f4c:	e000ed04 	.word	0xe000ed04

08007f50 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b08e      	sub	sp, #56	; 0x38
 8007f54:	af02      	add	r7, sp, #8
 8007f56:	60f8      	str	r0, [r7, #12]
 8007f58:	60b9      	str	r1, [r7, #8]
 8007f5a:	607a      	str	r2, [r7, #4]
 8007f5c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d10a      	bne.n	8007f7a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f68:	f383 8811 	msr	BASEPRI, r3
 8007f6c:	f3bf 8f6f 	isb	sy
 8007f70:	f3bf 8f4f 	dsb	sy
 8007f74:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007f76:	bf00      	nop
 8007f78:	e7fe      	b.n	8007f78 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d10a      	bne.n	8007f96 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f84:	f383 8811 	msr	BASEPRI, r3
 8007f88:	f3bf 8f6f 	isb	sy
 8007f8c:	f3bf 8f4f 	dsb	sy
 8007f90:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007f92:	bf00      	nop
 8007f94:	e7fe      	b.n	8007f94 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d002      	beq.n	8007fa2 <xQueueGenericCreateStatic+0x52>
 8007f9c:	68bb      	ldr	r3, [r7, #8]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d001      	beq.n	8007fa6 <xQueueGenericCreateStatic+0x56>
 8007fa2:	2301      	movs	r3, #1
 8007fa4:	e000      	b.n	8007fa8 <xQueueGenericCreateStatic+0x58>
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d10a      	bne.n	8007fc2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fb0:	f383 8811 	msr	BASEPRI, r3
 8007fb4:	f3bf 8f6f 	isb	sy
 8007fb8:	f3bf 8f4f 	dsb	sy
 8007fbc:	623b      	str	r3, [r7, #32]
}
 8007fbe:	bf00      	nop
 8007fc0:	e7fe      	b.n	8007fc0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d102      	bne.n	8007fce <xQueueGenericCreateStatic+0x7e>
 8007fc8:	68bb      	ldr	r3, [r7, #8]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d101      	bne.n	8007fd2 <xQueueGenericCreateStatic+0x82>
 8007fce:	2301      	movs	r3, #1
 8007fd0:	e000      	b.n	8007fd4 <xQueueGenericCreateStatic+0x84>
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d10a      	bne.n	8007fee <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007fd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fdc:	f383 8811 	msr	BASEPRI, r3
 8007fe0:	f3bf 8f6f 	isb	sy
 8007fe4:	f3bf 8f4f 	dsb	sy
 8007fe8:	61fb      	str	r3, [r7, #28]
}
 8007fea:	bf00      	nop
 8007fec:	e7fe      	b.n	8007fec <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007fee:	2350      	movs	r3, #80	; 0x50
 8007ff0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007ff2:	697b      	ldr	r3, [r7, #20]
 8007ff4:	2b50      	cmp	r3, #80	; 0x50
 8007ff6:	d00a      	beq.n	800800e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ffc:	f383 8811 	msr	BASEPRI, r3
 8008000:	f3bf 8f6f 	isb	sy
 8008004:	f3bf 8f4f 	dsb	sy
 8008008:	61bb      	str	r3, [r7, #24]
}
 800800a:	bf00      	nop
 800800c:	e7fe      	b.n	800800c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800800e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008016:	2b00      	cmp	r3, #0
 8008018:	d00d      	beq.n	8008036 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800801a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800801c:	2201      	movs	r2, #1
 800801e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008022:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008028:	9300      	str	r3, [sp, #0]
 800802a:	4613      	mov	r3, r2
 800802c:	687a      	ldr	r2, [r7, #4]
 800802e:	68b9      	ldr	r1, [r7, #8]
 8008030:	68f8      	ldr	r0, [r7, #12]
 8008032:	f000 f83f 	bl	80080b4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008038:	4618      	mov	r0, r3
 800803a:	3730      	adds	r7, #48	; 0x30
 800803c:	46bd      	mov	sp, r7
 800803e:	bd80      	pop	{r7, pc}

08008040 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008040:	b580      	push	{r7, lr}
 8008042:	b08a      	sub	sp, #40	; 0x28
 8008044:	af02      	add	r7, sp, #8
 8008046:	60f8      	str	r0, [r7, #12]
 8008048:	60b9      	str	r1, [r7, #8]
 800804a:	4613      	mov	r3, r2
 800804c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d10a      	bne.n	800806a <xQueueGenericCreate+0x2a>
	__asm volatile
 8008054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008058:	f383 8811 	msr	BASEPRI, r3
 800805c:	f3bf 8f6f 	isb	sy
 8008060:	f3bf 8f4f 	dsb	sy
 8008064:	613b      	str	r3, [r7, #16]
}
 8008066:	bf00      	nop
 8008068:	e7fe      	b.n	8008068 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	68ba      	ldr	r2, [r7, #8]
 800806e:	fb02 f303 	mul.w	r3, r2, r3
 8008072:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008074:	69fb      	ldr	r3, [r7, #28]
 8008076:	3350      	adds	r3, #80	; 0x50
 8008078:	4618      	mov	r0, r3
 800807a:	f002 fd65 	bl	800ab48 <pvPortMalloc>
 800807e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008080:	69bb      	ldr	r3, [r7, #24]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d011      	beq.n	80080aa <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008086:	69bb      	ldr	r3, [r7, #24]
 8008088:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800808a:	697b      	ldr	r3, [r7, #20]
 800808c:	3350      	adds	r3, #80	; 0x50
 800808e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008090:	69bb      	ldr	r3, [r7, #24]
 8008092:	2200      	movs	r2, #0
 8008094:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008098:	79fa      	ldrb	r2, [r7, #7]
 800809a:	69bb      	ldr	r3, [r7, #24]
 800809c:	9300      	str	r3, [sp, #0]
 800809e:	4613      	mov	r3, r2
 80080a0:	697a      	ldr	r2, [r7, #20]
 80080a2:	68b9      	ldr	r1, [r7, #8]
 80080a4:	68f8      	ldr	r0, [r7, #12]
 80080a6:	f000 f805 	bl	80080b4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80080aa:	69bb      	ldr	r3, [r7, #24]
	}
 80080ac:	4618      	mov	r0, r3
 80080ae:	3720      	adds	r7, #32
 80080b0:	46bd      	mov	sp, r7
 80080b2:	bd80      	pop	{r7, pc}

080080b4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b084      	sub	sp, #16
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	60f8      	str	r0, [r7, #12]
 80080bc:	60b9      	str	r1, [r7, #8]
 80080be:	607a      	str	r2, [r7, #4]
 80080c0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80080c2:	68bb      	ldr	r3, [r7, #8]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d103      	bne.n	80080d0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80080c8:	69bb      	ldr	r3, [r7, #24]
 80080ca:	69ba      	ldr	r2, [r7, #24]
 80080cc:	601a      	str	r2, [r3, #0]
 80080ce:	e002      	b.n	80080d6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80080d0:	69bb      	ldr	r3, [r7, #24]
 80080d2:	687a      	ldr	r2, [r7, #4]
 80080d4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80080d6:	69bb      	ldr	r3, [r7, #24]
 80080d8:	68fa      	ldr	r2, [r7, #12]
 80080da:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80080dc:	69bb      	ldr	r3, [r7, #24]
 80080de:	68ba      	ldr	r2, [r7, #8]
 80080e0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80080e2:	2101      	movs	r1, #1
 80080e4:	69b8      	ldr	r0, [r7, #24]
 80080e6:	f7ff fecb 	bl	8007e80 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80080ea:	69bb      	ldr	r3, [r7, #24]
 80080ec:	78fa      	ldrb	r2, [r7, #3]
 80080ee:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80080f2:	bf00      	nop
 80080f4:	3710      	adds	r7, #16
 80080f6:	46bd      	mov	sp, r7
 80080f8:	bd80      	pop	{r7, pc}

080080fa <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80080fa:	b580      	push	{r7, lr}
 80080fc:	b08a      	sub	sp, #40	; 0x28
 80080fe:	af02      	add	r7, sp, #8
 8008100:	60f8      	str	r0, [r7, #12]
 8008102:	60b9      	str	r1, [r7, #8]
 8008104:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d10a      	bne.n	8008122 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800810c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008110:	f383 8811 	msr	BASEPRI, r3
 8008114:	f3bf 8f6f 	isb	sy
 8008118:	f3bf 8f4f 	dsb	sy
 800811c:	61bb      	str	r3, [r7, #24]
}
 800811e:	bf00      	nop
 8008120:	e7fe      	b.n	8008120 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8008122:	68ba      	ldr	r2, [r7, #8]
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	429a      	cmp	r2, r3
 8008128:	d90a      	bls.n	8008140 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800812a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800812e:	f383 8811 	msr	BASEPRI, r3
 8008132:	f3bf 8f6f 	isb	sy
 8008136:	f3bf 8f4f 	dsb	sy
 800813a:	617b      	str	r3, [r7, #20]
}
 800813c:	bf00      	nop
 800813e:	e7fe      	b.n	800813e <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008140:	2302      	movs	r3, #2
 8008142:	9300      	str	r3, [sp, #0]
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2200      	movs	r2, #0
 8008148:	2100      	movs	r1, #0
 800814a:	68f8      	ldr	r0, [r7, #12]
 800814c:	f7ff ff00 	bl	8007f50 <xQueueGenericCreateStatic>
 8008150:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8008152:	69fb      	ldr	r3, [r7, #28]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d002      	beq.n	800815e <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008158:	69fb      	ldr	r3, [r7, #28]
 800815a:	68ba      	ldr	r2, [r7, #8]
 800815c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800815e:	69fb      	ldr	r3, [r7, #28]
	}
 8008160:	4618      	mov	r0, r3
 8008162:	3720      	adds	r7, #32
 8008164:	46bd      	mov	sp, r7
 8008166:	bd80      	pop	{r7, pc}

08008168 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8008168:	b580      	push	{r7, lr}
 800816a:	b086      	sub	sp, #24
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
 8008170:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d10a      	bne.n	800818e <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8008178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800817c:	f383 8811 	msr	BASEPRI, r3
 8008180:	f3bf 8f6f 	isb	sy
 8008184:	f3bf 8f4f 	dsb	sy
 8008188:	613b      	str	r3, [r7, #16]
}
 800818a:	bf00      	nop
 800818c:	e7fe      	b.n	800818c <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800818e:	683a      	ldr	r2, [r7, #0]
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	429a      	cmp	r2, r3
 8008194:	d90a      	bls.n	80081ac <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8008196:	f04f 0350 	mov.w	r3, #80	; 0x50
 800819a:	f383 8811 	msr	BASEPRI, r3
 800819e:	f3bf 8f6f 	isb	sy
 80081a2:	f3bf 8f4f 	dsb	sy
 80081a6:	60fb      	str	r3, [r7, #12]
}
 80081a8:	bf00      	nop
 80081aa:	e7fe      	b.n	80081aa <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80081ac:	2202      	movs	r2, #2
 80081ae:	2100      	movs	r1, #0
 80081b0:	6878      	ldr	r0, [r7, #4]
 80081b2:	f7ff ff45 	bl	8008040 <xQueueGenericCreate>
 80081b6:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80081b8:	697b      	ldr	r3, [r7, #20]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d002      	beq.n	80081c4 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80081be:	697b      	ldr	r3, [r7, #20]
 80081c0:	683a      	ldr	r2, [r7, #0]
 80081c2:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80081c4:	697b      	ldr	r3, [r7, #20]
	}
 80081c6:	4618      	mov	r0, r3
 80081c8:	3718      	adds	r7, #24
 80081ca:	46bd      	mov	sp, r7
 80081cc:	bd80      	pop	{r7, pc}
	...

080081d0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b08e      	sub	sp, #56	; 0x38
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	60f8      	str	r0, [r7, #12]
 80081d8:	60b9      	str	r1, [r7, #8]
 80081da:	607a      	str	r2, [r7, #4]
 80081dc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80081de:	2300      	movs	r3, #0
 80081e0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80081e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d10a      	bne.n	8008202 <xQueueGenericSend+0x32>
	__asm volatile
 80081ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081f0:	f383 8811 	msr	BASEPRI, r3
 80081f4:	f3bf 8f6f 	isb	sy
 80081f8:	f3bf 8f4f 	dsb	sy
 80081fc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80081fe:	bf00      	nop
 8008200:	e7fe      	b.n	8008200 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008202:	68bb      	ldr	r3, [r7, #8]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d103      	bne.n	8008210 <xQueueGenericSend+0x40>
 8008208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800820a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800820c:	2b00      	cmp	r3, #0
 800820e:	d101      	bne.n	8008214 <xQueueGenericSend+0x44>
 8008210:	2301      	movs	r3, #1
 8008212:	e000      	b.n	8008216 <xQueueGenericSend+0x46>
 8008214:	2300      	movs	r3, #0
 8008216:	2b00      	cmp	r3, #0
 8008218:	d10a      	bne.n	8008230 <xQueueGenericSend+0x60>
	__asm volatile
 800821a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800821e:	f383 8811 	msr	BASEPRI, r3
 8008222:	f3bf 8f6f 	isb	sy
 8008226:	f3bf 8f4f 	dsb	sy
 800822a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800822c:	bf00      	nop
 800822e:	e7fe      	b.n	800822e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	2b02      	cmp	r3, #2
 8008234:	d103      	bne.n	800823e <xQueueGenericSend+0x6e>
 8008236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008238:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800823a:	2b01      	cmp	r3, #1
 800823c:	d101      	bne.n	8008242 <xQueueGenericSend+0x72>
 800823e:	2301      	movs	r3, #1
 8008240:	e000      	b.n	8008244 <xQueueGenericSend+0x74>
 8008242:	2300      	movs	r3, #0
 8008244:	2b00      	cmp	r3, #0
 8008246:	d10a      	bne.n	800825e <xQueueGenericSend+0x8e>
	__asm volatile
 8008248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800824c:	f383 8811 	msr	BASEPRI, r3
 8008250:	f3bf 8f6f 	isb	sy
 8008254:	f3bf 8f4f 	dsb	sy
 8008258:	623b      	str	r3, [r7, #32]
}
 800825a:	bf00      	nop
 800825c:	e7fe      	b.n	800825c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800825e:	f001 fc3b 	bl	8009ad8 <xTaskGetSchedulerState>
 8008262:	4603      	mov	r3, r0
 8008264:	2b00      	cmp	r3, #0
 8008266:	d102      	bne.n	800826e <xQueueGenericSend+0x9e>
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d101      	bne.n	8008272 <xQueueGenericSend+0xa2>
 800826e:	2301      	movs	r3, #1
 8008270:	e000      	b.n	8008274 <xQueueGenericSend+0xa4>
 8008272:	2300      	movs	r3, #0
 8008274:	2b00      	cmp	r3, #0
 8008276:	d10a      	bne.n	800828e <xQueueGenericSend+0xbe>
	__asm volatile
 8008278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800827c:	f383 8811 	msr	BASEPRI, r3
 8008280:	f3bf 8f6f 	isb	sy
 8008284:	f3bf 8f4f 	dsb	sy
 8008288:	61fb      	str	r3, [r7, #28]
}
 800828a:	bf00      	nop
 800828c:	e7fe      	b.n	800828c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800828e:	f002 fb39 	bl	800a904 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008294:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008298:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800829a:	429a      	cmp	r2, r3
 800829c:	d302      	bcc.n	80082a4 <xQueueGenericSend+0xd4>
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	2b02      	cmp	r3, #2
 80082a2:	d129      	bne.n	80082f8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80082a4:	683a      	ldr	r2, [r7, #0]
 80082a6:	68b9      	ldr	r1, [r7, #8]
 80082a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80082aa:	f000 fc5e 	bl	8008b6a <prvCopyDataToQueue>
 80082ae:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80082b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d010      	beq.n	80082da <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80082b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082ba:	3324      	adds	r3, #36	; 0x24
 80082bc:	4618      	mov	r0, r3
 80082be:	f001 fa4d 	bl	800975c <xTaskRemoveFromEventList>
 80082c2:	4603      	mov	r3, r0
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d013      	beq.n	80082f0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80082c8:	4b3f      	ldr	r3, [pc, #252]	; (80083c8 <xQueueGenericSend+0x1f8>)
 80082ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082ce:	601a      	str	r2, [r3, #0]
 80082d0:	f3bf 8f4f 	dsb	sy
 80082d4:	f3bf 8f6f 	isb	sy
 80082d8:	e00a      	b.n	80082f0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80082da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d007      	beq.n	80082f0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80082e0:	4b39      	ldr	r3, [pc, #228]	; (80083c8 <xQueueGenericSend+0x1f8>)
 80082e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082e6:	601a      	str	r2, [r3, #0]
 80082e8:	f3bf 8f4f 	dsb	sy
 80082ec:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80082f0:	f002 fb38 	bl	800a964 <vPortExitCritical>
				return pdPASS;
 80082f4:	2301      	movs	r3, #1
 80082f6:	e063      	b.n	80083c0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d103      	bne.n	8008306 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80082fe:	f002 fb31 	bl	800a964 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008302:	2300      	movs	r3, #0
 8008304:	e05c      	b.n	80083c0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008306:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008308:	2b00      	cmp	r3, #0
 800830a:	d106      	bne.n	800831a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800830c:	f107 0314 	add.w	r3, r7, #20
 8008310:	4618      	mov	r0, r3
 8008312:	f001 fa87 	bl	8009824 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008316:	2301      	movs	r3, #1
 8008318:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800831a:	f002 fb23 	bl	800a964 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800831e:	f000 fff9 	bl	8009314 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008322:	f002 faef 	bl	800a904 <vPortEnterCritical>
 8008326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008328:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800832c:	b25b      	sxtb	r3, r3
 800832e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008332:	d103      	bne.n	800833c <xQueueGenericSend+0x16c>
 8008334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008336:	2200      	movs	r2, #0
 8008338:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800833c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800833e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008342:	b25b      	sxtb	r3, r3
 8008344:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008348:	d103      	bne.n	8008352 <xQueueGenericSend+0x182>
 800834a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800834c:	2200      	movs	r2, #0
 800834e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008352:	f002 fb07 	bl	800a964 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008356:	1d3a      	adds	r2, r7, #4
 8008358:	f107 0314 	add.w	r3, r7, #20
 800835c:	4611      	mov	r1, r2
 800835e:	4618      	mov	r0, r3
 8008360:	f001 fa76 	bl	8009850 <xTaskCheckForTimeOut>
 8008364:	4603      	mov	r3, r0
 8008366:	2b00      	cmp	r3, #0
 8008368:	d124      	bne.n	80083b4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800836a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800836c:	f000 fcf5 	bl	8008d5a <prvIsQueueFull>
 8008370:	4603      	mov	r3, r0
 8008372:	2b00      	cmp	r3, #0
 8008374:	d018      	beq.n	80083a8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008378:	3310      	adds	r3, #16
 800837a:	687a      	ldr	r2, [r7, #4]
 800837c:	4611      	mov	r1, r2
 800837e:	4618      	mov	r0, r3
 8008380:	f001 f99c 	bl	80096bc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008384:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008386:	f000 fc80 	bl	8008c8a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800838a:	f000 ffd1 	bl	8009330 <xTaskResumeAll>
 800838e:	4603      	mov	r3, r0
 8008390:	2b00      	cmp	r3, #0
 8008392:	f47f af7c 	bne.w	800828e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8008396:	4b0c      	ldr	r3, [pc, #48]	; (80083c8 <xQueueGenericSend+0x1f8>)
 8008398:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800839c:	601a      	str	r2, [r3, #0]
 800839e:	f3bf 8f4f 	dsb	sy
 80083a2:	f3bf 8f6f 	isb	sy
 80083a6:	e772      	b.n	800828e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80083a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80083aa:	f000 fc6e 	bl	8008c8a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80083ae:	f000 ffbf 	bl	8009330 <xTaskResumeAll>
 80083b2:	e76c      	b.n	800828e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80083b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80083b6:	f000 fc68 	bl	8008c8a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80083ba:	f000 ffb9 	bl	8009330 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80083be:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80083c0:	4618      	mov	r0, r3
 80083c2:	3738      	adds	r7, #56	; 0x38
 80083c4:	46bd      	mov	sp, r7
 80083c6:	bd80      	pop	{r7, pc}
 80083c8:	e000ed04 	.word	0xe000ed04

080083cc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b090      	sub	sp, #64	; 0x40
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	60f8      	str	r0, [r7, #12]
 80083d4:	60b9      	str	r1, [r7, #8]
 80083d6:	607a      	str	r2, [r7, #4]
 80083d8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80083de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d10a      	bne.n	80083fa <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80083e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083e8:	f383 8811 	msr	BASEPRI, r3
 80083ec:	f3bf 8f6f 	isb	sy
 80083f0:	f3bf 8f4f 	dsb	sy
 80083f4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80083f6:	bf00      	nop
 80083f8:	e7fe      	b.n	80083f8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80083fa:	68bb      	ldr	r3, [r7, #8]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d103      	bne.n	8008408 <xQueueGenericSendFromISR+0x3c>
 8008400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008404:	2b00      	cmp	r3, #0
 8008406:	d101      	bne.n	800840c <xQueueGenericSendFromISR+0x40>
 8008408:	2301      	movs	r3, #1
 800840a:	e000      	b.n	800840e <xQueueGenericSendFromISR+0x42>
 800840c:	2300      	movs	r3, #0
 800840e:	2b00      	cmp	r3, #0
 8008410:	d10a      	bne.n	8008428 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8008412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008416:	f383 8811 	msr	BASEPRI, r3
 800841a:	f3bf 8f6f 	isb	sy
 800841e:	f3bf 8f4f 	dsb	sy
 8008422:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008424:	bf00      	nop
 8008426:	e7fe      	b.n	8008426 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008428:	683b      	ldr	r3, [r7, #0]
 800842a:	2b02      	cmp	r3, #2
 800842c:	d103      	bne.n	8008436 <xQueueGenericSendFromISR+0x6a>
 800842e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008430:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008432:	2b01      	cmp	r3, #1
 8008434:	d101      	bne.n	800843a <xQueueGenericSendFromISR+0x6e>
 8008436:	2301      	movs	r3, #1
 8008438:	e000      	b.n	800843c <xQueueGenericSendFromISR+0x70>
 800843a:	2300      	movs	r3, #0
 800843c:	2b00      	cmp	r3, #0
 800843e:	d10a      	bne.n	8008456 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008444:	f383 8811 	msr	BASEPRI, r3
 8008448:	f3bf 8f6f 	isb	sy
 800844c:	f3bf 8f4f 	dsb	sy
 8008450:	623b      	str	r3, [r7, #32]
}
 8008452:	bf00      	nop
 8008454:	e7fe      	b.n	8008454 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008456:	f002 fb37 	bl	800aac8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800845a:	f3ef 8211 	mrs	r2, BASEPRI
 800845e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008462:	f383 8811 	msr	BASEPRI, r3
 8008466:	f3bf 8f6f 	isb	sy
 800846a:	f3bf 8f4f 	dsb	sy
 800846e:	61fa      	str	r2, [r7, #28]
 8008470:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008472:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008474:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008478:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800847a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800847c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800847e:	429a      	cmp	r2, r3
 8008480:	d302      	bcc.n	8008488 <xQueueGenericSendFromISR+0xbc>
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	2b02      	cmp	r3, #2
 8008486:	d12f      	bne.n	80084e8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800848a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800848e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008496:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008498:	683a      	ldr	r2, [r7, #0]
 800849a:	68b9      	ldr	r1, [r7, #8]
 800849c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800849e:	f000 fb64 	bl	8008b6a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80084a2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80084a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084aa:	d112      	bne.n	80084d2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80084ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d016      	beq.n	80084e2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80084b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084b6:	3324      	adds	r3, #36	; 0x24
 80084b8:	4618      	mov	r0, r3
 80084ba:	f001 f94f 	bl	800975c <xTaskRemoveFromEventList>
 80084be:	4603      	mov	r3, r0
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d00e      	beq.n	80084e2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d00b      	beq.n	80084e2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	2201      	movs	r2, #1
 80084ce:	601a      	str	r2, [r3, #0]
 80084d0:	e007      	b.n	80084e2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80084d2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80084d6:	3301      	adds	r3, #1
 80084d8:	b2db      	uxtb	r3, r3
 80084da:	b25a      	sxtb	r2, r3
 80084dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80084e2:	2301      	movs	r3, #1
 80084e4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80084e6:	e001      	b.n	80084ec <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80084e8:	2300      	movs	r3, #0
 80084ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80084ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084ee:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80084f0:	697b      	ldr	r3, [r7, #20]
 80084f2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80084f6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80084f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80084fa:	4618      	mov	r0, r3
 80084fc:	3740      	adds	r7, #64	; 0x40
 80084fe:	46bd      	mov	sp, r7
 8008500:	bd80      	pop	{r7, pc}

08008502 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008502:	b580      	push	{r7, lr}
 8008504:	b08e      	sub	sp, #56	; 0x38
 8008506:	af00      	add	r7, sp, #0
 8008508:	6078      	str	r0, [r7, #4]
 800850a:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8008510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008512:	2b00      	cmp	r3, #0
 8008514:	d10a      	bne.n	800852c <xQueueGiveFromISR+0x2a>
	__asm volatile
 8008516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800851a:	f383 8811 	msr	BASEPRI, r3
 800851e:	f3bf 8f6f 	isb	sy
 8008522:	f3bf 8f4f 	dsb	sy
 8008526:	623b      	str	r3, [r7, #32]
}
 8008528:	bf00      	nop
 800852a:	e7fe      	b.n	800852a <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800852c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800852e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008530:	2b00      	cmp	r3, #0
 8008532:	d00a      	beq.n	800854a <xQueueGiveFromISR+0x48>
	__asm volatile
 8008534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008538:	f383 8811 	msr	BASEPRI, r3
 800853c:	f3bf 8f6f 	isb	sy
 8008540:	f3bf 8f4f 	dsb	sy
 8008544:	61fb      	str	r3, [r7, #28]
}
 8008546:	bf00      	nop
 8008548:	e7fe      	b.n	8008548 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800854a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	2b00      	cmp	r3, #0
 8008550:	d103      	bne.n	800855a <xQueueGiveFromISR+0x58>
 8008552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008554:	689b      	ldr	r3, [r3, #8]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d101      	bne.n	800855e <xQueueGiveFromISR+0x5c>
 800855a:	2301      	movs	r3, #1
 800855c:	e000      	b.n	8008560 <xQueueGiveFromISR+0x5e>
 800855e:	2300      	movs	r3, #0
 8008560:	2b00      	cmp	r3, #0
 8008562:	d10a      	bne.n	800857a <xQueueGiveFromISR+0x78>
	__asm volatile
 8008564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008568:	f383 8811 	msr	BASEPRI, r3
 800856c:	f3bf 8f6f 	isb	sy
 8008570:	f3bf 8f4f 	dsb	sy
 8008574:	61bb      	str	r3, [r7, #24]
}
 8008576:	bf00      	nop
 8008578:	e7fe      	b.n	8008578 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800857a:	f002 faa5 	bl	800aac8 <vPortValidateInterruptPriority>
	__asm volatile
 800857e:	f3ef 8211 	mrs	r2, BASEPRI
 8008582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008586:	f383 8811 	msr	BASEPRI, r3
 800858a:	f3bf 8f6f 	isb	sy
 800858e:	f3bf 8f4f 	dsb	sy
 8008592:	617a      	str	r2, [r7, #20]
 8008594:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8008596:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008598:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800859a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800859c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800859e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80085a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80085a6:	429a      	cmp	r2, r3
 80085a8:	d22b      	bcs.n	8008602 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80085aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80085b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80085b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085b6:	1c5a      	adds	r2, r3, #1
 80085b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085ba:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80085bc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80085c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085c4:	d112      	bne.n	80085ec <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80085c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d016      	beq.n	80085fc <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80085ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085d0:	3324      	adds	r3, #36	; 0x24
 80085d2:	4618      	mov	r0, r3
 80085d4:	f001 f8c2 	bl	800975c <xTaskRemoveFromEventList>
 80085d8:	4603      	mov	r3, r0
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d00e      	beq.n	80085fc <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80085de:	683b      	ldr	r3, [r7, #0]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d00b      	beq.n	80085fc <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	2201      	movs	r2, #1
 80085e8:	601a      	str	r2, [r3, #0]
 80085ea:	e007      	b.n	80085fc <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80085ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80085f0:	3301      	adds	r3, #1
 80085f2:	b2db      	uxtb	r3, r3
 80085f4:	b25a      	sxtb	r2, r3
 80085f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80085fc:	2301      	movs	r3, #1
 80085fe:	637b      	str	r3, [r7, #52]	; 0x34
 8008600:	e001      	b.n	8008606 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008602:	2300      	movs	r3, #0
 8008604:	637b      	str	r3, [r7, #52]	; 0x34
 8008606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008608:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	f383 8811 	msr	BASEPRI, r3
}
 8008610:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008612:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008614:	4618      	mov	r0, r3
 8008616:	3738      	adds	r7, #56	; 0x38
 8008618:	46bd      	mov	sp, r7
 800861a:	bd80      	pop	{r7, pc}

0800861c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800861c:	b580      	push	{r7, lr}
 800861e:	b08c      	sub	sp, #48	; 0x30
 8008620:	af00      	add	r7, sp, #0
 8008622:	60f8      	str	r0, [r7, #12]
 8008624:	60b9      	str	r1, [r7, #8]
 8008626:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008628:	2300      	movs	r3, #0
 800862a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008632:	2b00      	cmp	r3, #0
 8008634:	d10a      	bne.n	800864c <xQueueReceive+0x30>
	__asm volatile
 8008636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800863a:	f383 8811 	msr	BASEPRI, r3
 800863e:	f3bf 8f6f 	isb	sy
 8008642:	f3bf 8f4f 	dsb	sy
 8008646:	623b      	str	r3, [r7, #32]
}
 8008648:	bf00      	nop
 800864a:	e7fe      	b.n	800864a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800864c:	68bb      	ldr	r3, [r7, #8]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d103      	bne.n	800865a <xQueueReceive+0x3e>
 8008652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008656:	2b00      	cmp	r3, #0
 8008658:	d101      	bne.n	800865e <xQueueReceive+0x42>
 800865a:	2301      	movs	r3, #1
 800865c:	e000      	b.n	8008660 <xQueueReceive+0x44>
 800865e:	2300      	movs	r3, #0
 8008660:	2b00      	cmp	r3, #0
 8008662:	d10a      	bne.n	800867a <xQueueReceive+0x5e>
	__asm volatile
 8008664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008668:	f383 8811 	msr	BASEPRI, r3
 800866c:	f3bf 8f6f 	isb	sy
 8008670:	f3bf 8f4f 	dsb	sy
 8008674:	61fb      	str	r3, [r7, #28]
}
 8008676:	bf00      	nop
 8008678:	e7fe      	b.n	8008678 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800867a:	f001 fa2d 	bl	8009ad8 <xTaskGetSchedulerState>
 800867e:	4603      	mov	r3, r0
 8008680:	2b00      	cmp	r3, #0
 8008682:	d102      	bne.n	800868a <xQueueReceive+0x6e>
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d101      	bne.n	800868e <xQueueReceive+0x72>
 800868a:	2301      	movs	r3, #1
 800868c:	e000      	b.n	8008690 <xQueueReceive+0x74>
 800868e:	2300      	movs	r3, #0
 8008690:	2b00      	cmp	r3, #0
 8008692:	d10a      	bne.n	80086aa <xQueueReceive+0x8e>
	__asm volatile
 8008694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008698:	f383 8811 	msr	BASEPRI, r3
 800869c:	f3bf 8f6f 	isb	sy
 80086a0:	f3bf 8f4f 	dsb	sy
 80086a4:	61bb      	str	r3, [r7, #24]
}
 80086a6:	bf00      	nop
 80086a8:	e7fe      	b.n	80086a8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80086aa:	f002 f92b 	bl	800a904 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80086ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086b2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80086b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d01f      	beq.n	80086fa <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80086ba:	68b9      	ldr	r1, [r7, #8]
 80086bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80086be:	f000 fabe 	bl	8008c3e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80086c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086c4:	1e5a      	subs	r2, r3, #1
 80086c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086c8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80086ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086cc:	691b      	ldr	r3, [r3, #16]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d00f      	beq.n	80086f2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80086d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086d4:	3310      	adds	r3, #16
 80086d6:	4618      	mov	r0, r3
 80086d8:	f001 f840 	bl	800975c <xTaskRemoveFromEventList>
 80086dc:	4603      	mov	r3, r0
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d007      	beq.n	80086f2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80086e2:	4b3d      	ldr	r3, [pc, #244]	; (80087d8 <xQueueReceive+0x1bc>)
 80086e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086e8:	601a      	str	r2, [r3, #0]
 80086ea:	f3bf 8f4f 	dsb	sy
 80086ee:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80086f2:	f002 f937 	bl	800a964 <vPortExitCritical>
				return pdPASS;
 80086f6:	2301      	movs	r3, #1
 80086f8:	e069      	b.n	80087ce <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d103      	bne.n	8008708 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008700:	f002 f930 	bl	800a964 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008704:	2300      	movs	r3, #0
 8008706:	e062      	b.n	80087ce <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800870a:	2b00      	cmp	r3, #0
 800870c:	d106      	bne.n	800871c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800870e:	f107 0310 	add.w	r3, r7, #16
 8008712:	4618      	mov	r0, r3
 8008714:	f001 f886 	bl	8009824 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008718:	2301      	movs	r3, #1
 800871a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800871c:	f002 f922 	bl	800a964 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008720:	f000 fdf8 	bl	8009314 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008724:	f002 f8ee 	bl	800a904 <vPortEnterCritical>
 8008728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800872a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800872e:	b25b      	sxtb	r3, r3
 8008730:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008734:	d103      	bne.n	800873e <xQueueReceive+0x122>
 8008736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008738:	2200      	movs	r2, #0
 800873a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800873e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008740:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008744:	b25b      	sxtb	r3, r3
 8008746:	f1b3 3fff 	cmp.w	r3, #4294967295
 800874a:	d103      	bne.n	8008754 <xQueueReceive+0x138>
 800874c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800874e:	2200      	movs	r2, #0
 8008750:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008754:	f002 f906 	bl	800a964 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008758:	1d3a      	adds	r2, r7, #4
 800875a:	f107 0310 	add.w	r3, r7, #16
 800875e:	4611      	mov	r1, r2
 8008760:	4618      	mov	r0, r3
 8008762:	f001 f875 	bl	8009850 <xTaskCheckForTimeOut>
 8008766:	4603      	mov	r3, r0
 8008768:	2b00      	cmp	r3, #0
 800876a:	d123      	bne.n	80087b4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800876c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800876e:	f000 fade 	bl	8008d2e <prvIsQueueEmpty>
 8008772:	4603      	mov	r3, r0
 8008774:	2b00      	cmp	r3, #0
 8008776:	d017      	beq.n	80087a8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800877a:	3324      	adds	r3, #36	; 0x24
 800877c:	687a      	ldr	r2, [r7, #4]
 800877e:	4611      	mov	r1, r2
 8008780:	4618      	mov	r0, r3
 8008782:	f000 ff9b 	bl	80096bc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008786:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008788:	f000 fa7f 	bl	8008c8a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800878c:	f000 fdd0 	bl	8009330 <xTaskResumeAll>
 8008790:	4603      	mov	r3, r0
 8008792:	2b00      	cmp	r3, #0
 8008794:	d189      	bne.n	80086aa <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8008796:	4b10      	ldr	r3, [pc, #64]	; (80087d8 <xQueueReceive+0x1bc>)
 8008798:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800879c:	601a      	str	r2, [r3, #0]
 800879e:	f3bf 8f4f 	dsb	sy
 80087a2:	f3bf 8f6f 	isb	sy
 80087a6:	e780      	b.n	80086aa <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80087a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80087aa:	f000 fa6e 	bl	8008c8a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80087ae:	f000 fdbf 	bl	8009330 <xTaskResumeAll>
 80087b2:	e77a      	b.n	80086aa <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80087b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80087b6:	f000 fa68 	bl	8008c8a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80087ba:	f000 fdb9 	bl	8009330 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80087be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80087c0:	f000 fab5 	bl	8008d2e <prvIsQueueEmpty>
 80087c4:	4603      	mov	r3, r0
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	f43f af6f 	beq.w	80086aa <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80087cc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80087ce:	4618      	mov	r0, r3
 80087d0:	3730      	adds	r7, #48	; 0x30
 80087d2:	46bd      	mov	sp, r7
 80087d4:	bd80      	pop	{r7, pc}
 80087d6:	bf00      	nop
 80087d8:	e000ed04 	.word	0xe000ed04

080087dc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b08e      	sub	sp, #56	; 0x38
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
 80087e4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80087e6:	2300      	movs	r3, #0
 80087e8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80087ee:	2300      	movs	r3, #0
 80087f0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80087f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d10a      	bne.n	800880e <xQueueSemaphoreTake+0x32>
	__asm volatile
 80087f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087fc:	f383 8811 	msr	BASEPRI, r3
 8008800:	f3bf 8f6f 	isb	sy
 8008804:	f3bf 8f4f 	dsb	sy
 8008808:	623b      	str	r3, [r7, #32]
}
 800880a:	bf00      	nop
 800880c:	e7fe      	b.n	800880c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800880e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008812:	2b00      	cmp	r3, #0
 8008814:	d00a      	beq.n	800882c <xQueueSemaphoreTake+0x50>
	__asm volatile
 8008816:	f04f 0350 	mov.w	r3, #80	; 0x50
 800881a:	f383 8811 	msr	BASEPRI, r3
 800881e:	f3bf 8f6f 	isb	sy
 8008822:	f3bf 8f4f 	dsb	sy
 8008826:	61fb      	str	r3, [r7, #28]
}
 8008828:	bf00      	nop
 800882a:	e7fe      	b.n	800882a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800882c:	f001 f954 	bl	8009ad8 <xTaskGetSchedulerState>
 8008830:	4603      	mov	r3, r0
 8008832:	2b00      	cmp	r3, #0
 8008834:	d102      	bne.n	800883c <xQueueSemaphoreTake+0x60>
 8008836:	683b      	ldr	r3, [r7, #0]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d101      	bne.n	8008840 <xQueueSemaphoreTake+0x64>
 800883c:	2301      	movs	r3, #1
 800883e:	e000      	b.n	8008842 <xQueueSemaphoreTake+0x66>
 8008840:	2300      	movs	r3, #0
 8008842:	2b00      	cmp	r3, #0
 8008844:	d10a      	bne.n	800885c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8008846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800884a:	f383 8811 	msr	BASEPRI, r3
 800884e:	f3bf 8f6f 	isb	sy
 8008852:	f3bf 8f4f 	dsb	sy
 8008856:	61bb      	str	r3, [r7, #24]
}
 8008858:	bf00      	nop
 800885a:	e7fe      	b.n	800885a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800885c:	f002 f852 	bl	800a904 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008864:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008868:	2b00      	cmp	r3, #0
 800886a:	d024      	beq.n	80088b6 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800886c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800886e:	1e5a      	subs	r2, r3, #1
 8008870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008872:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d104      	bne.n	8008886 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800887c:	f001 faa2 	bl	8009dc4 <pvTaskIncrementMutexHeldCount>
 8008880:	4602      	mov	r2, r0
 8008882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008884:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008888:	691b      	ldr	r3, [r3, #16]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d00f      	beq.n	80088ae <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800888e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008890:	3310      	adds	r3, #16
 8008892:	4618      	mov	r0, r3
 8008894:	f000 ff62 	bl	800975c <xTaskRemoveFromEventList>
 8008898:	4603      	mov	r3, r0
 800889a:	2b00      	cmp	r3, #0
 800889c:	d007      	beq.n	80088ae <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800889e:	4b54      	ldr	r3, [pc, #336]	; (80089f0 <xQueueSemaphoreTake+0x214>)
 80088a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80088a4:	601a      	str	r2, [r3, #0]
 80088a6:	f3bf 8f4f 	dsb	sy
 80088aa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80088ae:	f002 f859 	bl	800a964 <vPortExitCritical>
				return pdPASS;
 80088b2:	2301      	movs	r3, #1
 80088b4:	e097      	b.n	80089e6 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80088b6:	683b      	ldr	r3, [r7, #0]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d111      	bne.n	80088e0 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80088bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d00a      	beq.n	80088d8 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80088c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088c6:	f383 8811 	msr	BASEPRI, r3
 80088ca:	f3bf 8f6f 	isb	sy
 80088ce:	f3bf 8f4f 	dsb	sy
 80088d2:	617b      	str	r3, [r7, #20]
}
 80088d4:	bf00      	nop
 80088d6:	e7fe      	b.n	80088d6 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80088d8:	f002 f844 	bl	800a964 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80088dc:	2300      	movs	r3, #0
 80088de:	e082      	b.n	80089e6 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80088e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d106      	bne.n	80088f4 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80088e6:	f107 030c 	add.w	r3, r7, #12
 80088ea:	4618      	mov	r0, r3
 80088ec:	f000 ff9a 	bl	8009824 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80088f0:	2301      	movs	r3, #1
 80088f2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80088f4:	f002 f836 	bl	800a964 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80088f8:	f000 fd0c 	bl	8009314 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80088fc:	f002 f802 	bl	800a904 <vPortEnterCritical>
 8008900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008902:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008906:	b25b      	sxtb	r3, r3
 8008908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800890c:	d103      	bne.n	8008916 <xQueueSemaphoreTake+0x13a>
 800890e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008910:	2200      	movs	r2, #0
 8008912:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008918:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800891c:	b25b      	sxtb	r3, r3
 800891e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008922:	d103      	bne.n	800892c <xQueueSemaphoreTake+0x150>
 8008924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008926:	2200      	movs	r2, #0
 8008928:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800892c:	f002 f81a 	bl	800a964 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008930:	463a      	mov	r2, r7
 8008932:	f107 030c 	add.w	r3, r7, #12
 8008936:	4611      	mov	r1, r2
 8008938:	4618      	mov	r0, r3
 800893a:	f000 ff89 	bl	8009850 <xTaskCheckForTimeOut>
 800893e:	4603      	mov	r3, r0
 8008940:	2b00      	cmp	r3, #0
 8008942:	d132      	bne.n	80089aa <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008944:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008946:	f000 f9f2 	bl	8008d2e <prvIsQueueEmpty>
 800894a:	4603      	mov	r3, r0
 800894c:	2b00      	cmp	r3, #0
 800894e:	d026      	beq.n	800899e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d109      	bne.n	800896c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8008958:	f001 ffd4 	bl	800a904 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800895c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800895e:	689b      	ldr	r3, [r3, #8]
 8008960:	4618      	mov	r0, r3
 8008962:	f001 f8d7 	bl	8009b14 <xTaskPriorityInherit>
 8008966:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8008968:	f001 fffc 	bl	800a964 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800896c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800896e:	3324      	adds	r3, #36	; 0x24
 8008970:	683a      	ldr	r2, [r7, #0]
 8008972:	4611      	mov	r1, r2
 8008974:	4618      	mov	r0, r3
 8008976:	f000 fea1 	bl	80096bc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800897a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800897c:	f000 f985 	bl	8008c8a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008980:	f000 fcd6 	bl	8009330 <xTaskResumeAll>
 8008984:	4603      	mov	r3, r0
 8008986:	2b00      	cmp	r3, #0
 8008988:	f47f af68 	bne.w	800885c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800898c:	4b18      	ldr	r3, [pc, #96]	; (80089f0 <xQueueSemaphoreTake+0x214>)
 800898e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008992:	601a      	str	r2, [r3, #0]
 8008994:	f3bf 8f4f 	dsb	sy
 8008998:	f3bf 8f6f 	isb	sy
 800899c:	e75e      	b.n	800885c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800899e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80089a0:	f000 f973 	bl	8008c8a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80089a4:	f000 fcc4 	bl	8009330 <xTaskResumeAll>
 80089a8:	e758      	b.n	800885c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80089aa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80089ac:	f000 f96d 	bl	8008c8a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80089b0:	f000 fcbe 	bl	8009330 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80089b4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80089b6:	f000 f9ba 	bl	8008d2e <prvIsQueueEmpty>
 80089ba:	4603      	mov	r3, r0
 80089bc:	2b00      	cmp	r3, #0
 80089be:	f43f af4d 	beq.w	800885c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80089c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d00d      	beq.n	80089e4 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80089c8:	f001 ff9c 	bl	800a904 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80089cc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80089ce:	f000 f8b4 	bl	8008b3a <prvGetDisinheritPriorityAfterTimeout>
 80089d2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80089d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089d6:	689b      	ldr	r3, [r3, #8]
 80089d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80089da:	4618      	mov	r0, r3
 80089dc:	f001 f970 	bl	8009cc0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80089e0:	f001 ffc0 	bl	800a964 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80089e4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80089e6:	4618      	mov	r0, r3
 80089e8:	3738      	adds	r7, #56	; 0x38
 80089ea:	46bd      	mov	sp, r7
 80089ec:	bd80      	pop	{r7, pc}
 80089ee:	bf00      	nop
 80089f0:	e000ed04 	.word	0xe000ed04

080089f4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b08e      	sub	sp, #56	; 0x38
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	60f8      	str	r0, [r7, #12]
 80089fc:	60b9      	str	r1, [r7, #8]
 80089fe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d10a      	bne.n	8008a20 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8008a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a0e:	f383 8811 	msr	BASEPRI, r3
 8008a12:	f3bf 8f6f 	isb	sy
 8008a16:	f3bf 8f4f 	dsb	sy
 8008a1a:	623b      	str	r3, [r7, #32]
}
 8008a1c:	bf00      	nop
 8008a1e:	e7fe      	b.n	8008a1e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008a20:	68bb      	ldr	r3, [r7, #8]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d103      	bne.n	8008a2e <xQueueReceiveFromISR+0x3a>
 8008a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d101      	bne.n	8008a32 <xQueueReceiveFromISR+0x3e>
 8008a2e:	2301      	movs	r3, #1
 8008a30:	e000      	b.n	8008a34 <xQueueReceiveFromISR+0x40>
 8008a32:	2300      	movs	r3, #0
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d10a      	bne.n	8008a4e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8008a38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a3c:	f383 8811 	msr	BASEPRI, r3
 8008a40:	f3bf 8f6f 	isb	sy
 8008a44:	f3bf 8f4f 	dsb	sy
 8008a48:	61fb      	str	r3, [r7, #28]
}
 8008a4a:	bf00      	nop
 8008a4c:	e7fe      	b.n	8008a4c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008a4e:	f002 f83b 	bl	800aac8 <vPortValidateInterruptPriority>
	__asm volatile
 8008a52:	f3ef 8211 	mrs	r2, BASEPRI
 8008a56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a5a:	f383 8811 	msr	BASEPRI, r3
 8008a5e:	f3bf 8f6f 	isb	sy
 8008a62:	f3bf 8f4f 	dsb	sy
 8008a66:	61ba      	str	r2, [r7, #24]
 8008a68:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008a6a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a72:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d02f      	beq.n	8008ada <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8008a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a7c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008a80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008a84:	68b9      	ldr	r1, [r7, #8]
 8008a86:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008a88:	f000 f8d9 	bl	8008c3e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a8e:	1e5a      	subs	r2, r3, #1
 8008a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a92:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8008a94:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008a98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a9c:	d112      	bne.n	8008ac4 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aa0:	691b      	ldr	r3, [r3, #16]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d016      	beq.n	8008ad4 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aa8:	3310      	adds	r3, #16
 8008aaa:	4618      	mov	r0, r3
 8008aac:	f000 fe56 	bl	800975c <xTaskRemoveFromEventList>
 8008ab0:	4603      	mov	r3, r0
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d00e      	beq.n	8008ad4 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d00b      	beq.n	8008ad4 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2201      	movs	r2, #1
 8008ac0:	601a      	str	r2, [r3, #0]
 8008ac2:	e007      	b.n	8008ad4 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008ac4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008ac8:	3301      	adds	r3, #1
 8008aca:	b2db      	uxtb	r3, r3
 8008acc:	b25a      	sxtb	r2, r3
 8008ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ad0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8008ad4:	2301      	movs	r3, #1
 8008ad6:	637b      	str	r3, [r7, #52]	; 0x34
 8008ad8:	e001      	b.n	8008ade <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8008ada:	2300      	movs	r3, #0
 8008adc:	637b      	str	r3, [r7, #52]	; 0x34
 8008ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ae0:	613b      	str	r3, [r7, #16]
	__asm volatile
 8008ae2:	693b      	ldr	r3, [r7, #16]
 8008ae4:	f383 8811 	msr	BASEPRI, r3
}
 8008ae8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008aea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008aec:	4618      	mov	r0, r3
 8008aee:	3738      	adds	r7, #56	; 0x38
 8008af0:	46bd      	mov	sp, r7
 8008af2:	bd80      	pop	{r7, pc}

08008af4 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b084      	sub	sp, #16
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d10a      	bne.n	8008b1c <vQueueDelete+0x28>
	__asm volatile
 8008b06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b0a:	f383 8811 	msr	BASEPRI, r3
 8008b0e:	f3bf 8f6f 	isb	sy
 8008b12:	f3bf 8f4f 	dsb	sy
 8008b16:	60bb      	str	r3, [r7, #8]
}
 8008b18:	bf00      	nop
 8008b1a:	e7fe      	b.n	8008b1a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8008b1c:	68f8      	ldr	r0, [r7, #12]
 8008b1e:	f000 f95f 	bl	8008de0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d102      	bne.n	8008b32 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8008b2c:	68f8      	ldr	r0, [r7, #12]
 8008b2e:	f002 f8d7 	bl	800ace0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8008b32:	bf00      	nop
 8008b34:	3710      	adds	r7, #16
 8008b36:	46bd      	mov	sp, r7
 8008b38:	bd80      	pop	{r7, pc}

08008b3a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008b3a:	b480      	push	{r7}
 8008b3c:	b085      	sub	sp, #20
 8008b3e:	af00      	add	r7, sp, #0
 8008b40:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d006      	beq.n	8008b58 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8008b54:	60fb      	str	r3, [r7, #12]
 8008b56:	e001      	b.n	8008b5c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008b58:	2300      	movs	r3, #0
 8008b5a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008b5c:	68fb      	ldr	r3, [r7, #12]
	}
 8008b5e:	4618      	mov	r0, r3
 8008b60:	3714      	adds	r7, #20
 8008b62:	46bd      	mov	sp, r7
 8008b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b68:	4770      	bx	lr

08008b6a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008b6a:	b580      	push	{r7, lr}
 8008b6c:	b086      	sub	sp, #24
 8008b6e:	af00      	add	r7, sp, #0
 8008b70:	60f8      	str	r0, [r7, #12]
 8008b72:	60b9      	str	r1, [r7, #8]
 8008b74:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008b76:	2300      	movs	r3, #0
 8008b78:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b7e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d10d      	bne.n	8008ba4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d14d      	bne.n	8008c2c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	689b      	ldr	r3, [r3, #8]
 8008b94:	4618      	mov	r0, r3
 8008b96:	f001 f825 	bl	8009be4 <xTaskPriorityDisinherit>
 8008b9a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	609a      	str	r2, [r3, #8]
 8008ba2:	e043      	b.n	8008c2c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d119      	bne.n	8008bde <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	6858      	ldr	r0, [r3, #4]
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bb2:	461a      	mov	r2, r3
 8008bb4:	68b9      	ldr	r1, [r7, #8]
 8008bb6:	f002 ffad 	bl	800bb14 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	685a      	ldr	r2, [r3, #4]
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bc2:	441a      	add	r2, r3
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	685a      	ldr	r2, [r3, #4]
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	689b      	ldr	r3, [r3, #8]
 8008bd0:	429a      	cmp	r2, r3
 8008bd2:	d32b      	bcc.n	8008c2c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	681a      	ldr	r2, [r3, #0]
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	605a      	str	r2, [r3, #4]
 8008bdc:	e026      	b.n	8008c2c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	68d8      	ldr	r0, [r3, #12]
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008be6:	461a      	mov	r2, r3
 8008be8:	68b9      	ldr	r1, [r7, #8]
 8008bea:	f002 ff93 	bl	800bb14 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	68da      	ldr	r2, [r3, #12]
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bf6:	425b      	negs	r3, r3
 8008bf8:	441a      	add	r2, r3
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	68da      	ldr	r2, [r3, #12]
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	429a      	cmp	r2, r3
 8008c08:	d207      	bcs.n	8008c1a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	689a      	ldr	r2, [r3, #8]
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c12:	425b      	negs	r3, r3
 8008c14:	441a      	add	r2, r3
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	2b02      	cmp	r3, #2
 8008c1e:	d105      	bne.n	8008c2c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008c20:	693b      	ldr	r3, [r7, #16]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d002      	beq.n	8008c2c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008c26:	693b      	ldr	r3, [r7, #16]
 8008c28:	3b01      	subs	r3, #1
 8008c2a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008c2c:	693b      	ldr	r3, [r7, #16]
 8008c2e:	1c5a      	adds	r2, r3, #1
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008c34:	697b      	ldr	r3, [r7, #20]
}
 8008c36:	4618      	mov	r0, r3
 8008c38:	3718      	adds	r7, #24
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	bd80      	pop	{r7, pc}

08008c3e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008c3e:	b580      	push	{r7, lr}
 8008c40:	b082      	sub	sp, #8
 8008c42:	af00      	add	r7, sp, #0
 8008c44:	6078      	str	r0, [r7, #4]
 8008c46:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d018      	beq.n	8008c82 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	68da      	ldr	r2, [r3, #12]
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c58:	441a      	add	r2, r3
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	68da      	ldr	r2, [r3, #12]
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	689b      	ldr	r3, [r3, #8]
 8008c66:	429a      	cmp	r2, r3
 8008c68:	d303      	bcc.n	8008c72 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681a      	ldr	r2, [r3, #0]
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	68d9      	ldr	r1, [r3, #12]
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c7a:	461a      	mov	r2, r3
 8008c7c:	6838      	ldr	r0, [r7, #0]
 8008c7e:	f002 ff49 	bl	800bb14 <memcpy>
	}
}
 8008c82:	bf00      	nop
 8008c84:	3708      	adds	r7, #8
 8008c86:	46bd      	mov	sp, r7
 8008c88:	bd80      	pop	{r7, pc}

08008c8a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008c8a:	b580      	push	{r7, lr}
 8008c8c:	b084      	sub	sp, #16
 8008c8e:	af00      	add	r7, sp, #0
 8008c90:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008c92:	f001 fe37 	bl	800a904 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008c9c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008c9e:	e011      	b.n	8008cc4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d012      	beq.n	8008cce <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	3324      	adds	r3, #36	; 0x24
 8008cac:	4618      	mov	r0, r3
 8008cae:	f000 fd55 	bl	800975c <xTaskRemoveFromEventList>
 8008cb2:	4603      	mov	r3, r0
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d001      	beq.n	8008cbc <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008cb8:	f000 fe2c 	bl	8009914 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008cbc:	7bfb      	ldrb	r3, [r7, #15]
 8008cbe:	3b01      	subs	r3, #1
 8008cc0:	b2db      	uxtb	r3, r3
 8008cc2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008cc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	dce9      	bgt.n	8008ca0 <prvUnlockQueue+0x16>
 8008ccc:	e000      	b.n	8008cd0 <prvUnlockQueue+0x46>
					break;
 8008cce:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	22ff      	movs	r2, #255	; 0xff
 8008cd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008cd8:	f001 fe44 	bl	800a964 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008cdc:	f001 fe12 	bl	800a904 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008ce6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008ce8:	e011      	b.n	8008d0e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	691b      	ldr	r3, [r3, #16]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d012      	beq.n	8008d18 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	3310      	adds	r3, #16
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	f000 fd30 	bl	800975c <xTaskRemoveFromEventList>
 8008cfc:	4603      	mov	r3, r0
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d001      	beq.n	8008d06 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008d02:	f000 fe07 	bl	8009914 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008d06:	7bbb      	ldrb	r3, [r7, #14]
 8008d08:	3b01      	subs	r3, #1
 8008d0a:	b2db      	uxtb	r3, r3
 8008d0c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008d0e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	dce9      	bgt.n	8008cea <prvUnlockQueue+0x60>
 8008d16:	e000      	b.n	8008d1a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008d18:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	22ff      	movs	r2, #255	; 0xff
 8008d1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008d22:	f001 fe1f 	bl	800a964 <vPortExitCritical>
}
 8008d26:	bf00      	nop
 8008d28:	3710      	adds	r7, #16
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	bd80      	pop	{r7, pc}

08008d2e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008d2e:	b580      	push	{r7, lr}
 8008d30:	b084      	sub	sp, #16
 8008d32:	af00      	add	r7, sp, #0
 8008d34:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008d36:	f001 fde5 	bl	800a904 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d102      	bne.n	8008d48 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008d42:	2301      	movs	r3, #1
 8008d44:	60fb      	str	r3, [r7, #12]
 8008d46:	e001      	b.n	8008d4c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008d48:	2300      	movs	r3, #0
 8008d4a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008d4c:	f001 fe0a 	bl	800a964 <vPortExitCritical>

	return xReturn;
 8008d50:	68fb      	ldr	r3, [r7, #12]
}
 8008d52:	4618      	mov	r0, r3
 8008d54:	3710      	adds	r7, #16
 8008d56:	46bd      	mov	sp, r7
 8008d58:	bd80      	pop	{r7, pc}

08008d5a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008d5a:	b580      	push	{r7, lr}
 8008d5c:	b084      	sub	sp, #16
 8008d5e:	af00      	add	r7, sp, #0
 8008d60:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008d62:	f001 fdcf 	bl	800a904 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d6e:	429a      	cmp	r2, r3
 8008d70:	d102      	bne.n	8008d78 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008d72:	2301      	movs	r3, #1
 8008d74:	60fb      	str	r3, [r7, #12]
 8008d76:	e001      	b.n	8008d7c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008d78:	2300      	movs	r3, #0
 8008d7a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008d7c:	f001 fdf2 	bl	800a964 <vPortExitCritical>

	return xReturn;
 8008d80:	68fb      	ldr	r3, [r7, #12]
}
 8008d82:	4618      	mov	r0, r3
 8008d84:	3710      	adds	r7, #16
 8008d86:	46bd      	mov	sp, r7
 8008d88:	bd80      	pop	{r7, pc}
	...

08008d8c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008d8c:	b480      	push	{r7}
 8008d8e:	b085      	sub	sp, #20
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
 8008d94:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008d96:	2300      	movs	r3, #0
 8008d98:	60fb      	str	r3, [r7, #12]
 8008d9a:	e014      	b.n	8008dc6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008d9c:	4a0f      	ldr	r2, [pc, #60]	; (8008ddc <vQueueAddToRegistry+0x50>)
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d10b      	bne.n	8008dc0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008da8:	490c      	ldr	r1, [pc, #48]	; (8008ddc <vQueueAddToRegistry+0x50>)
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	683a      	ldr	r2, [r7, #0]
 8008dae:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008db2:	4a0a      	ldr	r2, [pc, #40]	; (8008ddc <vQueueAddToRegistry+0x50>)
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	00db      	lsls	r3, r3, #3
 8008db8:	4413      	add	r3, r2
 8008dba:	687a      	ldr	r2, [r7, #4]
 8008dbc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008dbe:	e006      	b.n	8008dce <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	3301      	adds	r3, #1
 8008dc4:	60fb      	str	r3, [r7, #12]
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	2b07      	cmp	r3, #7
 8008dca:	d9e7      	bls.n	8008d9c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008dcc:	bf00      	nop
 8008dce:	bf00      	nop
 8008dd0:	3714      	adds	r7, #20
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd8:	4770      	bx	lr
 8008dda:	bf00      	nop
 8008ddc:	20001aec 	.word	0x20001aec

08008de0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8008de0:	b480      	push	{r7}
 8008de2:	b085      	sub	sp, #20
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008de8:	2300      	movs	r3, #0
 8008dea:	60fb      	str	r3, [r7, #12]
 8008dec:	e016      	b.n	8008e1c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8008dee:	4a10      	ldr	r2, [pc, #64]	; (8008e30 <vQueueUnregisterQueue+0x50>)
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	00db      	lsls	r3, r3, #3
 8008df4:	4413      	add	r3, r2
 8008df6:	685b      	ldr	r3, [r3, #4]
 8008df8:	687a      	ldr	r2, [r7, #4]
 8008dfa:	429a      	cmp	r2, r3
 8008dfc:	d10b      	bne.n	8008e16 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8008dfe:	4a0c      	ldr	r2, [pc, #48]	; (8008e30 <vQueueUnregisterQueue+0x50>)
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	2100      	movs	r1, #0
 8008e04:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8008e08:	4a09      	ldr	r2, [pc, #36]	; (8008e30 <vQueueUnregisterQueue+0x50>)
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	00db      	lsls	r3, r3, #3
 8008e0e:	4413      	add	r3, r2
 8008e10:	2200      	movs	r2, #0
 8008e12:	605a      	str	r2, [r3, #4]
				break;
 8008e14:	e006      	b.n	8008e24 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	3301      	adds	r3, #1
 8008e1a:	60fb      	str	r3, [r7, #12]
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	2b07      	cmp	r3, #7
 8008e20:	d9e5      	bls.n	8008dee <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8008e22:	bf00      	nop
 8008e24:	bf00      	nop
 8008e26:	3714      	adds	r7, #20
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2e:	4770      	bx	lr
 8008e30:	20001aec 	.word	0x20001aec

08008e34 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b086      	sub	sp, #24
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	60f8      	str	r0, [r7, #12]
 8008e3c:	60b9      	str	r1, [r7, #8]
 8008e3e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008e44:	f001 fd5e 	bl	800a904 <vPortEnterCritical>
 8008e48:	697b      	ldr	r3, [r7, #20]
 8008e4a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008e4e:	b25b      	sxtb	r3, r3
 8008e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e54:	d103      	bne.n	8008e5e <vQueueWaitForMessageRestricted+0x2a>
 8008e56:	697b      	ldr	r3, [r7, #20]
 8008e58:	2200      	movs	r2, #0
 8008e5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008e5e:	697b      	ldr	r3, [r7, #20]
 8008e60:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008e64:	b25b      	sxtb	r3, r3
 8008e66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e6a:	d103      	bne.n	8008e74 <vQueueWaitForMessageRestricted+0x40>
 8008e6c:	697b      	ldr	r3, [r7, #20]
 8008e6e:	2200      	movs	r2, #0
 8008e70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008e74:	f001 fd76 	bl	800a964 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008e78:	697b      	ldr	r3, [r7, #20]
 8008e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d106      	bne.n	8008e8e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008e80:	697b      	ldr	r3, [r7, #20]
 8008e82:	3324      	adds	r3, #36	; 0x24
 8008e84:	687a      	ldr	r2, [r7, #4]
 8008e86:	68b9      	ldr	r1, [r7, #8]
 8008e88:	4618      	mov	r0, r3
 8008e8a:	f000 fc3b 	bl	8009704 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008e8e:	6978      	ldr	r0, [r7, #20]
 8008e90:	f7ff fefb 	bl	8008c8a <prvUnlockQueue>
	}
 8008e94:	bf00      	nop
 8008e96:	3718      	adds	r7, #24
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	bd80      	pop	{r7, pc}

08008e9c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b08e      	sub	sp, #56	; 0x38
 8008ea0:	af04      	add	r7, sp, #16
 8008ea2:	60f8      	str	r0, [r7, #12]
 8008ea4:	60b9      	str	r1, [r7, #8]
 8008ea6:	607a      	str	r2, [r7, #4]
 8008ea8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008eaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d10a      	bne.n	8008ec6 <xTaskCreateStatic+0x2a>
	__asm volatile
 8008eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eb4:	f383 8811 	msr	BASEPRI, r3
 8008eb8:	f3bf 8f6f 	isb	sy
 8008ebc:	f3bf 8f4f 	dsb	sy
 8008ec0:	623b      	str	r3, [r7, #32]
}
 8008ec2:	bf00      	nop
 8008ec4:	e7fe      	b.n	8008ec4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008ec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d10a      	bne.n	8008ee2 <xTaskCreateStatic+0x46>
	__asm volatile
 8008ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ed0:	f383 8811 	msr	BASEPRI, r3
 8008ed4:	f3bf 8f6f 	isb	sy
 8008ed8:	f3bf 8f4f 	dsb	sy
 8008edc:	61fb      	str	r3, [r7, #28]
}
 8008ede:	bf00      	nop
 8008ee0:	e7fe      	b.n	8008ee0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008ee2:	235c      	movs	r3, #92	; 0x5c
 8008ee4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008ee6:	693b      	ldr	r3, [r7, #16]
 8008ee8:	2b5c      	cmp	r3, #92	; 0x5c
 8008eea:	d00a      	beq.n	8008f02 <xTaskCreateStatic+0x66>
	__asm volatile
 8008eec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ef0:	f383 8811 	msr	BASEPRI, r3
 8008ef4:	f3bf 8f6f 	isb	sy
 8008ef8:	f3bf 8f4f 	dsb	sy
 8008efc:	61bb      	str	r3, [r7, #24]
}
 8008efe:	bf00      	nop
 8008f00:	e7fe      	b.n	8008f00 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008f02:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d01e      	beq.n	8008f48 <xTaskCreateStatic+0xac>
 8008f0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d01b      	beq.n	8008f48 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008f10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f12:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008f18:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f1c:	2202      	movs	r2, #2
 8008f1e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008f22:	2300      	movs	r3, #0
 8008f24:	9303      	str	r3, [sp, #12]
 8008f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f28:	9302      	str	r3, [sp, #8]
 8008f2a:	f107 0314 	add.w	r3, r7, #20
 8008f2e:	9301      	str	r3, [sp, #4]
 8008f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f32:	9300      	str	r3, [sp, #0]
 8008f34:	683b      	ldr	r3, [r7, #0]
 8008f36:	687a      	ldr	r2, [r7, #4]
 8008f38:	68b9      	ldr	r1, [r7, #8]
 8008f3a:	68f8      	ldr	r0, [r7, #12]
 8008f3c:	f000 f850 	bl	8008fe0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008f40:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008f42:	f000 f8dd 	bl	8009100 <prvAddNewTaskToReadyList>
 8008f46:	e001      	b.n	8008f4c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008f48:	2300      	movs	r3, #0
 8008f4a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008f4c:	697b      	ldr	r3, [r7, #20]
	}
 8008f4e:	4618      	mov	r0, r3
 8008f50:	3728      	adds	r7, #40	; 0x28
 8008f52:	46bd      	mov	sp, r7
 8008f54:	bd80      	pop	{r7, pc}

08008f56 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008f56:	b580      	push	{r7, lr}
 8008f58:	b08c      	sub	sp, #48	; 0x30
 8008f5a:	af04      	add	r7, sp, #16
 8008f5c:	60f8      	str	r0, [r7, #12]
 8008f5e:	60b9      	str	r1, [r7, #8]
 8008f60:	603b      	str	r3, [r7, #0]
 8008f62:	4613      	mov	r3, r2
 8008f64:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008f66:	88fb      	ldrh	r3, [r7, #6]
 8008f68:	009b      	lsls	r3, r3, #2
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	f001 fdec 	bl	800ab48 <pvPortMalloc>
 8008f70:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008f72:	697b      	ldr	r3, [r7, #20]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d00e      	beq.n	8008f96 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008f78:	205c      	movs	r0, #92	; 0x5c
 8008f7a:	f001 fde5 	bl	800ab48 <pvPortMalloc>
 8008f7e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008f80:	69fb      	ldr	r3, [r7, #28]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d003      	beq.n	8008f8e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008f86:	69fb      	ldr	r3, [r7, #28]
 8008f88:	697a      	ldr	r2, [r7, #20]
 8008f8a:	631a      	str	r2, [r3, #48]	; 0x30
 8008f8c:	e005      	b.n	8008f9a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008f8e:	6978      	ldr	r0, [r7, #20]
 8008f90:	f001 fea6 	bl	800ace0 <vPortFree>
 8008f94:	e001      	b.n	8008f9a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008f96:	2300      	movs	r3, #0
 8008f98:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008f9a:	69fb      	ldr	r3, [r7, #28]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d017      	beq.n	8008fd0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008fa0:	69fb      	ldr	r3, [r7, #28]
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008fa8:	88fa      	ldrh	r2, [r7, #6]
 8008faa:	2300      	movs	r3, #0
 8008fac:	9303      	str	r3, [sp, #12]
 8008fae:	69fb      	ldr	r3, [r7, #28]
 8008fb0:	9302      	str	r3, [sp, #8]
 8008fb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fb4:	9301      	str	r3, [sp, #4]
 8008fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fb8:	9300      	str	r3, [sp, #0]
 8008fba:	683b      	ldr	r3, [r7, #0]
 8008fbc:	68b9      	ldr	r1, [r7, #8]
 8008fbe:	68f8      	ldr	r0, [r7, #12]
 8008fc0:	f000 f80e 	bl	8008fe0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008fc4:	69f8      	ldr	r0, [r7, #28]
 8008fc6:	f000 f89b 	bl	8009100 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008fca:	2301      	movs	r3, #1
 8008fcc:	61bb      	str	r3, [r7, #24]
 8008fce:	e002      	b.n	8008fd6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008fd0:	f04f 33ff 	mov.w	r3, #4294967295
 8008fd4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008fd6:	69bb      	ldr	r3, [r7, #24]
	}
 8008fd8:	4618      	mov	r0, r3
 8008fda:	3720      	adds	r7, #32
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	bd80      	pop	{r7, pc}

08008fe0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b088      	sub	sp, #32
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	60f8      	str	r0, [r7, #12]
 8008fe8:	60b9      	str	r1, [r7, #8]
 8008fea:	607a      	str	r2, [r7, #4]
 8008fec:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ff0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	009b      	lsls	r3, r3, #2
 8008ff6:	461a      	mov	r2, r3
 8008ff8:	21a5      	movs	r1, #165	; 0xa5
 8008ffa:	f002 fd99 	bl	800bb30 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009000:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009008:	3b01      	subs	r3, #1
 800900a:	009b      	lsls	r3, r3, #2
 800900c:	4413      	add	r3, r2
 800900e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009010:	69bb      	ldr	r3, [r7, #24]
 8009012:	f023 0307 	bic.w	r3, r3, #7
 8009016:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009018:	69bb      	ldr	r3, [r7, #24]
 800901a:	f003 0307 	and.w	r3, r3, #7
 800901e:	2b00      	cmp	r3, #0
 8009020:	d00a      	beq.n	8009038 <prvInitialiseNewTask+0x58>
	__asm volatile
 8009022:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009026:	f383 8811 	msr	BASEPRI, r3
 800902a:	f3bf 8f6f 	isb	sy
 800902e:	f3bf 8f4f 	dsb	sy
 8009032:	617b      	str	r3, [r7, #20]
}
 8009034:	bf00      	nop
 8009036:	e7fe      	b.n	8009036 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009038:	68bb      	ldr	r3, [r7, #8]
 800903a:	2b00      	cmp	r3, #0
 800903c:	d01f      	beq.n	800907e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800903e:	2300      	movs	r3, #0
 8009040:	61fb      	str	r3, [r7, #28]
 8009042:	e012      	b.n	800906a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009044:	68ba      	ldr	r2, [r7, #8]
 8009046:	69fb      	ldr	r3, [r7, #28]
 8009048:	4413      	add	r3, r2
 800904a:	7819      	ldrb	r1, [r3, #0]
 800904c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800904e:	69fb      	ldr	r3, [r7, #28]
 8009050:	4413      	add	r3, r2
 8009052:	3334      	adds	r3, #52	; 0x34
 8009054:	460a      	mov	r2, r1
 8009056:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009058:	68ba      	ldr	r2, [r7, #8]
 800905a:	69fb      	ldr	r3, [r7, #28]
 800905c:	4413      	add	r3, r2
 800905e:	781b      	ldrb	r3, [r3, #0]
 8009060:	2b00      	cmp	r3, #0
 8009062:	d006      	beq.n	8009072 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009064:	69fb      	ldr	r3, [r7, #28]
 8009066:	3301      	adds	r3, #1
 8009068:	61fb      	str	r3, [r7, #28]
 800906a:	69fb      	ldr	r3, [r7, #28]
 800906c:	2b0f      	cmp	r3, #15
 800906e:	d9e9      	bls.n	8009044 <prvInitialiseNewTask+0x64>
 8009070:	e000      	b.n	8009074 <prvInitialiseNewTask+0x94>
			{
				break;
 8009072:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009076:	2200      	movs	r2, #0
 8009078:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800907c:	e003      	b.n	8009086 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800907e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009080:	2200      	movs	r2, #0
 8009082:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009088:	2b37      	cmp	r3, #55	; 0x37
 800908a:	d901      	bls.n	8009090 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800908c:	2337      	movs	r3, #55	; 0x37
 800908e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009092:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009094:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009098:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800909a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800909c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800909e:	2200      	movs	r2, #0
 80090a0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80090a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090a4:	3304      	adds	r3, #4
 80090a6:	4618      	mov	r0, r3
 80090a8:	f7fe fe56 	bl	8007d58 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80090ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090ae:	3318      	adds	r3, #24
 80090b0:	4618      	mov	r0, r3
 80090b2:	f7fe fe51 	bl	8007d58 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80090b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80090ba:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80090bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090be:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80090c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090c4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80090c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80090ca:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80090cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090ce:	2200      	movs	r2, #0
 80090d0:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80090d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090d4:	2200      	movs	r2, #0
 80090d6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80090da:	683a      	ldr	r2, [r7, #0]
 80090dc:	68f9      	ldr	r1, [r7, #12]
 80090de:	69b8      	ldr	r0, [r7, #24]
 80090e0:	f001 fae0 	bl	800a6a4 <pxPortInitialiseStack>
 80090e4:	4602      	mov	r2, r0
 80090e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090e8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80090ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d002      	beq.n	80090f6 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80090f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80090f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80090f6:	bf00      	nop
 80090f8:	3720      	adds	r7, #32
 80090fa:	46bd      	mov	sp, r7
 80090fc:	bd80      	pop	{r7, pc}
	...

08009100 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009100:	b580      	push	{r7, lr}
 8009102:	b082      	sub	sp, #8
 8009104:	af00      	add	r7, sp, #0
 8009106:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009108:	f001 fbfc 	bl	800a904 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800910c:	4b2d      	ldr	r3, [pc, #180]	; (80091c4 <prvAddNewTaskToReadyList+0xc4>)
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	3301      	adds	r3, #1
 8009112:	4a2c      	ldr	r2, [pc, #176]	; (80091c4 <prvAddNewTaskToReadyList+0xc4>)
 8009114:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009116:	4b2c      	ldr	r3, [pc, #176]	; (80091c8 <prvAddNewTaskToReadyList+0xc8>)
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d109      	bne.n	8009132 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800911e:	4a2a      	ldr	r2, [pc, #168]	; (80091c8 <prvAddNewTaskToReadyList+0xc8>)
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009124:	4b27      	ldr	r3, [pc, #156]	; (80091c4 <prvAddNewTaskToReadyList+0xc4>)
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	2b01      	cmp	r3, #1
 800912a:	d110      	bne.n	800914e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800912c:	f000 fc16 	bl	800995c <prvInitialiseTaskLists>
 8009130:	e00d      	b.n	800914e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009132:	4b26      	ldr	r3, [pc, #152]	; (80091cc <prvAddNewTaskToReadyList+0xcc>)
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d109      	bne.n	800914e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800913a:	4b23      	ldr	r3, [pc, #140]	; (80091c8 <prvAddNewTaskToReadyList+0xc8>)
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009144:	429a      	cmp	r2, r3
 8009146:	d802      	bhi.n	800914e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009148:	4a1f      	ldr	r2, [pc, #124]	; (80091c8 <prvAddNewTaskToReadyList+0xc8>)
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800914e:	4b20      	ldr	r3, [pc, #128]	; (80091d0 <prvAddNewTaskToReadyList+0xd0>)
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	3301      	adds	r3, #1
 8009154:	4a1e      	ldr	r2, [pc, #120]	; (80091d0 <prvAddNewTaskToReadyList+0xd0>)
 8009156:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009158:	4b1d      	ldr	r3, [pc, #116]	; (80091d0 <prvAddNewTaskToReadyList+0xd0>)
 800915a:	681a      	ldr	r2, [r3, #0]
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009164:	4b1b      	ldr	r3, [pc, #108]	; (80091d4 <prvAddNewTaskToReadyList+0xd4>)
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	429a      	cmp	r2, r3
 800916a:	d903      	bls.n	8009174 <prvAddNewTaskToReadyList+0x74>
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009170:	4a18      	ldr	r2, [pc, #96]	; (80091d4 <prvAddNewTaskToReadyList+0xd4>)
 8009172:	6013      	str	r3, [r2, #0]
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009178:	4613      	mov	r3, r2
 800917a:	009b      	lsls	r3, r3, #2
 800917c:	4413      	add	r3, r2
 800917e:	009b      	lsls	r3, r3, #2
 8009180:	4a15      	ldr	r2, [pc, #84]	; (80091d8 <prvAddNewTaskToReadyList+0xd8>)
 8009182:	441a      	add	r2, r3
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	3304      	adds	r3, #4
 8009188:	4619      	mov	r1, r3
 800918a:	4610      	mov	r0, r2
 800918c:	f7fe fdf1 	bl	8007d72 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009190:	f001 fbe8 	bl	800a964 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009194:	4b0d      	ldr	r3, [pc, #52]	; (80091cc <prvAddNewTaskToReadyList+0xcc>)
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	2b00      	cmp	r3, #0
 800919a:	d00e      	beq.n	80091ba <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800919c:	4b0a      	ldr	r3, [pc, #40]	; (80091c8 <prvAddNewTaskToReadyList+0xc8>)
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091a6:	429a      	cmp	r2, r3
 80091a8:	d207      	bcs.n	80091ba <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80091aa:	4b0c      	ldr	r3, [pc, #48]	; (80091dc <prvAddNewTaskToReadyList+0xdc>)
 80091ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091b0:	601a      	str	r2, [r3, #0]
 80091b2:	f3bf 8f4f 	dsb	sy
 80091b6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80091ba:	bf00      	nop
 80091bc:	3708      	adds	r7, #8
 80091be:	46bd      	mov	sp, r7
 80091c0:	bd80      	pop	{r7, pc}
 80091c2:	bf00      	nop
 80091c4:	20002000 	.word	0x20002000
 80091c8:	20001b2c 	.word	0x20001b2c
 80091cc:	2000200c 	.word	0x2000200c
 80091d0:	2000201c 	.word	0x2000201c
 80091d4:	20002008 	.word	0x20002008
 80091d8:	20001b30 	.word	0x20001b30
 80091dc:	e000ed04 	.word	0xe000ed04

080091e0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80091e0:	b580      	push	{r7, lr}
 80091e2:	b084      	sub	sp, #16
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80091e8:	2300      	movs	r3, #0
 80091ea:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d017      	beq.n	8009222 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80091f2:	4b13      	ldr	r3, [pc, #76]	; (8009240 <vTaskDelay+0x60>)
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d00a      	beq.n	8009210 <vTaskDelay+0x30>
	__asm volatile
 80091fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091fe:	f383 8811 	msr	BASEPRI, r3
 8009202:	f3bf 8f6f 	isb	sy
 8009206:	f3bf 8f4f 	dsb	sy
 800920a:	60bb      	str	r3, [r7, #8]
}
 800920c:	bf00      	nop
 800920e:	e7fe      	b.n	800920e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009210:	f000 f880 	bl	8009314 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009214:	2100      	movs	r1, #0
 8009216:	6878      	ldr	r0, [r7, #4]
 8009218:	f000 fde8 	bl	8009dec <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800921c:	f000 f888 	bl	8009330 <xTaskResumeAll>
 8009220:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	2b00      	cmp	r3, #0
 8009226:	d107      	bne.n	8009238 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009228:	4b06      	ldr	r3, [pc, #24]	; (8009244 <vTaskDelay+0x64>)
 800922a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800922e:	601a      	str	r2, [r3, #0]
 8009230:	f3bf 8f4f 	dsb	sy
 8009234:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009238:	bf00      	nop
 800923a:	3710      	adds	r7, #16
 800923c:	46bd      	mov	sp, r7
 800923e:	bd80      	pop	{r7, pc}
 8009240:	20002028 	.word	0x20002028
 8009244:	e000ed04 	.word	0xe000ed04

08009248 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009248:	b580      	push	{r7, lr}
 800924a:	b08a      	sub	sp, #40	; 0x28
 800924c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800924e:	2300      	movs	r3, #0
 8009250:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009252:	2300      	movs	r3, #0
 8009254:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009256:	463a      	mov	r2, r7
 8009258:	1d39      	adds	r1, r7, #4
 800925a:	f107 0308 	add.w	r3, r7, #8
 800925e:	4618      	mov	r0, r3
 8009260:	f7fe fd26 	bl	8007cb0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009264:	6839      	ldr	r1, [r7, #0]
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	68ba      	ldr	r2, [r7, #8]
 800926a:	9202      	str	r2, [sp, #8]
 800926c:	9301      	str	r3, [sp, #4]
 800926e:	2300      	movs	r3, #0
 8009270:	9300      	str	r3, [sp, #0]
 8009272:	2300      	movs	r3, #0
 8009274:	460a      	mov	r2, r1
 8009276:	4921      	ldr	r1, [pc, #132]	; (80092fc <vTaskStartScheduler+0xb4>)
 8009278:	4821      	ldr	r0, [pc, #132]	; (8009300 <vTaskStartScheduler+0xb8>)
 800927a:	f7ff fe0f 	bl	8008e9c <xTaskCreateStatic>
 800927e:	4603      	mov	r3, r0
 8009280:	4a20      	ldr	r2, [pc, #128]	; (8009304 <vTaskStartScheduler+0xbc>)
 8009282:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009284:	4b1f      	ldr	r3, [pc, #124]	; (8009304 <vTaskStartScheduler+0xbc>)
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d002      	beq.n	8009292 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800928c:	2301      	movs	r3, #1
 800928e:	617b      	str	r3, [r7, #20]
 8009290:	e001      	b.n	8009296 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009292:	2300      	movs	r3, #0
 8009294:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009296:	697b      	ldr	r3, [r7, #20]
 8009298:	2b01      	cmp	r3, #1
 800929a:	d102      	bne.n	80092a2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800929c:	f000 fdfa 	bl	8009e94 <xTimerCreateTimerTask>
 80092a0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80092a2:	697b      	ldr	r3, [r7, #20]
 80092a4:	2b01      	cmp	r3, #1
 80092a6:	d116      	bne.n	80092d6 <vTaskStartScheduler+0x8e>
	__asm volatile
 80092a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092ac:	f383 8811 	msr	BASEPRI, r3
 80092b0:	f3bf 8f6f 	isb	sy
 80092b4:	f3bf 8f4f 	dsb	sy
 80092b8:	613b      	str	r3, [r7, #16]
}
 80092ba:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80092bc:	4b12      	ldr	r3, [pc, #72]	; (8009308 <vTaskStartScheduler+0xc0>)
 80092be:	f04f 32ff 	mov.w	r2, #4294967295
 80092c2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80092c4:	4b11      	ldr	r3, [pc, #68]	; (800930c <vTaskStartScheduler+0xc4>)
 80092c6:	2201      	movs	r2, #1
 80092c8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80092ca:	4b11      	ldr	r3, [pc, #68]	; (8009310 <vTaskStartScheduler+0xc8>)
 80092cc:	2200      	movs	r2, #0
 80092ce:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80092d0:	f001 fa76 	bl	800a7c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80092d4:	e00e      	b.n	80092f4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80092d6:	697b      	ldr	r3, [r7, #20]
 80092d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092dc:	d10a      	bne.n	80092f4 <vTaskStartScheduler+0xac>
	__asm volatile
 80092de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092e2:	f383 8811 	msr	BASEPRI, r3
 80092e6:	f3bf 8f6f 	isb	sy
 80092ea:	f3bf 8f4f 	dsb	sy
 80092ee:	60fb      	str	r3, [r7, #12]
}
 80092f0:	bf00      	nop
 80092f2:	e7fe      	b.n	80092f2 <vTaskStartScheduler+0xaa>
}
 80092f4:	bf00      	nop
 80092f6:	3718      	adds	r7, #24
 80092f8:	46bd      	mov	sp, r7
 80092fa:	bd80      	pop	{r7, pc}
 80092fc:	0800bbac 	.word	0x0800bbac
 8009300:	0800992d 	.word	0x0800992d
 8009304:	20002024 	.word	0x20002024
 8009308:	20002020 	.word	0x20002020
 800930c:	2000200c 	.word	0x2000200c
 8009310:	20002004 	.word	0x20002004

08009314 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009314:	b480      	push	{r7}
 8009316:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009318:	4b04      	ldr	r3, [pc, #16]	; (800932c <vTaskSuspendAll+0x18>)
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	3301      	adds	r3, #1
 800931e:	4a03      	ldr	r2, [pc, #12]	; (800932c <vTaskSuspendAll+0x18>)
 8009320:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009322:	bf00      	nop
 8009324:	46bd      	mov	sp, r7
 8009326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932a:	4770      	bx	lr
 800932c:	20002028 	.word	0x20002028

08009330 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009330:	b580      	push	{r7, lr}
 8009332:	b084      	sub	sp, #16
 8009334:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009336:	2300      	movs	r3, #0
 8009338:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800933a:	2300      	movs	r3, #0
 800933c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800933e:	4b42      	ldr	r3, [pc, #264]	; (8009448 <xTaskResumeAll+0x118>)
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	2b00      	cmp	r3, #0
 8009344:	d10a      	bne.n	800935c <xTaskResumeAll+0x2c>
	__asm volatile
 8009346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800934a:	f383 8811 	msr	BASEPRI, r3
 800934e:	f3bf 8f6f 	isb	sy
 8009352:	f3bf 8f4f 	dsb	sy
 8009356:	603b      	str	r3, [r7, #0]
}
 8009358:	bf00      	nop
 800935a:	e7fe      	b.n	800935a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800935c:	f001 fad2 	bl	800a904 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009360:	4b39      	ldr	r3, [pc, #228]	; (8009448 <xTaskResumeAll+0x118>)
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	3b01      	subs	r3, #1
 8009366:	4a38      	ldr	r2, [pc, #224]	; (8009448 <xTaskResumeAll+0x118>)
 8009368:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800936a:	4b37      	ldr	r3, [pc, #220]	; (8009448 <xTaskResumeAll+0x118>)
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	2b00      	cmp	r3, #0
 8009370:	d162      	bne.n	8009438 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009372:	4b36      	ldr	r3, [pc, #216]	; (800944c <xTaskResumeAll+0x11c>)
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	2b00      	cmp	r3, #0
 8009378:	d05e      	beq.n	8009438 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800937a:	e02f      	b.n	80093dc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800937c:	4b34      	ldr	r3, [pc, #208]	; (8009450 <xTaskResumeAll+0x120>)
 800937e:	68db      	ldr	r3, [r3, #12]
 8009380:	68db      	ldr	r3, [r3, #12]
 8009382:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	3318      	adds	r3, #24
 8009388:	4618      	mov	r0, r3
 800938a:	f7fe fd4f 	bl	8007e2c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	3304      	adds	r3, #4
 8009392:	4618      	mov	r0, r3
 8009394:	f7fe fd4a 	bl	8007e2c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800939c:	4b2d      	ldr	r3, [pc, #180]	; (8009454 <xTaskResumeAll+0x124>)
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	429a      	cmp	r2, r3
 80093a2:	d903      	bls.n	80093ac <xTaskResumeAll+0x7c>
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093a8:	4a2a      	ldr	r2, [pc, #168]	; (8009454 <xTaskResumeAll+0x124>)
 80093aa:	6013      	str	r3, [r2, #0]
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093b0:	4613      	mov	r3, r2
 80093b2:	009b      	lsls	r3, r3, #2
 80093b4:	4413      	add	r3, r2
 80093b6:	009b      	lsls	r3, r3, #2
 80093b8:	4a27      	ldr	r2, [pc, #156]	; (8009458 <xTaskResumeAll+0x128>)
 80093ba:	441a      	add	r2, r3
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	3304      	adds	r3, #4
 80093c0:	4619      	mov	r1, r3
 80093c2:	4610      	mov	r0, r2
 80093c4:	f7fe fcd5 	bl	8007d72 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093cc:	4b23      	ldr	r3, [pc, #140]	; (800945c <xTaskResumeAll+0x12c>)
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093d2:	429a      	cmp	r2, r3
 80093d4:	d302      	bcc.n	80093dc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80093d6:	4b22      	ldr	r3, [pc, #136]	; (8009460 <xTaskResumeAll+0x130>)
 80093d8:	2201      	movs	r2, #1
 80093da:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80093dc:	4b1c      	ldr	r3, [pc, #112]	; (8009450 <xTaskResumeAll+0x120>)
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d1cb      	bne.n	800937c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d001      	beq.n	80093ee <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80093ea:	f000 fb55 	bl	8009a98 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80093ee:	4b1d      	ldr	r3, [pc, #116]	; (8009464 <xTaskResumeAll+0x134>)
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d010      	beq.n	800941c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80093fa:	f000 f847 	bl	800948c <xTaskIncrementTick>
 80093fe:	4603      	mov	r3, r0
 8009400:	2b00      	cmp	r3, #0
 8009402:	d002      	beq.n	800940a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009404:	4b16      	ldr	r3, [pc, #88]	; (8009460 <xTaskResumeAll+0x130>)
 8009406:	2201      	movs	r2, #1
 8009408:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	3b01      	subs	r3, #1
 800940e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d1f1      	bne.n	80093fa <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8009416:	4b13      	ldr	r3, [pc, #76]	; (8009464 <xTaskResumeAll+0x134>)
 8009418:	2200      	movs	r2, #0
 800941a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800941c:	4b10      	ldr	r3, [pc, #64]	; (8009460 <xTaskResumeAll+0x130>)
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	2b00      	cmp	r3, #0
 8009422:	d009      	beq.n	8009438 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009424:	2301      	movs	r3, #1
 8009426:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009428:	4b0f      	ldr	r3, [pc, #60]	; (8009468 <xTaskResumeAll+0x138>)
 800942a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800942e:	601a      	str	r2, [r3, #0]
 8009430:	f3bf 8f4f 	dsb	sy
 8009434:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009438:	f001 fa94 	bl	800a964 <vPortExitCritical>

	return xAlreadyYielded;
 800943c:	68bb      	ldr	r3, [r7, #8]
}
 800943e:	4618      	mov	r0, r3
 8009440:	3710      	adds	r7, #16
 8009442:	46bd      	mov	sp, r7
 8009444:	bd80      	pop	{r7, pc}
 8009446:	bf00      	nop
 8009448:	20002028 	.word	0x20002028
 800944c:	20002000 	.word	0x20002000
 8009450:	20001fc0 	.word	0x20001fc0
 8009454:	20002008 	.word	0x20002008
 8009458:	20001b30 	.word	0x20001b30
 800945c:	20001b2c 	.word	0x20001b2c
 8009460:	20002014 	.word	0x20002014
 8009464:	20002010 	.word	0x20002010
 8009468:	e000ed04 	.word	0xe000ed04

0800946c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800946c:	b480      	push	{r7}
 800946e:	b083      	sub	sp, #12
 8009470:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009472:	4b05      	ldr	r3, [pc, #20]	; (8009488 <xTaskGetTickCount+0x1c>)
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009478:	687b      	ldr	r3, [r7, #4]
}
 800947a:	4618      	mov	r0, r3
 800947c:	370c      	adds	r7, #12
 800947e:	46bd      	mov	sp, r7
 8009480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009484:	4770      	bx	lr
 8009486:	bf00      	nop
 8009488:	20002004 	.word	0x20002004

0800948c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800948c:	b580      	push	{r7, lr}
 800948e:	b086      	sub	sp, #24
 8009490:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009492:	2300      	movs	r3, #0
 8009494:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009496:	4b4f      	ldr	r3, [pc, #316]	; (80095d4 <xTaskIncrementTick+0x148>)
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	2b00      	cmp	r3, #0
 800949c:	f040 808f 	bne.w	80095be <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80094a0:	4b4d      	ldr	r3, [pc, #308]	; (80095d8 <xTaskIncrementTick+0x14c>)
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	3301      	adds	r3, #1
 80094a6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80094a8:	4a4b      	ldr	r2, [pc, #300]	; (80095d8 <xTaskIncrementTick+0x14c>)
 80094aa:	693b      	ldr	r3, [r7, #16]
 80094ac:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80094ae:	693b      	ldr	r3, [r7, #16]
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d120      	bne.n	80094f6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80094b4:	4b49      	ldr	r3, [pc, #292]	; (80095dc <xTaskIncrementTick+0x150>)
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d00a      	beq.n	80094d4 <xTaskIncrementTick+0x48>
	__asm volatile
 80094be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094c2:	f383 8811 	msr	BASEPRI, r3
 80094c6:	f3bf 8f6f 	isb	sy
 80094ca:	f3bf 8f4f 	dsb	sy
 80094ce:	603b      	str	r3, [r7, #0]
}
 80094d0:	bf00      	nop
 80094d2:	e7fe      	b.n	80094d2 <xTaskIncrementTick+0x46>
 80094d4:	4b41      	ldr	r3, [pc, #260]	; (80095dc <xTaskIncrementTick+0x150>)
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	60fb      	str	r3, [r7, #12]
 80094da:	4b41      	ldr	r3, [pc, #260]	; (80095e0 <xTaskIncrementTick+0x154>)
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	4a3f      	ldr	r2, [pc, #252]	; (80095dc <xTaskIncrementTick+0x150>)
 80094e0:	6013      	str	r3, [r2, #0]
 80094e2:	4a3f      	ldr	r2, [pc, #252]	; (80095e0 <xTaskIncrementTick+0x154>)
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	6013      	str	r3, [r2, #0]
 80094e8:	4b3e      	ldr	r3, [pc, #248]	; (80095e4 <xTaskIncrementTick+0x158>)
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	3301      	adds	r3, #1
 80094ee:	4a3d      	ldr	r2, [pc, #244]	; (80095e4 <xTaskIncrementTick+0x158>)
 80094f0:	6013      	str	r3, [r2, #0]
 80094f2:	f000 fad1 	bl	8009a98 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80094f6:	4b3c      	ldr	r3, [pc, #240]	; (80095e8 <xTaskIncrementTick+0x15c>)
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	693a      	ldr	r2, [r7, #16]
 80094fc:	429a      	cmp	r2, r3
 80094fe:	d349      	bcc.n	8009594 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009500:	4b36      	ldr	r3, [pc, #216]	; (80095dc <xTaskIncrementTick+0x150>)
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	2b00      	cmp	r3, #0
 8009508:	d104      	bne.n	8009514 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800950a:	4b37      	ldr	r3, [pc, #220]	; (80095e8 <xTaskIncrementTick+0x15c>)
 800950c:	f04f 32ff 	mov.w	r2, #4294967295
 8009510:	601a      	str	r2, [r3, #0]
					break;
 8009512:	e03f      	b.n	8009594 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009514:	4b31      	ldr	r3, [pc, #196]	; (80095dc <xTaskIncrementTick+0x150>)
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	68db      	ldr	r3, [r3, #12]
 800951a:	68db      	ldr	r3, [r3, #12]
 800951c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800951e:	68bb      	ldr	r3, [r7, #8]
 8009520:	685b      	ldr	r3, [r3, #4]
 8009522:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009524:	693a      	ldr	r2, [r7, #16]
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	429a      	cmp	r2, r3
 800952a:	d203      	bcs.n	8009534 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800952c:	4a2e      	ldr	r2, [pc, #184]	; (80095e8 <xTaskIncrementTick+0x15c>)
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009532:	e02f      	b.n	8009594 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009534:	68bb      	ldr	r3, [r7, #8]
 8009536:	3304      	adds	r3, #4
 8009538:	4618      	mov	r0, r3
 800953a:	f7fe fc77 	bl	8007e2c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800953e:	68bb      	ldr	r3, [r7, #8]
 8009540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009542:	2b00      	cmp	r3, #0
 8009544:	d004      	beq.n	8009550 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009546:	68bb      	ldr	r3, [r7, #8]
 8009548:	3318      	adds	r3, #24
 800954a:	4618      	mov	r0, r3
 800954c:	f7fe fc6e 	bl	8007e2c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009550:	68bb      	ldr	r3, [r7, #8]
 8009552:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009554:	4b25      	ldr	r3, [pc, #148]	; (80095ec <xTaskIncrementTick+0x160>)
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	429a      	cmp	r2, r3
 800955a:	d903      	bls.n	8009564 <xTaskIncrementTick+0xd8>
 800955c:	68bb      	ldr	r3, [r7, #8]
 800955e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009560:	4a22      	ldr	r2, [pc, #136]	; (80095ec <xTaskIncrementTick+0x160>)
 8009562:	6013      	str	r3, [r2, #0]
 8009564:	68bb      	ldr	r3, [r7, #8]
 8009566:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009568:	4613      	mov	r3, r2
 800956a:	009b      	lsls	r3, r3, #2
 800956c:	4413      	add	r3, r2
 800956e:	009b      	lsls	r3, r3, #2
 8009570:	4a1f      	ldr	r2, [pc, #124]	; (80095f0 <xTaskIncrementTick+0x164>)
 8009572:	441a      	add	r2, r3
 8009574:	68bb      	ldr	r3, [r7, #8]
 8009576:	3304      	adds	r3, #4
 8009578:	4619      	mov	r1, r3
 800957a:	4610      	mov	r0, r2
 800957c:	f7fe fbf9 	bl	8007d72 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009580:	68bb      	ldr	r3, [r7, #8]
 8009582:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009584:	4b1b      	ldr	r3, [pc, #108]	; (80095f4 <xTaskIncrementTick+0x168>)
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800958a:	429a      	cmp	r2, r3
 800958c:	d3b8      	bcc.n	8009500 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800958e:	2301      	movs	r3, #1
 8009590:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009592:	e7b5      	b.n	8009500 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009594:	4b17      	ldr	r3, [pc, #92]	; (80095f4 <xTaskIncrementTick+0x168>)
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800959a:	4915      	ldr	r1, [pc, #84]	; (80095f0 <xTaskIncrementTick+0x164>)
 800959c:	4613      	mov	r3, r2
 800959e:	009b      	lsls	r3, r3, #2
 80095a0:	4413      	add	r3, r2
 80095a2:	009b      	lsls	r3, r3, #2
 80095a4:	440b      	add	r3, r1
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	2b01      	cmp	r3, #1
 80095aa:	d901      	bls.n	80095b0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80095ac:	2301      	movs	r3, #1
 80095ae:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80095b0:	4b11      	ldr	r3, [pc, #68]	; (80095f8 <xTaskIncrementTick+0x16c>)
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d007      	beq.n	80095c8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80095b8:	2301      	movs	r3, #1
 80095ba:	617b      	str	r3, [r7, #20]
 80095bc:	e004      	b.n	80095c8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80095be:	4b0f      	ldr	r3, [pc, #60]	; (80095fc <xTaskIncrementTick+0x170>)
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	3301      	adds	r3, #1
 80095c4:	4a0d      	ldr	r2, [pc, #52]	; (80095fc <xTaskIncrementTick+0x170>)
 80095c6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80095c8:	697b      	ldr	r3, [r7, #20]
}
 80095ca:	4618      	mov	r0, r3
 80095cc:	3718      	adds	r7, #24
 80095ce:	46bd      	mov	sp, r7
 80095d0:	bd80      	pop	{r7, pc}
 80095d2:	bf00      	nop
 80095d4:	20002028 	.word	0x20002028
 80095d8:	20002004 	.word	0x20002004
 80095dc:	20001fb8 	.word	0x20001fb8
 80095e0:	20001fbc 	.word	0x20001fbc
 80095e4:	20002018 	.word	0x20002018
 80095e8:	20002020 	.word	0x20002020
 80095ec:	20002008 	.word	0x20002008
 80095f0:	20001b30 	.word	0x20001b30
 80095f4:	20001b2c 	.word	0x20001b2c
 80095f8:	20002014 	.word	0x20002014
 80095fc:	20002010 	.word	0x20002010

08009600 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009600:	b480      	push	{r7}
 8009602:	b085      	sub	sp, #20
 8009604:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009606:	4b28      	ldr	r3, [pc, #160]	; (80096a8 <vTaskSwitchContext+0xa8>)
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	2b00      	cmp	r3, #0
 800960c:	d003      	beq.n	8009616 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800960e:	4b27      	ldr	r3, [pc, #156]	; (80096ac <vTaskSwitchContext+0xac>)
 8009610:	2201      	movs	r2, #1
 8009612:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009614:	e041      	b.n	800969a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8009616:	4b25      	ldr	r3, [pc, #148]	; (80096ac <vTaskSwitchContext+0xac>)
 8009618:	2200      	movs	r2, #0
 800961a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800961c:	4b24      	ldr	r3, [pc, #144]	; (80096b0 <vTaskSwitchContext+0xb0>)
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	60fb      	str	r3, [r7, #12]
 8009622:	e010      	b.n	8009646 <vTaskSwitchContext+0x46>
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	2b00      	cmp	r3, #0
 8009628:	d10a      	bne.n	8009640 <vTaskSwitchContext+0x40>
	__asm volatile
 800962a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800962e:	f383 8811 	msr	BASEPRI, r3
 8009632:	f3bf 8f6f 	isb	sy
 8009636:	f3bf 8f4f 	dsb	sy
 800963a:	607b      	str	r3, [r7, #4]
}
 800963c:	bf00      	nop
 800963e:	e7fe      	b.n	800963e <vTaskSwitchContext+0x3e>
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	3b01      	subs	r3, #1
 8009644:	60fb      	str	r3, [r7, #12]
 8009646:	491b      	ldr	r1, [pc, #108]	; (80096b4 <vTaskSwitchContext+0xb4>)
 8009648:	68fa      	ldr	r2, [r7, #12]
 800964a:	4613      	mov	r3, r2
 800964c:	009b      	lsls	r3, r3, #2
 800964e:	4413      	add	r3, r2
 8009650:	009b      	lsls	r3, r3, #2
 8009652:	440b      	add	r3, r1
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d0e4      	beq.n	8009624 <vTaskSwitchContext+0x24>
 800965a:	68fa      	ldr	r2, [r7, #12]
 800965c:	4613      	mov	r3, r2
 800965e:	009b      	lsls	r3, r3, #2
 8009660:	4413      	add	r3, r2
 8009662:	009b      	lsls	r3, r3, #2
 8009664:	4a13      	ldr	r2, [pc, #76]	; (80096b4 <vTaskSwitchContext+0xb4>)
 8009666:	4413      	add	r3, r2
 8009668:	60bb      	str	r3, [r7, #8]
 800966a:	68bb      	ldr	r3, [r7, #8]
 800966c:	685b      	ldr	r3, [r3, #4]
 800966e:	685a      	ldr	r2, [r3, #4]
 8009670:	68bb      	ldr	r3, [r7, #8]
 8009672:	605a      	str	r2, [r3, #4]
 8009674:	68bb      	ldr	r3, [r7, #8]
 8009676:	685a      	ldr	r2, [r3, #4]
 8009678:	68bb      	ldr	r3, [r7, #8]
 800967a:	3308      	adds	r3, #8
 800967c:	429a      	cmp	r2, r3
 800967e:	d104      	bne.n	800968a <vTaskSwitchContext+0x8a>
 8009680:	68bb      	ldr	r3, [r7, #8]
 8009682:	685b      	ldr	r3, [r3, #4]
 8009684:	685a      	ldr	r2, [r3, #4]
 8009686:	68bb      	ldr	r3, [r7, #8]
 8009688:	605a      	str	r2, [r3, #4]
 800968a:	68bb      	ldr	r3, [r7, #8]
 800968c:	685b      	ldr	r3, [r3, #4]
 800968e:	68db      	ldr	r3, [r3, #12]
 8009690:	4a09      	ldr	r2, [pc, #36]	; (80096b8 <vTaskSwitchContext+0xb8>)
 8009692:	6013      	str	r3, [r2, #0]
 8009694:	4a06      	ldr	r2, [pc, #24]	; (80096b0 <vTaskSwitchContext+0xb0>)
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	6013      	str	r3, [r2, #0]
}
 800969a:	bf00      	nop
 800969c:	3714      	adds	r7, #20
 800969e:	46bd      	mov	sp, r7
 80096a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a4:	4770      	bx	lr
 80096a6:	bf00      	nop
 80096a8:	20002028 	.word	0x20002028
 80096ac:	20002014 	.word	0x20002014
 80096b0:	20002008 	.word	0x20002008
 80096b4:	20001b30 	.word	0x20001b30
 80096b8:	20001b2c 	.word	0x20001b2c

080096bc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80096bc:	b580      	push	{r7, lr}
 80096be:	b084      	sub	sp, #16
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
 80096c4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d10a      	bne.n	80096e2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80096cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096d0:	f383 8811 	msr	BASEPRI, r3
 80096d4:	f3bf 8f6f 	isb	sy
 80096d8:	f3bf 8f4f 	dsb	sy
 80096dc:	60fb      	str	r3, [r7, #12]
}
 80096de:	bf00      	nop
 80096e0:	e7fe      	b.n	80096e0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80096e2:	4b07      	ldr	r3, [pc, #28]	; (8009700 <vTaskPlaceOnEventList+0x44>)
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	3318      	adds	r3, #24
 80096e8:	4619      	mov	r1, r3
 80096ea:	6878      	ldr	r0, [r7, #4]
 80096ec:	f7fe fb65 	bl	8007dba <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80096f0:	2101      	movs	r1, #1
 80096f2:	6838      	ldr	r0, [r7, #0]
 80096f4:	f000 fb7a 	bl	8009dec <prvAddCurrentTaskToDelayedList>
}
 80096f8:	bf00      	nop
 80096fa:	3710      	adds	r7, #16
 80096fc:	46bd      	mov	sp, r7
 80096fe:	bd80      	pop	{r7, pc}
 8009700:	20001b2c 	.word	0x20001b2c

08009704 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009704:	b580      	push	{r7, lr}
 8009706:	b086      	sub	sp, #24
 8009708:	af00      	add	r7, sp, #0
 800970a:	60f8      	str	r0, [r7, #12]
 800970c:	60b9      	str	r1, [r7, #8]
 800970e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	2b00      	cmp	r3, #0
 8009714:	d10a      	bne.n	800972c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8009716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800971a:	f383 8811 	msr	BASEPRI, r3
 800971e:	f3bf 8f6f 	isb	sy
 8009722:	f3bf 8f4f 	dsb	sy
 8009726:	617b      	str	r3, [r7, #20]
}
 8009728:	bf00      	nop
 800972a:	e7fe      	b.n	800972a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800972c:	4b0a      	ldr	r3, [pc, #40]	; (8009758 <vTaskPlaceOnEventListRestricted+0x54>)
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	3318      	adds	r3, #24
 8009732:	4619      	mov	r1, r3
 8009734:	68f8      	ldr	r0, [r7, #12]
 8009736:	f7fe fb1c 	bl	8007d72 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	2b00      	cmp	r3, #0
 800973e:	d002      	beq.n	8009746 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009740:	f04f 33ff 	mov.w	r3, #4294967295
 8009744:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009746:	6879      	ldr	r1, [r7, #4]
 8009748:	68b8      	ldr	r0, [r7, #8]
 800974a:	f000 fb4f 	bl	8009dec <prvAddCurrentTaskToDelayedList>
	}
 800974e:	bf00      	nop
 8009750:	3718      	adds	r7, #24
 8009752:	46bd      	mov	sp, r7
 8009754:	bd80      	pop	{r7, pc}
 8009756:	bf00      	nop
 8009758:	20001b2c 	.word	0x20001b2c

0800975c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800975c:	b580      	push	{r7, lr}
 800975e:	b086      	sub	sp, #24
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	68db      	ldr	r3, [r3, #12]
 8009768:	68db      	ldr	r3, [r3, #12]
 800976a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800976c:	693b      	ldr	r3, [r7, #16]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d10a      	bne.n	8009788 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8009772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009776:	f383 8811 	msr	BASEPRI, r3
 800977a:	f3bf 8f6f 	isb	sy
 800977e:	f3bf 8f4f 	dsb	sy
 8009782:	60fb      	str	r3, [r7, #12]
}
 8009784:	bf00      	nop
 8009786:	e7fe      	b.n	8009786 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009788:	693b      	ldr	r3, [r7, #16]
 800978a:	3318      	adds	r3, #24
 800978c:	4618      	mov	r0, r3
 800978e:	f7fe fb4d 	bl	8007e2c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009792:	4b1e      	ldr	r3, [pc, #120]	; (800980c <xTaskRemoveFromEventList+0xb0>)
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d11d      	bne.n	80097d6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800979a:	693b      	ldr	r3, [r7, #16]
 800979c:	3304      	adds	r3, #4
 800979e:	4618      	mov	r0, r3
 80097a0:	f7fe fb44 	bl	8007e2c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80097a4:	693b      	ldr	r3, [r7, #16]
 80097a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097a8:	4b19      	ldr	r3, [pc, #100]	; (8009810 <xTaskRemoveFromEventList+0xb4>)
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	429a      	cmp	r2, r3
 80097ae:	d903      	bls.n	80097b8 <xTaskRemoveFromEventList+0x5c>
 80097b0:	693b      	ldr	r3, [r7, #16]
 80097b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097b4:	4a16      	ldr	r2, [pc, #88]	; (8009810 <xTaskRemoveFromEventList+0xb4>)
 80097b6:	6013      	str	r3, [r2, #0]
 80097b8:	693b      	ldr	r3, [r7, #16]
 80097ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097bc:	4613      	mov	r3, r2
 80097be:	009b      	lsls	r3, r3, #2
 80097c0:	4413      	add	r3, r2
 80097c2:	009b      	lsls	r3, r3, #2
 80097c4:	4a13      	ldr	r2, [pc, #76]	; (8009814 <xTaskRemoveFromEventList+0xb8>)
 80097c6:	441a      	add	r2, r3
 80097c8:	693b      	ldr	r3, [r7, #16]
 80097ca:	3304      	adds	r3, #4
 80097cc:	4619      	mov	r1, r3
 80097ce:	4610      	mov	r0, r2
 80097d0:	f7fe facf 	bl	8007d72 <vListInsertEnd>
 80097d4:	e005      	b.n	80097e2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80097d6:	693b      	ldr	r3, [r7, #16]
 80097d8:	3318      	adds	r3, #24
 80097da:	4619      	mov	r1, r3
 80097dc:	480e      	ldr	r0, [pc, #56]	; (8009818 <xTaskRemoveFromEventList+0xbc>)
 80097de:	f7fe fac8 	bl	8007d72 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80097e2:	693b      	ldr	r3, [r7, #16]
 80097e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097e6:	4b0d      	ldr	r3, [pc, #52]	; (800981c <xTaskRemoveFromEventList+0xc0>)
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097ec:	429a      	cmp	r2, r3
 80097ee:	d905      	bls.n	80097fc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80097f0:	2301      	movs	r3, #1
 80097f2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80097f4:	4b0a      	ldr	r3, [pc, #40]	; (8009820 <xTaskRemoveFromEventList+0xc4>)
 80097f6:	2201      	movs	r2, #1
 80097f8:	601a      	str	r2, [r3, #0]
 80097fa:	e001      	b.n	8009800 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80097fc:	2300      	movs	r3, #0
 80097fe:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009800:	697b      	ldr	r3, [r7, #20]
}
 8009802:	4618      	mov	r0, r3
 8009804:	3718      	adds	r7, #24
 8009806:	46bd      	mov	sp, r7
 8009808:	bd80      	pop	{r7, pc}
 800980a:	bf00      	nop
 800980c:	20002028 	.word	0x20002028
 8009810:	20002008 	.word	0x20002008
 8009814:	20001b30 	.word	0x20001b30
 8009818:	20001fc0 	.word	0x20001fc0
 800981c:	20001b2c 	.word	0x20001b2c
 8009820:	20002014 	.word	0x20002014

08009824 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009824:	b480      	push	{r7}
 8009826:	b083      	sub	sp, #12
 8009828:	af00      	add	r7, sp, #0
 800982a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800982c:	4b06      	ldr	r3, [pc, #24]	; (8009848 <vTaskInternalSetTimeOutState+0x24>)
 800982e:	681a      	ldr	r2, [r3, #0]
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009834:	4b05      	ldr	r3, [pc, #20]	; (800984c <vTaskInternalSetTimeOutState+0x28>)
 8009836:	681a      	ldr	r2, [r3, #0]
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	605a      	str	r2, [r3, #4]
}
 800983c:	bf00      	nop
 800983e:	370c      	adds	r7, #12
 8009840:	46bd      	mov	sp, r7
 8009842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009846:	4770      	bx	lr
 8009848:	20002018 	.word	0x20002018
 800984c:	20002004 	.word	0x20002004

08009850 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009850:	b580      	push	{r7, lr}
 8009852:	b088      	sub	sp, #32
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
 8009858:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	2b00      	cmp	r3, #0
 800985e:	d10a      	bne.n	8009876 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009864:	f383 8811 	msr	BASEPRI, r3
 8009868:	f3bf 8f6f 	isb	sy
 800986c:	f3bf 8f4f 	dsb	sy
 8009870:	613b      	str	r3, [r7, #16]
}
 8009872:	bf00      	nop
 8009874:	e7fe      	b.n	8009874 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009876:	683b      	ldr	r3, [r7, #0]
 8009878:	2b00      	cmp	r3, #0
 800987a:	d10a      	bne.n	8009892 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800987c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009880:	f383 8811 	msr	BASEPRI, r3
 8009884:	f3bf 8f6f 	isb	sy
 8009888:	f3bf 8f4f 	dsb	sy
 800988c:	60fb      	str	r3, [r7, #12]
}
 800988e:	bf00      	nop
 8009890:	e7fe      	b.n	8009890 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8009892:	f001 f837 	bl	800a904 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009896:	4b1d      	ldr	r3, [pc, #116]	; (800990c <xTaskCheckForTimeOut+0xbc>)
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	685b      	ldr	r3, [r3, #4]
 80098a0:	69ba      	ldr	r2, [r7, #24]
 80098a2:	1ad3      	subs	r3, r2, r3
 80098a4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80098a6:	683b      	ldr	r3, [r7, #0]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098ae:	d102      	bne.n	80098b6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80098b0:	2300      	movs	r3, #0
 80098b2:	61fb      	str	r3, [r7, #28]
 80098b4:	e023      	b.n	80098fe <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681a      	ldr	r2, [r3, #0]
 80098ba:	4b15      	ldr	r3, [pc, #84]	; (8009910 <xTaskCheckForTimeOut+0xc0>)
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	429a      	cmp	r2, r3
 80098c0:	d007      	beq.n	80098d2 <xTaskCheckForTimeOut+0x82>
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	685b      	ldr	r3, [r3, #4]
 80098c6:	69ba      	ldr	r2, [r7, #24]
 80098c8:	429a      	cmp	r2, r3
 80098ca:	d302      	bcc.n	80098d2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80098cc:	2301      	movs	r3, #1
 80098ce:	61fb      	str	r3, [r7, #28]
 80098d0:	e015      	b.n	80098fe <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80098d2:	683b      	ldr	r3, [r7, #0]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	697a      	ldr	r2, [r7, #20]
 80098d8:	429a      	cmp	r2, r3
 80098da:	d20b      	bcs.n	80098f4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80098dc:	683b      	ldr	r3, [r7, #0]
 80098de:	681a      	ldr	r2, [r3, #0]
 80098e0:	697b      	ldr	r3, [r7, #20]
 80098e2:	1ad2      	subs	r2, r2, r3
 80098e4:	683b      	ldr	r3, [r7, #0]
 80098e6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80098e8:	6878      	ldr	r0, [r7, #4]
 80098ea:	f7ff ff9b 	bl	8009824 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80098ee:	2300      	movs	r3, #0
 80098f0:	61fb      	str	r3, [r7, #28]
 80098f2:	e004      	b.n	80098fe <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80098f4:	683b      	ldr	r3, [r7, #0]
 80098f6:	2200      	movs	r2, #0
 80098f8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80098fa:	2301      	movs	r3, #1
 80098fc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80098fe:	f001 f831 	bl	800a964 <vPortExitCritical>

	return xReturn;
 8009902:	69fb      	ldr	r3, [r7, #28]
}
 8009904:	4618      	mov	r0, r3
 8009906:	3720      	adds	r7, #32
 8009908:	46bd      	mov	sp, r7
 800990a:	bd80      	pop	{r7, pc}
 800990c:	20002004 	.word	0x20002004
 8009910:	20002018 	.word	0x20002018

08009914 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009914:	b480      	push	{r7}
 8009916:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009918:	4b03      	ldr	r3, [pc, #12]	; (8009928 <vTaskMissedYield+0x14>)
 800991a:	2201      	movs	r2, #1
 800991c:	601a      	str	r2, [r3, #0]
}
 800991e:	bf00      	nop
 8009920:	46bd      	mov	sp, r7
 8009922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009926:	4770      	bx	lr
 8009928:	20002014 	.word	0x20002014

0800992c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800992c:	b580      	push	{r7, lr}
 800992e:	b082      	sub	sp, #8
 8009930:	af00      	add	r7, sp, #0
 8009932:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009934:	f000 f852 	bl	80099dc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009938:	4b06      	ldr	r3, [pc, #24]	; (8009954 <prvIdleTask+0x28>)
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	2b01      	cmp	r3, #1
 800993e:	d9f9      	bls.n	8009934 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009940:	4b05      	ldr	r3, [pc, #20]	; (8009958 <prvIdleTask+0x2c>)
 8009942:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009946:	601a      	str	r2, [r3, #0]
 8009948:	f3bf 8f4f 	dsb	sy
 800994c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009950:	e7f0      	b.n	8009934 <prvIdleTask+0x8>
 8009952:	bf00      	nop
 8009954:	20001b30 	.word	0x20001b30
 8009958:	e000ed04 	.word	0xe000ed04

0800995c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800995c:	b580      	push	{r7, lr}
 800995e:	b082      	sub	sp, #8
 8009960:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009962:	2300      	movs	r3, #0
 8009964:	607b      	str	r3, [r7, #4]
 8009966:	e00c      	b.n	8009982 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009968:	687a      	ldr	r2, [r7, #4]
 800996a:	4613      	mov	r3, r2
 800996c:	009b      	lsls	r3, r3, #2
 800996e:	4413      	add	r3, r2
 8009970:	009b      	lsls	r3, r3, #2
 8009972:	4a12      	ldr	r2, [pc, #72]	; (80099bc <prvInitialiseTaskLists+0x60>)
 8009974:	4413      	add	r3, r2
 8009976:	4618      	mov	r0, r3
 8009978:	f7fe f9ce 	bl	8007d18 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	3301      	adds	r3, #1
 8009980:	607b      	str	r3, [r7, #4]
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	2b37      	cmp	r3, #55	; 0x37
 8009986:	d9ef      	bls.n	8009968 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009988:	480d      	ldr	r0, [pc, #52]	; (80099c0 <prvInitialiseTaskLists+0x64>)
 800998a:	f7fe f9c5 	bl	8007d18 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800998e:	480d      	ldr	r0, [pc, #52]	; (80099c4 <prvInitialiseTaskLists+0x68>)
 8009990:	f7fe f9c2 	bl	8007d18 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009994:	480c      	ldr	r0, [pc, #48]	; (80099c8 <prvInitialiseTaskLists+0x6c>)
 8009996:	f7fe f9bf 	bl	8007d18 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800999a:	480c      	ldr	r0, [pc, #48]	; (80099cc <prvInitialiseTaskLists+0x70>)
 800999c:	f7fe f9bc 	bl	8007d18 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80099a0:	480b      	ldr	r0, [pc, #44]	; (80099d0 <prvInitialiseTaskLists+0x74>)
 80099a2:	f7fe f9b9 	bl	8007d18 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80099a6:	4b0b      	ldr	r3, [pc, #44]	; (80099d4 <prvInitialiseTaskLists+0x78>)
 80099a8:	4a05      	ldr	r2, [pc, #20]	; (80099c0 <prvInitialiseTaskLists+0x64>)
 80099aa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80099ac:	4b0a      	ldr	r3, [pc, #40]	; (80099d8 <prvInitialiseTaskLists+0x7c>)
 80099ae:	4a05      	ldr	r2, [pc, #20]	; (80099c4 <prvInitialiseTaskLists+0x68>)
 80099b0:	601a      	str	r2, [r3, #0]
}
 80099b2:	bf00      	nop
 80099b4:	3708      	adds	r7, #8
 80099b6:	46bd      	mov	sp, r7
 80099b8:	bd80      	pop	{r7, pc}
 80099ba:	bf00      	nop
 80099bc:	20001b30 	.word	0x20001b30
 80099c0:	20001f90 	.word	0x20001f90
 80099c4:	20001fa4 	.word	0x20001fa4
 80099c8:	20001fc0 	.word	0x20001fc0
 80099cc:	20001fd4 	.word	0x20001fd4
 80099d0:	20001fec 	.word	0x20001fec
 80099d4:	20001fb8 	.word	0x20001fb8
 80099d8:	20001fbc 	.word	0x20001fbc

080099dc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80099dc:	b580      	push	{r7, lr}
 80099de:	b082      	sub	sp, #8
 80099e0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80099e2:	e019      	b.n	8009a18 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80099e4:	f000 ff8e 	bl	800a904 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80099e8:	4b10      	ldr	r3, [pc, #64]	; (8009a2c <prvCheckTasksWaitingTermination+0x50>)
 80099ea:	68db      	ldr	r3, [r3, #12]
 80099ec:	68db      	ldr	r3, [r3, #12]
 80099ee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	3304      	adds	r3, #4
 80099f4:	4618      	mov	r0, r3
 80099f6:	f7fe fa19 	bl	8007e2c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80099fa:	4b0d      	ldr	r3, [pc, #52]	; (8009a30 <prvCheckTasksWaitingTermination+0x54>)
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	3b01      	subs	r3, #1
 8009a00:	4a0b      	ldr	r2, [pc, #44]	; (8009a30 <prvCheckTasksWaitingTermination+0x54>)
 8009a02:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009a04:	4b0b      	ldr	r3, [pc, #44]	; (8009a34 <prvCheckTasksWaitingTermination+0x58>)
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	3b01      	subs	r3, #1
 8009a0a:	4a0a      	ldr	r2, [pc, #40]	; (8009a34 <prvCheckTasksWaitingTermination+0x58>)
 8009a0c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009a0e:	f000 ffa9 	bl	800a964 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009a12:	6878      	ldr	r0, [r7, #4]
 8009a14:	f000 f810 	bl	8009a38 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009a18:	4b06      	ldr	r3, [pc, #24]	; (8009a34 <prvCheckTasksWaitingTermination+0x58>)
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d1e1      	bne.n	80099e4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009a20:	bf00      	nop
 8009a22:	bf00      	nop
 8009a24:	3708      	adds	r7, #8
 8009a26:	46bd      	mov	sp, r7
 8009a28:	bd80      	pop	{r7, pc}
 8009a2a:	bf00      	nop
 8009a2c:	20001fd4 	.word	0x20001fd4
 8009a30:	20002000 	.word	0x20002000
 8009a34:	20001fe8 	.word	0x20001fe8

08009a38 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009a38:	b580      	push	{r7, lr}
 8009a3a:	b084      	sub	sp, #16
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d108      	bne.n	8009a5c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a4e:	4618      	mov	r0, r3
 8009a50:	f001 f946 	bl	800ace0 <vPortFree>
				vPortFree( pxTCB );
 8009a54:	6878      	ldr	r0, [r7, #4]
 8009a56:	f001 f943 	bl	800ace0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009a5a:	e018      	b.n	8009a8e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009a62:	2b01      	cmp	r3, #1
 8009a64:	d103      	bne.n	8009a6e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009a66:	6878      	ldr	r0, [r7, #4]
 8009a68:	f001 f93a 	bl	800ace0 <vPortFree>
	}
 8009a6c:	e00f      	b.n	8009a8e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8009a74:	2b02      	cmp	r3, #2
 8009a76:	d00a      	beq.n	8009a8e <prvDeleteTCB+0x56>
	__asm volatile
 8009a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a7c:	f383 8811 	msr	BASEPRI, r3
 8009a80:	f3bf 8f6f 	isb	sy
 8009a84:	f3bf 8f4f 	dsb	sy
 8009a88:	60fb      	str	r3, [r7, #12]
}
 8009a8a:	bf00      	nop
 8009a8c:	e7fe      	b.n	8009a8c <prvDeleteTCB+0x54>
	}
 8009a8e:	bf00      	nop
 8009a90:	3710      	adds	r7, #16
 8009a92:	46bd      	mov	sp, r7
 8009a94:	bd80      	pop	{r7, pc}
	...

08009a98 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009a98:	b480      	push	{r7}
 8009a9a:	b083      	sub	sp, #12
 8009a9c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009a9e:	4b0c      	ldr	r3, [pc, #48]	; (8009ad0 <prvResetNextTaskUnblockTime+0x38>)
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d104      	bne.n	8009ab2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009aa8:	4b0a      	ldr	r3, [pc, #40]	; (8009ad4 <prvResetNextTaskUnblockTime+0x3c>)
 8009aaa:	f04f 32ff 	mov.w	r2, #4294967295
 8009aae:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009ab0:	e008      	b.n	8009ac4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ab2:	4b07      	ldr	r3, [pc, #28]	; (8009ad0 <prvResetNextTaskUnblockTime+0x38>)
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	68db      	ldr	r3, [r3, #12]
 8009ab8:	68db      	ldr	r3, [r3, #12]
 8009aba:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	685b      	ldr	r3, [r3, #4]
 8009ac0:	4a04      	ldr	r2, [pc, #16]	; (8009ad4 <prvResetNextTaskUnblockTime+0x3c>)
 8009ac2:	6013      	str	r3, [r2, #0]
}
 8009ac4:	bf00      	nop
 8009ac6:	370c      	adds	r7, #12
 8009ac8:	46bd      	mov	sp, r7
 8009aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ace:	4770      	bx	lr
 8009ad0:	20001fb8 	.word	0x20001fb8
 8009ad4:	20002020 	.word	0x20002020

08009ad8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009ad8:	b480      	push	{r7}
 8009ada:	b083      	sub	sp, #12
 8009adc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009ade:	4b0b      	ldr	r3, [pc, #44]	; (8009b0c <xTaskGetSchedulerState+0x34>)
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d102      	bne.n	8009aec <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009ae6:	2301      	movs	r3, #1
 8009ae8:	607b      	str	r3, [r7, #4]
 8009aea:	e008      	b.n	8009afe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009aec:	4b08      	ldr	r3, [pc, #32]	; (8009b10 <xTaskGetSchedulerState+0x38>)
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d102      	bne.n	8009afa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009af4:	2302      	movs	r3, #2
 8009af6:	607b      	str	r3, [r7, #4]
 8009af8:	e001      	b.n	8009afe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009afa:	2300      	movs	r3, #0
 8009afc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009afe:	687b      	ldr	r3, [r7, #4]
	}
 8009b00:	4618      	mov	r0, r3
 8009b02:	370c      	adds	r7, #12
 8009b04:	46bd      	mov	sp, r7
 8009b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b0a:	4770      	bx	lr
 8009b0c:	2000200c 	.word	0x2000200c
 8009b10:	20002028 	.word	0x20002028

08009b14 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009b14:	b580      	push	{r7, lr}
 8009b16:	b084      	sub	sp, #16
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009b20:	2300      	movs	r3, #0
 8009b22:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d051      	beq.n	8009bce <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009b2a:	68bb      	ldr	r3, [r7, #8]
 8009b2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b2e:	4b2a      	ldr	r3, [pc, #168]	; (8009bd8 <xTaskPriorityInherit+0xc4>)
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b34:	429a      	cmp	r2, r3
 8009b36:	d241      	bcs.n	8009bbc <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009b38:	68bb      	ldr	r3, [r7, #8]
 8009b3a:	699b      	ldr	r3, [r3, #24]
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	db06      	blt.n	8009b4e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009b40:	4b25      	ldr	r3, [pc, #148]	; (8009bd8 <xTaskPriorityInherit+0xc4>)
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b46:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009b4a:	68bb      	ldr	r3, [r7, #8]
 8009b4c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009b4e:	68bb      	ldr	r3, [r7, #8]
 8009b50:	6959      	ldr	r1, [r3, #20]
 8009b52:	68bb      	ldr	r3, [r7, #8]
 8009b54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b56:	4613      	mov	r3, r2
 8009b58:	009b      	lsls	r3, r3, #2
 8009b5a:	4413      	add	r3, r2
 8009b5c:	009b      	lsls	r3, r3, #2
 8009b5e:	4a1f      	ldr	r2, [pc, #124]	; (8009bdc <xTaskPriorityInherit+0xc8>)
 8009b60:	4413      	add	r3, r2
 8009b62:	4299      	cmp	r1, r3
 8009b64:	d122      	bne.n	8009bac <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009b66:	68bb      	ldr	r3, [r7, #8]
 8009b68:	3304      	adds	r3, #4
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	f7fe f95e 	bl	8007e2c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009b70:	4b19      	ldr	r3, [pc, #100]	; (8009bd8 <xTaskPriorityInherit+0xc4>)
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b76:	68bb      	ldr	r3, [r7, #8]
 8009b78:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009b7a:	68bb      	ldr	r3, [r7, #8]
 8009b7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b7e:	4b18      	ldr	r3, [pc, #96]	; (8009be0 <xTaskPriorityInherit+0xcc>)
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	429a      	cmp	r2, r3
 8009b84:	d903      	bls.n	8009b8e <xTaskPriorityInherit+0x7a>
 8009b86:	68bb      	ldr	r3, [r7, #8]
 8009b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b8a:	4a15      	ldr	r2, [pc, #84]	; (8009be0 <xTaskPriorityInherit+0xcc>)
 8009b8c:	6013      	str	r3, [r2, #0]
 8009b8e:	68bb      	ldr	r3, [r7, #8]
 8009b90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b92:	4613      	mov	r3, r2
 8009b94:	009b      	lsls	r3, r3, #2
 8009b96:	4413      	add	r3, r2
 8009b98:	009b      	lsls	r3, r3, #2
 8009b9a:	4a10      	ldr	r2, [pc, #64]	; (8009bdc <xTaskPriorityInherit+0xc8>)
 8009b9c:	441a      	add	r2, r3
 8009b9e:	68bb      	ldr	r3, [r7, #8]
 8009ba0:	3304      	adds	r3, #4
 8009ba2:	4619      	mov	r1, r3
 8009ba4:	4610      	mov	r0, r2
 8009ba6:	f7fe f8e4 	bl	8007d72 <vListInsertEnd>
 8009baa:	e004      	b.n	8009bb6 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009bac:	4b0a      	ldr	r3, [pc, #40]	; (8009bd8 <xTaskPriorityInherit+0xc4>)
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bb2:	68bb      	ldr	r3, [r7, #8]
 8009bb4:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009bb6:	2301      	movs	r3, #1
 8009bb8:	60fb      	str	r3, [r7, #12]
 8009bba:	e008      	b.n	8009bce <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009bbc:	68bb      	ldr	r3, [r7, #8]
 8009bbe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009bc0:	4b05      	ldr	r3, [pc, #20]	; (8009bd8 <xTaskPriorityInherit+0xc4>)
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bc6:	429a      	cmp	r2, r3
 8009bc8:	d201      	bcs.n	8009bce <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009bca:	2301      	movs	r3, #1
 8009bcc:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009bce:	68fb      	ldr	r3, [r7, #12]
	}
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	3710      	adds	r7, #16
 8009bd4:	46bd      	mov	sp, r7
 8009bd6:	bd80      	pop	{r7, pc}
 8009bd8:	20001b2c 	.word	0x20001b2c
 8009bdc:	20001b30 	.word	0x20001b30
 8009be0:	20002008 	.word	0x20002008

08009be4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009be4:	b580      	push	{r7, lr}
 8009be6:	b086      	sub	sp, #24
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009bf0:	2300      	movs	r3, #0
 8009bf2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d056      	beq.n	8009ca8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009bfa:	4b2e      	ldr	r3, [pc, #184]	; (8009cb4 <xTaskPriorityDisinherit+0xd0>)
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	693a      	ldr	r2, [r7, #16]
 8009c00:	429a      	cmp	r2, r3
 8009c02:	d00a      	beq.n	8009c1a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c08:	f383 8811 	msr	BASEPRI, r3
 8009c0c:	f3bf 8f6f 	isb	sy
 8009c10:	f3bf 8f4f 	dsb	sy
 8009c14:	60fb      	str	r3, [r7, #12]
}
 8009c16:	bf00      	nop
 8009c18:	e7fe      	b.n	8009c18 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009c1a:	693b      	ldr	r3, [r7, #16]
 8009c1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d10a      	bne.n	8009c38 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c26:	f383 8811 	msr	BASEPRI, r3
 8009c2a:	f3bf 8f6f 	isb	sy
 8009c2e:	f3bf 8f4f 	dsb	sy
 8009c32:	60bb      	str	r3, [r7, #8]
}
 8009c34:	bf00      	nop
 8009c36:	e7fe      	b.n	8009c36 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009c38:	693b      	ldr	r3, [r7, #16]
 8009c3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c3c:	1e5a      	subs	r2, r3, #1
 8009c3e:	693b      	ldr	r3, [r7, #16]
 8009c40:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009c42:	693b      	ldr	r3, [r7, #16]
 8009c44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c46:	693b      	ldr	r3, [r7, #16]
 8009c48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c4a:	429a      	cmp	r2, r3
 8009c4c:	d02c      	beq.n	8009ca8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009c4e:	693b      	ldr	r3, [r7, #16]
 8009c50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d128      	bne.n	8009ca8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009c56:	693b      	ldr	r3, [r7, #16]
 8009c58:	3304      	adds	r3, #4
 8009c5a:	4618      	mov	r0, r3
 8009c5c:	f7fe f8e6 	bl	8007e2c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009c60:	693b      	ldr	r3, [r7, #16]
 8009c62:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009c64:	693b      	ldr	r3, [r7, #16]
 8009c66:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009c68:	693b      	ldr	r3, [r7, #16]
 8009c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c6c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009c70:	693b      	ldr	r3, [r7, #16]
 8009c72:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009c74:	693b      	ldr	r3, [r7, #16]
 8009c76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c78:	4b0f      	ldr	r3, [pc, #60]	; (8009cb8 <xTaskPriorityDisinherit+0xd4>)
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	429a      	cmp	r2, r3
 8009c7e:	d903      	bls.n	8009c88 <xTaskPriorityDisinherit+0xa4>
 8009c80:	693b      	ldr	r3, [r7, #16]
 8009c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c84:	4a0c      	ldr	r2, [pc, #48]	; (8009cb8 <xTaskPriorityDisinherit+0xd4>)
 8009c86:	6013      	str	r3, [r2, #0]
 8009c88:	693b      	ldr	r3, [r7, #16]
 8009c8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c8c:	4613      	mov	r3, r2
 8009c8e:	009b      	lsls	r3, r3, #2
 8009c90:	4413      	add	r3, r2
 8009c92:	009b      	lsls	r3, r3, #2
 8009c94:	4a09      	ldr	r2, [pc, #36]	; (8009cbc <xTaskPriorityDisinherit+0xd8>)
 8009c96:	441a      	add	r2, r3
 8009c98:	693b      	ldr	r3, [r7, #16]
 8009c9a:	3304      	adds	r3, #4
 8009c9c:	4619      	mov	r1, r3
 8009c9e:	4610      	mov	r0, r2
 8009ca0:	f7fe f867 	bl	8007d72 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009ca4:	2301      	movs	r3, #1
 8009ca6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009ca8:	697b      	ldr	r3, [r7, #20]
	}
 8009caa:	4618      	mov	r0, r3
 8009cac:	3718      	adds	r7, #24
 8009cae:	46bd      	mov	sp, r7
 8009cb0:	bd80      	pop	{r7, pc}
 8009cb2:	bf00      	nop
 8009cb4:	20001b2c 	.word	0x20001b2c
 8009cb8:	20002008 	.word	0x20002008
 8009cbc:	20001b30 	.word	0x20001b30

08009cc0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009cc0:	b580      	push	{r7, lr}
 8009cc2:	b088      	sub	sp, #32
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	6078      	str	r0, [r7, #4]
 8009cc8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009cce:	2301      	movs	r3, #1
 8009cd0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d06a      	beq.n	8009dae <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009cd8:	69bb      	ldr	r3, [r7, #24]
 8009cda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d10a      	bne.n	8009cf6 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8009ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ce4:	f383 8811 	msr	BASEPRI, r3
 8009ce8:	f3bf 8f6f 	isb	sy
 8009cec:	f3bf 8f4f 	dsb	sy
 8009cf0:	60fb      	str	r3, [r7, #12]
}
 8009cf2:	bf00      	nop
 8009cf4:	e7fe      	b.n	8009cf4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009cf6:	69bb      	ldr	r3, [r7, #24]
 8009cf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009cfa:	683a      	ldr	r2, [r7, #0]
 8009cfc:	429a      	cmp	r2, r3
 8009cfe:	d902      	bls.n	8009d06 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009d00:	683b      	ldr	r3, [r7, #0]
 8009d02:	61fb      	str	r3, [r7, #28]
 8009d04:	e002      	b.n	8009d0c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8009d06:	69bb      	ldr	r3, [r7, #24]
 8009d08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d0a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009d0c:	69bb      	ldr	r3, [r7, #24]
 8009d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d10:	69fa      	ldr	r2, [r7, #28]
 8009d12:	429a      	cmp	r2, r3
 8009d14:	d04b      	beq.n	8009dae <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009d16:	69bb      	ldr	r3, [r7, #24]
 8009d18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d1a:	697a      	ldr	r2, [r7, #20]
 8009d1c:	429a      	cmp	r2, r3
 8009d1e:	d146      	bne.n	8009dae <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8009d20:	4b25      	ldr	r3, [pc, #148]	; (8009db8 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	69ba      	ldr	r2, [r7, #24]
 8009d26:	429a      	cmp	r2, r3
 8009d28:	d10a      	bne.n	8009d40 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8009d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d2e:	f383 8811 	msr	BASEPRI, r3
 8009d32:	f3bf 8f6f 	isb	sy
 8009d36:	f3bf 8f4f 	dsb	sy
 8009d3a:	60bb      	str	r3, [r7, #8]
}
 8009d3c:	bf00      	nop
 8009d3e:	e7fe      	b.n	8009d3e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009d40:	69bb      	ldr	r3, [r7, #24]
 8009d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d44:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8009d46:	69bb      	ldr	r3, [r7, #24]
 8009d48:	69fa      	ldr	r2, [r7, #28]
 8009d4a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009d4c:	69bb      	ldr	r3, [r7, #24]
 8009d4e:	699b      	ldr	r3, [r3, #24]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	db04      	blt.n	8009d5e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009d54:	69fb      	ldr	r3, [r7, #28]
 8009d56:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009d5a:	69bb      	ldr	r3, [r7, #24]
 8009d5c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009d5e:	69bb      	ldr	r3, [r7, #24]
 8009d60:	6959      	ldr	r1, [r3, #20]
 8009d62:	693a      	ldr	r2, [r7, #16]
 8009d64:	4613      	mov	r3, r2
 8009d66:	009b      	lsls	r3, r3, #2
 8009d68:	4413      	add	r3, r2
 8009d6a:	009b      	lsls	r3, r3, #2
 8009d6c:	4a13      	ldr	r2, [pc, #76]	; (8009dbc <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8009d6e:	4413      	add	r3, r2
 8009d70:	4299      	cmp	r1, r3
 8009d72:	d11c      	bne.n	8009dae <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009d74:	69bb      	ldr	r3, [r7, #24]
 8009d76:	3304      	adds	r3, #4
 8009d78:	4618      	mov	r0, r3
 8009d7a:	f7fe f857 	bl	8007e2c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8009d7e:	69bb      	ldr	r3, [r7, #24]
 8009d80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d82:	4b0f      	ldr	r3, [pc, #60]	; (8009dc0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	429a      	cmp	r2, r3
 8009d88:	d903      	bls.n	8009d92 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8009d8a:	69bb      	ldr	r3, [r7, #24]
 8009d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d8e:	4a0c      	ldr	r2, [pc, #48]	; (8009dc0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009d90:	6013      	str	r3, [r2, #0]
 8009d92:	69bb      	ldr	r3, [r7, #24]
 8009d94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d96:	4613      	mov	r3, r2
 8009d98:	009b      	lsls	r3, r3, #2
 8009d9a:	4413      	add	r3, r2
 8009d9c:	009b      	lsls	r3, r3, #2
 8009d9e:	4a07      	ldr	r2, [pc, #28]	; (8009dbc <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8009da0:	441a      	add	r2, r3
 8009da2:	69bb      	ldr	r3, [r7, #24]
 8009da4:	3304      	adds	r3, #4
 8009da6:	4619      	mov	r1, r3
 8009da8:	4610      	mov	r0, r2
 8009daa:	f7fd ffe2 	bl	8007d72 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009dae:	bf00      	nop
 8009db0:	3720      	adds	r7, #32
 8009db2:	46bd      	mov	sp, r7
 8009db4:	bd80      	pop	{r7, pc}
 8009db6:	bf00      	nop
 8009db8:	20001b2c 	.word	0x20001b2c
 8009dbc:	20001b30 	.word	0x20001b30
 8009dc0:	20002008 	.word	0x20002008

08009dc4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8009dc4:	b480      	push	{r7}
 8009dc6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009dc8:	4b07      	ldr	r3, [pc, #28]	; (8009de8 <pvTaskIncrementMutexHeldCount+0x24>)
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d004      	beq.n	8009dda <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009dd0:	4b05      	ldr	r3, [pc, #20]	; (8009de8 <pvTaskIncrementMutexHeldCount+0x24>)
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009dd6:	3201      	adds	r2, #1
 8009dd8:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8009dda:	4b03      	ldr	r3, [pc, #12]	; (8009de8 <pvTaskIncrementMutexHeldCount+0x24>)
 8009ddc:	681b      	ldr	r3, [r3, #0]
	}
 8009dde:	4618      	mov	r0, r3
 8009de0:	46bd      	mov	sp, r7
 8009de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de6:	4770      	bx	lr
 8009de8:	20001b2c 	.word	0x20001b2c

08009dec <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b084      	sub	sp, #16
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
 8009df4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009df6:	4b21      	ldr	r3, [pc, #132]	; (8009e7c <prvAddCurrentTaskToDelayedList+0x90>)
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009dfc:	4b20      	ldr	r3, [pc, #128]	; (8009e80 <prvAddCurrentTaskToDelayedList+0x94>)
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	3304      	adds	r3, #4
 8009e02:	4618      	mov	r0, r3
 8009e04:	f7fe f812 	bl	8007e2c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e0e:	d10a      	bne.n	8009e26 <prvAddCurrentTaskToDelayedList+0x3a>
 8009e10:	683b      	ldr	r3, [r7, #0]
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d007      	beq.n	8009e26 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009e16:	4b1a      	ldr	r3, [pc, #104]	; (8009e80 <prvAddCurrentTaskToDelayedList+0x94>)
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	3304      	adds	r3, #4
 8009e1c:	4619      	mov	r1, r3
 8009e1e:	4819      	ldr	r0, [pc, #100]	; (8009e84 <prvAddCurrentTaskToDelayedList+0x98>)
 8009e20:	f7fd ffa7 	bl	8007d72 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009e24:	e026      	b.n	8009e74 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009e26:	68fa      	ldr	r2, [r7, #12]
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	4413      	add	r3, r2
 8009e2c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009e2e:	4b14      	ldr	r3, [pc, #80]	; (8009e80 <prvAddCurrentTaskToDelayedList+0x94>)
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	68ba      	ldr	r2, [r7, #8]
 8009e34:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009e36:	68ba      	ldr	r2, [r7, #8]
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	429a      	cmp	r2, r3
 8009e3c:	d209      	bcs.n	8009e52 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009e3e:	4b12      	ldr	r3, [pc, #72]	; (8009e88 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009e40:	681a      	ldr	r2, [r3, #0]
 8009e42:	4b0f      	ldr	r3, [pc, #60]	; (8009e80 <prvAddCurrentTaskToDelayedList+0x94>)
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	3304      	adds	r3, #4
 8009e48:	4619      	mov	r1, r3
 8009e4a:	4610      	mov	r0, r2
 8009e4c:	f7fd ffb5 	bl	8007dba <vListInsert>
}
 8009e50:	e010      	b.n	8009e74 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009e52:	4b0e      	ldr	r3, [pc, #56]	; (8009e8c <prvAddCurrentTaskToDelayedList+0xa0>)
 8009e54:	681a      	ldr	r2, [r3, #0]
 8009e56:	4b0a      	ldr	r3, [pc, #40]	; (8009e80 <prvAddCurrentTaskToDelayedList+0x94>)
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	3304      	adds	r3, #4
 8009e5c:	4619      	mov	r1, r3
 8009e5e:	4610      	mov	r0, r2
 8009e60:	f7fd ffab 	bl	8007dba <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009e64:	4b0a      	ldr	r3, [pc, #40]	; (8009e90 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	68ba      	ldr	r2, [r7, #8]
 8009e6a:	429a      	cmp	r2, r3
 8009e6c:	d202      	bcs.n	8009e74 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009e6e:	4a08      	ldr	r2, [pc, #32]	; (8009e90 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009e70:	68bb      	ldr	r3, [r7, #8]
 8009e72:	6013      	str	r3, [r2, #0]
}
 8009e74:	bf00      	nop
 8009e76:	3710      	adds	r7, #16
 8009e78:	46bd      	mov	sp, r7
 8009e7a:	bd80      	pop	{r7, pc}
 8009e7c:	20002004 	.word	0x20002004
 8009e80:	20001b2c 	.word	0x20001b2c
 8009e84:	20001fec 	.word	0x20001fec
 8009e88:	20001fbc 	.word	0x20001fbc
 8009e8c:	20001fb8 	.word	0x20001fb8
 8009e90:	20002020 	.word	0x20002020

08009e94 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009e94:	b580      	push	{r7, lr}
 8009e96:	b08a      	sub	sp, #40	; 0x28
 8009e98:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009e9a:	2300      	movs	r3, #0
 8009e9c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009e9e:	f000 fba1 	bl	800a5e4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009ea2:	4b1c      	ldr	r3, [pc, #112]	; (8009f14 <xTimerCreateTimerTask+0x80>)
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d021      	beq.n	8009eee <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009eaa:	2300      	movs	r3, #0
 8009eac:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009eae:	2300      	movs	r3, #0
 8009eb0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009eb2:	1d3a      	adds	r2, r7, #4
 8009eb4:	f107 0108 	add.w	r1, r7, #8
 8009eb8:	f107 030c 	add.w	r3, r7, #12
 8009ebc:	4618      	mov	r0, r3
 8009ebe:	f7fd ff11 	bl	8007ce4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009ec2:	6879      	ldr	r1, [r7, #4]
 8009ec4:	68bb      	ldr	r3, [r7, #8]
 8009ec6:	68fa      	ldr	r2, [r7, #12]
 8009ec8:	9202      	str	r2, [sp, #8]
 8009eca:	9301      	str	r3, [sp, #4]
 8009ecc:	2302      	movs	r3, #2
 8009ece:	9300      	str	r3, [sp, #0]
 8009ed0:	2300      	movs	r3, #0
 8009ed2:	460a      	mov	r2, r1
 8009ed4:	4910      	ldr	r1, [pc, #64]	; (8009f18 <xTimerCreateTimerTask+0x84>)
 8009ed6:	4811      	ldr	r0, [pc, #68]	; (8009f1c <xTimerCreateTimerTask+0x88>)
 8009ed8:	f7fe ffe0 	bl	8008e9c <xTaskCreateStatic>
 8009edc:	4603      	mov	r3, r0
 8009ede:	4a10      	ldr	r2, [pc, #64]	; (8009f20 <xTimerCreateTimerTask+0x8c>)
 8009ee0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009ee2:	4b0f      	ldr	r3, [pc, #60]	; (8009f20 <xTimerCreateTimerTask+0x8c>)
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d001      	beq.n	8009eee <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009eea:	2301      	movs	r3, #1
 8009eec:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009eee:	697b      	ldr	r3, [r7, #20]
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d10a      	bne.n	8009f0a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ef8:	f383 8811 	msr	BASEPRI, r3
 8009efc:	f3bf 8f6f 	isb	sy
 8009f00:	f3bf 8f4f 	dsb	sy
 8009f04:	613b      	str	r3, [r7, #16]
}
 8009f06:	bf00      	nop
 8009f08:	e7fe      	b.n	8009f08 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009f0a:	697b      	ldr	r3, [r7, #20]
}
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	3718      	adds	r7, #24
 8009f10:	46bd      	mov	sp, r7
 8009f12:	bd80      	pop	{r7, pc}
 8009f14:	2000205c 	.word	0x2000205c
 8009f18:	0800bbb4 	.word	0x0800bbb4
 8009f1c:	0800a18d 	.word	0x0800a18d
 8009f20:	20002060 	.word	0x20002060

08009f24 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8009f24:	b580      	push	{r7, lr}
 8009f26:	b088      	sub	sp, #32
 8009f28:	af02      	add	r7, sp, #8
 8009f2a:	60f8      	str	r0, [r7, #12]
 8009f2c:	60b9      	str	r1, [r7, #8]
 8009f2e:	607a      	str	r2, [r7, #4]
 8009f30:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8009f32:	202c      	movs	r0, #44	; 0x2c
 8009f34:	f000 fe08 	bl	800ab48 <pvPortMalloc>
 8009f38:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8009f3a:	697b      	ldr	r3, [r7, #20]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d00d      	beq.n	8009f5c <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8009f40:	697b      	ldr	r3, [r7, #20]
 8009f42:	2200      	movs	r2, #0
 8009f44:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8009f48:	697b      	ldr	r3, [r7, #20]
 8009f4a:	9301      	str	r3, [sp, #4]
 8009f4c:	6a3b      	ldr	r3, [r7, #32]
 8009f4e:	9300      	str	r3, [sp, #0]
 8009f50:	683b      	ldr	r3, [r7, #0]
 8009f52:	687a      	ldr	r2, [r7, #4]
 8009f54:	68b9      	ldr	r1, [r7, #8]
 8009f56:	68f8      	ldr	r0, [r7, #12]
 8009f58:	f000 f843 	bl	8009fe2 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8009f5c:	697b      	ldr	r3, [r7, #20]
	}
 8009f5e:	4618      	mov	r0, r3
 8009f60:	3718      	adds	r7, #24
 8009f62:	46bd      	mov	sp, r7
 8009f64:	bd80      	pop	{r7, pc}

08009f66 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8009f66:	b580      	push	{r7, lr}
 8009f68:	b08a      	sub	sp, #40	; 0x28
 8009f6a:	af02      	add	r7, sp, #8
 8009f6c:	60f8      	str	r0, [r7, #12]
 8009f6e:	60b9      	str	r1, [r7, #8]
 8009f70:	607a      	str	r2, [r7, #4]
 8009f72:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8009f74:	232c      	movs	r3, #44	; 0x2c
 8009f76:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8009f78:	693b      	ldr	r3, [r7, #16]
 8009f7a:	2b2c      	cmp	r3, #44	; 0x2c
 8009f7c:	d00a      	beq.n	8009f94 <xTimerCreateStatic+0x2e>
	__asm volatile
 8009f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f82:	f383 8811 	msr	BASEPRI, r3
 8009f86:	f3bf 8f6f 	isb	sy
 8009f8a:	f3bf 8f4f 	dsb	sy
 8009f8e:	61bb      	str	r3, [r7, #24]
}
 8009f90:	bf00      	nop
 8009f92:	e7fe      	b.n	8009f92 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009f94:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8009f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d10a      	bne.n	8009fb2 <xTimerCreateStatic+0x4c>
	__asm volatile
 8009f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fa0:	f383 8811 	msr	BASEPRI, r3
 8009fa4:	f3bf 8f6f 	isb	sy
 8009fa8:	f3bf 8f4f 	dsb	sy
 8009fac:	617b      	str	r3, [r7, #20]
}
 8009fae:	bf00      	nop
 8009fb0:	e7fe      	b.n	8009fb0 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8009fb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fb4:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8009fb6:	69fb      	ldr	r3, [r7, #28]
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d00d      	beq.n	8009fd8 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8009fbc:	69fb      	ldr	r3, [r7, #28]
 8009fbe:	2202      	movs	r2, #2
 8009fc0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8009fc4:	69fb      	ldr	r3, [r7, #28]
 8009fc6:	9301      	str	r3, [sp, #4]
 8009fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fca:	9300      	str	r3, [sp, #0]
 8009fcc:	683b      	ldr	r3, [r7, #0]
 8009fce:	687a      	ldr	r2, [r7, #4]
 8009fd0:	68b9      	ldr	r1, [r7, #8]
 8009fd2:	68f8      	ldr	r0, [r7, #12]
 8009fd4:	f000 f805 	bl	8009fe2 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8009fd8:	69fb      	ldr	r3, [r7, #28]
	}
 8009fda:	4618      	mov	r0, r3
 8009fdc:	3720      	adds	r7, #32
 8009fde:	46bd      	mov	sp, r7
 8009fe0:	bd80      	pop	{r7, pc}

08009fe2 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8009fe2:	b580      	push	{r7, lr}
 8009fe4:	b086      	sub	sp, #24
 8009fe6:	af00      	add	r7, sp, #0
 8009fe8:	60f8      	str	r0, [r7, #12]
 8009fea:	60b9      	str	r1, [r7, #8]
 8009fec:	607a      	str	r2, [r7, #4]
 8009fee:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8009ff0:	68bb      	ldr	r3, [r7, #8]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d10a      	bne.n	800a00c <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8009ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ffa:	f383 8811 	msr	BASEPRI, r3
 8009ffe:	f3bf 8f6f 	isb	sy
 800a002:	f3bf 8f4f 	dsb	sy
 800a006:	617b      	str	r3, [r7, #20]
}
 800a008:	bf00      	nop
 800a00a:	e7fe      	b.n	800a00a <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800a00c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d01e      	beq.n	800a050 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800a012:	f000 fae7 	bl	800a5e4 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800a016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a018:	68fa      	ldr	r2, [r7, #12]
 800a01a:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800a01c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a01e:	68ba      	ldr	r2, [r7, #8]
 800a020:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800a022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a024:	683a      	ldr	r2, [r7, #0]
 800a026:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800a028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a02a:	6a3a      	ldr	r2, [r7, #32]
 800a02c:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800a02e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a030:	3304      	adds	r3, #4
 800a032:	4618      	mov	r0, r3
 800a034:	f7fd fe90 	bl	8007d58 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d008      	beq.n	800a050 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800a03e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a040:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a044:	f043 0304 	orr.w	r3, r3, #4
 800a048:	b2da      	uxtb	r2, r3
 800a04a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a04c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800a050:	bf00      	nop
 800a052:	3718      	adds	r7, #24
 800a054:	46bd      	mov	sp, r7
 800a056:	bd80      	pop	{r7, pc}

0800a058 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a058:	b580      	push	{r7, lr}
 800a05a:	b08a      	sub	sp, #40	; 0x28
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	60f8      	str	r0, [r7, #12]
 800a060:	60b9      	str	r1, [r7, #8]
 800a062:	607a      	str	r2, [r7, #4]
 800a064:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a066:	2300      	movs	r3, #0
 800a068:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d10a      	bne.n	800a086 <xTimerGenericCommand+0x2e>
	__asm volatile
 800a070:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a074:	f383 8811 	msr	BASEPRI, r3
 800a078:	f3bf 8f6f 	isb	sy
 800a07c:	f3bf 8f4f 	dsb	sy
 800a080:	623b      	str	r3, [r7, #32]
}
 800a082:	bf00      	nop
 800a084:	e7fe      	b.n	800a084 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a086:	4b1a      	ldr	r3, [pc, #104]	; (800a0f0 <xTimerGenericCommand+0x98>)
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d02a      	beq.n	800a0e4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a08e:	68bb      	ldr	r3, [r7, #8]
 800a090:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a09a:	68bb      	ldr	r3, [r7, #8]
 800a09c:	2b05      	cmp	r3, #5
 800a09e:	dc18      	bgt.n	800a0d2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a0a0:	f7ff fd1a 	bl	8009ad8 <xTaskGetSchedulerState>
 800a0a4:	4603      	mov	r3, r0
 800a0a6:	2b02      	cmp	r3, #2
 800a0a8:	d109      	bne.n	800a0be <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a0aa:	4b11      	ldr	r3, [pc, #68]	; (800a0f0 <xTimerGenericCommand+0x98>)
 800a0ac:	6818      	ldr	r0, [r3, #0]
 800a0ae:	f107 0110 	add.w	r1, r7, #16
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a0b6:	f7fe f88b 	bl	80081d0 <xQueueGenericSend>
 800a0ba:	6278      	str	r0, [r7, #36]	; 0x24
 800a0bc:	e012      	b.n	800a0e4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a0be:	4b0c      	ldr	r3, [pc, #48]	; (800a0f0 <xTimerGenericCommand+0x98>)
 800a0c0:	6818      	ldr	r0, [r3, #0]
 800a0c2:	f107 0110 	add.w	r1, r7, #16
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	2200      	movs	r2, #0
 800a0ca:	f7fe f881 	bl	80081d0 <xQueueGenericSend>
 800a0ce:	6278      	str	r0, [r7, #36]	; 0x24
 800a0d0:	e008      	b.n	800a0e4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a0d2:	4b07      	ldr	r3, [pc, #28]	; (800a0f0 <xTimerGenericCommand+0x98>)
 800a0d4:	6818      	ldr	r0, [r3, #0]
 800a0d6:	f107 0110 	add.w	r1, r7, #16
 800a0da:	2300      	movs	r3, #0
 800a0dc:	683a      	ldr	r2, [r7, #0]
 800a0de:	f7fe f975 	bl	80083cc <xQueueGenericSendFromISR>
 800a0e2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a0e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	3728      	adds	r7, #40	; 0x28
 800a0ea:	46bd      	mov	sp, r7
 800a0ec:	bd80      	pop	{r7, pc}
 800a0ee:	bf00      	nop
 800a0f0:	2000205c 	.word	0x2000205c

0800a0f4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a0f4:	b580      	push	{r7, lr}
 800a0f6:	b088      	sub	sp, #32
 800a0f8:	af02      	add	r7, sp, #8
 800a0fa:	6078      	str	r0, [r7, #4]
 800a0fc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a0fe:	4b22      	ldr	r3, [pc, #136]	; (800a188 <prvProcessExpiredTimer+0x94>)
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	68db      	ldr	r3, [r3, #12]
 800a104:	68db      	ldr	r3, [r3, #12]
 800a106:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a108:	697b      	ldr	r3, [r7, #20]
 800a10a:	3304      	adds	r3, #4
 800a10c:	4618      	mov	r0, r3
 800a10e:	f7fd fe8d 	bl	8007e2c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a112:	697b      	ldr	r3, [r7, #20]
 800a114:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a118:	f003 0304 	and.w	r3, r3, #4
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d022      	beq.n	800a166 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a120:	697b      	ldr	r3, [r7, #20]
 800a122:	699a      	ldr	r2, [r3, #24]
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	18d1      	adds	r1, r2, r3
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	683a      	ldr	r2, [r7, #0]
 800a12c:	6978      	ldr	r0, [r7, #20]
 800a12e:	f000 f8d1 	bl	800a2d4 <prvInsertTimerInActiveList>
 800a132:	4603      	mov	r3, r0
 800a134:	2b00      	cmp	r3, #0
 800a136:	d01f      	beq.n	800a178 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a138:	2300      	movs	r3, #0
 800a13a:	9300      	str	r3, [sp, #0]
 800a13c:	2300      	movs	r3, #0
 800a13e:	687a      	ldr	r2, [r7, #4]
 800a140:	2100      	movs	r1, #0
 800a142:	6978      	ldr	r0, [r7, #20]
 800a144:	f7ff ff88 	bl	800a058 <xTimerGenericCommand>
 800a148:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a14a:	693b      	ldr	r3, [r7, #16]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d113      	bne.n	800a178 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800a150:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a154:	f383 8811 	msr	BASEPRI, r3
 800a158:	f3bf 8f6f 	isb	sy
 800a15c:	f3bf 8f4f 	dsb	sy
 800a160:	60fb      	str	r3, [r7, #12]
}
 800a162:	bf00      	nop
 800a164:	e7fe      	b.n	800a164 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a166:	697b      	ldr	r3, [r7, #20]
 800a168:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a16c:	f023 0301 	bic.w	r3, r3, #1
 800a170:	b2da      	uxtb	r2, r3
 800a172:	697b      	ldr	r3, [r7, #20]
 800a174:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a178:	697b      	ldr	r3, [r7, #20]
 800a17a:	6a1b      	ldr	r3, [r3, #32]
 800a17c:	6978      	ldr	r0, [r7, #20]
 800a17e:	4798      	blx	r3
}
 800a180:	bf00      	nop
 800a182:	3718      	adds	r7, #24
 800a184:	46bd      	mov	sp, r7
 800a186:	bd80      	pop	{r7, pc}
 800a188:	20002054 	.word	0x20002054

0800a18c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a18c:	b580      	push	{r7, lr}
 800a18e:	b084      	sub	sp, #16
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a194:	f107 0308 	add.w	r3, r7, #8
 800a198:	4618      	mov	r0, r3
 800a19a:	f000 f857 	bl	800a24c <prvGetNextExpireTime>
 800a19e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a1a0:	68bb      	ldr	r3, [r7, #8]
 800a1a2:	4619      	mov	r1, r3
 800a1a4:	68f8      	ldr	r0, [r7, #12]
 800a1a6:	f000 f803 	bl	800a1b0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a1aa:	f000 f8d5 	bl	800a358 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a1ae:	e7f1      	b.n	800a194 <prvTimerTask+0x8>

0800a1b0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a1b0:	b580      	push	{r7, lr}
 800a1b2:	b084      	sub	sp, #16
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	6078      	str	r0, [r7, #4]
 800a1b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a1ba:	f7ff f8ab 	bl	8009314 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a1be:	f107 0308 	add.w	r3, r7, #8
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	f000 f866 	bl	800a294 <prvSampleTimeNow>
 800a1c8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a1ca:	68bb      	ldr	r3, [r7, #8]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d130      	bne.n	800a232 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a1d0:	683b      	ldr	r3, [r7, #0]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d10a      	bne.n	800a1ec <prvProcessTimerOrBlockTask+0x3c>
 800a1d6:	687a      	ldr	r2, [r7, #4]
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	429a      	cmp	r2, r3
 800a1dc:	d806      	bhi.n	800a1ec <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a1de:	f7ff f8a7 	bl	8009330 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a1e2:	68f9      	ldr	r1, [r7, #12]
 800a1e4:	6878      	ldr	r0, [r7, #4]
 800a1e6:	f7ff ff85 	bl	800a0f4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a1ea:	e024      	b.n	800a236 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a1ec:	683b      	ldr	r3, [r7, #0]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d008      	beq.n	800a204 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a1f2:	4b13      	ldr	r3, [pc, #76]	; (800a240 <prvProcessTimerOrBlockTask+0x90>)
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d101      	bne.n	800a200 <prvProcessTimerOrBlockTask+0x50>
 800a1fc:	2301      	movs	r3, #1
 800a1fe:	e000      	b.n	800a202 <prvProcessTimerOrBlockTask+0x52>
 800a200:	2300      	movs	r3, #0
 800a202:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a204:	4b0f      	ldr	r3, [pc, #60]	; (800a244 <prvProcessTimerOrBlockTask+0x94>)
 800a206:	6818      	ldr	r0, [r3, #0]
 800a208:	687a      	ldr	r2, [r7, #4]
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	1ad3      	subs	r3, r2, r3
 800a20e:	683a      	ldr	r2, [r7, #0]
 800a210:	4619      	mov	r1, r3
 800a212:	f7fe fe0f 	bl	8008e34 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a216:	f7ff f88b 	bl	8009330 <xTaskResumeAll>
 800a21a:	4603      	mov	r3, r0
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d10a      	bne.n	800a236 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a220:	4b09      	ldr	r3, [pc, #36]	; (800a248 <prvProcessTimerOrBlockTask+0x98>)
 800a222:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a226:	601a      	str	r2, [r3, #0]
 800a228:	f3bf 8f4f 	dsb	sy
 800a22c:	f3bf 8f6f 	isb	sy
}
 800a230:	e001      	b.n	800a236 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a232:	f7ff f87d 	bl	8009330 <xTaskResumeAll>
}
 800a236:	bf00      	nop
 800a238:	3710      	adds	r7, #16
 800a23a:	46bd      	mov	sp, r7
 800a23c:	bd80      	pop	{r7, pc}
 800a23e:	bf00      	nop
 800a240:	20002058 	.word	0x20002058
 800a244:	2000205c 	.word	0x2000205c
 800a248:	e000ed04 	.word	0xe000ed04

0800a24c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a24c:	b480      	push	{r7}
 800a24e:	b085      	sub	sp, #20
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a254:	4b0e      	ldr	r3, [pc, #56]	; (800a290 <prvGetNextExpireTime+0x44>)
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d101      	bne.n	800a262 <prvGetNextExpireTime+0x16>
 800a25e:	2201      	movs	r2, #1
 800a260:	e000      	b.n	800a264 <prvGetNextExpireTime+0x18>
 800a262:	2200      	movs	r2, #0
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d105      	bne.n	800a27c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a270:	4b07      	ldr	r3, [pc, #28]	; (800a290 <prvGetNextExpireTime+0x44>)
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	68db      	ldr	r3, [r3, #12]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	60fb      	str	r3, [r7, #12]
 800a27a:	e001      	b.n	800a280 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a27c:	2300      	movs	r3, #0
 800a27e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a280:	68fb      	ldr	r3, [r7, #12]
}
 800a282:	4618      	mov	r0, r3
 800a284:	3714      	adds	r7, #20
 800a286:	46bd      	mov	sp, r7
 800a288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28c:	4770      	bx	lr
 800a28e:	bf00      	nop
 800a290:	20002054 	.word	0x20002054

0800a294 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a294:	b580      	push	{r7, lr}
 800a296:	b084      	sub	sp, #16
 800a298:	af00      	add	r7, sp, #0
 800a29a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a29c:	f7ff f8e6 	bl	800946c <xTaskGetTickCount>
 800a2a0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a2a2:	4b0b      	ldr	r3, [pc, #44]	; (800a2d0 <prvSampleTimeNow+0x3c>)
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	68fa      	ldr	r2, [r7, #12]
 800a2a8:	429a      	cmp	r2, r3
 800a2aa:	d205      	bcs.n	800a2b8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a2ac:	f000 f936 	bl	800a51c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	2201      	movs	r2, #1
 800a2b4:	601a      	str	r2, [r3, #0]
 800a2b6:	e002      	b.n	800a2be <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	2200      	movs	r2, #0
 800a2bc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a2be:	4a04      	ldr	r2, [pc, #16]	; (800a2d0 <prvSampleTimeNow+0x3c>)
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a2c4:	68fb      	ldr	r3, [r7, #12]
}
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	3710      	adds	r7, #16
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	bd80      	pop	{r7, pc}
 800a2ce:	bf00      	nop
 800a2d0:	20002064 	.word	0x20002064

0800a2d4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a2d4:	b580      	push	{r7, lr}
 800a2d6:	b086      	sub	sp, #24
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	60f8      	str	r0, [r7, #12]
 800a2dc:	60b9      	str	r1, [r7, #8]
 800a2de:	607a      	str	r2, [r7, #4]
 800a2e0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a2e2:	2300      	movs	r3, #0
 800a2e4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	68ba      	ldr	r2, [r7, #8]
 800a2ea:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	68fa      	ldr	r2, [r7, #12]
 800a2f0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a2f2:	68ba      	ldr	r2, [r7, #8]
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	429a      	cmp	r2, r3
 800a2f8:	d812      	bhi.n	800a320 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a2fa:	687a      	ldr	r2, [r7, #4]
 800a2fc:	683b      	ldr	r3, [r7, #0]
 800a2fe:	1ad2      	subs	r2, r2, r3
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	699b      	ldr	r3, [r3, #24]
 800a304:	429a      	cmp	r2, r3
 800a306:	d302      	bcc.n	800a30e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a308:	2301      	movs	r3, #1
 800a30a:	617b      	str	r3, [r7, #20]
 800a30c:	e01b      	b.n	800a346 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a30e:	4b10      	ldr	r3, [pc, #64]	; (800a350 <prvInsertTimerInActiveList+0x7c>)
 800a310:	681a      	ldr	r2, [r3, #0]
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	3304      	adds	r3, #4
 800a316:	4619      	mov	r1, r3
 800a318:	4610      	mov	r0, r2
 800a31a:	f7fd fd4e 	bl	8007dba <vListInsert>
 800a31e:	e012      	b.n	800a346 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a320:	687a      	ldr	r2, [r7, #4]
 800a322:	683b      	ldr	r3, [r7, #0]
 800a324:	429a      	cmp	r2, r3
 800a326:	d206      	bcs.n	800a336 <prvInsertTimerInActiveList+0x62>
 800a328:	68ba      	ldr	r2, [r7, #8]
 800a32a:	683b      	ldr	r3, [r7, #0]
 800a32c:	429a      	cmp	r2, r3
 800a32e:	d302      	bcc.n	800a336 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a330:	2301      	movs	r3, #1
 800a332:	617b      	str	r3, [r7, #20]
 800a334:	e007      	b.n	800a346 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a336:	4b07      	ldr	r3, [pc, #28]	; (800a354 <prvInsertTimerInActiveList+0x80>)
 800a338:	681a      	ldr	r2, [r3, #0]
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	3304      	adds	r3, #4
 800a33e:	4619      	mov	r1, r3
 800a340:	4610      	mov	r0, r2
 800a342:	f7fd fd3a 	bl	8007dba <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a346:	697b      	ldr	r3, [r7, #20]
}
 800a348:	4618      	mov	r0, r3
 800a34a:	3718      	adds	r7, #24
 800a34c:	46bd      	mov	sp, r7
 800a34e:	bd80      	pop	{r7, pc}
 800a350:	20002058 	.word	0x20002058
 800a354:	20002054 	.word	0x20002054

0800a358 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a358:	b580      	push	{r7, lr}
 800a35a:	b08e      	sub	sp, #56	; 0x38
 800a35c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a35e:	e0ca      	b.n	800a4f6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	2b00      	cmp	r3, #0
 800a364:	da18      	bge.n	800a398 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a366:	1d3b      	adds	r3, r7, #4
 800a368:	3304      	adds	r3, #4
 800a36a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a36c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d10a      	bne.n	800a388 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800a372:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a376:	f383 8811 	msr	BASEPRI, r3
 800a37a:	f3bf 8f6f 	isb	sy
 800a37e:	f3bf 8f4f 	dsb	sy
 800a382:	61fb      	str	r3, [r7, #28]
}
 800a384:	bf00      	nop
 800a386:	e7fe      	b.n	800a386 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a38e:	6850      	ldr	r0, [r2, #4]
 800a390:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a392:	6892      	ldr	r2, [r2, #8]
 800a394:	4611      	mov	r1, r2
 800a396:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	f2c0 80aa 	blt.w	800a4f4 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a3a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3a6:	695b      	ldr	r3, [r3, #20]
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d004      	beq.n	800a3b6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a3ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3ae:	3304      	adds	r3, #4
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	f7fd fd3b 	bl	8007e2c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a3b6:	463b      	mov	r3, r7
 800a3b8:	4618      	mov	r0, r3
 800a3ba:	f7ff ff6b 	bl	800a294 <prvSampleTimeNow>
 800a3be:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	2b09      	cmp	r3, #9
 800a3c4:	f200 8097 	bhi.w	800a4f6 <prvProcessReceivedCommands+0x19e>
 800a3c8:	a201      	add	r2, pc, #4	; (adr r2, 800a3d0 <prvProcessReceivedCommands+0x78>)
 800a3ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3ce:	bf00      	nop
 800a3d0:	0800a3f9 	.word	0x0800a3f9
 800a3d4:	0800a3f9 	.word	0x0800a3f9
 800a3d8:	0800a3f9 	.word	0x0800a3f9
 800a3dc:	0800a46d 	.word	0x0800a46d
 800a3e0:	0800a481 	.word	0x0800a481
 800a3e4:	0800a4cb 	.word	0x0800a4cb
 800a3e8:	0800a3f9 	.word	0x0800a3f9
 800a3ec:	0800a3f9 	.word	0x0800a3f9
 800a3f0:	0800a46d 	.word	0x0800a46d
 800a3f4:	0800a481 	.word	0x0800a481
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a3f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a3fe:	f043 0301 	orr.w	r3, r3, #1
 800a402:	b2da      	uxtb	r2, r3
 800a404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a406:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a40a:	68ba      	ldr	r2, [r7, #8]
 800a40c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a40e:	699b      	ldr	r3, [r3, #24]
 800a410:	18d1      	adds	r1, r2, r3
 800a412:	68bb      	ldr	r3, [r7, #8]
 800a414:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a416:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a418:	f7ff ff5c 	bl	800a2d4 <prvInsertTimerInActiveList>
 800a41c:	4603      	mov	r3, r0
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d069      	beq.n	800a4f6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a424:	6a1b      	ldr	r3, [r3, #32]
 800a426:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a428:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a42a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a42c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a430:	f003 0304 	and.w	r3, r3, #4
 800a434:	2b00      	cmp	r3, #0
 800a436:	d05e      	beq.n	800a4f6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a438:	68ba      	ldr	r2, [r7, #8]
 800a43a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a43c:	699b      	ldr	r3, [r3, #24]
 800a43e:	441a      	add	r2, r3
 800a440:	2300      	movs	r3, #0
 800a442:	9300      	str	r3, [sp, #0]
 800a444:	2300      	movs	r3, #0
 800a446:	2100      	movs	r1, #0
 800a448:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a44a:	f7ff fe05 	bl	800a058 <xTimerGenericCommand>
 800a44e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a450:	6a3b      	ldr	r3, [r7, #32]
 800a452:	2b00      	cmp	r3, #0
 800a454:	d14f      	bne.n	800a4f6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800a456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a45a:	f383 8811 	msr	BASEPRI, r3
 800a45e:	f3bf 8f6f 	isb	sy
 800a462:	f3bf 8f4f 	dsb	sy
 800a466:	61bb      	str	r3, [r7, #24]
}
 800a468:	bf00      	nop
 800a46a:	e7fe      	b.n	800a46a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a46c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a46e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a472:	f023 0301 	bic.w	r3, r3, #1
 800a476:	b2da      	uxtb	r2, r3
 800a478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a47a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a47e:	e03a      	b.n	800a4f6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a482:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a486:	f043 0301 	orr.w	r3, r3, #1
 800a48a:	b2da      	uxtb	r2, r3
 800a48c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a48e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a492:	68ba      	ldr	r2, [r7, #8]
 800a494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a496:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a49a:	699b      	ldr	r3, [r3, #24]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d10a      	bne.n	800a4b6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800a4a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4a4:	f383 8811 	msr	BASEPRI, r3
 800a4a8:	f3bf 8f6f 	isb	sy
 800a4ac:	f3bf 8f4f 	dsb	sy
 800a4b0:	617b      	str	r3, [r7, #20]
}
 800a4b2:	bf00      	nop
 800a4b4:	e7fe      	b.n	800a4b4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a4b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4b8:	699a      	ldr	r2, [r3, #24]
 800a4ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4bc:	18d1      	adds	r1, r2, r3
 800a4be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a4c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a4c4:	f7ff ff06 	bl	800a2d4 <prvInsertTimerInActiveList>
					break;
 800a4c8:	e015      	b.n	800a4f6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a4ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a4d0:	f003 0302 	and.w	r3, r3, #2
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d103      	bne.n	800a4e0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800a4d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a4da:	f000 fc01 	bl	800ace0 <vPortFree>
 800a4de:	e00a      	b.n	800a4f6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a4e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a4e6:	f023 0301 	bic.w	r3, r3, #1
 800a4ea:	b2da      	uxtb	r2, r3
 800a4ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a4f2:	e000      	b.n	800a4f6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800a4f4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a4f6:	4b08      	ldr	r3, [pc, #32]	; (800a518 <prvProcessReceivedCommands+0x1c0>)
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	1d39      	adds	r1, r7, #4
 800a4fc:	2200      	movs	r2, #0
 800a4fe:	4618      	mov	r0, r3
 800a500:	f7fe f88c 	bl	800861c <xQueueReceive>
 800a504:	4603      	mov	r3, r0
 800a506:	2b00      	cmp	r3, #0
 800a508:	f47f af2a 	bne.w	800a360 <prvProcessReceivedCommands+0x8>
	}
}
 800a50c:	bf00      	nop
 800a50e:	bf00      	nop
 800a510:	3730      	adds	r7, #48	; 0x30
 800a512:	46bd      	mov	sp, r7
 800a514:	bd80      	pop	{r7, pc}
 800a516:	bf00      	nop
 800a518:	2000205c 	.word	0x2000205c

0800a51c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a51c:	b580      	push	{r7, lr}
 800a51e:	b088      	sub	sp, #32
 800a520:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a522:	e048      	b.n	800a5b6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a524:	4b2d      	ldr	r3, [pc, #180]	; (800a5dc <prvSwitchTimerLists+0xc0>)
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	68db      	ldr	r3, [r3, #12]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a52e:	4b2b      	ldr	r3, [pc, #172]	; (800a5dc <prvSwitchTimerLists+0xc0>)
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	68db      	ldr	r3, [r3, #12]
 800a534:	68db      	ldr	r3, [r3, #12]
 800a536:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	3304      	adds	r3, #4
 800a53c:	4618      	mov	r0, r3
 800a53e:	f7fd fc75 	bl	8007e2c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	6a1b      	ldr	r3, [r3, #32]
 800a546:	68f8      	ldr	r0, [r7, #12]
 800a548:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a550:	f003 0304 	and.w	r3, r3, #4
 800a554:	2b00      	cmp	r3, #0
 800a556:	d02e      	beq.n	800a5b6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	699b      	ldr	r3, [r3, #24]
 800a55c:	693a      	ldr	r2, [r7, #16]
 800a55e:	4413      	add	r3, r2
 800a560:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a562:	68ba      	ldr	r2, [r7, #8]
 800a564:	693b      	ldr	r3, [r7, #16]
 800a566:	429a      	cmp	r2, r3
 800a568:	d90e      	bls.n	800a588 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	68ba      	ldr	r2, [r7, #8]
 800a56e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	68fa      	ldr	r2, [r7, #12]
 800a574:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a576:	4b19      	ldr	r3, [pc, #100]	; (800a5dc <prvSwitchTimerLists+0xc0>)
 800a578:	681a      	ldr	r2, [r3, #0]
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	3304      	adds	r3, #4
 800a57e:	4619      	mov	r1, r3
 800a580:	4610      	mov	r0, r2
 800a582:	f7fd fc1a 	bl	8007dba <vListInsert>
 800a586:	e016      	b.n	800a5b6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a588:	2300      	movs	r3, #0
 800a58a:	9300      	str	r3, [sp, #0]
 800a58c:	2300      	movs	r3, #0
 800a58e:	693a      	ldr	r2, [r7, #16]
 800a590:	2100      	movs	r1, #0
 800a592:	68f8      	ldr	r0, [r7, #12]
 800a594:	f7ff fd60 	bl	800a058 <xTimerGenericCommand>
 800a598:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d10a      	bne.n	800a5b6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800a5a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5a4:	f383 8811 	msr	BASEPRI, r3
 800a5a8:	f3bf 8f6f 	isb	sy
 800a5ac:	f3bf 8f4f 	dsb	sy
 800a5b0:	603b      	str	r3, [r7, #0]
}
 800a5b2:	bf00      	nop
 800a5b4:	e7fe      	b.n	800a5b4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a5b6:	4b09      	ldr	r3, [pc, #36]	; (800a5dc <prvSwitchTimerLists+0xc0>)
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d1b1      	bne.n	800a524 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a5c0:	4b06      	ldr	r3, [pc, #24]	; (800a5dc <prvSwitchTimerLists+0xc0>)
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a5c6:	4b06      	ldr	r3, [pc, #24]	; (800a5e0 <prvSwitchTimerLists+0xc4>)
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	4a04      	ldr	r2, [pc, #16]	; (800a5dc <prvSwitchTimerLists+0xc0>)
 800a5cc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a5ce:	4a04      	ldr	r2, [pc, #16]	; (800a5e0 <prvSwitchTimerLists+0xc4>)
 800a5d0:	697b      	ldr	r3, [r7, #20]
 800a5d2:	6013      	str	r3, [r2, #0]
}
 800a5d4:	bf00      	nop
 800a5d6:	3718      	adds	r7, #24
 800a5d8:	46bd      	mov	sp, r7
 800a5da:	bd80      	pop	{r7, pc}
 800a5dc:	20002054 	.word	0x20002054
 800a5e0:	20002058 	.word	0x20002058

0800a5e4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a5e4:	b580      	push	{r7, lr}
 800a5e6:	b082      	sub	sp, #8
 800a5e8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a5ea:	f000 f98b 	bl	800a904 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a5ee:	4b15      	ldr	r3, [pc, #84]	; (800a644 <prvCheckForValidListAndQueue+0x60>)
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d120      	bne.n	800a638 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a5f6:	4814      	ldr	r0, [pc, #80]	; (800a648 <prvCheckForValidListAndQueue+0x64>)
 800a5f8:	f7fd fb8e 	bl	8007d18 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a5fc:	4813      	ldr	r0, [pc, #76]	; (800a64c <prvCheckForValidListAndQueue+0x68>)
 800a5fe:	f7fd fb8b 	bl	8007d18 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a602:	4b13      	ldr	r3, [pc, #76]	; (800a650 <prvCheckForValidListAndQueue+0x6c>)
 800a604:	4a10      	ldr	r2, [pc, #64]	; (800a648 <prvCheckForValidListAndQueue+0x64>)
 800a606:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a608:	4b12      	ldr	r3, [pc, #72]	; (800a654 <prvCheckForValidListAndQueue+0x70>)
 800a60a:	4a10      	ldr	r2, [pc, #64]	; (800a64c <prvCheckForValidListAndQueue+0x68>)
 800a60c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a60e:	2300      	movs	r3, #0
 800a610:	9300      	str	r3, [sp, #0]
 800a612:	4b11      	ldr	r3, [pc, #68]	; (800a658 <prvCheckForValidListAndQueue+0x74>)
 800a614:	4a11      	ldr	r2, [pc, #68]	; (800a65c <prvCheckForValidListAndQueue+0x78>)
 800a616:	2110      	movs	r1, #16
 800a618:	200a      	movs	r0, #10
 800a61a:	f7fd fc99 	bl	8007f50 <xQueueGenericCreateStatic>
 800a61e:	4603      	mov	r3, r0
 800a620:	4a08      	ldr	r2, [pc, #32]	; (800a644 <prvCheckForValidListAndQueue+0x60>)
 800a622:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a624:	4b07      	ldr	r3, [pc, #28]	; (800a644 <prvCheckForValidListAndQueue+0x60>)
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d005      	beq.n	800a638 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a62c:	4b05      	ldr	r3, [pc, #20]	; (800a644 <prvCheckForValidListAndQueue+0x60>)
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	490b      	ldr	r1, [pc, #44]	; (800a660 <prvCheckForValidListAndQueue+0x7c>)
 800a632:	4618      	mov	r0, r3
 800a634:	f7fe fbaa 	bl	8008d8c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a638:	f000 f994 	bl	800a964 <vPortExitCritical>
}
 800a63c:	bf00      	nop
 800a63e:	46bd      	mov	sp, r7
 800a640:	bd80      	pop	{r7, pc}
 800a642:	bf00      	nop
 800a644:	2000205c 	.word	0x2000205c
 800a648:	2000202c 	.word	0x2000202c
 800a64c:	20002040 	.word	0x20002040
 800a650:	20002054 	.word	0x20002054
 800a654:	20002058 	.word	0x20002058
 800a658:	20002108 	.word	0x20002108
 800a65c:	20002068 	.word	0x20002068
 800a660:	0800bbbc 	.word	0x0800bbbc

0800a664 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800a664:	b580      	push	{r7, lr}
 800a666:	b086      	sub	sp, #24
 800a668:	af00      	add	r7, sp, #0
 800a66a:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	2b00      	cmp	r3, #0
 800a674:	d10a      	bne.n	800a68c <pvTimerGetTimerID+0x28>
	__asm volatile
 800a676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a67a:	f383 8811 	msr	BASEPRI, r3
 800a67e:	f3bf 8f6f 	isb	sy
 800a682:	f3bf 8f4f 	dsb	sy
 800a686:	60fb      	str	r3, [r7, #12]
}
 800a688:	bf00      	nop
 800a68a:	e7fe      	b.n	800a68a <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 800a68c:	f000 f93a 	bl	800a904 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800a690:	697b      	ldr	r3, [r7, #20]
 800a692:	69db      	ldr	r3, [r3, #28]
 800a694:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800a696:	f000 f965 	bl	800a964 <vPortExitCritical>

	return pvReturn;
 800a69a:	693b      	ldr	r3, [r7, #16]
}
 800a69c:	4618      	mov	r0, r3
 800a69e:	3718      	adds	r7, #24
 800a6a0:	46bd      	mov	sp, r7
 800a6a2:	bd80      	pop	{r7, pc}

0800a6a4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a6a4:	b480      	push	{r7}
 800a6a6:	b085      	sub	sp, #20
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	60f8      	str	r0, [r7, #12]
 800a6ac:	60b9      	str	r1, [r7, #8]
 800a6ae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	3b04      	subs	r3, #4
 800a6b4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a6bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	3b04      	subs	r3, #4
 800a6c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a6c4:	68bb      	ldr	r3, [r7, #8]
 800a6c6:	f023 0201 	bic.w	r2, r3, #1
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	3b04      	subs	r3, #4
 800a6d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a6d4:	4a0c      	ldr	r2, [pc, #48]	; (800a708 <pxPortInitialiseStack+0x64>)
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	3b14      	subs	r3, #20
 800a6de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a6e0:	687a      	ldr	r2, [r7, #4]
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	3b04      	subs	r3, #4
 800a6ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	f06f 0202 	mvn.w	r2, #2
 800a6f2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	3b20      	subs	r3, #32
 800a6f8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a6fa:	68fb      	ldr	r3, [r7, #12]
}
 800a6fc:	4618      	mov	r0, r3
 800a6fe:	3714      	adds	r7, #20
 800a700:	46bd      	mov	sp, r7
 800a702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a706:	4770      	bx	lr
 800a708:	0800a70d 	.word	0x0800a70d

0800a70c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a70c:	b480      	push	{r7}
 800a70e:	b085      	sub	sp, #20
 800a710:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a712:	2300      	movs	r3, #0
 800a714:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a716:	4b12      	ldr	r3, [pc, #72]	; (800a760 <prvTaskExitError+0x54>)
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a71e:	d00a      	beq.n	800a736 <prvTaskExitError+0x2a>
	__asm volatile
 800a720:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a724:	f383 8811 	msr	BASEPRI, r3
 800a728:	f3bf 8f6f 	isb	sy
 800a72c:	f3bf 8f4f 	dsb	sy
 800a730:	60fb      	str	r3, [r7, #12]
}
 800a732:	bf00      	nop
 800a734:	e7fe      	b.n	800a734 <prvTaskExitError+0x28>
	__asm volatile
 800a736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a73a:	f383 8811 	msr	BASEPRI, r3
 800a73e:	f3bf 8f6f 	isb	sy
 800a742:	f3bf 8f4f 	dsb	sy
 800a746:	60bb      	str	r3, [r7, #8]
}
 800a748:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a74a:	bf00      	nop
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d0fc      	beq.n	800a74c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a752:	bf00      	nop
 800a754:	bf00      	nop
 800a756:	3714      	adds	r7, #20
 800a758:	46bd      	mov	sp, r7
 800a75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a75e:	4770      	bx	lr
 800a760:	20000020 	.word	0x20000020
	...

0800a770 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a770:	4b07      	ldr	r3, [pc, #28]	; (800a790 <pxCurrentTCBConst2>)
 800a772:	6819      	ldr	r1, [r3, #0]
 800a774:	6808      	ldr	r0, [r1, #0]
 800a776:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a77a:	f380 8809 	msr	PSP, r0
 800a77e:	f3bf 8f6f 	isb	sy
 800a782:	f04f 0000 	mov.w	r0, #0
 800a786:	f380 8811 	msr	BASEPRI, r0
 800a78a:	4770      	bx	lr
 800a78c:	f3af 8000 	nop.w

0800a790 <pxCurrentTCBConst2>:
 800a790:	20001b2c 	.word	0x20001b2c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a794:	bf00      	nop
 800a796:	bf00      	nop

0800a798 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a798:	4808      	ldr	r0, [pc, #32]	; (800a7bc <prvPortStartFirstTask+0x24>)
 800a79a:	6800      	ldr	r0, [r0, #0]
 800a79c:	6800      	ldr	r0, [r0, #0]
 800a79e:	f380 8808 	msr	MSP, r0
 800a7a2:	f04f 0000 	mov.w	r0, #0
 800a7a6:	f380 8814 	msr	CONTROL, r0
 800a7aa:	b662      	cpsie	i
 800a7ac:	b661      	cpsie	f
 800a7ae:	f3bf 8f4f 	dsb	sy
 800a7b2:	f3bf 8f6f 	isb	sy
 800a7b6:	df00      	svc	0
 800a7b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a7ba:	bf00      	nop
 800a7bc:	e000ed08 	.word	0xe000ed08

0800a7c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a7c0:	b580      	push	{r7, lr}
 800a7c2:	b086      	sub	sp, #24
 800a7c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a7c6:	4b46      	ldr	r3, [pc, #280]	; (800a8e0 <xPortStartScheduler+0x120>)
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	4a46      	ldr	r2, [pc, #280]	; (800a8e4 <xPortStartScheduler+0x124>)
 800a7cc:	4293      	cmp	r3, r2
 800a7ce:	d10a      	bne.n	800a7e6 <xPortStartScheduler+0x26>
	__asm volatile
 800a7d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7d4:	f383 8811 	msr	BASEPRI, r3
 800a7d8:	f3bf 8f6f 	isb	sy
 800a7dc:	f3bf 8f4f 	dsb	sy
 800a7e0:	613b      	str	r3, [r7, #16]
}
 800a7e2:	bf00      	nop
 800a7e4:	e7fe      	b.n	800a7e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a7e6:	4b3e      	ldr	r3, [pc, #248]	; (800a8e0 <xPortStartScheduler+0x120>)
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	4a3f      	ldr	r2, [pc, #252]	; (800a8e8 <xPortStartScheduler+0x128>)
 800a7ec:	4293      	cmp	r3, r2
 800a7ee:	d10a      	bne.n	800a806 <xPortStartScheduler+0x46>
	__asm volatile
 800a7f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7f4:	f383 8811 	msr	BASEPRI, r3
 800a7f8:	f3bf 8f6f 	isb	sy
 800a7fc:	f3bf 8f4f 	dsb	sy
 800a800:	60fb      	str	r3, [r7, #12]
}
 800a802:	bf00      	nop
 800a804:	e7fe      	b.n	800a804 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a806:	4b39      	ldr	r3, [pc, #228]	; (800a8ec <xPortStartScheduler+0x12c>)
 800a808:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a80a:	697b      	ldr	r3, [r7, #20]
 800a80c:	781b      	ldrb	r3, [r3, #0]
 800a80e:	b2db      	uxtb	r3, r3
 800a810:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a812:	697b      	ldr	r3, [r7, #20]
 800a814:	22ff      	movs	r2, #255	; 0xff
 800a816:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a818:	697b      	ldr	r3, [r7, #20]
 800a81a:	781b      	ldrb	r3, [r3, #0]
 800a81c:	b2db      	uxtb	r3, r3
 800a81e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a820:	78fb      	ldrb	r3, [r7, #3]
 800a822:	b2db      	uxtb	r3, r3
 800a824:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a828:	b2da      	uxtb	r2, r3
 800a82a:	4b31      	ldr	r3, [pc, #196]	; (800a8f0 <xPortStartScheduler+0x130>)
 800a82c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a82e:	4b31      	ldr	r3, [pc, #196]	; (800a8f4 <xPortStartScheduler+0x134>)
 800a830:	2207      	movs	r2, #7
 800a832:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a834:	e009      	b.n	800a84a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a836:	4b2f      	ldr	r3, [pc, #188]	; (800a8f4 <xPortStartScheduler+0x134>)
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	3b01      	subs	r3, #1
 800a83c:	4a2d      	ldr	r2, [pc, #180]	; (800a8f4 <xPortStartScheduler+0x134>)
 800a83e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a840:	78fb      	ldrb	r3, [r7, #3]
 800a842:	b2db      	uxtb	r3, r3
 800a844:	005b      	lsls	r3, r3, #1
 800a846:	b2db      	uxtb	r3, r3
 800a848:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a84a:	78fb      	ldrb	r3, [r7, #3]
 800a84c:	b2db      	uxtb	r3, r3
 800a84e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a852:	2b80      	cmp	r3, #128	; 0x80
 800a854:	d0ef      	beq.n	800a836 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a856:	4b27      	ldr	r3, [pc, #156]	; (800a8f4 <xPortStartScheduler+0x134>)
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	f1c3 0307 	rsb	r3, r3, #7
 800a85e:	2b04      	cmp	r3, #4
 800a860:	d00a      	beq.n	800a878 <xPortStartScheduler+0xb8>
	__asm volatile
 800a862:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a866:	f383 8811 	msr	BASEPRI, r3
 800a86a:	f3bf 8f6f 	isb	sy
 800a86e:	f3bf 8f4f 	dsb	sy
 800a872:	60bb      	str	r3, [r7, #8]
}
 800a874:	bf00      	nop
 800a876:	e7fe      	b.n	800a876 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a878:	4b1e      	ldr	r3, [pc, #120]	; (800a8f4 <xPortStartScheduler+0x134>)
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	021b      	lsls	r3, r3, #8
 800a87e:	4a1d      	ldr	r2, [pc, #116]	; (800a8f4 <xPortStartScheduler+0x134>)
 800a880:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a882:	4b1c      	ldr	r3, [pc, #112]	; (800a8f4 <xPortStartScheduler+0x134>)
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a88a:	4a1a      	ldr	r2, [pc, #104]	; (800a8f4 <xPortStartScheduler+0x134>)
 800a88c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	b2da      	uxtb	r2, r3
 800a892:	697b      	ldr	r3, [r7, #20]
 800a894:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a896:	4b18      	ldr	r3, [pc, #96]	; (800a8f8 <xPortStartScheduler+0x138>)
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	4a17      	ldr	r2, [pc, #92]	; (800a8f8 <xPortStartScheduler+0x138>)
 800a89c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a8a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a8a2:	4b15      	ldr	r3, [pc, #84]	; (800a8f8 <xPortStartScheduler+0x138>)
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	4a14      	ldr	r2, [pc, #80]	; (800a8f8 <xPortStartScheduler+0x138>)
 800a8a8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a8ac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a8ae:	f000 f8dd 	bl	800aa6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a8b2:	4b12      	ldr	r3, [pc, #72]	; (800a8fc <xPortStartScheduler+0x13c>)
 800a8b4:	2200      	movs	r2, #0
 800a8b6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a8b8:	f000 f8fc 	bl	800aab4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a8bc:	4b10      	ldr	r3, [pc, #64]	; (800a900 <xPortStartScheduler+0x140>)
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	4a0f      	ldr	r2, [pc, #60]	; (800a900 <xPortStartScheduler+0x140>)
 800a8c2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a8c6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a8c8:	f7ff ff66 	bl	800a798 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a8cc:	f7fe fe98 	bl	8009600 <vTaskSwitchContext>
	prvTaskExitError();
 800a8d0:	f7ff ff1c 	bl	800a70c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a8d4:	2300      	movs	r3, #0
}
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	3718      	adds	r7, #24
 800a8da:	46bd      	mov	sp, r7
 800a8dc:	bd80      	pop	{r7, pc}
 800a8de:	bf00      	nop
 800a8e0:	e000ed00 	.word	0xe000ed00
 800a8e4:	410fc271 	.word	0x410fc271
 800a8e8:	410fc270 	.word	0x410fc270
 800a8ec:	e000e400 	.word	0xe000e400
 800a8f0:	20002158 	.word	0x20002158
 800a8f4:	2000215c 	.word	0x2000215c
 800a8f8:	e000ed20 	.word	0xe000ed20
 800a8fc:	20000020 	.word	0x20000020
 800a900:	e000ef34 	.word	0xe000ef34

0800a904 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a904:	b480      	push	{r7}
 800a906:	b083      	sub	sp, #12
 800a908:	af00      	add	r7, sp, #0
	__asm volatile
 800a90a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a90e:	f383 8811 	msr	BASEPRI, r3
 800a912:	f3bf 8f6f 	isb	sy
 800a916:	f3bf 8f4f 	dsb	sy
 800a91a:	607b      	str	r3, [r7, #4]
}
 800a91c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a91e:	4b0f      	ldr	r3, [pc, #60]	; (800a95c <vPortEnterCritical+0x58>)
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	3301      	adds	r3, #1
 800a924:	4a0d      	ldr	r2, [pc, #52]	; (800a95c <vPortEnterCritical+0x58>)
 800a926:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a928:	4b0c      	ldr	r3, [pc, #48]	; (800a95c <vPortEnterCritical+0x58>)
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	2b01      	cmp	r3, #1
 800a92e:	d10f      	bne.n	800a950 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a930:	4b0b      	ldr	r3, [pc, #44]	; (800a960 <vPortEnterCritical+0x5c>)
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	b2db      	uxtb	r3, r3
 800a936:	2b00      	cmp	r3, #0
 800a938:	d00a      	beq.n	800a950 <vPortEnterCritical+0x4c>
	__asm volatile
 800a93a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a93e:	f383 8811 	msr	BASEPRI, r3
 800a942:	f3bf 8f6f 	isb	sy
 800a946:	f3bf 8f4f 	dsb	sy
 800a94a:	603b      	str	r3, [r7, #0]
}
 800a94c:	bf00      	nop
 800a94e:	e7fe      	b.n	800a94e <vPortEnterCritical+0x4a>
	}
}
 800a950:	bf00      	nop
 800a952:	370c      	adds	r7, #12
 800a954:	46bd      	mov	sp, r7
 800a956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a95a:	4770      	bx	lr
 800a95c:	20000020 	.word	0x20000020
 800a960:	e000ed04 	.word	0xe000ed04

0800a964 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a964:	b480      	push	{r7}
 800a966:	b083      	sub	sp, #12
 800a968:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a96a:	4b12      	ldr	r3, [pc, #72]	; (800a9b4 <vPortExitCritical+0x50>)
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d10a      	bne.n	800a988 <vPortExitCritical+0x24>
	__asm volatile
 800a972:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a976:	f383 8811 	msr	BASEPRI, r3
 800a97a:	f3bf 8f6f 	isb	sy
 800a97e:	f3bf 8f4f 	dsb	sy
 800a982:	607b      	str	r3, [r7, #4]
}
 800a984:	bf00      	nop
 800a986:	e7fe      	b.n	800a986 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a988:	4b0a      	ldr	r3, [pc, #40]	; (800a9b4 <vPortExitCritical+0x50>)
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	3b01      	subs	r3, #1
 800a98e:	4a09      	ldr	r2, [pc, #36]	; (800a9b4 <vPortExitCritical+0x50>)
 800a990:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a992:	4b08      	ldr	r3, [pc, #32]	; (800a9b4 <vPortExitCritical+0x50>)
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	2b00      	cmp	r3, #0
 800a998:	d105      	bne.n	800a9a6 <vPortExitCritical+0x42>
 800a99a:	2300      	movs	r3, #0
 800a99c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a99e:	683b      	ldr	r3, [r7, #0]
 800a9a0:	f383 8811 	msr	BASEPRI, r3
}
 800a9a4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a9a6:	bf00      	nop
 800a9a8:	370c      	adds	r7, #12
 800a9aa:	46bd      	mov	sp, r7
 800a9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b0:	4770      	bx	lr
 800a9b2:	bf00      	nop
 800a9b4:	20000020 	.word	0x20000020
	...

0800a9c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a9c0:	f3ef 8009 	mrs	r0, PSP
 800a9c4:	f3bf 8f6f 	isb	sy
 800a9c8:	4b15      	ldr	r3, [pc, #84]	; (800aa20 <pxCurrentTCBConst>)
 800a9ca:	681a      	ldr	r2, [r3, #0]
 800a9cc:	f01e 0f10 	tst.w	lr, #16
 800a9d0:	bf08      	it	eq
 800a9d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a9d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9da:	6010      	str	r0, [r2, #0]
 800a9dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a9e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a9e4:	f380 8811 	msr	BASEPRI, r0
 800a9e8:	f3bf 8f4f 	dsb	sy
 800a9ec:	f3bf 8f6f 	isb	sy
 800a9f0:	f7fe fe06 	bl	8009600 <vTaskSwitchContext>
 800a9f4:	f04f 0000 	mov.w	r0, #0
 800a9f8:	f380 8811 	msr	BASEPRI, r0
 800a9fc:	bc09      	pop	{r0, r3}
 800a9fe:	6819      	ldr	r1, [r3, #0]
 800aa00:	6808      	ldr	r0, [r1, #0]
 800aa02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa06:	f01e 0f10 	tst.w	lr, #16
 800aa0a:	bf08      	it	eq
 800aa0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800aa10:	f380 8809 	msr	PSP, r0
 800aa14:	f3bf 8f6f 	isb	sy
 800aa18:	4770      	bx	lr
 800aa1a:	bf00      	nop
 800aa1c:	f3af 8000 	nop.w

0800aa20 <pxCurrentTCBConst>:
 800aa20:	20001b2c 	.word	0x20001b2c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800aa24:	bf00      	nop
 800aa26:	bf00      	nop

0800aa28 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800aa28:	b580      	push	{r7, lr}
 800aa2a:	b082      	sub	sp, #8
 800aa2c:	af00      	add	r7, sp, #0
	__asm volatile
 800aa2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa32:	f383 8811 	msr	BASEPRI, r3
 800aa36:	f3bf 8f6f 	isb	sy
 800aa3a:	f3bf 8f4f 	dsb	sy
 800aa3e:	607b      	str	r3, [r7, #4]
}
 800aa40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800aa42:	f7fe fd23 	bl	800948c <xTaskIncrementTick>
 800aa46:	4603      	mov	r3, r0
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d003      	beq.n	800aa54 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800aa4c:	4b06      	ldr	r3, [pc, #24]	; (800aa68 <xPortSysTickHandler+0x40>)
 800aa4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa52:	601a      	str	r2, [r3, #0]
 800aa54:	2300      	movs	r3, #0
 800aa56:	603b      	str	r3, [r7, #0]
	__asm volatile
 800aa58:	683b      	ldr	r3, [r7, #0]
 800aa5a:	f383 8811 	msr	BASEPRI, r3
}
 800aa5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800aa60:	bf00      	nop
 800aa62:	3708      	adds	r7, #8
 800aa64:	46bd      	mov	sp, r7
 800aa66:	bd80      	pop	{r7, pc}
 800aa68:	e000ed04 	.word	0xe000ed04

0800aa6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800aa6c:	b480      	push	{r7}
 800aa6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800aa70:	4b0b      	ldr	r3, [pc, #44]	; (800aaa0 <vPortSetupTimerInterrupt+0x34>)
 800aa72:	2200      	movs	r2, #0
 800aa74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800aa76:	4b0b      	ldr	r3, [pc, #44]	; (800aaa4 <vPortSetupTimerInterrupt+0x38>)
 800aa78:	2200      	movs	r2, #0
 800aa7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800aa7c:	4b0a      	ldr	r3, [pc, #40]	; (800aaa8 <vPortSetupTimerInterrupt+0x3c>)
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	4a0a      	ldr	r2, [pc, #40]	; (800aaac <vPortSetupTimerInterrupt+0x40>)
 800aa82:	fba2 2303 	umull	r2, r3, r2, r3
 800aa86:	099b      	lsrs	r3, r3, #6
 800aa88:	4a09      	ldr	r2, [pc, #36]	; (800aab0 <vPortSetupTimerInterrupt+0x44>)
 800aa8a:	3b01      	subs	r3, #1
 800aa8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800aa8e:	4b04      	ldr	r3, [pc, #16]	; (800aaa0 <vPortSetupTimerInterrupt+0x34>)
 800aa90:	2207      	movs	r2, #7
 800aa92:	601a      	str	r2, [r3, #0]
}
 800aa94:	bf00      	nop
 800aa96:	46bd      	mov	sp, r7
 800aa98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa9c:	4770      	bx	lr
 800aa9e:	bf00      	nop
 800aaa0:	e000e010 	.word	0xe000e010
 800aaa4:	e000e018 	.word	0xe000e018
 800aaa8:	20000000 	.word	0x20000000
 800aaac:	10624dd3 	.word	0x10624dd3
 800aab0:	e000e014 	.word	0xe000e014

0800aab4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800aab4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800aac4 <vPortEnableVFP+0x10>
 800aab8:	6801      	ldr	r1, [r0, #0]
 800aaba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800aabe:	6001      	str	r1, [r0, #0]
 800aac0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800aac2:	bf00      	nop
 800aac4:	e000ed88 	.word	0xe000ed88

0800aac8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800aac8:	b480      	push	{r7}
 800aaca:	b085      	sub	sp, #20
 800aacc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800aace:	f3ef 8305 	mrs	r3, IPSR
 800aad2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	2b0f      	cmp	r3, #15
 800aad8:	d914      	bls.n	800ab04 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800aada:	4a17      	ldr	r2, [pc, #92]	; (800ab38 <vPortValidateInterruptPriority+0x70>)
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	4413      	add	r3, r2
 800aae0:	781b      	ldrb	r3, [r3, #0]
 800aae2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800aae4:	4b15      	ldr	r3, [pc, #84]	; (800ab3c <vPortValidateInterruptPriority+0x74>)
 800aae6:	781b      	ldrb	r3, [r3, #0]
 800aae8:	7afa      	ldrb	r2, [r7, #11]
 800aaea:	429a      	cmp	r2, r3
 800aaec:	d20a      	bcs.n	800ab04 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800aaee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaf2:	f383 8811 	msr	BASEPRI, r3
 800aaf6:	f3bf 8f6f 	isb	sy
 800aafa:	f3bf 8f4f 	dsb	sy
 800aafe:	607b      	str	r3, [r7, #4]
}
 800ab00:	bf00      	nop
 800ab02:	e7fe      	b.n	800ab02 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800ab04:	4b0e      	ldr	r3, [pc, #56]	; (800ab40 <vPortValidateInterruptPriority+0x78>)
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800ab0c:	4b0d      	ldr	r3, [pc, #52]	; (800ab44 <vPortValidateInterruptPriority+0x7c>)
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	429a      	cmp	r2, r3
 800ab12:	d90a      	bls.n	800ab2a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800ab14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab18:	f383 8811 	msr	BASEPRI, r3
 800ab1c:	f3bf 8f6f 	isb	sy
 800ab20:	f3bf 8f4f 	dsb	sy
 800ab24:	603b      	str	r3, [r7, #0]
}
 800ab26:	bf00      	nop
 800ab28:	e7fe      	b.n	800ab28 <vPortValidateInterruptPriority+0x60>
	}
 800ab2a:	bf00      	nop
 800ab2c:	3714      	adds	r7, #20
 800ab2e:	46bd      	mov	sp, r7
 800ab30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab34:	4770      	bx	lr
 800ab36:	bf00      	nop
 800ab38:	e000e3f0 	.word	0xe000e3f0
 800ab3c:	20002158 	.word	0x20002158
 800ab40:	e000ed0c 	.word	0xe000ed0c
 800ab44:	2000215c 	.word	0x2000215c

0800ab48 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ab48:	b580      	push	{r7, lr}
 800ab4a:	b08a      	sub	sp, #40	; 0x28
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ab50:	2300      	movs	r3, #0
 800ab52:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ab54:	f7fe fbde 	bl	8009314 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ab58:	4b5b      	ldr	r3, [pc, #364]	; (800acc8 <pvPortMalloc+0x180>)
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d101      	bne.n	800ab64 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ab60:	f000 f920 	bl	800ada4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ab64:	4b59      	ldr	r3, [pc, #356]	; (800accc <pvPortMalloc+0x184>)
 800ab66:	681a      	ldr	r2, [r3, #0]
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	4013      	ands	r3, r2
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	f040 8093 	bne.w	800ac98 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d01d      	beq.n	800abb4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800ab78:	2208      	movs	r2, #8
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	4413      	add	r3, r2
 800ab7e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	f003 0307 	and.w	r3, r3, #7
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d014      	beq.n	800abb4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	f023 0307 	bic.w	r3, r3, #7
 800ab90:	3308      	adds	r3, #8
 800ab92:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	f003 0307 	and.w	r3, r3, #7
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d00a      	beq.n	800abb4 <pvPortMalloc+0x6c>
	__asm volatile
 800ab9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aba2:	f383 8811 	msr	BASEPRI, r3
 800aba6:	f3bf 8f6f 	isb	sy
 800abaa:	f3bf 8f4f 	dsb	sy
 800abae:	617b      	str	r3, [r7, #20]
}
 800abb0:	bf00      	nop
 800abb2:	e7fe      	b.n	800abb2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d06e      	beq.n	800ac98 <pvPortMalloc+0x150>
 800abba:	4b45      	ldr	r3, [pc, #276]	; (800acd0 <pvPortMalloc+0x188>)
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	687a      	ldr	r2, [r7, #4]
 800abc0:	429a      	cmp	r2, r3
 800abc2:	d869      	bhi.n	800ac98 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800abc4:	4b43      	ldr	r3, [pc, #268]	; (800acd4 <pvPortMalloc+0x18c>)
 800abc6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800abc8:	4b42      	ldr	r3, [pc, #264]	; (800acd4 <pvPortMalloc+0x18c>)
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800abce:	e004      	b.n	800abda <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800abd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abd2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800abd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800abda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abdc:	685b      	ldr	r3, [r3, #4]
 800abde:	687a      	ldr	r2, [r7, #4]
 800abe0:	429a      	cmp	r2, r3
 800abe2:	d903      	bls.n	800abec <pvPortMalloc+0xa4>
 800abe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d1f1      	bne.n	800abd0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800abec:	4b36      	ldr	r3, [pc, #216]	; (800acc8 <pvPortMalloc+0x180>)
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800abf2:	429a      	cmp	r2, r3
 800abf4:	d050      	beq.n	800ac98 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800abf6:	6a3b      	ldr	r3, [r7, #32]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	2208      	movs	r2, #8
 800abfc:	4413      	add	r3, r2
 800abfe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ac00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac02:	681a      	ldr	r2, [r3, #0]
 800ac04:	6a3b      	ldr	r3, [r7, #32]
 800ac06:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ac08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac0a:	685a      	ldr	r2, [r3, #4]
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	1ad2      	subs	r2, r2, r3
 800ac10:	2308      	movs	r3, #8
 800ac12:	005b      	lsls	r3, r3, #1
 800ac14:	429a      	cmp	r2, r3
 800ac16:	d91f      	bls.n	800ac58 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ac18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	4413      	add	r3, r2
 800ac1e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ac20:	69bb      	ldr	r3, [r7, #24]
 800ac22:	f003 0307 	and.w	r3, r3, #7
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d00a      	beq.n	800ac40 <pvPortMalloc+0xf8>
	__asm volatile
 800ac2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac2e:	f383 8811 	msr	BASEPRI, r3
 800ac32:	f3bf 8f6f 	isb	sy
 800ac36:	f3bf 8f4f 	dsb	sy
 800ac3a:	613b      	str	r3, [r7, #16]
}
 800ac3c:	bf00      	nop
 800ac3e:	e7fe      	b.n	800ac3e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ac40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac42:	685a      	ldr	r2, [r3, #4]
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	1ad2      	subs	r2, r2, r3
 800ac48:	69bb      	ldr	r3, [r7, #24]
 800ac4a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ac4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac4e:	687a      	ldr	r2, [r7, #4]
 800ac50:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ac52:	69b8      	ldr	r0, [r7, #24]
 800ac54:	f000 f908 	bl	800ae68 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ac58:	4b1d      	ldr	r3, [pc, #116]	; (800acd0 <pvPortMalloc+0x188>)
 800ac5a:	681a      	ldr	r2, [r3, #0]
 800ac5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac5e:	685b      	ldr	r3, [r3, #4]
 800ac60:	1ad3      	subs	r3, r2, r3
 800ac62:	4a1b      	ldr	r2, [pc, #108]	; (800acd0 <pvPortMalloc+0x188>)
 800ac64:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ac66:	4b1a      	ldr	r3, [pc, #104]	; (800acd0 <pvPortMalloc+0x188>)
 800ac68:	681a      	ldr	r2, [r3, #0]
 800ac6a:	4b1b      	ldr	r3, [pc, #108]	; (800acd8 <pvPortMalloc+0x190>)
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	429a      	cmp	r2, r3
 800ac70:	d203      	bcs.n	800ac7a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ac72:	4b17      	ldr	r3, [pc, #92]	; (800acd0 <pvPortMalloc+0x188>)
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	4a18      	ldr	r2, [pc, #96]	; (800acd8 <pvPortMalloc+0x190>)
 800ac78:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ac7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac7c:	685a      	ldr	r2, [r3, #4]
 800ac7e:	4b13      	ldr	r3, [pc, #76]	; (800accc <pvPortMalloc+0x184>)
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	431a      	orrs	r2, r3
 800ac84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac86:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ac88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac8a:	2200      	movs	r2, #0
 800ac8c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ac8e:	4b13      	ldr	r3, [pc, #76]	; (800acdc <pvPortMalloc+0x194>)
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	3301      	adds	r3, #1
 800ac94:	4a11      	ldr	r2, [pc, #68]	; (800acdc <pvPortMalloc+0x194>)
 800ac96:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ac98:	f7fe fb4a 	bl	8009330 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ac9c:	69fb      	ldr	r3, [r7, #28]
 800ac9e:	f003 0307 	and.w	r3, r3, #7
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d00a      	beq.n	800acbc <pvPortMalloc+0x174>
	__asm volatile
 800aca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acaa:	f383 8811 	msr	BASEPRI, r3
 800acae:	f3bf 8f6f 	isb	sy
 800acb2:	f3bf 8f4f 	dsb	sy
 800acb6:	60fb      	str	r3, [r7, #12]
}
 800acb8:	bf00      	nop
 800acba:	e7fe      	b.n	800acba <pvPortMalloc+0x172>
	return pvReturn;
 800acbc:	69fb      	ldr	r3, [r7, #28]
}
 800acbe:	4618      	mov	r0, r3
 800acc0:	3728      	adds	r7, #40	; 0x28
 800acc2:	46bd      	mov	sp, r7
 800acc4:	bd80      	pop	{r7, pc}
 800acc6:	bf00      	nop
 800acc8:	20005d68 	.word	0x20005d68
 800accc:	20005d7c 	.word	0x20005d7c
 800acd0:	20005d6c 	.word	0x20005d6c
 800acd4:	20005d60 	.word	0x20005d60
 800acd8:	20005d70 	.word	0x20005d70
 800acdc:	20005d74 	.word	0x20005d74

0800ace0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ace0:	b580      	push	{r7, lr}
 800ace2:	b086      	sub	sp, #24
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d04d      	beq.n	800ad8e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800acf2:	2308      	movs	r3, #8
 800acf4:	425b      	negs	r3, r3
 800acf6:	697a      	ldr	r2, [r7, #20]
 800acf8:	4413      	add	r3, r2
 800acfa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800acfc:	697b      	ldr	r3, [r7, #20]
 800acfe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ad00:	693b      	ldr	r3, [r7, #16]
 800ad02:	685a      	ldr	r2, [r3, #4]
 800ad04:	4b24      	ldr	r3, [pc, #144]	; (800ad98 <vPortFree+0xb8>)
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	4013      	ands	r3, r2
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d10a      	bne.n	800ad24 <vPortFree+0x44>
	__asm volatile
 800ad0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad12:	f383 8811 	msr	BASEPRI, r3
 800ad16:	f3bf 8f6f 	isb	sy
 800ad1a:	f3bf 8f4f 	dsb	sy
 800ad1e:	60fb      	str	r3, [r7, #12]
}
 800ad20:	bf00      	nop
 800ad22:	e7fe      	b.n	800ad22 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ad24:	693b      	ldr	r3, [r7, #16]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d00a      	beq.n	800ad42 <vPortFree+0x62>
	__asm volatile
 800ad2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad30:	f383 8811 	msr	BASEPRI, r3
 800ad34:	f3bf 8f6f 	isb	sy
 800ad38:	f3bf 8f4f 	dsb	sy
 800ad3c:	60bb      	str	r3, [r7, #8]
}
 800ad3e:	bf00      	nop
 800ad40:	e7fe      	b.n	800ad40 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ad42:	693b      	ldr	r3, [r7, #16]
 800ad44:	685a      	ldr	r2, [r3, #4]
 800ad46:	4b14      	ldr	r3, [pc, #80]	; (800ad98 <vPortFree+0xb8>)
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	4013      	ands	r3, r2
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d01e      	beq.n	800ad8e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ad50:	693b      	ldr	r3, [r7, #16]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d11a      	bne.n	800ad8e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ad58:	693b      	ldr	r3, [r7, #16]
 800ad5a:	685a      	ldr	r2, [r3, #4]
 800ad5c:	4b0e      	ldr	r3, [pc, #56]	; (800ad98 <vPortFree+0xb8>)
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	43db      	mvns	r3, r3
 800ad62:	401a      	ands	r2, r3
 800ad64:	693b      	ldr	r3, [r7, #16]
 800ad66:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ad68:	f7fe fad4 	bl	8009314 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ad6c:	693b      	ldr	r3, [r7, #16]
 800ad6e:	685a      	ldr	r2, [r3, #4]
 800ad70:	4b0a      	ldr	r3, [pc, #40]	; (800ad9c <vPortFree+0xbc>)
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	4413      	add	r3, r2
 800ad76:	4a09      	ldr	r2, [pc, #36]	; (800ad9c <vPortFree+0xbc>)
 800ad78:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ad7a:	6938      	ldr	r0, [r7, #16]
 800ad7c:	f000 f874 	bl	800ae68 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ad80:	4b07      	ldr	r3, [pc, #28]	; (800ada0 <vPortFree+0xc0>)
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	3301      	adds	r3, #1
 800ad86:	4a06      	ldr	r2, [pc, #24]	; (800ada0 <vPortFree+0xc0>)
 800ad88:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ad8a:	f7fe fad1 	bl	8009330 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ad8e:	bf00      	nop
 800ad90:	3718      	adds	r7, #24
 800ad92:	46bd      	mov	sp, r7
 800ad94:	bd80      	pop	{r7, pc}
 800ad96:	bf00      	nop
 800ad98:	20005d7c 	.word	0x20005d7c
 800ad9c:	20005d6c 	.word	0x20005d6c
 800ada0:	20005d78 	.word	0x20005d78

0800ada4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ada4:	b480      	push	{r7}
 800ada6:	b085      	sub	sp, #20
 800ada8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800adaa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800adae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800adb0:	4b27      	ldr	r3, [pc, #156]	; (800ae50 <prvHeapInit+0xac>)
 800adb2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	f003 0307 	and.w	r3, r3, #7
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d00c      	beq.n	800add8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	3307      	adds	r3, #7
 800adc2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	f023 0307 	bic.w	r3, r3, #7
 800adca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800adcc:	68ba      	ldr	r2, [r7, #8]
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	1ad3      	subs	r3, r2, r3
 800add2:	4a1f      	ldr	r2, [pc, #124]	; (800ae50 <prvHeapInit+0xac>)
 800add4:	4413      	add	r3, r2
 800add6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800addc:	4a1d      	ldr	r2, [pc, #116]	; (800ae54 <prvHeapInit+0xb0>)
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ade2:	4b1c      	ldr	r3, [pc, #112]	; (800ae54 <prvHeapInit+0xb0>)
 800ade4:	2200      	movs	r2, #0
 800ade6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	68ba      	ldr	r2, [r7, #8]
 800adec:	4413      	add	r3, r2
 800adee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800adf0:	2208      	movs	r2, #8
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	1a9b      	subs	r3, r3, r2
 800adf6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	f023 0307 	bic.w	r3, r3, #7
 800adfe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	4a15      	ldr	r2, [pc, #84]	; (800ae58 <prvHeapInit+0xb4>)
 800ae04:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ae06:	4b14      	ldr	r3, [pc, #80]	; (800ae58 <prvHeapInit+0xb4>)
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	2200      	movs	r2, #0
 800ae0c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ae0e:	4b12      	ldr	r3, [pc, #72]	; (800ae58 <prvHeapInit+0xb4>)
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	2200      	movs	r2, #0
 800ae14:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ae1a:	683b      	ldr	r3, [r7, #0]
 800ae1c:	68fa      	ldr	r2, [r7, #12]
 800ae1e:	1ad2      	subs	r2, r2, r3
 800ae20:	683b      	ldr	r3, [r7, #0]
 800ae22:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ae24:	4b0c      	ldr	r3, [pc, #48]	; (800ae58 <prvHeapInit+0xb4>)
 800ae26:	681a      	ldr	r2, [r3, #0]
 800ae28:	683b      	ldr	r3, [r7, #0]
 800ae2a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ae2c:	683b      	ldr	r3, [r7, #0]
 800ae2e:	685b      	ldr	r3, [r3, #4]
 800ae30:	4a0a      	ldr	r2, [pc, #40]	; (800ae5c <prvHeapInit+0xb8>)
 800ae32:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ae34:	683b      	ldr	r3, [r7, #0]
 800ae36:	685b      	ldr	r3, [r3, #4]
 800ae38:	4a09      	ldr	r2, [pc, #36]	; (800ae60 <prvHeapInit+0xbc>)
 800ae3a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ae3c:	4b09      	ldr	r3, [pc, #36]	; (800ae64 <prvHeapInit+0xc0>)
 800ae3e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ae42:	601a      	str	r2, [r3, #0]
}
 800ae44:	bf00      	nop
 800ae46:	3714      	adds	r7, #20
 800ae48:	46bd      	mov	sp, r7
 800ae4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae4e:	4770      	bx	lr
 800ae50:	20002160 	.word	0x20002160
 800ae54:	20005d60 	.word	0x20005d60
 800ae58:	20005d68 	.word	0x20005d68
 800ae5c:	20005d70 	.word	0x20005d70
 800ae60:	20005d6c 	.word	0x20005d6c
 800ae64:	20005d7c 	.word	0x20005d7c

0800ae68 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ae68:	b480      	push	{r7}
 800ae6a:	b085      	sub	sp, #20
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ae70:	4b28      	ldr	r3, [pc, #160]	; (800af14 <prvInsertBlockIntoFreeList+0xac>)
 800ae72:	60fb      	str	r3, [r7, #12]
 800ae74:	e002      	b.n	800ae7c <prvInsertBlockIntoFreeList+0x14>
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	60fb      	str	r3, [r7, #12]
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	687a      	ldr	r2, [r7, #4]
 800ae82:	429a      	cmp	r2, r3
 800ae84:	d8f7      	bhi.n	800ae76 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	685b      	ldr	r3, [r3, #4]
 800ae8e:	68ba      	ldr	r2, [r7, #8]
 800ae90:	4413      	add	r3, r2
 800ae92:	687a      	ldr	r2, [r7, #4]
 800ae94:	429a      	cmp	r2, r3
 800ae96:	d108      	bne.n	800aeaa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	685a      	ldr	r2, [r3, #4]
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	685b      	ldr	r3, [r3, #4]
 800aea0:	441a      	add	r2, r3
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	685b      	ldr	r3, [r3, #4]
 800aeb2:	68ba      	ldr	r2, [r7, #8]
 800aeb4:	441a      	add	r2, r3
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	429a      	cmp	r2, r3
 800aebc:	d118      	bne.n	800aef0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	681a      	ldr	r2, [r3, #0]
 800aec2:	4b15      	ldr	r3, [pc, #84]	; (800af18 <prvInsertBlockIntoFreeList+0xb0>)
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	429a      	cmp	r2, r3
 800aec8:	d00d      	beq.n	800aee6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	685a      	ldr	r2, [r3, #4]
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	685b      	ldr	r3, [r3, #4]
 800aed4:	441a      	add	r2, r3
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	681a      	ldr	r2, [r3, #0]
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	601a      	str	r2, [r3, #0]
 800aee4:	e008      	b.n	800aef8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800aee6:	4b0c      	ldr	r3, [pc, #48]	; (800af18 <prvInsertBlockIntoFreeList+0xb0>)
 800aee8:	681a      	ldr	r2, [r3, #0]
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	601a      	str	r2, [r3, #0]
 800aeee:	e003      	b.n	800aef8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	681a      	ldr	r2, [r3, #0]
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800aef8:	68fa      	ldr	r2, [r7, #12]
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	429a      	cmp	r2, r3
 800aefe:	d002      	beq.n	800af06 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	687a      	ldr	r2, [r7, #4]
 800af04:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800af06:	bf00      	nop
 800af08:	3714      	adds	r7, #20
 800af0a:	46bd      	mov	sp, r7
 800af0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af10:	4770      	bx	lr
 800af12:	bf00      	nop
 800af14:	20005d60 	.word	0x20005d60
 800af18:	20005d68 	.word	0x20005d68

0800af1c <APP_timeoutTimerIRQHandler>:
/********************************************************************************/

#if 1 /* Software Timer IRQ Handlers */

void APP_timeoutTimerIRQHandler(void* param)
{
 800af1c:	b480      	push	{r7}
 800af1e:	b083      	sub	sp, #12
 800af20:	af00      	add	r7, sp, #0
 800af22:	6078      	str	r0, [r7, #4]

}
 800af24:	bf00      	nop
 800af26:	370c      	adds	r7, #12
 800af28:	46bd      	mov	sp, r7
 800af2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af2e:	4770      	bx	lr

0800af30 <APP_periodicTimerIRQHandler>:

void APP_periodicTimerIRQHandler(void* param)
{
 800af30:	b480      	push	{r7}
 800af32:	b083      	sub	sp, #12
 800af34:	af00      	add	r7, sp, #0
 800af36:	6078      	str	r0, [r7, #4]

}
 800af38:	bf00      	nop
 800af3a:	370c      	adds	r7, #12
 800af3c:	46bd      	mov	sp, r7
 800af3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af42:	4770      	bx	lr

0800af44 <Initilialise_App>:

#endif


void Initilialise_App(void)
{
 800af44:	b580      	push	{r7, lr}
 800af46:	b084      	sub	sp, #16
 800af48:	af04      	add	r7, sp, #16
	/***************** Create Static Threads ******************************/

	/* Create Static TelemetryMAIN Thread */
#ifdef BSP_PROCESS_TELEMETRYMAIN

	xHandle.Process_TelemetryMAIN = xTaskCreateStatic
 800af4a:	4b63      	ldr	r3, [pc, #396]	; (800b0d8 <Initilialise_App+0x194>)
 800af4c:	9302      	str	r3, [sp, #8]
 800af4e:	4b63      	ldr	r3, [pc, #396]	; (800b0dc <Initilialise_App+0x198>)
 800af50:	9301      	str	r3, [sp, #4]
 800af52:	2301      	movs	r3, #1
 800af54:	9300      	str	r3, [sp, #0]
 800af56:	2301      	movs	r3, #1
 800af58:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800af5c:	4960      	ldr	r1, [pc, #384]	; (800b0e0 <Initilialise_App+0x19c>)
 800af5e:	4861      	ldr	r0, [pc, #388]	; (800b0e4 <Initilialise_App+0x1a0>)
 800af60:	f7fd ff9c 	bl	8008e9c <xTaskCreateStatic>
 800af64:	4603      	mov	r3, r0
 800af66:	4a60      	ldr	r2, [pc, #384]	; (800b0e8 <Initilialise_App+0x1a4>)
 800af68:	6013      	str	r3, [r2, #0]
#endif


#ifdef BSP_PROCESS_FLASH
	/* Create Static Flash Task	*/
    xHandle.Process_Flash = xTaskCreateStatic(
 800af6a:	4b60      	ldr	r3, [pc, #384]	; (800b0ec <Initilialise_App+0x1a8>)
 800af6c:	9302      	str	r3, [sp, #8]
 800af6e:	4b60      	ldr	r3, [pc, #384]	; (800b0f0 <Initilialise_App+0x1ac>)
 800af70:	9301      	str	r3, [sp, #4]
 800af72:	2303      	movs	r3, #3
 800af74:	9300      	str	r3, [sp, #0]
 800af76:	2301      	movs	r3, #1
 800af78:	f44f 7200 	mov.w	r2, #512	; 0x200
 800af7c:	495d      	ldr	r1, [pc, #372]	; (800b0f4 <Initilialise_App+0x1b0>)
 800af7e:	485e      	ldr	r0, [pc, #376]	; (800b0f8 <Initilialise_App+0x1b4>)
 800af80:	f7fd ff8c 	bl	8008e9c <xTaskCreateStatic>
 800af84:	4603      	mov	r3, r0
 800af86:	4a58      	ldr	r2, [pc, #352]	; (800b0e8 <Initilialise_App+0x1a4>)
 800af88:	6053      	str	r3, [r2, #4]
#endif


#ifdef BSP_PROCESS_CAN
    /* Create Static can Task	*/
    xHandle.Process_CAN = xTaskCreateStatic(
 800af8a:	4b5c      	ldr	r3, [pc, #368]	; (800b0fc <Initilialise_App+0x1b8>)
 800af8c:	9302      	str	r3, [sp, #8]
 800af8e:	4b5c      	ldr	r3, [pc, #368]	; (800b100 <Initilialise_App+0x1bc>)
 800af90:	9301      	str	r3, [sp, #4]
 800af92:	2302      	movs	r3, #2
 800af94:	9300      	str	r3, [sp, #0]
 800af96:	2301      	movs	r3, #1
 800af98:	f44f 7200 	mov.w	r2, #512	; 0x200
 800af9c:	4959      	ldr	r1, [pc, #356]	; (800b104 <Initilialise_App+0x1c0>)
 800af9e:	485a      	ldr	r0, [pc, #360]	; (800b108 <Initilialise_App+0x1c4>)
 800afa0:	f7fd ff7c 	bl	8008e9c <xTaskCreateStatic>
 800afa4:	4603      	mov	r3, r0
 800afa6:	4a50      	ldr	r2, [pc, #320]	; (800b0e8 <Initilialise_App+0x1a4>)
 800afa8:	6093      	str	r3, [r2, #8]
#endif


#ifdef BSP_PROCESS_RTC
    /* Create Static RTC Task	*/
    xHandle.Process_RTC = xTaskCreateStatic(
 800afaa:	4b58      	ldr	r3, [pc, #352]	; (800b10c <Initilialise_App+0x1c8>)
 800afac:	9302      	str	r3, [sp, #8]
 800afae:	4b58      	ldr	r3, [pc, #352]	; (800b110 <Initilialise_App+0x1cc>)
 800afb0:	9301      	str	r3, [sp, #4]
 800afb2:	2304      	movs	r3, #4
 800afb4:	9300      	str	r3, [sp, #0]
 800afb6:	2301      	movs	r3, #1
 800afb8:	f44f 7280 	mov.w	r2, #256	; 0x100
 800afbc:	4955      	ldr	r1, [pc, #340]	; (800b114 <Initilialise_App+0x1d0>)
 800afbe:	4856      	ldr	r0, [pc, #344]	; (800b118 <Initilialise_App+0x1d4>)
 800afc0:	f7fd ff6c 	bl	8008e9c <xTaskCreateStatic>
 800afc4:	4603      	mov	r3, r0
 800afc6:	4a48      	ldr	r2, [pc, #288]	; (800b0e8 <Initilialise_App+0x1a4>)
 800afc8:	60d3      	str	r3, [r2, #12]

#endif

#ifdef BSP_PROCESS_SDCARD
    /* Create Static sdcard Task	*/
    xHandle.Process_SDCARD = xTaskCreateStatic(
 800afca:	4b54      	ldr	r3, [pc, #336]	; (800b11c <Initilialise_App+0x1d8>)
 800afcc:	9302      	str	r3, [sp, #8]
 800afce:	4b54      	ldr	r3, [pc, #336]	; (800b120 <Initilialise_App+0x1dc>)
 800afd0:	9301      	str	r3, [sp, #4]
 800afd2:	2307      	movs	r3, #7
 800afd4:	9300      	str	r3, [sp, #0]
 800afd6:	2301      	movs	r3, #1
 800afd8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800afdc:	4951      	ldr	r1, [pc, #324]	; (800b124 <Initilialise_App+0x1e0>)
 800afde:	4852      	ldr	r0, [pc, #328]	; (800b128 <Initilialise_App+0x1e4>)
 800afe0:	f7fd ff5c 	bl	8008e9c <xTaskCreateStatic>
 800afe4:	4603      	mov	r3, r0
 800afe6:	4a40      	ldr	r2, [pc, #256]	; (800b0e8 <Initilialise_App+0x1a4>)
 800afe8:	6113      	str	r3, [r2, #16]

#endif

#ifdef BSP_PROCESS_WIFI
    /* Create Static wifi Task	*/
    xHandle.Process_WIFI = xTaskCreateStatic(
 800afea:	4b50      	ldr	r3, [pc, #320]	; (800b12c <Initilialise_App+0x1e8>)
 800afec:	9302      	str	r3, [sp, #8]
 800afee:	4b50      	ldr	r3, [pc, #320]	; (800b130 <Initilialise_App+0x1ec>)
 800aff0:	9301      	str	r3, [sp, #4]
 800aff2:	2306      	movs	r3, #6
 800aff4:	9300      	str	r3, [sp, #0]
 800aff6:	2301      	movs	r3, #1
 800aff8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800affc:	494d      	ldr	r1, [pc, #308]	; (800b134 <Initilialise_App+0x1f0>)
 800affe:	484e      	ldr	r0, [pc, #312]	; (800b138 <Initilialise_App+0x1f4>)
 800b000:	f7fd ff4c 	bl	8008e9c <xTaskCreateStatic>
 800b004:	4603      	mov	r3, r0
 800b006:	4a38      	ldr	r2, [pc, #224]	; (800b0e8 <Initilialise_App+0x1a4>)
 800b008:	6153      	str	r3, [r2, #20]

#endif

#ifdef BSP_PROCESS_NEXTION
    /* Create Static nextion Task	*/
    xHandle.Process_NEXTION = xTaskCreateStatic(
 800b00a:	4b4c      	ldr	r3, [pc, #304]	; (800b13c <Initilialise_App+0x1f8>)
 800b00c:	9302      	str	r3, [sp, #8]
 800b00e:	4b4c      	ldr	r3, [pc, #304]	; (800b140 <Initilialise_App+0x1fc>)
 800b010:	9301      	str	r3, [sp, #4]
 800b012:	2305      	movs	r3, #5
 800b014:	9300      	str	r3, [sp, #0]
 800b016:	2301      	movs	r3, #1
 800b018:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b01c:	4949      	ldr	r1, [pc, #292]	; (800b144 <Initilialise_App+0x200>)
 800b01e:	484a      	ldr	r0, [pc, #296]	; (800b148 <Initilialise_App+0x204>)
 800b020:	f7fd ff3c 	bl	8008e9c <xTaskCreateStatic>
 800b024:	4603      	mov	r3, r0
 800b026:	4a30      	ldr	r2, [pc, #192]	; (800b0e8 <Initilialise_App+0x1a4>)
 800b028:	6193      	str	r3, [r2, #24]

/********************* Binary Semaphore Create **********************/

#ifdef BSP_PROCESS_FLASH
	/* Create Static Flash Semaphore	*/
	xSemHandle.Process_Flash 	 = xSemaphoreCreateBinaryStatic(&xSemaphore.Process_Flash		);
 800b02a:	2303      	movs	r3, #3
 800b02c:	9300      	str	r3, [sp, #0]
 800b02e:	4b47      	ldr	r3, [pc, #284]	; (800b14c <Initilialise_App+0x208>)
 800b030:	2200      	movs	r2, #0
 800b032:	2100      	movs	r1, #0
 800b034:	2001      	movs	r0, #1
 800b036:	f7fc ff8b 	bl	8007f50 <xQueueGenericCreateStatic>
 800b03a:	4603      	mov	r3, r0
 800b03c:	4a44      	ldr	r2, [pc, #272]	; (800b150 <Initilialise_App+0x20c>)
 800b03e:	6013      	str	r3, [r2, #0]
#endif


#ifdef BSP_PROCESS_CAN
    /* Create Static can Semaphore	*/
	xSemHandle.Process_CAN 		  = xSemaphoreCreateBinaryStatic(&xSemaphore.Process_CAN		);
 800b040:	2303      	movs	r3, #3
 800b042:	9300      	str	r3, [sp, #0]
 800b044:	4b43      	ldr	r3, [pc, #268]	; (800b154 <Initilialise_App+0x210>)
 800b046:	2200      	movs	r2, #0
 800b048:	2100      	movs	r1, #0
 800b04a:	2001      	movs	r0, #1
 800b04c:	f7fc ff80 	bl	8007f50 <xQueueGenericCreateStatic>
 800b050:	4603      	mov	r3, r0
 800b052:	4a3f      	ldr	r2, [pc, #252]	; (800b150 <Initilialise_App+0x20c>)
 800b054:	6053      	str	r3, [r2, #4]
#endif


#ifdef BSP_PROCESS_RTC
    /* Create Static RTC Semaphore	*/
	xSemHandle.Process_RTC 		  = xSemaphoreCreateBinaryStatic(&xSemaphore.Process_RTC		);
 800b056:	2303      	movs	r3, #3
 800b058:	9300      	str	r3, [sp, #0]
 800b05a:	4b3f      	ldr	r3, [pc, #252]	; (800b158 <Initilialise_App+0x214>)
 800b05c:	2200      	movs	r2, #0
 800b05e:	2100      	movs	r1, #0
 800b060:	2001      	movs	r0, #1
 800b062:	f7fc ff75 	bl	8007f50 <xQueueGenericCreateStatic>
 800b066:	4603      	mov	r3, r0
 800b068:	4a39      	ldr	r2, [pc, #228]	; (800b150 <Initilialise_App+0x20c>)
 800b06a:	6093      	str	r3, [r2, #8]
#endif

#ifdef BSP_PROCESS_SDCARD
    /* Create Static sdcard Semaphore	*/
	xSemHandle.Process_SDCARD 	  = xSemaphoreCreateBinaryStatic(&xSemaphore.Process_SDCARD		);
 800b06c:	2303      	movs	r3, #3
 800b06e:	9300      	str	r3, [sp, #0]
 800b070:	4b3a      	ldr	r3, [pc, #232]	; (800b15c <Initilialise_App+0x218>)
 800b072:	2200      	movs	r2, #0
 800b074:	2100      	movs	r1, #0
 800b076:	2001      	movs	r0, #1
 800b078:	f7fc ff6a 	bl	8007f50 <xQueueGenericCreateStatic>
 800b07c:	4603      	mov	r3, r0
 800b07e:	4a34      	ldr	r2, [pc, #208]	; (800b150 <Initilialise_App+0x20c>)
 800b080:	60d3      	str	r3, [r2, #12]
#endif

#ifdef BSP_PROCESS_WIFI
    /* Create Static wifi Semaphore	*/
	xSemHandle.Process_WIFI 	  = xSemaphoreCreateBinaryStatic(&xSemaphore.Process_WIFI		);
 800b082:	2303      	movs	r3, #3
 800b084:	9300      	str	r3, [sp, #0]
 800b086:	4b36      	ldr	r3, [pc, #216]	; (800b160 <Initilialise_App+0x21c>)
 800b088:	2200      	movs	r2, #0
 800b08a:	2100      	movs	r1, #0
 800b08c:	2001      	movs	r0, #1
 800b08e:	f7fc ff5f 	bl	8007f50 <xQueueGenericCreateStatic>
 800b092:	4603      	mov	r3, r0
 800b094:	4a2e      	ldr	r2, [pc, #184]	; (800b150 <Initilialise_App+0x20c>)
 800b096:	6113      	str	r3, [r2, #16]
#endif

#ifdef BSP_PROCESS_NEXTION
    /* Create Static nextion Semaphore	*/
	xSemHandle.Process_NEXTION 	  = xSemaphoreCreateBinaryStatic(&xSemaphore.Process_NEXTION	);
 800b098:	2303      	movs	r3, #3
 800b09a:	9300      	str	r3, [sp, #0]
 800b09c:	4b31      	ldr	r3, [pc, #196]	; (800b164 <Initilialise_App+0x220>)
 800b09e:	2200      	movs	r2, #0
 800b0a0:	2100      	movs	r1, #0
 800b0a2:	2001      	movs	r0, #1
 800b0a4:	f7fc ff54 	bl	8007f50 <xQueueGenericCreateStatic>
 800b0a8:	4603      	mov	r3, r0
 800b0aa:	4a29      	ldr	r2, [pc, #164]	; (800b150 <Initilialise_App+0x20c>)
 800b0ac:	6153      	str	r3, [r2, #20]
#endif

	/************************ Create  Software Timers ***********************************/

    xTimerID.periodic = 	osTimerNew( APP_periodicTimerIRQHandler			,
 800b0ae:	4b2e      	ldr	r3, [pc, #184]	; (800b168 <Initilialise_App+0x224>)
 800b0b0:	2200      	movs	r2, #0
 800b0b2:	2101      	movs	r1, #1
 800b0b4:	482d      	ldr	r0, [pc, #180]	; (800b16c <Initilialise_App+0x228>)
 800b0b6:	f7fc fc3b 	bl	8007930 <osTimerNew>
 800b0ba:	4603      	mov	r3, r0
 800b0bc:	4a2c      	ldr	r2, [pc, #176]	; (800b170 <Initilialise_App+0x22c>)
 800b0be:	6013      	str	r3, [r2, #0]
    									osTimerPeriodic						,
										NULL								,
										&APP_periodic_attributes			);

    xTimerID.timeout  = 	osTimerNew( APP_timeoutTimerIRQHandler			,
 800b0c0:	4b2c      	ldr	r3, [pc, #176]	; (800b174 <Initilialise_App+0x230>)
 800b0c2:	2200      	movs	r2, #0
 800b0c4:	2100      	movs	r1, #0
 800b0c6:	482c      	ldr	r0, [pc, #176]	; (800b178 <Initilialise_App+0x234>)
 800b0c8:	f7fc fc32 	bl	8007930 <osTimerNew>
 800b0cc:	4603      	mov	r3, r0
 800b0ce:	4a28      	ldr	r2, [pc, #160]	; (800b170 <Initilialise_App+0x22c>)
 800b0d0:	6053      	str	r3, [r2, #4]

#ifdef DEBUG_MODE
    HAL_UART_Receive_DMA(&huart1, (U8 *)&__GL.DEBUG_Buffer[0], (U8)DEBUG_MSG_SIZE);
#endif

}
 800b0d2:	bf00      	nop
 800b0d4:	46bd      	mov	sp, r7
 800b0d6:	bd80      	pop	{r7, pc}
 800b0d8:	20005d80 	.word	0x20005d80
 800b0dc:	20006004 	.word	0x20006004
 800b0e0:	0800bbf0 	.word	0x0800bbf0
 800b0e4:	0800b18d 	.word	0x0800b18d
 800b0e8:	2000a404 	.word	0x2000a404
 800b0ec:	20005ddc 	.word	0x20005ddc
 800b0f0:	20007004 	.word	0x20007004
 800b0f4:	0800bc0c 	.word	0x0800bc0c
 800b0f8:	0800b1b9 	.word	0x0800b1b9
 800b0fc:	20005e38 	.word	0x20005e38
 800b100:	20007804 	.word	0x20007804
 800b104:	0800bc20 	.word	0x0800bc20
 800b108:	0800b20d 	.word	0x0800b20d
 800b10c:	20005e94 	.word	0x20005e94
 800b110:	20008004 	.word	0x20008004
 800b114:	0800bc34 	.word	0x0800bc34
 800b118:	0800b261 	.word	0x0800b261
 800b11c:	20005ef0 	.word	0x20005ef0
 800b120:	20008404 	.word	0x20008404
 800b124:	0800bc48 	.word	0x0800bc48
 800b128:	0800b2b5 	.word	0x0800b2b5
 800b12c:	20005f4c 	.word	0x20005f4c
 800b130:	20008c04 	.word	0x20008c04
 800b134:	0800bc5c 	.word	0x0800bc5c
 800b138:	0800b309 	.word	0x0800b309
 800b13c:	20005fa8 	.word	0x20005fa8
 800b140:	20009c04 	.word	0x20009c04
 800b144:	0800bc70 	.word	0x0800bc70
 800b148:	0800b35d 	.word	0x0800b35d
 800b14c:	2000a420 	.word	0x2000a420
 800b150:	2000a600 	.word	0x2000a600
 800b154:	2000a470 	.word	0x2000a470
 800b158:	2000a4c0 	.word	0x2000a4c0
 800b15c:	2000a510 	.word	0x2000a510
 800b160:	2000a560 	.word	0x2000a560
 800b164:	2000a5b0 	.word	0x2000a5b0
 800b168:	0800c15c 	.word	0x0800c15c
 800b16c:	0800af31 	.word	0x0800af31
 800b170:	2000a630 	.word	0x2000a630
 800b174:	0800c16c 	.word	0x0800c16c
 800b178:	0800af1d 	.word	0x0800af1d

0800b17c <MAIN_App>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void MAIN_App(void)
{
 800b17c:	b580      	push	{r7, lr}
 800b17e:	af00      	add	r7, sp, #0
	/* Create Threads, Semph, SW Timers */
    Initilialise_App();
 800b180:	f7ff fee0 	bl	800af44 <Initilialise_App>
    /* Start Scheduler */
    vTaskStartScheduler();
 800b184:	f7fe f860 	bl	8009248 <vTaskStartScheduler>

}
 800b188:	bf00      	nop
 800b18a:	bd80      	pop	{r7, pc}

0800b18c <Process_TelemetryMAIN_TaskHandler>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void Process_TelemetryMAIN_TaskHandler(void* param)
{
 800b18c:	b580      	push	{r7, lr}
 800b18e:	b082      	sub	sp, #8
 800b190:	af00      	add	r7, sp, #0
 800b192:	6078      	str	r0, [r7, #4]

	TelemetryMain_StartUP();
 800b194:	f000 fc5c 	bl	800ba50 <TelemetryMain_StartUP>
#ifdef DEBUG_THREAD
        DEBUG_printThread((char *)PROCESS_TELEMETRYMAIN_THREADNAME, "STARTED");
#endif
        // [[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[

        TelemetyMain_MAIN(); /* Main Application */
 800b198:	f000 fc70 	bl	800ba7c <TelemetyMain_MAIN>

        Process_Can_Run();
 800b19c:	f000 f93e 	bl	800b41c <Process_Can_Run>

        Process_Flash_Run();
 800b1a0:	f000 f906 	bl	800b3b0 <Process_Flash_Run>

        Process_NEXTION_Run();
 800b1a4:	f000 f9dc 	bl	800b560 <Process_NEXTION_Run>

        Process_SDCARD_Run();
 800b1a8:	f000 f96e 	bl	800b488 <Process_SDCARD_Run>

        Process_WIFI_Run();
 800b1ac:	f000 f9a2 	bl	800b4f4 <Process_WIFI_Run>


		vTaskDelay(10);  /* Main Thread Checkout every 10ms tick */
 800b1b0:	200a      	movs	r0, #10
 800b1b2:	f7fe f815 	bl	80091e0 <vTaskDelay>
        TelemetyMain_MAIN(); /* Main Application */
 800b1b6:	e7ef      	b.n	800b198 <Process_TelemetryMAIN_TaskHandler+0xc>

0800b1b8 <Process_Flash_TaskHandler>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void Process_Flash_TaskHandler(void* param)
{
 800b1b8:	b580      	push	{r7, lr}
 800b1ba:	b084      	sub	sp, #16
 800b1bc:	af02      	add	r7, sp, #8
 800b1be:	6078      	str	r0, [r7, #4]

	ModuleFlash_StartUP();
 800b1c0:	f000 fa60 	bl	800b684 <ModuleFlash_StartUP>

	while(1)
	{

	/* Semaphore Wait */
	xSemResult.Process_Flash = xQueueSemaphoreTake(xSemHandle.Process_Flash, osWaitForever);
 800b1c4:	4b0e      	ldr	r3, [pc, #56]	; (800b200 <Process_Flash_TaskHandler+0x48>)
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	f04f 31ff 	mov.w	r1, #4294967295
 800b1cc:	4618      	mov	r0, r3
 800b1ce:	f7fd fb05 	bl	80087dc <xQueueSemaphoreTake>
 800b1d2:	4603      	mov	r3, r0
 800b1d4:	4a0b      	ldr	r2, [pc, #44]	; (800b204 <Process_Flash_TaskHandler+0x4c>)
 800b1d6:	6013      	str	r3, [r2, #0]
	if (pdTRUE == xSemResult.Process_Flash)
 800b1d8:	4b0a      	ldr	r3, [pc, #40]	; (800b204 <Process_Flash_TaskHandler+0x4c>)
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	2b01      	cmp	r3, #1
 800b1de:	d102      	bne.n	800b1e6 <Process_Flash_TaskHandler+0x2e>
#ifdef DEBUG_THREAD
        DEBUG_printThread((char *)PROCESS_FLASH_THREADNAME, "STARTED");
#endif
        // [[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[

        ModuleFlash_MAIN(); /* Main Application */
 800b1e0:	f000 fa66 	bl	800b6b0 <ModuleFlash_MAIN>
 800b1e4:	e7ee      	b.n	800b1c4 <Process_Flash_TaskHandler+0xc>


	else
	{
		/* Semaphore fail / Create Again                                                             */
		xSemHandle.Process_Flash = xSemaphoreCreateBinaryStatic(&xSemaphore.Process_Flash);
 800b1e6:	2303      	movs	r3, #3
 800b1e8:	9300      	str	r3, [sp, #0]
 800b1ea:	4b07      	ldr	r3, [pc, #28]	; (800b208 <Process_Flash_TaskHandler+0x50>)
 800b1ec:	2200      	movs	r2, #0
 800b1ee:	2100      	movs	r1, #0
 800b1f0:	2001      	movs	r0, #1
 800b1f2:	f7fc fead 	bl	8007f50 <xQueueGenericCreateStatic>
 800b1f6:	4603      	mov	r3, r0
 800b1f8:	4a01      	ldr	r2, [pc, #4]	; (800b200 <Process_Flash_TaskHandler+0x48>)
 800b1fa:	6013      	str	r3, [r2, #0]
	xSemResult.Process_Flash = xQueueSemaphoreTake(xSemHandle.Process_Flash, osWaitForever);
 800b1fc:	e7e2      	b.n	800b1c4 <Process_Flash_TaskHandler+0xc>
 800b1fe:	bf00      	nop
 800b200:	2000a600 	.word	0x2000a600
 800b204:	2000a618 	.word	0x2000a618
 800b208:	2000a420 	.word	0x2000a420

0800b20c <Process_CAN_TaskHandler>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void Process_CAN_TaskHandler(void* param)
{
 800b20c:	b580      	push	{r7, lr}
 800b20e:	b084      	sub	sp, #16
 800b210:	af02      	add	r7, sp, #8
 800b212:	6078      	str	r0, [r7, #4]
	ModuleCAN_StartUP();
 800b214:	f000 f9e8 	bl	800b5e8 <ModuleCAN_StartUP>

while(1)
    {
	/* Semaphore Wait */
	xSemResult.Process_CAN = xQueueSemaphoreTake(xSemHandle.Process_CAN, osWaitForever);
 800b218:	4b0e      	ldr	r3, [pc, #56]	; (800b254 <Process_CAN_TaskHandler+0x48>)
 800b21a:	685b      	ldr	r3, [r3, #4]
 800b21c:	f04f 31ff 	mov.w	r1, #4294967295
 800b220:	4618      	mov	r0, r3
 800b222:	f7fd fadb 	bl	80087dc <xQueueSemaphoreTake>
 800b226:	4603      	mov	r3, r0
 800b228:	4a0b      	ldr	r2, [pc, #44]	; (800b258 <Process_CAN_TaskHandler+0x4c>)
 800b22a:	6053      	str	r3, [r2, #4]
	if (pdTRUE == xSemResult.Process_CAN)
 800b22c:	4b0a      	ldr	r3, [pc, #40]	; (800b258 <Process_CAN_TaskHandler+0x4c>)
 800b22e:	685b      	ldr	r3, [r3, #4]
 800b230:	2b01      	cmp	r3, #1
 800b232:	d102      	bne.n	800b23a <Process_CAN_TaskHandler+0x2e>
#ifdef DEBUG_THREAD
        DEBUG_printThread((char *)PROCESS_CAN_THREADNAME, "STARTED");
#endif
        // [[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[

        ModuleCAN_MAIN(); /* Main Application */
 800b234:	f000 f9ee 	bl	800b614 <ModuleCAN_MAIN>
 800b238:	e7ee      	b.n	800b218 <Process_CAN_TaskHandler+0xc>

	}
	else
	{
		/* Semaphore fail / Create Again                                                             */
		xSemHandle.Process_CAN = xSemaphoreCreateBinaryStatic(&xSemaphore.Process_CAN);
 800b23a:	2303      	movs	r3, #3
 800b23c:	9300      	str	r3, [sp, #0]
 800b23e:	4b07      	ldr	r3, [pc, #28]	; (800b25c <Process_CAN_TaskHandler+0x50>)
 800b240:	2200      	movs	r2, #0
 800b242:	2100      	movs	r1, #0
 800b244:	2001      	movs	r0, #1
 800b246:	f7fc fe83 	bl	8007f50 <xQueueGenericCreateStatic>
 800b24a:	4603      	mov	r3, r0
 800b24c:	4a01      	ldr	r2, [pc, #4]	; (800b254 <Process_CAN_TaskHandler+0x48>)
 800b24e:	6053      	str	r3, [r2, #4]
	xSemResult.Process_CAN = xQueueSemaphoreTake(xSemHandle.Process_CAN, osWaitForever);
 800b250:	e7e2      	b.n	800b218 <Process_CAN_TaskHandler+0xc>
 800b252:	bf00      	nop
 800b254:	2000a600 	.word	0x2000a600
 800b258:	2000a618 	.word	0x2000a618
 800b25c:	2000a470 	.word	0x2000a470

0800b260 <Process_RTC_TaskHandler>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void Process_RTC_TaskHandler(void* param)
{
 800b260:	b580      	push	{r7, lr}
 800b262:	b084      	sub	sp, #16
 800b264:	af02      	add	r7, sp, #8
 800b266:	6078      	str	r0, [r7, #4]
	ModuleRTC_StartUP();
 800b268:	f000 faa4 	bl	800b7b4 <ModuleRTC_StartUP>

	while(1)
	{

	/* Semaphore Wait */
	xSemResult.Process_RTC = xQueueSemaphoreTake(xSemHandle.Process_RTC, osWaitForever);
 800b26c:	4b0e      	ldr	r3, [pc, #56]	; (800b2a8 <Process_RTC_TaskHandler+0x48>)
 800b26e:	689b      	ldr	r3, [r3, #8]
 800b270:	f04f 31ff 	mov.w	r1, #4294967295
 800b274:	4618      	mov	r0, r3
 800b276:	f7fd fab1 	bl	80087dc <xQueueSemaphoreTake>
 800b27a:	4603      	mov	r3, r0
 800b27c:	4a0b      	ldr	r2, [pc, #44]	; (800b2ac <Process_RTC_TaskHandler+0x4c>)
 800b27e:	6093      	str	r3, [r2, #8]
	if (pdTRUE == xSemResult.Process_RTC)
 800b280:	4b0a      	ldr	r3, [pc, #40]	; (800b2ac <Process_RTC_TaskHandler+0x4c>)
 800b282:	689b      	ldr	r3, [r3, #8]
 800b284:	2b01      	cmp	r3, #1
 800b286:	d102      	bne.n	800b28e <Process_RTC_TaskHandler+0x2e>
#ifdef DEBUG_THREAD
        DEBUG_printThread((char *)PROCESS_RTC_THREADNAME, "STARTED");
#endif
        // [[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[

        ModuleRTC_MAIN(); /* Main Application */
 800b288:	f000 faaa 	bl	800b7e0 <ModuleRTC_MAIN>
 800b28c:	e7ee      	b.n	800b26c <Process_RTC_TaskHandler+0xc>


	else
	{
		/* Semaphore fail / Create Again  */
		xSemHandle.Process_RTC = xSemaphoreCreateBinaryStatic(&xSemaphore.Process_RTC);
 800b28e:	2303      	movs	r3, #3
 800b290:	9300      	str	r3, [sp, #0]
 800b292:	4b07      	ldr	r3, [pc, #28]	; (800b2b0 <Process_RTC_TaskHandler+0x50>)
 800b294:	2200      	movs	r2, #0
 800b296:	2100      	movs	r1, #0
 800b298:	2001      	movs	r0, #1
 800b29a:	f7fc fe59 	bl	8007f50 <xQueueGenericCreateStatic>
 800b29e:	4603      	mov	r3, r0
 800b2a0:	4a01      	ldr	r2, [pc, #4]	; (800b2a8 <Process_RTC_TaskHandler+0x48>)
 800b2a2:	6093      	str	r3, [r2, #8]
	xSemResult.Process_RTC = xQueueSemaphoreTake(xSemHandle.Process_RTC, osWaitForever);
 800b2a4:	e7e2      	b.n	800b26c <Process_RTC_TaskHandler+0xc>
 800b2a6:	bf00      	nop
 800b2a8:	2000a600 	.word	0x2000a600
 800b2ac:	2000a618 	.word	0x2000a618
 800b2b0:	2000a4c0 	.word	0x2000a4c0

0800b2b4 <Process_SDCARD_TaskHandler>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void Process_SDCARD_TaskHandler(void* param)
{
 800b2b4:	b580      	push	{r7, lr}
 800b2b6:	b084      	sub	sp, #16
 800b2b8:	af02      	add	r7, sp, #8
 800b2ba:	6078      	str	r0, [r7, #4]
	ModuleSDCard_StartUP();
 800b2bc:	f000 fac6 	bl	800b84c <ModuleSDCard_StartUP>

	while(1)
	{

	/* Semaphore Wait */
	xSemResult.Process_SDCARD = xQueueSemaphoreTake(xSemHandle.Process_SDCARD, osWaitForever);
 800b2c0:	4b0e      	ldr	r3, [pc, #56]	; (800b2fc <Process_SDCARD_TaskHandler+0x48>)
 800b2c2:	68db      	ldr	r3, [r3, #12]
 800b2c4:	f04f 31ff 	mov.w	r1, #4294967295
 800b2c8:	4618      	mov	r0, r3
 800b2ca:	f7fd fa87 	bl	80087dc <xQueueSemaphoreTake>
 800b2ce:	4603      	mov	r3, r0
 800b2d0:	4a0b      	ldr	r2, [pc, #44]	; (800b300 <Process_SDCARD_TaskHandler+0x4c>)
 800b2d2:	60d3      	str	r3, [r2, #12]
	if (pdTRUE == xSemResult.Process_SDCARD)
 800b2d4:	4b0a      	ldr	r3, [pc, #40]	; (800b300 <Process_SDCARD_TaskHandler+0x4c>)
 800b2d6:	68db      	ldr	r3, [r3, #12]
 800b2d8:	2b01      	cmp	r3, #1
 800b2da:	d102      	bne.n	800b2e2 <Process_SDCARD_TaskHandler+0x2e>
#ifdef DEBUG_THREAD
        DEBUG_printThread((char *)PROCESS_SDCARD_THREADNAME, "STARTED");
#endif
        // [[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[

        ModuleSDCard_MAIN(); /* Main Application */
 800b2dc:	f000 fb36 	bl	800b94c <ModuleSDCard_MAIN>
 800b2e0:	e7ee      	b.n	800b2c0 <Process_SDCARD_TaskHandler+0xc>


	else
	{
		/* Semaphore fail / Create Again  */
		xSemHandle.Process_SDCARD = xSemaphoreCreateBinaryStatic(&xSemaphore.Process_SDCARD);
 800b2e2:	2303      	movs	r3, #3
 800b2e4:	9300      	str	r3, [sp, #0]
 800b2e6:	4b07      	ldr	r3, [pc, #28]	; (800b304 <Process_SDCARD_TaskHandler+0x50>)
 800b2e8:	2200      	movs	r2, #0
 800b2ea:	2100      	movs	r1, #0
 800b2ec:	2001      	movs	r0, #1
 800b2ee:	f7fc fe2f 	bl	8007f50 <xQueueGenericCreateStatic>
 800b2f2:	4603      	mov	r3, r0
 800b2f4:	4a01      	ldr	r2, [pc, #4]	; (800b2fc <Process_SDCARD_TaskHandler+0x48>)
 800b2f6:	60d3      	str	r3, [r2, #12]
	xSemResult.Process_SDCARD = xQueueSemaphoreTake(xSemHandle.Process_SDCARD, osWaitForever);
 800b2f8:	e7e2      	b.n	800b2c0 <Process_SDCARD_TaskHandler+0xc>
 800b2fa:	bf00      	nop
 800b2fc:	2000a600 	.word	0x2000a600
 800b300:	2000a618 	.word	0x2000a618
 800b304:	2000a510 	.word	0x2000a510

0800b308 <Process_WIFI_TaskHandler>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void Process_WIFI_TaskHandler(void* param)
{
 800b308:	b580      	push	{r7, lr}
 800b30a:	b084      	sub	sp, #16
 800b30c:	af02      	add	r7, sp, #8
 800b30e:	6078      	str	r0, [r7, #4]
	ModuleWIFI_StartUP();
 800b310:	f000 fb52 	bl	800b9b8 <ModuleWIFI_StartUP>

	while(1)
	{

	/* Semaphore Wait */
	xSemResult.Process_WIFI = xQueueSemaphoreTake(xSemHandle.Process_WIFI, osWaitForever);
 800b314:	4b0e      	ldr	r3, [pc, #56]	; (800b350 <Process_WIFI_TaskHandler+0x48>)
 800b316:	691b      	ldr	r3, [r3, #16]
 800b318:	f04f 31ff 	mov.w	r1, #4294967295
 800b31c:	4618      	mov	r0, r3
 800b31e:	f7fd fa5d 	bl	80087dc <xQueueSemaphoreTake>
 800b322:	4603      	mov	r3, r0
 800b324:	4a0b      	ldr	r2, [pc, #44]	; (800b354 <Process_WIFI_TaskHandler+0x4c>)
 800b326:	6113      	str	r3, [r2, #16]
	if (pdTRUE == xSemResult.Process_WIFI)
 800b328:	4b0a      	ldr	r3, [pc, #40]	; (800b354 <Process_WIFI_TaskHandler+0x4c>)
 800b32a:	691b      	ldr	r3, [r3, #16]
 800b32c:	2b01      	cmp	r3, #1
 800b32e:	d102      	bne.n	800b336 <Process_WIFI_TaskHandler+0x2e>
#ifdef DEBUG_THREAD
        DEBUG_printThread((char *)PROCESS_WIFI_THREADNAME, "STARTED");
#endif
        // [[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[

        ModuleWIFI_MAIN(); /* Main Application */
 800b330:	f000 fb58 	bl	800b9e4 <ModuleWIFI_MAIN>
 800b334:	e7ee      	b.n	800b314 <Process_WIFI_TaskHandler+0xc>


	else
	{
		/* Semaphore fail / Create Again  */
		xSemHandle.Process_WIFI = xSemaphoreCreateBinaryStatic(&xSemaphore.Process_WIFI);
 800b336:	2303      	movs	r3, #3
 800b338:	9300      	str	r3, [sp, #0]
 800b33a:	4b07      	ldr	r3, [pc, #28]	; (800b358 <Process_WIFI_TaskHandler+0x50>)
 800b33c:	2200      	movs	r2, #0
 800b33e:	2100      	movs	r1, #0
 800b340:	2001      	movs	r0, #1
 800b342:	f7fc fe05 	bl	8007f50 <xQueueGenericCreateStatic>
 800b346:	4603      	mov	r3, r0
 800b348:	4a01      	ldr	r2, [pc, #4]	; (800b350 <Process_WIFI_TaskHandler+0x48>)
 800b34a:	6113      	str	r3, [r2, #16]
	xSemResult.Process_WIFI = xQueueSemaphoreTake(xSemHandle.Process_WIFI, osWaitForever);
 800b34c:	e7e2      	b.n	800b314 <Process_WIFI_TaskHandler+0xc>
 800b34e:	bf00      	nop
 800b350:	2000a600 	.word	0x2000a600
 800b354:	2000a618 	.word	0x2000a618
 800b358:	2000a560 	.word	0x2000a560

0800b35c <Process_NEXTION_TaskHandler>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void Process_NEXTION_TaskHandler(void* param)
{
 800b35c:	b580      	push	{r7, lr}
 800b35e:	b084      	sub	sp, #16
 800b360:	af02      	add	r7, sp, #8
 800b362:	6078      	str	r0, [r7, #4]
	ModuleNEXTION_StartUP();
 800b364:	f000 f9da 	bl	800b71c <ModuleNEXTION_StartUP>


	while(1)
	{
	/* Semaphore Wait */
	xSemResult.Process_NEXTION = xQueueSemaphoreTake(xSemHandle.Process_NEXTION, osWaitForever);
 800b368:	4b0e      	ldr	r3, [pc, #56]	; (800b3a4 <Process_NEXTION_TaskHandler+0x48>)
 800b36a:	695b      	ldr	r3, [r3, #20]
 800b36c:	f04f 31ff 	mov.w	r1, #4294967295
 800b370:	4618      	mov	r0, r3
 800b372:	f7fd fa33 	bl	80087dc <xQueueSemaphoreTake>
 800b376:	4603      	mov	r3, r0
 800b378:	4a0b      	ldr	r2, [pc, #44]	; (800b3a8 <Process_NEXTION_TaskHandler+0x4c>)
 800b37a:	6153      	str	r3, [r2, #20]
	if (pdTRUE == xSemResult.Process_NEXTION)
 800b37c:	4b0a      	ldr	r3, [pc, #40]	; (800b3a8 <Process_NEXTION_TaskHandler+0x4c>)
 800b37e:	695b      	ldr	r3, [r3, #20]
 800b380:	2b01      	cmp	r3, #1
 800b382:	d102      	bne.n	800b38a <Process_NEXTION_TaskHandler+0x2e>
#ifdef DEBUG_THREAD
        DEBUG_printThread((char *)PROCESS_NEXTION_THREADNAME, "STARTED");
#endif
        // [[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[

        ModuleNEXTION_MAIN(); /* Main Application */
 800b384:	f000 f9e0 	bl	800b748 <ModuleNEXTION_MAIN>
 800b388:	e7ee      	b.n	800b368 <Process_NEXTION_TaskHandler+0xc>
		}

	else
	{
		/* Semaphore fail / Create Again  */
		xSemHandle.Process_NEXTION = xSemaphoreCreateBinaryStatic(&xSemaphore.Process_NEXTION);
 800b38a:	2303      	movs	r3, #3
 800b38c:	9300      	str	r3, [sp, #0]
 800b38e:	4b07      	ldr	r3, [pc, #28]	; (800b3ac <Process_NEXTION_TaskHandler+0x50>)
 800b390:	2200      	movs	r2, #0
 800b392:	2100      	movs	r1, #0
 800b394:	2001      	movs	r0, #1
 800b396:	f7fc fddb 	bl	8007f50 <xQueueGenericCreateStatic>
 800b39a:	4603      	mov	r3, r0
 800b39c:	4a01      	ldr	r2, [pc, #4]	; (800b3a4 <Process_NEXTION_TaskHandler+0x48>)
 800b39e:	6153      	str	r3, [r2, #20]
	xSemResult.Process_NEXTION = xQueueSemaphoreTake(xSemHandle.Process_NEXTION, osWaitForever);
 800b3a0:	e7e2      	b.n	800b368 <Process_NEXTION_TaskHandler+0xc>
 800b3a2:	bf00      	nop
 800b3a4:	2000a600 	.word	0x2000a600
 800b3a8:	2000a618 	.word	0x2000a618
 800b3ac:	2000a5b0 	.word	0x2000a5b0

0800b3b0 <Process_Flash_Run>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void     Process_Flash_Run(void)
{
 800b3b0:	b580      	push	{r7, lr}
 800b3b2:	b082      	sub	sp, #8
 800b3b4:	af02      	add	r7, sp, #8

#ifdef DEBUG_THREAD
    DEBUG_printThread((char *)PROCESS_FLASH_SEMAPHORENAME, "RELEASED");
#endif

    xSemResult.Process_Flash = xSemaphoreGive(xSemHandle.Process_Flash);
 800b3b6:	4b15      	ldr	r3, [pc, #84]	; (800b40c <Process_Flash_Run+0x5c>)
 800b3b8:	6818      	ldr	r0, [r3, #0]
 800b3ba:	2300      	movs	r3, #0
 800b3bc:	2200      	movs	r2, #0
 800b3be:	2100      	movs	r1, #0
 800b3c0:	f7fc ff06 	bl	80081d0 <xQueueGenericSend>
 800b3c4:	4603      	mov	r3, r0
 800b3c6:	4a12      	ldr	r2, [pc, #72]	; (800b410 <Process_Flash_Run+0x60>)
 800b3c8:	6013      	str	r3, [r2, #0]

    if (pdPASS == xSemResult.Process_Flash)
 800b3ca:	4b11      	ldr	r3, [pc, #68]	; (800b410 <Process_Flash_Run+0x60>)
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	2b01      	cmp	r3, #1
 800b3d0:	d107      	bne.n	800b3e2 <Process_Flash_Run+0x32>
    {
        /* Bootloader Semaphore is Passed */
    	__GL.itc.flag.flash = TRUE;
 800b3d2:	4a10      	ldr	r2, [pc, #64]	; (800b414 <Process_Flash_Run+0x64>)
 800b3d4:	f892 3b00 	ldrb.w	r3, [r2, #2816]	; 0xb00
 800b3d8:	f043 0301 	orr.w	r3, r3, #1
 800b3dc:	f882 3b00 	strb.w	r3, [r2, #2816]	; 0xb00
#endif

        xSemHandle.Process_Flash = xSemaphoreCreateBinaryStatic(&xSemaphore.Process_Flash);
    }
#endif
}
 800b3e0:	e011      	b.n	800b406 <Process_Flash_Run+0x56>
    	__GL.itc.flag.flash = FALSE;
 800b3e2:	4a0c      	ldr	r2, [pc, #48]	; (800b414 <Process_Flash_Run+0x64>)
 800b3e4:	f892 3b00 	ldrb.w	r3, [r2, #2816]	; 0xb00
 800b3e8:	f36f 0300 	bfc	r3, #0, #1
 800b3ec:	f882 3b00 	strb.w	r3, [r2, #2816]	; 0xb00
        xSemHandle.Process_Flash = xSemaphoreCreateBinaryStatic(&xSemaphore.Process_Flash);
 800b3f0:	2303      	movs	r3, #3
 800b3f2:	9300      	str	r3, [sp, #0]
 800b3f4:	4b08      	ldr	r3, [pc, #32]	; (800b418 <Process_Flash_Run+0x68>)
 800b3f6:	2200      	movs	r2, #0
 800b3f8:	2100      	movs	r1, #0
 800b3fa:	2001      	movs	r0, #1
 800b3fc:	f7fc fda8 	bl	8007f50 <xQueueGenericCreateStatic>
 800b400:	4603      	mov	r3, r0
 800b402:	4a02      	ldr	r2, [pc, #8]	; (800b40c <Process_Flash_Run+0x5c>)
 800b404:	6013      	str	r3, [r2, #0]
}
 800b406:	bf00      	nop
 800b408:	46bd      	mov	sp, r7
 800b40a:	bd80      	pop	{r7, pc}
 800b40c:	2000a600 	.word	0x2000a600
 800b410:	2000a618 	.word	0x2000a618
 800b414:	20000024 	.word	0x20000024
 800b418:	2000a420 	.word	0x2000a420

0800b41c <Process_Can_Run>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void     Process_Can_Run(void)
{
 800b41c:	b580      	push	{r7, lr}
 800b41e:	b082      	sub	sp, #8
 800b420:	af02      	add	r7, sp, #8

#ifdef DEBUG_THREAD
    DEBUG_printThread((char *)PROCESS_CAN_SEMAPHORENAME, "RELEASED");
#endif

    xSemResult.Process_CAN = xSemaphoreGive(xSemHandle.Process_CAN);
 800b422:	4b15      	ldr	r3, [pc, #84]	; (800b478 <Process_Can_Run+0x5c>)
 800b424:	6858      	ldr	r0, [r3, #4]
 800b426:	2300      	movs	r3, #0
 800b428:	2200      	movs	r2, #0
 800b42a:	2100      	movs	r1, #0
 800b42c:	f7fc fed0 	bl	80081d0 <xQueueGenericSend>
 800b430:	4603      	mov	r3, r0
 800b432:	4a12      	ldr	r2, [pc, #72]	; (800b47c <Process_Can_Run+0x60>)
 800b434:	6053      	str	r3, [r2, #4]

    if (pdPASS == xSemResult.Process_CAN)
 800b436:	4b11      	ldr	r3, [pc, #68]	; (800b47c <Process_Can_Run+0x60>)
 800b438:	685b      	ldr	r3, [r3, #4]
 800b43a:	2b01      	cmp	r3, #1
 800b43c:	d107      	bne.n	800b44e <Process_Can_Run+0x32>
    {
        /* Bootloader Semaphore is Passed */
    	__GL.itc.flag.can = TRUE;
 800b43e:	4a10      	ldr	r2, [pc, #64]	; (800b480 <Process_Can_Run+0x64>)
 800b440:	f892 3b00 	ldrb.w	r3, [r2, #2816]	; 0xb00
 800b444:	f043 0302 	orr.w	r3, r3, #2
 800b448:	f882 3b00 	strb.w	r3, [r2, #2816]	; 0xb00
#endif

        xSemHandle.Process_CAN = xSemaphoreCreateBinaryStatic(&xSemaphore.Process_CAN);
    }
#endif
}
 800b44c:	e011      	b.n	800b472 <Process_Can_Run+0x56>
    	__GL.itc.flag.can = FALSE;
 800b44e:	4a0c      	ldr	r2, [pc, #48]	; (800b480 <Process_Can_Run+0x64>)
 800b450:	f892 3b00 	ldrb.w	r3, [r2, #2816]	; 0xb00
 800b454:	f36f 0341 	bfc	r3, #1, #1
 800b458:	f882 3b00 	strb.w	r3, [r2, #2816]	; 0xb00
        xSemHandle.Process_CAN = xSemaphoreCreateBinaryStatic(&xSemaphore.Process_CAN);
 800b45c:	2303      	movs	r3, #3
 800b45e:	9300      	str	r3, [sp, #0]
 800b460:	4b08      	ldr	r3, [pc, #32]	; (800b484 <Process_Can_Run+0x68>)
 800b462:	2200      	movs	r2, #0
 800b464:	2100      	movs	r1, #0
 800b466:	2001      	movs	r0, #1
 800b468:	f7fc fd72 	bl	8007f50 <xQueueGenericCreateStatic>
 800b46c:	4603      	mov	r3, r0
 800b46e:	4a02      	ldr	r2, [pc, #8]	; (800b478 <Process_Can_Run+0x5c>)
 800b470:	6053      	str	r3, [r2, #4]
}
 800b472:	bf00      	nop
 800b474:	46bd      	mov	sp, r7
 800b476:	bd80      	pop	{r7, pc}
 800b478:	2000a600 	.word	0x2000a600
 800b47c:	2000a618 	.word	0x2000a618
 800b480:	20000024 	.word	0x20000024
 800b484:	2000a470 	.word	0x2000a470

0800b488 <Process_SDCARD_Run>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void     Process_SDCARD_Run(void)
{
 800b488:	b580      	push	{r7, lr}
 800b48a:	b082      	sub	sp, #8
 800b48c:	af02      	add	r7, sp, #8

#ifdef DEBUG_THREAD
    DEBUG_printThread((char *)PROCESS_SDCARD_SEMAPHORENAME, "RELEASED");
#endif

    xSemResult.Process_SDCARD = xSemaphoreGive(xSemHandle.Process_SDCARD);
 800b48e:	4b15      	ldr	r3, [pc, #84]	; (800b4e4 <Process_SDCARD_Run+0x5c>)
 800b490:	68d8      	ldr	r0, [r3, #12]
 800b492:	2300      	movs	r3, #0
 800b494:	2200      	movs	r2, #0
 800b496:	2100      	movs	r1, #0
 800b498:	f7fc fe9a 	bl	80081d0 <xQueueGenericSend>
 800b49c:	4603      	mov	r3, r0
 800b49e:	4a12      	ldr	r2, [pc, #72]	; (800b4e8 <Process_SDCARD_Run+0x60>)
 800b4a0:	60d3      	str	r3, [r2, #12]

    if (pdPASS == xSemResult.Process_SDCARD)
 800b4a2:	4b11      	ldr	r3, [pc, #68]	; (800b4e8 <Process_SDCARD_Run+0x60>)
 800b4a4:	68db      	ldr	r3, [r3, #12]
 800b4a6:	2b01      	cmp	r3, #1
 800b4a8:	d107      	bne.n	800b4ba <Process_SDCARD_Run+0x32>
    {
        /* Bootloader Semaphore is Passed */
    	__GL.itc.flag.sdcard = TRUE;
 800b4aa:	4a10      	ldr	r2, [pc, #64]	; (800b4ec <Process_SDCARD_Run+0x64>)
 800b4ac:	f892 3b00 	ldrb.w	r3, [r2, #2816]	; 0xb00
 800b4b0:	f043 0308 	orr.w	r3, r3, #8
 800b4b4:	f882 3b00 	strb.w	r3, [r2, #2816]	; 0xb00
#endif

        xSemHandle.Process_SDCARD = xSemaphoreCreateBinaryStatic(&xSemaphore.Process_SDCARD);
    }
#endif
}
 800b4b8:	e011      	b.n	800b4de <Process_SDCARD_Run+0x56>
    	__GL.itc.flag.sdcard = FALSE;
 800b4ba:	4a0c      	ldr	r2, [pc, #48]	; (800b4ec <Process_SDCARD_Run+0x64>)
 800b4bc:	f892 3b00 	ldrb.w	r3, [r2, #2816]	; 0xb00
 800b4c0:	f36f 03c3 	bfc	r3, #3, #1
 800b4c4:	f882 3b00 	strb.w	r3, [r2, #2816]	; 0xb00
        xSemHandle.Process_SDCARD = xSemaphoreCreateBinaryStatic(&xSemaphore.Process_SDCARD);
 800b4c8:	2303      	movs	r3, #3
 800b4ca:	9300      	str	r3, [sp, #0]
 800b4cc:	4b08      	ldr	r3, [pc, #32]	; (800b4f0 <Process_SDCARD_Run+0x68>)
 800b4ce:	2200      	movs	r2, #0
 800b4d0:	2100      	movs	r1, #0
 800b4d2:	2001      	movs	r0, #1
 800b4d4:	f7fc fd3c 	bl	8007f50 <xQueueGenericCreateStatic>
 800b4d8:	4603      	mov	r3, r0
 800b4da:	4a02      	ldr	r2, [pc, #8]	; (800b4e4 <Process_SDCARD_Run+0x5c>)
 800b4dc:	60d3      	str	r3, [r2, #12]
}
 800b4de:	bf00      	nop
 800b4e0:	46bd      	mov	sp, r7
 800b4e2:	bd80      	pop	{r7, pc}
 800b4e4:	2000a600 	.word	0x2000a600
 800b4e8:	2000a618 	.word	0x2000a618
 800b4ec:	20000024 	.word	0x20000024
 800b4f0:	2000a510 	.word	0x2000a510

0800b4f4 <Process_WIFI_Run>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void     Process_WIFI_Run(void)
{
 800b4f4:	b580      	push	{r7, lr}
 800b4f6:	b082      	sub	sp, #8
 800b4f8:	af02      	add	r7, sp, #8

#ifdef DEBUG_THREAD
    DEBUG_printThread((char *)PROCESS_WIFI_SEMAPHORENAME, "RELEASED");
#endif

    xSemResult.Process_WIFI = xSemaphoreGive(xSemHandle.Process_WIFI);
 800b4fa:	4b15      	ldr	r3, [pc, #84]	; (800b550 <Process_WIFI_Run+0x5c>)
 800b4fc:	6918      	ldr	r0, [r3, #16]
 800b4fe:	2300      	movs	r3, #0
 800b500:	2200      	movs	r2, #0
 800b502:	2100      	movs	r1, #0
 800b504:	f7fc fe64 	bl	80081d0 <xQueueGenericSend>
 800b508:	4603      	mov	r3, r0
 800b50a:	4a12      	ldr	r2, [pc, #72]	; (800b554 <Process_WIFI_Run+0x60>)
 800b50c:	6113      	str	r3, [r2, #16]

    if (pdPASS == xSemResult.Process_WIFI)
 800b50e:	4b11      	ldr	r3, [pc, #68]	; (800b554 <Process_WIFI_Run+0x60>)
 800b510:	691b      	ldr	r3, [r3, #16]
 800b512:	2b01      	cmp	r3, #1
 800b514:	d107      	bne.n	800b526 <Process_WIFI_Run+0x32>
    {
        /* Bootloader Semaphore is Passed */
    	__GL.itc.flag.wifi = TRUE;
 800b516:	4a10      	ldr	r2, [pc, #64]	; (800b558 <Process_WIFI_Run+0x64>)
 800b518:	f892 3b00 	ldrb.w	r3, [r2, #2816]	; 0xb00
 800b51c:	f043 0310 	orr.w	r3, r3, #16
 800b520:	f882 3b00 	strb.w	r3, [r2, #2816]	; 0xb00
#endif

        xSemHandle.Process_WIFI = xSemaphoreCreateBinaryStatic(&xSemaphore.Process_WIFI);
    }
#endif
}
 800b524:	e011      	b.n	800b54a <Process_WIFI_Run+0x56>
    	__GL.itc.flag.wifi = FALSE;
 800b526:	4a0c      	ldr	r2, [pc, #48]	; (800b558 <Process_WIFI_Run+0x64>)
 800b528:	f892 3b00 	ldrb.w	r3, [r2, #2816]	; 0xb00
 800b52c:	f36f 1304 	bfc	r3, #4, #1
 800b530:	f882 3b00 	strb.w	r3, [r2, #2816]	; 0xb00
        xSemHandle.Process_WIFI = xSemaphoreCreateBinaryStatic(&xSemaphore.Process_WIFI);
 800b534:	2303      	movs	r3, #3
 800b536:	9300      	str	r3, [sp, #0]
 800b538:	4b08      	ldr	r3, [pc, #32]	; (800b55c <Process_WIFI_Run+0x68>)
 800b53a:	2200      	movs	r2, #0
 800b53c:	2100      	movs	r1, #0
 800b53e:	2001      	movs	r0, #1
 800b540:	f7fc fd06 	bl	8007f50 <xQueueGenericCreateStatic>
 800b544:	4603      	mov	r3, r0
 800b546:	4a02      	ldr	r2, [pc, #8]	; (800b550 <Process_WIFI_Run+0x5c>)
 800b548:	6113      	str	r3, [r2, #16]
}
 800b54a:	bf00      	nop
 800b54c:	46bd      	mov	sp, r7
 800b54e:	bd80      	pop	{r7, pc}
 800b550:	2000a600 	.word	0x2000a600
 800b554:	2000a618 	.word	0x2000a618
 800b558:	20000024 	.word	0x20000024
 800b55c:	2000a560 	.word	0x2000a560

0800b560 <Process_NEXTION_Run>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void     Process_NEXTION_Run(void)
{
 800b560:	b580      	push	{r7, lr}
 800b562:	b082      	sub	sp, #8
 800b564:	af02      	add	r7, sp, #8

#ifdef DEBUG_THREAD
    DEBUG_printThread((char *)PROCESS_NEXTION_SEMAPHORENAME, "RELEASED");
#endif

    xSemResult.Process_NEXTION = xSemaphoreGive(xSemHandle.Process_NEXTION);
 800b566:	4b15      	ldr	r3, [pc, #84]	; (800b5bc <Process_NEXTION_Run+0x5c>)
 800b568:	6958      	ldr	r0, [r3, #20]
 800b56a:	2300      	movs	r3, #0
 800b56c:	2200      	movs	r2, #0
 800b56e:	2100      	movs	r1, #0
 800b570:	f7fc fe2e 	bl	80081d0 <xQueueGenericSend>
 800b574:	4603      	mov	r3, r0
 800b576:	4a12      	ldr	r2, [pc, #72]	; (800b5c0 <Process_NEXTION_Run+0x60>)
 800b578:	6153      	str	r3, [r2, #20]

    if (pdPASS == xSemResult.Process_NEXTION)
 800b57a:	4b11      	ldr	r3, [pc, #68]	; (800b5c0 <Process_NEXTION_Run+0x60>)
 800b57c:	695b      	ldr	r3, [r3, #20]
 800b57e:	2b01      	cmp	r3, #1
 800b580:	d107      	bne.n	800b592 <Process_NEXTION_Run+0x32>
    {
        /* Bootloader Semaphore is Passed */
    	__GL.itc.flag.wifi = TRUE;
 800b582:	4a10      	ldr	r2, [pc, #64]	; (800b5c4 <Process_NEXTION_Run+0x64>)
 800b584:	f892 3b00 	ldrb.w	r3, [r2, #2816]	; 0xb00
 800b588:	f043 0310 	orr.w	r3, r3, #16
 800b58c:	f882 3b00 	strb.w	r3, [r2, #2816]	; 0xb00
#endif

        xSemHandle.Process_NEXTION = xSemaphoreCreateBinaryStatic(&xSemaphore.Process_NEXTION);
    }
#endif
}
 800b590:	e011      	b.n	800b5b6 <Process_NEXTION_Run+0x56>
    	__GL.itc.flag.wifi = FALSE;
 800b592:	4a0c      	ldr	r2, [pc, #48]	; (800b5c4 <Process_NEXTION_Run+0x64>)
 800b594:	f892 3b00 	ldrb.w	r3, [r2, #2816]	; 0xb00
 800b598:	f36f 1304 	bfc	r3, #4, #1
 800b59c:	f882 3b00 	strb.w	r3, [r2, #2816]	; 0xb00
        xSemHandle.Process_NEXTION = xSemaphoreCreateBinaryStatic(&xSemaphore.Process_NEXTION);
 800b5a0:	2303      	movs	r3, #3
 800b5a2:	9300      	str	r3, [sp, #0]
 800b5a4:	4b08      	ldr	r3, [pc, #32]	; (800b5c8 <Process_NEXTION_Run+0x68>)
 800b5a6:	2200      	movs	r2, #0
 800b5a8:	2100      	movs	r1, #0
 800b5aa:	2001      	movs	r0, #1
 800b5ac:	f7fc fcd0 	bl	8007f50 <xQueueGenericCreateStatic>
 800b5b0:	4603      	mov	r3, r0
 800b5b2:	4a02      	ldr	r2, [pc, #8]	; (800b5bc <Process_NEXTION_Run+0x5c>)
 800b5b4:	6153      	str	r3, [r2, #20]
}
 800b5b6:	bf00      	nop
 800b5b8:	46bd      	mov	sp, r7
 800b5ba:	bd80      	pop	{r7, pc}
 800b5bc:	2000a600 	.word	0x2000a600
 800b5c0:	2000a618 	.word	0x2000a618
 800b5c4:	20000024 	.word	0x20000024
 800b5c8:	2000a5b0 	.word	0x2000a5b0

0800b5cc <ModuleCAN_HWInit>:
	 @return  : 
	 @date	  : 
	 @INFO		:	
********************************************************************************/
void ModuleCAN_HWInit(void)
{
 800b5cc:	b480      	push	{r7}
 800b5ce:	af00      	add	r7, sp, #0
	//@INFO: WIFI thread'ine ait donanımsal init fonksiyonları
}
 800b5d0:	bf00      	nop
 800b5d2:	46bd      	mov	sp, r7
 800b5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d8:	4770      	bx	lr

0800b5da <ModuleCAN_SWInit>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModuleCAN_SWInit(void)
{
 800b5da:	b480      	push	{r7}
 800b5dc:	af00      	add	r7, sp, #0
	//@INFO: WIFI thread'ine ait yazilimsal init fonksiyonları
}
 800b5de:	bf00      	nop
 800b5e0:	46bd      	mov	sp, r7
 800b5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e6:	4770      	bx	lr

0800b5e8 <ModuleCAN_StartUP>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModuleCAN_StartUP(void)
{
 800b5e8:	b580      	push	{r7, lr}
 800b5ea:	af00      	add	r7, sp, #0
	ModuleCAN_HWInit();
 800b5ec:	f7ff ffee 	bl	800b5cc <ModuleCAN_HWInit>
	ModuleCAN_SWInit();
 800b5f0:	f7ff fff3 	bl	800b5da <ModuleCAN_SWInit>
}
 800b5f4:	bf00      	nop
 800b5f6:	bd80      	pop	{r7, pc}

0800b5f8 <ModuleCAN_MAIN_Routine>:
	 @date	  :
	 @INFO		:
********************************************************************************/

void ModuleCAN_MAIN_Routine(void)
{
 800b5f8:	b480      	push	{r7}
 800b5fa:	af00      	add	r7, sp, #0

}
 800b5fc:	bf00      	nop
 800b5fe:	46bd      	mov	sp, r7
 800b600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b604:	4770      	bx	lr

0800b606 <ModuleCAN_MAIN_Process>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModuleCAN_MAIN_Process(void)
{
 800b606:	b480      	push	{r7}
 800b608:	af00      	add	r7, sp, #0

}
 800b60a:	bf00      	nop
 800b60c:	46bd      	mov	sp, r7
 800b60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b612:	4770      	bx	lr

0800b614 <ModuleCAN_MAIN>:
	 @date	  :
	 @INFO		:
********************************************************************************/

void ModuleCAN_MAIN(void)
{
 800b614:	b580      	push	{r7, lr}
 800b616:	af00      	add	r7, sp, #0
	ModuleCAN_StartUP();
 800b618:	f7ff ffe6 	bl	800b5e8 <ModuleCAN_StartUP>


		switch(ModuleCAN_MAIN_State)
 800b61c:	4b11      	ldr	r3, [pc, #68]	; (800b664 <ModuleCAN_MAIN+0x50>)
 800b61e:	781b      	ldrb	r3, [r3, #0]
 800b620:	2b03      	cmp	r3, #3
 800b622:	d819      	bhi.n	800b658 <ModuleCAN_MAIN+0x44>
 800b624:	a201      	add	r2, pc, #4	; (adr r2, 800b62c <ModuleCAN_MAIN+0x18>)
 800b626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b62a:	bf00      	nop
 800b62c:	0800b63d 	.word	0x0800b63d
 800b630:	0800b645 	.word	0x0800b645
 800b634:	0800b64b 	.word	0x0800b64b
 800b638:	0800b651 	.word	0x0800b651
		{
		    case ModuleCAN_MAIN_State_IDLE:
		    	//@INFO: IDLE Operations ..
		    	ModuleCAN_MAIN_State = ModuleCAN_MAIN_State_ROUTINE;
 800b63c:	4b09      	ldr	r3, [pc, #36]	; (800b664 <ModuleCAN_MAIN+0x50>)
 800b63e:	2201      	movs	r2, #1
 800b640:	701a      	strb	r2, [r3, #0]
		    break;
 800b642:	e00d      	b.n	800b660 <ModuleCAN_MAIN+0x4c>

		    case ModuleCAN_MAIN_State_ROUTINE:

		    	ModuleCAN_MAIN_Routine();
 800b644:	f7ff ffd8 	bl	800b5f8 <ModuleCAN_MAIN_Routine>
		    break;
 800b648:	e00a      	b.n	800b660 <ModuleCAN_MAIN+0x4c>

		    case ModuleCAN_MAIN_State_PROCESS:

		    	ModuleCAN_MAIN_Process();
 800b64a:	f7ff ffdc 	bl	800b606 <ModuleCAN_MAIN_Process>

		    break;
 800b64e:	e007      	b.n	800b660 <ModuleCAN_MAIN+0x4c>

		    case ModuleCAN_MAIN_State_SUSPEND:
		    	ModuleCAN_MAIN_State = ModuleCAN_MAIN_State_IDLE;
 800b650:	4b04      	ldr	r3, [pc, #16]	; (800b664 <ModuleCAN_MAIN+0x50>)
 800b652:	2200      	movs	r2, #0
 800b654:	701a      	strb	r2, [r3, #0]
		    break;
 800b656:	e003      	b.n	800b660 <ModuleCAN_MAIN+0x4c>

		    default:
		    	ModuleCAN_MAIN_State = ModuleCAN_MAIN_State_SUSPEND;
 800b658:	4b02      	ldr	r3, [pc, #8]	; (800b664 <ModuleCAN_MAIN+0x50>)
 800b65a:	2203      	movs	r2, #3
 800b65c:	701a      	strb	r2, [r3, #0]
		    break;
 800b65e:	bf00      	nop

		}

}
 800b660:	bf00      	nop
 800b662:	bd80      	pop	{r7, pc}
 800b664:	2000a690 	.word	0x2000a690

0800b668 <ModuleFlash_HWInit>:
	 @return  : 
	 @date	  : 
	 @INFO		:	
********************************************************************************/
void ModuleFlash_HWInit(void)
{
 800b668:	b480      	push	{r7}
 800b66a:	af00      	add	r7, sp, #0
	//@INFO: WIFI thread'ine ait donanımsal init fonksiyonları
}
 800b66c:	bf00      	nop
 800b66e:	46bd      	mov	sp, r7
 800b670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b674:	4770      	bx	lr

0800b676 <ModuleFlash_SWInit>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModuleFlash_SWInit(void)
{
 800b676:	b480      	push	{r7}
 800b678:	af00      	add	r7, sp, #0
	//@INFO: WIFI thread'ine ait yazilimsal init fonksiyonları
}
 800b67a:	bf00      	nop
 800b67c:	46bd      	mov	sp, r7
 800b67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b682:	4770      	bx	lr

0800b684 <ModuleFlash_StartUP>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModuleFlash_StartUP(void)
{
 800b684:	b580      	push	{r7, lr}
 800b686:	af00      	add	r7, sp, #0
	ModuleFlash_HWInit();
 800b688:	f7ff ffee 	bl	800b668 <ModuleFlash_HWInit>
	ModuleFlash_SWInit();
 800b68c:	f7ff fff3 	bl	800b676 <ModuleFlash_SWInit>
}
 800b690:	bf00      	nop
 800b692:	bd80      	pop	{r7, pc}

0800b694 <ModuleFlash_MAIN_Routine>:
	 @date	  :
	 @INFO		:
********************************************************************************/

void ModuleFlash_MAIN_Routine(void)
{
 800b694:	b480      	push	{r7}
 800b696:	af00      	add	r7, sp, #0

}
 800b698:	bf00      	nop
 800b69a:	46bd      	mov	sp, r7
 800b69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a0:	4770      	bx	lr

0800b6a2 <ModuleFlash_MAIN_Process>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModuleFlash_MAIN_Process(void)
{
 800b6a2:	b480      	push	{r7}
 800b6a4:	af00      	add	r7, sp, #0

}
 800b6a6:	bf00      	nop
 800b6a8:	46bd      	mov	sp, r7
 800b6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ae:	4770      	bx	lr

0800b6b0 <ModuleFlash_MAIN>:
	 @date	  :
	 @INFO		:
********************************************************************************/

void ModuleFlash_MAIN(void)
{
 800b6b0:	b580      	push	{r7, lr}
 800b6b2:	af00      	add	r7, sp, #0

	switch(ModuleFlash_MAIN_State)
 800b6b4:	4b11      	ldr	r3, [pc, #68]	; (800b6fc <ModuleFlash_MAIN+0x4c>)
 800b6b6:	781b      	ldrb	r3, [r3, #0]
 800b6b8:	2b03      	cmp	r3, #3
 800b6ba:	d819      	bhi.n	800b6f0 <ModuleFlash_MAIN+0x40>
 800b6bc:	a201      	add	r2, pc, #4	; (adr r2, 800b6c4 <ModuleFlash_MAIN+0x14>)
 800b6be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6c2:	bf00      	nop
 800b6c4:	0800b6d5 	.word	0x0800b6d5
 800b6c8:	0800b6dd 	.word	0x0800b6dd
 800b6cc:	0800b6e3 	.word	0x0800b6e3
 800b6d0:	0800b6e9 	.word	0x0800b6e9
	{
	    case ModuleFlash_MAIN_State_IDLE:
	    	//@INFO: IDLE Operations ..
	    	ModuleFlash_MAIN_State = ModuleFlash_MAIN_State_ROUTINE;
 800b6d4:	4b09      	ldr	r3, [pc, #36]	; (800b6fc <ModuleFlash_MAIN+0x4c>)
 800b6d6:	2201      	movs	r2, #1
 800b6d8:	701a      	strb	r2, [r3, #0]
	    break;
 800b6da:	e00d      	b.n	800b6f8 <ModuleFlash_MAIN+0x48>

	    case ModuleFlash_MAIN_State_ROUTINE:

	    	ModuleFlash_MAIN_Routine();
 800b6dc:	f7ff ffda 	bl	800b694 <ModuleFlash_MAIN_Routine>
	    break;
 800b6e0:	e00a      	b.n	800b6f8 <ModuleFlash_MAIN+0x48>

	    case ModuleFlash_MAIN_State_PROCESS:

	    	ModuleFlash_MAIN_Process();
 800b6e2:	f7ff ffde 	bl	800b6a2 <ModuleFlash_MAIN_Process>

	    break;
 800b6e6:	e007      	b.n	800b6f8 <ModuleFlash_MAIN+0x48>

	    case ModuleFlash_MAIN_State_SUSPEND:
	    	ModuleFlash_MAIN_State = ModuleFlash_MAIN_State_IDLE;
 800b6e8:	4b04      	ldr	r3, [pc, #16]	; (800b6fc <ModuleFlash_MAIN+0x4c>)
 800b6ea:	2200      	movs	r2, #0
 800b6ec:	701a      	strb	r2, [r3, #0]
	    break;
 800b6ee:	e003      	b.n	800b6f8 <ModuleFlash_MAIN+0x48>

	    default:
	    	ModuleFlash_MAIN_State = ModuleFlash_MAIN_State_SUSPEND;
 800b6f0:	4b02      	ldr	r3, [pc, #8]	; (800b6fc <ModuleFlash_MAIN+0x4c>)
 800b6f2:	2203      	movs	r2, #3
 800b6f4:	701a      	strb	r2, [r3, #0]
	    break;
 800b6f6:	bf00      	nop

	}

}
 800b6f8:	bf00      	nop
 800b6fa:	bd80      	pop	{r7, pc}
 800b6fc:	2000a691 	.word	0x2000a691

0800b700 <ModuleNEXTION_HWInit>:
	 @return  : 
	 @date	  : 
	 @INFO		:	
********************************************************************************/
void ModuleNEXTION_HWInit(void)
{
 800b700:	b480      	push	{r7}
 800b702:	af00      	add	r7, sp, #0
	//@INFO: WIFI thread'ine ait donanımsal init fonksiyonları
}
 800b704:	bf00      	nop
 800b706:	46bd      	mov	sp, r7
 800b708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b70c:	4770      	bx	lr

0800b70e <ModuleNEXTION_SWInit>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModuleNEXTION_SWInit(void)
{
 800b70e:	b480      	push	{r7}
 800b710:	af00      	add	r7, sp, #0
	//@INFO: WIFI thread'ine ait yazilimsal init fonksiyonları
}
 800b712:	bf00      	nop
 800b714:	46bd      	mov	sp, r7
 800b716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b71a:	4770      	bx	lr

0800b71c <ModuleNEXTION_StartUP>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModuleNEXTION_StartUP(void)
{
 800b71c:	b580      	push	{r7, lr}
 800b71e:	af00      	add	r7, sp, #0
	ModuleNEXTION_HWInit();
 800b720:	f7ff ffee 	bl	800b700 <ModuleNEXTION_HWInit>
	ModuleNEXTION_SWInit();
 800b724:	f7ff fff3 	bl	800b70e <ModuleNEXTION_SWInit>
}
 800b728:	bf00      	nop
 800b72a:	bd80      	pop	{r7, pc}

0800b72c <ModuleNEXTION_MAIN_Routine>:
	 @date	  :
	 @INFO		:
********************************************************************************/

void ModuleNEXTION_MAIN_Routine(void)
{
 800b72c:	b480      	push	{r7}
 800b72e:	af00      	add	r7, sp, #0

}
 800b730:	bf00      	nop
 800b732:	46bd      	mov	sp, r7
 800b734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b738:	4770      	bx	lr

0800b73a <ModuleNEXTION_MAIN_Process>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModuleNEXTION_MAIN_Process(void)
{
 800b73a:	b480      	push	{r7}
 800b73c:	af00      	add	r7, sp, #0

}
 800b73e:	bf00      	nop
 800b740:	46bd      	mov	sp, r7
 800b742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b746:	4770      	bx	lr

0800b748 <ModuleNEXTION_MAIN>:
	 @date	  :
	 @INFO		:
********************************************************************************/

void ModuleNEXTION_MAIN(void)
{
 800b748:	b580      	push	{r7, lr}
 800b74a:	af00      	add	r7, sp, #0
	switch(ModuleNEXTION_MAIN_State)
 800b74c:	4b11      	ldr	r3, [pc, #68]	; (800b794 <ModuleNEXTION_MAIN+0x4c>)
 800b74e:	781b      	ldrb	r3, [r3, #0]
 800b750:	2b03      	cmp	r3, #3
 800b752:	d819      	bhi.n	800b788 <ModuleNEXTION_MAIN+0x40>
 800b754:	a201      	add	r2, pc, #4	; (adr r2, 800b75c <ModuleNEXTION_MAIN+0x14>)
 800b756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b75a:	bf00      	nop
 800b75c:	0800b76d 	.word	0x0800b76d
 800b760:	0800b775 	.word	0x0800b775
 800b764:	0800b77b 	.word	0x0800b77b
 800b768:	0800b781 	.word	0x0800b781
	{
	    case ModuleNEXTION_MAIN_State_IDLE:
	    	//@INFO: IDLE Operations ..
	    	ModuleNEXTION_MAIN_State = ModuleNEXTION_MAIN_State_ROUTINE;
 800b76c:	4b09      	ldr	r3, [pc, #36]	; (800b794 <ModuleNEXTION_MAIN+0x4c>)
 800b76e:	2201      	movs	r2, #1
 800b770:	701a      	strb	r2, [r3, #0]
	    break;
 800b772:	e00d      	b.n	800b790 <ModuleNEXTION_MAIN+0x48>

	    case ModuleNEXTION_MAIN_State_ROUTINE:

	    	ModuleNEXTION_MAIN_Routine();
 800b774:	f7ff ffda 	bl	800b72c <ModuleNEXTION_MAIN_Routine>
	    break;
 800b778:	e00a      	b.n	800b790 <ModuleNEXTION_MAIN+0x48>

	    case ModuleNEXTION_MAIN_State_PROCESS:

	    	ModuleNEXTION_MAIN_Process();
 800b77a:	f7ff ffde 	bl	800b73a <ModuleNEXTION_MAIN_Process>

	    break;
 800b77e:	e007      	b.n	800b790 <ModuleNEXTION_MAIN+0x48>

	    case ModuleNEXTION_MAIN_State_SUSPEND:
	    	ModuleNEXTION_MAIN_State = ModuleNEXTION_MAIN_State_IDLE;
 800b780:	4b04      	ldr	r3, [pc, #16]	; (800b794 <ModuleNEXTION_MAIN+0x4c>)
 800b782:	2200      	movs	r2, #0
 800b784:	701a      	strb	r2, [r3, #0]
	    break;
 800b786:	e003      	b.n	800b790 <ModuleNEXTION_MAIN+0x48>

	    default:
	    	ModuleNEXTION_MAIN_State = ModuleNEXTION_MAIN_State_SUSPEND;
 800b788:	4b02      	ldr	r3, [pc, #8]	; (800b794 <ModuleNEXTION_MAIN+0x4c>)
 800b78a:	2203      	movs	r2, #3
 800b78c:	701a      	strb	r2, [r3, #0]
	    break;
 800b78e:	bf00      	nop

	}

}
 800b790:	bf00      	nop
 800b792:	bd80      	pop	{r7, pc}
 800b794:	2000a692 	.word	0x2000a692

0800b798 <ModuleRTC_HWInit>:
	 @return  : 
	 @date	  : 
	 @INFO		:	
********************************************************************************/
void ModuleRTC_HWInit(void)
{
 800b798:	b480      	push	{r7}
 800b79a:	af00      	add	r7, sp, #0
	//@INFO: WIFI thread'ine ait donanımsal init fonksiyonları
}
 800b79c:	bf00      	nop
 800b79e:	46bd      	mov	sp, r7
 800b7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a4:	4770      	bx	lr

0800b7a6 <ModuleRTC_SWInit>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModuleRTC_SWInit(void)
{
 800b7a6:	b480      	push	{r7}
 800b7a8:	af00      	add	r7, sp, #0
	//@INFO: WIFI thread'ine ait yazilimsal init fonksiyonları
}
 800b7aa:	bf00      	nop
 800b7ac:	46bd      	mov	sp, r7
 800b7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b2:	4770      	bx	lr

0800b7b4 <ModuleRTC_StartUP>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModuleRTC_StartUP(void)
{
 800b7b4:	b580      	push	{r7, lr}
 800b7b6:	af00      	add	r7, sp, #0
	ModuleRTC_HWInit();
 800b7b8:	f7ff ffee 	bl	800b798 <ModuleRTC_HWInit>
	ModuleRTC_SWInit();
 800b7bc:	f7ff fff3 	bl	800b7a6 <ModuleRTC_SWInit>
}
 800b7c0:	bf00      	nop
 800b7c2:	bd80      	pop	{r7, pc}

0800b7c4 <ModuleRTC_MAIN_Routine>:
	 @date	  :
	 @INFO		:
********************************************************************************/

void ModuleRTC_MAIN_Routine(void)
{
 800b7c4:	b480      	push	{r7}
 800b7c6:	af00      	add	r7, sp, #0

}
 800b7c8:	bf00      	nop
 800b7ca:	46bd      	mov	sp, r7
 800b7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d0:	4770      	bx	lr

0800b7d2 <ModuleRTC_MAIN_Process>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModuleRTC_MAIN_Process(void)
{
 800b7d2:	b480      	push	{r7}
 800b7d4:	af00      	add	r7, sp, #0

}
 800b7d6:	bf00      	nop
 800b7d8:	46bd      	mov	sp, r7
 800b7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7de:	4770      	bx	lr

0800b7e0 <ModuleRTC_MAIN>:
	 @date	  :
	 @INFO		:
********************************************************************************/

void ModuleRTC_MAIN(void)
{
 800b7e0:	b580      	push	{r7, lr}
 800b7e2:	af00      	add	r7, sp, #0
	switch(ModuleRTC_MAIN_State)
 800b7e4:	4b11      	ldr	r3, [pc, #68]	; (800b82c <ModuleRTC_MAIN+0x4c>)
 800b7e6:	781b      	ldrb	r3, [r3, #0]
 800b7e8:	2b03      	cmp	r3, #3
 800b7ea:	d819      	bhi.n	800b820 <ModuleRTC_MAIN+0x40>
 800b7ec:	a201      	add	r2, pc, #4	; (adr r2, 800b7f4 <ModuleRTC_MAIN+0x14>)
 800b7ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7f2:	bf00      	nop
 800b7f4:	0800b805 	.word	0x0800b805
 800b7f8:	0800b80d 	.word	0x0800b80d
 800b7fc:	0800b813 	.word	0x0800b813
 800b800:	0800b819 	.word	0x0800b819
	{
	    case ModuleRTC_MAIN_State_IDLE:
	    	//@INFO: IDLE Operations ..
	    	ModuleRTC_MAIN_State = ModuleRTC_MAIN_State_ROUTINE;
 800b804:	4b09      	ldr	r3, [pc, #36]	; (800b82c <ModuleRTC_MAIN+0x4c>)
 800b806:	2201      	movs	r2, #1
 800b808:	701a      	strb	r2, [r3, #0]
	    break;
 800b80a:	e00d      	b.n	800b828 <ModuleRTC_MAIN+0x48>

	    case ModuleRTC_MAIN_State_ROUTINE:

	    	ModuleRTC_MAIN_Routine();
 800b80c:	f7ff ffda 	bl	800b7c4 <ModuleRTC_MAIN_Routine>
	    break;
 800b810:	e00a      	b.n	800b828 <ModuleRTC_MAIN+0x48>

	    case ModuleRTC_MAIN_State_PROCESS:

	    	ModuleRTC_MAIN_Process();
 800b812:	f7ff ffde 	bl	800b7d2 <ModuleRTC_MAIN_Process>

	    break;
 800b816:	e007      	b.n	800b828 <ModuleRTC_MAIN+0x48>

	    case ModuleRTC_MAIN_State_SUSPEND:
	    	ModuleRTC_MAIN_State = ModuleRTC_MAIN_State_IDLE;
 800b818:	4b04      	ldr	r3, [pc, #16]	; (800b82c <ModuleRTC_MAIN+0x4c>)
 800b81a:	2200      	movs	r2, #0
 800b81c:	701a      	strb	r2, [r3, #0]
	    break;
 800b81e:	e003      	b.n	800b828 <ModuleRTC_MAIN+0x48>

	    default:
	    	ModuleRTC_MAIN_State = ModuleRTC_MAIN_State_SUSPEND;
 800b820:	4b02      	ldr	r3, [pc, #8]	; (800b82c <ModuleRTC_MAIN+0x4c>)
 800b822:	2203      	movs	r2, #3
 800b824:	701a      	strb	r2, [r3, #0]
	    break;
 800b826:	bf00      	nop

	}
}
 800b828:	bf00      	nop
 800b82a:	bd80      	pop	{r7, pc}
 800b82c:	2000a693 	.word	0x2000a693

0800b830 <ModuleSDCard_HWInit>:
	 @return  : 
	 @date	  : 
	 @INFO		:	
********************************************************************************/
void ModuleSDCard_HWInit(void)
{
 800b830:	b480      	push	{r7}
 800b832:	af00      	add	r7, sp, #0
//	/* Close file */
//	fresult = f_close(&file);


	//@INFO: SDCard thread'ine ait donanımsal init fonksiyonları
}
 800b834:	bf00      	nop
 800b836:	46bd      	mov	sp, r7
 800b838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b83c:	4770      	bx	lr

0800b83e <ModuleSDCard_SWInit>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModuleSDCard_SWInit(void)
{
 800b83e:	b480      	push	{r7}
 800b840:	af00      	add	r7, sp, #0
	//@INFO: WIFI thread'ine ait yazilimsal init fonksiyonları
}
 800b842:	bf00      	nop
 800b844:	46bd      	mov	sp, r7
 800b846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b84a:	4770      	bx	lr

0800b84c <ModuleSDCard_StartUP>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModuleSDCard_StartUP(void)
{
 800b84c:	b580      	push	{r7, lr}
 800b84e:	af00      	add	r7, sp, #0
	ModuleSDCard_HWInit();
 800b850:	f7ff ffee 	bl	800b830 <ModuleSDCard_HWInit>
	ModuleSDCard_SWInit();
 800b854:	f7ff fff3 	bl	800b83e <ModuleSDCard_SWInit>
}
 800b858:	bf00      	nop
 800b85a:	bd80      	pop	{r7, pc}

0800b85c <ModuleSDCard_MAIN_Routine>:
	 @date	  :
	 @INFO		:
********************************************************************************/

void ModuleSDCard_MAIN_Routine(void)
{
 800b85c:	b580      	push	{r7, lr}
 800b85e:	af00      	add	r7, sp, #0
	fresult = f_mount(&fs, "", 0);
 800b860:	2200      	movs	r2, #0
 800b862:	492b      	ldr	r1, [pc, #172]	; (800b910 <ModuleSDCard_MAIN_Routine+0xb4>)
 800b864:	482b      	ldr	r0, [pc, #172]	; (800b914 <ModuleSDCard_MAIN_Routine+0xb8>)
 800b866:	f7fa feb3 	bl	80065d0 <f_mount>
 800b86a:	4603      	mov	r3, r0
 800b86c:	461a      	mov	r2, r3
 800b86e:	4b2a      	ldr	r3, [pc, #168]	; (800b918 <ModuleSDCard_MAIN_Routine+0xbc>)
 800b870:	701a      	strb	r2, [r3, #0]

	  	/* Check free space */
	  	   f_getfree("", &fre_clust, &pfs);
 800b872:	4a2a      	ldr	r2, [pc, #168]	; (800b91c <ModuleSDCard_MAIN_Routine+0xc0>)
 800b874:	492a      	ldr	r1, [pc, #168]	; (800b920 <ModuleSDCard_MAIN_Routine+0xc4>)
 800b876:	4826      	ldr	r0, [pc, #152]	; (800b910 <ModuleSDCard_MAIN_Routine+0xb4>)
 800b878:	f7fb fc59 	bl	800712e <f_getfree>

	  	   total = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 800b87c:	4b27      	ldr	r3, [pc, #156]	; (800b91c <ModuleSDCard_MAIN_Routine+0xc0>)
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	6a1b      	ldr	r3, [r3, #32]
 800b882:	3b02      	subs	r3, #2
 800b884:	4a25      	ldr	r2, [pc, #148]	; (800b91c <ModuleSDCard_MAIN_Routine+0xc0>)
 800b886:	6812      	ldr	r2, [r2, #0]
 800b888:	8952      	ldrh	r2, [r2, #10]
 800b88a:	fb02 f303 	mul.w	r3, r2, r3
 800b88e:	4618      	mov	r0, r3
 800b890:	f7f4 ff12 	bl	80006b8 <__aeabi_ui2d>
 800b894:	f04f 0200 	mov.w	r2, #0
 800b898:	4b22      	ldr	r3, [pc, #136]	; (800b924 <ModuleSDCard_MAIN_Routine+0xc8>)
 800b89a:	f7f4 fca1 	bl	80001e0 <__aeabi_dmul>
 800b89e:	4602      	mov	r2, r0
 800b8a0:	460b      	mov	r3, r1
 800b8a2:	4610      	mov	r0, r2
 800b8a4:	4619      	mov	r1, r3
 800b8a6:	f7f4 ff81 	bl	80007ac <__aeabi_d2uiz>
 800b8aa:	4603      	mov	r3, r0
 800b8ac:	4a1e      	ldr	r2, [pc, #120]	; (800b928 <ModuleSDCard_MAIN_Routine+0xcc>)
 800b8ae:	6013      	str	r3, [r2, #0]

	  	   free_space = (uint32_t)(fre_clust * pfs->csize * 0.5);
 800b8b0:	4b1a      	ldr	r3, [pc, #104]	; (800b91c <ModuleSDCard_MAIN_Routine+0xc0>)
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	895b      	ldrh	r3, [r3, #10]
 800b8b6:	461a      	mov	r2, r3
 800b8b8:	4b19      	ldr	r3, [pc, #100]	; (800b920 <ModuleSDCard_MAIN_Routine+0xc4>)
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	fb02 f303 	mul.w	r3, r2, r3
 800b8c0:	4618      	mov	r0, r3
 800b8c2:	f7f4 fef9 	bl	80006b8 <__aeabi_ui2d>
 800b8c6:	f04f 0200 	mov.w	r2, #0
 800b8ca:	4b16      	ldr	r3, [pc, #88]	; (800b924 <ModuleSDCard_MAIN_Routine+0xc8>)
 800b8cc:	f7f4 fc88 	bl	80001e0 <__aeabi_dmul>
 800b8d0:	4602      	mov	r2, r0
 800b8d2:	460b      	mov	r3, r1
 800b8d4:	4610      	mov	r0, r2
 800b8d6:	4619      	mov	r1, r3
 800b8d8:	f7f4 ff68 	bl	80007ac <__aeabi_d2uiz>
 800b8dc:	4603      	mov	r3, r0
 800b8de:	4a13      	ldr	r2, [pc, #76]	; (800b92c <ModuleSDCard_MAIN_Routine+0xd0>)
 800b8e0:	6013      	str	r3, [r2, #0]

	    	/* Open file to write/ create a file if it doesn't exist */
	        fresult = f_open(&file, "file1.txt", FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 800b8e2:	2213      	movs	r2, #19
 800b8e4:	4912      	ldr	r1, [pc, #72]	; (800b930 <ModuleSDCard_MAIN_Routine+0xd4>)
 800b8e6:	4813      	ldr	r0, [pc, #76]	; (800b934 <ModuleSDCard_MAIN_Routine+0xd8>)
 800b8e8:	f7fa fed6 	bl	8006698 <f_open>
 800b8ec:	4603      	mov	r3, r0
 800b8ee:	461a      	mov	r2, r3
 800b8f0:	4b09      	ldr	r3, [pc, #36]	; (800b918 <ModuleSDCard_MAIN_Routine+0xbc>)
 800b8f2:	701a      	strb	r2, [r3, #0]

	    	/* Writing text */
	    	f_puts("This data is from the FILE1.txt. And it was written using ...f_puts... ", &file);
 800b8f4:	490f      	ldr	r1, [pc, #60]	; (800b934 <ModuleSDCard_MAIN_Routine+0xd8>)
 800b8f6:	4810      	ldr	r0, [pc, #64]	; (800b938 <ModuleSDCard_MAIN_Routine+0xdc>)
 800b8f8:	f7fb fd4c 	bl	8007394 <f_puts>

	    	/* Close file */
	    	fresult = f_close(&file);
 800b8fc:	480d      	ldr	r0, [pc, #52]	; (800b934 <ModuleSDCard_MAIN_Routine+0xd8>)
 800b8fe:	f7fb fbe7 	bl	80070d0 <f_close>
 800b902:	4603      	mov	r3, r0
 800b904:	461a      	mov	r2, r3
 800b906:	4b04      	ldr	r3, [pc, #16]	; (800b918 <ModuleSDCard_MAIN_Routine+0xbc>)
 800b908:	701a      	strb	r2, [r3, #0]

}
 800b90a:	bf00      	nop
 800b90c:	bd80      	pop	{r7, pc}
 800b90e:	bf00      	nop
 800b910:	0800bc88 	.word	0x0800bc88
 800b914:	2000a694 	.word	0x2000a694
 800b918:	2000c700 	.word	0x2000c700
 800b91c:	2000c704 	.word	0x2000c704
 800b920:	2000c708 	.word	0x2000c708
 800b924:	3fe00000 	.word	0x3fe00000
 800b928:	2000c70c 	.word	0x2000c70c
 800b92c:	2000c710 	.word	0x2000c710
 800b930:	0800bc8c 	.word	0x0800bc8c
 800b934:	2000b6d0 	.word	0x2000b6d0
 800b938:	0800bc98 	.word	0x0800bc98

0800b93c <ModuleSDCard_MAIN_Process>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModuleSDCard_MAIN_Process(void)
{
 800b93c:	b480      	push	{r7}
 800b93e:	af00      	add	r7, sp, #0

}
 800b940:	bf00      	nop
 800b942:	46bd      	mov	sp, r7
 800b944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b948:	4770      	bx	lr
	...

0800b94c <ModuleSDCard_MAIN>:
	 @date	  :
	 @INFO		:
********************************************************************************/

void ModuleSDCard_MAIN(void)
{
 800b94c:	b580      	push	{r7, lr}
 800b94e:	af00      	add	r7, sp, #0
	switch(ModuleSDCard_MAIN_State)
 800b950:	4b11      	ldr	r3, [pc, #68]	; (800b998 <ModuleSDCard_MAIN+0x4c>)
 800b952:	781b      	ldrb	r3, [r3, #0]
 800b954:	2b03      	cmp	r3, #3
 800b956:	d819      	bhi.n	800b98c <ModuleSDCard_MAIN+0x40>
 800b958:	a201      	add	r2, pc, #4	; (adr r2, 800b960 <ModuleSDCard_MAIN+0x14>)
 800b95a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b95e:	bf00      	nop
 800b960:	0800b971 	.word	0x0800b971
 800b964:	0800b979 	.word	0x0800b979
 800b968:	0800b97f 	.word	0x0800b97f
 800b96c:	0800b985 	.word	0x0800b985
	{
	    case ModuleSDCard_MAIN_State_IDLE:
	    	//@INFO: IDLE Operations ..
	    	ModuleSDCard_MAIN_State = ModuleSDCard_MAIN_State_ROUTINE;
 800b970:	4b09      	ldr	r3, [pc, #36]	; (800b998 <ModuleSDCard_MAIN+0x4c>)
 800b972:	2201      	movs	r2, #1
 800b974:	701a      	strb	r2, [r3, #0]
	    break;
 800b976:	e00d      	b.n	800b994 <ModuleSDCard_MAIN+0x48>

	    case ModuleSDCard_MAIN_State_ROUTINE:

	    	ModuleSDCard_MAIN_Routine();
 800b978:	f7ff ff70 	bl	800b85c <ModuleSDCard_MAIN_Routine>
	    break;
 800b97c:	e00a      	b.n	800b994 <ModuleSDCard_MAIN+0x48>

	    case ModuleSDCard_MAIN_State_PROCESS:

	    	ModuleSDCard_MAIN_Process();
 800b97e:	f7ff ffdd 	bl	800b93c <ModuleSDCard_MAIN_Process>

	    break;
 800b982:	e007      	b.n	800b994 <ModuleSDCard_MAIN+0x48>

	    case ModuleSDCard_MAIN_State_SUSPEND:
	    	ModuleSDCard_MAIN_State = ModuleSDCard_MAIN_State_IDLE;
 800b984:	4b04      	ldr	r3, [pc, #16]	; (800b998 <ModuleSDCard_MAIN+0x4c>)
 800b986:	2200      	movs	r2, #0
 800b988:	701a      	strb	r2, [r3, #0]
	    break;
 800b98a:	e003      	b.n	800b994 <ModuleSDCard_MAIN+0x48>

	    default:
	    	ModuleSDCard_MAIN_State = ModuleSDCard_MAIN_State_SUSPEND;
 800b98c:	4b02      	ldr	r3, [pc, #8]	; (800b998 <ModuleSDCard_MAIN+0x4c>)
 800b98e:	2203      	movs	r2, #3
 800b990:	701a      	strb	r2, [r3, #0]
	    break;
 800b992:	bf00      	nop

	}

}
 800b994:	bf00      	nop
 800b996:	bd80      	pop	{r7, pc}
 800b998:	2000c714 	.word	0x2000c714

0800b99c <ModuleWIFI_HWInit>:
	 @return  : 
	 @date	  : 
	 @INFO		:	
********************************************************************************/
void ModuleWIFI_HWInit(void)
{
 800b99c:	b480      	push	{r7}
 800b99e:	af00      	add	r7, sp, #0
	//@INFO: WIFI thread'ine ait donanımsal init fonksiyonları
}
 800b9a0:	bf00      	nop
 800b9a2:	46bd      	mov	sp, r7
 800b9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9a8:	4770      	bx	lr

0800b9aa <ModuleWIFI_SWInit>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModuleWIFI_SWInit(void)
{
 800b9aa:	b480      	push	{r7}
 800b9ac:	af00      	add	r7, sp, #0
	//@INFO: WIFI thread'ine ait yazilimsal init fonksiyonları
}
 800b9ae:	bf00      	nop
 800b9b0:	46bd      	mov	sp, r7
 800b9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b6:	4770      	bx	lr

0800b9b8 <ModuleWIFI_StartUP>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModuleWIFI_StartUP(void)
{
 800b9b8:	b580      	push	{r7, lr}
 800b9ba:	af00      	add	r7, sp, #0
	ModuleWIFI_HWInit();
 800b9bc:	f7ff ffee 	bl	800b99c <ModuleWIFI_HWInit>
	ModuleWIFI_SWInit();
 800b9c0:	f7ff fff3 	bl	800b9aa <ModuleWIFI_SWInit>
}
 800b9c4:	bf00      	nop
 800b9c6:	bd80      	pop	{r7, pc}

0800b9c8 <ModuleWIFI_MAIN_Routine>:
	 @date	  :
	 @INFO		:
********************************************************************************/

void ModuleWIFI_MAIN_Routine(void)
{
 800b9c8:	b480      	push	{r7}
 800b9ca:	af00      	add	r7, sp, #0

}
 800b9cc:	bf00      	nop
 800b9ce:	46bd      	mov	sp, r7
 800b9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d4:	4770      	bx	lr

0800b9d6 <ModuleWIFI_MAIN_Process>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModuleWIFI_MAIN_Process(void)
{
 800b9d6:	b480      	push	{r7}
 800b9d8:	af00      	add	r7, sp, #0

}
 800b9da:	bf00      	nop
 800b9dc:	46bd      	mov	sp, r7
 800b9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e2:	4770      	bx	lr

0800b9e4 <ModuleWIFI_MAIN>:
	 @date	  :
	 @INFO		:
********************************************************************************/

void ModuleWIFI_MAIN(void)
{
 800b9e4:	b580      	push	{r7, lr}
 800b9e6:	af00      	add	r7, sp, #0
	switch(ModuleWIFI_MAIN_State)
 800b9e8:	4b11      	ldr	r3, [pc, #68]	; (800ba30 <ModuleWIFI_MAIN+0x4c>)
 800b9ea:	781b      	ldrb	r3, [r3, #0]
 800b9ec:	2b03      	cmp	r3, #3
 800b9ee:	d819      	bhi.n	800ba24 <ModuleWIFI_MAIN+0x40>
 800b9f0:	a201      	add	r2, pc, #4	; (adr r2, 800b9f8 <ModuleWIFI_MAIN+0x14>)
 800b9f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9f6:	bf00      	nop
 800b9f8:	0800ba09 	.word	0x0800ba09
 800b9fc:	0800ba11 	.word	0x0800ba11
 800ba00:	0800ba17 	.word	0x0800ba17
 800ba04:	0800ba1d 	.word	0x0800ba1d
	{
	    case ModuleWIFI_MAIN_State_IDLE:
	    	//@INFO: IDLE Operations ..
	    	ModuleWIFI_MAIN_State = ModuleWIFI_MAIN_State_ROUTINE;
 800ba08:	4b09      	ldr	r3, [pc, #36]	; (800ba30 <ModuleWIFI_MAIN+0x4c>)
 800ba0a:	2201      	movs	r2, #1
 800ba0c:	701a      	strb	r2, [r3, #0]
	    break;
 800ba0e:	e00d      	b.n	800ba2c <ModuleWIFI_MAIN+0x48>

	    case ModuleWIFI_MAIN_State_ROUTINE:

	    	ModuleWIFI_MAIN_Routine();
 800ba10:	f7ff ffda 	bl	800b9c8 <ModuleWIFI_MAIN_Routine>
	    break;
 800ba14:	e00a      	b.n	800ba2c <ModuleWIFI_MAIN+0x48>

	    case ModuleWIFI_MAIN_State_PROCESS:

	    	ModuleWIFI_MAIN_Process();
 800ba16:	f7ff ffde 	bl	800b9d6 <ModuleWIFI_MAIN_Process>

	    break;
 800ba1a:	e007      	b.n	800ba2c <ModuleWIFI_MAIN+0x48>

	    case ModuleWIFI_MAIN_State_SUSPEND:
	    	ModuleWIFI_MAIN_State = ModuleWIFI_MAIN_State_IDLE;
 800ba1c:	4b04      	ldr	r3, [pc, #16]	; (800ba30 <ModuleWIFI_MAIN+0x4c>)
 800ba1e:	2200      	movs	r2, #0
 800ba20:	701a      	strb	r2, [r3, #0]
	    break;
 800ba22:	e003      	b.n	800ba2c <ModuleWIFI_MAIN+0x48>

	    default:
	    	ModuleWIFI_MAIN_State = ModuleWIFI_MAIN_State_SUSPEND;
 800ba24:	4b02      	ldr	r3, [pc, #8]	; (800ba30 <ModuleWIFI_MAIN+0x4c>)
 800ba26:	2203      	movs	r2, #3
 800ba28:	701a      	strb	r2, [r3, #0]
	    break;
 800ba2a:	bf00      	nop

	}
}
 800ba2c:	bf00      	nop
 800ba2e:	bd80      	pop	{r7, pc}
 800ba30:	2000c715 	.word	0x2000c715

0800ba34 <TelemetryMain_HWInit>:
	 @return  : 
	 @date	  : 
	 @INFO		:	
********************************************************************************/
void TelemetryMain_HWInit(void)
{
 800ba34:	b480      	push	{r7}
 800ba36:	af00      	add	r7, sp, #0
	//@INFO: Telemetry thread'ine ait donanımsal init fonksiyonları
}
 800ba38:	bf00      	nop
 800ba3a:	46bd      	mov	sp, r7
 800ba3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba40:	4770      	bx	lr

0800ba42 <TelemetryMain_SWInit>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void TelemetryMain_SWInit(void)
{
 800ba42:	b480      	push	{r7}
 800ba44:	af00      	add	r7, sp, #0
	//@INFO: Telemetry thread'ine ait yazilimsal init fonksiyonları
}
 800ba46:	bf00      	nop
 800ba48:	46bd      	mov	sp, r7
 800ba4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba4e:	4770      	bx	lr

0800ba50 <TelemetryMain_StartUP>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void TelemetryMain_StartUP(void)
{
 800ba50:	b580      	push	{r7, lr}
 800ba52:	af00      	add	r7, sp, #0
	TelemetryMain_HWInit();
 800ba54:	f7ff ffee 	bl	800ba34 <TelemetryMain_HWInit>
	TelemetryMain_SWInit();
 800ba58:	f7ff fff3 	bl	800ba42 <TelemetryMain_SWInit>
}
 800ba5c:	bf00      	nop
 800ba5e:	bd80      	pop	{r7, pc}

0800ba60 <TelemetryMain_MAIN_Routine>:
	 @date	  :
	 @INFO		:
********************************************************************************/

void TelemetryMain_MAIN_Routine(void)
{
 800ba60:	b480      	push	{r7}
 800ba62:	af00      	add	r7, sp, #0

}
 800ba64:	bf00      	nop
 800ba66:	46bd      	mov	sp, r7
 800ba68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba6c:	4770      	bx	lr

0800ba6e <TelemetryMain_MAIN_Process>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void TelemetryMain_MAIN_Process(void)
{
 800ba6e:	b480      	push	{r7}
 800ba70:	af00      	add	r7, sp, #0

}
 800ba72:	bf00      	nop
 800ba74:	46bd      	mov	sp, r7
 800ba76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba7a:	4770      	bx	lr

0800ba7c <TelemetyMain_MAIN>:
	 @date	  :
	 @INFO		:
********************************************************************************/

void TelemetyMain_MAIN(void)
{
 800ba7c:	b580      	push	{r7, lr}
 800ba7e:	af00      	add	r7, sp, #0

	switch(TelemetryMain_MAIN_State)
 800ba80:	4b11      	ldr	r3, [pc, #68]	; (800bac8 <TelemetyMain_MAIN+0x4c>)
 800ba82:	781b      	ldrb	r3, [r3, #0]
 800ba84:	2b03      	cmp	r3, #3
 800ba86:	d819      	bhi.n	800babc <TelemetyMain_MAIN+0x40>
 800ba88:	a201      	add	r2, pc, #4	; (adr r2, 800ba90 <TelemetyMain_MAIN+0x14>)
 800ba8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba8e:	bf00      	nop
 800ba90:	0800baa1 	.word	0x0800baa1
 800ba94:	0800baa9 	.word	0x0800baa9
 800ba98:	0800baaf 	.word	0x0800baaf
 800ba9c:	0800bab5 	.word	0x0800bab5
	{
	    case TelemetryMain_MAIN_State_IDLE:
	    	//@INFO: IDLE Operations ..
	    	TelemetryMain_MAIN_State = TelemetryMain_MAIN_State_ROUTINE;
 800baa0:	4b09      	ldr	r3, [pc, #36]	; (800bac8 <TelemetyMain_MAIN+0x4c>)
 800baa2:	2201      	movs	r2, #1
 800baa4:	701a      	strb	r2, [r3, #0]
	    break;
 800baa6:	e00d      	b.n	800bac4 <TelemetyMain_MAIN+0x48>

	    case TelemetryMain_MAIN_State_ROUTINE:

	    	TelemetryMain_MAIN_Routine();
 800baa8:	f7ff ffda 	bl	800ba60 <TelemetryMain_MAIN_Routine>

	    break;
 800baac:	e00a      	b.n	800bac4 <TelemetyMain_MAIN+0x48>

	    case TelemetryMain_MAIN_State_PROCESS:

	    	TelemetryMain_MAIN_Process();
 800baae:	f7ff ffde 	bl	800ba6e <TelemetryMain_MAIN_Process>

	    break;
 800bab2:	e007      	b.n	800bac4 <TelemetyMain_MAIN+0x48>

	    case TelemetryMain_MAIN_State_SUSPEND:
	    	TelemetryMain_MAIN_State = TelemetryMain_MAIN_State_IDLE;
 800bab4:	4b04      	ldr	r3, [pc, #16]	; (800bac8 <TelemetyMain_MAIN+0x4c>)
 800bab6:	2200      	movs	r2, #0
 800bab8:	701a      	strb	r2, [r3, #0]
	    break;
 800baba:	e003      	b.n	800bac4 <TelemetyMain_MAIN+0x48>

	    default:
	    	TelemetryMain_MAIN_State = TelemetryMain_MAIN_State_SUSPEND;
 800babc:	4b02      	ldr	r3, [pc, #8]	; (800bac8 <TelemetyMain_MAIN+0x4c>)
 800babe:	2203      	movs	r2, #3
 800bac0:	701a      	strb	r2, [r3, #0]
	    break;
 800bac2:	bf00      	nop

	}

}
 800bac4:	bf00      	nop
 800bac6:	bd80      	pop	{r7, pc}
 800bac8:	2000c716 	.word	0x2000c716

0800bacc <__libc_init_array>:
 800bacc:	b570      	push	{r4, r5, r6, lr}
 800bace:	4d0d      	ldr	r5, [pc, #52]	; (800bb04 <__libc_init_array+0x38>)
 800bad0:	4c0d      	ldr	r4, [pc, #52]	; (800bb08 <__libc_init_array+0x3c>)
 800bad2:	1b64      	subs	r4, r4, r5
 800bad4:	10a4      	asrs	r4, r4, #2
 800bad6:	2600      	movs	r6, #0
 800bad8:	42a6      	cmp	r6, r4
 800bada:	d109      	bne.n	800baf0 <__libc_init_array+0x24>
 800badc:	4d0b      	ldr	r5, [pc, #44]	; (800bb0c <__libc_init_array+0x40>)
 800bade:	4c0c      	ldr	r4, [pc, #48]	; (800bb10 <__libc_init_array+0x44>)
 800bae0:	f000 f82e 	bl	800bb40 <_init>
 800bae4:	1b64      	subs	r4, r4, r5
 800bae6:	10a4      	asrs	r4, r4, #2
 800bae8:	2600      	movs	r6, #0
 800baea:	42a6      	cmp	r6, r4
 800baec:	d105      	bne.n	800bafa <__libc_init_array+0x2e>
 800baee:	bd70      	pop	{r4, r5, r6, pc}
 800baf0:	f855 3b04 	ldr.w	r3, [r5], #4
 800baf4:	4798      	blx	r3
 800baf6:	3601      	adds	r6, #1
 800baf8:	e7ee      	b.n	800bad8 <__libc_init_array+0xc>
 800bafa:	f855 3b04 	ldr.w	r3, [r5], #4
 800bafe:	4798      	blx	r3
 800bb00:	3601      	adds	r6, #1
 800bb02:	e7f2      	b.n	800baea <__libc_init_array+0x1e>
 800bb04:	0800c184 	.word	0x0800c184
 800bb08:	0800c184 	.word	0x0800c184
 800bb0c:	0800c184 	.word	0x0800c184
 800bb10:	0800c188 	.word	0x0800c188

0800bb14 <memcpy>:
 800bb14:	440a      	add	r2, r1
 800bb16:	4291      	cmp	r1, r2
 800bb18:	f100 33ff 	add.w	r3, r0, #4294967295
 800bb1c:	d100      	bne.n	800bb20 <memcpy+0xc>
 800bb1e:	4770      	bx	lr
 800bb20:	b510      	push	{r4, lr}
 800bb22:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bb26:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bb2a:	4291      	cmp	r1, r2
 800bb2c:	d1f9      	bne.n	800bb22 <memcpy+0xe>
 800bb2e:	bd10      	pop	{r4, pc}

0800bb30 <memset>:
 800bb30:	4402      	add	r2, r0
 800bb32:	4603      	mov	r3, r0
 800bb34:	4293      	cmp	r3, r2
 800bb36:	d100      	bne.n	800bb3a <memset+0xa>
 800bb38:	4770      	bx	lr
 800bb3a:	f803 1b01 	strb.w	r1, [r3], #1
 800bb3e:	e7f9      	b.n	800bb34 <memset+0x4>

0800bb40 <_init>:
 800bb40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb42:	bf00      	nop
 800bb44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb46:	bc08      	pop	{r3}
 800bb48:	469e      	mov	lr, r3
 800bb4a:	4770      	bx	lr

0800bb4c <_fini>:
 800bb4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb4e:	bf00      	nop
 800bb50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb52:	bc08      	pop	{r3}
 800bb54:	469e      	mov	lr, r3
 800bb56:	4770      	bx	lr
