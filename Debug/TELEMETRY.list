
TELEMETRY.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000754c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000144  080076ec  080076ec  000176ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007830  08007830  00020024  2**0
                  CONTENTS
  4 .ARM          00000008  08007830  08007830  00017830  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007838  08007838  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007838  08007838  00017838  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800783c  0800783c  0001783c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08007840  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009648  20000024  08007864  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000966c  08007864  0002966c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e9e7  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004015  00000000  00000000  0003ea3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c90  00000000  00000000  00042a50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001ad0  00000000  00000000  000446e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00007316  00000000  00000000  000461b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002544d  00000000  00000000  0004d4c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000aaa87  00000000  00000000  00072913  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011d39a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007710  00000000  00000000  0011d3ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000024 	.word	0x20000024
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080076d4 	.word	0x080076d4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000028 	.word	0x20000028
 80001dc:	080076d4 	.word	0x080076d4

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b974 	b.w	80004e0 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468e      	mov	lr, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14d      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021e:	428a      	cmp	r2, r1
 8000220:	4694      	mov	ip, r2
 8000222:	d969      	bls.n	80002f8 <__udivmoddi4+0xe8>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b152      	cbz	r2, 8000240 <__udivmoddi4+0x30>
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	f1c2 0120 	rsb	r1, r2, #32
 8000232:	fa20 f101 	lsr.w	r1, r0, r1
 8000236:	fa0c fc02 	lsl.w	ip, ip, r2
 800023a:	ea41 0e03 	orr.w	lr, r1, r3
 800023e:	4094      	lsls	r4, r2
 8000240:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000244:	0c21      	lsrs	r1, r4, #16
 8000246:	fbbe f6f8 	udiv	r6, lr, r8
 800024a:	fa1f f78c 	uxth.w	r7, ip
 800024e:	fb08 e316 	mls	r3, r8, r6, lr
 8000252:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000256:	fb06 f107 	mul.w	r1, r6, r7
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f106 30ff 	add.w	r0, r6, #4294967295
 8000266:	f080 811f 	bcs.w	80004a8 <__udivmoddi4+0x298>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 811c 	bls.w	80004a8 <__udivmoddi4+0x298>
 8000270:	3e02      	subs	r6, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0f8 	udiv	r0, r3, r8
 800027c:	fb08 3310 	mls	r3, r8, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 f707 	mul.w	r7, r0, r7
 8000288:	42a7      	cmp	r7, r4
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x92>
 800028c:	eb1c 0404 	adds.w	r4, ip, r4
 8000290:	f100 33ff 	add.w	r3, r0, #4294967295
 8000294:	f080 810a 	bcs.w	80004ac <__udivmoddi4+0x29c>
 8000298:	42a7      	cmp	r7, r4
 800029a:	f240 8107 	bls.w	80004ac <__udivmoddi4+0x29c>
 800029e:	4464      	add	r4, ip
 80002a0:	3802      	subs	r0, #2
 80002a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a6:	1be4      	subs	r4, r4, r7
 80002a8:	2600      	movs	r6, #0
 80002aa:	b11d      	cbz	r5, 80002b4 <__udivmoddi4+0xa4>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c5 4300 	strd	r4, r3, [r5]
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0xc2>
 80002be:	2d00      	cmp	r5, #0
 80002c0:	f000 80ef 	beq.w	80004a2 <__udivmoddi4+0x292>
 80002c4:	2600      	movs	r6, #0
 80002c6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ca:	4630      	mov	r0, r6
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	fab3 f683 	clz	r6, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d14a      	bne.n	8000370 <__udivmoddi4+0x160>
 80002da:	428b      	cmp	r3, r1
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xd4>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80f9 	bhi.w	80004d6 <__udivmoddi4+0x2c6>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	469e      	mov	lr, r3
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e0      	beq.n	80002b4 <__udivmoddi4+0xa4>
 80002f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002f6:	e7dd      	b.n	80002b4 <__udivmoddi4+0xa4>
 80002f8:	b902      	cbnz	r2, 80002fc <__udivmoddi4+0xec>
 80002fa:	deff      	udf	#255	; 0xff
 80002fc:	fab2 f282 	clz	r2, r2
 8000300:	2a00      	cmp	r2, #0
 8000302:	f040 8092 	bne.w	800042a <__udivmoddi4+0x21a>
 8000306:	eba1 010c 	sub.w	r1, r1, ip
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2601      	movs	r6, #1
 8000314:	0c20      	lsrs	r0, r4, #16
 8000316:	fbb1 f3f7 	udiv	r3, r1, r7
 800031a:	fb07 1113 	mls	r1, r7, r3, r1
 800031e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000322:	fb0e f003 	mul.w	r0, lr, r3
 8000326:	4288      	cmp	r0, r1
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x12c>
 800032a:	eb1c 0101 	adds.w	r1, ip, r1
 800032e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x12a>
 8000334:	4288      	cmp	r0, r1
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2c0>
 800033a:	4643      	mov	r3, r8
 800033c:	1a09      	subs	r1, r1, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb1 f0f7 	udiv	r0, r1, r7
 8000344:	fb07 1110 	mls	r1, r7, r0, r1
 8000348:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x156>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 31ff 	add.w	r1, r0, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x154>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2ca>
 8000364:	4608      	mov	r0, r1
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800036e:	e79c      	b.n	80002aa <__udivmoddi4+0x9a>
 8000370:	f1c6 0720 	rsb	r7, r6, #32
 8000374:	40b3      	lsls	r3, r6
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa20 f407 	lsr.w	r4, r0, r7
 8000382:	fa01 f306 	lsl.w	r3, r1, r6
 8000386:	431c      	orrs	r4, r3
 8000388:	40f9      	lsrs	r1, r7
 800038a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038e:	fa00 f306 	lsl.w	r3, r0, r6
 8000392:	fbb1 f8f9 	udiv	r8, r1, r9
 8000396:	0c20      	lsrs	r0, r4, #16
 8000398:	fa1f fe8c 	uxth.w	lr, ip
 800039c:	fb09 1118 	mls	r1, r9, r8, r1
 80003a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a4:	fb08 f00e 	mul.w	r0, r8, lr
 80003a8:	4288      	cmp	r0, r1
 80003aa:	fa02 f206 	lsl.w	r2, r2, r6
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b8>
 80003b0:	eb1c 0101 	adds.w	r1, ip, r1
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2bc>
 80003bc:	4288      	cmp	r0, r1
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2bc>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4461      	add	r1, ip
 80003c8:	1a09      	subs	r1, r1, r0
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d0:	fb09 1110 	mls	r1, r9, r0, r1
 80003d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003dc:	458e      	cmp	lr, r1
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1e2>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2b4>
 80003ea:	458e      	cmp	lr, r1
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2b4>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4461      	add	r1, ip
 80003f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003f6:	fba0 9402 	umull	r9, r4, r0, r2
 80003fa:	eba1 010e 	sub.w	r1, r1, lr
 80003fe:	42a1      	cmp	r1, r4
 8000400:	46c8      	mov	r8, r9
 8000402:	46a6      	mov	lr, r4
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x2a4>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x2a0>
 8000408:	b15d      	cbz	r5, 8000422 <__udivmoddi4+0x212>
 800040a:	ebb3 0208 	subs.w	r2, r3, r8
 800040e:	eb61 010e 	sbc.w	r1, r1, lr
 8000412:	fa01 f707 	lsl.w	r7, r1, r7
 8000416:	fa22 f306 	lsr.w	r3, r2, r6
 800041a:	40f1      	lsrs	r1, r6
 800041c:	431f      	orrs	r7, r3
 800041e:	e9c5 7100 	strd	r7, r1, [r5]
 8000422:	2600      	movs	r6, #0
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	f1c2 0320 	rsb	r3, r2, #32
 800042e:	40d8      	lsrs	r0, r3
 8000430:	fa0c fc02 	lsl.w	ip, ip, r2
 8000434:	fa21 f303 	lsr.w	r3, r1, r3
 8000438:	4091      	lsls	r1, r2
 800043a:	4301      	orrs	r1, r0
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb3 f0f7 	udiv	r0, r3, r7
 8000448:	fb07 3610 	mls	r6, r7, r0, r3
 800044c:	0c0b      	lsrs	r3, r1, #16
 800044e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000452:	fb00 f60e 	mul.w	r6, r0, lr
 8000456:	429e      	cmp	r6, r3
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x260>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b8>
 8000468:	429e      	cmp	r6, r3
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b8>
 800046c:	3802      	subs	r0, #2
 800046e:	4463      	add	r3, ip
 8000470:	1b9b      	subs	r3, r3, r6
 8000472:	b289      	uxth	r1, r1
 8000474:	fbb3 f6f7 	udiv	r6, r3, r7
 8000478:	fb07 3316 	mls	r3, r7, r6, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb06 f30e 	mul.w	r3, r6, lr
 8000484:	428b      	cmp	r3, r1
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x28a>
 8000488:	eb1c 0101 	adds.w	r1, ip, r1
 800048c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000492:	428b      	cmp	r3, r1
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000496:	3e02      	subs	r6, #2
 8000498:	4461      	add	r1, ip
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0x104>
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e705      	b.n	80002b4 <__udivmoddi4+0xa4>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e3      	b.n	8000274 <__udivmoddi4+0x64>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6f8      	b.n	80002a2 <__udivmoddi4+0x92>
 80004b0:	454b      	cmp	r3, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f8>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004bc:	3801      	subs	r0, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f8>
 80004c0:	4646      	mov	r6, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x28a>
 80004c4:	4620      	mov	r0, r4
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1e2>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x260>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b8>
 80004d0:	3b02      	subs	r3, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x12c>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e709      	b.n	80002ee <__udivmoddi4+0xde>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x156>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e8:	f001 f84a 	bl	8001580 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ec:	f000 f832 	bl	8000554 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f0:	f000 fb56 	bl	8000ba0 <MX_GPIO_Init>
  MX_ADC1_Init();
 80004f4:	f000 f89a 	bl	800062c <MX_ADC1_Init>
  MX_I2C1_Init();
 80004f8:	f000 f8ea 	bl	80006d0 <MX_I2C1_Init>
  MX_I2C2_Init();
 80004fc:	f000 f916 	bl	800072c <MX_I2C2_Init>
  MX_I2C3_Init();
 8000500:	f000 f942 	bl	8000788 <MX_I2C3_Init>
  MX_SPI1_Init();
 8000504:	f000 f96e 	bl	80007e4 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000508:	f000 f9a2 	bl	8000850 <MX_SPI2_Init>
  MX_SPI3_Init();
 800050c:	f000 f9d6 	bl	80008bc <MX_SPI3_Init>
  MX_TIM3_Init();
 8000510:	f000 fa0a 	bl	8000928 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000514:	f000 fa6c 	bl	80009f0 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8000518:	f000 fac4 	bl	8000aa4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800051c:	f000 faec 	bl	8000af8 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 8000520:	f000 fb14 	bl	8000b4c <MX_USART6_UART_Init>
  MX_FATFS_Init();
 8000524:	f003 fa86 	bl	8003a34 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  MAIN_App(); /* Jump Into Telemetry Code */
 8000528:	f006 fd68 	bl	8006ffc <MAIN_App>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800052c:	f003 fb7c 	bl	8003c28 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000530:	4a05      	ldr	r2, [pc, #20]	; (8000548 <main+0x64>)
 8000532:	2100      	movs	r1, #0
 8000534:	4805      	ldr	r0, [pc, #20]	; (800054c <main+0x68>)
 8000536:	f003 fbc1 	bl	8003cbc <osThreadNew>
 800053a:	4603      	mov	r3, r0
 800053c:	4a04      	ldr	r2, [pc, #16]	; (8000550 <main+0x6c>)
 800053e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000540:	f003 fb96 	bl	8003c70 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000544:	e7fe      	b.n	8000544 <main+0x60>
 8000546:	bf00      	nop
 8000548:	080077d4 	.word	0x080077d4
 800054c:	08000d65 	.word	0x08000d65
 8000550:	200003e8 	.word	0x200003e8

08000554 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b094      	sub	sp, #80	; 0x50
 8000558:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800055a:	f107 0320 	add.w	r3, r7, #32
 800055e:	2230      	movs	r2, #48	; 0x30
 8000560:	2100      	movs	r1, #0
 8000562:	4618      	mov	r0, r3
 8000564:	f007 f8ae 	bl	80076c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000568:	f107 030c 	add.w	r3, r7, #12
 800056c:	2200      	movs	r2, #0
 800056e:	601a      	str	r2, [r3, #0]
 8000570:	605a      	str	r2, [r3, #4]
 8000572:	609a      	str	r2, [r3, #8]
 8000574:	60da      	str	r2, [r3, #12]
 8000576:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000578:	2300      	movs	r3, #0
 800057a:	60bb      	str	r3, [r7, #8]
 800057c:	4b29      	ldr	r3, [pc, #164]	; (8000624 <SystemClock_Config+0xd0>)
 800057e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000580:	4a28      	ldr	r2, [pc, #160]	; (8000624 <SystemClock_Config+0xd0>)
 8000582:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000586:	6413      	str	r3, [r2, #64]	; 0x40
 8000588:	4b26      	ldr	r3, [pc, #152]	; (8000624 <SystemClock_Config+0xd0>)
 800058a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800058c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000590:	60bb      	str	r3, [r7, #8]
 8000592:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000594:	2300      	movs	r3, #0
 8000596:	607b      	str	r3, [r7, #4]
 8000598:	4b23      	ldr	r3, [pc, #140]	; (8000628 <SystemClock_Config+0xd4>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005a0:	4a21      	ldr	r2, [pc, #132]	; (8000628 <SystemClock_Config+0xd4>)
 80005a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80005a6:	6013      	str	r3, [r2, #0]
 80005a8:	4b1f      	ldr	r3, [pc, #124]	; (8000628 <SystemClock_Config+0xd4>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005b0:	607b      	str	r3, [r7, #4]
 80005b2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005b4:	2301      	movs	r3, #1
 80005b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005bc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005be:	2302      	movs	r3, #2
 80005c0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005c2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005c8:	2304      	movs	r3, #4
 80005ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 80005cc:	2354      	movs	r3, #84	; 0x54
 80005ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005d0:	2302      	movs	r3, #2
 80005d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005d4:	2304      	movs	r3, #4
 80005d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d8:	f107 0320 	add.w	r3, r7, #32
 80005dc:	4618      	mov	r0, r3
 80005de:	f001 febb 	bl	8002358 <HAL_RCC_OscConfig>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d001      	beq.n	80005ec <SystemClock_Config+0x98>
  {
    Error_Handler();
 80005e8:	f000 fbc4 	bl	8000d74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ec:	230f      	movs	r3, #15
 80005ee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005f0:	2302      	movs	r3, #2
 80005f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f4:	2300      	movs	r3, #0
 80005f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000602:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000604:	f107 030c 	add.w	r3, r7, #12
 8000608:	2102      	movs	r1, #2
 800060a:	4618      	mov	r0, r3
 800060c:	f002 f91c 	bl	8002848 <HAL_RCC_ClockConfig>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000616:	f000 fbad 	bl	8000d74 <Error_Handler>
  }
}
 800061a:	bf00      	nop
 800061c:	3750      	adds	r7, #80	; 0x50
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	40023800 	.word	0x40023800
 8000628:	40007000 	.word	0x40007000

0800062c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b084      	sub	sp, #16
 8000630:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000632:	463b      	mov	r3, r7
 8000634:	2200      	movs	r2, #0
 8000636:	601a      	str	r2, [r3, #0]
 8000638:	605a      	str	r2, [r3, #4]
 800063a:	609a      	str	r2, [r3, #8]
 800063c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800063e:	4b21      	ldr	r3, [pc, #132]	; (80006c4 <MX_ADC1_Init+0x98>)
 8000640:	4a21      	ldr	r2, [pc, #132]	; (80006c8 <MX_ADC1_Init+0x9c>)
 8000642:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000644:	4b1f      	ldr	r3, [pc, #124]	; (80006c4 <MX_ADC1_Init+0x98>)
 8000646:	2200      	movs	r2, #0
 8000648:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800064a:	4b1e      	ldr	r3, [pc, #120]	; (80006c4 <MX_ADC1_Init+0x98>)
 800064c:	2200      	movs	r2, #0
 800064e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000650:	4b1c      	ldr	r3, [pc, #112]	; (80006c4 <MX_ADC1_Init+0x98>)
 8000652:	2200      	movs	r2, #0
 8000654:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000656:	4b1b      	ldr	r3, [pc, #108]	; (80006c4 <MX_ADC1_Init+0x98>)
 8000658:	2200      	movs	r2, #0
 800065a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800065c:	4b19      	ldr	r3, [pc, #100]	; (80006c4 <MX_ADC1_Init+0x98>)
 800065e:	2200      	movs	r2, #0
 8000660:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000664:	4b17      	ldr	r3, [pc, #92]	; (80006c4 <MX_ADC1_Init+0x98>)
 8000666:	2200      	movs	r2, #0
 8000668:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800066a:	4b16      	ldr	r3, [pc, #88]	; (80006c4 <MX_ADC1_Init+0x98>)
 800066c:	4a17      	ldr	r2, [pc, #92]	; (80006cc <MX_ADC1_Init+0xa0>)
 800066e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000670:	4b14      	ldr	r3, [pc, #80]	; (80006c4 <MX_ADC1_Init+0x98>)
 8000672:	2200      	movs	r2, #0
 8000674:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000676:	4b13      	ldr	r3, [pc, #76]	; (80006c4 <MX_ADC1_Init+0x98>)
 8000678:	2201      	movs	r2, #1
 800067a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800067c:	4b11      	ldr	r3, [pc, #68]	; (80006c4 <MX_ADC1_Init+0x98>)
 800067e:	2200      	movs	r2, #0
 8000680:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000684:	4b0f      	ldr	r3, [pc, #60]	; (80006c4 <MX_ADC1_Init+0x98>)
 8000686:	2201      	movs	r2, #1
 8000688:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800068a:	480e      	ldr	r0, [pc, #56]	; (80006c4 <MX_ADC1_Init+0x98>)
 800068c:	f000 ffea 	bl	8001664 <HAL_ADC_Init>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000696:	f000 fb6d 	bl	8000d74 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800069a:	2301      	movs	r3, #1
 800069c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800069e:	2301      	movs	r3, #1
 80006a0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80006a2:	2300      	movs	r3, #0
 80006a4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006a6:	463b      	mov	r3, r7
 80006a8:	4619      	mov	r1, r3
 80006aa:	4806      	ldr	r0, [pc, #24]	; (80006c4 <MX_ADC1_Init+0x98>)
 80006ac:	f001 f81e 	bl	80016ec <HAL_ADC_ConfigChannel>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80006b6:	f000 fb5d 	bl	8000d74 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006ba:	bf00      	nop
 80006bc:	3710      	adds	r7, #16
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	20000040 	.word	0x20000040
 80006c8:	40012000 	.word	0x40012000
 80006cc:	0f000001 	.word	0x0f000001

080006d0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006d4:	4b12      	ldr	r3, [pc, #72]	; (8000720 <MX_I2C1_Init+0x50>)
 80006d6:	4a13      	ldr	r2, [pc, #76]	; (8000724 <MX_I2C1_Init+0x54>)
 80006d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006da:	4b11      	ldr	r3, [pc, #68]	; (8000720 <MX_I2C1_Init+0x50>)
 80006dc:	4a12      	ldr	r2, [pc, #72]	; (8000728 <MX_I2C1_Init+0x58>)
 80006de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006e0:	4b0f      	ldr	r3, [pc, #60]	; (8000720 <MX_I2C1_Init+0x50>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006e6:	4b0e      	ldr	r3, [pc, #56]	; (8000720 <MX_I2C1_Init+0x50>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006ec:	4b0c      	ldr	r3, [pc, #48]	; (8000720 <MX_I2C1_Init+0x50>)
 80006ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006f2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006f4:	4b0a      	ldr	r3, [pc, #40]	; (8000720 <MX_I2C1_Init+0x50>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006fa:	4b09      	ldr	r3, [pc, #36]	; (8000720 <MX_I2C1_Init+0x50>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000700:	4b07      	ldr	r3, [pc, #28]	; (8000720 <MX_I2C1_Init+0x50>)
 8000702:	2200      	movs	r2, #0
 8000704:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000706:	4b06      	ldr	r3, [pc, #24]	; (8000720 <MX_I2C1_Init+0x50>)
 8000708:	2200      	movs	r2, #0
 800070a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800070c:	4804      	ldr	r0, [pc, #16]	; (8000720 <MX_I2C1_Init+0x50>)
 800070e:	f001 fcdf 	bl	80020d0 <HAL_I2C_Init>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000718:	f000 fb2c 	bl	8000d74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800071c:	bf00      	nop
 800071e:	bd80      	pop	{r7, pc}
 8000720:	20000088 	.word	0x20000088
 8000724:	40005400 	.word	0x40005400
 8000728:	000186a0 	.word	0x000186a0

0800072c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000730:	4b12      	ldr	r3, [pc, #72]	; (800077c <MX_I2C2_Init+0x50>)
 8000732:	4a13      	ldr	r2, [pc, #76]	; (8000780 <MX_I2C2_Init+0x54>)
 8000734:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000736:	4b11      	ldr	r3, [pc, #68]	; (800077c <MX_I2C2_Init+0x50>)
 8000738:	4a12      	ldr	r2, [pc, #72]	; (8000784 <MX_I2C2_Init+0x58>)
 800073a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800073c:	4b0f      	ldr	r3, [pc, #60]	; (800077c <MX_I2C2_Init+0x50>)
 800073e:	2200      	movs	r2, #0
 8000740:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000742:	4b0e      	ldr	r3, [pc, #56]	; (800077c <MX_I2C2_Init+0x50>)
 8000744:	2200      	movs	r2, #0
 8000746:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000748:	4b0c      	ldr	r3, [pc, #48]	; (800077c <MX_I2C2_Init+0x50>)
 800074a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800074e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000750:	4b0a      	ldr	r3, [pc, #40]	; (800077c <MX_I2C2_Init+0x50>)
 8000752:	2200      	movs	r2, #0
 8000754:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000756:	4b09      	ldr	r3, [pc, #36]	; (800077c <MX_I2C2_Init+0x50>)
 8000758:	2200      	movs	r2, #0
 800075a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800075c:	4b07      	ldr	r3, [pc, #28]	; (800077c <MX_I2C2_Init+0x50>)
 800075e:	2200      	movs	r2, #0
 8000760:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000762:	4b06      	ldr	r3, [pc, #24]	; (800077c <MX_I2C2_Init+0x50>)
 8000764:	2200      	movs	r2, #0
 8000766:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000768:	4804      	ldr	r0, [pc, #16]	; (800077c <MX_I2C2_Init+0x50>)
 800076a:	f001 fcb1 	bl	80020d0 <HAL_I2C_Init>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000774:	f000 fafe 	bl	8000d74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000778:	bf00      	nop
 800077a:	bd80      	pop	{r7, pc}
 800077c:	200000dc 	.word	0x200000dc
 8000780:	40005800 	.word	0x40005800
 8000784:	000186a0 	.word	0x000186a0

08000788 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800078c:	4b12      	ldr	r3, [pc, #72]	; (80007d8 <MX_I2C3_Init+0x50>)
 800078e:	4a13      	ldr	r2, [pc, #76]	; (80007dc <MX_I2C3_Init+0x54>)
 8000790:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000792:	4b11      	ldr	r3, [pc, #68]	; (80007d8 <MX_I2C3_Init+0x50>)
 8000794:	4a12      	ldr	r2, [pc, #72]	; (80007e0 <MX_I2C3_Init+0x58>)
 8000796:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000798:	4b0f      	ldr	r3, [pc, #60]	; (80007d8 <MX_I2C3_Init+0x50>)
 800079a:	2200      	movs	r2, #0
 800079c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800079e:	4b0e      	ldr	r3, [pc, #56]	; (80007d8 <MX_I2C3_Init+0x50>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007a4:	4b0c      	ldr	r3, [pc, #48]	; (80007d8 <MX_I2C3_Init+0x50>)
 80007a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007aa:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007ac:	4b0a      	ldr	r3, [pc, #40]	; (80007d8 <MX_I2C3_Init+0x50>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80007b2:	4b09      	ldr	r3, [pc, #36]	; (80007d8 <MX_I2C3_Init+0x50>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007b8:	4b07      	ldr	r3, [pc, #28]	; (80007d8 <MX_I2C3_Init+0x50>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007be:	4b06      	ldr	r3, [pc, #24]	; (80007d8 <MX_I2C3_Init+0x50>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80007c4:	4804      	ldr	r0, [pc, #16]	; (80007d8 <MX_I2C3_Init+0x50>)
 80007c6:	f001 fc83 	bl	80020d0 <HAL_I2C_Init>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80007d0:	f000 fad0 	bl	8000d74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80007d4:	bf00      	nop
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	20000130 	.word	0x20000130
 80007dc:	40005c00 	.word	0x40005c00
 80007e0:	000186a0 	.word	0x000186a0

080007e4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80007e8:	4b17      	ldr	r3, [pc, #92]	; (8000848 <MX_SPI1_Init+0x64>)
 80007ea:	4a18      	ldr	r2, [pc, #96]	; (800084c <MX_SPI1_Init+0x68>)
 80007ec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007ee:	4b16      	ldr	r3, [pc, #88]	; (8000848 <MX_SPI1_Init+0x64>)
 80007f0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007f4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007f6:	4b14      	ldr	r3, [pc, #80]	; (8000848 <MX_SPI1_Init+0x64>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007fc:	4b12      	ldr	r3, [pc, #72]	; (8000848 <MX_SPI1_Init+0x64>)
 80007fe:	2200      	movs	r2, #0
 8000800:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000802:	4b11      	ldr	r3, [pc, #68]	; (8000848 <MX_SPI1_Init+0x64>)
 8000804:	2200      	movs	r2, #0
 8000806:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000808:	4b0f      	ldr	r3, [pc, #60]	; (8000848 <MX_SPI1_Init+0x64>)
 800080a:	2200      	movs	r2, #0
 800080c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800080e:	4b0e      	ldr	r3, [pc, #56]	; (8000848 <MX_SPI1_Init+0x64>)
 8000810:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000814:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000816:	4b0c      	ldr	r3, [pc, #48]	; (8000848 <MX_SPI1_Init+0x64>)
 8000818:	2200      	movs	r2, #0
 800081a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800081c:	4b0a      	ldr	r3, [pc, #40]	; (8000848 <MX_SPI1_Init+0x64>)
 800081e:	2200      	movs	r2, #0
 8000820:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000822:	4b09      	ldr	r3, [pc, #36]	; (8000848 <MX_SPI1_Init+0x64>)
 8000824:	2200      	movs	r2, #0
 8000826:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000828:	4b07      	ldr	r3, [pc, #28]	; (8000848 <MX_SPI1_Init+0x64>)
 800082a:	2200      	movs	r2, #0
 800082c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800082e:	4b06      	ldr	r3, [pc, #24]	; (8000848 <MX_SPI1_Init+0x64>)
 8000830:	220a      	movs	r2, #10
 8000832:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000834:	4804      	ldr	r0, [pc, #16]	; (8000848 <MX_SPI1_Init+0x64>)
 8000836:	f002 fa27 	bl	8002c88 <HAL_SPI_Init>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000840:	f000 fa98 	bl	8000d74 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000844:	bf00      	nop
 8000846:	bd80      	pop	{r7, pc}
 8000848:	20000184 	.word	0x20000184
 800084c:	40013000 	.word	0x40013000

08000850 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000854:	4b17      	ldr	r3, [pc, #92]	; (80008b4 <MX_SPI2_Init+0x64>)
 8000856:	4a18      	ldr	r2, [pc, #96]	; (80008b8 <MX_SPI2_Init+0x68>)
 8000858:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800085a:	4b16      	ldr	r3, [pc, #88]	; (80008b4 <MX_SPI2_Init+0x64>)
 800085c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000860:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000862:	4b14      	ldr	r3, [pc, #80]	; (80008b4 <MX_SPI2_Init+0x64>)
 8000864:	2200      	movs	r2, #0
 8000866:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000868:	4b12      	ldr	r3, [pc, #72]	; (80008b4 <MX_SPI2_Init+0x64>)
 800086a:	2200      	movs	r2, #0
 800086c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800086e:	4b11      	ldr	r3, [pc, #68]	; (80008b4 <MX_SPI2_Init+0x64>)
 8000870:	2200      	movs	r2, #0
 8000872:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000874:	4b0f      	ldr	r3, [pc, #60]	; (80008b4 <MX_SPI2_Init+0x64>)
 8000876:	2200      	movs	r2, #0
 8000878:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800087a:	4b0e      	ldr	r3, [pc, #56]	; (80008b4 <MX_SPI2_Init+0x64>)
 800087c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000880:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000882:	4b0c      	ldr	r3, [pc, #48]	; (80008b4 <MX_SPI2_Init+0x64>)
 8000884:	2200      	movs	r2, #0
 8000886:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000888:	4b0a      	ldr	r3, [pc, #40]	; (80008b4 <MX_SPI2_Init+0x64>)
 800088a:	2200      	movs	r2, #0
 800088c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800088e:	4b09      	ldr	r3, [pc, #36]	; (80008b4 <MX_SPI2_Init+0x64>)
 8000890:	2200      	movs	r2, #0
 8000892:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000894:	4b07      	ldr	r3, [pc, #28]	; (80008b4 <MX_SPI2_Init+0x64>)
 8000896:	2200      	movs	r2, #0
 8000898:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800089a:	4b06      	ldr	r3, [pc, #24]	; (80008b4 <MX_SPI2_Init+0x64>)
 800089c:	220a      	movs	r2, #10
 800089e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80008a0:	4804      	ldr	r0, [pc, #16]	; (80008b4 <MX_SPI2_Init+0x64>)
 80008a2:	f002 f9f1 	bl	8002c88 <HAL_SPI_Init>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80008ac:	f000 fa62 	bl	8000d74 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80008b0:	bf00      	nop
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	200001dc 	.word	0x200001dc
 80008b8:	40003800 	.word	0x40003800

080008bc <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80008c0:	4b17      	ldr	r3, [pc, #92]	; (8000920 <MX_SPI3_Init+0x64>)
 80008c2:	4a18      	ldr	r2, [pc, #96]	; (8000924 <MX_SPI3_Init+0x68>)
 80008c4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80008c6:	4b16      	ldr	r3, [pc, #88]	; (8000920 <MX_SPI3_Init+0x64>)
 80008c8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008cc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80008ce:	4b14      	ldr	r3, [pc, #80]	; (8000920 <MX_SPI3_Init+0x64>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80008d4:	4b12      	ldr	r3, [pc, #72]	; (8000920 <MX_SPI3_Init+0x64>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008da:	4b11      	ldr	r3, [pc, #68]	; (8000920 <MX_SPI3_Init+0x64>)
 80008dc:	2200      	movs	r2, #0
 80008de:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008e0:	4b0f      	ldr	r3, [pc, #60]	; (8000920 <MX_SPI3_Init+0x64>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80008e6:	4b0e      	ldr	r3, [pc, #56]	; (8000920 <MX_SPI3_Init+0x64>)
 80008e8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80008ec:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008ee:	4b0c      	ldr	r3, [pc, #48]	; (8000920 <MX_SPI3_Init+0x64>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008f4:	4b0a      	ldr	r3, [pc, #40]	; (8000920 <MX_SPI3_Init+0x64>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80008fa:	4b09      	ldr	r3, [pc, #36]	; (8000920 <MX_SPI3_Init+0x64>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000900:	4b07      	ldr	r3, [pc, #28]	; (8000920 <MX_SPI3_Init+0x64>)
 8000902:	2200      	movs	r2, #0
 8000904:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000906:	4b06      	ldr	r3, [pc, #24]	; (8000920 <MX_SPI3_Init+0x64>)
 8000908:	220a      	movs	r2, #10
 800090a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800090c:	4804      	ldr	r0, [pc, #16]	; (8000920 <MX_SPI3_Init+0x64>)
 800090e:	f002 f9bb 	bl	8002c88 <HAL_SPI_Init>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8000918:	f000 fa2c 	bl	8000d74 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800091c:	bf00      	nop
 800091e:	bd80      	pop	{r7, pc}
 8000920:	20000234 	.word	0x20000234
 8000924:	40003c00 	.word	0x40003c00

08000928 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b08a      	sub	sp, #40	; 0x28
 800092c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800092e:	f107 0320 	add.w	r3, r7, #32
 8000932:	2200      	movs	r2, #0
 8000934:	601a      	str	r2, [r3, #0]
 8000936:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000938:	1d3b      	adds	r3, r7, #4
 800093a:	2200      	movs	r2, #0
 800093c:	601a      	str	r2, [r3, #0]
 800093e:	605a      	str	r2, [r3, #4]
 8000940:	609a      	str	r2, [r3, #8]
 8000942:	60da      	str	r2, [r3, #12]
 8000944:	611a      	str	r2, [r3, #16]
 8000946:	615a      	str	r2, [r3, #20]
 8000948:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800094a:	4b27      	ldr	r3, [pc, #156]	; (80009e8 <MX_TIM3_Init+0xc0>)
 800094c:	4a27      	ldr	r2, [pc, #156]	; (80009ec <MX_TIM3_Init+0xc4>)
 800094e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000950:	4b25      	ldr	r3, [pc, #148]	; (80009e8 <MX_TIM3_Init+0xc0>)
 8000952:	2200      	movs	r2, #0
 8000954:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000956:	4b24      	ldr	r3, [pc, #144]	; (80009e8 <MX_TIM3_Init+0xc0>)
 8000958:	2200      	movs	r2, #0
 800095a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800095c:	4b22      	ldr	r3, [pc, #136]	; (80009e8 <MX_TIM3_Init+0xc0>)
 800095e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000962:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000964:	4b20      	ldr	r3, [pc, #128]	; (80009e8 <MX_TIM3_Init+0xc0>)
 8000966:	2200      	movs	r2, #0
 8000968:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800096a:	4b1f      	ldr	r3, [pc, #124]	; (80009e8 <MX_TIM3_Init+0xc0>)
 800096c:	2200      	movs	r2, #0
 800096e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000970:	481d      	ldr	r0, [pc, #116]	; (80009e8 <MX_TIM3_Init+0xc0>)
 8000972:	f002 fa12 	bl	8002d9a <HAL_TIM_PWM_Init>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800097c:	f000 f9fa 	bl	8000d74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000980:	2300      	movs	r3, #0
 8000982:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000984:	2300      	movs	r3, #0
 8000986:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000988:	f107 0320 	add.w	r3, r7, #32
 800098c:	4619      	mov	r1, r3
 800098e:	4816      	ldr	r0, [pc, #88]	; (80009e8 <MX_TIM3_Init+0xc0>)
 8000990:	f002 fd20 	bl	80033d4 <HAL_TIMEx_MasterConfigSynchronization>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800099a:	f000 f9eb 	bl	8000d74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800099e:	2360      	movs	r3, #96	; 0x60
 80009a0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80009a2:	2300      	movs	r3, #0
 80009a4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009a6:	2300      	movs	r3, #0
 80009a8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009aa:	2300      	movs	r3, #0
 80009ac:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80009ae:	1d3b      	adds	r3, r7, #4
 80009b0:	2208      	movs	r2, #8
 80009b2:	4619      	mov	r1, r3
 80009b4:	480c      	ldr	r0, [pc, #48]	; (80009e8 <MX_TIM3_Init+0xc0>)
 80009b6:	f002 fa3f 	bl	8002e38 <HAL_TIM_PWM_ConfigChannel>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80009c0:	f000 f9d8 	bl	8000d74 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80009c4:	1d3b      	adds	r3, r7, #4
 80009c6:	220c      	movs	r2, #12
 80009c8:	4619      	mov	r1, r3
 80009ca:	4807      	ldr	r0, [pc, #28]	; (80009e8 <MX_TIM3_Init+0xc0>)
 80009cc:	f002 fa34 	bl	8002e38 <HAL_TIM_PWM_ConfigChannel>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80009d6:	f000 f9cd 	bl	8000d74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80009da:	4803      	ldr	r0, [pc, #12]	; (80009e8 <MX_TIM3_Init+0xc0>)
 80009dc:	f000 fc50 	bl	8001280 <HAL_TIM_MspPostInit>

}
 80009e0:	bf00      	nop
 80009e2:	3728      	adds	r7, #40	; 0x28
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	2000028c 	.word	0x2000028c
 80009ec:	40000400 	.word	0x40000400

080009f0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b08a      	sub	sp, #40	; 0x28
 80009f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009f6:	f107 0320 	add.w	r3, r7, #32
 80009fa:	2200      	movs	r2, #0
 80009fc:	601a      	str	r2, [r3, #0]
 80009fe:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a00:	1d3b      	adds	r3, r7, #4
 8000a02:	2200      	movs	r2, #0
 8000a04:	601a      	str	r2, [r3, #0]
 8000a06:	605a      	str	r2, [r3, #4]
 8000a08:	609a      	str	r2, [r3, #8]
 8000a0a:	60da      	str	r2, [r3, #12]
 8000a0c:	611a      	str	r2, [r3, #16]
 8000a0e:	615a      	str	r2, [r3, #20]
 8000a10:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000a12:	4b22      	ldr	r3, [pc, #136]	; (8000a9c <MX_TIM4_Init+0xac>)
 8000a14:	4a22      	ldr	r2, [pc, #136]	; (8000aa0 <MX_TIM4_Init+0xb0>)
 8000a16:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000a18:	4b20      	ldr	r3, [pc, #128]	; (8000a9c <MX_TIM4_Init+0xac>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a1e:	4b1f      	ldr	r3, [pc, #124]	; (8000a9c <MX_TIM4_Init+0xac>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000a24:	4b1d      	ldr	r3, [pc, #116]	; (8000a9c <MX_TIM4_Init+0xac>)
 8000a26:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a2a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a2c:	4b1b      	ldr	r3, [pc, #108]	; (8000a9c <MX_TIM4_Init+0xac>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a32:	4b1a      	ldr	r3, [pc, #104]	; (8000a9c <MX_TIM4_Init+0xac>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000a38:	4818      	ldr	r0, [pc, #96]	; (8000a9c <MX_TIM4_Init+0xac>)
 8000a3a:	f002 f9ae 	bl	8002d9a <HAL_TIM_PWM_Init>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8000a44:	f000 f996 	bl	8000d74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000a50:	f107 0320 	add.w	r3, r7, #32
 8000a54:	4619      	mov	r1, r3
 8000a56:	4811      	ldr	r0, [pc, #68]	; (8000a9c <MX_TIM4_Init+0xac>)
 8000a58:	f002 fcbc 	bl	80033d4 <HAL_TIMEx_MasterConfigSynchronization>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8000a62:	f000 f987 	bl	8000d74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a66:	2360      	movs	r3, #96	; 0x60
 8000a68:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a72:	2300      	movs	r3, #0
 8000a74:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a76:	1d3b      	adds	r3, r7, #4
 8000a78:	2200      	movs	r2, #0
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	4807      	ldr	r0, [pc, #28]	; (8000a9c <MX_TIM4_Init+0xac>)
 8000a7e:	f002 f9db 	bl	8002e38 <HAL_TIM_PWM_ConfigChannel>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8000a88:	f000 f974 	bl	8000d74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000a8c:	4803      	ldr	r0, [pc, #12]	; (8000a9c <MX_TIM4_Init+0xac>)
 8000a8e:	f000 fbf7 	bl	8001280 <HAL_TIM_MspPostInit>

}
 8000a92:	bf00      	nop
 8000a94:	3728      	adds	r7, #40	; 0x28
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	200002d4 	.word	0x200002d4
 8000aa0:	40000800 	.word	0x40000800

08000aa4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000aa8:	4b11      	ldr	r3, [pc, #68]	; (8000af0 <MX_USART1_UART_Init+0x4c>)
 8000aaa:	4a12      	ldr	r2, [pc, #72]	; (8000af4 <MX_USART1_UART_Init+0x50>)
 8000aac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000aae:	4b10      	ldr	r3, [pc, #64]	; (8000af0 <MX_USART1_UART_Init+0x4c>)
 8000ab0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ab4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ab6:	4b0e      	ldr	r3, [pc, #56]	; (8000af0 <MX_USART1_UART_Init+0x4c>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000abc:	4b0c      	ldr	r3, [pc, #48]	; (8000af0 <MX_USART1_UART_Init+0x4c>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ac2:	4b0b      	ldr	r3, [pc, #44]	; (8000af0 <MX_USART1_UART_Init+0x4c>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ac8:	4b09      	ldr	r3, [pc, #36]	; (8000af0 <MX_USART1_UART_Init+0x4c>)
 8000aca:	220c      	movs	r2, #12
 8000acc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ace:	4b08      	ldr	r3, [pc, #32]	; (8000af0 <MX_USART1_UART_Init+0x4c>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ad4:	4b06      	ldr	r3, [pc, #24]	; (8000af0 <MX_USART1_UART_Init+0x4c>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ada:	4805      	ldr	r0, [pc, #20]	; (8000af0 <MX_USART1_UART_Init+0x4c>)
 8000adc:	f002 fce8 	bl	80034b0 <HAL_UART_Init>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000ae6:	f000 f945 	bl	8000d74 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000aea:	bf00      	nop
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	2000031c 	.word	0x2000031c
 8000af4:	40011000 	.word	0x40011000

08000af8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000afc:	4b11      	ldr	r3, [pc, #68]	; (8000b44 <MX_USART2_UART_Init+0x4c>)
 8000afe:	4a12      	ldr	r2, [pc, #72]	; (8000b48 <MX_USART2_UART_Init+0x50>)
 8000b00:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b02:	4b10      	ldr	r3, [pc, #64]	; (8000b44 <MX_USART2_UART_Init+0x4c>)
 8000b04:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b08:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b0a:	4b0e      	ldr	r3, [pc, #56]	; (8000b44 <MX_USART2_UART_Init+0x4c>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b10:	4b0c      	ldr	r3, [pc, #48]	; (8000b44 <MX_USART2_UART_Init+0x4c>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b16:	4b0b      	ldr	r3, [pc, #44]	; (8000b44 <MX_USART2_UART_Init+0x4c>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b1c:	4b09      	ldr	r3, [pc, #36]	; (8000b44 <MX_USART2_UART_Init+0x4c>)
 8000b1e:	220c      	movs	r2, #12
 8000b20:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b22:	4b08      	ldr	r3, [pc, #32]	; (8000b44 <MX_USART2_UART_Init+0x4c>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b28:	4b06      	ldr	r3, [pc, #24]	; (8000b44 <MX_USART2_UART_Init+0x4c>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b2e:	4805      	ldr	r0, [pc, #20]	; (8000b44 <MX_USART2_UART_Init+0x4c>)
 8000b30:	f002 fcbe 	bl	80034b0 <HAL_UART_Init>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b3a:	f000 f91b 	bl	8000d74 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b3e:	bf00      	nop
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	20000360 	.word	0x20000360
 8000b48:	40004400 	.word	0x40004400

08000b4c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000b50:	4b11      	ldr	r3, [pc, #68]	; (8000b98 <MX_USART6_UART_Init+0x4c>)
 8000b52:	4a12      	ldr	r2, [pc, #72]	; (8000b9c <MX_USART6_UART_Init+0x50>)
 8000b54:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000b56:	4b10      	ldr	r3, [pc, #64]	; (8000b98 <MX_USART6_UART_Init+0x4c>)
 8000b58:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b5c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000b5e:	4b0e      	ldr	r3, [pc, #56]	; (8000b98 <MX_USART6_UART_Init+0x4c>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000b64:	4b0c      	ldr	r3, [pc, #48]	; (8000b98 <MX_USART6_UART_Init+0x4c>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000b6a:	4b0b      	ldr	r3, [pc, #44]	; (8000b98 <MX_USART6_UART_Init+0x4c>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000b70:	4b09      	ldr	r3, [pc, #36]	; (8000b98 <MX_USART6_UART_Init+0x4c>)
 8000b72:	220c      	movs	r2, #12
 8000b74:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b76:	4b08      	ldr	r3, [pc, #32]	; (8000b98 <MX_USART6_UART_Init+0x4c>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b7c:	4b06      	ldr	r3, [pc, #24]	; (8000b98 <MX_USART6_UART_Init+0x4c>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000b82:	4805      	ldr	r0, [pc, #20]	; (8000b98 <MX_USART6_UART_Init+0x4c>)
 8000b84:	f002 fc94 	bl	80034b0 <HAL_UART_Init>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000b8e:	f000 f8f1 	bl	8000d74 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000b92:	bf00      	nop
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	200003a4 	.word	0x200003a4
 8000b9c:	40011400 	.word	0x40011400

08000ba0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b08a      	sub	sp, #40	; 0x28
 8000ba4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba6:	f107 0314 	add.w	r3, r7, #20
 8000baa:	2200      	movs	r2, #0
 8000bac:	601a      	str	r2, [r3, #0]
 8000bae:	605a      	str	r2, [r3, #4]
 8000bb0:	609a      	str	r2, [r3, #8]
 8000bb2:	60da      	str	r2, [r3, #12]
 8000bb4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	613b      	str	r3, [r7, #16]
 8000bba:	4b65      	ldr	r3, [pc, #404]	; (8000d50 <MX_GPIO_Init+0x1b0>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbe:	4a64      	ldr	r2, [pc, #400]	; (8000d50 <MX_GPIO_Init+0x1b0>)
 8000bc0:	f043 0304 	orr.w	r3, r3, #4
 8000bc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc6:	4b62      	ldr	r3, [pc, #392]	; (8000d50 <MX_GPIO_Init+0x1b0>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bca:	f003 0304 	and.w	r3, r3, #4
 8000bce:	613b      	str	r3, [r7, #16]
 8000bd0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	60fb      	str	r3, [r7, #12]
 8000bd6:	4b5e      	ldr	r3, [pc, #376]	; (8000d50 <MX_GPIO_Init+0x1b0>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bda:	4a5d      	ldr	r2, [pc, #372]	; (8000d50 <MX_GPIO_Init+0x1b0>)
 8000bdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000be0:	6313      	str	r3, [r2, #48]	; 0x30
 8000be2:	4b5b      	ldr	r3, [pc, #364]	; (8000d50 <MX_GPIO_Init+0x1b0>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bea:	60fb      	str	r3, [r7, #12]
 8000bec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bee:	2300      	movs	r3, #0
 8000bf0:	60bb      	str	r3, [r7, #8]
 8000bf2:	4b57      	ldr	r3, [pc, #348]	; (8000d50 <MX_GPIO_Init+0x1b0>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf6:	4a56      	ldr	r2, [pc, #344]	; (8000d50 <MX_GPIO_Init+0x1b0>)
 8000bf8:	f043 0301 	orr.w	r3, r3, #1
 8000bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bfe:	4b54      	ldr	r3, [pc, #336]	; (8000d50 <MX_GPIO_Init+0x1b0>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	f003 0301 	and.w	r3, r3, #1
 8000c06:	60bb      	str	r3, [r7, #8]
 8000c08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	607b      	str	r3, [r7, #4]
 8000c0e:	4b50      	ldr	r3, [pc, #320]	; (8000d50 <MX_GPIO_Init+0x1b0>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c12:	4a4f      	ldr	r2, [pc, #316]	; (8000d50 <MX_GPIO_Init+0x1b0>)
 8000c14:	f043 0302 	orr.w	r3, r3, #2
 8000c18:	6313      	str	r3, [r2, #48]	; 0x30
 8000c1a:	4b4d      	ldr	r3, [pc, #308]	; (8000d50 <MX_GPIO_Init+0x1b0>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1e:	f003 0302 	and.w	r3, r3, #2
 8000c22:	607b      	str	r3, [r7, #4]
 8000c24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c26:	2300      	movs	r3, #0
 8000c28:	603b      	str	r3, [r7, #0]
 8000c2a:	4b49      	ldr	r3, [pc, #292]	; (8000d50 <MX_GPIO_Init+0x1b0>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2e:	4a48      	ldr	r2, [pc, #288]	; (8000d50 <MX_GPIO_Init+0x1b0>)
 8000c30:	f043 0308 	orr.w	r3, r3, #8
 8000c34:	6313      	str	r3, [r2, #48]	; 0x30
 8000c36:	4b46      	ldr	r3, [pc, #280]	; (8000d50 <MX_GPIO_Init+0x1b0>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3a:	f003 0308 	and.w	r3, r3, #8
 8000c3e:	603b      	str	r3, [r7, #0]
 8000c40:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, S0_Pin|S1_Pin|S2_Pin|GPIO_PIN_1
 8000c42:	2200      	movs	r2, #0
 8000c44:	f24e 11a2 	movw	r1, #57762	; 0xe1a2
 8000c48:	4842      	ldr	r0, [pc, #264]	; (8000d54 <MX_GPIO_Init+0x1b4>)
 8000c4a:	f001 fa03 	bl	8002054 <HAL_GPIO_WritePin>
                          |RESET_Pin|TXEN_Pin|SET_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DIO2_Pin|DIO1_Pin|DS_Pin|SQ_Pin
 8000c4e:	2200      	movs	r2, #0
 8000c50:	f24c 2130 	movw	r1, #49712	; 0xc230
 8000c54:	4840      	ldr	r0, [pc, #256]	; (8000d58 <MX_GPIO_Init+0x1b8>)
 8000c56:	f001 f9fd 	bl	8002054 <HAL_GPIO_WritePin>
                          |LED_RESET_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	2104      	movs	r1, #4
 8000c5e:	483f      	ldr	r0, [pc, #252]	; (8000d5c <MX_GPIO_Init+0x1bc>)
 8000c60:	f001 f9f8 	bl	8002054 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : S0_Pin S1_Pin S2_Pin PC1
                           RESET_Pin TXEN_Pin SET_Pin */
  GPIO_InitStruct.Pin = S0_Pin|S1_Pin|S2_Pin|GPIO_PIN_1
 8000c64:	f24e 13a2 	movw	r3, #57762	; 0xe1a2
 8000c68:	617b      	str	r3, [r7, #20]
                          |RESET_Pin|TXEN_Pin|SET_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c72:	2300      	movs	r3, #0
 8000c74:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c76:	f107 0314 	add.w	r3, r7, #20
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	4835      	ldr	r0, [pc, #212]	; (8000d54 <MX_GPIO_Init+0x1b4>)
 8000c7e:	f001 f865 	bl	8001d4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c82:	2301      	movs	r3, #1
 8000c84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c86:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c90:	f107 0314 	add.w	r3, r7, #20
 8000c94:	4619      	mov	r1, r3
 8000c96:	482f      	ldr	r0, [pc, #188]	; (8000d54 <MX_GPIO_Init+0x1b4>)
 8000c98:	f001 f858 	bl	8001d4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca0:	2302      	movs	r3, #2
 8000ca2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000cac:	2301      	movs	r3, #1
 8000cae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb0:	f107 0314 	add.w	r3, r7, #20
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	482a      	ldr	r0, [pc, #168]	; (8000d60 <MX_GPIO_Init+0x1c0>)
 8000cb8:	f001 f848 	bl	8001d4c <HAL_GPIO_Init>

  /*Configure GPIO pins : BUSY_Pin RXEN_Pin */
  GPIO_InitStruct.Pin = BUSY_Pin|RXEN_Pin;
 8000cbc:	2350      	movs	r3, #80	; 0x50
 8000cbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cc0:	2303      	movs	r3, #3
 8000cc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cc8:	f107 0314 	add.w	r3, r7, #20
 8000ccc:	4619      	mov	r1, r3
 8000cce:	4821      	ldr	r0, [pc, #132]	; (8000d54 <MX_GPIO_Init+0x1b4>)
 8000cd0:	f001 f83c 	bl	8001d4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000cd4:	2304      	movs	r3, #4
 8000cd6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cd8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000cdc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ce2:	f107 0314 	add.w	r3, r7, #20
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	481b      	ldr	r0, [pc, #108]	; (8000d58 <MX_GPIO_Init+0x1b8>)
 8000cea:	f001 f82f 	bl	8001d4c <HAL_GPIO_Init>

  /*Configure GPIO pins : DIO2_Pin DIO1_Pin DS_Pin SQ_Pin
                           LED_RESET_Pin */
  GPIO_InitStruct.Pin = DIO2_Pin|DIO1_Pin|DS_Pin|SQ_Pin
 8000cee:	f24c 2330 	movw	r3, #49712	; 0xc230
 8000cf2:	617b      	str	r3, [r7, #20]
                          |LED_RESET_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d00:	f107 0314 	add.w	r3, r7, #20
 8000d04:	4619      	mov	r1, r3
 8000d06:	4814      	ldr	r0, [pc, #80]	; (8000d58 <MX_GPIO_Init+0x1b8>)
 8000d08:	f001 f820 	bl	8001d4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000d0c:	2304      	movs	r3, #4
 8000d0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d10:	2301      	movs	r3, #1
 8000d12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d14:	2300      	movs	r3, #0
 8000d16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d1c:	f107 0314 	add.w	r3, r7, #20
 8000d20:	4619      	mov	r1, r3
 8000d22:	480e      	ldr	r0, [pc, #56]	; (8000d5c <MX_GPIO_Init+0x1bc>)
 8000d24:	f001 f812 	bl	8001d4c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000d28:	2200      	movs	r2, #0
 8000d2a:	2105      	movs	r1, #5
 8000d2c:	2006      	movs	r0, #6
 8000d2e:	f000 ffd6 	bl	8001cde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000d32:	2006      	movs	r0, #6
 8000d34:	f000 ffef 	bl	8001d16 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8000d38:	2200      	movs	r2, #0
 8000d3a:	2105      	movs	r1, #5
 8000d3c:	2008      	movs	r0, #8
 8000d3e:	f000 ffce 	bl	8001cde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000d42:	2008      	movs	r0, #8
 8000d44:	f000 ffe7 	bl	8001d16 <HAL_NVIC_EnableIRQ>

}
 8000d48:	bf00      	nop
 8000d4a:	3728      	adds	r7, #40	; 0x28
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	40023800 	.word	0x40023800
 8000d54:	40020800 	.word	0x40020800
 8000d58:	40020400 	.word	0x40020400
 8000d5c:	40020c00 	.word	0x40020c00
 8000d60:	40020000 	.word	0x40020000

08000d64 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000d6c:	2001      	movs	r0, #1
 8000d6e:	f003 f837 	bl	8003de0 <osDelay>
 8000d72:	e7fb      	b.n	8000d6c <StartDefaultTask+0x8>

08000d74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d78:	b672      	cpsid	i
}
 8000d7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d7c:	e7fe      	b.n	8000d7c <Error_Handler+0x8>
	...

08000d80 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d86:	2300      	movs	r3, #0
 8000d88:	607b      	str	r3, [r7, #4]
 8000d8a:	4b12      	ldr	r3, [pc, #72]	; (8000dd4 <HAL_MspInit+0x54>)
 8000d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d8e:	4a11      	ldr	r2, [pc, #68]	; (8000dd4 <HAL_MspInit+0x54>)
 8000d90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d94:	6453      	str	r3, [r2, #68]	; 0x44
 8000d96:	4b0f      	ldr	r3, [pc, #60]	; (8000dd4 <HAL_MspInit+0x54>)
 8000d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d9e:	607b      	str	r3, [r7, #4]
 8000da0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000da2:	2300      	movs	r3, #0
 8000da4:	603b      	str	r3, [r7, #0]
 8000da6:	4b0b      	ldr	r3, [pc, #44]	; (8000dd4 <HAL_MspInit+0x54>)
 8000da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000daa:	4a0a      	ldr	r2, [pc, #40]	; (8000dd4 <HAL_MspInit+0x54>)
 8000dac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000db0:	6413      	str	r3, [r2, #64]	; 0x40
 8000db2:	4b08      	ldr	r3, [pc, #32]	; (8000dd4 <HAL_MspInit+0x54>)
 8000db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dba:	603b      	str	r3, [r7, #0]
 8000dbc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	210f      	movs	r1, #15
 8000dc2:	f06f 0001 	mvn.w	r0, #1
 8000dc6:	f000 ff8a 	bl	8001cde <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dca:	bf00      	nop
 8000dcc:	3708      	adds	r7, #8
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	40023800 	.word	0x40023800

08000dd8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b08a      	sub	sp, #40	; 0x28
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de0:	f107 0314 	add.w	r3, r7, #20
 8000de4:	2200      	movs	r2, #0
 8000de6:	601a      	str	r2, [r3, #0]
 8000de8:	605a      	str	r2, [r3, #4]
 8000dea:	609a      	str	r2, [r3, #8]
 8000dec:	60da      	str	r2, [r3, #12]
 8000dee:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a17      	ldr	r2, [pc, #92]	; (8000e54 <HAL_ADC_MspInit+0x7c>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d127      	bne.n	8000e4a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	613b      	str	r3, [r7, #16]
 8000dfe:	4b16      	ldr	r3, [pc, #88]	; (8000e58 <HAL_ADC_MspInit+0x80>)
 8000e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e02:	4a15      	ldr	r2, [pc, #84]	; (8000e58 <HAL_ADC_MspInit+0x80>)
 8000e04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e08:	6453      	str	r3, [r2, #68]	; 0x44
 8000e0a:	4b13      	ldr	r3, [pc, #76]	; (8000e58 <HAL_ADC_MspInit+0x80>)
 8000e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e12:	613b      	str	r3, [r7, #16]
 8000e14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e16:	2300      	movs	r3, #0
 8000e18:	60fb      	str	r3, [r7, #12]
 8000e1a:	4b0f      	ldr	r3, [pc, #60]	; (8000e58 <HAL_ADC_MspInit+0x80>)
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1e:	4a0e      	ldr	r2, [pc, #56]	; (8000e58 <HAL_ADC_MspInit+0x80>)
 8000e20:	f043 0301 	orr.w	r3, r3, #1
 8000e24:	6313      	str	r3, [r2, #48]	; 0x30
 8000e26:	4b0c      	ldr	r3, [pc, #48]	; (8000e58 <HAL_ADC_MspInit+0x80>)
 8000e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2a:	f003 0301 	and.w	r3, r3, #1
 8000e2e:	60fb      	str	r3, [r7, #12]
 8000e30:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000e32:	2302      	movs	r3, #2
 8000e34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e36:	2303      	movs	r3, #3
 8000e38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e3e:	f107 0314 	add.w	r3, r7, #20
 8000e42:	4619      	mov	r1, r3
 8000e44:	4805      	ldr	r0, [pc, #20]	; (8000e5c <HAL_ADC_MspInit+0x84>)
 8000e46:	f000 ff81 	bl	8001d4c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e4a:	bf00      	nop
 8000e4c:	3728      	adds	r7, #40	; 0x28
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	40012000 	.word	0x40012000
 8000e58:	40023800 	.word	0x40023800
 8000e5c:	40020000 	.word	0x40020000

08000e60 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b08e      	sub	sp, #56	; 0x38
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	601a      	str	r2, [r3, #0]
 8000e70:	605a      	str	r2, [r3, #4]
 8000e72:	609a      	str	r2, [r3, #8]
 8000e74:	60da      	str	r2, [r3, #12]
 8000e76:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a64      	ldr	r2, [pc, #400]	; (8001010 <HAL_I2C_MspInit+0x1b0>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d12d      	bne.n	8000ede <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e82:	2300      	movs	r3, #0
 8000e84:	623b      	str	r3, [r7, #32]
 8000e86:	4b63      	ldr	r3, [pc, #396]	; (8001014 <HAL_I2C_MspInit+0x1b4>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8a:	4a62      	ldr	r2, [pc, #392]	; (8001014 <HAL_I2C_MspInit+0x1b4>)
 8000e8c:	f043 0302 	orr.w	r3, r3, #2
 8000e90:	6313      	str	r3, [r2, #48]	; 0x30
 8000e92:	4b60      	ldr	r3, [pc, #384]	; (8001014 <HAL_I2C_MspInit+0x1b4>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e96:	f003 0302 	and.w	r3, r3, #2
 8000e9a:	623b      	str	r3, [r7, #32]
 8000e9c:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000e9e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000ea2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ea4:	2312      	movs	r3, #18
 8000ea6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eac:	2303      	movs	r3, #3
 8000eae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000eb0:	2304      	movs	r3, #4
 8000eb2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eb8:	4619      	mov	r1, r3
 8000eba:	4857      	ldr	r0, [pc, #348]	; (8001018 <HAL_I2C_MspInit+0x1b8>)
 8000ebc:	f000 ff46 	bl	8001d4c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	61fb      	str	r3, [r7, #28]
 8000ec4:	4b53      	ldr	r3, [pc, #332]	; (8001014 <HAL_I2C_MspInit+0x1b4>)
 8000ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec8:	4a52      	ldr	r2, [pc, #328]	; (8001014 <HAL_I2C_MspInit+0x1b4>)
 8000eca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ece:	6413      	str	r3, [r2, #64]	; 0x40
 8000ed0:	4b50      	ldr	r3, [pc, #320]	; (8001014 <HAL_I2C_MspInit+0x1b4>)
 8000ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ed8:	61fb      	str	r3, [r7, #28]
 8000eda:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8000edc:	e093      	b.n	8001006 <HAL_I2C_MspInit+0x1a6>
  else if(hi2c->Instance==I2C2)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	4a4e      	ldr	r2, [pc, #312]	; (800101c <HAL_I2C_MspInit+0x1bc>)
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	d13d      	bne.n	8000f64 <HAL_I2C_MspInit+0x104>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ee8:	2300      	movs	r3, #0
 8000eea:	61bb      	str	r3, [r7, #24]
 8000eec:	4b49      	ldr	r3, [pc, #292]	; (8001014 <HAL_I2C_MspInit+0x1b4>)
 8000eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef0:	4a48      	ldr	r2, [pc, #288]	; (8001014 <HAL_I2C_MspInit+0x1b4>)
 8000ef2:	f043 0302 	orr.w	r3, r3, #2
 8000ef6:	6313      	str	r3, [r2, #48]	; 0x30
 8000ef8:	4b46      	ldr	r3, [pc, #280]	; (8001014 <HAL_I2C_MspInit+0x1b4>)
 8000efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efc:	f003 0302 	and.w	r3, r3, #2
 8000f00:	61bb      	str	r3, [r7, #24]
 8000f02:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000f04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f08:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f0a:	2312      	movs	r3, #18
 8000f0c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f12:	2303      	movs	r3, #3
 8000f14:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000f16:	2304      	movs	r3, #4
 8000f18:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f1e:	4619      	mov	r1, r3
 8000f20:	483d      	ldr	r0, [pc, #244]	; (8001018 <HAL_I2C_MspInit+0x1b8>)
 8000f22:	f000 ff13 	bl	8001d4c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000f26:	2308      	movs	r3, #8
 8000f28:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f2a:	2312      	movs	r3, #18
 8000f2c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f32:	2303      	movs	r3, #3
 8000f34:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8000f36:	2309      	movs	r3, #9
 8000f38:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f3e:	4619      	mov	r1, r3
 8000f40:	4835      	ldr	r0, [pc, #212]	; (8001018 <HAL_I2C_MspInit+0x1b8>)
 8000f42:	f000 ff03 	bl	8001d4c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000f46:	2300      	movs	r3, #0
 8000f48:	617b      	str	r3, [r7, #20]
 8000f4a:	4b32      	ldr	r3, [pc, #200]	; (8001014 <HAL_I2C_MspInit+0x1b4>)
 8000f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4e:	4a31      	ldr	r2, [pc, #196]	; (8001014 <HAL_I2C_MspInit+0x1b4>)
 8000f50:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f54:	6413      	str	r3, [r2, #64]	; 0x40
 8000f56:	4b2f      	ldr	r3, [pc, #188]	; (8001014 <HAL_I2C_MspInit+0x1b4>)
 8000f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f5e:	617b      	str	r3, [r7, #20]
 8000f60:	697b      	ldr	r3, [r7, #20]
}
 8000f62:	e050      	b.n	8001006 <HAL_I2C_MspInit+0x1a6>
  else if(hi2c->Instance==I2C3)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a2d      	ldr	r2, [pc, #180]	; (8001020 <HAL_I2C_MspInit+0x1c0>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d14b      	bne.n	8001006 <HAL_I2C_MspInit+0x1a6>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f6e:	2300      	movs	r3, #0
 8000f70:	613b      	str	r3, [r7, #16]
 8000f72:	4b28      	ldr	r3, [pc, #160]	; (8001014 <HAL_I2C_MspInit+0x1b4>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f76:	4a27      	ldr	r2, [pc, #156]	; (8001014 <HAL_I2C_MspInit+0x1b4>)
 8000f78:	f043 0304 	orr.w	r3, r3, #4
 8000f7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f7e:	4b25      	ldr	r3, [pc, #148]	; (8001014 <HAL_I2C_MspInit+0x1b4>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f82:	f003 0304 	and.w	r3, r3, #4
 8000f86:	613b      	str	r3, [r7, #16]
 8000f88:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	60fb      	str	r3, [r7, #12]
 8000f8e:	4b21      	ldr	r3, [pc, #132]	; (8001014 <HAL_I2C_MspInit+0x1b4>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f92:	4a20      	ldr	r2, [pc, #128]	; (8001014 <HAL_I2C_MspInit+0x1b4>)
 8000f94:	f043 0301 	orr.w	r3, r3, #1
 8000f98:	6313      	str	r3, [r2, #48]	; 0x30
 8000f9a:	4b1e      	ldr	r3, [pc, #120]	; (8001014 <HAL_I2C_MspInit+0x1b4>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9e:	f003 0301 	and.w	r3, r3, #1
 8000fa2:	60fb      	str	r3, [r7, #12]
 8000fa4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000fa6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000faa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fac:	2312      	movs	r3, #18
 8000fae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fb4:	2303      	movs	r3, #3
 8000fb6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000fb8:	2304      	movs	r3, #4
 8000fba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	4818      	ldr	r0, [pc, #96]	; (8001024 <HAL_I2C_MspInit+0x1c4>)
 8000fc4:	f000 fec2 	bl	8001d4c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000fc8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fcc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fce:	2312      	movs	r3, #18
 8000fd0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fd6:	2303      	movs	r3, #3
 8000fd8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000fda:	2304      	movs	r3, #4
 8000fdc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	4810      	ldr	r0, [pc, #64]	; (8001028 <HAL_I2C_MspInit+0x1c8>)
 8000fe6:	f000 feb1 	bl	8001d4c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000fea:	2300      	movs	r3, #0
 8000fec:	60bb      	str	r3, [r7, #8]
 8000fee:	4b09      	ldr	r3, [pc, #36]	; (8001014 <HAL_I2C_MspInit+0x1b4>)
 8000ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff2:	4a08      	ldr	r2, [pc, #32]	; (8001014 <HAL_I2C_MspInit+0x1b4>)
 8000ff4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000ff8:	6413      	str	r3, [r2, #64]	; 0x40
 8000ffa:	4b06      	ldr	r3, [pc, #24]	; (8001014 <HAL_I2C_MspInit+0x1b4>)
 8000ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001002:	60bb      	str	r3, [r7, #8]
 8001004:	68bb      	ldr	r3, [r7, #8]
}
 8001006:	bf00      	nop
 8001008:	3738      	adds	r7, #56	; 0x38
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	40005400 	.word	0x40005400
 8001014:	40023800 	.word	0x40023800
 8001018:	40020400 	.word	0x40020400
 800101c:	40005800 	.word	0x40005800
 8001020:	40005c00 	.word	0x40005c00
 8001024:	40020800 	.word	0x40020800
 8001028:	40020000 	.word	0x40020000

0800102c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b090      	sub	sp, #64	; 0x40
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001034:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001038:	2200      	movs	r2, #0
 800103a:	601a      	str	r2, [r3, #0]
 800103c:	605a      	str	r2, [r3, #4]
 800103e:	609a      	str	r2, [r3, #8]
 8001040:	60da      	str	r2, [r3, #12]
 8001042:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a6a      	ldr	r2, [pc, #424]	; (80011f4 <HAL_SPI_MspInit+0x1c8>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d12c      	bne.n	80010a8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800104e:	2300      	movs	r3, #0
 8001050:	62bb      	str	r3, [r7, #40]	; 0x28
 8001052:	4b69      	ldr	r3, [pc, #420]	; (80011f8 <HAL_SPI_MspInit+0x1cc>)
 8001054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001056:	4a68      	ldr	r2, [pc, #416]	; (80011f8 <HAL_SPI_MspInit+0x1cc>)
 8001058:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800105c:	6453      	str	r3, [r2, #68]	; 0x44
 800105e:	4b66      	ldr	r3, [pc, #408]	; (80011f8 <HAL_SPI_MspInit+0x1cc>)
 8001060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001062:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001066:	62bb      	str	r3, [r7, #40]	; 0x28
 8001068:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800106a:	2300      	movs	r3, #0
 800106c:	627b      	str	r3, [r7, #36]	; 0x24
 800106e:	4b62      	ldr	r3, [pc, #392]	; (80011f8 <HAL_SPI_MspInit+0x1cc>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001072:	4a61      	ldr	r2, [pc, #388]	; (80011f8 <HAL_SPI_MspInit+0x1cc>)
 8001074:	f043 0301 	orr.w	r3, r3, #1
 8001078:	6313      	str	r3, [r2, #48]	; 0x30
 800107a:	4b5f      	ldr	r3, [pc, #380]	; (80011f8 <HAL_SPI_MspInit+0x1cc>)
 800107c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107e:	f003 0301 	and.w	r3, r3, #1
 8001082:	627b      	str	r3, [r7, #36]	; 0x24
 8001084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001086:	23f0      	movs	r3, #240	; 0xf0
 8001088:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800108a:	2302      	movs	r3, #2
 800108c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108e:	2300      	movs	r3, #0
 8001090:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001092:	2303      	movs	r3, #3
 8001094:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001096:	2305      	movs	r3, #5
 8001098:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800109a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800109e:	4619      	mov	r1, r3
 80010a0:	4856      	ldr	r0, [pc, #344]	; (80011fc <HAL_SPI_MspInit+0x1d0>)
 80010a2:	f000 fe53 	bl	8001d4c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80010a6:	e0a1      	b.n	80011ec <HAL_SPI_MspInit+0x1c0>
  else if(hspi->Instance==SPI2)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a54      	ldr	r2, [pc, #336]	; (8001200 <HAL_SPI_MspInit+0x1d4>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d14b      	bne.n	800114a <HAL_SPI_MspInit+0x11e>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80010b2:	2300      	movs	r3, #0
 80010b4:	623b      	str	r3, [r7, #32]
 80010b6:	4b50      	ldr	r3, [pc, #320]	; (80011f8 <HAL_SPI_MspInit+0x1cc>)
 80010b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ba:	4a4f      	ldr	r2, [pc, #316]	; (80011f8 <HAL_SPI_MspInit+0x1cc>)
 80010bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010c0:	6413      	str	r3, [r2, #64]	; 0x40
 80010c2:	4b4d      	ldr	r3, [pc, #308]	; (80011f8 <HAL_SPI_MspInit+0x1cc>)
 80010c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010ca:	623b      	str	r3, [r7, #32]
 80010cc:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010ce:	2300      	movs	r3, #0
 80010d0:	61fb      	str	r3, [r7, #28]
 80010d2:	4b49      	ldr	r3, [pc, #292]	; (80011f8 <HAL_SPI_MspInit+0x1cc>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d6:	4a48      	ldr	r2, [pc, #288]	; (80011f8 <HAL_SPI_MspInit+0x1cc>)
 80010d8:	f043 0304 	orr.w	r3, r3, #4
 80010dc:	6313      	str	r3, [r2, #48]	; 0x30
 80010de:	4b46      	ldr	r3, [pc, #280]	; (80011f8 <HAL_SPI_MspInit+0x1cc>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e2:	f003 0304 	and.w	r3, r3, #4
 80010e6:	61fb      	str	r3, [r7, #28]
 80010e8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ea:	2300      	movs	r3, #0
 80010ec:	61bb      	str	r3, [r7, #24]
 80010ee:	4b42      	ldr	r3, [pc, #264]	; (80011f8 <HAL_SPI_MspInit+0x1cc>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f2:	4a41      	ldr	r2, [pc, #260]	; (80011f8 <HAL_SPI_MspInit+0x1cc>)
 80010f4:	f043 0302 	orr.w	r3, r3, #2
 80010f8:	6313      	str	r3, [r2, #48]	; 0x30
 80010fa:	4b3f      	ldr	r3, [pc, #252]	; (80011f8 <HAL_SPI_MspInit+0x1cc>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fe:	f003 0302 	and.w	r3, r3, #2
 8001102:	61bb      	str	r3, [r7, #24]
 8001104:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001106:	230c      	movs	r3, #12
 8001108:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800110a:	2302      	movs	r3, #2
 800110c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110e:	2300      	movs	r3, #0
 8001110:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001112:	2303      	movs	r3, #3
 8001114:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001116:	2305      	movs	r3, #5
 8001118:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800111a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800111e:	4619      	mov	r1, r3
 8001120:	4838      	ldr	r0, [pc, #224]	; (8001204 <HAL_SPI_MspInit+0x1d8>)
 8001122:	f000 fe13 	bl	8001d4c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001126:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800112a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800112c:	2302      	movs	r3, #2
 800112e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001130:	2300      	movs	r3, #0
 8001132:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001134:	2303      	movs	r3, #3
 8001136:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001138:	2305      	movs	r3, #5
 800113a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800113c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001140:	4619      	mov	r1, r3
 8001142:	4831      	ldr	r0, [pc, #196]	; (8001208 <HAL_SPI_MspInit+0x1dc>)
 8001144:	f000 fe02 	bl	8001d4c <HAL_GPIO_Init>
}
 8001148:	e050      	b.n	80011ec <HAL_SPI_MspInit+0x1c0>
  else if(hspi->Instance==SPI3)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4a2f      	ldr	r2, [pc, #188]	; (800120c <HAL_SPI_MspInit+0x1e0>)
 8001150:	4293      	cmp	r3, r2
 8001152:	d14b      	bne.n	80011ec <HAL_SPI_MspInit+0x1c0>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001154:	2300      	movs	r3, #0
 8001156:	617b      	str	r3, [r7, #20]
 8001158:	4b27      	ldr	r3, [pc, #156]	; (80011f8 <HAL_SPI_MspInit+0x1cc>)
 800115a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115c:	4a26      	ldr	r2, [pc, #152]	; (80011f8 <HAL_SPI_MspInit+0x1cc>)
 800115e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001162:	6413      	str	r3, [r2, #64]	; 0x40
 8001164:	4b24      	ldr	r3, [pc, #144]	; (80011f8 <HAL_SPI_MspInit+0x1cc>)
 8001166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001168:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800116c:	617b      	str	r3, [r7, #20]
 800116e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001170:	2300      	movs	r3, #0
 8001172:	613b      	str	r3, [r7, #16]
 8001174:	4b20      	ldr	r3, [pc, #128]	; (80011f8 <HAL_SPI_MspInit+0x1cc>)
 8001176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001178:	4a1f      	ldr	r2, [pc, #124]	; (80011f8 <HAL_SPI_MspInit+0x1cc>)
 800117a:	f043 0301 	orr.w	r3, r3, #1
 800117e:	6313      	str	r3, [r2, #48]	; 0x30
 8001180:	4b1d      	ldr	r3, [pc, #116]	; (80011f8 <HAL_SPI_MspInit+0x1cc>)
 8001182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001184:	f003 0301 	and.w	r3, r3, #1
 8001188:	613b      	str	r3, [r7, #16]
 800118a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800118c:	2300      	movs	r3, #0
 800118e:	60fb      	str	r3, [r7, #12]
 8001190:	4b19      	ldr	r3, [pc, #100]	; (80011f8 <HAL_SPI_MspInit+0x1cc>)
 8001192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001194:	4a18      	ldr	r2, [pc, #96]	; (80011f8 <HAL_SPI_MspInit+0x1cc>)
 8001196:	f043 0304 	orr.w	r3, r3, #4
 800119a:	6313      	str	r3, [r2, #48]	; 0x30
 800119c:	4b16      	ldr	r3, [pc, #88]	; (80011f8 <HAL_SPI_MspInit+0x1cc>)
 800119e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a0:	f003 0304 	and.w	r3, r3, #4
 80011a4:	60fb      	str	r3, [r7, #12]
 80011a6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80011a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80011ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ae:	2302      	movs	r3, #2
 80011b0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b2:	2300      	movs	r3, #0
 80011b4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011b6:	2303      	movs	r3, #3
 80011b8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80011ba:	2306      	movs	r3, #6
 80011bc:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011c2:	4619      	mov	r1, r3
 80011c4:	480d      	ldr	r0, [pc, #52]	; (80011fc <HAL_SPI_MspInit+0x1d0>)
 80011c6:	f000 fdc1 	bl	8001d4c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 80011ca:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80011ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d0:	2302      	movs	r3, #2
 80011d2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d4:	2300      	movs	r3, #0
 80011d6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011d8:	2303      	movs	r3, #3
 80011da:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80011dc:	2306      	movs	r3, #6
 80011de:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011e4:	4619      	mov	r1, r3
 80011e6:	4807      	ldr	r0, [pc, #28]	; (8001204 <HAL_SPI_MspInit+0x1d8>)
 80011e8:	f000 fdb0 	bl	8001d4c <HAL_GPIO_Init>
}
 80011ec:	bf00      	nop
 80011ee:	3740      	adds	r7, #64	; 0x40
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	40013000 	.word	0x40013000
 80011f8:	40023800 	.word	0x40023800
 80011fc:	40020000 	.word	0x40020000
 8001200:	40003800 	.word	0x40003800
 8001204:	40020800 	.word	0x40020800
 8001208:	40020400 	.word	0x40020400
 800120c:	40003c00 	.word	0x40003c00

08001210 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001210:	b480      	push	{r7}
 8001212:	b085      	sub	sp, #20
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a15      	ldr	r2, [pc, #84]	; (8001274 <HAL_TIM_PWM_MspInit+0x64>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d10e      	bne.n	8001240 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001222:	2300      	movs	r3, #0
 8001224:	60fb      	str	r3, [r7, #12]
 8001226:	4b14      	ldr	r3, [pc, #80]	; (8001278 <HAL_TIM_PWM_MspInit+0x68>)
 8001228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122a:	4a13      	ldr	r2, [pc, #76]	; (8001278 <HAL_TIM_PWM_MspInit+0x68>)
 800122c:	f043 0302 	orr.w	r3, r3, #2
 8001230:	6413      	str	r3, [r2, #64]	; 0x40
 8001232:	4b11      	ldr	r3, [pc, #68]	; (8001278 <HAL_TIM_PWM_MspInit+0x68>)
 8001234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001236:	f003 0302 	and.w	r3, r3, #2
 800123a:	60fb      	str	r3, [r7, #12]
 800123c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800123e:	e012      	b.n	8001266 <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM4)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a0d      	ldr	r2, [pc, #52]	; (800127c <HAL_TIM_PWM_MspInit+0x6c>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d10d      	bne.n	8001266 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800124a:	2300      	movs	r3, #0
 800124c:	60bb      	str	r3, [r7, #8]
 800124e:	4b0a      	ldr	r3, [pc, #40]	; (8001278 <HAL_TIM_PWM_MspInit+0x68>)
 8001250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001252:	4a09      	ldr	r2, [pc, #36]	; (8001278 <HAL_TIM_PWM_MspInit+0x68>)
 8001254:	f043 0304 	orr.w	r3, r3, #4
 8001258:	6413      	str	r3, [r2, #64]	; 0x40
 800125a:	4b07      	ldr	r3, [pc, #28]	; (8001278 <HAL_TIM_PWM_MspInit+0x68>)
 800125c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800125e:	f003 0304 	and.w	r3, r3, #4
 8001262:	60bb      	str	r3, [r7, #8]
 8001264:	68bb      	ldr	r3, [r7, #8]
}
 8001266:	bf00      	nop
 8001268:	3714      	adds	r7, #20
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop
 8001274:	40000400 	.word	0x40000400
 8001278:	40023800 	.word	0x40023800
 800127c:	40000800 	.word	0x40000800

08001280 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b08a      	sub	sp, #40	; 0x28
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001288:	f107 0314 	add.w	r3, r7, #20
 800128c:	2200      	movs	r2, #0
 800128e:	601a      	str	r2, [r3, #0]
 8001290:	605a      	str	r2, [r3, #4]
 8001292:	609a      	str	r2, [r3, #8]
 8001294:	60da      	str	r2, [r3, #12]
 8001296:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a24      	ldr	r2, [pc, #144]	; (8001330 <HAL_TIM_MspPostInit+0xb0>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d11e      	bne.n	80012e0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012a2:	2300      	movs	r3, #0
 80012a4:	613b      	str	r3, [r7, #16]
 80012a6:	4b23      	ldr	r3, [pc, #140]	; (8001334 <HAL_TIM_MspPostInit+0xb4>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012aa:	4a22      	ldr	r2, [pc, #136]	; (8001334 <HAL_TIM_MspPostInit+0xb4>)
 80012ac:	f043 0302 	orr.w	r3, r3, #2
 80012b0:	6313      	str	r3, [r2, #48]	; 0x30
 80012b2:	4b20      	ldr	r3, [pc, #128]	; (8001334 <HAL_TIM_MspPostInit+0xb4>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b6:	f003 0302 	and.w	r3, r3, #2
 80012ba:	613b      	str	r3, [r7, #16]
 80012bc:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80012be:	2303      	movs	r3, #3
 80012c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c2:	2302      	movs	r3, #2
 80012c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c6:	2300      	movs	r3, #0
 80012c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ca:	2300      	movs	r3, #0
 80012cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80012ce:	2302      	movs	r3, #2
 80012d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012d2:	f107 0314 	add.w	r3, r7, #20
 80012d6:	4619      	mov	r1, r3
 80012d8:	4817      	ldr	r0, [pc, #92]	; (8001338 <HAL_TIM_MspPostInit+0xb8>)
 80012da:	f000 fd37 	bl	8001d4c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80012de:	e022      	b.n	8001326 <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM4)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a15      	ldr	r2, [pc, #84]	; (800133c <HAL_TIM_MspPostInit+0xbc>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d11d      	bne.n	8001326 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ea:	2300      	movs	r3, #0
 80012ec:	60fb      	str	r3, [r7, #12]
 80012ee:	4b11      	ldr	r3, [pc, #68]	; (8001334 <HAL_TIM_MspPostInit+0xb4>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f2:	4a10      	ldr	r2, [pc, #64]	; (8001334 <HAL_TIM_MspPostInit+0xb4>)
 80012f4:	f043 0302 	orr.w	r3, r3, #2
 80012f8:	6313      	str	r3, [r2, #48]	; 0x30
 80012fa:	4b0e      	ldr	r3, [pc, #56]	; (8001334 <HAL_TIM_MspPostInit+0xb4>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fe:	f003 0302 	and.w	r3, r3, #2
 8001302:	60fb      	str	r3, [r7, #12]
 8001304:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001306:	2340      	movs	r3, #64	; 0x40
 8001308:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800130a:	2302      	movs	r3, #2
 800130c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130e:	2300      	movs	r3, #0
 8001310:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001312:	2300      	movs	r3, #0
 8001314:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001316:	2302      	movs	r3, #2
 8001318:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800131a:	f107 0314 	add.w	r3, r7, #20
 800131e:	4619      	mov	r1, r3
 8001320:	4805      	ldr	r0, [pc, #20]	; (8001338 <HAL_TIM_MspPostInit+0xb8>)
 8001322:	f000 fd13 	bl	8001d4c <HAL_GPIO_Init>
}
 8001326:	bf00      	nop
 8001328:	3728      	adds	r7, #40	; 0x28
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	40000400 	.word	0x40000400
 8001334:	40023800 	.word	0x40023800
 8001338:	40020400 	.word	0x40020400
 800133c:	40000800 	.word	0x40000800

08001340 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b08e      	sub	sp, #56	; 0x38
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001348:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800134c:	2200      	movs	r2, #0
 800134e:	601a      	str	r2, [r3, #0]
 8001350:	605a      	str	r2, [r3, #4]
 8001352:	609a      	str	r2, [r3, #8]
 8001354:	60da      	str	r2, [r3, #12]
 8001356:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a4c      	ldr	r2, [pc, #304]	; (8001490 <HAL_UART_MspInit+0x150>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d12d      	bne.n	80013be <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001362:	2300      	movs	r3, #0
 8001364:	623b      	str	r3, [r7, #32]
 8001366:	4b4b      	ldr	r3, [pc, #300]	; (8001494 <HAL_UART_MspInit+0x154>)
 8001368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800136a:	4a4a      	ldr	r2, [pc, #296]	; (8001494 <HAL_UART_MspInit+0x154>)
 800136c:	f043 0310 	orr.w	r3, r3, #16
 8001370:	6453      	str	r3, [r2, #68]	; 0x44
 8001372:	4b48      	ldr	r3, [pc, #288]	; (8001494 <HAL_UART_MspInit+0x154>)
 8001374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001376:	f003 0310 	and.w	r3, r3, #16
 800137a:	623b      	str	r3, [r7, #32]
 800137c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800137e:	2300      	movs	r3, #0
 8001380:	61fb      	str	r3, [r7, #28]
 8001382:	4b44      	ldr	r3, [pc, #272]	; (8001494 <HAL_UART_MspInit+0x154>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001386:	4a43      	ldr	r2, [pc, #268]	; (8001494 <HAL_UART_MspInit+0x154>)
 8001388:	f043 0301 	orr.w	r3, r3, #1
 800138c:	6313      	str	r3, [r2, #48]	; 0x30
 800138e:	4b41      	ldr	r3, [pc, #260]	; (8001494 <HAL_UART_MspInit+0x154>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001392:	f003 0301 	and.w	r3, r3, #1
 8001396:	61fb      	str	r3, [r7, #28]
 8001398:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800139a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800139e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a0:	2302      	movs	r3, #2
 80013a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a4:	2300      	movs	r3, #0
 80013a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013a8:	2303      	movs	r3, #3
 80013aa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80013ac:	2307      	movs	r3, #7
 80013ae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013b4:	4619      	mov	r1, r3
 80013b6:	4838      	ldr	r0, [pc, #224]	; (8001498 <HAL_UART_MspInit+0x158>)
 80013b8:	f000 fcc8 	bl	8001d4c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80013bc:	e063      	b.n	8001486 <HAL_UART_MspInit+0x146>
  else if(huart->Instance==USART2)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4a36      	ldr	r2, [pc, #216]	; (800149c <HAL_UART_MspInit+0x15c>)
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d12c      	bne.n	8001422 <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART2_CLK_ENABLE();
 80013c8:	2300      	movs	r3, #0
 80013ca:	61bb      	str	r3, [r7, #24]
 80013cc:	4b31      	ldr	r3, [pc, #196]	; (8001494 <HAL_UART_MspInit+0x154>)
 80013ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d0:	4a30      	ldr	r2, [pc, #192]	; (8001494 <HAL_UART_MspInit+0x154>)
 80013d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013d6:	6413      	str	r3, [r2, #64]	; 0x40
 80013d8:	4b2e      	ldr	r3, [pc, #184]	; (8001494 <HAL_UART_MspInit+0x154>)
 80013da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013e0:	61bb      	str	r3, [r7, #24]
 80013e2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013e4:	2300      	movs	r3, #0
 80013e6:	617b      	str	r3, [r7, #20]
 80013e8:	4b2a      	ldr	r3, [pc, #168]	; (8001494 <HAL_UART_MspInit+0x154>)
 80013ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ec:	4a29      	ldr	r2, [pc, #164]	; (8001494 <HAL_UART_MspInit+0x154>)
 80013ee:	f043 0301 	orr.w	r3, r3, #1
 80013f2:	6313      	str	r3, [r2, #48]	; 0x30
 80013f4:	4b27      	ldr	r3, [pc, #156]	; (8001494 <HAL_UART_MspInit+0x154>)
 80013f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f8:	f003 0301 	and.w	r3, r3, #1
 80013fc:	617b      	str	r3, [r7, #20]
 80013fe:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001400:	230c      	movs	r3, #12
 8001402:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001404:	2302      	movs	r3, #2
 8001406:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001408:	2300      	movs	r3, #0
 800140a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800140c:	2303      	movs	r3, #3
 800140e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001410:	2307      	movs	r3, #7
 8001412:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001414:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001418:	4619      	mov	r1, r3
 800141a:	481f      	ldr	r0, [pc, #124]	; (8001498 <HAL_UART_MspInit+0x158>)
 800141c:	f000 fc96 	bl	8001d4c <HAL_GPIO_Init>
}
 8001420:	e031      	b.n	8001486 <HAL_UART_MspInit+0x146>
  else if(huart->Instance==USART6)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4a1e      	ldr	r2, [pc, #120]	; (80014a0 <HAL_UART_MspInit+0x160>)
 8001428:	4293      	cmp	r3, r2
 800142a:	d12c      	bne.n	8001486 <HAL_UART_MspInit+0x146>
    __HAL_RCC_USART6_CLK_ENABLE();
 800142c:	2300      	movs	r3, #0
 800142e:	613b      	str	r3, [r7, #16]
 8001430:	4b18      	ldr	r3, [pc, #96]	; (8001494 <HAL_UART_MspInit+0x154>)
 8001432:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001434:	4a17      	ldr	r2, [pc, #92]	; (8001494 <HAL_UART_MspInit+0x154>)
 8001436:	f043 0320 	orr.w	r3, r3, #32
 800143a:	6453      	str	r3, [r2, #68]	; 0x44
 800143c:	4b15      	ldr	r3, [pc, #84]	; (8001494 <HAL_UART_MspInit+0x154>)
 800143e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001440:	f003 0320 	and.w	r3, r3, #32
 8001444:	613b      	str	r3, [r7, #16]
 8001446:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001448:	2300      	movs	r3, #0
 800144a:	60fb      	str	r3, [r7, #12]
 800144c:	4b11      	ldr	r3, [pc, #68]	; (8001494 <HAL_UART_MspInit+0x154>)
 800144e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001450:	4a10      	ldr	r2, [pc, #64]	; (8001494 <HAL_UART_MspInit+0x154>)
 8001452:	f043 0301 	orr.w	r3, r3, #1
 8001456:	6313      	str	r3, [r2, #48]	; 0x30
 8001458:	4b0e      	ldr	r3, [pc, #56]	; (8001494 <HAL_UART_MspInit+0x154>)
 800145a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145c:	f003 0301 	and.w	r3, r3, #1
 8001460:	60fb      	str	r3, [r7, #12]
 8001462:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001464:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001468:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800146a:	2302      	movs	r3, #2
 800146c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146e:	2300      	movs	r3, #0
 8001470:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001472:	2303      	movs	r3, #3
 8001474:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001476:	2308      	movs	r3, #8
 8001478:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800147a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800147e:	4619      	mov	r1, r3
 8001480:	4805      	ldr	r0, [pc, #20]	; (8001498 <HAL_UART_MspInit+0x158>)
 8001482:	f000 fc63 	bl	8001d4c <HAL_GPIO_Init>
}
 8001486:	bf00      	nop
 8001488:	3738      	adds	r7, #56	; 0x38
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	40011000 	.word	0x40011000
 8001494:	40023800 	.word	0x40023800
 8001498:	40020000 	.word	0x40020000
 800149c:	40004400 	.word	0x40004400
 80014a0:	40011400 	.word	0x40011400

080014a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014a8:	e7fe      	b.n	80014a8 <NMI_Handler+0x4>

080014aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014aa:	b480      	push	{r7}
 80014ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014ae:	e7fe      	b.n	80014ae <HardFault_Handler+0x4>

080014b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014b4:	e7fe      	b.n	80014b4 <MemManage_Handler+0x4>

080014b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014b6:	b480      	push	{r7}
 80014b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014ba:	e7fe      	b.n	80014ba <BusFault_Handler+0x4>

080014bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014c0:	e7fe      	b.n	80014c0 <UsageFault_Handler+0x4>

080014c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014c2:	b480      	push	{r7}
 80014c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014c6:	bf00      	nop
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr

080014d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014d4:	f000 f8a6 	bl	8001624 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80014d8:	f004 fa44 	bl	8005964 <xTaskGetSchedulerState>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b01      	cmp	r3, #1
 80014e0:	d001      	beq.n	80014e6 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80014e2:	f005 f9e1 	bl	80068a8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014e6:	bf00      	nop
 80014e8:	bd80      	pop	{r7, pc}

080014ea <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80014ea:	b580      	push	{r7, lr}
 80014ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80014ee:	2001      	movs	r0, #1
 80014f0:	f000 fdca 	bl	8002088 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80014f4:	bf00      	nop
 80014f6:	bd80      	pop	{r7, pc}

080014f8 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80014fc:	2004      	movs	r0, #4
 80014fe:	f000 fdc3 	bl	8002088 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001502:	bf00      	nop
 8001504:	bd80      	pop	{r7, pc}
	...

08001508 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800150c:	4b06      	ldr	r3, [pc, #24]	; (8001528 <SystemInit+0x20>)
 800150e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001512:	4a05      	ldr	r2, [pc, #20]	; (8001528 <SystemInit+0x20>)
 8001514:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001518:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800151c:	bf00      	nop
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	e000ed00 	.word	0xe000ed00

0800152c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800152c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001564 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001530:	480d      	ldr	r0, [pc, #52]	; (8001568 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001532:	490e      	ldr	r1, [pc, #56]	; (800156c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001534:	4a0e      	ldr	r2, [pc, #56]	; (8001570 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001536:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001538:	e002      	b.n	8001540 <LoopCopyDataInit>

0800153a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800153a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800153c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800153e:	3304      	adds	r3, #4

08001540 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001540:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001542:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001544:	d3f9      	bcc.n	800153a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001546:	4a0b      	ldr	r2, [pc, #44]	; (8001574 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001548:	4c0b      	ldr	r4, [pc, #44]	; (8001578 <LoopFillZerobss+0x26>)
  movs r3, #0
 800154a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800154c:	e001      	b.n	8001552 <LoopFillZerobss>

0800154e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800154e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001550:	3204      	adds	r2, #4

08001552 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001552:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001554:	d3fb      	bcc.n	800154e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001556:	f7ff ffd7 	bl	8001508 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800155a:	f006 f881 	bl	8007660 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800155e:	f7fe ffc1 	bl	80004e4 <main>
  bx  lr    
 8001562:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001564:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001568:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800156c:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8001570:	08007840 	.word	0x08007840
  ldr r2, =_sbss
 8001574:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8001578:	2000966c 	.word	0x2000966c

0800157c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800157c:	e7fe      	b.n	800157c <ADC_IRQHandler>
	...

08001580 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001584:	4b0e      	ldr	r3, [pc, #56]	; (80015c0 <HAL_Init+0x40>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a0d      	ldr	r2, [pc, #52]	; (80015c0 <HAL_Init+0x40>)
 800158a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800158e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001590:	4b0b      	ldr	r3, [pc, #44]	; (80015c0 <HAL_Init+0x40>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a0a      	ldr	r2, [pc, #40]	; (80015c0 <HAL_Init+0x40>)
 8001596:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800159a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800159c:	4b08      	ldr	r3, [pc, #32]	; (80015c0 <HAL_Init+0x40>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a07      	ldr	r2, [pc, #28]	; (80015c0 <HAL_Init+0x40>)
 80015a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015a8:	2003      	movs	r0, #3
 80015aa:	f000 fb8d 	bl	8001cc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015ae:	200f      	movs	r0, #15
 80015b0:	f000 f808 	bl	80015c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015b4:	f7ff fbe4 	bl	8000d80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015b8:	2300      	movs	r3, #0
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	40023c00 	.word	0x40023c00

080015c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015cc:	4b12      	ldr	r3, [pc, #72]	; (8001618 <HAL_InitTick+0x54>)
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	4b12      	ldr	r3, [pc, #72]	; (800161c <HAL_InitTick+0x58>)
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	4619      	mov	r1, r3
 80015d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015da:	fbb3 f3f1 	udiv	r3, r3, r1
 80015de:	fbb2 f3f3 	udiv	r3, r2, r3
 80015e2:	4618      	mov	r0, r3
 80015e4:	f000 fba5 	bl	8001d32 <HAL_SYSTICK_Config>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	e00e      	b.n	8001610 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2b0f      	cmp	r3, #15
 80015f6:	d80a      	bhi.n	800160e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015f8:	2200      	movs	r2, #0
 80015fa:	6879      	ldr	r1, [r7, #4]
 80015fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001600:	f000 fb6d 	bl	8001cde <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001604:	4a06      	ldr	r2, [pc, #24]	; (8001620 <HAL_InitTick+0x5c>)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800160a:	2300      	movs	r3, #0
 800160c:	e000      	b.n	8001610 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
}
 8001610:	4618      	mov	r0, r3
 8001612:	3708      	adds	r7, #8
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	20000000 	.word	0x20000000
 800161c:	20000008 	.word	0x20000008
 8001620:	20000004 	.word	0x20000004

08001624 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001628:	4b06      	ldr	r3, [pc, #24]	; (8001644 <HAL_IncTick+0x20>)
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	461a      	mov	r2, r3
 800162e:	4b06      	ldr	r3, [pc, #24]	; (8001648 <HAL_IncTick+0x24>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4413      	add	r3, r2
 8001634:	4a04      	ldr	r2, [pc, #16]	; (8001648 <HAL_IncTick+0x24>)
 8001636:	6013      	str	r3, [r2, #0]
}
 8001638:	bf00      	nop
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	20000008 	.word	0x20000008
 8001648:	200003ec 	.word	0x200003ec

0800164c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  return uwTick;
 8001650:	4b03      	ldr	r3, [pc, #12]	; (8001660 <HAL_GetTick+0x14>)
 8001652:	681b      	ldr	r3, [r3, #0]
}
 8001654:	4618      	mov	r0, r3
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop
 8001660:	200003ec 	.word	0x200003ec

08001664 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b084      	sub	sp, #16
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800166c:	2300      	movs	r3, #0
 800166e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d101      	bne.n	800167a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001676:	2301      	movs	r3, #1
 8001678:	e033      	b.n	80016e2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167e:	2b00      	cmp	r3, #0
 8001680:	d109      	bne.n	8001696 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001682:	6878      	ldr	r0, [r7, #4]
 8001684:	f7ff fba8 	bl	8000dd8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2200      	movs	r2, #0
 800168c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2200      	movs	r2, #0
 8001692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169a:	f003 0310 	and.w	r3, r3, #16
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d118      	bne.n	80016d4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80016aa:	f023 0302 	bic.w	r3, r3, #2
 80016ae:	f043 0202 	orr.w	r2, r3, #2
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	f000 f93a 	bl	8001930 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2200      	movs	r2, #0
 80016c0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c6:	f023 0303 	bic.w	r3, r3, #3
 80016ca:	f043 0201 	orr.w	r2, r3, #1
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	641a      	str	r2, [r3, #64]	; 0x40
 80016d2:	e001      	b.n	80016d8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80016d4:	2301      	movs	r3, #1
 80016d6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2200      	movs	r2, #0
 80016dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80016e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3710      	adds	r7, #16
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
	...

080016ec <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b085      	sub	sp, #20
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80016f6:	2300      	movs	r3, #0
 80016f8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001700:	2b01      	cmp	r3, #1
 8001702:	d101      	bne.n	8001708 <HAL_ADC_ConfigChannel+0x1c>
 8001704:	2302      	movs	r3, #2
 8001706:	e105      	b.n	8001914 <HAL_ADC_ConfigChannel+0x228>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2201      	movs	r2, #1
 800170c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	2b09      	cmp	r3, #9
 8001716:	d925      	bls.n	8001764 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	68d9      	ldr	r1, [r3, #12]
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	b29b      	uxth	r3, r3
 8001724:	461a      	mov	r2, r3
 8001726:	4613      	mov	r3, r2
 8001728:	005b      	lsls	r3, r3, #1
 800172a:	4413      	add	r3, r2
 800172c:	3b1e      	subs	r3, #30
 800172e:	2207      	movs	r2, #7
 8001730:	fa02 f303 	lsl.w	r3, r2, r3
 8001734:	43da      	mvns	r2, r3
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	400a      	ands	r2, r1
 800173c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	68d9      	ldr	r1, [r3, #12]
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	689a      	ldr	r2, [r3, #8]
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	b29b      	uxth	r3, r3
 800174e:	4618      	mov	r0, r3
 8001750:	4603      	mov	r3, r0
 8001752:	005b      	lsls	r3, r3, #1
 8001754:	4403      	add	r3, r0
 8001756:	3b1e      	subs	r3, #30
 8001758:	409a      	lsls	r2, r3
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	430a      	orrs	r2, r1
 8001760:	60da      	str	r2, [r3, #12]
 8001762:	e022      	b.n	80017aa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	6919      	ldr	r1, [r3, #16]
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	b29b      	uxth	r3, r3
 8001770:	461a      	mov	r2, r3
 8001772:	4613      	mov	r3, r2
 8001774:	005b      	lsls	r3, r3, #1
 8001776:	4413      	add	r3, r2
 8001778:	2207      	movs	r2, #7
 800177a:	fa02 f303 	lsl.w	r3, r2, r3
 800177e:	43da      	mvns	r2, r3
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	400a      	ands	r2, r1
 8001786:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	6919      	ldr	r1, [r3, #16]
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	689a      	ldr	r2, [r3, #8]
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	b29b      	uxth	r3, r3
 8001798:	4618      	mov	r0, r3
 800179a:	4603      	mov	r3, r0
 800179c:	005b      	lsls	r3, r3, #1
 800179e:	4403      	add	r3, r0
 80017a0:	409a      	lsls	r2, r3
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	430a      	orrs	r2, r1
 80017a8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	2b06      	cmp	r3, #6
 80017b0:	d824      	bhi.n	80017fc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	685a      	ldr	r2, [r3, #4]
 80017bc:	4613      	mov	r3, r2
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	4413      	add	r3, r2
 80017c2:	3b05      	subs	r3, #5
 80017c4:	221f      	movs	r2, #31
 80017c6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ca:	43da      	mvns	r2, r3
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	400a      	ands	r2, r1
 80017d2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	b29b      	uxth	r3, r3
 80017e0:	4618      	mov	r0, r3
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	685a      	ldr	r2, [r3, #4]
 80017e6:	4613      	mov	r3, r2
 80017e8:	009b      	lsls	r3, r3, #2
 80017ea:	4413      	add	r3, r2
 80017ec:	3b05      	subs	r3, #5
 80017ee:	fa00 f203 	lsl.w	r2, r0, r3
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	430a      	orrs	r2, r1
 80017f8:	635a      	str	r2, [r3, #52]	; 0x34
 80017fa:	e04c      	b.n	8001896 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	2b0c      	cmp	r3, #12
 8001802:	d824      	bhi.n	800184e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	685a      	ldr	r2, [r3, #4]
 800180e:	4613      	mov	r3, r2
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	4413      	add	r3, r2
 8001814:	3b23      	subs	r3, #35	; 0x23
 8001816:	221f      	movs	r2, #31
 8001818:	fa02 f303 	lsl.w	r3, r2, r3
 800181c:	43da      	mvns	r2, r3
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	400a      	ands	r2, r1
 8001824:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	b29b      	uxth	r3, r3
 8001832:	4618      	mov	r0, r3
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	685a      	ldr	r2, [r3, #4]
 8001838:	4613      	mov	r3, r2
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	4413      	add	r3, r2
 800183e:	3b23      	subs	r3, #35	; 0x23
 8001840:	fa00 f203 	lsl.w	r2, r0, r3
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	430a      	orrs	r2, r1
 800184a:	631a      	str	r2, [r3, #48]	; 0x30
 800184c:	e023      	b.n	8001896 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	685a      	ldr	r2, [r3, #4]
 8001858:	4613      	mov	r3, r2
 800185a:	009b      	lsls	r3, r3, #2
 800185c:	4413      	add	r3, r2
 800185e:	3b41      	subs	r3, #65	; 0x41
 8001860:	221f      	movs	r2, #31
 8001862:	fa02 f303 	lsl.w	r3, r2, r3
 8001866:	43da      	mvns	r2, r3
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	400a      	ands	r2, r1
 800186e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	b29b      	uxth	r3, r3
 800187c:	4618      	mov	r0, r3
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	685a      	ldr	r2, [r3, #4]
 8001882:	4613      	mov	r3, r2
 8001884:	009b      	lsls	r3, r3, #2
 8001886:	4413      	add	r3, r2
 8001888:	3b41      	subs	r3, #65	; 0x41
 800188a:	fa00 f203 	lsl.w	r2, r0, r3
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	430a      	orrs	r2, r1
 8001894:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001896:	4b22      	ldr	r3, [pc, #136]	; (8001920 <HAL_ADC_ConfigChannel+0x234>)
 8001898:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a21      	ldr	r2, [pc, #132]	; (8001924 <HAL_ADC_ConfigChannel+0x238>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d109      	bne.n	80018b8 <HAL_ADC_ConfigChannel+0x1cc>
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	2b12      	cmp	r3, #18
 80018aa:	d105      	bne.n	80018b8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a19      	ldr	r2, [pc, #100]	; (8001924 <HAL_ADC_ConfigChannel+0x238>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d123      	bne.n	800190a <HAL_ADC_ConfigChannel+0x21e>
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	2b10      	cmp	r3, #16
 80018c8:	d003      	beq.n	80018d2 <HAL_ADC_ConfigChannel+0x1e6>
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	2b11      	cmp	r3, #17
 80018d0:	d11b      	bne.n	800190a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	2b10      	cmp	r3, #16
 80018e4:	d111      	bne.n	800190a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80018e6:	4b10      	ldr	r3, [pc, #64]	; (8001928 <HAL_ADC_ConfigChannel+0x23c>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a10      	ldr	r2, [pc, #64]	; (800192c <HAL_ADC_ConfigChannel+0x240>)
 80018ec:	fba2 2303 	umull	r2, r3, r2, r3
 80018f0:	0c9a      	lsrs	r2, r3, #18
 80018f2:	4613      	mov	r3, r2
 80018f4:	009b      	lsls	r3, r3, #2
 80018f6:	4413      	add	r3, r2
 80018f8:	005b      	lsls	r3, r3, #1
 80018fa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80018fc:	e002      	b.n	8001904 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80018fe:	68bb      	ldr	r3, [r7, #8]
 8001900:	3b01      	subs	r3, #1
 8001902:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d1f9      	bne.n	80018fe <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2200      	movs	r2, #0
 800190e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001912:	2300      	movs	r3, #0
}
 8001914:	4618      	mov	r0, r3
 8001916:	3714      	adds	r7, #20
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr
 8001920:	40012300 	.word	0x40012300
 8001924:	40012000 	.word	0x40012000
 8001928:	20000000 	.word	0x20000000
 800192c:	431bde83 	.word	0x431bde83

08001930 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001930:	b480      	push	{r7}
 8001932:	b085      	sub	sp, #20
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001938:	4b79      	ldr	r3, [pc, #484]	; (8001b20 <ADC_Init+0x1f0>)
 800193a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	685a      	ldr	r2, [r3, #4]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	431a      	orrs	r2, r3
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	685a      	ldr	r2, [r3, #4]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001964:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	6859      	ldr	r1, [r3, #4]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	691b      	ldr	r3, [r3, #16]
 8001970:	021a      	lsls	r2, r3, #8
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	430a      	orrs	r2, r1
 8001978:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	685a      	ldr	r2, [r3, #4]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001988:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	6859      	ldr	r1, [r3, #4]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	689a      	ldr	r2, [r3, #8]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	430a      	orrs	r2, r1
 800199a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	689a      	ldr	r2, [r3, #8]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80019aa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	6899      	ldr	r1, [r3, #8]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	68da      	ldr	r2, [r3, #12]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	430a      	orrs	r2, r1
 80019bc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019c2:	4a58      	ldr	r2, [pc, #352]	; (8001b24 <ADC_Init+0x1f4>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d022      	beq.n	8001a0e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	689a      	ldr	r2, [r3, #8]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80019d6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	6899      	ldr	r1, [r3, #8]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	430a      	orrs	r2, r1
 80019e8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	689a      	ldr	r2, [r3, #8]
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80019f8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	6899      	ldr	r1, [r3, #8]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	430a      	orrs	r2, r1
 8001a0a:	609a      	str	r2, [r3, #8]
 8001a0c:	e00f      	b.n	8001a2e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	689a      	ldr	r2, [r3, #8]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001a1c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	689a      	ldr	r2, [r3, #8]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001a2c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	689a      	ldr	r2, [r3, #8]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f022 0202 	bic.w	r2, r2, #2
 8001a3c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	6899      	ldr	r1, [r3, #8]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	7e1b      	ldrb	r3, [r3, #24]
 8001a48:	005a      	lsls	r2, r3, #1
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	430a      	orrs	r2, r1
 8001a50:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d01b      	beq.n	8001a94 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	685a      	ldr	r2, [r3, #4]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001a6a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	685a      	ldr	r2, [r3, #4]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001a7a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	6859      	ldr	r1, [r3, #4]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a86:	3b01      	subs	r3, #1
 8001a88:	035a      	lsls	r2, r3, #13
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	430a      	orrs	r2, r1
 8001a90:	605a      	str	r2, [r3, #4]
 8001a92:	e007      	b.n	8001aa4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	685a      	ldr	r2, [r3, #4]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001aa2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001ab2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	69db      	ldr	r3, [r3, #28]
 8001abe:	3b01      	subs	r3, #1
 8001ac0:	051a      	lsls	r2, r3, #20
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	430a      	orrs	r2, r1
 8001ac8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	689a      	ldr	r2, [r3, #8]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001ad8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	6899      	ldr	r1, [r3, #8]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001ae6:	025a      	lsls	r2, r3, #9
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	430a      	orrs	r2, r1
 8001aee:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	689a      	ldr	r2, [r3, #8]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001afe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	6899      	ldr	r1, [r3, #8]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	695b      	ldr	r3, [r3, #20]
 8001b0a:	029a      	lsls	r2, r3, #10
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	430a      	orrs	r2, r1
 8001b12:	609a      	str	r2, [r3, #8]
}
 8001b14:	bf00      	nop
 8001b16:	3714      	adds	r7, #20
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr
 8001b20:	40012300 	.word	0x40012300
 8001b24:	0f000001 	.word	0x0f000001

08001b28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b085      	sub	sp, #20
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	f003 0307 	and.w	r3, r3, #7
 8001b36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b38:	4b0c      	ldr	r3, [pc, #48]	; (8001b6c <__NVIC_SetPriorityGrouping+0x44>)
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b3e:	68ba      	ldr	r2, [r7, #8]
 8001b40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b44:	4013      	ands	r3, r2
 8001b46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b5a:	4a04      	ldr	r2, [pc, #16]	; (8001b6c <__NVIC_SetPriorityGrouping+0x44>)
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	60d3      	str	r3, [r2, #12]
}
 8001b60:	bf00      	nop
 8001b62:	3714      	adds	r7, #20
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr
 8001b6c:	e000ed00 	.word	0xe000ed00

08001b70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b74:	4b04      	ldr	r3, [pc, #16]	; (8001b88 <__NVIC_GetPriorityGrouping+0x18>)
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	0a1b      	lsrs	r3, r3, #8
 8001b7a:	f003 0307 	and.w	r3, r3, #7
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr
 8001b88:	e000ed00 	.word	0xe000ed00

08001b8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	4603      	mov	r3, r0
 8001b94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	db0b      	blt.n	8001bb6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b9e:	79fb      	ldrb	r3, [r7, #7]
 8001ba0:	f003 021f 	and.w	r2, r3, #31
 8001ba4:	4907      	ldr	r1, [pc, #28]	; (8001bc4 <__NVIC_EnableIRQ+0x38>)
 8001ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001baa:	095b      	lsrs	r3, r3, #5
 8001bac:	2001      	movs	r0, #1
 8001bae:	fa00 f202 	lsl.w	r2, r0, r2
 8001bb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001bb6:	bf00      	nop
 8001bb8:	370c      	adds	r7, #12
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	e000e100 	.word	0xe000e100

08001bc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	4603      	mov	r3, r0
 8001bd0:	6039      	str	r1, [r7, #0]
 8001bd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	db0a      	blt.n	8001bf2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	b2da      	uxtb	r2, r3
 8001be0:	490c      	ldr	r1, [pc, #48]	; (8001c14 <__NVIC_SetPriority+0x4c>)
 8001be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be6:	0112      	lsls	r2, r2, #4
 8001be8:	b2d2      	uxtb	r2, r2
 8001bea:	440b      	add	r3, r1
 8001bec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bf0:	e00a      	b.n	8001c08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	b2da      	uxtb	r2, r3
 8001bf6:	4908      	ldr	r1, [pc, #32]	; (8001c18 <__NVIC_SetPriority+0x50>)
 8001bf8:	79fb      	ldrb	r3, [r7, #7]
 8001bfa:	f003 030f 	and.w	r3, r3, #15
 8001bfe:	3b04      	subs	r3, #4
 8001c00:	0112      	lsls	r2, r2, #4
 8001c02:	b2d2      	uxtb	r2, r2
 8001c04:	440b      	add	r3, r1
 8001c06:	761a      	strb	r2, [r3, #24]
}
 8001c08:	bf00      	nop
 8001c0a:	370c      	adds	r7, #12
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr
 8001c14:	e000e100 	.word	0xe000e100
 8001c18:	e000ed00 	.word	0xe000ed00

08001c1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b089      	sub	sp, #36	; 0x24
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	60f8      	str	r0, [r7, #12]
 8001c24:	60b9      	str	r1, [r7, #8]
 8001c26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	f003 0307 	and.w	r3, r3, #7
 8001c2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	f1c3 0307 	rsb	r3, r3, #7
 8001c36:	2b04      	cmp	r3, #4
 8001c38:	bf28      	it	cs
 8001c3a:	2304      	movcs	r3, #4
 8001c3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	3304      	adds	r3, #4
 8001c42:	2b06      	cmp	r3, #6
 8001c44:	d902      	bls.n	8001c4c <NVIC_EncodePriority+0x30>
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	3b03      	subs	r3, #3
 8001c4a:	e000      	b.n	8001c4e <NVIC_EncodePriority+0x32>
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c50:	f04f 32ff 	mov.w	r2, #4294967295
 8001c54:	69bb      	ldr	r3, [r7, #24]
 8001c56:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5a:	43da      	mvns	r2, r3
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	401a      	ands	r2, r3
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c64:	f04f 31ff 	mov.w	r1, #4294967295
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c6e:	43d9      	mvns	r1, r3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c74:	4313      	orrs	r3, r2
         );
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3724      	adds	r7, #36	; 0x24
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
	...

08001c84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	3b01      	subs	r3, #1
 8001c90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c94:	d301      	bcc.n	8001c9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c96:	2301      	movs	r3, #1
 8001c98:	e00f      	b.n	8001cba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c9a:	4a0a      	ldr	r2, [pc, #40]	; (8001cc4 <SysTick_Config+0x40>)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	3b01      	subs	r3, #1
 8001ca0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ca2:	210f      	movs	r1, #15
 8001ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ca8:	f7ff ff8e 	bl	8001bc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cac:	4b05      	ldr	r3, [pc, #20]	; (8001cc4 <SysTick_Config+0x40>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cb2:	4b04      	ldr	r3, [pc, #16]	; (8001cc4 <SysTick_Config+0x40>)
 8001cb4:	2207      	movs	r2, #7
 8001cb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cb8:	2300      	movs	r3, #0
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3708      	adds	r7, #8
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	e000e010 	.word	0xe000e010

08001cc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cd0:	6878      	ldr	r0, [r7, #4]
 8001cd2:	f7ff ff29 	bl	8001b28 <__NVIC_SetPriorityGrouping>
}
 8001cd6:	bf00      	nop
 8001cd8:	3708      	adds	r7, #8
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}

08001cde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cde:	b580      	push	{r7, lr}
 8001ce0:	b086      	sub	sp, #24
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	60b9      	str	r1, [r7, #8]
 8001ce8:	607a      	str	r2, [r7, #4]
 8001cea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cec:	2300      	movs	r3, #0
 8001cee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cf0:	f7ff ff3e 	bl	8001b70 <__NVIC_GetPriorityGrouping>
 8001cf4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cf6:	687a      	ldr	r2, [r7, #4]
 8001cf8:	68b9      	ldr	r1, [r7, #8]
 8001cfa:	6978      	ldr	r0, [r7, #20]
 8001cfc:	f7ff ff8e 	bl	8001c1c <NVIC_EncodePriority>
 8001d00:	4602      	mov	r2, r0
 8001d02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d06:	4611      	mov	r1, r2
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f7ff ff5d 	bl	8001bc8 <__NVIC_SetPriority>
}
 8001d0e:	bf00      	nop
 8001d10:	3718      	adds	r7, #24
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}

08001d16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d16:	b580      	push	{r7, lr}
 8001d18:	b082      	sub	sp, #8
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d24:	4618      	mov	r0, r3
 8001d26:	f7ff ff31 	bl	8001b8c <__NVIC_EnableIRQ>
}
 8001d2a:	bf00      	nop
 8001d2c:	3708      	adds	r7, #8
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}

08001d32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d32:	b580      	push	{r7, lr}
 8001d34:	b082      	sub	sp, #8
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	f7ff ffa2 	bl	8001c84 <SysTick_Config>
 8001d40:	4603      	mov	r3, r0
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3708      	adds	r7, #8
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
	...

08001d4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b089      	sub	sp, #36	; 0x24
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
 8001d54:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d56:	2300      	movs	r3, #0
 8001d58:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d62:	2300      	movs	r3, #0
 8001d64:	61fb      	str	r3, [r7, #28]
 8001d66:	e159      	b.n	800201c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d68:	2201      	movs	r2, #1
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d70:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	697a      	ldr	r2, [r7, #20]
 8001d78:	4013      	ands	r3, r2
 8001d7a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d7c:	693a      	ldr	r2, [r7, #16]
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	429a      	cmp	r2, r3
 8001d82:	f040 8148 	bne.w	8002016 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	f003 0303 	and.w	r3, r3, #3
 8001d8e:	2b01      	cmp	r3, #1
 8001d90:	d005      	beq.n	8001d9e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d9a:	2b02      	cmp	r3, #2
 8001d9c:	d130      	bne.n	8001e00 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001da4:	69fb      	ldr	r3, [r7, #28]
 8001da6:	005b      	lsls	r3, r3, #1
 8001da8:	2203      	movs	r2, #3
 8001daa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dae:	43db      	mvns	r3, r3
 8001db0:	69ba      	ldr	r2, [r7, #24]
 8001db2:	4013      	ands	r3, r2
 8001db4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	68da      	ldr	r2, [r3, #12]
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	005b      	lsls	r3, r3, #1
 8001dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc2:	69ba      	ldr	r2, [r7, #24]
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	69ba      	ldr	r2, [r7, #24]
 8001dcc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ddc:	43db      	mvns	r3, r3
 8001dde:	69ba      	ldr	r2, [r7, #24]
 8001de0:	4013      	ands	r3, r2
 8001de2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	091b      	lsrs	r3, r3, #4
 8001dea:	f003 0201 	and.w	r2, r3, #1
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	fa02 f303 	lsl.w	r3, r2, r3
 8001df4:	69ba      	ldr	r2, [r7, #24]
 8001df6:	4313      	orrs	r3, r2
 8001df8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	69ba      	ldr	r2, [r7, #24]
 8001dfe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f003 0303 	and.w	r3, r3, #3
 8001e08:	2b03      	cmp	r3, #3
 8001e0a:	d017      	beq.n	8001e3c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e12:	69fb      	ldr	r3, [r7, #28]
 8001e14:	005b      	lsls	r3, r3, #1
 8001e16:	2203      	movs	r2, #3
 8001e18:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1c:	43db      	mvns	r3, r3
 8001e1e:	69ba      	ldr	r2, [r7, #24]
 8001e20:	4013      	ands	r3, r2
 8001e22:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	689a      	ldr	r2, [r3, #8]
 8001e28:	69fb      	ldr	r3, [r7, #28]
 8001e2a:	005b      	lsls	r3, r3, #1
 8001e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e30:	69ba      	ldr	r2, [r7, #24]
 8001e32:	4313      	orrs	r3, r2
 8001e34:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	69ba      	ldr	r2, [r7, #24]
 8001e3a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f003 0303 	and.w	r3, r3, #3
 8001e44:	2b02      	cmp	r3, #2
 8001e46:	d123      	bne.n	8001e90 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e48:	69fb      	ldr	r3, [r7, #28]
 8001e4a:	08da      	lsrs	r2, r3, #3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	3208      	adds	r2, #8
 8001e50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e54:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	f003 0307 	and.w	r3, r3, #7
 8001e5c:	009b      	lsls	r3, r3, #2
 8001e5e:	220f      	movs	r2, #15
 8001e60:	fa02 f303 	lsl.w	r3, r2, r3
 8001e64:	43db      	mvns	r3, r3
 8001e66:	69ba      	ldr	r2, [r7, #24]
 8001e68:	4013      	ands	r3, r2
 8001e6a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	691a      	ldr	r2, [r3, #16]
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	f003 0307 	and.w	r3, r3, #7
 8001e76:	009b      	lsls	r3, r3, #2
 8001e78:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7c:	69ba      	ldr	r2, [r7, #24]
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	08da      	lsrs	r2, r3, #3
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	3208      	adds	r2, #8
 8001e8a:	69b9      	ldr	r1, [r7, #24]
 8001e8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	005b      	lsls	r3, r3, #1
 8001e9a:	2203      	movs	r2, #3
 8001e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea0:	43db      	mvns	r3, r3
 8001ea2:	69ba      	ldr	r2, [r7, #24]
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f003 0203 	and.w	r2, r3, #3
 8001eb0:	69fb      	ldr	r3, [r7, #28]
 8001eb2:	005b      	lsls	r3, r3, #1
 8001eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb8:	69ba      	ldr	r2, [r7, #24]
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	69ba      	ldr	r2, [r7, #24]
 8001ec2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	f000 80a2 	beq.w	8002016 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	60fb      	str	r3, [r7, #12]
 8001ed6:	4b57      	ldr	r3, [pc, #348]	; (8002034 <HAL_GPIO_Init+0x2e8>)
 8001ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eda:	4a56      	ldr	r2, [pc, #344]	; (8002034 <HAL_GPIO_Init+0x2e8>)
 8001edc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ee0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ee2:	4b54      	ldr	r3, [pc, #336]	; (8002034 <HAL_GPIO_Init+0x2e8>)
 8001ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ee6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001eea:	60fb      	str	r3, [r7, #12]
 8001eec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001eee:	4a52      	ldr	r2, [pc, #328]	; (8002038 <HAL_GPIO_Init+0x2ec>)
 8001ef0:	69fb      	ldr	r3, [r7, #28]
 8001ef2:	089b      	lsrs	r3, r3, #2
 8001ef4:	3302      	adds	r3, #2
 8001ef6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001efa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001efc:	69fb      	ldr	r3, [r7, #28]
 8001efe:	f003 0303 	and.w	r3, r3, #3
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	220f      	movs	r2, #15
 8001f06:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0a:	43db      	mvns	r3, r3
 8001f0c:	69ba      	ldr	r2, [r7, #24]
 8001f0e:	4013      	ands	r3, r2
 8001f10:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4a49      	ldr	r2, [pc, #292]	; (800203c <HAL_GPIO_Init+0x2f0>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d019      	beq.n	8001f4e <HAL_GPIO_Init+0x202>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4a48      	ldr	r2, [pc, #288]	; (8002040 <HAL_GPIO_Init+0x2f4>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d013      	beq.n	8001f4a <HAL_GPIO_Init+0x1fe>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4a47      	ldr	r2, [pc, #284]	; (8002044 <HAL_GPIO_Init+0x2f8>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d00d      	beq.n	8001f46 <HAL_GPIO_Init+0x1fa>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4a46      	ldr	r2, [pc, #280]	; (8002048 <HAL_GPIO_Init+0x2fc>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d007      	beq.n	8001f42 <HAL_GPIO_Init+0x1f6>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4a45      	ldr	r2, [pc, #276]	; (800204c <HAL_GPIO_Init+0x300>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d101      	bne.n	8001f3e <HAL_GPIO_Init+0x1f2>
 8001f3a:	2304      	movs	r3, #4
 8001f3c:	e008      	b.n	8001f50 <HAL_GPIO_Init+0x204>
 8001f3e:	2307      	movs	r3, #7
 8001f40:	e006      	b.n	8001f50 <HAL_GPIO_Init+0x204>
 8001f42:	2303      	movs	r3, #3
 8001f44:	e004      	b.n	8001f50 <HAL_GPIO_Init+0x204>
 8001f46:	2302      	movs	r3, #2
 8001f48:	e002      	b.n	8001f50 <HAL_GPIO_Init+0x204>
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e000      	b.n	8001f50 <HAL_GPIO_Init+0x204>
 8001f4e:	2300      	movs	r3, #0
 8001f50:	69fa      	ldr	r2, [r7, #28]
 8001f52:	f002 0203 	and.w	r2, r2, #3
 8001f56:	0092      	lsls	r2, r2, #2
 8001f58:	4093      	lsls	r3, r2
 8001f5a:	69ba      	ldr	r2, [r7, #24]
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f60:	4935      	ldr	r1, [pc, #212]	; (8002038 <HAL_GPIO_Init+0x2ec>)
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	089b      	lsrs	r3, r3, #2
 8001f66:	3302      	adds	r3, #2
 8001f68:	69ba      	ldr	r2, [r7, #24]
 8001f6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f6e:	4b38      	ldr	r3, [pc, #224]	; (8002050 <HAL_GPIO_Init+0x304>)
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	43db      	mvns	r3, r3
 8001f78:	69ba      	ldr	r2, [r7, #24]
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d003      	beq.n	8001f92 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001f8a:	69ba      	ldr	r2, [r7, #24]
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f92:	4a2f      	ldr	r2, [pc, #188]	; (8002050 <HAL_GPIO_Init+0x304>)
 8001f94:	69bb      	ldr	r3, [r7, #24]
 8001f96:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f98:	4b2d      	ldr	r3, [pc, #180]	; (8002050 <HAL_GPIO_Init+0x304>)
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	43db      	mvns	r3, r3
 8001fa2:	69ba      	ldr	r2, [r7, #24]
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d003      	beq.n	8001fbc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001fb4:	69ba      	ldr	r2, [r7, #24]
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001fbc:	4a24      	ldr	r2, [pc, #144]	; (8002050 <HAL_GPIO_Init+0x304>)
 8001fbe:	69bb      	ldr	r3, [r7, #24]
 8001fc0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001fc2:	4b23      	ldr	r3, [pc, #140]	; (8002050 <HAL_GPIO_Init+0x304>)
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	43db      	mvns	r3, r3
 8001fcc:	69ba      	ldr	r2, [r7, #24]
 8001fce:	4013      	ands	r3, r2
 8001fd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d003      	beq.n	8001fe6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001fde:	69ba      	ldr	r2, [r7, #24]
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001fe6:	4a1a      	ldr	r2, [pc, #104]	; (8002050 <HAL_GPIO_Init+0x304>)
 8001fe8:	69bb      	ldr	r3, [r7, #24]
 8001fea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fec:	4b18      	ldr	r3, [pc, #96]	; (8002050 <HAL_GPIO_Init+0x304>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	43db      	mvns	r3, r3
 8001ff6:	69ba      	ldr	r2, [r7, #24]
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002004:	2b00      	cmp	r3, #0
 8002006:	d003      	beq.n	8002010 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002008:	69ba      	ldr	r2, [r7, #24]
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	4313      	orrs	r3, r2
 800200e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002010:	4a0f      	ldr	r2, [pc, #60]	; (8002050 <HAL_GPIO_Init+0x304>)
 8002012:	69bb      	ldr	r3, [r7, #24]
 8002014:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002016:	69fb      	ldr	r3, [r7, #28]
 8002018:	3301      	adds	r3, #1
 800201a:	61fb      	str	r3, [r7, #28]
 800201c:	69fb      	ldr	r3, [r7, #28]
 800201e:	2b0f      	cmp	r3, #15
 8002020:	f67f aea2 	bls.w	8001d68 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002024:	bf00      	nop
 8002026:	bf00      	nop
 8002028:	3724      	adds	r7, #36	; 0x24
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr
 8002032:	bf00      	nop
 8002034:	40023800 	.word	0x40023800
 8002038:	40013800 	.word	0x40013800
 800203c:	40020000 	.word	0x40020000
 8002040:	40020400 	.word	0x40020400
 8002044:	40020800 	.word	0x40020800
 8002048:	40020c00 	.word	0x40020c00
 800204c:	40021000 	.word	0x40021000
 8002050:	40013c00 	.word	0x40013c00

08002054 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	460b      	mov	r3, r1
 800205e:	807b      	strh	r3, [r7, #2]
 8002060:	4613      	mov	r3, r2
 8002062:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002064:	787b      	ldrb	r3, [r7, #1]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d003      	beq.n	8002072 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800206a:	887a      	ldrh	r2, [r7, #2]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002070:	e003      	b.n	800207a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002072:	887b      	ldrh	r3, [r7, #2]
 8002074:	041a      	lsls	r2, r3, #16
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	619a      	str	r2, [r3, #24]
}
 800207a:	bf00      	nop
 800207c:	370c      	adds	r7, #12
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr
	...

08002088 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
 800208e:	4603      	mov	r3, r0
 8002090:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002092:	4b08      	ldr	r3, [pc, #32]	; (80020b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002094:	695a      	ldr	r2, [r3, #20]
 8002096:	88fb      	ldrh	r3, [r7, #6]
 8002098:	4013      	ands	r3, r2
 800209a:	2b00      	cmp	r3, #0
 800209c:	d006      	beq.n	80020ac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800209e:	4a05      	ldr	r2, [pc, #20]	; (80020b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80020a0:	88fb      	ldrh	r3, [r7, #6]
 80020a2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80020a4:	88fb      	ldrh	r3, [r7, #6]
 80020a6:	4618      	mov	r0, r3
 80020a8:	f000 f806 	bl	80020b8 <HAL_GPIO_EXTI_Callback>
  }
}
 80020ac:	bf00      	nop
 80020ae:	3708      	adds	r7, #8
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	40013c00 	.word	0x40013c00

080020b8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	4603      	mov	r3, r0
 80020c0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80020c2:	bf00      	nop
 80020c4:	370c      	adds	r7, #12
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr
	...

080020d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b084      	sub	sp, #16
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d101      	bne.n	80020e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e12b      	b.n	800233a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d106      	bne.n	80020fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2200      	movs	r2, #0
 80020f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	f7fe feb2 	bl	8000e60 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2224      	movs	r2, #36	; 0x24
 8002100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f022 0201 	bic.w	r2, r2, #1
 8002112:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002122:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	681a      	ldr	r2, [r3, #0]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002132:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002134:	f000 fd80 	bl	8002c38 <HAL_RCC_GetPCLK1Freq>
 8002138:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	4a81      	ldr	r2, [pc, #516]	; (8002344 <HAL_I2C_Init+0x274>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d807      	bhi.n	8002154 <HAL_I2C_Init+0x84>
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	4a80      	ldr	r2, [pc, #512]	; (8002348 <HAL_I2C_Init+0x278>)
 8002148:	4293      	cmp	r3, r2
 800214a:	bf94      	ite	ls
 800214c:	2301      	movls	r3, #1
 800214e:	2300      	movhi	r3, #0
 8002150:	b2db      	uxtb	r3, r3
 8002152:	e006      	b.n	8002162 <HAL_I2C_Init+0x92>
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	4a7d      	ldr	r2, [pc, #500]	; (800234c <HAL_I2C_Init+0x27c>)
 8002158:	4293      	cmp	r3, r2
 800215a:	bf94      	ite	ls
 800215c:	2301      	movls	r3, #1
 800215e:	2300      	movhi	r3, #0
 8002160:	b2db      	uxtb	r3, r3
 8002162:	2b00      	cmp	r3, #0
 8002164:	d001      	beq.n	800216a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e0e7      	b.n	800233a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	4a78      	ldr	r2, [pc, #480]	; (8002350 <HAL_I2C_Init+0x280>)
 800216e:	fba2 2303 	umull	r2, r3, r2, r3
 8002172:	0c9b      	lsrs	r3, r3, #18
 8002174:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	68ba      	ldr	r2, [r7, #8]
 8002186:	430a      	orrs	r2, r1
 8002188:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	6a1b      	ldr	r3, [r3, #32]
 8002190:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	4a6a      	ldr	r2, [pc, #424]	; (8002344 <HAL_I2C_Init+0x274>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d802      	bhi.n	80021a4 <HAL_I2C_Init+0xd4>
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	3301      	adds	r3, #1
 80021a2:	e009      	b.n	80021b8 <HAL_I2C_Init+0xe8>
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80021aa:	fb02 f303 	mul.w	r3, r2, r3
 80021ae:	4a69      	ldr	r2, [pc, #420]	; (8002354 <HAL_I2C_Init+0x284>)
 80021b0:	fba2 2303 	umull	r2, r3, r2, r3
 80021b4:	099b      	lsrs	r3, r3, #6
 80021b6:	3301      	adds	r3, #1
 80021b8:	687a      	ldr	r2, [r7, #4]
 80021ba:	6812      	ldr	r2, [r2, #0]
 80021bc:	430b      	orrs	r3, r1
 80021be:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	69db      	ldr	r3, [r3, #28]
 80021c6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80021ca:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	495c      	ldr	r1, [pc, #368]	; (8002344 <HAL_I2C_Init+0x274>)
 80021d4:	428b      	cmp	r3, r1
 80021d6:	d819      	bhi.n	800220c <HAL_I2C_Init+0x13c>
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	1e59      	subs	r1, r3, #1
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	005b      	lsls	r3, r3, #1
 80021e2:	fbb1 f3f3 	udiv	r3, r1, r3
 80021e6:	1c59      	adds	r1, r3, #1
 80021e8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80021ec:	400b      	ands	r3, r1
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d00a      	beq.n	8002208 <HAL_I2C_Init+0x138>
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	1e59      	subs	r1, r3, #1
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	005b      	lsls	r3, r3, #1
 80021fc:	fbb1 f3f3 	udiv	r3, r1, r3
 8002200:	3301      	adds	r3, #1
 8002202:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002206:	e051      	b.n	80022ac <HAL_I2C_Init+0x1dc>
 8002208:	2304      	movs	r3, #4
 800220a:	e04f      	b.n	80022ac <HAL_I2C_Init+0x1dc>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d111      	bne.n	8002238 <HAL_I2C_Init+0x168>
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	1e58      	subs	r0, r3, #1
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6859      	ldr	r1, [r3, #4]
 800221c:	460b      	mov	r3, r1
 800221e:	005b      	lsls	r3, r3, #1
 8002220:	440b      	add	r3, r1
 8002222:	fbb0 f3f3 	udiv	r3, r0, r3
 8002226:	3301      	adds	r3, #1
 8002228:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800222c:	2b00      	cmp	r3, #0
 800222e:	bf0c      	ite	eq
 8002230:	2301      	moveq	r3, #1
 8002232:	2300      	movne	r3, #0
 8002234:	b2db      	uxtb	r3, r3
 8002236:	e012      	b.n	800225e <HAL_I2C_Init+0x18e>
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	1e58      	subs	r0, r3, #1
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6859      	ldr	r1, [r3, #4]
 8002240:	460b      	mov	r3, r1
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	440b      	add	r3, r1
 8002246:	0099      	lsls	r1, r3, #2
 8002248:	440b      	add	r3, r1
 800224a:	fbb0 f3f3 	udiv	r3, r0, r3
 800224e:	3301      	adds	r3, #1
 8002250:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002254:	2b00      	cmp	r3, #0
 8002256:	bf0c      	ite	eq
 8002258:	2301      	moveq	r3, #1
 800225a:	2300      	movne	r3, #0
 800225c:	b2db      	uxtb	r3, r3
 800225e:	2b00      	cmp	r3, #0
 8002260:	d001      	beq.n	8002266 <HAL_I2C_Init+0x196>
 8002262:	2301      	movs	r3, #1
 8002264:	e022      	b.n	80022ac <HAL_I2C_Init+0x1dc>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d10e      	bne.n	800228c <HAL_I2C_Init+0x1bc>
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	1e58      	subs	r0, r3, #1
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6859      	ldr	r1, [r3, #4]
 8002276:	460b      	mov	r3, r1
 8002278:	005b      	lsls	r3, r3, #1
 800227a:	440b      	add	r3, r1
 800227c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002280:	3301      	adds	r3, #1
 8002282:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002286:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800228a:	e00f      	b.n	80022ac <HAL_I2C_Init+0x1dc>
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	1e58      	subs	r0, r3, #1
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6859      	ldr	r1, [r3, #4]
 8002294:	460b      	mov	r3, r1
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	440b      	add	r3, r1
 800229a:	0099      	lsls	r1, r3, #2
 800229c:	440b      	add	r3, r1
 800229e:	fbb0 f3f3 	udiv	r3, r0, r3
 80022a2:	3301      	adds	r3, #1
 80022a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80022ac:	6879      	ldr	r1, [r7, #4]
 80022ae:	6809      	ldr	r1, [r1, #0]
 80022b0:	4313      	orrs	r3, r2
 80022b2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	69da      	ldr	r2, [r3, #28]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6a1b      	ldr	r3, [r3, #32]
 80022c6:	431a      	orrs	r2, r3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	430a      	orrs	r2, r1
 80022ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80022da:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80022de:	687a      	ldr	r2, [r7, #4]
 80022e0:	6911      	ldr	r1, [r2, #16]
 80022e2:	687a      	ldr	r2, [r7, #4]
 80022e4:	68d2      	ldr	r2, [r2, #12]
 80022e6:	4311      	orrs	r1, r2
 80022e8:	687a      	ldr	r2, [r7, #4]
 80022ea:	6812      	ldr	r2, [r2, #0]
 80022ec:	430b      	orrs	r3, r1
 80022ee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	68db      	ldr	r3, [r3, #12]
 80022f6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	695a      	ldr	r2, [r3, #20]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	699b      	ldr	r3, [r3, #24]
 8002302:	431a      	orrs	r2, r3
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	430a      	orrs	r2, r1
 800230a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f042 0201 	orr.w	r2, r2, #1
 800231a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2200      	movs	r2, #0
 8002320:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2220      	movs	r2, #32
 8002326:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2200      	movs	r2, #0
 800232e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2200      	movs	r2, #0
 8002334:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002338:	2300      	movs	r3, #0
}
 800233a:	4618      	mov	r0, r3
 800233c:	3710      	adds	r7, #16
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	000186a0 	.word	0x000186a0
 8002348:	001e847f 	.word	0x001e847f
 800234c:	003d08ff 	.word	0x003d08ff
 8002350:	431bde83 	.word	0x431bde83
 8002354:	10624dd3 	.word	0x10624dd3

08002358 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b086      	sub	sp, #24
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d101      	bne.n	800236a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e267      	b.n	800283a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 0301 	and.w	r3, r3, #1
 8002372:	2b00      	cmp	r3, #0
 8002374:	d075      	beq.n	8002462 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002376:	4b88      	ldr	r3, [pc, #544]	; (8002598 <HAL_RCC_OscConfig+0x240>)
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	f003 030c 	and.w	r3, r3, #12
 800237e:	2b04      	cmp	r3, #4
 8002380:	d00c      	beq.n	800239c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002382:	4b85      	ldr	r3, [pc, #532]	; (8002598 <HAL_RCC_OscConfig+0x240>)
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800238a:	2b08      	cmp	r3, #8
 800238c:	d112      	bne.n	80023b4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800238e:	4b82      	ldr	r3, [pc, #520]	; (8002598 <HAL_RCC_OscConfig+0x240>)
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002396:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800239a:	d10b      	bne.n	80023b4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800239c:	4b7e      	ldr	r3, [pc, #504]	; (8002598 <HAL_RCC_OscConfig+0x240>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d05b      	beq.n	8002460 <HAL_RCC_OscConfig+0x108>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d157      	bne.n	8002460 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	e242      	b.n	800283a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023bc:	d106      	bne.n	80023cc <HAL_RCC_OscConfig+0x74>
 80023be:	4b76      	ldr	r3, [pc, #472]	; (8002598 <HAL_RCC_OscConfig+0x240>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a75      	ldr	r2, [pc, #468]	; (8002598 <HAL_RCC_OscConfig+0x240>)
 80023c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023c8:	6013      	str	r3, [r2, #0]
 80023ca:	e01d      	b.n	8002408 <HAL_RCC_OscConfig+0xb0>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023d4:	d10c      	bne.n	80023f0 <HAL_RCC_OscConfig+0x98>
 80023d6:	4b70      	ldr	r3, [pc, #448]	; (8002598 <HAL_RCC_OscConfig+0x240>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a6f      	ldr	r2, [pc, #444]	; (8002598 <HAL_RCC_OscConfig+0x240>)
 80023dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023e0:	6013      	str	r3, [r2, #0]
 80023e2:	4b6d      	ldr	r3, [pc, #436]	; (8002598 <HAL_RCC_OscConfig+0x240>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a6c      	ldr	r2, [pc, #432]	; (8002598 <HAL_RCC_OscConfig+0x240>)
 80023e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023ec:	6013      	str	r3, [r2, #0]
 80023ee:	e00b      	b.n	8002408 <HAL_RCC_OscConfig+0xb0>
 80023f0:	4b69      	ldr	r3, [pc, #420]	; (8002598 <HAL_RCC_OscConfig+0x240>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a68      	ldr	r2, [pc, #416]	; (8002598 <HAL_RCC_OscConfig+0x240>)
 80023f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023fa:	6013      	str	r3, [r2, #0]
 80023fc:	4b66      	ldr	r3, [pc, #408]	; (8002598 <HAL_RCC_OscConfig+0x240>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a65      	ldr	r2, [pc, #404]	; (8002598 <HAL_RCC_OscConfig+0x240>)
 8002402:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002406:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d013      	beq.n	8002438 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002410:	f7ff f91c 	bl	800164c <HAL_GetTick>
 8002414:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002416:	e008      	b.n	800242a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002418:	f7ff f918 	bl	800164c <HAL_GetTick>
 800241c:	4602      	mov	r2, r0
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	2b64      	cmp	r3, #100	; 0x64
 8002424:	d901      	bls.n	800242a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002426:	2303      	movs	r3, #3
 8002428:	e207      	b.n	800283a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800242a:	4b5b      	ldr	r3, [pc, #364]	; (8002598 <HAL_RCC_OscConfig+0x240>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002432:	2b00      	cmp	r3, #0
 8002434:	d0f0      	beq.n	8002418 <HAL_RCC_OscConfig+0xc0>
 8002436:	e014      	b.n	8002462 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002438:	f7ff f908 	bl	800164c <HAL_GetTick>
 800243c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800243e:	e008      	b.n	8002452 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002440:	f7ff f904 	bl	800164c <HAL_GetTick>
 8002444:	4602      	mov	r2, r0
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	2b64      	cmp	r3, #100	; 0x64
 800244c:	d901      	bls.n	8002452 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800244e:	2303      	movs	r3, #3
 8002450:	e1f3      	b.n	800283a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002452:	4b51      	ldr	r3, [pc, #324]	; (8002598 <HAL_RCC_OscConfig+0x240>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800245a:	2b00      	cmp	r3, #0
 800245c:	d1f0      	bne.n	8002440 <HAL_RCC_OscConfig+0xe8>
 800245e:	e000      	b.n	8002462 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002460:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 0302 	and.w	r3, r3, #2
 800246a:	2b00      	cmp	r3, #0
 800246c:	d063      	beq.n	8002536 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800246e:	4b4a      	ldr	r3, [pc, #296]	; (8002598 <HAL_RCC_OscConfig+0x240>)
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	f003 030c 	and.w	r3, r3, #12
 8002476:	2b00      	cmp	r3, #0
 8002478:	d00b      	beq.n	8002492 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800247a:	4b47      	ldr	r3, [pc, #284]	; (8002598 <HAL_RCC_OscConfig+0x240>)
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002482:	2b08      	cmp	r3, #8
 8002484:	d11c      	bne.n	80024c0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002486:	4b44      	ldr	r3, [pc, #272]	; (8002598 <HAL_RCC_OscConfig+0x240>)
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800248e:	2b00      	cmp	r3, #0
 8002490:	d116      	bne.n	80024c0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002492:	4b41      	ldr	r3, [pc, #260]	; (8002598 <HAL_RCC_OscConfig+0x240>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 0302 	and.w	r3, r3, #2
 800249a:	2b00      	cmp	r3, #0
 800249c:	d005      	beq.n	80024aa <HAL_RCC_OscConfig+0x152>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	68db      	ldr	r3, [r3, #12]
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d001      	beq.n	80024aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e1c7      	b.n	800283a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024aa:	4b3b      	ldr	r3, [pc, #236]	; (8002598 <HAL_RCC_OscConfig+0x240>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	691b      	ldr	r3, [r3, #16]
 80024b6:	00db      	lsls	r3, r3, #3
 80024b8:	4937      	ldr	r1, [pc, #220]	; (8002598 <HAL_RCC_OscConfig+0x240>)
 80024ba:	4313      	orrs	r3, r2
 80024bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024be:	e03a      	b.n	8002536 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d020      	beq.n	800250a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024c8:	4b34      	ldr	r3, [pc, #208]	; (800259c <HAL_RCC_OscConfig+0x244>)
 80024ca:	2201      	movs	r2, #1
 80024cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ce:	f7ff f8bd 	bl	800164c <HAL_GetTick>
 80024d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024d4:	e008      	b.n	80024e8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024d6:	f7ff f8b9 	bl	800164c <HAL_GetTick>
 80024da:	4602      	mov	r2, r0
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	1ad3      	subs	r3, r2, r3
 80024e0:	2b02      	cmp	r3, #2
 80024e2:	d901      	bls.n	80024e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80024e4:	2303      	movs	r3, #3
 80024e6:	e1a8      	b.n	800283a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024e8:	4b2b      	ldr	r3, [pc, #172]	; (8002598 <HAL_RCC_OscConfig+0x240>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 0302 	and.w	r3, r3, #2
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d0f0      	beq.n	80024d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024f4:	4b28      	ldr	r3, [pc, #160]	; (8002598 <HAL_RCC_OscConfig+0x240>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	691b      	ldr	r3, [r3, #16]
 8002500:	00db      	lsls	r3, r3, #3
 8002502:	4925      	ldr	r1, [pc, #148]	; (8002598 <HAL_RCC_OscConfig+0x240>)
 8002504:	4313      	orrs	r3, r2
 8002506:	600b      	str	r3, [r1, #0]
 8002508:	e015      	b.n	8002536 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800250a:	4b24      	ldr	r3, [pc, #144]	; (800259c <HAL_RCC_OscConfig+0x244>)
 800250c:	2200      	movs	r2, #0
 800250e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002510:	f7ff f89c 	bl	800164c <HAL_GetTick>
 8002514:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002516:	e008      	b.n	800252a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002518:	f7ff f898 	bl	800164c <HAL_GetTick>
 800251c:	4602      	mov	r2, r0
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	2b02      	cmp	r3, #2
 8002524:	d901      	bls.n	800252a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002526:	2303      	movs	r3, #3
 8002528:	e187      	b.n	800283a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800252a:	4b1b      	ldr	r3, [pc, #108]	; (8002598 <HAL_RCC_OscConfig+0x240>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 0302 	and.w	r3, r3, #2
 8002532:	2b00      	cmp	r3, #0
 8002534:	d1f0      	bne.n	8002518 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 0308 	and.w	r3, r3, #8
 800253e:	2b00      	cmp	r3, #0
 8002540:	d036      	beq.n	80025b0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	695b      	ldr	r3, [r3, #20]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d016      	beq.n	8002578 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800254a:	4b15      	ldr	r3, [pc, #84]	; (80025a0 <HAL_RCC_OscConfig+0x248>)
 800254c:	2201      	movs	r2, #1
 800254e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002550:	f7ff f87c 	bl	800164c <HAL_GetTick>
 8002554:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002556:	e008      	b.n	800256a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002558:	f7ff f878 	bl	800164c <HAL_GetTick>
 800255c:	4602      	mov	r2, r0
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	2b02      	cmp	r3, #2
 8002564:	d901      	bls.n	800256a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002566:	2303      	movs	r3, #3
 8002568:	e167      	b.n	800283a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800256a:	4b0b      	ldr	r3, [pc, #44]	; (8002598 <HAL_RCC_OscConfig+0x240>)
 800256c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800256e:	f003 0302 	and.w	r3, r3, #2
 8002572:	2b00      	cmp	r3, #0
 8002574:	d0f0      	beq.n	8002558 <HAL_RCC_OscConfig+0x200>
 8002576:	e01b      	b.n	80025b0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002578:	4b09      	ldr	r3, [pc, #36]	; (80025a0 <HAL_RCC_OscConfig+0x248>)
 800257a:	2200      	movs	r2, #0
 800257c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800257e:	f7ff f865 	bl	800164c <HAL_GetTick>
 8002582:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002584:	e00e      	b.n	80025a4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002586:	f7ff f861 	bl	800164c <HAL_GetTick>
 800258a:	4602      	mov	r2, r0
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	1ad3      	subs	r3, r2, r3
 8002590:	2b02      	cmp	r3, #2
 8002592:	d907      	bls.n	80025a4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002594:	2303      	movs	r3, #3
 8002596:	e150      	b.n	800283a <HAL_RCC_OscConfig+0x4e2>
 8002598:	40023800 	.word	0x40023800
 800259c:	42470000 	.word	0x42470000
 80025a0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025a4:	4b88      	ldr	r3, [pc, #544]	; (80027c8 <HAL_RCC_OscConfig+0x470>)
 80025a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025a8:	f003 0302 	and.w	r3, r3, #2
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d1ea      	bne.n	8002586 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f003 0304 	and.w	r3, r3, #4
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	f000 8097 	beq.w	80026ec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025be:	2300      	movs	r3, #0
 80025c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025c2:	4b81      	ldr	r3, [pc, #516]	; (80027c8 <HAL_RCC_OscConfig+0x470>)
 80025c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d10f      	bne.n	80025ee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025ce:	2300      	movs	r3, #0
 80025d0:	60bb      	str	r3, [r7, #8]
 80025d2:	4b7d      	ldr	r3, [pc, #500]	; (80027c8 <HAL_RCC_OscConfig+0x470>)
 80025d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d6:	4a7c      	ldr	r2, [pc, #496]	; (80027c8 <HAL_RCC_OscConfig+0x470>)
 80025d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025dc:	6413      	str	r3, [r2, #64]	; 0x40
 80025de:	4b7a      	ldr	r3, [pc, #488]	; (80027c8 <HAL_RCC_OscConfig+0x470>)
 80025e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025e6:	60bb      	str	r3, [r7, #8]
 80025e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025ea:	2301      	movs	r3, #1
 80025ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025ee:	4b77      	ldr	r3, [pc, #476]	; (80027cc <HAL_RCC_OscConfig+0x474>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d118      	bne.n	800262c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025fa:	4b74      	ldr	r3, [pc, #464]	; (80027cc <HAL_RCC_OscConfig+0x474>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a73      	ldr	r2, [pc, #460]	; (80027cc <HAL_RCC_OscConfig+0x474>)
 8002600:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002604:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002606:	f7ff f821 	bl	800164c <HAL_GetTick>
 800260a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800260c:	e008      	b.n	8002620 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800260e:	f7ff f81d 	bl	800164c <HAL_GetTick>
 8002612:	4602      	mov	r2, r0
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	1ad3      	subs	r3, r2, r3
 8002618:	2b02      	cmp	r3, #2
 800261a:	d901      	bls.n	8002620 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800261c:	2303      	movs	r3, #3
 800261e:	e10c      	b.n	800283a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002620:	4b6a      	ldr	r3, [pc, #424]	; (80027cc <HAL_RCC_OscConfig+0x474>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002628:	2b00      	cmp	r3, #0
 800262a:	d0f0      	beq.n	800260e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	2b01      	cmp	r3, #1
 8002632:	d106      	bne.n	8002642 <HAL_RCC_OscConfig+0x2ea>
 8002634:	4b64      	ldr	r3, [pc, #400]	; (80027c8 <HAL_RCC_OscConfig+0x470>)
 8002636:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002638:	4a63      	ldr	r2, [pc, #396]	; (80027c8 <HAL_RCC_OscConfig+0x470>)
 800263a:	f043 0301 	orr.w	r3, r3, #1
 800263e:	6713      	str	r3, [r2, #112]	; 0x70
 8002640:	e01c      	b.n	800267c <HAL_RCC_OscConfig+0x324>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	2b05      	cmp	r3, #5
 8002648:	d10c      	bne.n	8002664 <HAL_RCC_OscConfig+0x30c>
 800264a:	4b5f      	ldr	r3, [pc, #380]	; (80027c8 <HAL_RCC_OscConfig+0x470>)
 800264c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800264e:	4a5e      	ldr	r2, [pc, #376]	; (80027c8 <HAL_RCC_OscConfig+0x470>)
 8002650:	f043 0304 	orr.w	r3, r3, #4
 8002654:	6713      	str	r3, [r2, #112]	; 0x70
 8002656:	4b5c      	ldr	r3, [pc, #368]	; (80027c8 <HAL_RCC_OscConfig+0x470>)
 8002658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800265a:	4a5b      	ldr	r2, [pc, #364]	; (80027c8 <HAL_RCC_OscConfig+0x470>)
 800265c:	f043 0301 	orr.w	r3, r3, #1
 8002660:	6713      	str	r3, [r2, #112]	; 0x70
 8002662:	e00b      	b.n	800267c <HAL_RCC_OscConfig+0x324>
 8002664:	4b58      	ldr	r3, [pc, #352]	; (80027c8 <HAL_RCC_OscConfig+0x470>)
 8002666:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002668:	4a57      	ldr	r2, [pc, #348]	; (80027c8 <HAL_RCC_OscConfig+0x470>)
 800266a:	f023 0301 	bic.w	r3, r3, #1
 800266e:	6713      	str	r3, [r2, #112]	; 0x70
 8002670:	4b55      	ldr	r3, [pc, #340]	; (80027c8 <HAL_RCC_OscConfig+0x470>)
 8002672:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002674:	4a54      	ldr	r2, [pc, #336]	; (80027c8 <HAL_RCC_OscConfig+0x470>)
 8002676:	f023 0304 	bic.w	r3, r3, #4
 800267a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d015      	beq.n	80026b0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002684:	f7fe ffe2 	bl	800164c <HAL_GetTick>
 8002688:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800268a:	e00a      	b.n	80026a2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800268c:	f7fe ffde 	bl	800164c <HAL_GetTick>
 8002690:	4602      	mov	r2, r0
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	f241 3288 	movw	r2, #5000	; 0x1388
 800269a:	4293      	cmp	r3, r2
 800269c:	d901      	bls.n	80026a2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800269e:	2303      	movs	r3, #3
 80026a0:	e0cb      	b.n	800283a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026a2:	4b49      	ldr	r3, [pc, #292]	; (80027c8 <HAL_RCC_OscConfig+0x470>)
 80026a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026a6:	f003 0302 	and.w	r3, r3, #2
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d0ee      	beq.n	800268c <HAL_RCC_OscConfig+0x334>
 80026ae:	e014      	b.n	80026da <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026b0:	f7fe ffcc 	bl	800164c <HAL_GetTick>
 80026b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026b6:	e00a      	b.n	80026ce <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026b8:	f7fe ffc8 	bl	800164c <HAL_GetTick>
 80026bc:	4602      	mov	r2, r0
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d901      	bls.n	80026ce <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80026ca:	2303      	movs	r3, #3
 80026cc:	e0b5      	b.n	800283a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026ce:	4b3e      	ldr	r3, [pc, #248]	; (80027c8 <HAL_RCC_OscConfig+0x470>)
 80026d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026d2:	f003 0302 	and.w	r3, r3, #2
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d1ee      	bne.n	80026b8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026da:	7dfb      	ldrb	r3, [r7, #23]
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d105      	bne.n	80026ec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026e0:	4b39      	ldr	r3, [pc, #228]	; (80027c8 <HAL_RCC_OscConfig+0x470>)
 80026e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e4:	4a38      	ldr	r2, [pc, #224]	; (80027c8 <HAL_RCC_OscConfig+0x470>)
 80026e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026ea:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	699b      	ldr	r3, [r3, #24]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	f000 80a1 	beq.w	8002838 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80026f6:	4b34      	ldr	r3, [pc, #208]	; (80027c8 <HAL_RCC_OscConfig+0x470>)
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	f003 030c 	and.w	r3, r3, #12
 80026fe:	2b08      	cmp	r3, #8
 8002700:	d05c      	beq.n	80027bc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	699b      	ldr	r3, [r3, #24]
 8002706:	2b02      	cmp	r3, #2
 8002708:	d141      	bne.n	800278e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800270a:	4b31      	ldr	r3, [pc, #196]	; (80027d0 <HAL_RCC_OscConfig+0x478>)
 800270c:	2200      	movs	r2, #0
 800270e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002710:	f7fe ff9c 	bl	800164c <HAL_GetTick>
 8002714:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002716:	e008      	b.n	800272a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002718:	f7fe ff98 	bl	800164c <HAL_GetTick>
 800271c:	4602      	mov	r2, r0
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	2b02      	cmp	r3, #2
 8002724:	d901      	bls.n	800272a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002726:	2303      	movs	r3, #3
 8002728:	e087      	b.n	800283a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800272a:	4b27      	ldr	r3, [pc, #156]	; (80027c8 <HAL_RCC_OscConfig+0x470>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002732:	2b00      	cmp	r3, #0
 8002734:	d1f0      	bne.n	8002718 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	69da      	ldr	r2, [r3, #28]
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6a1b      	ldr	r3, [r3, #32]
 800273e:	431a      	orrs	r2, r3
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002744:	019b      	lsls	r3, r3, #6
 8002746:	431a      	orrs	r2, r3
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800274c:	085b      	lsrs	r3, r3, #1
 800274e:	3b01      	subs	r3, #1
 8002750:	041b      	lsls	r3, r3, #16
 8002752:	431a      	orrs	r2, r3
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002758:	061b      	lsls	r3, r3, #24
 800275a:	491b      	ldr	r1, [pc, #108]	; (80027c8 <HAL_RCC_OscConfig+0x470>)
 800275c:	4313      	orrs	r3, r2
 800275e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002760:	4b1b      	ldr	r3, [pc, #108]	; (80027d0 <HAL_RCC_OscConfig+0x478>)
 8002762:	2201      	movs	r2, #1
 8002764:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002766:	f7fe ff71 	bl	800164c <HAL_GetTick>
 800276a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800276c:	e008      	b.n	8002780 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800276e:	f7fe ff6d 	bl	800164c <HAL_GetTick>
 8002772:	4602      	mov	r2, r0
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	2b02      	cmp	r3, #2
 800277a:	d901      	bls.n	8002780 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800277c:	2303      	movs	r3, #3
 800277e:	e05c      	b.n	800283a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002780:	4b11      	ldr	r3, [pc, #68]	; (80027c8 <HAL_RCC_OscConfig+0x470>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002788:	2b00      	cmp	r3, #0
 800278a:	d0f0      	beq.n	800276e <HAL_RCC_OscConfig+0x416>
 800278c:	e054      	b.n	8002838 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800278e:	4b10      	ldr	r3, [pc, #64]	; (80027d0 <HAL_RCC_OscConfig+0x478>)
 8002790:	2200      	movs	r2, #0
 8002792:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002794:	f7fe ff5a 	bl	800164c <HAL_GetTick>
 8002798:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800279a:	e008      	b.n	80027ae <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800279c:	f7fe ff56 	bl	800164c <HAL_GetTick>
 80027a0:	4602      	mov	r2, r0
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	2b02      	cmp	r3, #2
 80027a8:	d901      	bls.n	80027ae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80027aa:	2303      	movs	r3, #3
 80027ac:	e045      	b.n	800283a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027ae:	4b06      	ldr	r3, [pc, #24]	; (80027c8 <HAL_RCC_OscConfig+0x470>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d1f0      	bne.n	800279c <HAL_RCC_OscConfig+0x444>
 80027ba:	e03d      	b.n	8002838 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	699b      	ldr	r3, [r3, #24]
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d107      	bne.n	80027d4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	e038      	b.n	800283a <HAL_RCC_OscConfig+0x4e2>
 80027c8:	40023800 	.word	0x40023800
 80027cc:	40007000 	.word	0x40007000
 80027d0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80027d4:	4b1b      	ldr	r3, [pc, #108]	; (8002844 <HAL_RCC_OscConfig+0x4ec>)
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	699b      	ldr	r3, [r3, #24]
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d028      	beq.n	8002834 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d121      	bne.n	8002834 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027fa:	429a      	cmp	r2, r3
 80027fc:	d11a      	bne.n	8002834 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027fe:	68fa      	ldr	r2, [r7, #12]
 8002800:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002804:	4013      	ands	r3, r2
 8002806:	687a      	ldr	r2, [r7, #4]
 8002808:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800280a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800280c:	4293      	cmp	r3, r2
 800280e:	d111      	bne.n	8002834 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800281a:	085b      	lsrs	r3, r3, #1
 800281c:	3b01      	subs	r3, #1
 800281e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002820:	429a      	cmp	r2, r3
 8002822:	d107      	bne.n	8002834 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800282e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002830:	429a      	cmp	r2, r3
 8002832:	d001      	beq.n	8002838 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	e000      	b.n	800283a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002838:	2300      	movs	r3, #0
}
 800283a:	4618      	mov	r0, r3
 800283c:	3718      	adds	r7, #24
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	40023800 	.word	0x40023800

08002848 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b084      	sub	sp, #16
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
 8002850:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d101      	bne.n	800285c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	e0cc      	b.n	80029f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800285c:	4b68      	ldr	r3, [pc, #416]	; (8002a00 <HAL_RCC_ClockConfig+0x1b8>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f003 0307 	and.w	r3, r3, #7
 8002864:	683a      	ldr	r2, [r7, #0]
 8002866:	429a      	cmp	r2, r3
 8002868:	d90c      	bls.n	8002884 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800286a:	4b65      	ldr	r3, [pc, #404]	; (8002a00 <HAL_RCC_ClockConfig+0x1b8>)
 800286c:	683a      	ldr	r2, [r7, #0]
 800286e:	b2d2      	uxtb	r2, r2
 8002870:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002872:	4b63      	ldr	r3, [pc, #396]	; (8002a00 <HAL_RCC_ClockConfig+0x1b8>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 0307 	and.w	r3, r3, #7
 800287a:	683a      	ldr	r2, [r7, #0]
 800287c:	429a      	cmp	r2, r3
 800287e:	d001      	beq.n	8002884 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	e0b8      	b.n	80029f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 0302 	and.w	r3, r3, #2
 800288c:	2b00      	cmp	r3, #0
 800288e:	d020      	beq.n	80028d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 0304 	and.w	r3, r3, #4
 8002898:	2b00      	cmp	r3, #0
 800289a:	d005      	beq.n	80028a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800289c:	4b59      	ldr	r3, [pc, #356]	; (8002a04 <HAL_RCC_ClockConfig+0x1bc>)
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	4a58      	ldr	r2, [pc, #352]	; (8002a04 <HAL_RCC_ClockConfig+0x1bc>)
 80028a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80028a6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 0308 	and.w	r3, r3, #8
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d005      	beq.n	80028c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028b4:	4b53      	ldr	r3, [pc, #332]	; (8002a04 <HAL_RCC_ClockConfig+0x1bc>)
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	4a52      	ldr	r2, [pc, #328]	; (8002a04 <HAL_RCC_ClockConfig+0x1bc>)
 80028ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80028be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028c0:	4b50      	ldr	r3, [pc, #320]	; (8002a04 <HAL_RCC_ClockConfig+0x1bc>)
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	494d      	ldr	r1, [pc, #308]	; (8002a04 <HAL_RCC_ClockConfig+0x1bc>)
 80028ce:	4313      	orrs	r3, r2
 80028d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 0301 	and.w	r3, r3, #1
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d044      	beq.n	8002968 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d107      	bne.n	80028f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028e6:	4b47      	ldr	r3, [pc, #284]	; (8002a04 <HAL_RCC_ClockConfig+0x1bc>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d119      	bne.n	8002926 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e07f      	b.n	80029f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	d003      	beq.n	8002906 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002902:	2b03      	cmp	r3, #3
 8002904:	d107      	bne.n	8002916 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002906:	4b3f      	ldr	r3, [pc, #252]	; (8002a04 <HAL_RCC_ClockConfig+0x1bc>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800290e:	2b00      	cmp	r3, #0
 8002910:	d109      	bne.n	8002926 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e06f      	b.n	80029f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002916:	4b3b      	ldr	r3, [pc, #236]	; (8002a04 <HAL_RCC_ClockConfig+0x1bc>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 0302 	and.w	r3, r3, #2
 800291e:	2b00      	cmp	r3, #0
 8002920:	d101      	bne.n	8002926 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e067      	b.n	80029f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002926:	4b37      	ldr	r3, [pc, #220]	; (8002a04 <HAL_RCC_ClockConfig+0x1bc>)
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	f023 0203 	bic.w	r2, r3, #3
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	4934      	ldr	r1, [pc, #208]	; (8002a04 <HAL_RCC_ClockConfig+0x1bc>)
 8002934:	4313      	orrs	r3, r2
 8002936:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002938:	f7fe fe88 	bl	800164c <HAL_GetTick>
 800293c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800293e:	e00a      	b.n	8002956 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002940:	f7fe fe84 	bl	800164c <HAL_GetTick>
 8002944:	4602      	mov	r2, r0
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	f241 3288 	movw	r2, #5000	; 0x1388
 800294e:	4293      	cmp	r3, r2
 8002950:	d901      	bls.n	8002956 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002952:	2303      	movs	r3, #3
 8002954:	e04f      	b.n	80029f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002956:	4b2b      	ldr	r3, [pc, #172]	; (8002a04 <HAL_RCC_ClockConfig+0x1bc>)
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	f003 020c 	and.w	r2, r3, #12
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	429a      	cmp	r2, r3
 8002966:	d1eb      	bne.n	8002940 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002968:	4b25      	ldr	r3, [pc, #148]	; (8002a00 <HAL_RCC_ClockConfig+0x1b8>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 0307 	and.w	r3, r3, #7
 8002970:	683a      	ldr	r2, [r7, #0]
 8002972:	429a      	cmp	r2, r3
 8002974:	d20c      	bcs.n	8002990 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002976:	4b22      	ldr	r3, [pc, #136]	; (8002a00 <HAL_RCC_ClockConfig+0x1b8>)
 8002978:	683a      	ldr	r2, [r7, #0]
 800297a:	b2d2      	uxtb	r2, r2
 800297c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800297e:	4b20      	ldr	r3, [pc, #128]	; (8002a00 <HAL_RCC_ClockConfig+0x1b8>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0307 	and.w	r3, r3, #7
 8002986:	683a      	ldr	r2, [r7, #0]
 8002988:	429a      	cmp	r2, r3
 800298a:	d001      	beq.n	8002990 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	e032      	b.n	80029f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 0304 	and.w	r3, r3, #4
 8002998:	2b00      	cmp	r3, #0
 800299a:	d008      	beq.n	80029ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800299c:	4b19      	ldr	r3, [pc, #100]	; (8002a04 <HAL_RCC_ClockConfig+0x1bc>)
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	4916      	ldr	r1, [pc, #88]	; (8002a04 <HAL_RCC_ClockConfig+0x1bc>)
 80029aa:	4313      	orrs	r3, r2
 80029ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 0308 	and.w	r3, r3, #8
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d009      	beq.n	80029ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029ba:	4b12      	ldr	r3, [pc, #72]	; (8002a04 <HAL_RCC_ClockConfig+0x1bc>)
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	691b      	ldr	r3, [r3, #16]
 80029c6:	00db      	lsls	r3, r3, #3
 80029c8:	490e      	ldr	r1, [pc, #56]	; (8002a04 <HAL_RCC_ClockConfig+0x1bc>)
 80029ca:	4313      	orrs	r3, r2
 80029cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80029ce:	f000 f821 	bl	8002a14 <HAL_RCC_GetSysClockFreq>
 80029d2:	4602      	mov	r2, r0
 80029d4:	4b0b      	ldr	r3, [pc, #44]	; (8002a04 <HAL_RCC_ClockConfig+0x1bc>)
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	091b      	lsrs	r3, r3, #4
 80029da:	f003 030f 	and.w	r3, r3, #15
 80029de:	490a      	ldr	r1, [pc, #40]	; (8002a08 <HAL_RCC_ClockConfig+0x1c0>)
 80029e0:	5ccb      	ldrb	r3, [r1, r3]
 80029e2:	fa22 f303 	lsr.w	r3, r2, r3
 80029e6:	4a09      	ldr	r2, [pc, #36]	; (8002a0c <HAL_RCC_ClockConfig+0x1c4>)
 80029e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80029ea:	4b09      	ldr	r3, [pc, #36]	; (8002a10 <HAL_RCC_ClockConfig+0x1c8>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4618      	mov	r0, r3
 80029f0:	f7fe fde8 	bl	80015c4 <HAL_InitTick>

  return HAL_OK;
 80029f4:	2300      	movs	r3, #0
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3710      	adds	r7, #16
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	40023c00 	.word	0x40023c00
 8002a04:	40023800 	.word	0x40023800
 8002a08:	080077f8 	.word	0x080077f8
 8002a0c:	20000000 	.word	0x20000000
 8002a10:	20000004 	.word	0x20000004

08002a14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a18:	b094      	sub	sp, #80	; 0x50
 8002a1a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	647b      	str	r3, [r7, #68]	; 0x44
 8002a20:	2300      	movs	r3, #0
 8002a22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a24:	2300      	movs	r3, #0
 8002a26:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a2c:	4b79      	ldr	r3, [pc, #484]	; (8002c14 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	f003 030c 	and.w	r3, r3, #12
 8002a34:	2b08      	cmp	r3, #8
 8002a36:	d00d      	beq.n	8002a54 <HAL_RCC_GetSysClockFreq+0x40>
 8002a38:	2b08      	cmp	r3, #8
 8002a3a:	f200 80e1 	bhi.w	8002c00 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d002      	beq.n	8002a48 <HAL_RCC_GetSysClockFreq+0x34>
 8002a42:	2b04      	cmp	r3, #4
 8002a44:	d003      	beq.n	8002a4e <HAL_RCC_GetSysClockFreq+0x3a>
 8002a46:	e0db      	b.n	8002c00 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a48:	4b73      	ldr	r3, [pc, #460]	; (8002c18 <HAL_RCC_GetSysClockFreq+0x204>)
 8002a4a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002a4c:	e0db      	b.n	8002c06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a4e:	4b73      	ldr	r3, [pc, #460]	; (8002c1c <HAL_RCC_GetSysClockFreq+0x208>)
 8002a50:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a52:	e0d8      	b.n	8002c06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a54:	4b6f      	ldr	r3, [pc, #444]	; (8002c14 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a5c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a5e:	4b6d      	ldr	r3, [pc, #436]	; (8002c14 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d063      	beq.n	8002b32 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a6a:	4b6a      	ldr	r3, [pc, #424]	; (8002c14 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	099b      	lsrs	r3, r3, #6
 8002a70:	2200      	movs	r2, #0
 8002a72:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a74:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a7c:	633b      	str	r3, [r7, #48]	; 0x30
 8002a7e:	2300      	movs	r3, #0
 8002a80:	637b      	str	r3, [r7, #52]	; 0x34
 8002a82:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002a86:	4622      	mov	r2, r4
 8002a88:	462b      	mov	r3, r5
 8002a8a:	f04f 0000 	mov.w	r0, #0
 8002a8e:	f04f 0100 	mov.w	r1, #0
 8002a92:	0159      	lsls	r1, r3, #5
 8002a94:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a98:	0150      	lsls	r0, r2, #5
 8002a9a:	4602      	mov	r2, r0
 8002a9c:	460b      	mov	r3, r1
 8002a9e:	4621      	mov	r1, r4
 8002aa0:	1a51      	subs	r1, r2, r1
 8002aa2:	6139      	str	r1, [r7, #16]
 8002aa4:	4629      	mov	r1, r5
 8002aa6:	eb63 0301 	sbc.w	r3, r3, r1
 8002aaa:	617b      	str	r3, [r7, #20]
 8002aac:	f04f 0200 	mov.w	r2, #0
 8002ab0:	f04f 0300 	mov.w	r3, #0
 8002ab4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ab8:	4659      	mov	r1, fp
 8002aba:	018b      	lsls	r3, r1, #6
 8002abc:	4651      	mov	r1, sl
 8002abe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ac2:	4651      	mov	r1, sl
 8002ac4:	018a      	lsls	r2, r1, #6
 8002ac6:	4651      	mov	r1, sl
 8002ac8:	ebb2 0801 	subs.w	r8, r2, r1
 8002acc:	4659      	mov	r1, fp
 8002ace:	eb63 0901 	sbc.w	r9, r3, r1
 8002ad2:	f04f 0200 	mov.w	r2, #0
 8002ad6:	f04f 0300 	mov.w	r3, #0
 8002ada:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ade:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002ae2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002ae6:	4690      	mov	r8, r2
 8002ae8:	4699      	mov	r9, r3
 8002aea:	4623      	mov	r3, r4
 8002aec:	eb18 0303 	adds.w	r3, r8, r3
 8002af0:	60bb      	str	r3, [r7, #8]
 8002af2:	462b      	mov	r3, r5
 8002af4:	eb49 0303 	adc.w	r3, r9, r3
 8002af8:	60fb      	str	r3, [r7, #12]
 8002afa:	f04f 0200 	mov.w	r2, #0
 8002afe:	f04f 0300 	mov.w	r3, #0
 8002b02:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002b06:	4629      	mov	r1, r5
 8002b08:	024b      	lsls	r3, r1, #9
 8002b0a:	4621      	mov	r1, r4
 8002b0c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002b10:	4621      	mov	r1, r4
 8002b12:	024a      	lsls	r2, r1, #9
 8002b14:	4610      	mov	r0, r2
 8002b16:	4619      	mov	r1, r3
 8002b18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b1e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002b20:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002b24:	f7fd fb5c 	bl	80001e0 <__aeabi_uldivmod>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	460b      	mov	r3, r1
 8002b2c:	4613      	mov	r3, r2
 8002b2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b30:	e058      	b.n	8002be4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b32:	4b38      	ldr	r3, [pc, #224]	; (8002c14 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	099b      	lsrs	r3, r3, #6
 8002b38:	2200      	movs	r2, #0
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	4611      	mov	r1, r2
 8002b3e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002b42:	623b      	str	r3, [r7, #32]
 8002b44:	2300      	movs	r3, #0
 8002b46:	627b      	str	r3, [r7, #36]	; 0x24
 8002b48:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002b4c:	4642      	mov	r2, r8
 8002b4e:	464b      	mov	r3, r9
 8002b50:	f04f 0000 	mov.w	r0, #0
 8002b54:	f04f 0100 	mov.w	r1, #0
 8002b58:	0159      	lsls	r1, r3, #5
 8002b5a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b5e:	0150      	lsls	r0, r2, #5
 8002b60:	4602      	mov	r2, r0
 8002b62:	460b      	mov	r3, r1
 8002b64:	4641      	mov	r1, r8
 8002b66:	ebb2 0a01 	subs.w	sl, r2, r1
 8002b6a:	4649      	mov	r1, r9
 8002b6c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002b70:	f04f 0200 	mov.w	r2, #0
 8002b74:	f04f 0300 	mov.w	r3, #0
 8002b78:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002b7c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002b80:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002b84:	ebb2 040a 	subs.w	r4, r2, sl
 8002b88:	eb63 050b 	sbc.w	r5, r3, fp
 8002b8c:	f04f 0200 	mov.w	r2, #0
 8002b90:	f04f 0300 	mov.w	r3, #0
 8002b94:	00eb      	lsls	r3, r5, #3
 8002b96:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b9a:	00e2      	lsls	r2, r4, #3
 8002b9c:	4614      	mov	r4, r2
 8002b9e:	461d      	mov	r5, r3
 8002ba0:	4643      	mov	r3, r8
 8002ba2:	18e3      	adds	r3, r4, r3
 8002ba4:	603b      	str	r3, [r7, #0]
 8002ba6:	464b      	mov	r3, r9
 8002ba8:	eb45 0303 	adc.w	r3, r5, r3
 8002bac:	607b      	str	r3, [r7, #4]
 8002bae:	f04f 0200 	mov.w	r2, #0
 8002bb2:	f04f 0300 	mov.w	r3, #0
 8002bb6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002bba:	4629      	mov	r1, r5
 8002bbc:	028b      	lsls	r3, r1, #10
 8002bbe:	4621      	mov	r1, r4
 8002bc0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002bc4:	4621      	mov	r1, r4
 8002bc6:	028a      	lsls	r2, r1, #10
 8002bc8:	4610      	mov	r0, r2
 8002bca:	4619      	mov	r1, r3
 8002bcc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bce:	2200      	movs	r2, #0
 8002bd0:	61bb      	str	r3, [r7, #24]
 8002bd2:	61fa      	str	r2, [r7, #28]
 8002bd4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002bd8:	f7fd fb02 	bl	80001e0 <__aeabi_uldivmod>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	460b      	mov	r3, r1
 8002be0:	4613      	mov	r3, r2
 8002be2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002be4:	4b0b      	ldr	r3, [pc, #44]	; (8002c14 <HAL_RCC_GetSysClockFreq+0x200>)
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	0c1b      	lsrs	r3, r3, #16
 8002bea:	f003 0303 	and.w	r3, r3, #3
 8002bee:	3301      	adds	r3, #1
 8002bf0:	005b      	lsls	r3, r3, #1
 8002bf2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002bf4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002bf6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bfc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002bfe:	e002      	b.n	8002c06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c00:	4b05      	ldr	r3, [pc, #20]	; (8002c18 <HAL_RCC_GetSysClockFreq+0x204>)
 8002c02:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	3750      	adds	r7, #80	; 0x50
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c12:	bf00      	nop
 8002c14:	40023800 	.word	0x40023800
 8002c18:	00f42400 	.word	0x00f42400
 8002c1c:	007a1200 	.word	0x007a1200

08002c20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c20:	b480      	push	{r7}
 8002c22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c24:	4b03      	ldr	r3, [pc, #12]	; (8002c34 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c26:	681b      	ldr	r3, [r3, #0]
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr
 8002c32:	bf00      	nop
 8002c34:	20000000 	.word	0x20000000

08002c38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002c3c:	f7ff fff0 	bl	8002c20 <HAL_RCC_GetHCLKFreq>
 8002c40:	4602      	mov	r2, r0
 8002c42:	4b05      	ldr	r3, [pc, #20]	; (8002c58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	0a9b      	lsrs	r3, r3, #10
 8002c48:	f003 0307 	and.w	r3, r3, #7
 8002c4c:	4903      	ldr	r1, [pc, #12]	; (8002c5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c4e:	5ccb      	ldrb	r3, [r1, r3]
 8002c50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	bd80      	pop	{r7, pc}
 8002c58:	40023800 	.word	0x40023800
 8002c5c:	08007808 	.word	0x08007808

08002c60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002c64:	f7ff ffdc 	bl	8002c20 <HAL_RCC_GetHCLKFreq>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	4b05      	ldr	r3, [pc, #20]	; (8002c80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	0b5b      	lsrs	r3, r3, #13
 8002c70:	f003 0307 	and.w	r3, r3, #7
 8002c74:	4903      	ldr	r1, [pc, #12]	; (8002c84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c76:	5ccb      	ldrb	r3, [r1, r3]
 8002c78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	bd80      	pop	{r7, pc}
 8002c80:	40023800 	.word	0x40023800
 8002c84:	08007808 	.word	0x08007808

08002c88 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b082      	sub	sp, #8
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d101      	bne.n	8002c9a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e07b      	b.n	8002d92 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d108      	bne.n	8002cb4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002caa:	d009      	beq.n	8002cc0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	61da      	str	r2, [r3, #28]
 8002cb2:	e005      	b.n	8002cc0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d106      	bne.n	8002ce0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f7fe f9a6 	bl	800102c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2202      	movs	r2, #2
 8002ce4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002cf6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002d08:	431a      	orrs	r2, r3
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	68db      	ldr	r3, [r3, #12]
 8002d0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d12:	431a      	orrs	r2, r3
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	691b      	ldr	r3, [r3, #16]
 8002d18:	f003 0302 	and.w	r3, r3, #2
 8002d1c:	431a      	orrs	r2, r3
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	695b      	ldr	r3, [r3, #20]
 8002d22:	f003 0301 	and.w	r3, r3, #1
 8002d26:	431a      	orrs	r2, r3
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	699b      	ldr	r3, [r3, #24]
 8002d2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d30:	431a      	orrs	r2, r3
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	69db      	ldr	r3, [r3, #28]
 8002d36:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002d3a:	431a      	orrs	r2, r3
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6a1b      	ldr	r3, [r3, #32]
 8002d40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d44:	ea42 0103 	orr.w	r1, r2, r3
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d4c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	430a      	orrs	r2, r1
 8002d56:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	699b      	ldr	r3, [r3, #24]
 8002d5c:	0c1b      	lsrs	r3, r3, #16
 8002d5e:	f003 0104 	and.w	r1, r3, #4
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d66:	f003 0210 	and.w	r2, r3, #16
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	430a      	orrs	r2, r1
 8002d70:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	69da      	ldr	r2, [r3, #28]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d80:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2200      	movs	r2, #0
 8002d86:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002d90:	2300      	movs	r3, #0
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3708      	adds	r7, #8
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}

08002d9a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002d9a:	b580      	push	{r7, lr}
 8002d9c:	b082      	sub	sp, #8
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d101      	bne.n	8002dac <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	e041      	b.n	8002e30 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d106      	bne.n	8002dc6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002dc0:	6878      	ldr	r0, [r7, #4]
 8002dc2:	f7fe fa25 	bl	8001210 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2202      	movs	r2, #2
 8002dca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	3304      	adds	r3, #4
 8002dd6:	4619      	mov	r1, r3
 8002dd8:	4610      	mov	r0, r2
 8002dda:	f000 f8ef 	bl	8002fbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2201      	movs	r2, #1
 8002de2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2201      	movs	r2, #1
 8002dea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2201      	movs	r2, #1
 8002df2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2201      	movs	r2, #1
 8002dfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2201      	movs	r2, #1
 8002e02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2201      	movs	r2, #1
 8002e0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2201      	movs	r2, #1
 8002e12:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2201      	movs	r2, #1
 8002e1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2201      	movs	r2, #1
 8002e22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2201      	movs	r2, #1
 8002e2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e2e:	2300      	movs	r3, #0
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	3708      	adds	r7, #8
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}

08002e38 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b086      	sub	sp, #24
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	60f8      	str	r0, [r7, #12]
 8002e40:	60b9      	str	r1, [r7, #8]
 8002e42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e44:	2300      	movs	r3, #0
 8002e46:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d101      	bne.n	8002e56 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002e52:	2302      	movs	r3, #2
 8002e54:	e0ae      	b.n	8002fb4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2201      	movs	r2, #1
 8002e5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2b0c      	cmp	r3, #12
 8002e62:	f200 809f 	bhi.w	8002fa4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002e66:	a201      	add	r2, pc, #4	; (adr r2, 8002e6c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002e68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e6c:	08002ea1 	.word	0x08002ea1
 8002e70:	08002fa5 	.word	0x08002fa5
 8002e74:	08002fa5 	.word	0x08002fa5
 8002e78:	08002fa5 	.word	0x08002fa5
 8002e7c:	08002ee1 	.word	0x08002ee1
 8002e80:	08002fa5 	.word	0x08002fa5
 8002e84:	08002fa5 	.word	0x08002fa5
 8002e88:	08002fa5 	.word	0x08002fa5
 8002e8c:	08002f23 	.word	0x08002f23
 8002e90:	08002fa5 	.word	0x08002fa5
 8002e94:	08002fa5 	.word	0x08002fa5
 8002e98:	08002fa5 	.word	0x08002fa5
 8002e9c:	08002f63 	.word	0x08002f63
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	68b9      	ldr	r1, [r7, #8]
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f000 f908 	bl	80030bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	699a      	ldr	r2, [r3, #24]
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f042 0208 	orr.w	r2, r2, #8
 8002eba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	699a      	ldr	r2, [r3, #24]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f022 0204 	bic.w	r2, r2, #4
 8002eca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	6999      	ldr	r1, [r3, #24]
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	691a      	ldr	r2, [r3, #16]
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	430a      	orrs	r2, r1
 8002edc:	619a      	str	r2, [r3, #24]
      break;
 8002ede:	e064      	b.n	8002faa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	68b9      	ldr	r1, [r7, #8]
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f000 f94e 	bl	8003188 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	699a      	ldr	r2, [r3, #24]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002efa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	699a      	ldr	r2, [r3, #24]
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	6999      	ldr	r1, [r3, #24]
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	691b      	ldr	r3, [r3, #16]
 8002f16:	021a      	lsls	r2, r3, #8
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	430a      	orrs	r2, r1
 8002f1e:	619a      	str	r2, [r3, #24]
      break;
 8002f20:	e043      	b.n	8002faa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	68b9      	ldr	r1, [r7, #8]
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f000 f999 	bl	8003260 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	69da      	ldr	r2, [r3, #28]
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f042 0208 	orr.w	r2, r2, #8
 8002f3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	69da      	ldr	r2, [r3, #28]
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f022 0204 	bic.w	r2, r2, #4
 8002f4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	69d9      	ldr	r1, [r3, #28]
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	691a      	ldr	r2, [r3, #16]
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	430a      	orrs	r2, r1
 8002f5e:	61da      	str	r2, [r3, #28]
      break;
 8002f60:	e023      	b.n	8002faa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	68b9      	ldr	r1, [r7, #8]
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f000 f9e3 	bl	8003334 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	69da      	ldr	r2, [r3, #28]
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	69da      	ldr	r2, [r3, #28]
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	69d9      	ldr	r1, [r3, #28]
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	691b      	ldr	r3, [r3, #16]
 8002f98:	021a      	lsls	r2, r3, #8
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	430a      	orrs	r2, r1
 8002fa0:	61da      	str	r2, [r3, #28]
      break;
 8002fa2:	e002      	b.n	8002faa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	75fb      	strb	r3, [r7, #23]
      break;
 8002fa8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2200      	movs	r2, #0
 8002fae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002fb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3718      	adds	r7, #24
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}

08002fbc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b085      	sub	sp, #20
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
 8002fc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	4a34      	ldr	r2, [pc, #208]	; (80030a0 <TIM_Base_SetConfig+0xe4>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d00f      	beq.n	8002ff4 <TIM_Base_SetConfig+0x38>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fda:	d00b      	beq.n	8002ff4 <TIM_Base_SetConfig+0x38>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	4a31      	ldr	r2, [pc, #196]	; (80030a4 <TIM_Base_SetConfig+0xe8>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d007      	beq.n	8002ff4 <TIM_Base_SetConfig+0x38>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	4a30      	ldr	r2, [pc, #192]	; (80030a8 <TIM_Base_SetConfig+0xec>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d003      	beq.n	8002ff4 <TIM_Base_SetConfig+0x38>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	4a2f      	ldr	r2, [pc, #188]	; (80030ac <TIM_Base_SetConfig+0xf0>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d108      	bne.n	8003006 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ffa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	68fa      	ldr	r2, [r7, #12]
 8003002:	4313      	orrs	r3, r2
 8003004:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	4a25      	ldr	r2, [pc, #148]	; (80030a0 <TIM_Base_SetConfig+0xe4>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d01b      	beq.n	8003046 <TIM_Base_SetConfig+0x8a>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003014:	d017      	beq.n	8003046 <TIM_Base_SetConfig+0x8a>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	4a22      	ldr	r2, [pc, #136]	; (80030a4 <TIM_Base_SetConfig+0xe8>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d013      	beq.n	8003046 <TIM_Base_SetConfig+0x8a>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	4a21      	ldr	r2, [pc, #132]	; (80030a8 <TIM_Base_SetConfig+0xec>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d00f      	beq.n	8003046 <TIM_Base_SetConfig+0x8a>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	4a20      	ldr	r2, [pc, #128]	; (80030ac <TIM_Base_SetConfig+0xf0>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d00b      	beq.n	8003046 <TIM_Base_SetConfig+0x8a>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	4a1f      	ldr	r2, [pc, #124]	; (80030b0 <TIM_Base_SetConfig+0xf4>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d007      	beq.n	8003046 <TIM_Base_SetConfig+0x8a>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	4a1e      	ldr	r2, [pc, #120]	; (80030b4 <TIM_Base_SetConfig+0xf8>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d003      	beq.n	8003046 <TIM_Base_SetConfig+0x8a>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	4a1d      	ldr	r2, [pc, #116]	; (80030b8 <TIM_Base_SetConfig+0xfc>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d108      	bne.n	8003058 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800304c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	68db      	ldr	r3, [r3, #12]
 8003052:	68fa      	ldr	r2, [r7, #12]
 8003054:	4313      	orrs	r3, r2
 8003056:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	695b      	ldr	r3, [r3, #20]
 8003062:	4313      	orrs	r3, r2
 8003064:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	68fa      	ldr	r2, [r7, #12]
 800306a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	689a      	ldr	r2, [r3, #8]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	4a08      	ldr	r2, [pc, #32]	; (80030a0 <TIM_Base_SetConfig+0xe4>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d103      	bne.n	800308c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	691a      	ldr	r2, [r3, #16]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2201      	movs	r2, #1
 8003090:	615a      	str	r2, [r3, #20]
}
 8003092:	bf00      	nop
 8003094:	3714      	adds	r7, #20
 8003096:	46bd      	mov	sp, r7
 8003098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309c:	4770      	bx	lr
 800309e:	bf00      	nop
 80030a0:	40010000 	.word	0x40010000
 80030a4:	40000400 	.word	0x40000400
 80030a8:	40000800 	.word	0x40000800
 80030ac:	40000c00 	.word	0x40000c00
 80030b0:	40014000 	.word	0x40014000
 80030b4:	40014400 	.word	0x40014400
 80030b8:	40014800 	.word	0x40014800

080030bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80030bc:	b480      	push	{r7}
 80030be:	b087      	sub	sp, #28
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
 80030c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6a1b      	ldr	r3, [r3, #32]
 80030ca:	f023 0201 	bic.w	r2, r3, #1
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6a1b      	ldr	r3, [r3, #32]
 80030d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	699b      	ldr	r3, [r3, #24]
 80030e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	f023 0303 	bic.w	r3, r3, #3
 80030f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	68fa      	ldr	r2, [r7, #12]
 80030fa:	4313      	orrs	r3, r2
 80030fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	f023 0302 	bic.w	r3, r3, #2
 8003104:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	697a      	ldr	r2, [r7, #20]
 800310c:	4313      	orrs	r3, r2
 800310e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	4a1c      	ldr	r2, [pc, #112]	; (8003184 <TIM_OC1_SetConfig+0xc8>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d10c      	bne.n	8003132 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	f023 0308 	bic.w	r3, r3, #8
 800311e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	697a      	ldr	r2, [r7, #20]
 8003126:	4313      	orrs	r3, r2
 8003128:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	f023 0304 	bic.w	r3, r3, #4
 8003130:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	4a13      	ldr	r2, [pc, #76]	; (8003184 <TIM_OC1_SetConfig+0xc8>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d111      	bne.n	800315e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003140:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003148:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	695b      	ldr	r3, [r3, #20]
 800314e:	693a      	ldr	r2, [r7, #16]
 8003150:	4313      	orrs	r3, r2
 8003152:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	699b      	ldr	r3, [r3, #24]
 8003158:	693a      	ldr	r2, [r7, #16]
 800315a:	4313      	orrs	r3, r2
 800315c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	693a      	ldr	r2, [r7, #16]
 8003162:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	68fa      	ldr	r2, [r7, #12]
 8003168:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	685a      	ldr	r2, [r3, #4]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	697a      	ldr	r2, [r7, #20]
 8003176:	621a      	str	r2, [r3, #32]
}
 8003178:	bf00      	nop
 800317a:	371c      	adds	r7, #28
 800317c:	46bd      	mov	sp, r7
 800317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003182:	4770      	bx	lr
 8003184:	40010000 	.word	0x40010000

08003188 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003188:	b480      	push	{r7}
 800318a:	b087      	sub	sp, #28
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
 8003190:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6a1b      	ldr	r3, [r3, #32]
 8003196:	f023 0210 	bic.w	r2, r3, #16
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6a1b      	ldr	r3, [r3, #32]
 80031a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	699b      	ldr	r3, [r3, #24]
 80031ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	021b      	lsls	r3, r3, #8
 80031c6:	68fa      	ldr	r2, [r7, #12]
 80031c8:	4313      	orrs	r3, r2
 80031ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	f023 0320 	bic.w	r3, r3, #32
 80031d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	011b      	lsls	r3, r3, #4
 80031da:	697a      	ldr	r2, [r7, #20]
 80031dc:	4313      	orrs	r3, r2
 80031de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	4a1e      	ldr	r2, [pc, #120]	; (800325c <TIM_OC2_SetConfig+0xd4>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d10d      	bne.n	8003204 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	68db      	ldr	r3, [r3, #12]
 80031f4:	011b      	lsls	r3, r3, #4
 80031f6:	697a      	ldr	r2, [r7, #20]
 80031f8:	4313      	orrs	r3, r2
 80031fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003202:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	4a15      	ldr	r2, [pc, #84]	; (800325c <TIM_OC2_SetConfig+0xd4>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d113      	bne.n	8003234 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003212:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800321a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	695b      	ldr	r3, [r3, #20]
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	693a      	ldr	r2, [r7, #16]
 8003224:	4313      	orrs	r3, r2
 8003226:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	699b      	ldr	r3, [r3, #24]
 800322c:	009b      	lsls	r3, r3, #2
 800322e:	693a      	ldr	r2, [r7, #16]
 8003230:	4313      	orrs	r3, r2
 8003232:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	693a      	ldr	r2, [r7, #16]
 8003238:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	68fa      	ldr	r2, [r7, #12]
 800323e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	685a      	ldr	r2, [r3, #4]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	697a      	ldr	r2, [r7, #20]
 800324c:	621a      	str	r2, [r3, #32]
}
 800324e:	bf00      	nop
 8003250:	371c      	adds	r7, #28
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr
 800325a:	bf00      	nop
 800325c:	40010000 	.word	0x40010000

08003260 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003260:	b480      	push	{r7}
 8003262:	b087      	sub	sp, #28
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
 8003268:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6a1b      	ldr	r3, [r3, #32]
 800326e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6a1b      	ldr	r3, [r3, #32]
 800327a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	69db      	ldr	r3, [r3, #28]
 8003286:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800328e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	f023 0303 	bic.w	r3, r3, #3
 8003296:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	68fa      	ldr	r2, [r7, #12]
 800329e:	4313      	orrs	r3, r2
 80032a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80032a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	021b      	lsls	r3, r3, #8
 80032b0:	697a      	ldr	r2, [r7, #20]
 80032b2:	4313      	orrs	r3, r2
 80032b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	4a1d      	ldr	r2, [pc, #116]	; (8003330 <TIM_OC3_SetConfig+0xd0>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d10d      	bne.n	80032da <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80032c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	68db      	ldr	r3, [r3, #12]
 80032ca:	021b      	lsls	r3, r3, #8
 80032cc:	697a      	ldr	r2, [r7, #20]
 80032ce:	4313      	orrs	r3, r2
 80032d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80032d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4a14      	ldr	r2, [pc, #80]	; (8003330 <TIM_OC3_SetConfig+0xd0>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d113      	bne.n	800330a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80032e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80032f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	695b      	ldr	r3, [r3, #20]
 80032f6:	011b      	lsls	r3, r3, #4
 80032f8:	693a      	ldr	r2, [r7, #16]
 80032fa:	4313      	orrs	r3, r2
 80032fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	699b      	ldr	r3, [r3, #24]
 8003302:	011b      	lsls	r3, r3, #4
 8003304:	693a      	ldr	r2, [r7, #16]
 8003306:	4313      	orrs	r3, r2
 8003308:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	693a      	ldr	r2, [r7, #16]
 800330e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	68fa      	ldr	r2, [r7, #12]
 8003314:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	685a      	ldr	r2, [r3, #4]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	697a      	ldr	r2, [r7, #20]
 8003322:	621a      	str	r2, [r3, #32]
}
 8003324:	bf00      	nop
 8003326:	371c      	adds	r7, #28
 8003328:	46bd      	mov	sp, r7
 800332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332e:	4770      	bx	lr
 8003330:	40010000 	.word	0x40010000

08003334 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003334:	b480      	push	{r7}
 8003336:	b087      	sub	sp, #28
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
 800333c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6a1b      	ldr	r3, [r3, #32]
 8003342:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6a1b      	ldr	r3, [r3, #32]
 800334e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	69db      	ldr	r3, [r3, #28]
 800335a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003362:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800336a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	021b      	lsls	r3, r3, #8
 8003372:	68fa      	ldr	r2, [r7, #12]
 8003374:	4313      	orrs	r3, r2
 8003376:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800337e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	031b      	lsls	r3, r3, #12
 8003386:	693a      	ldr	r2, [r7, #16]
 8003388:	4313      	orrs	r3, r2
 800338a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	4a10      	ldr	r2, [pc, #64]	; (80033d0 <TIM_OC4_SetConfig+0x9c>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d109      	bne.n	80033a8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800339a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	695b      	ldr	r3, [r3, #20]
 80033a0:	019b      	lsls	r3, r3, #6
 80033a2:	697a      	ldr	r2, [r7, #20]
 80033a4:	4313      	orrs	r3, r2
 80033a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	697a      	ldr	r2, [r7, #20]
 80033ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	68fa      	ldr	r2, [r7, #12]
 80033b2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	685a      	ldr	r2, [r3, #4]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	693a      	ldr	r2, [r7, #16]
 80033c0:	621a      	str	r2, [r3, #32]
}
 80033c2:	bf00      	nop
 80033c4:	371c      	adds	r7, #28
 80033c6:	46bd      	mov	sp, r7
 80033c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033cc:	4770      	bx	lr
 80033ce:	bf00      	nop
 80033d0:	40010000 	.word	0x40010000

080033d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b085      	sub	sp, #20
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
 80033dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d101      	bne.n	80033ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80033e8:	2302      	movs	r3, #2
 80033ea:	e050      	b.n	800348e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2201      	movs	r2, #1
 80033f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2202      	movs	r2, #2
 80033f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003412:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	68fa      	ldr	r2, [r7, #12]
 800341a:	4313      	orrs	r3, r2
 800341c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	68fa      	ldr	r2, [r7, #12]
 8003424:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a1c      	ldr	r2, [pc, #112]	; (800349c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d018      	beq.n	8003462 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003438:	d013      	beq.n	8003462 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a18      	ldr	r2, [pc, #96]	; (80034a0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d00e      	beq.n	8003462 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a16      	ldr	r2, [pc, #88]	; (80034a4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d009      	beq.n	8003462 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a15      	ldr	r2, [pc, #84]	; (80034a8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d004      	beq.n	8003462 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a13      	ldr	r2, [pc, #76]	; (80034ac <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d10c      	bne.n	800347c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003468:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	68ba      	ldr	r2, [r7, #8]
 8003470:	4313      	orrs	r3, r2
 8003472:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	68ba      	ldr	r2, [r7, #8]
 800347a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2201      	movs	r2, #1
 8003480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2200      	movs	r2, #0
 8003488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800348c:	2300      	movs	r3, #0
}
 800348e:	4618      	mov	r0, r3
 8003490:	3714      	adds	r7, #20
 8003492:	46bd      	mov	sp, r7
 8003494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003498:	4770      	bx	lr
 800349a:	bf00      	nop
 800349c:	40010000 	.word	0x40010000
 80034a0:	40000400 	.word	0x40000400
 80034a4:	40000800 	.word	0x40000800
 80034a8:	40000c00 	.word	0x40000c00
 80034ac:	40014000 	.word	0x40014000

080034b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b082      	sub	sp, #8
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d101      	bne.n	80034c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e03f      	b.n	8003542 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d106      	bne.n	80034dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2200      	movs	r2, #0
 80034d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f7fd ff32 	bl	8001340 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2224      	movs	r2, #36	; 0x24
 80034e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	68da      	ldr	r2, [r3, #12]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80034f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80034f4:	6878      	ldr	r0, [r7, #4]
 80034f6:	f000 f829 	bl	800354c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	691a      	ldr	r2, [r3, #16]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003508:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	695a      	ldr	r2, [r3, #20]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003518:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	68da      	ldr	r2, [r3, #12]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003528:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2200      	movs	r2, #0
 800352e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2220      	movs	r2, #32
 8003534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2220      	movs	r2, #32
 800353c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003540:	2300      	movs	r3, #0
}
 8003542:	4618      	mov	r0, r3
 8003544:	3708      	adds	r7, #8
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}
	...

0800354c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800354c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003550:	b0c0      	sub	sp, #256	; 0x100
 8003552:	af00      	add	r7, sp, #0
 8003554:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003558:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	691b      	ldr	r3, [r3, #16]
 8003560:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003564:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003568:	68d9      	ldr	r1, [r3, #12]
 800356a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800356e:	681a      	ldr	r2, [r3, #0]
 8003570:	ea40 0301 	orr.w	r3, r0, r1
 8003574:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003576:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800357a:	689a      	ldr	r2, [r3, #8]
 800357c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003580:	691b      	ldr	r3, [r3, #16]
 8003582:	431a      	orrs	r2, r3
 8003584:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003588:	695b      	ldr	r3, [r3, #20]
 800358a:	431a      	orrs	r2, r3
 800358c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003590:	69db      	ldr	r3, [r3, #28]
 8003592:	4313      	orrs	r3, r2
 8003594:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003598:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80035a4:	f021 010c 	bic.w	r1, r1, #12
 80035a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80035b2:	430b      	orrs	r3, r1
 80035b4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80035b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	695b      	ldr	r3, [r3, #20]
 80035be:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80035c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035c6:	6999      	ldr	r1, [r3, #24]
 80035c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	ea40 0301 	orr.w	r3, r0, r1
 80035d2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80035d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	4b8f      	ldr	r3, [pc, #572]	; (8003818 <UART_SetConfig+0x2cc>)
 80035dc:	429a      	cmp	r2, r3
 80035de:	d005      	beq.n	80035ec <UART_SetConfig+0xa0>
 80035e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	4b8d      	ldr	r3, [pc, #564]	; (800381c <UART_SetConfig+0x2d0>)
 80035e8:	429a      	cmp	r2, r3
 80035ea:	d104      	bne.n	80035f6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80035ec:	f7ff fb38 	bl	8002c60 <HAL_RCC_GetPCLK2Freq>
 80035f0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80035f4:	e003      	b.n	80035fe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80035f6:	f7ff fb1f 	bl	8002c38 <HAL_RCC_GetPCLK1Freq>
 80035fa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80035fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003602:	69db      	ldr	r3, [r3, #28]
 8003604:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003608:	f040 810c 	bne.w	8003824 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800360c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003610:	2200      	movs	r2, #0
 8003612:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003616:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800361a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800361e:	4622      	mov	r2, r4
 8003620:	462b      	mov	r3, r5
 8003622:	1891      	adds	r1, r2, r2
 8003624:	65b9      	str	r1, [r7, #88]	; 0x58
 8003626:	415b      	adcs	r3, r3
 8003628:	65fb      	str	r3, [r7, #92]	; 0x5c
 800362a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800362e:	4621      	mov	r1, r4
 8003630:	eb12 0801 	adds.w	r8, r2, r1
 8003634:	4629      	mov	r1, r5
 8003636:	eb43 0901 	adc.w	r9, r3, r1
 800363a:	f04f 0200 	mov.w	r2, #0
 800363e:	f04f 0300 	mov.w	r3, #0
 8003642:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003646:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800364a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800364e:	4690      	mov	r8, r2
 8003650:	4699      	mov	r9, r3
 8003652:	4623      	mov	r3, r4
 8003654:	eb18 0303 	adds.w	r3, r8, r3
 8003658:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800365c:	462b      	mov	r3, r5
 800365e:	eb49 0303 	adc.w	r3, r9, r3
 8003662:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003666:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	2200      	movs	r2, #0
 800366e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003672:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003676:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800367a:	460b      	mov	r3, r1
 800367c:	18db      	adds	r3, r3, r3
 800367e:	653b      	str	r3, [r7, #80]	; 0x50
 8003680:	4613      	mov	r3, r2
 8003682:	eb42 0303 	adc.w	r3, r2, r3
 8003686:	657b      	str	r3, [r7, #84]	; 0x54
 8003688:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800368c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003690:	f7fc fda6 	bl	80001e0 <__aeabi_uldivmod>
 8003694:	4602      	mov	r2, r0
 8003696:	460b      	mov	r3, r1
 8003698:	4b61      	ldr	r3, [pc, #388]	; (8003820 <UART_SetConfig+0x2d4>)
 800369a:	fba3 2302 	umull	r2, r3, r3, r2
 800369e:	095b      	lsrs	r3, r3, #5
 80036a0:	011c      	lsls	r4, r3, #4
 80036a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036a6:	2200      	movs	r2, #0
 80036a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80036ac:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80036b0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80036b4:	4642      	mov	r2, r8
 80036b6:	464b      	mov	r3, r9
 80036b8:	1891      	adds	r1, r2, r2
 80036ba:	64b9      	str	r1, [r7, #72]	; 0x48
 80036bc:	415b      	adcs	r3, r3
 80036be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80036c0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80036c4:	4641      	mov	r1, r8
 80036c6:	eb12 0a01 	adds.w	sl, r2, r1
 80036ca:	4649      	mov	r1, r9
 80036cc:	eb43 0b01 	adc.w	fp, r3, r1
 80036d0:	f04f 0200 	mov.w	r2, #0
 80036d4:	f04f 0300 	mov.w	r3, #0
 80036d8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80036dc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80036e0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80036e4:	4692      	mov	sl, r2
 80036e6:	469b      	mov	fp, r3
 80036e8:	4643      	mov	r3, r8
 80036ea:	eb1a 0303 	adds.w	r3, sl, r3
 80036ee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80036f2:	464b      	mov	r3, r9
 80036f4:	eb4b 0303 	adc.w	r3, fp, r3
 80036f8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80036fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	2200      	movs	r2, #0
 8003704:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003708:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800370c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003710:	460b      	mov	r3, r1
 8003712:	18db      	adds	r3, r3, r3
 8003714:	643b      	str	r3, [r7, #64]	; 0x40
 8003716:	4613      	mov	r3, r2
 8003718:	eb42 0303 	adc.w	r3, r2, r3
 800371c:	647b      	str	r3, [r7, #68]	; 0x44
 800371e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003722:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003726:	f7fc fd5b 	bl	80001e0 <__aeabi_uldivmod>
 800372a:	4602      	mov	r2, r0
 800372c:	460b      	mov	r3, r1
 800372e:	4611      	mov	r1, r2
 8003730:	4b3b      	ldr	r3, [pc, #236]	; (8003820 <UART_SetConfig+0x2d4>)
 8003732:	fba3 2301 	umull	r2, r3, r3, r1
 8003736:	095b      	lsrs	r3, r3, #5
 8003738:	2264      	movs	r2, #100	; 0x64
 800373a:	fb02 f303 	mul.w	r3, r2, r3
 800373e:	1acb      	subs	r3, r1, r3
 8003740:	00db      	lsls	r3, r3, #3
 8003742:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003746:	4b36      	ldr	r3, [pc, #216]	; (8003820 <UART_SetConfig+0x2d4>)
 8003748:	fba3 2302 	umull	r2, r3, r3, r2
 800374c:	095b      	lsrs	r3, r3, #5
 800374e:	005b      	lsls	r3, r3, #1
 8003750:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003754:	441c      	add	r4, r3
 8003756:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800375a:	2200      	movs	r2, #0
 800375c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003760:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003764:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003768:	4642      	mov	r2, r8
 800376a:	464b      	mov	r3, r9
 800376c:	1891      	adds	r1, r2, r2
 800376e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003770:	415b      	adcs	r3, r3
 8003772:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003774:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003778:	4641      	mov	r1, r8
 800377a:	1851      	adds	r1, r2, r1
 800377c:	6339      	str	r1, [r7, #48]	; 0x30
 800377e:	4649      	mov	r1, r9
 8003780:	414b      	adcs	r3, r1
 8003782:	637b      	str	r3, [r7, #52]	; 0x34
 8003784:	f04f 0200 	mov.w	r2, #0
 8003788:	f04f 0300 	mov.w	r3, #0
 800378c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003790:	4659      	mov	r1, fp
 8003792:	00cb      	lsls	r3, r1, #3
 8003794:	4651      	mov	r1, sl
 8003796:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800379a:	4651      	mov	r1, sl
 800379c:	00ca      	lsls	r2, r1, #3
 800379e:	4610      	mov	r0, r2
 80037a0:	4619      	mov	r1, r3
 80037a2:	4603      	mov	r3, r0
 80037a4:	4642      	mov	r2, r8
 80037a6:	189b      	adds	r3, r3, r2
 80037a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80037ac:	464b      	mov	r3, r9
 80037ae:	460a      	mov	r2, r1
 80037b0:	eb42 0303 	adc.w	r3, r2, r3
 80037b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80037b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	2200      	movs	r2, #0
 80037c0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80037c4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80037c8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80037cc:	460b      	mov	r3, r1
 80037ce:	18db      	adds	r3, r3, r3
 80037d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80037d2:	4613      	mov	r3, r2
 80037d4:	eb42 0303 	adc.w	r3, r2, r3
 80037d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037da:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80037de:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80037e2:	f7fc fcfd 	bl	80001e0 <__aeabi_uldivmod>
 80037e6:	4602      	mov	r2, r0
 80037e8:	460b      	mov	r3, r1
 80037ea:	4b0d      	ldr	r3, [pc, #52]	; (8003820 <UART_SetConfig+0x2d4>)
 80037ec:	fba3 1302 	umull	r1, r3, r3, r2
 80037f0:	095b      	lsrs	r3, r3, #5
 80037f2:	2164      	movs	r1, #100	; 0x64
 80037f4:	fb01 f303 	mul.w	r3, r1, r3
 80037f8:	1ad3      	subs	r3, r2, r3
 80037fa:	00db      	lsls	r3, r3, #3
 80037fc:	3332      	adds	r3, #50	; 0x32
 80037fe:	4a08      	ldr	r2, [pc, #32]	; (8003820 <UART_SetConfig+0x2d4>)
 8003800:	fba2 2303 	umull	r2, r3, r2, r3
 8003804:	095b      	lsrs	r3, r3, #5
 8003806:	f003 0207 	and.w	r2, r3, #7
 800380a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4422      	add	r2, r4
 8003812:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003814:	e105      	b.n	8003a22 <UART_SetConfig+0x4d6>
 8003816:	bf00      	nop
 8003818:	40011000 	.word	0x40011000
 800381c:	40011400 	.word	0x40011400
 8003820:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003824:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003828:	2200      	movs	r2, #0
 800382a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800382e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003832:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003836:	4642      	mov	r2, r8
 8003838:	464b      	mov	r3, r9
 800383a:	1891      	adds	r1, r2, r2
 800383c:	6239      	str	r1, [r7, #32]
 800383e:	415b      	adcs	r3, r3
 8003840:	627b      	str	r3, [r7, #36]	; 0x24
 8003842:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003846:	4641      	mov	r1, r8
 8003848:	1854      	adds	r4, r2, r1
 800384a:	4649      	mov	r1, r9
 800384c:	eb43 0501 	adc.w	r5, r3, r1
 8003850:	f04f 0200 	mov.w	r2, #0
 8003854:	f04f 0300 	mov.w	r3, #0
 8003858:	00eb      	lsls	r3, r5, #3
 800385a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800385e:	00e2      	lsls	r2, r4, #3
 8003860:	4614      	mov	r4, r2
 8003862:	461d      	mov	r5, r3
 8003864:	4643      	mov	r3, r8
 8003866:	18e3      	adds	r3, r4, r3
 8003868:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800386c:	464b      	mov	r3, r9
 800386e:	eb45 0303 	adc.w	r3, r5, r3
 8003872:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003876:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	2200      	movs	r2, #0
 800387e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003882:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003886:	f04f 0200 	mov.w	r2, #0
 800388a:	f04f 0300 	mov.w	r3, #0
 800388e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003892:	4629      	mov	r1, r5
 8003894:	008b      	lsls	r3, r1, #2
 8003896:	4621      	mov	r1, r4
 8003898:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800389c:	4621      	mov	r1, r4
 800389e:	008a      	lsls	r2, r1, #2
 80038a0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80038a4:	f7fc fc9c 	bl	80001e0 <__aeabi_uldivmod>
 80038a8:	4602      	mov	r2, r0
 80038aa:	460b      	mov	r3, r1
 80038ac:	4b60      	ldr	r3, [pc, #384]	; (8003a30 <UART_SetConfig+0x4e4>)
 80038ae:	fba3 2302 	umull	r2, r3, r3, r2
 80038b2:	095b      	lsrs	r3, r3, #5
 80038b4:	011c      	lsls	r4, r3, #4
 80038b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80038ba:	2200      	movs	r2, #0
 80038bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80038c0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80038c4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80038c8:	4642      	mov	r2, r8
 80038ca:	464b      	mov	r3, r9
 80038cc:	1891      	adds	r1, r2, r2
 80038ce:	61b9      	str	r1, [r7, #24]
 80038d0:	415b      	adcs	r3, r3
 80038d2:	61fb      	str	r3, [r7, #28]
 80038d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80038d8:	4641      	mov	r1, r8
 80038da:	1851      	adds	r1, r2, r1
 80038dc:	6139      	str	r1, [r7, #16]
 80038de:	4649      	mov	r1, r9
 80038e0:	414b      	adcs	r3, r1
 80038e2:	617b      	str	r3, [r7, #20]
 80038e4:	f04f 0200 	mov.w	r2, #0
 80038e8:	f04f 0300 	mov.w	r3, #0
 80038ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80038f0:	4659      	mov	r1, fp
 80038f2:	00cb      	lsls	r3, r1, #3
 80038f4:	4651      	mov	r1, sl
 80038f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80038fa:	4651      	mov	r1, sl
 80038fc:	00ca      	lsls	r2, r1, #3
 80038fe:	4610      	mov	r0, r2
 8003900:	4619      	mov	r1, r3
 8003902:	4603      	mov	r3, r0
 8003904:	4642      	mov	r2, r8
 8003906:	189b      	adds	r3, r3, r2
 8003908:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800390c:	464b      	mov	r3, r9
 800390e:	460a      	mov	r2, r1
 8003910:	eb42 0303 	adc.w	r3, r2, r3
 8003914:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003918:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	2200      	movs	r2, #0
 8003920:	67bb      	str	r3, [r7, #120]	; 0x78
 8003922:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003924:	f04f 0200 	mov.w	r2, #0
 8003928:	f04f 0300 	mov.w	r3, #0
 800392c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003930:	4649      	mov	r1, r9
 8003932:	008b      	lsls	r3, r1, #2
 8003934:	4641      	mov	r1, r8
 8003936:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800393a:	4641      	mov	r1, r8
 800393c:	008a      	lsls	r2, r1, #2
 800393e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003942:	f7fc fc4d 	bl	80001e0 <__aeabi_uldivmod>
 8003946:	4602      	mov	r2, r0
 8003948:	460b      	mov	r3, r1
 800394a:	4b39      	ldr	r3, [pc, #228]	; (8003a30 <UART_SetConfig+0x4e4>)
 800394c:	fba3 1302 	umull	r1, r3, r3, r2
 8003950:	095b      	lsrs	r3, r3, #5
 8003952:	2164      	movs	r1, #100	; 0x64
 8003954:	fb01 f303 	mul.w	r3, r1, r3
 8003958:	1ad3      	subs	r3, r2, r3
 800395a:	011b      	lsls	r3, r3, #4
 800395c:	3332      	adds	r3, #50	; 0x32
 800395e:	4a34      	ldr	r2, [pc, #208]	; (8003a30 <UART_SetConfig+0x4e4>)
 8003960:	fba2 2303 	umull	r2, r3, r2, r3
 8003964:	095b      	lsrs	r3, r3, #5
 8003966:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800396a:	441c      	add	r4, r3
 800396c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003970:	2200      	movs	r2, #0
 8003972:	673b      	str	r3, [r7, #112]	; 0x70
 8003974:	677a      	str	r2, [r7, #116]	; 0x74
 8003976:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800397a:	4642      	mov	r2, r8
 800397c:	464b      	mov	r3, r9
 800397e:	1891      	adds	r1, r2, r2
 8003980:	60b9      	str	r1, [r7, #8]
 8003982:	415b      	adcs	r3, r3
 8003984:	60fb      	str	r3, [r7, #12]
 8003986:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800398a:	4641      	mov	r1, r8
 800398c:	1851      	adds	r1, r2, r1
 800398e:	6039      	str	r1, [r7, #0]
 8003990:	4649      	mov	r1, r9
 8003992:	414b      	adcs	r3, r1
 8003994:	607b      	str	r3, [r7, #4]
 8003996:	f04f 0200 	mov.w	r2, #0
 800399a:	f04f 0300 	mov.w	r3, #0
 800399e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80039a2:	4659      	mov	r1, fp
 80039a4:	00cb      	lsls	r3, r1, #3
 80039a6:	4651      	mov	r1, sl
 80039a8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80039ac:	4651      	mov	r1, sl
 80039ae:	00ca      	lsls	r2, r1, #3
 80039b0:	4610      	mov	r0, r2
 80039b2:	4619      	mov	r1, r3
 80039b4:	4603      	mov	r3, r0
 80039b6:	4642      	mov	r2, r8
 80039b8:	189b      	adds	r3, r3, r2
 80039ba:	66bb      	str	r3, [r7, #104]	; 0x68
 80039bc:	464b      	mov	r3, r9
 80039be:	460a      	mov	r2, r1
 80039c0:	eb42 0303 	adc.w	r3, r2, r3
 80039c4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80039c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	2200      	movs	r2, #0
 80039ce:	663b      	str	r3, [r7, #96]	; 0x60
 80039d0:	667a      	str	r2, [r7, #100]	; 0x64
 80039d2:	f04f 0200 	mov.w	r2, #0
 80039d6:	f04f 0300 	mov.w	r3, #0
 80039da:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80039de:	4649      	mov	r1, r9
 80039e0:	008b      	lsls	r3, r1, #2
 80039e2:	4641      	mov	r1, r8
 80039e4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80039e8:	4641      	mov	r1, r8
 80039ea:	008a      	lsls	r2, r1, #2
 80039ec:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80039f0:	f7fc fbf6 	bl	80001e0 <__aeabi_uldivmod>
 80039f4:	4602      	mov	r2, r0
 80039f6:	460b      	mov	r3, r1
 80039f8:	4b0d      	ldr	r3, [pc, #52]	; (8003a30 <UART_SetConfig+0x4e4>)
 80039fa:	fba3 1302 	umull	r1, r3, r3, r2
 80039fe:	095b      	lsrs	r3, r3, #5
 8003a00:	2164      	movs	r1, #100	; 0x64
 8003a02:	fb01 f303 	mul.w	r3, r1, r3
 8003a06:	1ad3      	subs	r3, r2, r3
 8003a08:	011b      	lsls	r3, r3, #4
 8003a0a:	3332      	adds	r3, #50	; 0x32
 8003a0c:	4a08      	ldr	r2, [pc, #32]	; (8003a30 <UART_SetConfig+0x4e4>)
 8003a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a12:	095b      	lsrs	r3, r3, #5
 8003a14:	f003 020f 	and.w	r2, r3, #15
 8003a18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4422      	add	r2, r4
 8003a20:	609a      	str	r2, [r3, #8]
}
 8003a22:	bf00      	nop
 8003a24:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a2e:	bf00      	nop
 8003a30:	51eb851f 	.word	0x51eb851f

08003a34 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8003a38:	4904      	ldr	r1, [pc, #16]	; (8003a4c <MX_FATFS_Init+0x18>)
 8003a3a:	4805      	ldr	r0, [pc, #20]	; (8003a50 <MX_FATFS_Init+0x1c>)
 8003a3c:	f000 f8b0 	bl	8003ba0 <FATFS_LinkDriver>
 8003a40:	4603      	mov	r3, r0
 8003a42:	461a      	mov	r2, r3
 8003a44:	4b03      	ldr	r3, [pc, #12]	; (8003a54 <MX_FATFS_Init+0x20>)
 8003a46:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8003a48:	bf00      	nop
 8003a4a:	bd80      	pop	{r7, pc}
 8003a4c:	200003f4 	.word	0x200003f4
 8003a50:	2000000c 	.word	0x2000000c
 8003a54:	200003f0 	.word	0x200003f0

08003a58 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b083      	sub	sp, #12
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	4603      	mov	r3, r0
 8003a60:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 8003a62:	4b06      	ldr	r3, [pc, #24]	; (8003a7c <USER_initialize+0x24>)
 8003a64:	2201      	movs	r2, #1
 8003a66:	701a      	strb	r2, [r3, #0]
    return Stat;
 8003a68:	4b04      	ldr	r3, [pc, #16]	; (8003a7c <USER_initialize+0x24>)
 8003a6a:	781b      	ldrb	r3, [r3, #0]
 8003a6c:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	370c      	adds	r7, #12
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr
 8003a7a:	bf00      	nop
 8003a7c:	20000009 	.word	0x20000009

08003a80 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b083      	sub	sp, #12
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	4603      	mov	r3, r0
 8003a88:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 8003a8a:	4b06      	ldr	r3, [pc, #24]	; (8003aa4 <USER_status+0x24>)
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	701a      	strb	r2, [r3, #0]
    return Stat;
 8003a90:	4b04      	ldr	r3, [pc, #16]	; (8003aa4 <USER_status+0x24>)
 8003a92:	781b      	ldrb	r3, [r3, #0]
 8003a94:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	370c      	adds	r7, #12
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa0:	4770      	bx	lr
 8003aa2:	bf00      	nop
 8003aa4:	20000009 	.word	0x20000009

08003aa8 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b085      	sub	sp, #20
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	60b9      	str	r1, [r7, #8]
 8003ab0:	607a      	str	r2, [r7, #4]
 8003ab2:	603b      	str	r3, [r7, #0]
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 8003ab8:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	3714      	adds	r7, #20
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac4:	4770      	bx	lr

08003ac6 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8003ac6:	b480      	push	{r7}
 8003ac8:	b085      	sub	sp, #20
 8003aca:	af00      	add	r7, sp, #0
 8003acc:	60b9      	str	r1, [r7, #8]
 8003ace:	607a      	str	r2, [r7, #4]
 8003ad0:	603b      	str	r3, [r7, #0]
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 8003ad6:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	3714      	adds	r7, #20
 8003adc:	46bd      	mov	sp, r7
 8003ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae2:	4770      	bx	lr

08003ae4 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b085      	sub	sp, #20
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	4603      	mov	r3, r0
 8003aec:	603a      	str	r2, [r7, #0]
 8003aee:	71fb      	strb	r3, [r7, #7]
 8003af0:	460b      	mov	r3, r1
 8003af2:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	73fb      	strb	r3, [r7, #15]
    return res;
 8003af8:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	3714      	adds	r7, #20
 8003afe:	46bd      	mov	sp, r7
 8003b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b04:	4770      	bx	lr
	...

08003b08 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b087      	sub	sp, #28
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	60f8      	str	r0, [r7, #12]
 8003b10:	60b9      	str	r1, [r7, #8]
 8003b12:	4613      	mov	r3, r2
 8003b14:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8003b16:	2301      	movs	r3, #1
 8003b18:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8003b1e:	4b1f      	ldr	r3, [pc, #124]	; (8003b9c <FATFS_LinkDriverEx+0x94>)
 8003b20:	7a5b      	ldrb	r3, [r3, #9]
 8003b22:	b2db      	uxtb	r3, r3
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d131      	bne.n	8003b8c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8003b28:	4b1c      	ldr	r3, [pc, #112]	; (8003b9c <FATFS_LinkDriverEx+0x94>)
 8003b2a:	7a5b      	ldrb	r3, [r3, #9]
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	461a      	mov	r2, r3
 8003b30:	4b1a      	ldr	r3, [pc, #104]	; (8003b9c <FATFS_LinkDriverEx+0x94>)
 8003b32:	2100      	movs	r1, #0
 8003b34:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8003b36:	4b19      	ldr	r3, [pc, #100]	; (8003b9c <FATFS_LinkDriverEx+0x94>)
 8003b38:	7a5b      	ldrb	r3, [r3, #9]
 8003b3a:	b2db      	uxtb	r3, r3
 8003b3c:	4a17      	ldr	r2, [pc, #92]	; (8003b9c <FATFS_LinkDriverEx+0x94>)
 8003b3e:	009b      	lsls	r3, r3, #2
 8003b40:	4413      	add	r3, r2
 8003b42:	68fa      	ldr	r2, [r7, #12]
 8003b44:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8003b46:	4b15      	ldr	r3, [pc, #84]	; (8003b9c <FATFS_LinkDriverEx+0x94>)
 8003b48:	7a5b      	ldrb	r3, [r3, #9]
 8003b4a:	b2db      	uxtb	r3, r3
 8003b4c:	461a      	mov	r2, r3
 8003b4e:	4b13      	ldr	r3, [pc, #76]	; (8003b9c <FATFS_LinkDriverEx+0x94>)
 8003b50:	4413      	add	r3, r2
 8003b52:	79fa      	ldrb	r2, [r7, #7]
 8003b54:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8003b56:	4b11      	ldr	r3, [pc, #68]	; (8003b9c <FATFS_LinkDriverEx+0x94>)
 8003b58:	7a5b      	ldrb	r3, [r3, #9]
 8003b5a:	b2db      	uxtb	r3, r3
 8003b5c:	1c5a      	adds	r2, r3, #1
 8003b5e:	b2d1      	uxtb	r1, r2
 8003b60:	4a0e      	ldr	r2, [pc, #56]	; (8003b9c <FATFS_LinkDriverEx+0x94>)
 8003b62:	7251      	strb	r1, [r2, #9]
 8003b64:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8003b66:	7dbb      	ldrb	r3, [r7, #22]
 8003b68:	3330      	adds	r3, #48	; 0x30
 8003b6a:	b2da      	uxtb	r2, r3
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	3301      	adds	r3, #1
 8003b74:	223a      	movs	r2, #58	; 0x3a
 8003b76:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	3302      	adds	r3, #2
 8003b7c:	222f      	movs	r2, #47	; 0x2f
 8003b7e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	3303      	adds	r3, #3
 8003b84:	2200      	movs	r2, #0
 8003b86:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8003b8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	371c      	adds	r7, #28
 8003b92:	46bd      	mov	sp, r7
 8003b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b98:	4770      	bx	lr
 8003b9a:	bf00      	nop
 8003b9c:	200003f8 	.word	0x200003f8

08003ba0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b082      	sub	sp, #8
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
 8003ba8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8003baa:	2200      	movs	r2, #0
 8003bac:	6839      	ldr	r1, [r7, #0]
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f7ff ffaa 	bl	8003b08 <FATFS_LinkDriverEx>
 8003bb4:	4603      	mov	r3, r0
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3708      	adds	r7, #8
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}
	...

08003bc0 <__NVIC_SetPriority>:
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b083      	sub	sp, #12
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	6039      	str	r1, [r7, #0]
 8003bca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	db0a      	blt.n	8003bea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	b2da      	uxtb	r2, r3
 8003bd8:	490c      	ldr	r1, [pc, #48]	; (8003c0c <__NVIC_SetPriority+0x4c>)
 8003bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bde:	0112      	lsls	r2, r2, #4
 8003be0:	b2d2      	uxtb	r2, r2
 8003be2:	440b      	add	r3, r1
 8003be4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003be8:	e00a      	b.n	8003c00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	b2da      	uxtb	r2, r3
 8003bee:	4908      	ldr	r1, [pc, #32]	; (8003c10 <__NVIC_SetPriority+0x50>)
 8003bf0:	79fb      	ldrb	r3, [r7, #7]
 8003bf2:	f003 030f 	and.w	r3, r3, #15
 8003bf6:	3b04      	subs	r3, #4
 8003bf8:	0112      	lsls	r2, r2, #4
 8003bfa:	b2d2      	uxtb	r2, r2
 8003bfc:	440b      	add	r3, r1
 8003bfe:	761a      	strb	r2, [r3, #24]
}
 8003c00:	bf00      	nop
 8003c02:	370c      	adds	r7, #12
 8003c04:	46bd      	mov	sp, r7
 8003c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0a:	4770      	bx	lr
 8003c0c:	e000e100 	.word	0xe000e100
 8003c10:	e000ed00 	.word	0xe000ed00

08003c14 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003c14:	b580      	push	{r7, lr}
 8003c16:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003c18:	2100      	movs	r1, #0
 8003c1a:	f06f 0004 	mvn.w	r0, #4
 8003c1e:	f7ff ffcf 	bl	8003bc0 <__NVIC_SetPriority>
#endif
}
 8003c22:	bf00      	nop
 8003c24:	bd80      	pop	{r7, pc}
	...

08003c28 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003c28:	b480      	push	{r7}
 8003c2a:	b083      	sub	sp, #12
 8003c2c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003c2e:	f3ef 8305 	mrs	r3, IPSR
 8003c32:	603b      	str	r3, [r7, #0]
  return(result);
 8003c34:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d003      	beq.n	8003c42 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003c3a:	f06f 0305 	mvn.w	r3, #5
 8003c3e:	607b      	str	r3, [r7, #4]
 8003c40:	e00c      	b.n	8003c5c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003c42:	4b0a      	ldr	r3, [pc, #40]	; (8003c6c <osKernelInitialize+0x44>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d105      	bne.n	8003c56 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003c4a:	4b08      	ldr	r3, [pc, #32]	; (8003c6c <osKernelInitialize+0x44>)
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003c50:	2300      	movs	r3, #0
 8003c52:	607b      	str	r3, [r7, #4]
 8003c54:	e002      	b.n	8003c5c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003c56:	f04f 33ff 	mov.w	r3, #4294967295
 8003c5a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003c5c:	687b      	ldr	r3, [r7, #4]
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	370c      	adds	r7, #12
 8003c62:	46bd      	mov	sp, r7
 8003c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c68:	4770      	bx	lr
 8003c6a:	bf00      	nop
 8003c6c:	20000404 	.word	0x20000404

08003c70 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b082      	sub	sp, #8
 8003c74:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003c76:	f3ef 8305 	mrs	r3, IPSR
 8003c7a:	603b      	str	r3, [r7, #0]
  return(result);
 8003c7c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d003      	beq.n	8003c8a <osKernelStart+0x1a>
    stat = osErrorISR;
 8003c82:	f06f 0305 	mvn.w	r3, #5
 8003c86:	607b      	str	r3, [r7, #4]
 8003c88:	e010      	b.n	8003cac <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003c8a:	4b0b      	ldr	r3, [pc, #44]	; (8003cb8 <osKernelStart+0x48>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	2b01      	cmp	r3, #1
 8003c90:	d109      	bne.n	8003ca6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003c92:	f7ff ffbf 	bl	8003c14 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003c96:	4b08      	ldr	r3, [pc, #32]	; (8003cb8 <osKernelStart+0x48>)
 8003c98:	2202      	movs	r2, #2
 8003c9a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003c9c:	f001 fa1a 	bl	80050d4 <vTaskStartScheduler>
      stat = osOK;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	607b      	str	r3, [r7, #4]
 8003ca4:	e002      	b.n	8003cac <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003ca6:	f04f 33ff 	mov.w	r3, #4294967295
 8003caa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003cac:	687b      	ldr	r3, [r7, #4]
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	3708      	adds	r7, #8
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}
 8003cb6:	bf00      	nop
 8003cb8:	20000404 	.word	0x20000404

08003cbc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b08e      	sub	sp, #56	; 0x38
 8003cc0:	af04      	add	r7, sp, #16
 8003cc2:	60f8      	str	r0, [r7, #12]
 8003cc4:	60b9      	str	r1, [r7, #8]
 8003cc6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ccc:	f3ef 8305 	mrs	r3, IPSR
 8003cd0:	617b      	str	r3, [r7, #20]
  return(result);
 8003cd2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d17e      	bne.n	8003dd6 <osThreadNew+0x11a>
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d07b      	beq.n	8003dd6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003cde:	2380      	movs	r3, #128	; 0x80
 8003ce0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003ce2:	2318      	movs	r3, #24
 8003ce4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8003cea:	f04f 33ff 	mov.w	r3, #4294967295
 8003cee:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d045      	beq.n	8003d82 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d002      	beq.n	8003d04 <osThreadNew+0x48>
        name = attr->name;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	699b      	ldr	r3, [r3, #24]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d002      	beq.n	8003d12 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	699b      	ldr	r3, [r3, #24]
 8003d10:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003d12:	69fb      	ldr	r3, [r7, #28]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d008      	beq.n	8003d2a <osThreadNew+0x6e>
 8003d18:	69fb      	ldr	r3, [r7, #28]
 8003d1a:	2b38      	cmp	r3, #56	; 0x38
 8003d1c:	d805      	bhi.n	8003d2a <osThreadNew+0x6e>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	f003 0301 	and.w	r3, r3, #1
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d001      	beq.n	8003d2e <osThreadNew+0x72>
        return (NULL);
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	e054      	b.n	8003dd8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	695b      	ldr	r3, [r3, #20]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d003      	beq.n	8003d3e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	695b      	ldr	r3, [r3, #20]
 8003d3a:	089b      	lsrs	r3, r3, #2
 8003d3c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d00e      	beq.n	8003d64 <osThreadNew+0xa8>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	68db      	ldr	r3, [r3, #12]
 8003d4a:	2b5b      	cmp	r3, #91	; 0x5b
 8003d4c:	d90a      	bls.n	8003d64 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d006      	beq.n	8003d64 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	695b      	ldr	r3, [r3, #20]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d002      	beq.n	8003d64 <osThreadNew+0xa8>
        mem = 1;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	61bb      	str	r3, [r7, #24]
 8003d62:	e010      	b.n	8003d86 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d10c      	bne.n	8003d86 <osThreadNew+0xca>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	68db      	ldr	r3, [r3, #12]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d108      	bne.n	8003d86 <osThreadNew+0xca>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	691b      	ldr	r3, [r3, #16]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d104      	bne.n	8003d86 <osThreadNew+0xca>
          mem = 0;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	61bb      	str	r3, [r7, #24]
 8003d80:	e001      	b.n	8003d86 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003d82:	2300      	movs	r3, #0
 8003d84:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003d86:	69bb      	ldr	r3, [r7, #24]
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d110      	bne.n	8003dae <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003d90:	687a      	ldr	r2, [r7, #4]
 8003d92:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003d94:	9202      	str	r2, [sp, #8]
 8003d96:	9301      	str	r3, [sp, #4]
 8003d98:	69fb      	ldr	r3, [r7, #28]
 8003d9a:	9300      	str	r3, [sp, #0]
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	6a3a      	ldr	r2, [r7, #32]
 8003da0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003da2:	68f8      	ldr	r0, [r7, #12]
 8003da4:	f000 ffc0 	bl	8004d28 <xTaskCreateStatic>
 8003da8:	4603      	mov	r3, r0
 8003daa:	613b      	str	r3, [r7, #16]
 8003dac:	e013      	b.n	8003dd6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003dae:	69bb      	ldr	r3, [r7, #24]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d110      	bne.n	8003dd6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003db4:	6a3b      	ldr	r3, [r7, #32]
 8003db6:	b29a      	uxth	r2, r3
 8003db8:	f107 0310 	add.w	r3, r7, #16
 8003dbc:	9301      	str	r3, [sp, #4]
 8003dbe:	69fb      	ldr	r3, [r7, #28]
 8003dc0:	9300      	str	r3, [sp, #0]
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003dc6:	68f8      	ldr	r0, [r7, #12]
 8003dc8:	f001 f80b 	bl	8004de2 <xTaskCreate>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	2b01      	cmp	r3, #1
 8003dd0:	d001      	beq.n	8003dd6 <osThreadNew+0x11a>
            hTask = NULL;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003dd6:	693b      	ldr	r3, [r7, #16]
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	3728      	adds	r7, #40	; 0x28
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}

08003de0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b084      	sub	sp, #16
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003de8:	f3ef 8305 	mrs	r3, IPSR
 8003dec:	60bb      	str	r3, [r7, #8]
  return(result);
 8003dee:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d003      	beq.n	8003dfc <osDelay+0x1c>
    stat = osErrorISR;
 8003df4:	f06f 0305 	mvn.w	r3, #5
 8003df8:	60fb      	str	r3, [r7, #12]
 8003dfa:	e007      	b.n	8003e0c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d002      	beq.n	8003e0c <osDelay+0x2c>
      vTaskDelay(ticks);
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	f001 f930 	bl	800506c <vTaskDelay>
    }
  }

  return (stat);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3710      	adds	r7, #16
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}

08003e16 <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 8003e16:	b580      	push	{r7, lr}
 8003e18:	b084      	sub	sp, #16
 8003e1a:	af00      	add	r7, sp, #0
 8003e1c:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f002 fb66 	bl	80064f0 <pvTimerGetTimerID>
 8003e24:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d005      	beq.n	8003e38 <TimerCallback+0x22>
    callb->func (callb->arg);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	68fa      	ldr	r2, [r7, #12]
 8003e32:	6852      	ldr	r2, [r2, #4]
 8003e34:	4610      	mov	r0, r2
 8003e36:	4798      	blx	r3
  }
}
 8003e38:	bf00      	nop
 8003e3a:	3710      	adds	r7, #16
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}

08003e40 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b08c      	sub	sp, #48	; 0x30
 8003e44:	af02      	add	r7, sp, #8
 8003e46:	60f8      	str	r0, [r7, #12]
 8003e48:	607a      	str	r2, [r7, #4]
 8003e4a:	603b      	str	r3, [r7, #0]
 8003e4c:	460b      	mov	r3, r1
 8003e4e:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8003e50:	2300      	movs	r3, #0
 8003e52:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003e54:	f3ef 8305 	mrs	r3, IPSR
 8003e58:	613b      	str	r3, [r7, #16]
  return(result);
 8003e5a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d163      	bne.n	8003f28 <osTimerNew+0xe8>
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d060      	beq.n	8003f28 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8003e66:	2008      	movs	r0, #8
 8003e68:	f002 fdae 	bl	80069c8 <pvPortMalloc>
 8003e6c:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d059      	beq.n	8003f28 <osTimerNew+0xe8>
      callb->func = func;
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	68fa      	ldr	r2, [r7, #12]
 8003e78:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	687a      	ldr	r2, [r7, #4]
 8003e7e:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8003e80:	7afb      	ldrb	r3, [r7, #11]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d102      	bne.n	8003e8c <osTimerNew+0x4c>
        reload = pdFALSE;
 8003e86:	2300      	movs	r3, #0
 8003e88:	61fb      	str	r3, [r7, #28]
 8003e8a:	e001      	b.n	8003e90 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 8003e90:	f04f 33ff 	mov.w	r3, #4294967295
 8003e94:	61bb      	str	r3, [r7, #24]
      name = NULL;
 8003e96:	2300      	movs	r3, #0
 8003e98:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d01c      	beq.n	8003eda <osTimerNew+0x9a>
        if (attr->name != NULL) {
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d002      	beq.n	8003eae <osTimerNew+0x6e>
          name = attr->name;
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d006      	beq.n	8003ec4 <osTimerNew+0x84>
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	68db      	ldr	r3, [r3, #12]
 8003eba:	2b2b      	cmp	r3, #43	; 0x2b
 8003ebc:	d902      	bls.n	8003ec4 <osTimerNew+0x84>
          mem = 1;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	61bb      	str	r3, [r7, #24]
 8003ec2:	e00c      	b.n	8003ede <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d108      	bne.n	8003ede <osTimerNew+0x9e>
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d104      	bne.n	8003ede <osTimerNew+0x9e>
            mem = 0;
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	61bb      	str	r3, [r7, #24]
 8003ed8:	e001      	b.n	8003ede <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 8003eda:	2300      	movs	r3, #0
 8003edc:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8003ede:	69bb      	ldr	r3, [r7, #24]
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d10c      	bne.n	8003efe <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	9301      	str	r3, [sp, #4]
 8003eea:	4b12      	ldr	r3, [pc, #72]	; (8003f34 <osTimerNew+0xf4>)
 8003eec:	9300      	str	r3, [sp, #0]
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	69fa      	ldr	r2, [r7, #28]
 8003ef2:	2101      	movs	r1, #1
 8003ef4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003ef6:	f001 ff7c 	bl	8005df2 <xTimerCreateStatic>
 8003efa:	6238      	str	r0, [r7, #32]
 8003efc:	e00b      	b.n	8003f16 <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 8003efe:	69bb      	ldr	r3, [r7, #24]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d108      	bne.n	8003f16 <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8003f04:	4b0b      	ldr	r3, [pc, #44]	; (8003f34 <osTimerNew+0xf4>)
 8003f06:	9300      	str	r3, [sp, #0]
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	69fa      	ldr	r2, [r7, #28]
 8003f0c:	2101      	movs	r1, #1
 8003f0e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003f10:	f001 ff4e 	bl	8005db0 <xTimerCreate>
 8003f14:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 8003f16:	6a3b      	ldr	r3, [r7, #32]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d105      	bne.n	8003f28 <osTimerNew+0xe8>
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d002      	beq.n	8003f28 <osTimerNew+0xe8>
        vPortFree (callb);
 8003f22:	6978      	ldr	r0, [r7, #20]
 8003f24:	f002 fe1c 	bl	8006b60 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8003f28:	6a3b      	ldr	r3, [r7, #32]
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3728      	adds	r7, #40	; 0x28
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}
 8003f32:	bf00      	nop
 8003f34:	08003e17 	.word	0x08003e17

08003f38 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003f38:	b480      	push	{r7}
 8003f3a:	b085      	sub	sp, #20
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	60f8      	str	r0, [r7, #12]
 8003f40:	60b9      	str	r1, [r7, #8]
 8003f42:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	4a07      	ldr	r2, [pc, #28]	; (8003f64 <vApplicationGetIdleTaskMemory+0x2c>)
 8003f48:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	4a06      	ldr	r2, [pc, #24]	; (8003f68 <vApplicationGetIdleTaskMemory+0x30>)
 8003f4e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2280      	movs	r2, #128	; 0x80
 8003f54:	601a      	str	r2, [r3, #0]
}
 8003f56:	bf00      	nop
 8003f58:	3714      	adds	r7, #20
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr
 8003f62:	bf00      	nop
 8003f64:	20000408 	.word	0x20000408
 8003f68:	20000464 	.word	0x20000464

08003f6c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003f6c:	b480      	push	{r7}
 8003f6e:	b085      	sub	sp, #20
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	60f8      	str	r0, [r7, #12]
 8003f74:	60b9      	str	r1, [r7, #8]
 8003f76:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	4a07      	ldr	r2, [pc, #28]	; (8003f98 <vApplicationGetTimerTaskMemory+0x2c>)
 8003f7c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	4a06      	ldr	r2, [pc, #24]	; (8003f9c <vApplicationGetTimerTaskMemory+0x30>)
 8003f82:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f8a:	601a      	str	r2, [r3, #0]
}
 8003f8c:	bf00      	nop
 8003f8e:	3714      	adds	r7, #20
 8003f90:	46bd      	mov	sp, r7
 8003f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f96:	4770      	bx	lr
 8003f98:	20000664 	.word	0x20000664
 8003f9c:	200006c0 	.word	0x200006c0

08003fa0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b083      	sub	sp, #12
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	f103 0208 	add.w	r2, r3, #8
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	f04f 32ff 	mov.w	r2, #4294967295
 8003fb8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	f103 0208 	add.w	r2, r3, #8
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	f103 0208 	add.w	r2, r3, #8
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003fd4:	bf00      	nop
 8003fd6:	370c      	adds	r7, #12
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fde:	4770      	bx	lr

08003fe0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b083      	sub	sp, #12
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2200      	movs	r2, #0
 8003fec:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003fee:	bf00      	nop
 8003ff0:	370c      	adds	r7, #12
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr

08003ffa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003ffa:	b480      	push	{r7}
 8003ffc:	b085      	sub	sp, #20
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	6078      	str	r0, [r7, #4]
 8004002:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	68fa      	ldr	r2, [r7, #12]
 800400e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	689a      	ldr	r2, [r3, #8]
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	683a      	ldr	r2, [r7, #0]
 800401e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	683a      	ldr	r2, [r7, #0]
 8004024:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	687a      	ldr	r2, [r7, #4]
 800402a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	1c5a      	adds	r2, r3, #1
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	601a      	str	r2, [r3, #0]
}
 8004036:	bf00      	nop
 8004038:	3714      	adds	r7, #20
 800403a:	46bd      	mov	sp, r7
 800403c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004040:	4770      	bx	lr

08004042 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004042:	b480      	push	{r7}
 8004044:	b085      	sub	sp, #20
 8004046:	af00      	add	r7, sp, #0
 8004048:	6078      	str	r0, [r7, #4]
 800404a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004058:	d103      	bne.n	8004062 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	691b      	ldr	r3, [r3, #16]
 800405e:	60fb      	str	r3, [r7, #12]
 8004060:	e00c      	b.n	800407c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	3308      	adds	r3, #8
 8004066:	60fb      	str	r3, [r7, #12]
 8004068:	e002      	b.n	8004070 <vListInsert+0x2e>
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	60fb      	str	r3, [r7, #12]
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	68ba      	ldr	r2, [r7, #8]
 8004078:	429a      	cmp	r2, r3
 800407a:	d2f6      	bcs.n	800406a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	685a      	ldr	r2, [r3, #4]
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	683a      	ldr	r2, [r7, #0]
 800408a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	68fa      	ldr	r2, [r7, #12]
 8004090:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	683a      	ldr	r2, [r7, #0]
 8004096:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	687a      	ldr	r2, [r7, #4]
 800409c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	1c5a      	adds	r2, r3, #1
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	601a      	str	r2, [r3, #0]
}
 80040a8:	bf00      	nop
 80040aa:	3714      	adds	r7, #20
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr

080040b4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80040b4:	b480      	push	{r7}
 80040b6:	b085      	sub	sp, #20
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	691b      	ldr	r3, [r3, #16]
 80040c0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	687a      	ldr	r2, [r7, #4]
 80040c8:	6892      	ldr	r2, [r2, #8]
 80040ca:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	687a      	ldr	r2, [r7, #4]
 80040d2:	6852      	ldr	r2, [r2, #4]
 80040d4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	687a      	ldr	r2, [r7, #4]
 80040dc:	429a      	cmp	r2, r3
 80040de:	d103      	bne.n	80040e8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	689a      	ldr	r2, [r3, #8]
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2200      	movs	r2, #0
 80040ec:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	1e5a      	subs	r2, r3, #1
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	3714      	adds	r7, #20
 8004100:	46bd      	mov	sp, r7
 8004102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004106:	4770      	bx	lr

08004108 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b084      	sub	sp, #16
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
 8004110:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d10a      	bne.n	8004132 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800411c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004120:	f383 8811 	msr	BASEPRI, r3
 8004124:	f3bf 8f6f 	isb	sy
 8004128:	f3bf 8f4f 	dsb	sy
 800412c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800412e:	bf00      	nop
 8004130:	e7fe      	b.n	8004130 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004132:	f002 fb27 	bl	8006784 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681a      	ldr	r2, [r3, #0]
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800413e:	68f9      	ldr	r1, [r7, #12]
 8004140:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004142:	fb01 f303 	mul.w	r3, r1, r3
 8004146:	441a      	add	r2, r3
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2200      	movs	r2, #0
 8004150:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681a      	ldr	r2, [r3, #0]
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004162:	3b01      	subs	r3, #1
 8004164:	68f9      	ldr	r1, [r7, #12]
 8004166:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004168:	fb01 f303 	mul.w	r3, r1, r3
 800416c:	441a      	add	r2, r3
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	22ff      	movs	r2, #255	; 0xff
 8004176:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	22ff      	movs	r2, #255	; 0xff
 800417e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d114      	bne.n	80041b2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	691b      	ldr	r3, [r3, #16]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d01a      	beq.n	80041c6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	3310      	adds	r3, #16
 8004194:	4618      	mov	r0, r3
 8004196:	f001 fa27 	bl	80055e8 <xTaskRemoveFromEventList>
 800419a:	4603      	mov	r3, r0
 800419c:	2b00      	cmp	r3, #0
 800419e:	d012      	beq.n	80041c6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80041a0:	4b0c      	ldr	r3, [pc, #48]	; (80041d4 <xQueueGenericReset+0xcc>)
 80041a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041a6:	601a      	str	r2, [r3, #0]
 80041a8:	f3bf 8f4f 	dsb	sy
 80041ac:	f3bf 8f6f 	isb	sy
 80041b0:	e009      	b.n	80041c6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	3310      	adds	r3, #16
 80041b6:	4618      	mov	r0, r3
 80041b8:	f7ff fef2 	bl	8003fa0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	3324      	adds	r3, #36	; 0x24
 80041c0:	4618      	mov	r0, r3
 80041c2:	f7ff feed 	bl	8003fa0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80041c6:	f002 fb0d 	bl	80067e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80041ca:	2301      	movs	r3, #1
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	3710      	adds	r7, #16
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}
 80041d4:	e000ed04 	.word	0xe000ed04

080041d8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b08e      	sub	sp, #56	; 0x38
 80041dc:	af02      	add	r7, sp, #8
 80041de:	60f8      	str	r0, [r7, #12]
 80041e0:	60b9      	str	r1, [r7, #8]
 80041e2:	607a      	str	r2, [r7, #4]
 80041e4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d10a      	bne.n	8004202 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80041ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041f0:	f383 8811 	msr	BASEPRI, r3
 80041f4:	f3bf 8f6f 	isb	sy
 80041f8:	f3bf 8f4f 	dsb	sy
 80041fc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80041fe:	bf00      	nop
 8004200:	e7fe      	b.n	8004200 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d10a      	bne.n	800421e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800420c:	f383 8811 	msr	BASEPRI, r3
 8004210:	f3bf 8f6f 	isb	sy
 8004214:	f3bf 8f4f 	dsb	sy
 8004218:	627b      	str	r3, [r7, #36]	; 0x24
}
 800421a:	bf00      	nop
 800421c:	e7fe      	b.n	800421c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d002      	beq.n	800422a <xQueueGenericCreateStatic+0x52>
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d001      	beq.n	800422e <xQueueGenericCreateStatic+0x56>
 800422a:	2301      	movs	r3, #1
 800422c:	e000      	b.n	8004230 <xQueueGenericCreateStatic+0x58>
 800422e:	2300      	movs	r3, #0
 8004230:	2b00      	cmp	r3, #0
 8004232:	d10a      	bne.n	800424a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004238:	f383 8811 	msr	BASEPRI, r3
 800423c:	f3bf 8f6f 	isb	sy
 8004240:	f3bf 8f4f 	dsb	sy
 8004244:	623b      	str	r3, [r7, #32]
}
 8004246:	bf00      	nop
 8004248:	e7fe      	b.n	8004248 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d102      	bne.n	8004256 <xQueueGenericCreateStatic+0x7e>
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d101      	bne.n	800425a <xQueueGenericCreateStatic+0x82>
 8004256:	2301      	movs	r3, #1
 8004258:	e000      	b.n	800425c <xQueueGenericCreateStatic+0x84>
 800425a:	2300      	movs	r3, #0
 800425c:	2b00      	cmp	r3, #0
 800425e:	d10a      	bne.n	8004276 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004264:	f383 8811 	msr	BASEPRI, r3
 8004268:	f3bf 8f6f 	isb	sy
 800426c:	f3bf 8f4f 	dsb	sy
 8004270:	61fb      	str	r3, [r7, #28]
}
 8004272:	bf00      	nop
 8004274:	e7fe      	b.n	8004274 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004276:	2350      	movs	r3, #80	; 0x50
 8004278:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	2b50      	cmp	r3, #80	; 0x50
 800427e:	d00a      	beq.n	8004296 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004284:	f383 8811 	msr	BASEPRI, r3
 8004288:	f3bf 8f6f 	isb	sy
 800428c:	f3bf 8f4f 	dsb	sy
 8004290:	61bb      	str	r3, [r7, #24]
}
 8004292:	bf00      	nop
 8004294:	e7fe      	b.n	8004294 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004296:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800429c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d00d      	beq.n	80042be <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80042a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042a4:	2201      	movs	r2, #1
 80042a6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80042aa:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80042ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042b0:	9300      	str	r3, [sp, #0]
 80042b2:	4613      	mov	r3, r2
 80042b4:	687a      	ldr	r2, [r7, #4]
 80042b6:	68b9      	ldr	r1, [r7, #8]
 80042b8:	68f8      	ldr	r0, [r7, #12]
 80042ba:	f000 f805 	bl	80042c8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80042be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80042c0:	4618      	mov	r0, r3
 80042c2:	3730      	adds	r7, #48	; 0x30
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bd80      	pop	{r7, pc}

080042c8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b084      	sub	sp, #16
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	60f8      	str	r0, [r7, #12]
 80042d0:	60b9      	str	r1, [r7, #8]
 80042d2:	607a      	str	r2, [r7, #4]
 80042d4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d103      	bne.n	80042e4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80042dc:	69bb      	ldr	r3, [r7, #24]
 80042de:	69ba      	ldr	r2, [r7, #24]
 80042e0:	601a      	str	r2, [r3, #0]
 80042e2:	e002      	b.n	80042ea <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80042e4:	69bb      	ldr	r3, [r7, #24]
 80042e6:	687a      	ldr	r2, [r7, #4]
 80042e8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80042ea:	69bb      	ldr	r3, [r7, #24]
 80042ec:	68fa      	ldr	r2, [r7, #12]
 80042ee:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80042f0:	69bb      	ldr	r3, [r7, #24]
 80042f2:	68ba      	ldr	r2, [r7, #8]
 80042f4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80042f6:	2101      	movs	r1, #1
 80042f8:	69b8      	ldr	r0, [r7, #24]
 80042fa:	f7ff ff05 	bl	8004108 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80042fe:	69bb      	ldr	r3, [r7, #24]
 8004300:	78fa      	ldrb	r2, [r7, #3]
 8004302:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004306:	bf00      	nop
 8004308:	3710      	adds	r7, #16
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}
	...

08004310 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b08e      	sub	sp, #56	; 0x38
 8004314:	af00      	add	r7, sp, #0
 8004316:	60f8      	str	r0, [r7, #12]
 8004318:	60b9      	str	r1, [r7, #8]
 800431a:	607a      	str	r2, [r7, #4]
 800431c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800431e:	2300      	movs	r3, #0
 8004320:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004328:	2b00      	cmp	r3, #0
 800432a:	d10a      	bne.n	8004342 <xQueueGenericSend+0x32>
	__asm volatile
 800432c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004330:	f383 8811 	msr	BASEPRI, r3
 8004334:	f3bf 8f6f 	isb	sy
 8004338:	f3bf 8f4f 	dsb	sy
 800433c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800433e:	bf00      	nop
 8004340:	e7fe      	b.n	8004340 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d103      	bne.n	8004350 <xQueueGenericSend+0x40>
 8004348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800434a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800434c:	2b00      	cmp	r3, #0
 800434e:	d101      	bne.n	8004354 <xQueueGenericSend+0x44>
 8004350:	2301      	movs	r3, #1
 8004352:	e000      	b.n	8004356 <xQueueGenericSend+0x46>
 8004354:	2300      	movs	r3, #0
 8004356:	2b00      	cmp	r3, #0
 8004358:	d10a      	bne.n	8004370 <xQueueGenericSend+0x60>
	__asm volatile
 800435a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800435e:	f383 8811 	msr	BASEPRI, r3
 8004362:	f3bf 8f6f 	isb	sy
 8004366:	f3bf 8f4f 	dsb	sy
 800436a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800436c:	bf00      	nop
 800436e:	e7fe      	b.n	800436e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	2b02      	cmp	r3, #2
 8004374:	d103      	bne.n	800437e <xQueueGenericSend+0x6e>
 8004376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004378:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800437a:	2b01      	cmp	r3, #1
 800437c:	d101      	bne.n	8004382 <xQueueGenericSend+0x72>
 800437e:	2301      	movs	r3, #1
 8004380:	e000      	b.n	8004384 <xQueueGenericSend+0x74>
 8004382:	2300      	movs	r3, #0
 8004384:	2b00      	cmp	r3, #0
 8004386:	d10a      	bne.n	800439e <xQueueGenericSend+0x8e>
	__asm volatile
 8004388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800438c:	f383 8811 	msr	BASEPRI, r3
 8004390:	f3bf 8f6f 	isb	sy
 8004394:	f3bf 8f4f 	dsb	sy
 8004398:	623b      	str	r3, [r7, #32]
}
 800439a:	bf00      	nop
 800439c:	e7fe      	b.n	800439c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800439e:	f001 fae1 	bl	8005964 <xTaskGetSchedulerState>
 80043a2:	4603      	mov	r3, r0
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d102      	bne.n	80043ae <xQueueGenericSend+0x9e>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d101      	bne.n	80043b2 <xQueueGenericSend+0xa2>
 80043ae:	2301      	movs	r3, #1
 80043b0:	e000      	b.n	80043b4 <xQueueGenericSend+0xa4>
 80043b2:	2300      	movs	r3, #0
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d10a      	bne.n	80043ce <xQueueGenericSend+0xbe>
	__asm volatile
 80043b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043bc:	f383 8811 	msr	BASEPRI, r3
 80043c0:	f3bf 8f6f 	isb	sy
 80043c4:	f3bf 8f4f 	dsb	sy
 80043c8:	61fb      	str	r3, [r7, #28]
}
 80043ca:	bf00      	nop
 80043cc:	e7fe      	b.n	80043cc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80043ce:	f002 f9d9 	bl	8006784 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80043d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043da:	429a      	cmp	r2, r3
 80043dc:	d302      	bcc.n	80043e4 <xQueueGenericSend+0xd4>
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	2b02      	cmp	r3, #2
 80043e2:	d129      	bne.n	8004438 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80043e4:	683a      	ldr	r2, [r7, #0]
 80043e6:	68b9      	ldr	r1, [r7, #8]
 80043e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80043ea:	f000 fb2f 	bl	8004a4c <prvCopyDataToQueue>
 80043ee:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80043f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d010      	beq.n	800441a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80043f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043fa:	3324      	adds	r3, #36	; 0x24
 80043fc:	4618      	mov	r0, r3
 80043fe:	f001 f8f3 	bl	80055e8 <xTaskRemoveFromEventList>
 8004402:	4603      	mov	r3, r0
 8004404:	2b00      	cmp	r3, #0
 8004406:	d013      	beq.n	8004430 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004408:	4b3f      	ldr	r3, [pc, #252]	; (8004508 <xQueueGenericSend+0x1f8>)
 800440a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800440e:	601a      	str	r2, [r3, #0]
 8004410:	f3bf 8f4f 	dsb	sy
 8004414:	f3bf 8f6f 	isb	sy
 8004418:	e00a      	b.n	8004430 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800441a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800441c:	2b00      	cmp	r3, #0
 800441e:	d007      	beq.n	8004430 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004420:	4b39      	ldr	r3, [pc, #228]	; (8004508 <xQueueGenericSend+0x1f8>)
 8004422:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004426:	601a      	str	r2, [r3, #0]
 8004428:	f3bf 8f4f 	dsb	sy
 800442c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004430:	f002 f9d8 	bl	80067e4 <vPortExitCritical>
				return pdPASS;
 8004434:	2301      	movs	r3, #1
 8004436:	e063      	b.n	8004500 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d103      	bne.n	8004446 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800443e:	f002 f9d1 	bl	80067e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004442:	2300      	movs	r3, #0
 8004444:	e05c      	b.n	8004500 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004446:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004448:	2b00      	cmp	r3, #0
 800444a:	d106      	bne.n	800445a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800444c:	f107 0314 	add.w	r3, r7, #20
 8004450:	4618      	mov	r0, r3
 8004452:	f001 f92d 	bl	80056b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004456:	2301      	movs	r3, #1
 8004458:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800445a:	f002 f9c3 	bl	80067e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800445e:	f000 fe9f 	bl	80051a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004462:	f002 f98f 	bl	8006784 <vPortEnterCritical>
 8004466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004468:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800446c:	b25b      	sxtb	r3, r3
 800446e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004472:	d103      	bne.n	800447c <xQueueGenericSend+0x16c>
 8004474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004476:	2200      	movs	r2, #0
 8004478:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800447c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800447e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004482:	b25b      	sxtb	r3, r3
 8004484:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004488:	d103      	bne.n	8004492 <xQueueGenericSend+0x182>
 800448a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800448c:	2200      	movs	r2, #0
 800448e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004492:	f002 f9a7 	bl	80067e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004496:	1d3a      	adds	r2, r7, #4
 8004498:	f107 0314 	add.w	r3, r7, #20
 800449c:	4611      	mov	r1, r2
 800449e:	4618      	mov	r0, r3
 80044a0:	f001 f91c 	bl	80056dc <xTaskCheckForTimeOut>
 80044a4:	4603      	mov	r3, r0
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d124      	bne.n	80044f4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80044aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80044ac:	f000 fbc6 	bl	8004c3c <prvIsQueueFull>
 80044b0:	4603      	mov	r3, r0
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d018      	beq.n	80044e8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80044b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044b8:	3310      	adds	r3, #16
 80044ba:	687a      	ldr	r2, [r7, #4]
 80044bc:	4611      	mov	r1, r2
 80044be:	4618      	mov	r0, r3
 80044c0:	f001 f842 	bl	8005548 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80044c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80044c6:	f000 fb51 	bl	8004b6c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80044ca:	f000 fe77 	bl	80051bc <xTaskResumeAll>
 80044ce:	4603      	mov	r3, r0
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	f47f af7c 	bne.w	80043ce <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80044d6:	4b0c      	ldr	r3, [pc, #48]	; (8004508 <xQueueGenericSend+0x1f8>)
 80044d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044dc:	601a      	str	r2, [r3, #0]
 80044de:	f3bf 8f4f 	dsb	sy
 80044e2:	f3bf 8f6f 	isb	sy
 80044e6:	e772      	b.n	80043ce <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80044e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80044ea:	f000 fb3f 	bl	8004b6c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80044ee:	f000 fe65 	bl	80051bc <xTaskResumeAll>
 80044f2:	e76c      	b.n	80043ce <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80044f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80044f6:	f000 fb39 	bl	8004b6c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80044fa:	f000 fe5f 	bl	80051bc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80044fe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004500:	4618      	mov	r0, r3
 8004502:	3738      	adds	r7, #56	; 0x38
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}
 8004508:	e000ed04 	.word	0xe000ed04

0800450c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b090      	sub	sp, #64	; 0x40
 8004510:	af00      	add	r7, sp, #0
 8004512:	60f8      	str	r0, [r7, #12]
 8004514:	60b9      	str	r1, [r7, #8]
 8004516:	607a      	str	r2, [r7, #4]
 8004518:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800451e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004520:	2b00      	cmp	r3, #0
 8004522:	d10a      	bne.n	800453a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004528:	f383 8811 	msr	BASEPRI, r3
 800452c:	f3bf 8f6f 	isb	sy
 8004530:	f3bf 8f4f 	dsb	sy
 8004534:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004536:	bf00      	nop
 8004538:	e7fe      	b.n	8004538 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d103      	bne.n	8004548 <xQueueGenericSendFromISR+0x3c>
 8004540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004544:	2b00      	cmp	r3, #0
 8004546:	d101      	bne.n	800454c <xQueueGenericSendFromISR+0x40>
 8004548:	2301      	movs	r3, #1
 800454a:	e000      	b.n	800454e <xQueueGenericSendFromISR+0x42>
 800454c:	2300      	movs	r3, #0
 800454e:	2b00      	cmp	r3, #0
 8004550:	d10a      	bne.n	8004568 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004556:	f383 8811 	msr	BASEPRI, r3
 800455a:	f3bf 8f6f 	isb	sy
 800455e:	f3bf 8f4f 	dsb	sy
 8004562:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004564:	bf00      	nop
 8004566:	e7fe      	b.n	8004566 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	2b02      	cmp	r3, #2
 800456c:	d103      	bne.n	8004576 <xQueueGenericSendFromISR+0x6a>
 800456e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004570:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004572:	2b01      	cmp	r3, #1
 8004574:	d101      	bne.n	800457a <xQueueGenericSendFromISR+0x6e>
 8004576:	2301      	movs	r3, #1
 8004578:	e000      	b.n	800457c <xQueueGenericSendFromISR+0x70>
 800457a:	2300      	movs	r3, #0
 800457c:	2b00      	cmp	r3, #0
 800457e:	d10a      	bne.n	8004596 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004584:	f383 8811 	msr	BASEPRI, r3
 8004588:	f3bf 8f6f 	isb	sy
 800458c:	f3bf 8f4f 	dsb	sy
 8004590:	623b      	str	r3, [r7, #32]
}
 8004592:	bf00      	nop
 8004594:	e7fe      	b.n	8004594 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004596:	f002 f9d7 	bl	8006948 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800459a:	f3ef 8211 	mrs	r2, BASEPRI
 800459e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045a2:	f383 8811 	msr	BASEPRI, r3
 80045a6:	f3bf 8f6f 	isb	sy
 80045aa:	f3bf 8f4f 	dsb	sy
 80045ae:	61fa      	str	r2, [r7, #28]
 80045b0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80045b2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80045b4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80045b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045be:	429a      	cmp	r2, r3
 80045c0:	d302      	bcc.n	80045c8 <xQueueGenericSendFromISR+0xbc>
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	2b02      	cmp	r3, #2
 80045c6:	d12f      	bne.n	8004628 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80045c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80045ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80045d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045d6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80045d8:	683a      	ldr	r2, [r7, #0]
 80045da:	68b9      	ldr	r1, [r7, #8]
 80045dc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80045de:	f000 fa35 	bl	8004a4c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80045e2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80045e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045ea:	d112      	bne.n	8004612 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80045ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d016      	beq.n	8004622 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80045f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045f6:	3324      	adds	r3, #36	; 0x24
 80045f8:	4618      	mov	r0, r3
 80045fa:	f000 fff5 	bl	80055e8 <xTaskRemoveFromEventList>
 80045fe:	4603      	mov	r3, r0
 8004600:	2b00      	cmp	r3, #0
 8004602:	d00e      	beq.n	8004622 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d00b      	beq.n	8004622 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2201      	movs	r2, #1
 800460e:	601a      	str	r2, [r3, #0]
 8004610:	e007      	b.n	8004622 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004612:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004616:	3301      	adds	r3, #1
 8004618:	b2db      	uxtb	r3, r3
 800461a:	b25a      	sxtb	r2, r3
 800461c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800461e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004622:	2301      	movs	r3, #1
 8004624:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004626:	e001      	b.n	800462c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004628:	2300      	movs	r3, #0
 800462a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800462c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800462e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004636:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004638:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800463a:	4618      	mov	r0, r3
 800463c:	3740      	adds	r7, #64	; 0x40
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}
	...

08004644 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b08c      	sub	sp, #48	; 0x30
 8004648:	af00      	add	r7, sp, #0
 800464a:	60f8      	str	r0, [r7, #12]
 800464c:	60b9      	str	r1, [r7, #8]
 800464e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004650:	2300      	movs	r3, #0
 8004652:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800465a:	2b00      	cmp	r3, #0
 800465c:	d10a      	bne.n	8004674 <xQueueReceive+0x30>
	__asm volatile
 800465e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004662:	f383 8811 	msr	BASEPRI, r3
 8004666:	f3bf 8f6f 	isb	sy
 800466a:	f3bf 8f4f 	dsb	sy
 800466e:	623b      	str	r3, [r7, #32]
}
 8004670:	bf00      	nop
 8004672:	e7fe      	b.n	8004672 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d103      	bne.n	8004682 <xQueueReceive+0x3e>
 800467a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800467c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800467e:	2b00      	cmp	r3, #0
 8004680:	d101      	bne.n	8004686 <xQueueReceive+0x42>
 8004682:	2301      	movs	r3, #1
 8004684:	e000      	b.n	8004688 <xQueueReceive+0x44>
 8004686:	2300      	movs	r3, #0
 8004688:	2b00      	cmp	r3, #0
 800468a:	d10a      	bne.n	80046a2 <xQueueReceive+0x5e>
	__asm volatile
 800468c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004690:	f383 8811 	msr	BASEPRI, r3
 8004694:	f3bf 8f6f 	isb	sy
 8004698:	f3bf 8f4f 	dsb	sy
 800469c:	61fb      	str	r3, [r7, #28]
}
 800469e:	bf00      	nop
 80046a0:	e7fe      	b.n	80046a0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80046a2:	f001 f95f 	bl	8005964 <xTaskGetSchedulerState>
 80046a6:	4603      	mov	r3, r0
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d102      	bne.n	80046b2 <xQueueReceive+0x6e>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d101      	bne.n	80046b6 <xQueueReceive+0x72>
 80046b2:	2301      	movs	r3, #1
 80046b4:	e000      	b.n	80046b8 <xQueueReceive+0x74>
 80046b6:	2300      	movs	r3, #0
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d10a      	bne.n	80046d2 <xQueueReceive+0x8e>
	__asm volatile
 80046bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046c0:	f383 8811 	msr	BASEPRI, r3
 80046c4:	f3bf 8f6f 	isb	sy
 80046c8:	f3bf 8f4f 	dsb	sy
 80046cc:	61bb      	str	r3, [r7, #24]
}
 80046ce:	bf00      	nop
 80046d0:	e7fe      	b.n	80046d0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80046d2:	f002 f857 	bl	8006784 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80046d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046da:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80046dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d01f      	beq.n	8004722 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80046e2:	68b9      	ldr	r1, [r7, #8]
 80046e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80046e6:	f000 fa1b 	bl	8004b20 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80046ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ec:	1e5a      	subs	r2, r3, #1
 80046ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046f0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80046f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046f4:	691b      	ldr	r3, [r3, #16]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d00f      	beq.n	800471a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80046fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046fc:	3310      	adds	r3, #16
 80046fe:	4618      	mov	r0, r3
 8004700:	f000 ff72 	bl	80055e8 <xTaskRemoveFromEventList>
 8004704:	4603      	mov	r3, r0
 8004706:	2b00      	cmp	r3, #0
 8004708:	d007      	beq.n	800471a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800470a:	4b3d      	ldr	r3, [pc, #244]	; (8004800 <xQueueReceive+0x1bc>)
 800470c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004710:	601a      	str	r2, [r3, #0]
 8004712:	f3bf 8f4f 	dsb	sy
 8004716:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800471a:	f002 f863 	bl	80067e4 <vPortExitCritical>
				return pdPASS;
 800471e:	2301      	movs	r3, #1
 8004720:	e069      	b.n	80047f6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d103      	bne.n	8004730 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004728:	f002 f85c 	bl	80067e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800472c:	2300      	movs	r3, #0
 800472e:	e062      	b.n	80047f6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004732:	2b00      	cmp	r3, #0
 8004734:	d106      	bne.n	8004744 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004736:	f107 0310 	add.w	r3, r7, #16
 800473a:	4618      	mov	r0, r3
 800473c:	f000 ffb8 	bl	80056b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004740:	2301      	movs	r3, #1
 8004742:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004744:	f002 f84e 	bl	80067e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004748:	f000 fd2a 	bl	80051a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800474c:	f002 f81a 	bl	8006784 <vPortEnterCritical>
 8004750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004752:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004756:	b25b      	sxtb	r3, r3
 8004758:	f1b3 3fff 	cmp.w	r3, #4294967295
 800475c:	d103      	bne.n	8004766 <xQueueReceive+0x122>
 800475e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004760:	2200      	movs	r2, #0
 8004762:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004768:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800476c:	b25b      	sxtb	r3, r3
 800476e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004772:	d103      	bne.n	800477c <xQueueReceive+0x138>
 8004774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004776:	2200      	movs	r2, #0
 8004778:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800477c:	f002 f832 	bl	80067e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004780:	1d3a      	adds	r2, r7, #4
 8004782:	f107 0310 	add.w	r3, r7, #16
 8004786:	4611      	mov	r1, r2
 8004788:	4618      	mov	r0, r3
 800478a:	f000 ffa7 	bl	80056dc <xTaskCheckForTimeOut>
 800478e:	4603      	mov	r3, r0
 8004790:	2b00      	cmp	r3, #0
 8004792:	d123      	bne.n	80047dc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004794:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004796:	f000 fa3b 	bl	8004c10 <prvIsQueueEmpty>
 800479a:	4603      	mov	r3, r0
 800479c:	2b00      	cmp	r3, #0
 800479e:	d017      	beq.n	80047d0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80047a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047a2:	3324      	adds	r3, #36	; 0x24
 80047a4:	687a      	ldr	r2, [r7, #4]
 80047a6:	4611      	mov	r1, r2
 80047a8:	4618      	mov	r0, r3
 80047aa:	f000 fecd 	bl	8005548 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80047ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80047b0:	f000 f9dc 	bl	8004b6c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80047b4:	f000 fd02 	bl	80051bc <xTaskResumeAll>
 80047b8:	4603      	mov	r3, r0
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d189      	bne.n	80046d2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80047be:	4b10      	ldr	r3, [pc, #64]	; (8004800 <xQueueReceive+0x1bc>)
 80047c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047c4:	601a      	str	r2, [r3, #0]
 80047c6:	f3bf 8f4f 	dsb	sy
 80047ca:	f3bf 8f6f 	isb	sy
 80047ce:	e780      	b.n	80046d2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80047d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80047d2:	f000 f9cb 	bl	8004b6c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80047d6:	f000 fcf1 	bl	80051bc <xTaskResumeAll>
 80047da:	e77a      	b.n	80046d2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80047dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80047de:	f000 f9c5 	bl	8004b6c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80047e2:	f000 fceb 	bl	80051bc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80047e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80047e8:	f000 fa12 	bl	8004c10 <prvIsQueueEmpty>
 80047ec:	4603      	mov	r3, r0
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	f43f af6f 	beq.w	80046d2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80047f4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3730      	adds	r7, #48	; 0x30
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}
 80047fe:	bf00      	nop
 8004800:	e000ed04 	.word	0xe000ed04

08004804 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b08e      	sub	sp, #56	; 0x38
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
 800480c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800480e:	2300      	movs	r3, #0
 8004810:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004816:	2300      	movs	r3, #0
 8004818:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800481a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800481c:	2b00      	cmp	r3, #0
 800481e:	d10a      	bne.n	8004836 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8004820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004824:	f383 8811 	msr	BASEPRI, r3
 8004828:	f3bf 8f6f 	isb	sy
 800482c:	f3bf 8f4f 	dsb	sy
 8004830:	623b      	str	r3, [r7, #32]
}
 8004832:	bf00      	nop
 8004834:	e7fe      	b.n	8004834 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800483a:	2b00      	cmp	r3, #0
 800483c:	d00a      	beq.n	8004854 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800483e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004842:	f383 8811 	msr	BASEPRI, r3
 8004846:	f3bf 8f6f 	isb	sy
 800484a:	f3bf 8f4f 	dsb	sy
 800484e:	61fb      	str	r3, [r7, #28]
}
 8004850:	bf00      	nop
 8004852:	e7fe      	b.n	8004852 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004854:	f001 f886 	bl	8005964 <xTaskGetSchedulerState>
 8004858:	4603      	mov	r3, r0
 800485a:	2b00      	cmp	r3, #0
 800485c:	d102      	bne.n	8004864 <xQueueSemaphoreTake+0x60>
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d101      	bne.n	8004868 <xQueueSemaphoreTake+0x64>
 8004864:	2301      	movs	r3, #1
 8004866:	e000      	b.n	800486a <xQueueSemaphoreTake+0x66>
 8004868:	2300      	movs	r3, #0
 800486a:	2b00      	cmp	r3, #0
 800486c:	d10a      	bne.n	8004884 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800486e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004872:	f383 8811 	msr	BASEPRI, r3
 8004876:	f3bf 8f6f 	isb	sy
 800487a:	f3bf 8f4f 	dsb	sy
 800487e:	61bb      	str	r3, [r7, #24]
}
 8004880:	bf00      	nop
 8004882:	e7fe      	b.n	8004882 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004884:	f001 ff7e 	bl	8006784 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800488a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800488c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800488e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004890:	2b00      	cmp	r3, #0
 8004892:	d024      	beq.n	80048de <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004896:	1e5a      	subs	r2, r3, #1
 8004898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800489a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800489c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d104      	bne.n	80048ae <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80048a4:	f001 f9d4 	bl	8005c50 <pvTaskIncrementMutexHeldCount>
 80048a8:	4602      	mov	r2, r0
 80048aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048ac:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80048ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048b0:	691b      	ldr	r3, [r3, #16]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d00f      	beq.n	80048d6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80048b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048b8:	3310      	adds	r3, #16
 80048ba:	4618      	mov	r0, r3
 80048bc:	f000 fe94 	bl	80055e8 <xTaskRemoveFromEventList>
 80048c0:	4603      	mov	r3, r0
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d007      	beq.n	80048d6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80048c6:	4b54      	ldr	r3, [pc, #336]	; (8004a18 <xQueueSemaphoreTake+0x214>)
 80048c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048cc:	601a      	str	r2, [r3, #0]
 80048ce:	f3bf 8f4f 	dsb	sy
 80048d2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80048d6:	f001 ff85 	bl	80067e4 <vPortExitCritical>
				return pdPASS;
 80048da:	2301      	movs	r3, #1
 80048dc:	e097      	b.n	8004a0e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d111      	bne.n	8004908 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80048e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d00a      	beq.n	8004900 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80048ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ee:	f383 8811 	msr	BASEPRI, r3
 80048f2:	f3bf 8f6f 	isb	sy
 80048f6:	f3bf 8f4f 	dsb	sy
 80048fa:	617b      	str	r3, [r7, #20]
}
 80048fc:	bf00      	nop
 80048fe:	e7fe      	b.n	80048fe <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004900:	f001 ff70 	bl	80067e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004904:	2300      	movs	r3, #0
 8004906:	e082      	b.n	8004a0e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004908:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800490a:	2b00      	cmp	r3, #0
 800490c:	d106      	bne.n	800491c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800490e:	f107 030c 	add.w	r3, r7, #12
 8004912:	4618      	mov	r0, r3
 8004914:	f000 fecc 	bl	80056b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004918:	2301      	movs	r3, #1
 800491a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800491c:	f001 ff62 	bl	80067e4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004920:	f000 fc3e 	bl	80051a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004924:	f001 ff2e 	bl	8006784 <vPortEnterCritical>
 8004928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800492a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800492e:	b25b      	sxtb	r3, r3
 8004930:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004934:	d103      	bne.n	800493e <xQueueSemaphoreTake+0x13a>
 8004936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004938:	2200      	movs	r2, #0
 800493a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800493e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004940:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004944:	b25b      	sxtb	r3, r3
 8004946:	f1b3 3fff 	cmp.w	r3, #4294967295
 800494a:	d103      	bne.n	8004954 <xQueueSemaphoreTake+0x150>
 800494c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800494e:	2200      	movs	r2, #0
 8004950:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004954:	f001 ff46 	bl	80067e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004958:	463a      	mov	r2, r7
 800495a:	f107 030c 	add.w	r3, r7, #12
 800495e:	4611      	mov	r1, r2
 8004960:	4618      	mov	r0, r3
 8004962:	f000 febb 	bl	80056dc <xTaskCheckForTimeOut>
 8004966:	4603      	mov	r3, r0
 8004968:	2b00      	cmp	r3, #0
 800496a:	d132      	bne.n	80049d2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800496c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800496e:	f000 f94f 	bl	8004c10 <prvIsQueueEmpty>
 8004972:	4603      	mov	r3, r0
 8004974:	2b00      	cmp	r3, #0
 8004976:	d026      	beq.n	80049c6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d109      	bne.n	8004994 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8004980:	f001 ff00 	bl	8006784 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004986:	689b      	ldr	r3, [r3, #8]
 8004988:	4618      	mov	r0, r3
 800498a:	f001 f809 	bl	80059a0 <xTaskPriorityInherit>
 800498e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8004990:	f001 ff28 	bl	80067e4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004996:	3324      	adds	r3, #36	; 0x24
 8004998:	683a      	ldr	r2, [r7, #0]
 800499a:	4611      	mov	r1, r2
 800499c:	4618      	mov	r0, r3
 800499e:	f000 fdd3 	bl	8005548 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80049a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80049a4:	f000 f8e2 	bl	8004b6c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80049a8:	f000 fc08 	bl	80051bc <xTaskResumeAll>
 80049ac:	4603      	mov	r3, r0
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	f47f af68 	bne.w	8004884 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80049b4:	4b18      	ldr	r3, [pc, #96]	; (8004a18 <xQueueSemaphoreTake+0x214>)
 80049b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049ba:	601a      	str	r2, [r3, #0]
 80049bc:	f3bf 8f4f 	dsb	sy
 80049c0:	f3bf 8f6f 	isb	sy
 80049c4:	e75e      	b.n	8004884 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80049c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80049c8:	f000 f8d0 	bl	8004b6c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80049cc:	f000 fbf6 	bl	80051bc <xTaskResumeAll>
 80049d0:	e758      	b.n	8004884 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80049d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80049d4:	f000 f8ca 	bl	8004b6c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80049d8:	f000 fbf0 	bl	80051bc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80049dc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80049de:	f000 f917 	bl	8004c10 <prvIsQueueEmpty>
 80049e2:	4603      	mov	r3, r0
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	f43f af4d 	beq.w	8004884 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80049ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d00d      	beq.n	8004a0c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80049f0:	f001 fec8 	bl	8006784 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80049f4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80049f6:	f000 f811 	bl	8004a1c <prvGetDisinheritPriorityAfterTimeout>
 80049fa:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80049fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004a02:	4618      	mov	r0, r3
 8004a04:	f001 f8a2 	bl	8005b4c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004a08:	f001 feec 	bl	80067e4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004a0c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	3738      	adds	r7, #56	; 0x38
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}
 8004a16:	bf00      	nop
 8004a18:	e000ed04 	.word	0xe000ed04

08004a1c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b085      	sub	sp, #20
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d006      	beq.n	8004a3a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8004a36:	60fb      	str	r3, [r7, #12]
 8004a38:	e001      	b.n	8004a3e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
	}
 8004a40:	4618      	mov	r0, r3
 8004a42:	3714      	adds	r7, #20
 8004a44:	46bd      	mov	sp, r7
 8004a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4a:	4770      	bx	lr

08004a4c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b086      	sub	sp, #24
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	60f8      	str	r0, [r7, #12]
 8004a54:	60b9      	str	r1, [r7, #8]
 8004a56:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004a58:	2300      	movs	r3, #0
 8004a5a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a60:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d10d      	bne.n	8004a86 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d14d      	bne.n	8004b0e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	4618      	mov	r0, r3
 8004a78:	f000 fffa 	bl	8005a70 <xTaskPriorityDisinherit>
 8004a7c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	2200      	movs	r2, #0
 8004a82:	609a      	str	r2, [r3, #8]
 8004a84:	e043      	b.n	8004b0e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d119      	bne.n	8004ac0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	6858      	ldr	r0, [r3, #4]
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a94:	461a      	mov	r2, r3
 8004a96:	68b9      	ldr	r1, [r7, #8]
 8004a98:	f002 fe06 	bl	80076a8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	685a      	ldr	r2, [r3, #4]
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa4:	441a      	add	r2, r3
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	685a      	ldr	r2, [r3, #4]
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	429a      	cmp	r2, r3
 8004ab4:	d32b      	bcc.n	8004b0e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681a      	ldr	r2, [r3, #0]
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	605a      	str	r2, [r3, #4]
 8004abe:	e026      	b.n	8004b0e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	68d8      	ldr	r0, [r3, #12]
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac8:	461a      	mov	r2, r3
 8004aca:	68b9      	ldr	r1, [r7, #8]
 8004acc:	f002 fdec 	bl	80076a8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	68da      	ldr	r2, [r3, #12]
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad8:	425b      	negs	r3, r3
 8004ada:	441a      	add	r2, r3
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	68da      	ldr	r2, [r3, #12]
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d207      	bcs.n	8004afc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	689a      	ldr	r2, [r3, #8]
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004af4:	425b      	negs	r3, r3
 8004af6:	441a      	add	r2, r3
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2b02      	cmp	r3, #2
 8004b00:	d105      	bne.n	8004b0e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d002      	beq.n	8004b0e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	3b01      	subs	r3, #1
 8004b0c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	1c5a      	adds	r2, r3, #1
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004b16:	697b      	ldr	r3, [r7, #20]
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	3718      	adds	r7, #24
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bd80      	pop	{r7, pc}

08004b20 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b082      	sub	sp, #8
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
 8004b28:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d018      	beq.n	8004b64 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	68da      	ldr	r2, [r3, #12]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b3a:	441a      	add	r2, r3
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	68da      	ldr	r2, [r3, #12]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	689b      	ldr	r3, [r3, #8]
 8004b48:	429a      	cmp	r2, r3
 8004b4a:	d303      	bcc.n	8004b54 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681a      	ldr	r2, [r3, #0]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	68d9      	ldr	r1, [r3, #12]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b5c:	461a      	mov	r2, r3
 8004b5e:	6838      	ldr	r0, [r7, #0]
 8004b60:	f002 fda2 	bl	80076a8 <memcpy>
	}
}
 8004b64:	bf00      	nop
 8004b66:	3708      	adds	r7, #8
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd80      	pop	{r7, pc}

08004b6c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b084      	sub	sp, #16
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004b74:	f001 fe06 	bl	8006784 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b7e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004b80:	e011      	b.n	8004ba6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d012      	beq.n	8004bb0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	3324      	adds	r3, #36	; 0x24
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f000 fd2a 	bl	80055e8 <xTaskRemoveFromEventList>
 8004b94:	4603      	mov	r3, r0
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d001      	beq.n	8004b9e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004b9a:	f000 fe01 	bl	80057a0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004b9e:	7bfb      	ldrb	r3, [r7, #15]
 8004ba0:	3b01      	subs	r3, #1
 8004ba2:	b2db      	uxtb	r3, r3
 8004ba4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004ba6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	dce9      	bgt.n	8004b82 <prvUnlockQueue+0x16>
 8004bae:	e000      	b.n	8004bb2 <prvUnlockQueue+0x46>
					break;
 8004bb0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	22ff      	movs	r2, #255	; 0xff
 8004bb6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004bba:	f001 fe13 	bl	80067e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004bbe:	f001 fde1 	bl	8006784 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004bc8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004bca:	e011      	b.n	8004bf0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	691b      	ldr	r3, [r3, #16]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d012      	beq.n	8004bfa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	3310      	adds	r3, #16
 8004bd8:	4618      	mov	r0, r3
 8004bda:	f000 fd05 	bl	80055e8 <xTaskRemoveFromEventList>
 8004bde:	4603      	mov	r3, r0
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d001      	beq.n	8004be8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004be4:	f000 fddc 	bl	80057a0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004be8:	7bbb      	ldrb	r3, [r7, #14]
 8004bea:	3b01      	subs	r3, #1
 8004bec:	b2db      	uxtb	r3, r3
 8004bee:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004bf0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	dce9      	bgt.n	8004bcc <prvUnlockQueue+0x60>
 8004bf8:	e000      	b.n	8004bfc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004bfa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	22ff      	movs	r2, #255	; 0xff
 8004c00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004c04:	f001 fdee 	bl	80067e4 <vPortExitCritical>
}
 8004c08:	bf00      	nop
 8004c0a:	3710      	adds	r7, #16
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bd80      	pop	{r7, pc}

08004c10 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b084      	sub	sp, #16
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004c18:	f001 fdb4 	bl	8006784 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d102      	bne.n	8004c2a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004c24:	2301      	movs	r3, #1
 8004c26:	60fb      	str	r3, [r7, #12]
 8004c28:	e001      	b.n	8004c2e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004c2e:	f001 fdd9 	bl	80067e4 <vPortExitCritical>

	return xReturn;
 8004c32:	68fb      	ldr	r3, [r7, #12]
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	3710      	adds	r7, #16
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}

08004c3c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b084      	sub	sp, #16
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004c44:	f001 fd9e 	bl	8006784 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c50:	429a      	cmp	r2, r3
 8004c52:	d102      	bne.n	8004c5a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004c54:	2301      	movs	r3, #1
 8004c56:	60fb      	str	r3, [r7, #12]
 8004c58:	e001      	b.n	8004c5e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004c5e:	f001 fdc1 	bl	80067e4 <vPortExitCritical>

	return xReturn;
 8004c62:	68fb      	ldr	r3, [r7, #12]
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	3710      	adds	r7, #16
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}

08004c6c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b085      	sub	sp, #20
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
 8004c74:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004c76:	2300      	movs	r3, #0
 8004c78:	60fb      	str	r3, [r7, #12]
 8004c7a:	e014      	b.n	8004ca6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004c7c:	4a0f      	ldr	r2, [pc, #60]	; (8004cbc <vQueueAddToRegistry+0x50>)
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d10b      	bne.n	8004ca0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004c88:	490c      	ldr	r1, [pc, #48]	; (8004cbc <vQueueAddToRegistry+0x50>)
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	683a      	ldr	r2, [r7, #0]
 8004c8e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004c92:	4a0a      	ldr	r2, [pc, #40]	; (8004cbc <vQueueAddToRegistry+0x50>)
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	00db      	lsls	r3, r3, #3
 8004c98:	4413      	add	r3, r2
 8004c9a:	687a      	ldr	r2, [r7, #4]
 8004c9c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004c9e:	e006      	b.n	8004cae <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	3301      	adds	r3, #1
 8004ca4:	60fb      	str	r3, [r7, #12]
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	2b07      	cmp	r3, #7
 8004caa:	d9e7      	bls.n	8004c7c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004cac:	bf00      	nop
 8004cae:	bf00      	nop
 8004cb0:	3714      	adds	r7, #20
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb8:	4770      	bx	lr
 8004cba:	bf00      	nop
 8004cbc:	20000ac0 	.word	0x20000ac0

08004cc0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b086      	sub	sp, #24
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	60f8      	str	r0, [r7, #12]
 8004cc8:	60b9      	str	r1, [r7, #8]
 8004cca:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004cd0:	f001 fd58 	bl	8006784 <vPortEnterCritical>
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004cda:	b25b      	sxtb	r3, r3
 8004cdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ce0:	d103      	bne.n	8004cea <vQueueWaitForMessageRestricted+0x2a>
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004cf0:	b25b      	sxtb	r3, r3
 8004cf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cf6:	d103      	bne.n	8004d00 <vQueueWaitForMessageRestricted+0x40>
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d00:	f001 fd70 	bl	80067e4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d106      	bne.n	8004d1a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	3324      	adds	r3, #36	; 0x24
 8004d10:	687a      	ldr	r2, [r7, #4]
 8004d12:	68b9      	ldr	r1, [r7, #8]
 8004d14:	4618      	mov	r0, r3
 8004d16:	f000 fc3b 	bl	8005590 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004d1a:	6978      	ldr	r0, [r7, #20]
 8004d1c:	f7ff ff26 	bl	8004b6c <prvUnlockQueue>
	}
 8004d20:	bf00      	nop
 8004d22:	3718      	adds	r7, #24
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}

08004d28 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b08e      	sub	sp, #56	; 0x38
 8004d2c:	af04      	add	r7, sp, #16
 8004d2e:	60f8      	str	r0, [r7, #12]
 8004d30:	60b9      	str	r1, [r7, #8]
 8004d32:	607a      	str	r2, [r7, #4]
 8004d34:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004d36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d10a      	bne.n	8004d52 <xTaskCreateStatic+0x2a>
	__asm volatile
 8004d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d40:	f383 8811 	msr	BASEPRI, r3
 8004d44:	f3bf 8f6f 	isb	sy
 8004d48:	f3bf 8f4f 	dsb	sy
 8004d4c:	623b      	str	r3, [r7, #32]
}
 8004d4e:	bf00      	nop
 8004d50:	e7fe      	b.n	8004d50 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d10a      	bne.n	8004d6e <xTaskCreateStatic+0x46>
	__asm volatile
 8004d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d5c:	f383 8811 	msr	BASEPRI, r3
 8004d60:	f3bf 8f6f 	isb	sy
 8004d64:	f3bf 8f4f 	dsb	sy
 8004d68:	61fb      	str	r3, [r7, #28]
}
 8004d6a:	bf00      	nop
 8004d6c:	e7fe      	b.n	8004d6c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004d6e:	235c      	movs	r3, #92	; 0x5c
 8004d70:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	2b5c      	cmp	r3, #92	; 0x5c
 8004d76:	d00a      	beq.n	8004d8e <xTaskCreateStatic+0x66>
	__asm volatile
 8004d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d7c:	f383 8811 	msr	BASEPRI, r3
 8004d80:	f3bf 8f6f 	isb	sy
 8004d84:	f3bf 8f4f 	dsb	sy
 8004d88:	61bb      	str	r3, [r7, #24]
}
 8004d8a:	bf00      	nop
 8004d8c:	e7fe      	b.n	8004d8c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004d8e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004d90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d01e      	beq.n	8004dd4 <xTaskCreateStatic+0xac>
 8004d96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d01b      	beq.n	8004dd4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d9e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004da4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da8:	2202      	movs	r2, #2
 8004daa:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004dae:	2300      	movs	r3, #0
 8004db0:	9303      	str	r3, [sp, #12]
 8004db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db4:	9302      	str	r3, [sp, #8]
 8004db6:	f107 0314 	add.w	r3, r7, #20
 8004dba:	9301      	str	r3, [sp, #4]
 8004dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dbe:	9300      	str	r3, [sp, #0]
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	687a      	ldr	r2, [r7, #4]
 8004dc4:	68b9      	ldr	r1, [r7, #8]
 8004dc6:	68f8      	ldr	r0, [r7, #12]
 8004dc8:	f000 f850 	bl	8004e6c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004dcc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004dce:	f000 f8dd 	bl	8004f8c <prvAddNewTaskToReadyList>
 8004dd2:	e001      	b.n	8004dd8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004dd8:	697b      	ldr	r3, [r7, #20]
	}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	3728      	adds	r7, #40	; 0x28
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}

08004de2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004de2:	b580      	push	{r7, lr}
 8004de4:	b08c      	sub	sp, #48	; 0x30
 8004de6:	af04      	add	r7, sp, #16
 8004de8:	60f8      	str	r0, [r7, #12]
 8004dea:	60b9      	str	r1, [r7, #8]
 8004dec:	603b      	str	r3, [r7, #0]
 8004dee:	4613      	mov	r3, r2
 8004df0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004df2:	88fb      	ldrh	r3, [r7, #6]
 8004df4:	009b      	lsls	r3, r3, #2
 8004df6:	4618      	mov	r0, r3
 8004df8:	f001 fde6 	bl	80069c8 <pvPortMalloc>
 8004dfc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d00e      	beq.n	8004e22 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004e04:	205c      	movs	r0, #92	; 0x5c
 8004e06:	f001 fddf 	bl	80069c8 <pvPortMalloc>
 8004e0a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004e0c:	69fb      	ldr	r3, [r7, #28]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d003      	beq.n	8004e1a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004e12:	69fb      	ldr	r3, [r7, #28]
 8004e14:	697a      	ldr	r2, [r7, #20]
 8004e16:	631a      	str	r2, [r3, #48]	; 0x30
 8004e18:	e005      	b.n	8004e26 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004e1a:	6978      	ldr	r0, [r7, #20]
 8004e1c:	f001 fea0 	bl	8006b60 <vPortFree>
 8004e20:	e001      	b.n	8004e26 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004e22:	2300      	movs	r3, #0
 8004e24:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004e26:	69fb      	ldr	r3, [r7, #28]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d017      	beq.n	8004e5c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004e2c:	69fb      	ldr	r3, [r7, #28]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004e34:	88fa      	ldrh	r2, [r7, #6]
 8004e36:	2300      	movs	r3, #0
 8004e38:	9303      	str	r3, [sp, #12]
 8004e3a:	69fb      	ldr	r3, [r7, #28]
 8004e3c:	9302      	str	r3, [sp, #8]
 8004e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e40:	9301      	str	r3, [sp, #4]
 8004e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e44:	9300      	str	r3, [sp, #0]
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	68b9      	ldr	r1, [r7, #8]
 8004e4a:	68f8      	ldr	r0, [r7, #12]
 8004e4c:	f000 f80e 	bl	8004e6c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004e50:	69f8      	ldr	r0, [r7, #28]
 8004e52:	f000 f89b 	bl	8004f8c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004e56:	2301      	movs	r3, #1
 8004e58:	61bb      	str	r3, [r7, #24]
 8004e5a:	e002      	b.n	8004e62 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004e5c:	f04f 33ff 	mov.w	r3, #4294967295
 8004e60:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004e62:	69bb      	ldr	r3, [r7, #24]
	}
 8004e64:	4618      	mov	r0, r3
 8004e66:	3720      	adds	r7, #32
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}

08004e6c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b088      	sub	sp, #32
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	60f8      	str	r0, [r7, #12]
 8004e74:	60b9      	str	r1, [r7, #8]
 8004e76:	607a      	str	r2, [r7, #4]
 8004e78:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e7c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	009b      	lsls	r3, r3, #2
 8004e82:	461a      	mov	r2, r3
 8004e84:	21a5      	movs	r1, #165	; 0xa5
 8004e86:	f002 fc1d 	bl	80076c4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004e94:	3b01      	subs	r3, #1
 8004e96:	009b      	lsls	r3, r3, #2
 8004e98:	4413      	add	r3, r2
 8004e9a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004e9c:	69bb      	ldr	r3, [r7, #24]
 8004e9e:	f023 0307 	bic.w	r3, r3, #7
 8004ea2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004ea4:	69bb      	ldr	r3, [r7, #24]
 8004ea6:	f003 0307 	and.w	r3, r3, #7
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d00a      	beq.n	8004ec4 <prvInitialiseNewTask+0x58>
	__asm volatile
 8004eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eb2:	f383 8811 	msr	BASEPRI, r3
 8004eb6:	f3bf 8f6f 	isb	sy
 8004eba:	f3bf 8f4f 	dsb	sy
 8004ebe:	617b      	str	r3, [r7, #20]
}
 8004ec0:	bf00      	nop
 8004ec2:	e7fe      	b.n	8004ec2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004ec4:	68bb      	ldr	r3, [r7, #8]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d01f      	beq.n	8004f0a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004eca:	2300      	movs	r3, #0
 8004ecc:	61fb      	str	r3, [r7, #28]
 8004ece:	e012      	b.n	8004ef6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004ed0:	68ba      	ldr	r2, [r7, #8]
 8004ed2:	69fb      	ldr	r3, [r7, #28]
 8004ed4:	4413      	add	r3, r2
 8004ed6:	7819      	ldrb	r1, [r3, #0]
 8004ed8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004eda:	69fb      	ldr	r3, [r7, #28]
 8004edc:	4413      	add	r3, r2
 8004ede:	3334      	adds	r3, #52	; 0x34
 8004ee0:	460a      	mov	r2, r1
 8004ee2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004ee4:	68ba      	ldr	r2, [r7, #8]
 8004ee6:	69fb      	ldr	r3, [r7, #28]
 8004ee8:	4413      	add	r3, r2
 8004eea:	781b      	ldrb	r3, [r3, #0]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d006      	beq.n	8004efe <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004ef0:	69fb      	ldr	r3, [r7, #28]
 8004ef2:	3301      	adds	r3, #1
 8004ef4:	61fb      	str	r3, [r7, #28]
 8004ef6:	69fb      	ldr	r3, [r7, #28]
 8004ef8:	2b0f      	cmp	r3, #15
 8004efa:	d9e9      	bls.n	8004ed0 <prvInitialiseNewTask+0x64>
 8004efc:	e000      	b.n	8004f00 <prvInitialiseNewTask+0x94>
			{
				break;
 8004efe:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f02:	2200      	movs	r2, #0
 8004f04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004f08:	e003      	b.n	8004f12 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f14:	2b37      	cmp	r3, #55	; 0x37
 8004f16:	d901      	bls.n	8004f1c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004f18:	2337      	movs	r3, #55	; 0x37
 8004f1a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004f1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f20:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f26:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f30:	3304      	adds	r3, #4
 8004f32:	4618      	mov	r0, r3
 8004f34:	f7ff f854 	bl	8003fe0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f3a:	3318      	adds	r3, #24
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	f7ff f84f 	bl	8003fe0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f46:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f4a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f50:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f56:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f60:	2200      	movs	r2, #0
 8004f62:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004f66:	683a      	ldr	r2, [r7, #0]
 8004f68:	68f9      	ldr	r1, [r7, #12]
 8004f6a:	69b8      	ldr	r0, [r7, #24]
 8004f6c:	f001 fae0 	bl	8006530 <pxPortInitialiseStack>
 8004f70:	4602      	mov	r2, r0
 8004f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f74:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004f76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d002      	beq.n	8004f82 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f80:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004f82:	bf00      	nop
 8004f84:	3720      	adds	r7, #32
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}
	...

08004f8c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b082      	sub	sp, #8
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004f94:	f001 fbf6 	bl	8006784 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004f98:	4b2d      	ldr	r3, [pc, #180]	; (8005050 <prvAddNewTaskToReadyList+0xc4>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	3301      	adds	r3, #1
 8004f9e:	4a2c      	ldr	r2, [pc, #176]	; (8005050 <prvAddNewTaskToReadyList+0xc4>)
 8004fa0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004fa2:	4b2c      	ldr	r3, [pc, #176]	; (8005054 <prvAddNewTaskToReadyList+0xc8>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d109      	bne.n	8004fbe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004faa:	4a2a      	ldr	r2, [pc, #168]	; (8005054 <prvAddNewTaskToReadyList+0xc8>)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004fb0:	4b27      	ldr	r3, [pc, #156]	; (8005050 <prvAddNewTaskToReadyList+0xc4>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	2b01      	cmp	r3, #1
 8004fb6:	d110      	bne.n	8004fda <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004fb8:	f000 fc16 	bl	80057e8 <prvInitialiseTaskLists>
 8004fbc:	e00d      	b.n	8004fda <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004fbe:	4b26      	ldr	r3, [pc, #152]	; (8005058 <prvAddNewTaskToReadyList+0xcc>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d109      	bne.n	8004fda <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004fc6:	4b23      	ldr	r3, [pc, #140]	; (8005054 <prvAddNewTaskToReadyList+0xc8>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fd0:	429a      	cmp	r2, r3
 8004fd2:	d802      	bhi.n	8004fda <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004fd4:	4a1f      	ldr	r2, [pc, #124]	; (8005054 <prvAddNewTaskToReadyList+0xc8>)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004fda:	4b20      	ldr	r3, [pc, #128]	; (800505c <prvAddNewTaskToReadyList+0xd0>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	3301      	adds	r3, #1
 8004fe0:	4a1e      	ldr	r2, [pc, #120]	; (800505c <prvAddNewTaskToReadyList+0xd0>)
 8004fe2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004fe4:	4b1d      	ldr	r3, [pc, #116]	; (800505c <prvAddNewTaskToReadyList+0xd0>)
 8004fe6:	681a      	ldr	r2, [r3, #0]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ff0:	4b1b      	ldr	r3, [pc, #108]	; (8005060 <prvAddNewTaskToReadyList+0xd4>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	429a      	cmp	r2, r3
 8004ff6:	d903      	bls.n	8005000 <prvAddNewTaskToReadyList+0x74>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ffc:	4a18      	ldr	r2, [pc, #96]	; (8005060 <prvAddNewTaskToReadyList+0xd4>)
 8004ffe:	6013      	str	r3, [r2, #0]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005004:	4613      	mov	r3, r2
 8005006:	009b      	lsls	r3, r3, #2
 8005008:	4413      	add	r3, r2
 800500a:	009b      	lsls	r3, r3, #2
 800500c:	4a15      	ldr	r2, [pc, #84]	; (8005064 <prvAddNewTaskToReadyList+0xd8>)
 800500e:	441a      	add	r2, r3
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	3304      	adds	r3, #4
 8005014:	4619      	mov	r1, r3
 8005016:	4610      	mov	r0, r2
 8005018:	f7fe ffef 	bl	8003ffa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800501c:	f001 fbe2 	bl	80067e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005020:	4b0d      	ldr	r3, [pc, #52]	; (8005058 <prvAddNewTaskToReadyList+0xcc>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d00e      	beq.n	8005046 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005028:	4b0a      	ldr	r3, [pc, #40]	; (8005054 <prvAddNewTaskToReadyList+0xc8>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005032:	429a      	cmp	r2, r3
 8005034:	d207      	bcs.n	8005046 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005036:	4b0c      	ldr	r3, [pc, #48]	; (8005068 <prvAddNewTaskToReadyList+0xdc>)
 8005038:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800503c:	601a      	str	r2, [r3, #0]
 800503e:	f3bf 8f4f 	dsb	sy
 8005042:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005046:	bf00      	nop
 8005048:	3708      	adds	r7, #8
 800504a:	46bd      	mov	sp, r7
 800504c:	bd80      	pop	{r7, pc}
 800504e:	bf00      	nop
 8005050:	20000fd4 	.word	0x20000fd4
 8005054:	20000b00 	.word	0x20000b00
 8005058:	20000fe0 	.word	0x20000fe0
 800505c:	20000ff0 	.word	0x20000ff0
 8005060:	20000fdc 	.word	0x20000fdc
 8005064:	20000b04 	.word	0x20000b04
 8005068:	e000ed04 	.word	0xe000ed04

0800506c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800506c:	b580      	push	{r7, lr}
 800506e:	b084      	sub	sp, #16
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005074:	2300      	movs	r3, #0
 8005076:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d017      	beq.n	80050ae <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800507e:	4b13      	ldr	r3, [pc, #76]	; (80050cc <vTaskDelay+0x60>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d00a      	beq.n	800509c <vTaskDelay+0x30>
	__asm volatile
 8005086:	f04f 0350 	mov.w	r3, #80	; 0x50
 800508a:	f383 8811 	msr	BASEPRI, r3
 800508e:	f3bf 8f6f 	isb	sy
 8005092:	f3bf 8f4f 	dsb	sy
 8005096:	60bb      	str	r3, [r7, #8]
}
 8005098:	bf00      	nop
 800509a:	e7fe      	b.n	800509a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800509c:	f000 f880 	bl	80051a0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80050a0:	2100      	movs	r1, #0
 80050a2:	6878      	ldr	r0, [r7, #4]
 80050a4:	f000 fde8 	bl	8005c78 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80050a8:	f000 f888 	bl	80051bc <xTaskResumeAll>
 80050ac:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d107      	bne.n	80050c4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80050b4:	4b06      	ldr	r3, [pc, #24]	; (80050d0 <vTaskDelay+0x64>)
 80050b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050ba:	601a      	str	r2, [r3, #0]
 80050bc:	f3bf 8f4f 	dsb	sy
 80050c0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80050c4:	bf00      	nop
 80050c6:	3710      	adds	r7, #16
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}
 80050cc:	20000ffc 	.word	0x20000ffc
 80050d0:	e000ed04 	.word	0xe000ed04

080050d4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b08a      	sub	sp, #40	; 0x28
 80050d8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80050da:	2300      	movs	r3, #0
 80050dc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80050de:	2300      	movs	r3, #0
 80050e0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80050e2:	463a      	mov	r2, r7
 80050e4:	1d39      	adds	r1, r7, #4
 80050e6:	f107 0308 	add.w	r3, r7, #8
 80050ea:	4618      	mov	r0, r3
 80050ec:	f7fe ff24 	bl	8003f38 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80050f0:	6839      	ldr	r1, [r7, #0]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	68ba      	ldr	r2, [r7, #8]
 80050f6:	9202      	str	r2, [sp, #8]
 80050f8:	9301      	str	r3, [sp, #4]
 80050fa:	2300      	movs	r3, #0
 80050fc:	9300      	str	r3, [sp, #0]
 80050fe:	2300      	movs	r3, #0
 8005100:	460a      	mov	r2, r1
 8005102:	4921      	ldr	r1, [pc, #132]	; (8005188 <vTaskStartScheduler+0xb4>)
 8005104:	4821      	ldr	r0, [pc, #132]	; (800518c <vTaskStartScheduler+0xb8>)
 8005106:	f7ff fe0f 	bl	8004d28 <xTaskCreateStatic>
 800510a:	4603      	mov	r3, r0
 800510c:	4a20      	ldr	r2, [pc, #128]	; (8005190 <vTaskStartScheduler+0xbc>)
 800510e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005110:	4b1f      	ldr	r3, [pc, #124]	; (8005190 <vTaskStartScheduler+0xbc>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d002      	beq.n	800511e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005118:	2301      	movs	r3, #1
 800511a:	617b      	str	r3, [r7, #20]
 800511c:	e001      	b.n	8005122 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800511e:	2300      	movs	r3, #0
 8005120:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005122:	697b      	ldr	r3, [r7, #20]
 8005124:	2b01      	cmp	r3, #1
 8005126:	d102      	bne.n	800512e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005128:	f000 fdfa 	bl	8005d20 <xTimerCreateTimerTask>
 800512c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	2b01      	cmp	r3, #1
 8005132:	d116      	bne.n	8005162 <vTaskStartScheduler+0x8e>
	__asm volatile
 8005134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005138:	f383 8811 	msr	BASEPRI, r3
 800513c:	f3bf 8f6f 	isb	sy
 8005140:	f3bf 8f4f 	dsb	sy
 8005144:	613b      	str	r3, [r7, #16]
}
 8005146:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005148:	4b12      	ldr	r3, [pc, #72]	; (8005194 <vTaskStartScheduler+0xc0>)
 800514a:	f04f 32ff 	mov.w	r2, #4294967295
 800514e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005150:	4b11      	ldr	r3, [pc, #68]	; (8005198 <vTaskStartScheduler+0xc4>)
 8005152:	2201      	movs	r2, #1
 8005154:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005156:	4b11      	ldr	r3, [pc, #68]	; (800519c <vTaskStartScheduler+0xc8>)
 8005158:	2200      	movs	r2, #0
 800515a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800515c:	f001 fa70 	bl	8006640 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005160:	e00e      	b.n	8005180 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005168:	d10a      	bne.n	8005180 <vTaskStartScheduler+0xac>
	__asm volatile
 800516a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800516e:	f383 8811 	msr	BASEPRI, r3
 8005172:	f3bf 8f6f 	isb	sy
 8005176:	f3bf 8f4f 	dsb	sy
 800517a:	60fb      	str	r3, [r7, #12]
}
 800517c:	bf00      	nop
 800517e:	e7fe      	b.n	800517e <vTaskStartScheduler+0xaa>
}
 8005180:	bf00      	nop
 8005182:	3718      	adds	r7, #24
 8005184:	46bd      	mov	sp, r7
 8005186:	bd80      	pop	{r7, pc}
 8005188:	080076f8 	.word	0x080076f8
 800518c:	080057b9 	.word	0x080057b9
 8005190:	20000ff8 	.word	0x20000ff8
 8005194:	20000ff4 	.word	0x20000ff4
 8005198:	20000fe0 	.word	0x20000fe0
 800519c:	20000fd8 	.word	0x20000fd8

080051a0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80051a0:	b480      	push	{r7}
 80051a2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80051a4:	4b04      	ldr	r3, [pc, #16]	; (80051b8 <vTaskSuspendAll+0x18>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	3301      	adds	r3, #1
 80051aa:	4a03      	ldr	r2, [pc, #12]	; (80051b8 <vTaskSuspendAll+0x18>)
 80051ac:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80051ae:	bf00      	nop
 80051b0:	46bd      	mov	sp, r7
 80051b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b6:	4770      	bx	lr
 80051b8:	20000ffc 	.word	0x20000ffc

080051bc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b084      	sub	sp, #16
 80051c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80051c2:	2300      	movs	r3, #0
 80051c4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80051c6:	2300      	movs	r3, #0
 80051c8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80051ca:	4b42      	ldr	r3, [pc, #264]	; (80052d4 <xTaskResumeAll+0x118>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d10a      	bne.n	80051e8 <xTaskResumeAll+0x2c>
	__asm volatile
 80051d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051d6:	f383 8811 	msr	BASEPRI, r3
 80051da:	f3bf 8f6f 	isb	sy
 80051de:	f3bf 8f4f 	dsb	sy
 80051e2:	603b      	str	r3, [r7, #0]
}
 80051e4:	bf00      	nop
 80051e6:	e7fe      	b.n	80051e6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80051e8:	f001 facc 	bl	8006784 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80051ec:	4b39      	ldr	r3, [pc, #228]	; (80052d4 <xTaskResumeAll+0x118>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	3b01      	subs	r3, #1
 80051f2:	4a38      	ldr	r2, [pc, #224]	; (80052d4 <xTaskResumeAll+0x118>)
 80051f4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80051f6:	4b37      	ldr	r3, [pc, #220]	; (80052d4 <xTaskResumeAll+0x118>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d162      	bne.n	80052c4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80051fe:	4b36      	ldr	r3, [pc, #216]	; (80052d8 <xTaskResumeAll+0x11c>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d05e      	beq.n	80052c4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005206:	e02f      	b.n	8005268 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005208:	4b34      	ldr	r3, [pc, #208]	; (80052dc <xTaskResumeAll+0x120>)
 800520a:	68db      	ldr	r3, [r3, #12]
 800520c:	68db      	ldr	r3, [r3, #12]
 800520e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	3318      	adds	r3, #24
 8005214:	4618      	mov	r0, r3
 8005216:	f7fe ff4d 	bl	80040b4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	3304      	adds	r3, #4
 800521e:	4618      	mov	r0, r3
 8005220:	f7fe ff48 	bl	80040b4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005228:	4b2d      	ldr	r3, [pc, #180]	; (80052e0 <xTaskResumeAll+0x124>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	429a      	cmp	r2, r3
 800522e:	d903      	bls.n	8005238 <xTaskResumeAll+0x7c>
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005234:	4a2a      	ldr	r2, [pc, #168]	; (80052e0 <xTaskResumeAll+0x124>)
 8005236:	6013      	str	r3, [r2, #0]
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800523c:	4613      	mov	r3, r2
 800523e:	009b      	lsls	r3, r3, #2
 8005240:	4413      	add	r3, r2
 8005242:	009b      	lsls	r3, r3, #2
 8005244:	4a27      	ldr	r2, [pc, #156]	; (80052e4 <xTaskResumeAll+0x128>)
 8005246:	441a      	add	r2, r3
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	3304      	adds	r3, #4
 800524c:	4619      	mov	r1, r3
 800524e:	4610      	mov	r0, r2
 8005250:	f7fe fed3 	bl	8003ffa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005258:	4b23      	ldr	r3, [pc, #140]	; (80052e8 <xTaskResumeAll+0x12c>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800525e:	429a      	cmp	r2, r3
 8005260:	d302      	bcc.n	8005268 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005262:	4b22      	ldr	r3, [pc, #136]	; (80052ec <xTaskResumeAll+0x130>)
 8005264:	2201      	movs	r2, #1
 8005266:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005268:	4b1c      	ldr	r3, [pc, #112]	; (80052dc <xTaskResumeAll+0x120>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d1cb      	bne.n	8005208 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d001      	beq.n	800527a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005276:	f000 fb55 	bl	8005924 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800527a:	4b1d      	ldr	r3, [pc, #116]	; (80052f0 <xTaskResumeAll+0x134>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d010      	beq.n	80052a8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005286:	f000 f847 	bl	8005318 <xTaskIncrementTick>
 800528a:	4603      	mov	r3, r0
 800528c:	2b00      	cmp	r3, #0
 800528e:	d002      	beq.n	8005296 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005290:	4b16      	ldr	r3, [pc, #88]	; (80052ec <xTaskResumeAll+0x130>)
 8005292:	2201      	movs	r2, #1
 8005294:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	3b01      	subs	r3, #1
 800529a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d1f1      	bne.n	8005286 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80052a2:	4b13      	ldr	r3, [pc, #76]	; (80052f0 <xTaskResumeAll+0x134>)
 80052a4:	2200      	movs	r2, #0
 80052a6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80052a8:	4b10      	ldr	r3, [pc, #64]	; (80052ec <xTaskResumeAll+0x130>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d009      	beq.n	80052c4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80052b0:	2301      	movs	r3, #1
 80052b2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80052b4:	4b0f      	ldr	r3, [pc, #60]	; (80052f4 <xTaskResumeAll+0x138>)
 80052b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052ba:	601a      	str	r2, [r3, #0]
 80052bc:	f3bf 8f4f 	dsb	sy
 80052c0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80052c4:	f001 fa8e 	bl	80067e4 <vPortExitCritical>

	return xAlreadyYielded;
 80052c8:	68bb      	ldr	r3, [r7, #8]
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	3710      	adds	r7, #16
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd80      	pop	{r7, pc}
 80052d2:	bf00      	nop
 80052d4:	20000ffc 	.word	0x20000ffc
 80052d8:	20000fd4 	.word	0x20000fd4
 80052dc:	20000f94 	.word	0x20000f94
 80052e0:	20000fdc 	.word	0x20000fdc
 80052e4:	20000b04 	.word	0x20000b04
 80052e8:	20000b00 	.word	0x20000b00
 80052ec:	20000fe8 	.word	0x20000fe8
 80052f0:	20000fe4 	.word	0x20000fe4
 80052f4:	e000ed04 	.word	0xe000ed04

080052f8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80052f8:	b480      	push	{r7}
 80052fa:	b083      	sub	sp, #12
 80052fc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80052fe:	4b05      	ldr	r3, [pc, #20]	; (8005314 <xTaskGetTickCount+0x1c>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005304:	687b      	ldr	r3, [r7, #4]
}
 8005306:	4618      	mov	r0, r3
 8005308:	370c      	adds	r7, #12
 800530a:	46bd      	mov	sp, r7
 800530c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005310:	4770      	bx	lr
 8005312:	bf00      	nop
 8005314:	20000fd8 	.word	0x20000fd8

08005318 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b086      	sub	sp, #24
 800531c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800531e:	2300      	movs	r3, #0
 8005320:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005322:	4b4f      	ldr	r3, [pc, #316]	; (8005460 <xTaskIncrementTick+0x148>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	2b00      	cmp	r3, #0
 8005328:	f040 808f 	bne.w	800544a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800532c:	4b4d      	ldr	r3, [pc, #308]	; (8005464 <xTaskIncrementTick+0x14c>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	3301      	adds	r3, #1
 8005332:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005334:	4a4b      	ldr	r2, [pc, #300]	; (8005464 <xTaskIncrementTick+0x14c>)
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800533a:	693b      	ldr	r3, [r7, #16]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d120      	bne.n	8005382 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005340:	4b49      	ldr	r3, [pc, #292]	; (8005468 <xTaskIncrementTick+0x150>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d00a      	beq.n	8005360 <xTaskIncrementTick+0x48>
	__asm volatile
 800534a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800534e:	f383 8811 	msr	BASEPRI, r3
 8005352:	f3bf 8f6f 	isb	sy
 8005356:	f3bf 8f4f 	dsb	sy
 800535a:	603b      	str	r3, [r7, #0]
}
 800535c:	bf00      	nop
 800535e:	e7fe      	b.n	800535e <xTaskIncrementTick+0x46>
 8005360:	4b41      	ldr	r3, [pc, #260]	; (8005468 <xTaskIncrementTick+0x150>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	60fb      	str	r3, [r7, #12]
 8005366:	4b41      	ldr	r3, [pc, #260]	; (800546c <xTaskIncrementTick+0x154>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a3f      	ldr	r2, [pc, #252]	; (8005468 <xTaskIncrementTick+0x150>)
 800536c:	6013      	str	r3, [r2, #0]
 800536e:	4a3f      	ldr	r2, [pc, #252]	; (800546c <xTaskIncrementTick+0x154>)
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	6013      	str	r3, [r2, #0]
 8005374:	4b3e      	ldr	r3, [pc, #248]	; (8005470 <xTaskIncrementTick+0x158>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	3301      	adds	r3, #1
 800537a:	4a3d      	ldr	r2, [pc, #244]	; (8005470 <xTaskIncrementTick+0x158>)
 800537c:	6013      	str	r3, [r2, #0]
 800537e:	f000 fad1 	bl	8005924 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005382:	4b3c      	ldr	r3, [pc, #240]	; (8005474 <xTaskIncrementTick+0x15c>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	693a      	ldr	r2, [r7, #16]
 8005388:	429a      	cmp	r2, r3
 800538a:	d349      	bcc.n	8005420 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800538c:	4b36      	ldr	r3, [pc, #216]	; (8005468 <xTaskIncrementTick+0x150>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d104      	bne.n	80053a0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005396:	4b37      	ldr	r3, [pc, #220]	; (8005474 <xTaskIncrementTick+0x15c>)
 8005398:	f04f 32ff 	mov.w	r2, #4294967295
 800539c:	601a      	str	r2, [r3, #0]
					break;
 800539e:	e03f      	b.n	8005420 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80053a0:	4b31      	ldr	r3, [pc, #196]	; (8005468 <xTaskIncrementTick+0x150>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	68db      	ldr	r3, [r3, #12]
 80053a6:	68db      	ldr	r3, [r3, #12]
 80053a8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80053b0:	693a      	ldr	r2, [r7, #16]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	429a      	cmp	r2, r3
 80053b6:	d203      	bcs.n	80053c0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80053b8:	4a2e      	ldr	r2, [pc, #184]	; (8005474 <xTaskIncrementTick+0x15c>)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80053be:	e02f      	b.n	8005420 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	3304      	adds	r3, #4
 80053c4:	4618      	mov	r0, r3
 80053c6:	f7fe fe75 	bl	80040b4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d004      	beq.n	80053dc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	3318      	adds	r3, #24
 80053d6:	4618      	mov	r0, r3
 80053d8:	f7fe fe6c 	bl	80040b4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053e0:	4b25      	ldr	r3, [pc, #148]	; (8005478 <xTaskIncrementTick+0x160>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	429a      	cmp	r2, r3
 80053e6:	d903      	bls.n	80053f0 <xTaskIncrementTick+0xd8>
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ec:	4a22      	ldr	r2, [pc, #136]	; (8005478 <xTaskIncrementTick+0x160>)
 80053ee:	6013      	str	r3, [r2, #0]
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053f4:	4613      	mov	r3, r2
 80053f6:	009b      	lsls	r3, r3, #2
 80053f8:	4413      	add	r3, r2
 80053fa:	009b      	lsls	r3, r3, #2
 80053fc:	4a1f      	ldr	r2, [pc, #124]	; (800547c <xTaskIncrementTick+0x164>)
 80053fe:	441a      	add	r2, r3
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	3304      	adds	r3, #4
 8005404:	4619      	mov	r1, r3
 8005406:	4610      	mov	r0, r2
 8005408:	f7fe fdf7 	bl	8003ffa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005410:	4b1b      	ldr	r3, [pc, #108]	; (8005480 <xTaskIncrementTick+0x168>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005416:	429a      	cmp	r2, r3
 8005418:	d3b8      	bcc.n	800538c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800541a:	2301      	movs	r3, #1
 800541c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800541e:	e7b5      	b.n	800538c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005420:	4b17      	ldr	r3, [pc, #92]	; (8005480 <xTaskIncrementTick+0x168>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005426:	4915      	ldr	r1, [pc, #84]	; (800547c <xTaskIncrementTick+0x164>)
 8005428:	4613      	mov	r3, r2
 800542a:	009b      	lsls	r3, r3, #2
 800542c:	4413      	add	r3, r2
 800542e:	009b      	lsls	r3, r3, #2
 8005430:	440b      	add	r3, r1
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	2b01      	cmp	r3, #1
 8005436:	d901      	bls.n	800543c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005438:	2301      	movs	r3, #1
 800543a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800543c:	4b11      	ldr	r3, [pc, #68]	; (8005484 <xTaskIncrementTick+0x16c>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d007      	beq.n	8005454 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005444:	2301      	movs	r3, #1
 8005446:	617b      	str	r3, [r7, #20]
 8005448:	e004      	b.n	8005454 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800544a:	4b0f      	ldr	r3, [pc, #60]	; (8005488 <xTaskIncrementTick+0x170>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	3301      	adds	r3, #1
 8005450:	4a0d      	ldr	r2, [pc, #52]	; (8005488 <xTaskIncrementTick+0x170>)
 8005452:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005454:	697b      	ldr	r3, [r7, #20]
}
 8005456:	4618      	mov	r0, r3
 8005458:	3718      	adds	r7, #24
 800545a:	46bd      	mov	sp, r7
 800545c:	bd80      	pop	{r7, pc}
 800545e:	bf00      	nop
 8005460:	20000ffc 	.word	0x20000ffc
 8005464:	20000fd8 	.word	0x20000fd8
 8005468:	20000f8c 	.word	0x20000f8c
 800546c:	20000f90 	.word	0x20000f90
 8005470:	20000fec 	.word	0x20000fec
 8005474:	20000ff4 	.word	0x20000ff4
 8005478:	20000fdc 	.word	0x20000fdc
 800547c:	20000b04 	.word	0x20000b04
 8005480:	20000b00 	.word	0x20000b00
 8005484:	20000fe8 	.word	0x20000fe8
 8005488:	20000fe4 	.word	0x20000fe4

0800548c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800548c:	b480      	push	{r7}
 800548e:	b085      	sub	sp, #20
 8005490:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005492:	4b28      	ldr	r3, [pc, #160]	; (8005534 <vTaskSwitchContext+0xa8>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d003      	beq.n	80054a2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800549a:	4b27      	ldr	r3, [pc, #156]	; (8005538 <vTaskSwitchContext+0xac>)
 800549c:	2201      	movs	r2, #1
 800549e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80054a0:	e041      	b.n	8005526 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80054a2:	4b25      	ldr	r3, [pc, #148]	; (8005538 <vTaskSwitchContext+0xac>)
 80054a4:	2200      	movs	r2, #0
 80054a6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80054a8:	4b24      	ldr	r3, [pc, #144]	; (800553c <vTaskSwitchContext+0xb0>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	60fb      	str	r3, [r7, #12]
 80054ae:	e010      	b.n	80054d2 <vTaskSwitchContext+0x46>
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d10a      	bne.n	80054cc <vTaskSwitchContext+0x40>
	__asm volatile
 80054b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ba:	f383 8811 	msr	BASEPRI, r3
 80054be:	f3bf 8f6f 	isb	sy
 80054c2:	f3bf 8f4f 	dsb	sy
 80054c6:	607b      	str	r3, [r7, #4]
}
 80054c8:	bf00      	nop
 80054ca:	e7fe      	b.n	80054ca <vTaskSwitchContext+0x3e>
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	3b01      	subs	r3, #1
 80054d0:	60fb      	str	r3, [r7, #12]
 80054d2:	491b      	ldr	r1, [pc, #108]	; (8005540 <vTaskSwitchContext+0xb4>)
 80054d4:	68fa      	ldr	r2, [r7, #12]
 80054d6:	4613      	mov	r3, r2
 80054d8:	009b      	lsls	r3, r3, #2
 80054da:	4413      	add	r3, r2
 80054dc:	009b      	lsls	r3, r3, #2
 80054de:	440b      	add	r3, r1
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d0e4      	beq.n	80054b0 <vTaskSwitchContext+0x24>
 80054e6:	68fa      	ldr	r2, [r7, #12]
 80054e8:	4613      	mov	r3, r2
 80054ea:	009b      	lsls	r3, r3, #2
 80054ec:	4413      	add	r3, r2
 80054ee:	009b      	lsls	r3, r3, #2
 80054f0:	4a13      	ldr	r2, [pc, #76]	; (8005540 <vTaskSwitchContext+0xb4>)
 80054f2:	4413      	add	r3, r2
 80054f4:	60bb      	str	r3, [r7, #8]
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	685a      	ldr	r2, [r3, #4]
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	605a      	str	r2, [r3, #4]
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	685a      	ldr	r2, [r3, #4]
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	3308      	adds	r3, #8
 8005508:	429a      	cmp	r2, r3
 800550a:	d104      	bne.n	8005516 <vTaskSwitchContext+0x8a>
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	685a      	ldr	r2, [r3, #4]
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	605a      	str	r2, [r3, #4]
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	68db      	ldr	r3, [r3, #12]
 800551c:	4a09      	ldr	r2, [pc, #36]	; (8005544 <vTaskSwitchContext+0xb8>)
 800551e:	6013      	str	r3, [r2, #0]
 8005520:	4a06      	ldr	r2, [pc, #24]	; (800553c <vTaskSwitchContext+0xb0>)
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	6013      	str	r3, [r2, #0]
}
 8005526:	bf00      	nop
 8005528:	3714      	adds	r7, #20
 800552a:	46bd      	mov	sp, r7
 800552c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005530:	4770      	bx	lr
 8005532:	bf00      	nop
 8005534:	20000ffc 	.word	0x20000ffc
 8005538:	20000fe8 	.word	0x20000fe8
 800553c:	20000fdc 	.word	0x20000fdc
 8005540:	20000b04 	.word	0x20000b04
 8005544:	20000b00 	.word	0x20000b00

08005548 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b084      	sub	sp, #16
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
 8005550:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d10a      	bne.n	800556e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800555c:	f383 8811 	msr	BASEPRI, r3
 8005560:	f3bf 8f6f 	isb	sy
 8005564:	f3bf 8f4f 	dsb	sy
 8005568:	60fb      	str	r3, [r7, #12]
}
 800556a:	bf00      	nop
 800556c:	e7fe      	b.n	800556c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800556e:	4b07      	ldr	r3, [pc, #28]	; (800558c <vTaskPlaceOnEventList+0x44>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	3318      	adds	r3, #24
 8005574:	4619      	mov	r1, r3
 8005576:	6878      	ldr	r0, [r7, #4]
 8005578:	f7fe fd63 	bl	8004042 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800557c:	2101      	movs	r1, #1
 800557e:	6838      	ldr	r0, [r7, #0]
 8005580:	f000 fb7a 	bl	8005c78 <prvAddCurrentTaskToDelayedList>
}
 8005584:	bf00      	nop
 8005586:	3710      	adds	r7, #16
 8005588:	46bd      	mov	sp, r7
 800558a:	bd80      	pop	{r7, pc}
 800558c:	20000b00 	.word	0x20000b00

08005590 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005590:	b580      	push	{r7, lr}
 8005592:	b086      	sub	sp, #24
 8005594:	af00      	add	r7, sp, #0
 8005596:	60f8      	str	r0, [r7, #12]
 8005598:	60b9      	str	r1, [r7, #8]
 800559a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d10a      	bne.n	80055b8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80055a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055a6:	f383 8811 	msr	BASEPRI, r3
 80055aa:	f3bf 8f6f 	isb	sy
 80055ae:	f3bf 8f4f 	dsb	sy
 80055b2:	617b      	str	r3, [r7, #20]
}
 80055b4:	bf00      	nop
 80055b6:	e7fe      	b.n	80055b6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80055b8:	4b0a      	ldr	r3, [pc, #40]	; (80055e4 <vTaskPlaceOnEventListRestricted+0x54>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	3318      	adds	r3, #24
 80055be:	4619      	mov	r1, r3
 80055c0:	68f8      	ldr	r0, [r7, #12]
 80055c2:	f7fe fd1a 	bl	8003ffa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d002      	beq.n	80055d2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80055cc:	f04f 33ff 	mov.w	r3, #4294967295
 80055d0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80055d2:	6879      	ldr	r1, [r7, #4]
 80055d4:	68b8      	ldr	r0, [r7, #8]
 80055d6:	f000 fb4f 	bl	8005c78 <prvAddCurrentTaskToDelayedList>
	}
 80055da:	bf00      	nop
 80055dc:	3718      	adds	r7, #24
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}
 80055e2:	bf00      	nop
 80055e4:	20000b00 	.word	0x20000b00

080055e8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b086      	sub	sp, #24
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	68db      	ldr	r3, [r3, #12]
 80055f4:	68db      	ldr	r3, [r3, #12]
 80055f6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80055f8:	693b      	ldr	r3, [r7, #16]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d10a      	bne.n	8005614 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80055fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005602:	f383 8811 	msr	BASEPRI, r3
 8005606:	f3bf 8f6f 	isb	sy
 800560a:	f3bf 8f4f 	dsb	sy
 800560e:	60fb      	str	r3, [r7, #12]
}
 8005610:	bf00      	nop
 8005612:	e7fe      	b.n	8005612 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005614:	693b      	ldr	r3, [r7, #16]
 8005616:	3318      	adds	r3, #24
 8005618:	4618      	mov	r0, r3
 800561a:	f7fe fd4b 	bl	80040b4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800561e:	4b1e      	ldr	r3, [pc, #120]	; (8005698 <xTaskRemoveFromEventList+0xb0>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d11d      	bne.n	8005662 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005626:	693b      	ldr	r3, [r7, #16]
 8005628:	3304      	adds	r3, #4
 800562a:	4618      	mov	r0, r3
 800562c:	f7fe fd42 	bl	80040b4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005634:	4b19      	ldr	r3, [pc, #100]	; (800569c <xTaskRemoveFromEventList+0xb4>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	429a      	cmp	r2, r3
 800563a:	d903      	bls.n	8005644 <xTaskRemoveFromEventList+0x5c>
 800563c:	693b      	ldr	r3, [r7, #16]
 800563e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005640:	4a16      	ldr	r2, [pc, #88]	; (800569c <xTaskRemoveFromEventList+0xb4>)
 8005642:	6013      	str	r3, [r2, #0]
 8005644:	693b      	ldr	r3, [r7, #16]
 8005646:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005648:	4613      	mov	r3, r2
 800564a:	009b      	lsls	r3, r3, #2
 800564c:	4413      	add	r3, r2
 800564e:	009b      	lsls	r3, r3, #2
 8005650:	4a13      	ldr	r2, [pc, #76]	; (80056a0 <xTaskRemoveFromEventList+0xb8>)
 8005652:	441a      	add	r2, r3
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	3304      	adds	r3, #4
 8005658:	4619      	mov	r1, r3
 800565a:	4610      	mov	r0, r2
 800565c:	f7fe fccd 	bl	8003ffa <vListInsertEnd>
 8005660:	e005      	b.n	800566e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	3318      	adds	r3, #24
 8005666:	4619      	mov	r1, r3
 8005668:	480e      	ldr	r0, [pc, #56]	; (80056a4 <xTaskRemoveFromEventList+0xbc>)
 800566a:	f7fe fcc6 	bl	8003ffa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800566e:	693b      	ldr	r3, [r7, #16]
 8005670:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005672:	4b0d      	ldr	r3, [pc, #52]	; (80056a8 <xTaskRemoveFromEventList+0xc0>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005678:	429a      	cmp	r2, r3
 800567a:	d905      	bls.n	8005688 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800567c:	2301      	movs	r3, #1
 800567e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005680:	4b0a      	ldr	r3, [pc, #40]	; (80056ac <xTaskRemoveFromEventList+0xc4>)
 8005682:	2201      	movs	r2, #1
 8005684:	601a      	str	r2, [r3, #0]
 8005686:	e001      	b.n	800568c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005688:	2300      	movs	r3, #0
 800568a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800568c:	697b      	ldr	r3, [r7, #20]
}
 800568e:	4618      	mov	r0, r3
 8005690:	3718      	adds	r7, #24
 8005692:	46bd      	mov	sp, r7
 8005694:	bd80      	pop	{r7, pc}
 8005696:	bf00      	nop
 8005698:	20000ffc 	.word	0x20000ffc
 800569c:	20000fdc 	.word	0x20000fdc
 80056a0:	20000b04 	.word	0x20000b04
 80056a4:	20000f94 	.word	0x20000f94
 80056a8:	20000b00 	.word	0x20000b00
 80056ac:	20000fe8 	.word	0x20000fe8

080056b0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80056b0:	b480      	push	{r7}
 80056b2:	b083      	sub	sp, #12
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80056b8:	4b06      	ldr	r3, [pc, #24]	; (80056d4 <vTaskInternalSetTimeOutState+0x24>)
 80056ba:	681a      	ldr	r2, [r3, #0]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80056c0:	4b05      	ldr	r3, [pc, #20]	; (80056d8 <vTaskInternalSetTimeOutState+0x28>)
 80056c2:	681a      	ldr	r2, [r3, #0]
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	605a      	str	r2, [r3, #4]
}
 80056c8:	bf00      	nop
 80056ca:	370c      	adds	r7, #12
 80056cc:	46bd      	mov	sp, r7
 80056ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d2:	4770      	bx	lr
 80056d4:	20000fec 	.word	0x20000fec
 80056d8:	20000fd8 	.word	0x20000fd8

080056dc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b088      	sub	sp, #32
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
 80056e4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d10a      	bne.n	8005702 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80056ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056f0:	f383 8811 	msr	BASEPRI, r3
 80056f4:	f3bf 8f6f 	isb	sy
 80056f8:	f3bf 8f4f 	dsb	sy
 80056fc:	613b      	str	r3, [r7, #16]
}
 80056fe:	bf00      	nop
 8005700:	e7fe      	b.n	8005700 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d10a      	bne.n	800571e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800570c:	f383 8811 	msr	BASEPRI, r3
 8005710:	f3bf 8f6f 	isb	sy
 8005714:	f3bf 8f4f 	dsb	sy
 8005718:	60fb      	str	r3, [r7, #12]
}
 800571a:	bf00      	nop
 800571c:	e7fe      	b.n	800571c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800571e:	f001 f831 	bl	8006784 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005722:	4b1d      	ldr	r3, [pc, #116]	; (8005798 <xTaskCheckForTimeOut+0xbc>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	685b      	ldr	r3, [r3, #4]
 800572c:	69ba      	ldr	r2, [r7, #24]
 800572e:	1ad3      	subs	r3, r2, r3
 8005730:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f1b3 3fff 	cmp.w	r3, #4294967295
 800573a:	d102      	bne.n	8005742 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800573c:	2300      	movs	r3, #0
 800573e:	61fb      	str	r3, [r7, #28]
 8005740:	e023      	b.n	800578a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681a      	ldr	r2, [r3, #0]
 8005746:	4b15      	ldr	r3, [pc, #84]	; (800579c <xTaskCheckForTimeOut+0xc0>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	429a      	cmp	r2, r3
 800574c:	d007      	beq.n	800575e <xTaskCheckForTimeOut+0x82>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	69ba      	ldr	r2, [r7, #24]
 8005754:	429a      	cmp	r2, r3
 8005756:	d302      	bcc.n	800575e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005758:	2301      	movs	r3, #1
 800575a:	61fb      	str	r3, [r7, #28]
 800575c:	e015      	b.n	800578a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	697a      	ldr	r2, [r7, #20]
 8005764:	429a      	cmp	r2, r3
 8005766:	d20b      	bcs.n	8005780 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	681a      	ldr	r2, [r3, #0]
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	1ad2      	subs	r2, r2, r3
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	f7ff ff9b 	bl	80056b0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800577a:	2300      	movs	r3, #0
 800577c:	61fb      	str	r3, [r7, #28]
 800577e:	e004      	b.n	800578a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	2200      	movs	r2, #0
 8005784:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005786:	2301      	movs	r3, #1
 8005788:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800578a:	f001 f82b 	bl	80067e4 <vPortExitCritical>

	return xReturn;
 800578e:	69fb      	ldr	r3, [r7, #28]
}
 8005790:	4618      	mov	r0, r3
 8005792:	3720      	adds	r7, #32
 8005794:	46bd      	mov	sp, r7
 8005796:	bd80      	pop	{r7, pc}
 8005798:	20000fd8 	.word	0x20000fd8
 800579c:	20000fec 	.word	0x20000fec

080057a0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80057a0:	b480      	push	{r7}
 80057a2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80057a4:	4b03      	ldr	r3, [pc, #12]	; (80057b4 <vTaskMissedYield+0x14>)
 80057a6:	2201      	movs	r2, #1
 80057a8:	601a      	str	r2, [r3, #0]
}
 80057aa:	bf00      	nop
 80057ac:	46bd      	mov	sp, r7
 80057ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b2:	4770      	bx	lr
 80057b4:	20000fe8 	.word	0x20000fe8

080057b8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b082      	sub	sp, #8
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80057c0:	f000 f852 	bl	8005868 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80057c4:	4b06      	ldr	r3, [pc, #24]	; (80057e0 <prvIdleTask+0x28>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	2b01      	cmp	r3, #1
 80057ca:	d9f9      	bls.n	80057c0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80057cc:	4b05      	ldr	r3, [pc, #20]	; (80057e4 <prvIdleTask+0x2c>)
 80057ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057d2:	601a      	str	r2, [r3, #0]
 80057d4:	f3bf 8f4f 	dsb	sy
 80057d8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80057dc:	e7f0      	b.n	80057c0 <prvIdleTask+0x8>
 80057de:	bf00      	nop
 80057e0:	20000b04 	.word	0x20000b04
 80057e4:	e000ed04 	.word	0xe000ed04

080057e8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b082      	sub	sp, #8
 80057ec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80057ee:	2300      	movs	r3, #0
 80057f0:	607b      	str	r3, [r7, #4]
 80057f2:	e00c      	b.n	800580e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80057f4:	687a      	ldr	r2, [r7, #4]
 80057f6:	4613      	mov	r3, r2
 80057f8:	009b      	lsls	r3, r3, #2
 80057fa:	4413      	add	r3, r2
 80057fc:	009b      	lsls	r3, r3, #2
 80057fe:	4a12      	ldr	r2, [pc, #72]	; (8005848 <prvInitialiseTaskLists+0x60>)
 8005800:	4413      	add	r3, r2
 8005802:	4618      	mov	r0, r3
 8005804:	f7fe fbcc 	bl	8003fa0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	3301      	adds	r3, #1
 800580c:	607b      	str	r3, [r7, #4]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2b37      	cmp	r3, #55	; 0x37
 8005812:	d9ef      	bls.n	80057f4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005814:	480d      	ldr	r0, [pc, #52]	; (800584c <prvInitialiseTaskLists+0x64>)
 8005816:	f7fe fbc3 	bl	8003fa0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800581a:	480d      	ldr	r0, [pc, #52]	; (8005850 <prvInitialiseTaskLists+0x68>)
 800581c:	f7fe fbc0 	bl	8003fa0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005820:	480c      	ldr	r0, [pc, #48]	; (8005854 <prvInitialiseTaskLists+0x6c>)
 8005822:	f7fe fbbd 	bl	8003fa0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005826:	480c      	ldr	r0, [pc, #48]	; (8005858 <prvInitialiseTaskLists+0x70>)
 8005828:	f7fe fbba 	bl	8003fa0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800582c:	480b      	ldr	r0, [pc, #44]	; (800585c <prvInitialiseTaskLists+0x74>)
 800582e:	f7fe fbb7 	bl	8003fa0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005832:	4b0b      	ldr	r3, [pc, #44]	; (8005860 <prvInitialiseTaskLists+0x78>)
 8005834:	4a05      	ldr	r2, [pc, #20]	; (800584c <prvInitialiseTaskLists+0x64>)
 8005836:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005838:	4b0a      	ldr	r3, [pc, #40]	; (8005864 <prvInitialiseTaskLists+0x7c>)
 800583a:	4a05      	ldr	r2, [pc, #20]	; (8005850 <prvInitialiseTaskLists+0x68>)
 800583c:	601a      	str	r2, [r3, #0]
}
 800583e:	bf00      	nop
 8005840:	3708      	adds	r7, #8
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}
 8005846:	bf00      	nop
 8005848:	20000b04 	.word	0x20000b04
 800584c:	20000f64 	.word	0x20000f64
 8005850:	20000f78 	.word	0x20000f78
 8005854:	20000f94 	.word	0x20000f94
 8005858:	20000fa8 	.word	0x20000fa8
 800585c:	20000fc0 	.word	0x20000fc0
 8005860:	20000f8c 	.word	0x20000f8c
 8005864:	20000f90 	.word	0x20000f90

08005868 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b082      	sub	sp, #8
 800586c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800586e:	e019      	b.n	80058a4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005870:	f000 ff88 	bl	8006784 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005874:	4b10      	ldr	r3, [pc, #64]	; (80058b8 <prvCheckTasksWaitingTermination+0x50>)
 8005876:	68db      	ldr	r3, [r3, #12]
 8005878:	68db      	ldr	r3, [r3, #12]
 800587a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	3304      	adds	r3, #4
 8005880:	4618      	mov	r0, r3
 8005882:	f7fe fc17 	bl	80040b4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005886:	4b0d      	ldr	r3, [pc, #52]	; (80058bc <prvCheckTasksWaitingTermination+0x54>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	3b01      	subs	r3, #1
 800588c:	4a0b      	ldr	r2, [pc, #44]	; (80058bc <prvCheckTasksWaitingTermination+0x54>)
 800588e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005890:	4b0b      	ldr	r3, [pc, #44]	; (80058c0 <prvCheckTasksWaitingTermination+0x58>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	3b01      	subs	r3, #1
 8005896:	4a0a      	ldr	r2, [pc, #40]	; (80058c0 <prvCheckTasksWaitingTermination+0x58>)
 8005898:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800589a:	f000 ffa3 	bl	80067e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	f000 f810 	bl	80058c4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80058a4:	4b06      	ldr	r3, [pc, #24]	; (80058c0 <prvCheckTasksWaitingTermination+0x58>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d1e1      	bne.n	8005870 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80058ac:	bf00      	nop
 80058ae:	bf00      	nop
 80058b0:	3708      	adds	r7, #8
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bd80      	pop	{r7, pc}
 80058b6:	bf00      	nop
 80058b8:	20000fa8 	.word	0x20000fa8
 80058bc:	20000fd4 	.word	0x20000fd4
 80058c0:	20000fbc 	.word	0x20000fbc

080058c4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b084      	sub	sp, #16
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d108      	bne.n	80058e8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058da:	4618      	mov	r0, r3
 80058dc:	f001 f940 	bl	8006b60 <vPortFree>
				vPortFree( pxTCB );
 80058e0:	6878      	ldr	r0, [r7, #4]
 80058e2:	f001 f93d 	bl	8006b60 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80058e6:	e018      	b.n	800591a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80058ee:	2b01      	cmp	r3, #1
 80058f0:	d103      	bne.n	80058fa <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	f001 f934 	bl	8006b60 <vPortFree>
	}
 80058f8:	e00f      	b.n	800591a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005900:	2b02      	cmp	r3, #2
 8005902:	d00a      	beq.n	800591a <prvDeleteTCB+0x56>
	__asm volatile
 8005904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005908:	f383 8811 	msr	BASEPRI, r3
 800590c:	f3bf 8f6f 	isb	sy
 8005910:	f3bf 8f4f 	dsb	sy
 8005914:	60fb      	str	r3, [r7, #12]
}
 8005916:	bf00      	nop
 8005918:	e7fe      	b.n	8005918 <prvDeleteTCB+0x54>
	}
 800591a:	bf00      	nop
 800591c:	3710      	adds	r7, #16
 800591e:	46bd      	mov	sp, r7
 8005920:	bd80      	pop	{r7, pc}
	...

08005924 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005924:	b480      	push	{r7}
 8005926:	b083      	sub	sp, #12
 8005928:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800592a:	4b0c      	ldr	r3, [pc, #48]	; (800595c <prvResetNextTaskUnblockTime+0x38>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d104      	bne.n	800593e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005934:	4b0a      	ldr	r3, [pc, #40]	; (8005960 <prvResetNextTaskUnblockTime+0x3c>)
 8005936:	f04f 32ff 	mov.w	r2, #4294967295
 800593a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800593c:	e008      	b.n	8005950 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800593e:	4b07      	ldr	r3, [pc, #28]	; (800595c <prvResetNextTaskUnblockTime+0x38>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	68db      	ldr	r3, [r3, #12]
 8005944:	68db      	ldr	r3, [r3, #12]
 8005946:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	4a04      	ldr	r2, [pc, #16]	; (8005960 <prvResetNextTaskUnblockTime+0x3c>)
 800594e:	6013      	str	r3, [r2, #0]
}
 8005950:	bf00      	nop
 8005952:	370c      	adds	r7, #12
 8005954:	46bd      	mov	sp, r7
 8005956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595a:	4770      	bx	lr
 800595c:	20000f8c 	.word	0x20000f8c
 8005960:	20000ff4 	.word	0x20000ff4

08005964 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005964:	b480      	push	{r7}
 8005966:	b083      	sub	sp, #12
 8005968:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800596a:	4b0b      	ldr	r3, [pc, #44]	; (8005998 <xTaskGetSchedulerState+0x34>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d102      	bne.n	8005978 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005972:	2301      	movs	r3, #1
 8005974:	607b      	str	r3, [r7, #4]
 8005976:	e008      	b.n	800598a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005978:	4b08      	ldr	r3, [pc, #32]	; (800599c <xTaskGetSchedulerState+0x38>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d102      	bne.n	8005986 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005980:	2302      	movs	r3, #2
 8005982:	607b      	str	r3, [r7, #4]
 8005984:	e001      	b.n	800598a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005986:	2300      	movs	r3, #0
 8005988:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800598a:	687b      	ldr	r3, [r7, #4]
	}
 800598c:	4618      	mov	r0, r3
 800598e:	370c      	adds	r7, #12
 8005990:	46bd      	mov	sp, r7
 8005992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005996:	4770      	bx	lr
 8005998:	20000fe0 	.word	0x20000fe0
 800599c:	20000ffc 	.word	0x20000ffc

080059a0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b084      	sub	sp, #16
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80059ac:	2300      	movs	r3, #0
 80059ae:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d051      	beq.n	8005a5a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059ba:	4b2a      	ldr	r3, [pc, #168]	; (8005a64 <xTaskPriorityInherit+0xc4>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059c0:	429a      	cmp	r2, r3
 80059c2:	d241      	bcs.n	8005a48 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	699b      	ldr	r3, [r3, #24]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	db06      	blt.n	80059da <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059cc:	4b25      	ldr	r3, [pc, #148]	; (8005a64 <xTaskPriorityInherit+0xc4>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059d2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	6959      	ldr	r1, [r3, #20]
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059e2:	4613      	mov	r3, r2
 80059e4:	009b      	lsls	r3, r3, #2
 80059e6:	4413      	add	r3, r2
 80059e8:	009b      	lsls	r3, r3, #2
 80059ea:	4a1f      	ldr	r2, [pc, #124]	; (8005a68 <xTaskPriorityInherit+0xc8>)
 80059ec:	4413      	add	r3, r2
 80059ee:	4299      	cmp	r1, r3
 80059f0:	d122      	bne.n	8005a38 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	3304      	adds	r3, #4
 80059f6:	4618      	mov	r0, r3
 80059f8:	f7fe fb5c 	bl	80040b4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80059fc:	4b19      	ldr	r3, [pc, #100]	; (8005a64 <xTaskPriorityInherit+0xc4>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a0a:	4b18      	ldr	r3, [pc, #96]	; (8005a6c <xTaskPriorityInherit+0xcc>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	429a      	cmp	r2, r3
 8005a10:	d903      	bls.n	8005a1a <xTaskPriorityInherit+0x7a>
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a16:	4a15      	ldr	r2, [pc, #84]	; (8005a6c <xTaskPriorityInherit+0xcc>)
 8005a18:	6013      	str	r3, [r2, #0]
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a1e:	4613      	mov	r3, r2
 8005a20:	009b      	lsls	r3, r3, #2
 8005a22:	4413      	add	r3, r2
 8005a24:	009b      	lsls	r3, r3, #2
 8005a26:	4a10      	ldr	r2, [pc, #64]	; (8005a68 <xTaskPriorityInherit+0xc8>)
 8005a28:	441a      	add	r2, r3
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	3304      	adds	r3, #4
 8005a2e:	4619      	mov	r1, r3
 8005a30:	4610      	mov	r0, r2
 8005a32:	f7fe fae2 	bl	8003ffa <vListInsertEnd>
 8005a36:	e004      	b.n	8005a42 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005a38:	4b0a      	ldr	r3, [pc, #40]	; (8005a64 <xTaskPriorityInherit+0xc4>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005a42:	2301      	movs	r3, #1
 8005a44:	60fb      	str	r3, [r7, #12]
 8005a46:	e008      	b.n	8005a5a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005a4c:	4b05      	ldr	r3, [pc, #20]	; (8005a64 <xTaskPriorityInherit+0xc4>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a52:	429a      	cmp	r2, r3
 8005a54:	d201      	bcs.n	8005a5a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005a56:	2301      	movs	r3, #1
 8005a58:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
	}
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	3710      	adds	r7, #16
 8005a60:	46bd      	mov	sp, r7
 8005a62:	bd80      	pop	{r7, pc}
 8005a64:	20000b00 	.word	0x20000b00
 8005a68:	20000b04 	.word	0x20000b04
 8005a6c:	20000fdc 	.word	0x20000fdc

08005a70 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b086      	sub	sp, #24
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d056      	beq.n	8005b34 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005a86:	4b2e      	ldr	r3, [pc, #184]	; (8005b40 <xTaskPriorityDisinherit+0xd0>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	693a      	ldr	r2, [r7, #16]
 8005a8c:	429a      	cmp	r2, r3
 8005a8e:	d00a      	beq.n	8005aa6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a94:	f383 8811 	msr	BASEPRI, r3
 8005a98:	f3bf 8f6f 	isb	sy
 8005a9c:	f3bf 8f4f 	dsb	sy
 8005aa0:	60fb      	str	r3, [r7, #12]
}
 8005aa2:	bf00      	nop
 8005aa4:	e7fe      	b.n	8005aa4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005aa6:	693b      	ldr	r3, [r7, #16]
 8005aa8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d10a      	bne.n	8005ac4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ab2:	f383 8811 	msr	BASEPRI, r3
 8005ab6:	f3bf 8f6f 	isb	sy
 8005aba:	f3bf 8f4f 	dsb	sy
 8005abe:	60bb      	str	r3, [r7, #8]
}
 8005ac0:	bf00      	nop
 8005ac2:	e7fe      	b.n	8005ac2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005ac4:	693b      	ldr	r3, [r7, #16]
 8005ac6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ac8:	1e5a      	subs	r2, r3, #1
 8005aca:	693b      	ldr	r3, [r7, #16]
 8005acc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005ace:	693b      	ldr	r3, [r7, #16]
 8005ad0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ad2:	693b      	ldr	r3, [r7, #16]
 8005ad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ad6:	429a      	cmp	r2, r3
 8005ad8:	d02c      	beq.n	8005b34 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005ada:	693b      	ldr	r3, [r7, #16]
 8005adc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d128      	bne.n	8005b34 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005ae2:	693b      	ldr	r3, [r7, #16]
 8005ae4:	3304      	adds	r3, #4
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	f7fe fae4 	bl	80040b4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005aec:	693b      	ldr	r3, [r7, #16]
 8005aee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005af4:	693b      	ldr	r3, [r7, #16]
 8005af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005af8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005afc:	693b      	ldr	r3, [r7, #16]
 8005afe:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b04:	4b0f      	ldr	r3, [pc, #60]	; (8005b44 <xTaskPriorityDisinherit+0xd4>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	429a      	cmp	r2, r3
 8005b0a:	d903      	bls.n	8005b14 <xTaskPriorityDisinherit+0xa4>
 8005b0c:	693b      	ldr	r3, [r7, #16]
 8005b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b10:	4a0c      	ldr	r2, [pc, #48]	; (8005b44 <xTaskPriorityDisinherit+0xd4>)
 8005b12:	6013      	str	r3, [r2, #0]
 8005b14:	693b      	ldr	r3, [r7, #16]
 8005b16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b18:	4613      	mov	r3, r2
 8005b1a:	009b      	lsls	r3, r3, #2
 8005b1c:	4413      	add	r3, r2
 8005b1e:	009b      	lsls	r3, r3, #2
 8005b20:	4a09      	ldr	r2, [pc, #36]	; (8005b48 <xTaskPriorityDisinherit+0xd8>)
 8005b22:	441a      	add	r2, r3
 8005b24:	693b      	ldr	r3, [r7, #16]
 8005b26:	3304      	adds	r3, #4
 8005b28:	4619      	mov	r1, r3
 8005b2a:	4610      	mov	r0, r2
 8005b2c:	f7fe fa65 	bl	8003ffa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005b30:	2301      	movs	r3, #1
 8005b32:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005b34:	697b      	ldr	r3, [r7, #20]
	}
 8005b36:	4618      	mov	r0, r3
 8005b38:	3718      	adds	r7, #24
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bd80      	pop	{r7, pc}
 8005b3e:	bf00      	nop
 8005b40:	20000b00 	.word	0x20000b00
 8005b44:	20000fdc 	.word	0x20000fdc
 8005b48:	20000b04 	.word	0x20000b04

08005b4c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b088      	sub	sp, #32
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
 8005b54:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d06a      	beq.n	8005c3a <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005b64:	69bb      	ldr	r3, [r7, #24]
 8005b66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d10a      	bne.n	8005b82 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8005b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b70:	f383 8811 	msr	BASEPRI, r3
 8005b74:	f3bf 8f6f 	isb	sy
 8005b78:	f3bf 8f4f 	dsb	sy
 8005b7c:	60fb      	str	r3, [r7, #12]
}
 8005b7e:	bf00      	nop
 8005b80:	e7fe      	b.n	8005b80 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005b82:	69bb      	ldr	r3, [r7, #24]
 8005b84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b86:	683a      	ldr	r2, [r7, #0]
 8005b88:	429a      	cmp	r2, r3
 8005b8a:	d902      	bls.n	8005b92 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	61fb      	str	r3, [r7, #28]
 8005b90:	e002      	b.n	8005b98 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005b92:	69bb      	ldr	r3, [r7, #24]
 8005b94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b96:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005b98:	69bb      	ldr	r3, [r7, #24]
 8005b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b9c:	69fa      	ldr	r2, [r7, #28]
 8005b9e:	429a      	cmp	r2, r3
 8005ba0:	d04b      	beq.n	8005c3a <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005ba2:	69bb      	ldr	r3, [r7, #24]
 8005ba4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ba6:	697a      	ldr	r2, [r7, #20]
 8005ba8:	429a      	cmp	r2, r3
 8005baa:	d146      	bne.n	8005c3a <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005bac:	4b25      	ldr	r3, [pc, #148]	; (8005c44 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	69ba      	ldr	r2, [r7, #24]
 8005bb2:	429a      	cmp	r2, r3
 8005bb4:	d10a      	bne.n	8005bcc <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8005bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bba:	f383 8811 	msr	BASEPRI, r3
 8005bbe:	f3bf 8f6f 	isb	sy
 8005bc2:	f3bf 8f4f 	dsb	sy
 8005bc6:	60bb      	str	r3, [r7, #8]
}
 8005bc8:	bf00      	nop
 8005bca:	e7fe      	b.n	8005bca <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005bcc:	69bb      	ldr	r3, [r7, #24]
 8005bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bd0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005bd2:	69bb      	ldr	r3, [r7, #24]
 8005bd4:	69fa      	ldr	r2, [r7, #28]
 8005bd6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005bd8:	69bb      	ldr	r3, [r7, #24]
 8005bda:	699b      	ldr	r3, [r3, #24]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	db04      	blt.n	8005bea <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005be0:	69fb      	ldr	r3, [r7, #28]
 8005be2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005be6:	69bb      	ldr	r3, [r7, #24]
 8005be8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005bea:	69bb      	ldr	r3, [r7, #24]
 8005bec:	6959      	ldr	r1, [r3, #20]
 8005bee:	693a      	ldr	r2, [r7, #16]
 8005bf0:	4613      	mov	r3, r2
 8005bf2:	009b      	lsls	r3, r3, #2
 8005bf4:	4413      	add	r3, r2
 8005bf6:	009b      	lsls	r3, r3, #2
 8005bf8:	4a13      	ldr	r2, [pc, #76]	; (8005c48 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8005bfa:	4413      	add	r3, r2
 8005bfc:	4299      	cmp	r1, r3
 8005bfe:	d11c      	bne.n	8005c3a <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005c00:	69bb      	ldr	r3, [r7, #24]
 8005c02:	3304      	adds	r3, #4
 8005c04:	4618      	mov	r0, r3
 8005c06:	f7fe fa55 	bl	80040b4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005c0a:	69bb      	ldr	r3, [r7, #24]
 8005c0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c0e:	4b0f      	ldr	r3, [pc, #60]	; (8005c4c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	429a      	cmp	r2, r3
 8005c14:	d903      	bls.n	8005c1e <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8005c16:	69bb      	ldr	r3, [r7, #24]
 8005c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c1a:	4a0c      	ldr	r2, [pc, #48]	; (8005c4c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8005c1c:	6013      	str	r3, [r2, #0]
 8005c1e:	69bb      	ldr	r3, [r7, #24]
 8005c20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c22:	4613      	mov	r3, r2
 8005c24:	009b      	lsls	r3, r3, #2
 8005c26:	4413      	add	r3, r2
 8005c28:	009b      	lsls	r3, r3, #2
 8005c2a:	4a07      	ldr	r2, [pc, #28]	; (8005c48 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8005c2c:	441a      	add	r2, r3
 8005c2e:	69bb      	ldr	r3, [r7, #24]
 8005c30:	3304      	adds	r3, #4
 8005c32:	4619      	mov	r1, r3
 8005c34:	4610      	mov	r0, r2
 8005c36:	f7fe f9e0 	bl	8003ffa <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005c3a:	bf00      	nop
 8005c3c:	3720      	adds	r7, #32
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd80      	pop	{r7, pc}
 8005c42:	bf00      	nop
 8005c44:	20000b00 	.word	0x20000b00
 8005c48:	20000b04 	.word	0x20000b04
 8005c4c:	20000fdc 	.word	0x20000fdc

08005c50 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8005c50:	b480      	push	{r7}
 8005c52:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005c54:	4b07      	ldr	r3, [pc, #28]	; (8005c74 <pvTaskIncrementMutexHeldCount+0x24>)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d004      	beq.n	8005c66 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005c5c:	4b05      	ldr	r3, [pc, #20]	; (8005c74 <pvTaskIncrementMutexHeldCount+0x24>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005c62:	3201      	adds	r2, #1
 8005c64:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8005c66:	4b03      	ldr	r3, [pc, #12]	; (8005c74 <pvTaskIncrementMutexHeldCount+0x24>)
 8005c68:	681b      	ldr	r3, [r3, #0]
	}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c72:	4770      	bx	lr
 8005c74:	20000b00 	.word	0x20000b00

08005c78 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b084      	sub	sp, #16
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
 8005c80:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005c82:	4b21      	ldr	r3, [pc, #132]	; (8005d08 <prvAddCurrentTaskToDelayedList+0x90>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005c88:	4b20      	ldr	r3, [pc, #128]	; (8005d0c <prvAddCurrentTaskToDelayedList+0x94>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	3304      	adds	r3, #4
 8005c8e:	4618      	mov	r0, r3
 8005c90:	f7fe fa10 	bl	80040b4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c9a:	d10a      	bne.n	8005cb2 <prvAddCurrentTaskToDelayedList+0x3a>
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d007      	beq.n	8005cb2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ca2:	4b1a      	ldr	r3, [pc, #104]	; (8005d0c <prvAddCurrentTaskToDelayedList+0x94>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	3304      	adds	r3, #4
 8005ca8:	4619      	mov	r1, r3
 8005caa:	4819      	ldr	r0, [pc, #100]	; (8005d10 <prvAddCurrentTaskToDelayedList+0x98>)
 8005cac:	f7fe f9a5 	bl	8003ffa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005cb0:	e026      	b.n	8005d00 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005cb2:	68fa      	ldr	r2, [r7, #12]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	4413      	add	r3, r2
 8005cb8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005cba:	4b14      	ldr	r3, [pc, #80]	; (8005d0c <prvAddCurrentTaskToDelayedList+0x94>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	68ba      	ldr	r2, [r7, #8]
 8005cc0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005cc2:	68ba      	ldr	r2, [r7, #8]
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	429a      	cmp	r2, r3
 8005cc8:	d209      	bcs.n	8005cde <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005cca:	4b12      	ldr	r3, [pc, #72]	; (8005d14 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005ccc:	681a      	ldr	r2, [r3, #0]
 8005cce:	4b0f      	ldr	r3, [pc, #60]	; (8005d0c <prvAddCurrentTaskToDelayedList+0x94>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	3304      	adds	r3, #4
 8005cd4:	4619      	mov	r1, r3
 8005cd6:	4610      	mov	r0, r2
 8005cd8:	f7fe f9b3 	bl	8004042 <vListInsert>
}
 8005cdc:	e010      	b.n	8005d00 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005cde:	4b0e      	ldr	r3, [pc, #56]	; (8005d18 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005ce0:	681a      	ldr	r2, [r3, #0]
 8005ce2:	4b0a      	ldr	r3, [pc, #40]	; (8005d0c <prvAddCurrentTaskToDelayedList+0x94>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	3304      	adds	r3, #4
 8005ce8:	4619      	mov	r1, r3
 8005cea:	4610      	mov	r0, r2
 8005cec:	f7fe f9a9 	bl	8004042 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005cf0:	4b0a      	ldr	r3, [pc, #40]	; (8005d1c <prvAddCurrentTaskToDelayedList+0xa4>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	68ba      	ldr	r2, [r7, #8]
 8005cf6:	429a      	cmp	r2, r3
 8005cf8:	d202      	bcs.n	8005d00 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005cfa:	4a08      	ldr	r2, [pc, #32]	; (8005d1c <prvAddCurrentTaskToDelayedList+0xa4>)
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	6013      	str	r3, [r2, #0]
}
 8005d00:	bf00      	nop
 8005d02:	3710      	adds	r7, #16
 8005d04:	46bd      	mov	sp, r7
 8005d06:	bd80      	pop	{r7, pc}
 8005d08:	20000fd8 	.word	0x20000fd8
 8005d0c:	20000b00 	.word	0x20000b00
 8005d10:	20000fc0 	.word	0x20000fc0
 8005d14:	20000f90 	.word	0x20000f90
 8005d18:	20000f8c 	.word	0x20000f8c
 8005d1c:	20000ff4 	.word	0x20000ff4

08005d20 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b08a      	sub	sp, #40	; 0x28
 8005d24:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005d26:	2300      	movs	r3, #0
 8005d28:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005d2a:	f000 fba1 	bl	8006470 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005d2e:	4b1c      	ldr	r3, [pc, #112]	; (8005da0 <xTimerCreateTimerTask+0x80>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d021      	beq.n	8005d7a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005d36:	2300      	movs	r3, #0
 8005d38:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005d3e:	1d3a      	adds	r2, r7, #4
 8005d40:	f107 0108 	add.w	r1, r7, #8
 8005d44:	f107 030c 	add.w	r3, r7, #12
 8005d48:	4618      	mov	r0, r3
 8005d4a:	f7fe f90f 	bl	8003f6c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005d4e:	6879      	ldr	r1, [r7, #4]
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	68fa      	ldr	r2, [r7, #12]
 8005d54:	9202      	str	r2, [sp, #8]
 8005d56:	9301      	str	r3, [sp, #4]
 8005d58:	2302      	movs	r3, #2
 8005d5a:	9300      	str	r3, [sp, #0]
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	460a      	mov	r2, r1
 8005d60:	4910      	ldr	r1, [pc, #64]	; (8005da4 <xTimerCreateTimerTask+0x84>)
 8005d62:	4811      	ldr	r0, [pc, #68]	; (8005da8 <xTimerCreateTimerTask+0x88>)
 8005d64:	f7fe ffe0 	bl	8004d28 <xTaskCreateStatic>
 8005d68:	4603      	mov	r3, r0
 8005d6a:	4a10      	ldr	r2, [pc, #64]	; (8005dac <xTimerCreateTimerTask+0x8c>)
 8005d6c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005d6e:	4b0f      	ldr	r3, [pc, #60]	; (8005dac <xTimerCreateTimerTask+0x8c>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d001      	beq.n	8005d7a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005d76:	2301      	movs	r3, #1
 8005d78:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d10a      	bne.n	8005d96 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d84:	f383 8811 	msr	BASEPRI, r3
 8005d88:	f3bf 8f6f 	isb	sy
 8005d8c:	f3bf 8f4f 	dsb	sy
 8005d90:	613b      	str	r3, [r7, #16]
}
 8005d92:	bf00      	nop
 8005d94:	e7fe      	b.n	8005d94 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005d96:	697b      	ldr	r3, [r7, #20]
}
 8005d98:	4618      	mov	r0, r3
 8005d9a:	3718      	adds	r7, #24
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bd80      	pop	{r7, pc}
 8005da0:	20001030 	.word	0x20001030
 8005da4:	08007700 	.word	0x08007700
 8005da8:	08006019 	.word	0x08006019
 8005dac:	20001034 	.word	0x20001034

08005db0 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b088      	sub	sp, #32
 8005db4:	af02      	add	r7, sp, #8
 8005db6:	60f8      	str	r0, [r7, #12]
 8005db8:	60b9      	str	r1, [r7, #8]
 8005dba:	607a      	str	r2, [r7, #4]
 8005dbc:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8005dbe:	202c      	movs	r0, #44	; 0x2c
 8005dc0:	f000 fe02 	bl	80069c8 <pvPortMalloc>
 8005dc4:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d00d      	beq.n	8005de8 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8005dcc:	697b      	ldr	r3, [r7, #20]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8005dd4:	697b      	ldr	r3, [r7, #20]
 8005dd6:	9301      	str	r3, [sp, #4]
 8005dd8:	6a3b      	ldr	r3, [r7, #32]
 8005dda:	9300      	str	r3, [sp, #0]
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	687a      	ldr	r2, [r7, #4]
 8005de0:	68b9      	ldr	r1, [r7, #8]
 8005de2:	68f8      	ldr	r0, [r7, #12]
 8005de4:	f000 f843 	bl	8005e6e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8005de8:	697b      	ldr	r3, [r7, #20]
	}
 8005dea:	4618      	mov	r0, r3
 8005dec:	3718      	adds	r7, #24
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bd80      	pop	{r7, pc}

08005df2 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8005df2:	b580      	push	{r7, lr}
 8005df4:	b08a      	sub	sp, #40	; 0x28
 8005df6:	af02      	add	r7, sp, #8
 8005df8:	60f8      	str	r0, [r7, #12]
 8005dfa:	60b9      	str	r1, [r7, #8]
 8005dfc:	607a      	str	r2, [r7, #4]
 8005dfe:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8005e00:	232c      	movs	r3, #44	; 0x2c
 8005e02:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8005e04:	693b      	ldr	r3, [r7, #16]
 8005e06:	2b2c      	cmp	r3, #44	; 0x2c
 8005e08:	d00a      	beq.n	8005e20 <xTimerCreateStatic+0x2e>
	__asm volatile
 8005e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e0e:	f383 8811 	msr	BASEPRI, r3
 8005e12:	f3bf 8f6f 	isb	sy
 8005e16:	f3bf 8f4f 	dsb	sy
 8005e1a:	61bb      	str	r3, [r7, #24]
}
 8005e1c:	bf00      	nop
 8005e1e:	e7fe      	b.n	8005e1e <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005e20:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8005e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d10a      	bne.n	8005e3e <xTimerCreateStatic+0x4c>
	__asm volatile
 8005e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e2c:	f383 8811 	msr	BASEPRI, r3
 8005e30:	f3bf 8f6f 	isb	sy
 8005e34:	f3bf 8f4f 	dsb	sy
 8005e38:	617b      	str	r3, [r7, #20]
}
 8005e3a:	bf00      	nop
 8005e3c:	e7fe      	b.n	8005e3c <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8005e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e40:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8005e42:	69fb      	ldr	r3, [r7, #28]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d00d      	beq.n	8005e64 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8005e48:	69fb      	ldr	r3, [r7, #28]
 8005e4a:	2202      	movs	r2, #2
 8005e4c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8005e50:	69fb      	ldr	r3, [r7, #28]
 8005e52:	9301      	str	r3, [sp, #4]
 8005e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e56:	9300      	str	r3, [sp, #0]
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	687a      	ldr	r2, [r7, #4]
 8005e5c:	68b9      	ldr	r1, [r7, #8]
 8005e5e:	68f8      	ldr	r0, [r7, #12]
 8005e60:	f000 f805 	bl	8005e6e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8005e64:	69fb      	ldr	r3, [r7, #28]
	}
 8005e66:	4618      	mov	r0, r3
 8005e68:	3720      	adds	r7, #32
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}

08005e6e <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8005e6e:	b580      	push	{r7, lr}
 8005e70:	b086      	sub	sp, #24
 8005e72:	af00      	add	r7, sp, #0
 8005e74:	60f8      	str	r0, [r7, #12]
 8005e76:	60b9      	str	r1, [r7, #8]
 8005e78:	607a      	str	r2, [r7, #4]
 8005e7a:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d10a      	bne.n	8005e98 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8005e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e86:	f383 8811 	msr	BASEPRI, r3
 8005e8a:	f3bf 8f6f 	isb	sy
 8005e8e:	f3bf 8f4f 	dsb	sy
 8005e92:	617b      	str	r3, [r7, #20]
}
 8005e94:	bf00      	nop
 8005e96:	e7fe      	b.n	8005e96 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8005e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d01e      	beq.n	8005edc <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8005e9e:	f000 fae7 	bl	8006470 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8005ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea4:	68fa      	ldr	r2, [r7, #12]
 8005ea6:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8005ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eaa:	68ba      	ldr	r2, [r7, #8]
 8005eac:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8005eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb0:	683a      	ldr	r2, [r7, #0]
 8005eb2:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8005eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb6:	6a3a      	ldr	r2, [r7, #32]
 8005eb8:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8005eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ebc:	3304      	adds	r3, #4
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	f7fe f88e 	bl	8003fe0 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d008      	beq.n	8005edc <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8005eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ecc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005ed0:	f043 0304 	orr.w	r3, r3, #4
 8005ed4:	b2da      	uxtb	r2, r3
 8005ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8005edc:	bf00      	nop
 8005ede:	3718      	adds	r7, #24
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bd80      	pop	{r7, pc}

08005ee4 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b08a      	sub	sp, #40	; 0x28
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	60f8      	str	r0, [r7, #12]
 8005eec:	60b9      	str	r1, [r7, #8]
 8005eee:	607a      	str	r2, [r7, #4]
 8005ef0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d10a      	bne.n	8005f12 <xTimerGenericCommand+0x2e>
	__asm volatile
 8005efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f00:	f383 8811 	msr	BASEPRI, r3
 8005f04:	f3bf 8f6f 	isb	sy
 8005f08:	f3bf 8f4f 	dsb	sy
 8005f0c:	623b      	str	r3, [r7, #32]
}
 8005f0e:	bf00      	nop
 8005f10:	e7fe      	b.n	8005f10 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005f12:	4b1a      	ldr	r3, [pc, #104]	; (8005f7c <xTimerGenericCommand+0x98>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d02a      	beq.n	8005f70 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	2b05      	cmp	r3, #5
 8005f2a:	dc18      	bgt.n	8005f5e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005f2c:	f7ff fd1a 	bl	8005964 <xTaskGetSchedulerState>
 8005f30:	4603      	mov	r3, r0
 8005f32:	2b02      	cmp	r3, #2
 8005f34:	d109      	bne.n	8005f4a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005f36:	4b11      	ldr	r3, [pc, #68]	; (8005f7c <xTimerGenericCommand+0x98>)
 8005f38:	6818      	ldr	r0, [r3, #0]
 8005f3a:	f107 0110 	add.w	r1, r7, #16
 8005f3e:	2300      	movs	r3, #0
 8005f40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f42:	f7fe f9e5 	bl	8004310 <xQueueGenericSend>
 8005f46:	6278      	str	r0, [r7, #36]	; 0x24
 8005f48:	e012      	b.n	8005f70 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005f4a:	4b0c      	ldr	r3, [pc, #48]	; (8005f7c <xTimerGenericCommand+0x98>)
 8005f4c:	6818      	ldr	r0, [r3, #0]
 8005f4e:	f107 0110 	add.w	r1, r7, #16
 8005f52:	2300      	movs	r3, #0
 8005f54:	2200      	movs	r2, #0
 8005f56:	f7fe f9db 	bl	8004310 <xQueueGenericSend>
 8005f5a:	6278      	str	r0, [r7, #36]	; 0x24
 8005f5c:	e008      	b.n	8005f70 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005f5e:	4b07      	ldr	r3, [pc, #28]	; (8005f7c <xTimerGenericCommand+0x98>)
 8005f60:	6818      	ldr	r0, [r3, #0]
 8005f62:	f107 0110 	add.w	r1, r7, #16
 8005f66:	2300      	movs	r3, #0
 8005f68:	683a      	ldr	r2, [r7, #0]
 8005f6a:	f7fe facf 	bl	800450c <xQueueGenericSendFromISR>
 8005f6e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005f72:	4618      	mov	r0, r3
 8005f74:	3728      	adds	r7, #40	; 0x28
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bd80      	pop	{r7, pc}
 8005f7a:	bf00      	nop
 8005f7c:	20001030 	.word	0x20001030

08005f80 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b088      	sub	sp, #32
 8005f84:	af02      	add	r7, sp, #8
 8005f86:	6078      	str	r0, [r7, #4]
 8005f88:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f8a:	4b22      	ldr	r3, [pc, #136]	; (8006014 <prvProcessExpiredTimer+0x94>)
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	68db      	ldr	r3, [r3, #12]
 8005f90:	68db      	ldr	r3, [r3, #12]
 8005f92:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	3304      	adds	r3, #4
 8005f98:	4618      	mov	r0, r3
 8005f9a:	f7fe f88b 	bl	80040b4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005f9e:	697b      	ldr	r3, [r7, #20]
 8005fa0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005fa4:	f003 0304 	and.w	r3, r3, #4
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d022      	beq.n	8005ff2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005fac:	697b      	ldr	r3, [r7, #20]
 8005fae:	699a      	ldr	r2, [r3, #24]
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	18d1      	adds	r1, r2, r3
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	683a      	ldr	r2, [r7, #0]
 8005fb8:	6978      	ldr	r0, [r7, #20]
 8005fba:	f000 f8d1 	bl	8006160 <prvInsertTimerInActiveList>
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d01f      	beq.n	8006004 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	9300      	str	r3, [sp, #0]
 8005fc8:	2300      	movs	r3, #0
 8005fca:	687a      	ldr	r2, [r7, #4]
 8005fcc:	2100      	movs	r1, #0
 8005fce:	6978      	ldr	r0, [r7, #20]
 8005fd0:	f7ff ff88 	bl	8005ee4 <xTimerGenericCommand>
 8005fd4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005fd6:	693b      	ldr	r3, [r7, #16]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d113      	bne.n	8006004 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fe0:	f383 8811 	msr	BASEPRI, r3
 8005fe4:	f3bf 8f6f 	isb	sy
 8005fe8:	f3bf 8f4f 	dsb	sy
 8005fec:	60fb      	str	r3, [r7, #12]
}
 8005fee:	bf00      	nop
 8005ff0:	e7fe      	b.n	8005ff0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005ff8:	f023 0301 	bic.w	r3, r3, #1
 8005ffc:	b2da      	uxtb	r2, r3
 8005ffe:	697b      	ldr	r3, [r7, #20]
 8006000:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006004:	697b      	ldr	r3, [r7, #20]
 8006006:	6a1b      	ldr	r3, [r3, #32]
 8006008:	6978      	ldr	r0, [r7, #20]
 800600a:	4798      	blx	r3
}
 800600c:	bf00      	nop
 800600e:	3718      	adds	r7, #24
 8006010:	46bd      	mov	sp, r7
 8006012:	bd80      	pop	{r7, pc}
 8006014:	20001028 	.word	0x20001028

08006018 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b084      	sub	sp, #16
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006020:	f107 0308 	add.w	r3, r7, #8
 8006024:	4618      	mov	r0, r3
 8006026:	f000 f857 	bl	80060d8 <prvGetNextExpireTime>
 800602a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	4619      	mov	r1, r3
 8006030:	68f8      	ldr	r0, [r7, #12]
 8006032:	f000 f803 	bl	800603c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006036:	f000 f8d5 	bl	80061e4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800603a:	e7f1      	b.n	8006020 <prvTimerTask+0x8>

0800603c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b084      	sub	sp, #16
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
 8006044:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006046:	f7ff f8ab 	bl	80051a0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800604a:	f107 0308 	add.w	r3, r7, #8
 800604e:	4618      	mov	r0, r3
 8006050:	f000 f866 	bl	8006120 <prvSampleTimeNow>
 8006054:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d130      	bne.n	80060be <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d10a      	bne.n	8006078 <prvProcessTimerOrBlockTask+0x3c>
 8006062:	687a      	ldr	r2, [r7, #4]
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	429a      	cmp	r2, r3
 8006068:	d806      	bhi.n	8006078 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800606a:	f7ff f8a7 	bl	80051bc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800606e:	68f9      	ldr	r1, [r7, #12]
 8006070:	6878      	ldr	r0, [r7, #4]
 8006072:	f7ff ff85 	bl	8005f80 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006076:	e024      	b.n	80060c2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d008      	beq.n	8006090 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800607e:	4b13      	ldr	r3, [pc, #76]	; (80060cc <prvProcessTimerOrBlockTask+0x90>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d101      	bne.n	800608c <prvProcessTimerOrBlockTask+0x50>
 8006088:	2301      	movs	r3, #1
 800608a:	e000      	b.n	800608e <prvProcessTimerOrBlockTask+0x52>
 800608c:	2300      	movs	r3, #0
 800608e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006090:	4b0f      	ldr	r3, [pc, #60]	; (80060d0 <prvProcessTimerOrBlockTask+0x94>)
 8006092:	6818      	ldr	r0, [r3, #0]
 8006094:	687a      	ldr	r2, [r7, #4]
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	1ad3      	subs	r3, r2, r3
 800609a:	683a      	ldr	r2, [r7, #0]
 800609c:	4619      	mov	r1, r3
 800609e:	f7fe fe0f 	bl	8004cc0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80060a2:	f7ff f88b 	bl	80051bc <xTaskResumeAll>
 80060a6:	4603      	mov	r3, r0
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d10a      	bne.n	80060c2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80060ac:	4b09      	ldr	r3, [pc, #36]	; (80060d4 <prvProcessTimerOrBlockTask+0x98>)
 80060ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060b2:	601a      	str	r2, [r3, #0]
 80060b4:	f3bf 8f4f 	dsb	sy
 80060b8:	f3bf 8f6f 	isb	sy
}
 80060bc:	e001      	b.n	80060c2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80060be:	f7ff f87d 	bl	80051bc <xTaskResumeAll>
}
 80060c2:	bf00      	nop
 80060c4:	3710      	adds	r7, #16
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bd80      	pop	{r7, pc}
 80060ca:	bf00      	nop
 80060cc:	2000102c 	.word	0x2000102c
 80060d0:	20001030 	.word	0x20001030
 80060d4:	e000ed04 	.word	0xe000ed04

080060d8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80060d8:	b480      	push	{r7}
 80060da:	b085      	sub	sp, #20
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80060e0:	4b0e      	ldr	r3, [pc, #56]	; (800611c <prvGetNextExpireTime+0x44>)
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d101      	bne.n	80060ee <prvGetNextExpireTime+0x16>
 80060ea:	2201      	movs	r2, #1
 80060ec:	e000      	b.n	80060f0 <prvGetNextExpireTime+0x18>
 80060ee:	2200      	movs	r2, #0
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d105      	bne.n	8006108 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80060fc:	4b07      	ldr	r3, [pc, #28]	; (800611c <prvGetNextExpireTime+0x44>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	68db      	ldr	r3, [r3, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	60fb      	str	r3, [r7, #12]
 8006106:	e001      	b.n	800610c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006108:	2300      	movs	r3, #0
 800610a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800610c:	68fb      	ldr	r3, [r7, #12]
}
 800610e:	4618      	mov	r0, r3
 8006110:	3714      	adds	r7, #20
 8006112:	46bd      	mov	sp, r7
 8006114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006118:	4770      	bx	lr
 800611a:	bf00      	nop
 800611c:	20001028 	.word	0x20001028

08006120 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b084      	sub	sp, #16
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006128:	f7ff f8e6 	bl	80052f8 <xTaskGetTickCount>
 800612c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800612e:	4b0b      	ldr	r3, [pc, #44]	; (800615c <prvSampleTimeNow+0x3c>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	68fa      	ldr	r2, [r7, #12]
 8006134:	429a      	cmp	r2, r3
 8006136:	d205      	bcs.n	8006144 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006138:	f000 f936 	bl	80063a8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2201      	movs	r2, #1
 8006140:	601a      	str	r2, [r3, #0]
 8006142:	e002      	b.n	800614a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2200      	movs	r2, #0
 8006148:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800614a:	4a04      	ldr	r2, [pc, #16]	; (800615c <prvSampleTimeNow+0x3c>)
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006150:	68fb      	ldr	r3, [r7, #12]
}
 8006152:	4618      	mov	r0, r3
 8006154:	3710      	adds	r7, #16
 8006156:	46bd      	mov	sp, r7
 8006158:	bd80      	pop	{r7, pc}
 800615a:	bf00      	nop
 800615c:	20001038 	.word	0x20001038

08006160 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b086      	sub	sp, #24
 8006164:	af00      	add	r7, sp, #0
 8006166:	60f8      	str	r0, [r7, #12]
 8006168:	60b9      	str	r1, [r7, #8]
 800616a:	607a      	str	r2, [r7, #4]
 800616c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800616e:	2300      	movs	r3, #0
 8006170:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	68ba      	ldr	r2, [r7, #8]
 8006176:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	68fa      	ldr	r2, [r7, #12]
 800617c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800617e:	68ba      	ldr	r2, [r7, #8]
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	429a      	cmp	r2, r3
 8006184:	d812      	bhi.n	80061ac <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006186:	687a      	ldr	r2, [r7, #4]
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	1ad2      	subs	r2, r2, r3
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	699b      	ldr	r3, [r3, #24]
 8006190:	429a      	cmp	r2, r3
 8006192:	d302      	bcc.n	800619a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006194:	2301      	movs	r3, #1
 8006196:	617b      	str	r3, [r7, #20]
 8006198:	e01b      	b.n	80061d2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800619a:	4b10      	ldr	r3, [pc, #64]	; (80061dc <prvInsertTimerInActiveList+0x7c>)
 800619c:	681a      	ldr	r2, [r3, #0]
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	3304      	adds	r3, #4
 80061a2:	4619      	mov	r1, r3
 80061a4:	4610      	mov	r0, r2
 80061a6:	f7fd ff4c 	bl	8004042 <vListInsert>
 80061aa:	e012      	b.n	80061d2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80061ac:	687a      	ldr	r2, [r7, #4]
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	429a      	cmp	r2, r3
 80061b2:	d206      	bcs.n	80061c2 <prvInsertTimerInActiveList+0x62>
 80061b4:	68ba      	ldr	r2, [r7, #8]
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	429a      	cmp	r2, r3
 80061ba:	d302      	bcc.n	80061c2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80061bc:	2301      	movs	r3, #1
 80061be:	617b      	str	r3, [r7, #20]
 80061c0:	e007      	b.n	80061d2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80061c2:	4b07      	ldr	r3, [pc, #28]	; (80061e0 <prvInsertTimerInActiveList+0x80>)
 80061c4:	681a      	ldr	r2, [r3, #0]
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	3304      	adds	r3, #4
 80061ca:	4619      	mov	r1, r3
 80061cc:	4610      	mov	r0, r2
 80061ce:	f7fd ff38 	bl	8004042 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80061d2:	697b      	ldr	r3, [r7, #20]
}
 80061d4:	4618      	mov	r0, r3
 80061d6:	3718      	adds	r7, #24
 80061d8:	46bd      	mov	sp, r7
 80061da:	bd80      	pop	{r7, pc}
 80061dc:	2000102c 	.word	0x2000102c
 80061e0:	20001028 	.word	0x20001028

080061e4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b08e      	sub	sp, #56	; 0x38
 80061e8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80061ea:	e0ca      	b.n	8006382 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	da18      	bge.n	8006224 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80061f2:	1d3b      	adds	r3, r7, #4
 80061f4:	3304      	adds	r3, #4
 80061f6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80061f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d10a      	bne.n	8006214 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80061fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006202:	f383 8811 	msr	BASEPRI, r3
 8006206:	f3bf 8f6f 	isb	sy
 800620a:	f3bf 8f4f 	dsb	sy
 800620e:	61fb      	str	r3, [r7, #28]
}
 8006210:	bf00      	nop
 8006212:	e7fe      	b.n	8006212 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800621a:	6850      	ldr	r0, [r2, #4]
 800621c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800621e:	6892      	ldr	r2, [r2, #8]
 8006220:	4611      	mov	r1, r2
 8006222:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2b00      	cmp	r3, #0
 8006228:	f2c0 80aa 	blt.w	8006380 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006232:	695b      	ldr	r3, [r3, #20]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d004      	beq.n	8006242 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800623a:	3304      	adds	r3, #4
 800623c:	4618      	mov	r0, r3
 800623e:	f7fd ff39 	bl	80040b4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006242:	463b      	mov	r3, r7
 8006244:	4618      	mov	r0, r3
 8006246:	f7ff ff6b 	bl	8006120 <prvSampleTimeNow>
 800624a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2b09      	cmp	r3, #9
 8006250:	f200 8097 	bhi.w	8006382 <prvProcessReceivedCommands+0x19e>
 8006254:	a201      	add	r2, pc, #4	; (adr r2, 800625c <prvProcessReceivedCommands+0x78>)
 8006256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800625a:	bf00      	nop
 800625c:	08006285 	.word	0x08006285
 8006260:	08006285 	.word	0x08006285
 8006264:	08006285 	.word	0x08006285
 8006268:	080062f9 	.word	0x080062f9
 800626c:	0800630d 	.word	0x0800630d
 8006270:	08006357 	.word	0x08006357
 8006274:	08006285 	.word	0x08006285
 8006278:	08006285 	.word	0x08006285
 800627c:	080062f9 	.word	0x080062f9
 8006280:	0800630d 	.word	0x0800630d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006286:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800628a:	f043 0301 	orr.w	r3, r3, #1
 800628e:	b2da      	uxtb	r2, r3
 8006290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006292:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006296:	68ba      	ldr	r2, [r7, #8]
 8006298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800629a:	699b      	ldr	r3, [r3, #24]
 800629c:	18d1      	adds	r1, r2, r3
 800629e:	68bb      	ldr	r3, [r7, #8]
 80062a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062a4:	f7ff ff5c 	bl	8006160 <prvInsertTimerInActiveList>
 80062a8:	4603      	mov	r3, r0
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d069      	beq.n	8006382 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80062ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062b0:	6a1b      	ldr	r3, [r3, #32]
 80062b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062b4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80062b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80062bc:	f003 0304 	and.w	r3, r3, #4
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d05e      	beq.n	8006382 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80062c4:	68ba      	ldr	r2, [r7, #8]
 80062c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062c8:	699b      	ldr	r3, [r3, #24]
 80062ca:	441a      	add	r2, r3
 80062cc:	2300      	movs	r3, #0
 80062ce:	9300      	str	r3, [sp, #0]
 80062d0:	2300      	movs	r3, #0
 80062d2:	2100      	movs	r1, #0
 80062d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80062d6:	f7ff fe05 	bl	8005ee4 <xTimerGenericCommand>
 80062da:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80062dc:	6a3b      	ldr	r3, [r7, #32]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d14f      	bne.n	8006382 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80062e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062e6:	f383 8811 	msr	BASEPRI, r3
 80062ea:	f3bf 8f6f 	isb	sy
 80062ee:	f3bf 8f4f 	dsb	sy
 80062f2:	61bb      	str	r3, [r7, #24]
}
 80062f4:	bf00      	nop
 80062f6:	e7fe      	b.n	80062f6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80062f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80062fe:	f023 0301 	bic.w	r3, r3, #1
 8006302:	b2da      	uxtb	r2, r3
 8006304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006306:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800630a:	e03a      	b.n	8006382 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800630c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800630e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006312:	f043 0301 	orr.w	r3, r3, #1
 8006316:	b2da      	uxtb	r2, r3
 8006318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800631a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800631e:	68ba      	ldr	r2, [r7, #8]
 8006320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006322:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006326:	699b      	ldr	r3, [r3, #24]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d10a      	bne.n	8006342 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800632c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006330:	f383 8811 	msr	BASEPRI, r3
 8006334:	f3bf 8f6f 	isb	sy
 8006338:	f3bf 8f4f 	dsb	sy
 800633c:	617b      	str	r3, [r7, #20]
}
 800633e:	bf00      	nop
 8006340:	e7fe      	b.n	8006340 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006344:	699a      	ldr	r2, [r3, #24]
 8006346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006348:	18d1      	adds	r1, r2, r3
 800634a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800634c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800634e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006350:	f7ff ff06 	bl	8006160 <prvInsertTimerInActiveList>
					break;
 8006354:	e015      	b.n	8006382 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006358:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800635c:	f003 0302 	and.w	r3, r3, #2
 8006360:	2b00      	cmp	r3, #0
 8006362:	d103      	bne.n	800636c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006364:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006366:	f000 fbfb 	bl	8006b60 <vPortFree>
 800636a:	e00a      	b.n	8006382 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800636c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800636e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006372:	f023 0301 	bic.w	r3, r3, #1
 8006376:	b2da      	uxtb	r2, r3
 8006378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800637a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800637e:	e000      	b.n	8006382 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006380:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006382:	4b08      	ldr	r3, [pc, #32]	; (80063a4 <prvProcessReceivedCommands+0x1c0>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	1d39      	adds	r1, r7, #4
 8006388:	2200      	movs	r2, #0
 800638a:	4618      	mov	r0, r3
 800638c:	f7fe f95a 	bl	8004644 <xQueueReceive>
 8006390:	4603      	mov	r3, r0
 8006392:	2b00      	cmp	r3, #0
 8006394:	f47f af2a 	bne.w	80061ec <prvProcessReceivedCommands+0x8>
	}
}
 8006398:	bf00      	nop
 800639a:	bf00      	nop
 800639c:	3730      	adds	r7, #48	; 0x30
 800639e:	46bd      	mov	sp, r7
 80063a0:	bd80      	pop	{r7, pc}
 80063a2:	bf00      	nop
 80063a4:	20001030 	.word	0x20001030

080063a8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b088      	sub	sp, #32
 80063ac:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80063ae:	e048      	b.n	8006442 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80063b0:	4b2d      	ldr	r3, [pc, #180]	; (8006468 <prvSwitchTimerLists+0xc0>)
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	68db      	ldr	r3, [r3, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063ba:	4b2b      	ldr	r3, [pc, #172]	; (8006468 <prvSwitchTimerLists+0xc0>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	68db      	ldr	r3, [r3, #12]
 80063c0:	68db      	ldr	r3, [r3, #12]
 80063c2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	3304      	adds	r3, #4
 80063c8:	4618      	mov	r0, r3
 80063ca:	f7fd fe73 	bl	80040b4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	6a1b      	ldr	r3, [r3, #32]
 80063d2:	68f8      	ldr	r0, [r7, #12]
 80063d4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80063dc:	f003 0304 	and.w	r3, r3, #4
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d02e      	beq.n	8006442 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	699b      	ldr	r3, [r3, #24]
 80063e8:	693a      	ldr	r2, [r7, #16]
 80063ea:	4413      	add	r3, r2
 80063ec:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80063ee:	68ba      	ldr	r2, [r7, #8]
 80063f0:	693b      	ldr	r3, [r7, #16]
 80063f2:	429a      	cmp	r2, r3
 80063f4:	d90e      	bls.n	8006414 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	68ba      	ldr	r2, [r7, #8]
 80063fa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	68fa      	ldr	r2, [r7, #12]
 8006400:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006402:	4b19      	ldr	r3, [pc, #100]	; (8006468 <prvSwitchTimerLists+0xc0>)
 8006404:	681a      	ldr	r2, [r3, #0]
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	3304      	adds	r3, #4
 800640a:	4619      	mov	r1, r3
 800640c:	4610      	mov	r0, r2
 800640e:	f7fd fe18 	bl	8004042 <vListInsert>
 8006412:	e016      	b.n	8006442 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006414:	2300      	movs	r3, #0
 8006416:	9300      	str	r3, [sp, #0]
 8006418:	2300      	movs	r3, #0
 800641a:	693a      	ldr	r2, [r7, #16]
 800641c:	2100      	movs	r1, #0
 800641e:	68f8      	ldr	r0, [r7, #12]
 8006420:	f7ff fd60 	bl	8005ee4 <xTimerGenericCommand>
 8006424:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d10a      	bne.n	8006442 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800642c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006430:	f383 8811 	msr	BASEPRI, r3
 8006434:	f3bf 8f6f 	isb	sy
 8006438:	f3bf 8f4f 	dsb	sy
 800643c:	603b      	str	r3, [r7, #0]
}
 800643e:	bf00      	nop
 8006440:	e7fe      	b.n	8006440 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006442:	4b09      	ldr	r3, [pc, #36]	; (8006468 <prvSwitchTimerLists+0xc0>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d1b1      	bne.n	80063b0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800644c:	4b06      	ldr	r3, [pc, #24]	; (8006468 <prvSwitchTimerLists+0xc0>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006452:	4b06      	ldr	r3, [pc, #24]	; (800646c <prvSwitchTimerLists+0xc4>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4a04      	ldr	r2, [pc, #16]	; (8006468 <prvSwitchTimerLists+0xc0>)
 8006458:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800645a:	4a04      	ldr	r2, [pc, #16]	; (800646c <prvSwitchTimerLists+0xc4>)
 800645c:	697b      	ldr	r3, [r7, #20]
 800645e:	6013      	str	r3, [r2, #0]
}
 8006460:	bf00      	nop
 8006462:	3718      	adds	r7, #24
 8006464:	46bd      	mov	sp, r7
 8006466:	bd80      	pop	{r7, pc}
 8006468:	20001028 	.word	0x20001028
 800646c:	2000102c 	.word	0x2000102c

08006470 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b082      	sub	sp, #8
 8006474:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006476:	f000 f985 	bl	8006784 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800647a:	4b15      	ldr	r3, [pc, #84]	; (80064d0 <prvCheckForValidListAndQueue+0x60>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d120      	bne.n	80064c4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006482:	4814      	ldr	r0, [pc, #80]	; (80064d4 <prvCheckForValidListAndQueue+0x64>)
 8006484:	f7fd fd8c 	bl	8003fa0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006488:	4813      	ldr	r0, [pc, #76]	; (80064d8 <prvCheckForValidListAndQueue+0x68>)
 800648a:	f7fd fd89 	bl	8003fa0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800648e:	4b13      	ldr	r3, [pc, #76]	; (80064dc <prvCheckForValidListAndQueue+0x6c>)
 8006490:	4a10      	ldr	r2, [pc, #64]	; (80064d4 <prvCheckForValidListAndQueue+0x64>)
 8006492:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006494:	4b12      	ldr	r3, [pc, #72]	; (80064e0 <prvCheckForValidListAndQueue+0x70>)
 8006496:	4a10      	ldr	r2, [pc, #64]	; (80064d8 <prvCheckForValidListAndQueue+0x68>)
 8006498:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800649a:	2300      	movs	r3, #0
 800649c:	9300      	str	r3, [sp, #0]
 800649e:	4b11      	ldr	r3, [pc, #68]	; (80064e4 <prvCheckForValidListAndQueue+0x74>)
 80064a0:	4a11      	ldr	r2, [pc, #68]	; (80064e8 <prvCheckForValidListAndQueue+0x78>)
 80064a2:	2110      	movs	r1, #16
 80064a4:	200a      	movs	r0, #10
 80064a6:	f7fd fe97 	bl	80041d8 <xQueueGenericCreateStatic>
 80064aa:	4603      	mov	r3, r0
 80064ac:	4a08      	ldr	r2, [pc, #32]	; (80064d0 <prvCheckForValidListAndQueue+0x60>)
 80064ae:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80064b0:	4b07      	ldr	r3, [pc, #28]	; (80064d0 <prvCheckForValidListAndQueue+0x60>)
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d005      	beq.n	80064c4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80064b8:	4b05      	ldr	r3, [pc, #20]	; (80064d0 <prvCheckForValidListAndQueue+0x60>)
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	490b      	ldr	r1, [pc, #44]	; (80064ec <prvCheckForValidListAndQueue+0x7c>)
 80064be:	4618      	mov	r0, r3
 80064c0:	f7fe fbd4 	bl	8004c6c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80064c4:	f000 f98e 	bl	80067e4 <vPortExitCritical>
}
 80064c8:	bf00      	nop
 80064ca:	46bd      	mov	sp, r7
 80064cc:	bd80      	pop	{r7, pc}
 80064ce:	bf00      	nop
 80064d0:	20001030 	.word	0x20001030
 80064d4:	20001000 	.word	0x20001000
 80064d8:	20001014 	.word	0x20001014
 80064dc:	20001028 	.word	0x20001028
 80064e0:	2000102c 	.word	0x2000102c
 80064e4:	200010dc 	.word	0x200010dc
 80064e8:	2000103c 	.word	0x2000103c
 80064ec:	08007708 	.word	0x08007708

080064f0 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b086      	sub	sp, #24
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d10a      	bne.n	8006518 <pvTimerGetTimerID+0x28>
	__asm volatile
 8006502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006506:	f383 8811 	msr	BASEPRI, r3
 800650a:	f3bf 8f6f 	isb	sy
 800650e:	f3bf 8f4f 	dsb	sy
 8006512:	60fb      	str	r3, [r7, #12]
}
 8006514:	bf00      	nop
 8006516:	e7fe      	b.n	8006516 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 8006518:	f000 f934 	bl	8006784 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800651c:	697b      	ldr	r3, [r7, #20]
 800651e:	69db      	ldr	r3, [r3, #28]
 8006520:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8006522:	f000 f95f 	bl	80067e4 <vPortExitCritical>

	return pvReturn;
 8006526:	693b      	ldr	r3, [r7, #16]
}
 8006528:	4618      	mov	r0, r3
 800652a:	3718      	adds	r7, #24
 800652c:	46bd      	mov	sp, r7
 800652e:	bd80      	pop	{r7, pc}

08006530 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006530:	b480      	push	{r7}
 8006532:	b085      	sub	sp, #20
 8006534:	af00      	add	r7, sp, #0
 8006536:	60f8      	str	r0, [r7, #12]
 8006538:	60b9      	str	r1, [r7, #8]
 800653a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	3b04      	subs	r3, #4
 8006540:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006548:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	3b04      	subs	r3, #4
 800654e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	f023 0201 	bic.w	r2, r3, #1
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	3b04      	subs	r3, #4
 800655e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006560:	4a0c      	ldr	r2, [pc, #48]	; (8006594 <pxPortInitialiseStack+0x64>)
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	3b14      	subs	r3, #20
 800656a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800656c:	687a      	ldr	r2, [r7, #4]
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	3b04      	subs	r3, #4
 8006576:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	f06f 0202 	mvn.w	r2, #2
 800657e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	3b20      	subs	r3, #32
 8006584:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006586:	68fb      	ldr	r3, [r7, #12]
}
 8006588:	4618      	mov	r0, r3
 800658a:	3714      	adds	r7, #20
 800658c:	46bd      	mov	sp, r7
 800658e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006592:	4770      	bx	lr
 8006594:	08006599 	.word	0x08006599

08006598 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006598:	b480      	push	{r7}
 800659a:	b085      	sub	sp, #20
 800659c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800659e:	2300      	movs	r3, #0
 80065a0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80065a2:	4b12      	ldr	r3, [pc, #72]	; (80065ec <prvTaskExitError+0x54>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065aa:	d00a      	beq.n	80065c2 <prvTaskExitError+0x2a>
	__asm volatile
 80065ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065b0:	f383 8811 	msr	BASEPRI, r3
 80065b4:	f3bf 8f6f 	isb	sy
 80065b8:	f3bf 8f4f 	dsb	sy
 80065bc:	60fb      	str	r3, [r7, #12]
}
 80065be:	bf00      	nop
 80065c0:	e7fe      	b.n	80065c0 <prvTaskExitError+0x28>
	__asm volatile
 80065c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065c6:	f383 8811 	msr	BASEPRI, r3
 80065ca:	f3bf 8f6f 	isb	sy
 80065ce:	f3bf 8f4f 	dsb	sy
 80065d2:	60bb      	str	r3, [r7, #8]
}
 80065d4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80065d6:	bf00      	nop
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d0fc      	beq.n	80065d8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80065de:	bf00      	nop
 80065e0:	bf00      	nop
 80065e2:	3714      	adds	r7, #20
 80065e4:	46bd      	mov	sp, r7
 80065e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ea:	4770      	bx	lr
 80065ec:	20000020 	.word	0x20000020

080065f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80065f0:	4b07      	ldr	r3, [pc, #28]	; (8006610 <pxCurrentTCBConst2>)
 80065f2:	6819      	ldr	r1, [r3, #0]
 80065f4:	6808      	ldr	r0, [r1, #0]
 80065f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065fa:	f380 8809 	msr	PSP, r0
 80065fe:	f3bf 8f6f 	isb	sy
 8006602:	f04f 0000 	mov.w	r0, #0
 8006606:	f380 8811 	msr	BASEPRI, r0
 800660a:	4770      	bx	lr
 800660c:	f3af 8000 	nop.w

08006610 <pxCurrentTCBConst2>:
 8006610:	20000b00 	.word	0x20000b00
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006614:	bf00      	nop
 8006616:	bf00      	nop

08006618 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006618:	4808      	ldr	r0, [pc, #32]	; (800663c <prvPortStartFirstTask+0x24>)
 800661a:	6800      	ldr	r0, [r0, #0]
 800661c:	6800      	ldr	r0, [r0, #0]
 800661e:	f380 8808 	msr	MSP, r0
 8006622:	f04f 0000 	mov.w	r0, #0
 8006626:	f380 8814 	msr	CONTROL, r0
 800662a:	b662      	cpsie	i
 800662c:	b661      	cpsie	f
 800662e:	f3bf 8f4f 	dsb	sy
 8006632:	f3bf 8f6f 	isb	sy
 8006636:	df00      	svc	0
 8006638:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800663a:	bf00      	nop
 800663c:	e000ed08 	.word	0xe000ed08

08006640 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b086      	sub	sp, #24
 8006644:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006646:	4b46      	ldr	r3, [pc, #280]	; (8006760 <xPortStartScheduler+0x120>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4a46      	ldr	r2, [pc, #280]	; (8006764 <xPortStartScheduler+0x124>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d10a      	bne.n	8006666 <xPortStartScheduler+0x26>
	__asm volatile
 8006650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006654:	f383 8811 	msr	BASEPRI, r3
 8006658:	f3bf 8f6f 	isb	sy
 800665c:	f3bf 8f4f 	dsb	sy
 8006660:	613b      	str	r3, [r7, #16]
}
 8006662:	bf00      	nop
 8006664:	e7fe      	b.n	8006664 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006666:	4b3e      	ldr	r3, [pc, #248]	; (8006760 <xPortStartScheduler+0x120>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	4a3f      	ldr	r2, [pc, #252]	; (8006768 <xPortStartScheduler+0x128>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d10a      	bne.n	8006686 <xPortStartScheduler+0x46>
	__asm volatile
 8006670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006674:	f383 8811 	msr	BASEPRI, r3
 8006678:	f3bf 8f6f 	isb	sy
 800667c:	f3bf 8f4f 	dsb	sy
 8006680:	60fb      	str	r3, [r7, #12]
}
 8006682:	bf00      	nop
 8006684:	e7fe      	b.n	8006684 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006686:	4b39      	ldr	r3, [pc, #228]	; (800676c <xPortStartScheduler+0x12c>)
 8006688:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800668a:	697b      	ldr	r3, [r7, #20]
 800668c:	781b      	ldrb	r3, [r3, #0]
 800668e:	b2db      	uxtb	r3, r3
 8006690:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006692:	697b      	ldr	r3, [r7, #20]
 8006694:	22ff      	movs	r2, #255	; 0xff
 8006696:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006698:	697b      	ldr	r3, [r7, #20]
 800669a:	781b      	ldrb	r3, [r3, #0]
 800669c:	b2db      	uxtb	r3, r3
 800669e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80066a0:	78fb      	ldrb	r3, [r7, #3]
 80066a2:	b2db      	uxtb	r3, r3
 80066a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80066a8:	b2da      	uxtb	r2, r3
 80066aa:	4b31      	ldr	r3, [pc, #196]	; (8006770 <xPortStartScheduler+0x130>)
 80066ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80066ae:	4b31      	ldr	r3, [pc, #196]	; (8006774 <xPortStartScheduler+0x134>)
 80066b0:	2207      	movs	r2, #7
 80066b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80066b4:	e009      	b.n	80066ca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80066b6:	4b2f      	ldr	r3, [pc, #188]	; (8006774 <xPortStartScheduler+0x134>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	3b01      	subs	r3, #1
 80066bc:	4a2d      	ldr	r2, [pc, #180]	; (8006774 <xPortStartScheduler+0x134>)
 80066be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80066c0:	78fb      	ldrb	r3, [r7, #3]
 80066c2:	b2db      	uxtb	r3, r3
 80066c4:	005b      	lsls	r3, r3, #1
 80066c6:	b2db      	uxtb	r3, r3
 80066c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80066ca:	78fb      	ldrb	r3, [r7, #3]
 80066cc:	b2db      	uxtb	r3, r3
 80066ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066d2:	2b80      	cmp	r3, #128	; 0x80
 80066d4:	d0ef      	beq.n	80066b6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80066d6:	4b27      	ldr	r3, [pc, #156]	; (8006774 <xPortStartScheduler+0x134>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f1c3 0307 	rsb	r3, r3, #7
 80066de:	2b04      	cmp	r3, #4
 80066e0:	d00a      	beq.n	80066f8 <xPortStartScheduler+0xb8>
	__asm volatile
 80066e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066e6:	f383 8811 	msr	BASEPRI, r3
 80066ea:	f3bf 8f6f 	isb	sy
 80066ee:	f3bf 8f4f 	dsb	sy
 80066f2:	60bb      	str	r3, [r7, #8]
}
 80066f4:	bf00      	nop
 80066f6:	e7fe      	b.n	80066f6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80066f8:	4b1e      	ldr	r3, [pc, #120]	; (8006774 <xPortStartScheduler+0x134>)
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	021b      	lsls	r3, r3, #8
 80066fe:	4a1d      	ldr	r2, [pc, #116]	; (8006774 <xPortStartScheduler+0x134>)
 8006700:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006702:	4b1c      	ldr	r3, [pc, #112]	; (8006774 <xPortStartScheduler+0x134>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800670a:	4a1a      	ldr	r2, [pc, #104]	; (8006774 <xPortStartScheduler+0x134>)
 800670c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	b2da      	uxtb	r2, r3
 8006712:	697b      	ldr	r3, [r7, #20]
 8006714:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006716:	4b18      	ldr	r3, [pc, #96]	; (8006778 <xPortStartScheduler+0x138>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	4a17      	ldr	r2, [pc, #92]	; (8006778 <xPortStartScheduler+0x138>)
 800671c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006720:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006722:	4b15      	ldr	r3, [pc, #84]	; (8006778 <xPortStartScheduler+0x138>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	4a14      	ldr	r2, [pc, #80]	; (8006778 <xPortStartScheduler+0x138>)
 8006728:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800672c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800672e:	f000 f8dd 	bl	80068ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006732:	4b12      	ldr	r3, [pc, #72]	; (800677c <xPortStartScheduler+0x13c>)
 8006734:	2200      	movs	r2, #0
 8006736:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006738:	f000 f8fc 	bl	8006934 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800673c:	4b10      	ldr	r3, [pc, #64]	; (8006780 <xPortStartScheduler+0x140>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4a0f      	ldr	r2, [pc, #60]	; (8006780 <xPortStartScheduler+0x140>)
 8006742:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006746:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006748:	f7ff ff66 	bl	8006618 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800674c:	f7fe fe9e 	bl	800548c <vTaskSwitchContext>
	prvTaskExitError();
 8006750:	f7ff ff22 	bl	8006598 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006754:	2300      	movs	r3, #0
}
 8006756:	4618      	mov	r0, r3
 8006758:	3718      	adds	r7, #24
 800675a:	46bd      	mov	sp, r7
 800675c:	bd80      	pop	{r7, pc}
 800675e:	bf00      	nop
 8006760:	e000ed00 	.word	0xe000ed00
 8006764:	410fc271 	.word	0x410fc271
 8006768:	410fc270 	.word	0x410fc270
 800676c:	e000e400 	.word	0xe000e400
 8006770:	2000112c 	.word	0x2000112c
 8006774:	20001130 	.word	0x20001130
 8006778:	e000ed20 	.word	0xe000ed20
 800677c:	20000020 	.word	0x20000020
 8006780:	e000ef34 	.word	0xe000ef34

08006784 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006784:	b480      	push	{r7}
 8006786:	b083      	sub	sp, #12
 8006788:	af00      	add	r7, sp, #0
	__asm volatile
 800678a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800678e:	f383 8811 	msr	BASEPRI, r3
 8006792:	f3bf 8f6f 	isb	sy
 8006796:	f3bf 8f4f 	dsb	sy
 800679a:	607b      	str	r3, [r7, #4]
}
 800679c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800679e:	4b0f      	ldr	r3, [pc, #60]	; (80067dc <vPortEnterCritical+0x58>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	3301      	adds	r3, #1
 80067a4:	4a0d      	ldr	r2, [pc, #52]	; (80067dc <vPortEnterCritical+0x58>)
 80067a6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80067a8:	4b0c      	ldr	r3, [pc, #48]	; (80067dc <vPortEnterCritical+0x58>)
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	2b01      	cmp	r3, #1
 80067ae:	d10f      	bne.n	80067d0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80067b0:	4b0b      	ldr	r3, [pc, #44]	; (80067e0 <vPortEnterCritical+0x5c>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	b2db      	uxtb	r3, r3
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d00a      	beq.n	80067d0 <vPortEnterCritical+0x4c>
	__asm volatile
 80067ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067be:	f383 8811 	msr	BASEPRI, r3
 80067c2:	f3bf 8f6f 	isb	sy
 80067c6:	f3bf 8f4f 	dsb	sy
 80067ca:	603b      	str	r3, [r7, #0]
}
 80067cc:	bf00      	nop
 80067ce:	e7fe      	b.n	80067ce <vPortEnterCritical+0x4a>
	}
}
 80067d0:	bf00      	nop
 80067d2:	370c      	adds	r7, #12
 80067d4:	46bd      	mov	sp, r7
 80067d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067da:	4770      	bx	lr
 80067dc:	20000020 	.word	0x20000020
 80067e0:	e000ed04 	.word	0xe000ed04

080067e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80067e4:	b480      	push	{r7}
 80067e6:	b083      	sub	sp, #12
 80067e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80067ea:	4b12      	ldr	r3, [pc, #72]	; (8006834 <vPortExitCritical+0x50>)
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d10a      	bne.n	8006808 <vPortExitCritical+0x24>
	__asm volatile
 80067f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067f6:	f383 8811 	msr	BASEPRI, r3
 80067fa:	f3bf 8f6f 	isb	sy
 80067fe:	f3bf 8f4f 	dsb	sy
 8006802:	607b      	str	r3, [r7, #4]
}
 8006804:	bf00      	nop
 8006806:	e7fe      	b.n	8006806 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006808:	4b0a      	ldr	r3, [pc, #40]	; (8006834 <vPortExitCritical+0x50>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	3b01      	subs	r3, #1
 800680e:	4a09      	ldr	r2, [pc, #36]	; (8006834 <vPortExitCritical+0x50>)
 8006810:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006812:	4b08      	ldr	r3, [pc, #32]	; (8006834 <vPortExitCritical+0x50>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d105      	bne.n	8006826 <vPortExitCritical+0x42>
 800681a:	2300      	movs	r3, #0
 800681c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	f383 8811 	msr	BASEPRI, r3
}
 8006824:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006826:	bf00      	nop
 8006828:	370c      	adds	r7, #12
 800682a:	46bd      	mov	sp, r7
 800682c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006830:	4770      	bx	lr
 8006832:	bf00      	nop
 8006834:	20000020 	.word	0x20000020
	...

08006840 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006840:	f3ef 8009 	mrs	r0, PSP
 8006844:	f3bf 8f6f 	isb	sy
 8006848:	4b15      	ldr	r3, [pc, #84]	; (80068a0 <pxCurrentTCBConst>)
 800684a:	681a      	ldr	r2, [r3, #0]
 800684c:	f01e 0f10 	tst.w	lr, #16
 8006850:	bf08      	it	eq
 8006852:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006856:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800685a:	6010      	str	r0, [r2, #0]
 800685c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006860:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006864:	f380 8811 	msr	BASEPRI, r0
 8006868:	f3bf 8f4f 	dsb	sy
 800686c:	f3bf 8f6f 	isb	sy
 8006870:	f7fe fe0c 	bl	800548c <vTaskSwitchContext>
 8006874:	f04f 0000 	mov.w	r0, #0
 8006878:	f380 8811 	msr	BASEPRI, r0
 800687c:	bc09      	pop	{r0, r3}
 800687e:	6819      	ldr	r1, [r3, #0]
 8006880:	6808      	ldr	r0, [r1, #0]
 8006882:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006886:	f01e 0f10 	tst.w	lr, #16
 800688a:	bf08      	it	eq
 800688c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006890:	f380 8809 	msr	PSP, r0
 8006894:	f3bf 8f6f 	isb	sy
 8006898:	4770      	bx	lr
 800689a:	bf00      	nop
 800689c:	f3af 8000 	nop.w

080068a0 <pxCurrentTCBConst>:
 80068a0:	20000b00 	.word	0x20000b00
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80068a4:	bf00      	nop
 80068a6:	bf00      	nop

080068a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b082      	sub	sp, #8
 80068ac:	af00      	add	r7, sp, #0
	__asm volatile
 80068ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068b2:	f383 8811 	msr	BASEPRI, r3
 80068b6:	f3bf 8f6f 	isb	sy
 80068ba:	f3bf 8f4f 	dsb	sy
 80068be:	607b      	str	r3, [r7, #4]
}
 80068c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80068c2:	f7fe fd29 	bl	8005318 <xTaskIncrementTick>
 80068c6:	4603      	mov	r3, r0
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d003      	beq.n	80068d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80068cc:	4b06      	ldr	r3, [pc, #24]	; (80068e8 <xPortSysTickHandler+0x40>)
 80068ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068d2:	601a      	str	r2, [r3, #0]
 80068d4:	2300      	movs	r3, #0
 80068d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	f383 8811 	msr	BASEPRI, r3
}
 80068de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80068e0:	bf00      	nop
 80068e2:	3708      	adds	r7, #8
 80068e4:	46bd      	mov	sp, r7
 80068e6:	bd80      	pop	{r7, pc}
 80068e8:	e000ed04 	.word	0xe000ed04

080068ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80068ec:	b480      	push	{r7}
 80068ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80068f0:	4b0b      	ldr	r3, [pc, #44]	; (8006920 <vPortSetupTimerInterrupt+0x34>)
 80068f2:	2200      	movs	r2, #0
 80068f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80068f6:	4b0b      	ldr	r3, [pc, #44]	; (8006924 <vPortSetupTimerInterrupt+0x38>)
 80068f8:	2200      	movs	r2, #0
 80068fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80068fc:	4b0a      	ldr	r3, [pc, #40]	; (8006928 <vPortSetupTimerInterrupt+0x3c>)
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	4a0a      	ldr	r2, [pc, #40]	; (800692c <vPortSetupTimerInterrupt+0x40>)
 8006902:	fba2 2303 	umull	r2, r3, r2, r3
 8006906:	099b      	lsrs	r3, r3, #6
 8006908:	4a09      	ldr	r2, [pc, #36]	; (8006930 <vPortSetupTimerInterrupt+0x44>)
 800690a:	3b01      	subs	r3, #1
 800690c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800690e:	4b04      	ldr	r3, [pc, #16]	; (8006920 <vPortSetupTimerInterrupt+0x34>)
 8006910:	2207      	movs	r2, #7
 8006912:	601a      	str	r2, [r3, #0]
}
 8006914:	bf00      	nop
 8006916:	46bd      	mov	sp, r7
 8006918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691c:	4770      	bx	lr
 800691e:	bf00      	nop
 8006920:	e000e010 	.word	0xe000e010
 8006924:	e000e018 	.word	0xe000e018
 8006928:	20000000 	.word	0x20000000
 800692c:	10624dd3 	.word	0x10624dd3
 8006930:	e000e014 	.word	0xe000e014

08006934 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006934:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006944 <vPortEnableVFP+0x10>
 8006938:	6801      	ldr	r1, [r0, #0]
 800693a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800693e:	6001      	str	r1, [r0, #0]
 8006940:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006942:	bf00      	nop
 8006944:	e000ed88 	.word	0xe000ed88

08006948 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006948:	b480      	push	{r7}
 800694a:	b085      	sub	sp, #20
 800694c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800694e:	f3ef 8305 	mrs	r3, IPSR
 8006952:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	2b0f      	cmp	r3, #15
 8006958:	d914      	bls.n	8006984 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800695a:	4a17      	ldr	r2, [pc, #92]	; (80069b8 <vPortValidateInterruptPriority+0x70>)
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	4413      	add	r3, r2
 8006960:	781b      	ldrb	r3, [r3, #0]
 8006962:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006964:	4b15      	ldr	r3, [pc, #84]	; (80069bc <vPortValidateInterruptPriority+0x74>)
 8006966:	781b      	ldrb	r3, [r3, #0]
 8006968:	7afa      	ldrb	r2, [r7, #11]
 800696a:	429a      	cmp	r2, r3
 800696c:	d20a      	bcs.n	8006984 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800696e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006972:	f383 8811 	msr	BASEPRI, r3
 8006976:	f3bf 8f6f 	isb	sy
 800697a:	f3bf 8f4f 	dsb	sy
 800697e:	607b      	str	r3, [r7, #4]
}
 8006980:	bf00      	nop
 8006982:	e7fe      	b.n	8006982 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006984:	4b0e      	ldr	r3, [pc, #56]	; (80069c0 <vPortValidateInterruptPriority+0x78>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800698c:	4b0d      	ldr	r3, [pc, #52]	; (80069c4 <vPortValidateInterruptPriority+0x7c>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	429a      	cmp	r2, r3
 8006992:	d90a      	bls.n	80069aa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006998:	f383 8811 	msr	BASEPRI, r3
 800699c:	f3bf 8f6f 	isb	sy
 80069a0:	f3bf 8f4f 	dsb	sy
 80069a4:	603b      	str	r3, [r7, #0]
}
 80069a6:	bf00      	nop
 80069a8:	e7fe      	b.n	80069a8 <vPortValidateInterruptPriority+0x60>
	}
 80069aa:	bf00      	nop
 80069ac:	3714      	adds	r7, #20
 80069ae:	46bd      	mov	sp, r7
 80069b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b4:	4770      	bx	lr
 80069b6:	bf00      	nop
 80069b8:	e000e3f0 	.word	0xe000e3f0
 80069bc:	2000112c 	.word	0x2000112c
 80069c0:	e000ed0c 	.word	0xe000ed0c
 80069c4:	20001130 	.word	0x20001130

080069c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b08a      	sub	sp, #40	; 0x28
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80069d0:	2300      	movs	r3, #0
 80069d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80069d4:	f7fe fbe4 	bl	80051a0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80069d8:	4b5b      	ldr	r3, [pc, #364]	; (8006b48 <pvPortMalloc+0x180>)
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d101      	bne.n	80069e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80069e0:	f000 f920 	bl	8006c24 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80069e4:	4b59      	ldr	r3, [pc, #356]	; (8006b4c <pvPortMalloc+0x184>)
 80069e6:	681a      	ldr	r2, [r3, #0]
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	4013      	ands	r3, r2
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	f040 8093 	bne.w	8006b18 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d01d      	beq.n	8006a34 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80069f8:	2208      	movs	r2, #8
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	4413      	add	r3, r2
 80069fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	f003 0307 	and.w	r3, r3, #7
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d014      	beq.n	8006a34 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	f023 0307 	bic.w	r3, r3, #7
 8006a10:	3308      	adds	r3, #8
 8006a12:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	f003 0307 	and.w	r3, r3, #7
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d00a      	beq.n	8006a34 <pvPortMalloc+0x6c>
	__asm volatile
 8006a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a22:	f383 8811 	msr	BASEPRI, r3
 8006a26:	f3bf 8f6f 	isb	sy
 8006a2a:	f3bf 8f4f 	dsb	sy
 8006a2e:	617b      	str	r3, [r7, #20]
}
 8006a30:	bf00      	nop
 8006a32:	e7fe      	b.n	8006a32 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d06e      	beq.n	8006b18 <pvPortMalloc+0x150>
 8006a3a:	4b45      	ldr	r3, [pc, #276]	; (8006b50 <pvPortMalloc+0x188>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	687a      	ldr	r2, [r7, #4]
 8006a40:	429a      	cmp	r2, r3
 8006a42:	d869      	bhi.n	8006b18 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006a44:	4b43      	ldr	r3, [pc, #268]	; (8006b54 <pvPortMalloc+0x18c>)
 8006a46:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006a48:	4b42      	ldr	r3, [pc, #264]	; (8006b54 <pvPortMalloc+0x18c>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006a4e:	e004      	b.n	8006a5a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a52:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a5c:	685b      	ldr	r3, [r3, #4]
 8006a5e:	687a      	ldr	r2, [r7, #4]
 8006a60:	429a      	cmp	r2, r3
 8006a62:	d903      	bls.n	8006a6c <pvPortMalloc+0xa4>
 8006a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d1f1      	bne.n	8006a50 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006a6c:	4b36      	ldr	r3, [pc, #216]	; (8006b48 <pvPortMalloc+0x180>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a72:	429a      	cmp	r2, r3
 8006a74:	d050      	beq.n	8006b18 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006a76:	6a3b      	ldr	r3, [r7, #32]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	2208      	movs	r2, #8
 8006a7c:	4413      	add	r3, r2
 8006a7e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a82:	681a      	ldr	r2, [r3, #0]
 8006a84:	6a3b      	ldr	r3, [r7, #32]
 8006a86:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a8a:	685a      	ldr	r2, [r3, #4]
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	1ad2      	subs	r2, r2, r3
 8006a90:	2308      	movs	r3, #8
 8006a92:	005b      	lsls	r3, r3, #1
 8006a94:	429a      	cmp	r2, r3
 8006a96:	d91f      	bls.n	8006ad8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006a98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	4413      	add	r3, r2
 8006a9e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006aa0:	69bb      	ldr	r3, [r7, #24]
 8006aa2:	f003 0307 	and.w	r3, r3, #7
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d00a      	beq.n	8006ac0 <pvPortMalloc+0xf8>
	__asm volatile
 8006aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aae:	f383 8811 	msr	BASEPRI, r3
 8006ab2:	f3bf 8f6f 	isb	sy
 8006ab6:	f3bf 8f4f 	dsb	sy
 8006aba:	613b      	str	r3, [r7, #16]
}
 8006abc:	bf00      	nop
 8006abe:	e7fe      	b.n	8006abe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac2:	685a      	ldr	r2, [r3, #4]
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	1ad2      	subs	r2, r2, r3
 8006ac8:	69bb      	ldr	r3, [r7, #24]
 8006aca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ace:	687a      	ldr	r2, [r7, #4]
 8006ad0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006ad2:	69b8      	ldr	r0, [r7, #24]
 8006ad4:	f000 f908 	bl	8006ce8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006ad8:	4b1d      	ldr	r3, [pc, #116]	; (8006b50 <pvPortMalloc+0x188>)
 8006ada:	681a      	ldr	r2, [r3, #0]
 8006adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ade:	685b      	ldr	r3, [r3, #4]
 8006ae0:	1ad3      	subs	r3, r2, r3
 8006ae2:	4a1b      	ldr	r2, [pc, #108]	; (8006b50 <pvPortMalloc+0x188>)
 8006ae4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006ae6:	4b1a      	ldr	r3, [pc, #104]	; (8006b50 <pvPortMalloc+0x188>)
 8006ae8:	681a      	ldr	r2, [r3, #0]
 8006aea:	4b1b      	ldr	r3, [pc, #108]	; (8006b58 <pvPortMalloc+0x190>)
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	429a      	cmp	r2, r3
 8006af0:	d203      	bcs.n	8006afa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006af2:	4b17      	ldr	r3, [pc, #92]	; (8006b50 <pvPortMalloc+0x188>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	4a18      	ldr	r2, [pc, #96]	; (8006b58 <pvPortMalloc+0x190>)
 8006af8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006afc:	685a      	ldr	r2, [r3, #4]
 8006afe:	4b13      	ldr	r3, [pc, #76]	; (8006b4c <pvPortMalloc+0x184>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	431a      	orrs	r2, r3
 8006b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b06:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006b0e:	4b13      	ldr	r3, [pc, #76]	; (8006b5c <pvPortMalloc+0x194>)
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	3301      	adds	r3, #1
 8006b14:	4a11      	ldr	r2, [pc, #68]	; (8006b5c <pvPortMalloc+0x194>)
 8006b16:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006b18:	f7fe fb50 	bl	80051bc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006b1c:	69fb      	ldr	r3, [r7, #28]
 8006b1e:	f003 0307 	and.w	r3, r3, #7
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d00a      	beq.n	8006b3c <pvPortMalloc+0x174>
	__asm volatile
 8006b26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b2a:	f383 8811 	msr	BASEPRI, r3
 8006b2e:	f3bf 8f6f 	isb	sy
 8006b32:	f3bf 8f4f 	dsb	sy
 8006b36:	60fb      	str	r3, [r7, #12]
}
 8006b38:	bf00      	nop
 8006b3a:	e7fe      	b.n	8006b3a <pvPortMalloc+0x172>
	return pvReturn;
 8006b3c:	69fb      	ldr	r3, [r7, #28]
}
 8006b3e:	4618      	mov	r0, r3
 8006b40:	3728      	adds	r7, #40	; 0x28
 8006b42:	46bd      	mov	sp, r7
 8006b44:	bd80      	pop	{r7, pc}
 8006b46:	bf00      	nop
 8006b48:	20004d3c 	.word	0x20004d3c
 8006b4c:	20004d50 	.word	0x20004d50
 8006b50:	20004d40 	.word	0x20004d40
 8006b54:	20004d34 	.word	0x20004d34
 8006b58:	20004d44 	.word	0x20004d44
 8006b5c:	20004d48 	.word	0x20004d48

08006b60 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b086      	sub	sp, #24
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d04d      	beq.n	8006c0e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006b72:	2308      	movs	r3, #8
 8006b74:	425b      	negs	r3, r3
 8006b76:	697a      	ldr	r2, [r7, #20]
 8006b78:	4413      	add	r3, r2
 8006b7a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006b7c:	697b      	ldr	r3, [r7, #20]
 8006b7e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006b80:	693b      	ldr	r3, [r7, #16]
 8006b82:	685a      	ldr	r2, [r3, #4]
 8006b84:	4b24      	ldr	r3, [pc, #144]	; (8006c18 <vPortFree+0xb8>)
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	4013      	ands	r3, r2
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d10a      	bne.n	8006ba4 <vPortFree+0x44>
	__asm volatile
 8006b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b92:	f383 8811 	msr	BASEPRI, r3
 8006b96:	f3bf 8f6f 	isb	sy
 8006b9a:	f3bf 8f4f 	dsb	sy
 8006b9e:	60fb      	str	r3, [r7, #12]
}
 8006ba0:	bf00      	nop
 8006ba2:	e7fe      	b.n	8006ba2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006ba4:	693b      	ldr	r3, [r7, #16]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d00a      	beq.n	8006bc2 <vPortFree+0x62>
	__asm volatile
 8006bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bb0:	f383 8811 	msr	BASEPRI, r3
 8006bb4:	f3bf 8f6f 	isb	sy
 8006bb8:	f3bf 8f4f 	dsb	sy
 8006bbc:	60bb      	str	r3, [r7, #8]
}
 8006bbe:	bf00      	nop
 8006bc0:	e7fe      	b.n	8006bc0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006bc2:	693b      	ldr	r3, [r7, #16]
 8006bc4:	685a      	ldr	r2, [r3, #4]
 8006bc6:	4b14      	ldr	r3, [pc, #80]	; (8006c18 <vPortFree+0xb8>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	4013      	ands	r3, r2
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d01e      	beq.n	8006c0e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006bd0:	693b      	ldr	r3, [r7, #16]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d11a      	bne.n	8006c0e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006bd8:	693b      	ldr	r3, [r7, #16]
 8006bda:	685a      	ldr	r2, [r3, #4]
 8006bdc:	4b0e      	ldr	r3, [pc, #56]	; (8006c18 <vPortFree+0xb8>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	43db      	mvns	r3, r3
 8006be2:	401a      	ands	r2, r3
 8006be4:	693b      	ldr	r3, [r7, #16]
 8006be6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006be8:	f7fe fada 	bl	80051a0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006bec:	693b      	ldr	r3, [r7, #16]
 8006bee:	685a      	ldr	r2, [r3, #4]
 8006bf0:	4b0a      	ldr	r3, [pc, #40]	; (8006c1c <vPortFree+0xbc>)
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	4413      	add	r3, r2
 8006bf6:	4a09      	ldr	r2, [pc, #36]	; (8006c1c <vPortFree+0xbc>)
 8006bf8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006bfa:	6938      	ldr	r0, [r7, #16]
 8006bfc:	f000 f874 	bl	8006ce8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006c00:	4b07      	ldr	r3, [pc, #28]	; (8006c20 <vPortFree+0xc0>)
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	3301      	adds	r3, #1
 8006c06:	4a06      	ldr	r2, [pc, #24]	; (8006c20 <vPortFree+0xc0>)
 8006c08:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006c0a:	f7fe fad7 	bl	80051bc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006c0e:	bf00      	nop
 8006c10:	3718      	adds	r7, #24
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bd80      	pop	{r7, pc}
 8006c16:	bf00      	nop
 8006c18:	20004d50 	.word	0x20004d50
 8006c1c:	20004d40 	.word	0x20004d40
 8006c20:	20004d4c 	.word	0x20004d4c

08006c24 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006c24:	b480      	push	{r7}
 8006c26:	b085      	sub	sp, #20
 8006c28:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006c2a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006c2e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006c30:	4b27      	ldr	r3, [pc, #156]	; (8006cd0 <prvHeapInit+0xac>)
 8006c32:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	f003 0307 	and.w	r3, r3, #7
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d00c      	beq.n	8006c58 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	3307      	adds	r3, #7
 8006c42:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	f023 0307 	bic.w	r3, r3, #7
 8006c4a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006c4c:	68ba      	ldr	r2, [r7, #8]
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	1ad3      	subs	r3, r2, r3
 8006c52:	4a1f      	ldr	r2, [pc, #124]	; (8006cd0 <prvHeapInit+0xac>)
 8006c54:	4413      	add	r3, r2
 8006c56:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006c5c:	4a1d      	ldr	r2, [pc, #116]	; (8006cd4 <prvHeapInit+0xb0>)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006c62:	4b1c      	ldr	r3, [pc, #112]	; (8006cd4 <prvHeapInit+0xb0>)
 8006c64:	2200      	movs	r2, #0
 8006c66:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	68ba      	ldr	r2, [r7, #8]
 8006c6c:	4413      	add	r3, r2
 8006c6e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006c70:	2208      	movs	r2, #8
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	1a9b      	subs	r3, r3, r2
 8006c76:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	f023 0307 	bic.w	r3, r3, #7
 8006c7e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	4a15      	ldr	r2, [pc, #84]	; (8006cd8 <prvHeapInit+0xb4>)
 8006c84:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006c86:	4b14      	ldr	r3, [pc, #80]	; (8006cd8 <prvHeapInit+0xb4>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006c8e:	4b12      	ldr	r3, [pc, #72]	; (8006cd8 <prvHeapInit+0xb4>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	2200      	movs	r2, #0
 8006c94:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	68fa      	ldr	r2, [r7, #12]
 8006c9e:	1ad2      	subs	r2, r2, r3
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006ca4:	4b0c      	ldr	r3, [pc, #48]	; (8006cd8 <prvHeapInit+0xb4>)
 8006ca6:	681a      	ldr	r2, [r3, #0]
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	685b      	ldr	r3, [r3, #4]
 8006cb0:	4a0a      	ldr	r2, [pc, #40]	; (8006cdc <prvHeapInit+0xb8>)
 8006cb2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	685b      	ldr	r3, [r3, #4]
 8006cb8:	4a09      	ldr	r2, [pc, #36]	; (8006ce0 <prvHeapInit+0xbc>)
 8006cba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006cbc:	4b09      	ldr	r3, [pc, #36]	; (8006ce4 <prvHeapInit+0xc0>)
 8006cbe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006cc2:	601a      	str	r2, [r3, #0]
}
 8006cc4:	bf00      	nop
 8006cc6:	3714      	adds	r7, #20
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cce:	4770      	bx	lr
 8006cd0:	20001134 	.word	0x20001134
 8006cd4:	20004d34 	.word	0x20004d34
 8006cd8:	20004d3c 	.word	0x20004d3c
 8006cdc:	20004d44 	.word	0x20004d44
 8006ce0:	20004d40 	.word	0x20004d40
 8006ce4:	20004d50 	.word	0x20004d50

08006ce8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006ce8:	b480      	push	{r7}
 8006cea:	b085      	sub	sp, #20
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006cf0:	4b28      	ldr	r3, [pc, #160]	; (8006d94 <prvInsertBlockIntoFreeList+0xac>)
 8006cf2:	60fb      	str	r3, [r7, #12]
 8006cf4:	e002      	b.n	8006cfc <prvInsertBlockIntoFreeList+0x14>
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	60fb      	str	r3, [r7, #12]
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	687a      	ldr	r2, [r7, #4]
 8006d02:	429a      	cmp	r2, r3
 8006d04:	d8f7      	bhi.n	8006cf6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	685b      	ldr	r3, [r3, #4]
 8006d0e:	68ba      	ldr	r2, [r7, #8]
 8006d10:	4413      	add	r3, r2
 8006d12:	687a      	ldr	r2, [r7, #4]
 8006d14:	429a      	cmp	r2, r3
 8006d16:	d108      	bne.n	8006d2a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	685a      	ldr	r2, [r3, #4]
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	685b      	ldr	r3, [r3, #4]
 8006d20:	441a      	add	r2, r3
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	685b      	ldr	r3, [r3, #4]
 8006d32:	68ba      	ldr	r2, [r7, #8]
 8006d34:	441a      	add	r2, r3
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	429a      	cmp	r2, r3
 8006d3c:	d118      	bne.n	8006d70 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	681a      	ldr	r2, [r3, #0]
 8006d42:	4b15      	ldr	r3, [pc, #84]	; (8006d98 <prvInsertBlockIntoFreeList+0xb0>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	429a      	cmp	r2, r3
 8006d48:	d00d      	beq.n	8006d66 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	685a      	ldr	r2, [r3, #4]
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	685b      	ldr	r3, [r3, #4]
 8006d54:	441a      	add	r2, r3
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	681a      	ldr	r2, [r3, #0]
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	601a      	str	r2, [r3, #0]
 8006d64:	e008      	b.n	8006d78 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006d66:	4b0c      	ldr	r3, [pc, #48]	; (8006d98 <prvInsertBlockIntoFreeList+0xb0>)
 8006d68:	681a      	ldr	r2, [r3, #0]
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	601a      	str	r2, [r3, #0]
 8006d6e:	e003      	b.n	8006d78 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	681a      	ldr	r2, [r3, #0]
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006d78:	68fa      	ldr	r2, [r7, #12]
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	429a      	cmp	r2, r3
 8006d7e:	d002      	beq.n	8006d86 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	687a      	ldr	r2, [r7, #4]
 8006d84:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006d86:	bf00      	nop
 8006d88:	3714      	adds	r7, #20
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d90:	4770      	bx	lr
 8006d92:	bf00      	nop
 8006d94:	20004d34 	.word	0x20004d34
 8006d98:	20004d3c 	.word	0x20004d3c

08006d9c <APP_timeoutTimerIRQHandler>:
/********************************************************************************/

#if 1 /* Software Timer IRQ Handlers */

void APP_timeoutTimerIRQHandler(void* param)
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	b083      	sub	sp, #12
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]

}
 8006da4:	bf00      	nop
 8006da6:	370c      	adds	r7, #12
 8006da8:	46bd      	mov	sp, r7
 8006daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dae:	4770      	bx	lr

08006db0 <APP_periodicTimerIRQHandler>:

void APP_periodicTimerIRQHandler(void* param)
{
 8006db0:	b480      	push	{r7}
 8006db2:	b083      	sub	sp, #12
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]

}
 8006db8:	bf00      	nop
 8006dba:	370c      	adds	r7, #12
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc2:	4770      	bx	lr

08006dc4 <Initilialise_App>:

#endif


void Initilialise_App(void)
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b084      	sub	sp, #16
 8006dc8:	af04      	add	r7, sp, #16
	/***************** Create Static Threads ******************************/

	/* Create Static TelemetryMAIN Thread */
#ifdef BSP_PROCESS_TELEMETRYMAIN

	xHandle.Process_TelemetryMAIN = xTaskCreateStatic
 8006dca:	4b63      	ldr	r3, [pc, #396]	; (8006f58 <Initilialise_App+0x194>)
 8006dcc:	9302      	str	r3, [sp, #8]
 8006dce:	4b63      	ldr	r3, [pc, #396]	; (8006f5c <Initilialise_App+0x198>)
 8006dd0:	9301      	str	r3, [sp, #4]
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	9300      	str	r3, [sp, #0]
 8006dd6:	2301      	movs	r3, #1
 8006dd8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006ddc:	4960      	ldr	r1, [pc, #384]	; (8006f60 <Initilialise_App+0x19c>)
 8006dde:	4861      	ldr	r0, [pc, #388]	; (8006f64 <Initilialise_App+0x1a0>)
 8006de0:	f7fd ffa2 	bl	8004d28 <xTaskCreateStatic>
 8006de4:	4603      	mov	r3, r0
 8006de6:	4a60      	ldr	r2, [pc, #384]	; (8006f68 <Initilialise_App+0x1a4>)
 8006de8:	6013      	str	r3, [r2, #0]
#endif


#ifdef BSP_PROCESS_FLASH
	/* Create Static Flash Task	*/
    xHandle.Process_Flash = xTaskCreateStatic(
 8006dea:	4b60      	ldr	r3, [pc, #384]	; (8006f6c <Initilialise_App+0x1a8>)
 8006dec:	9302      	str	r3, [sp, #8]
 8006dee:	4b60      	ldr	r3, [pc, #384]	; (8006f70 <Initilialise_App+0x1ac>)
 8006df0:	9301      	str	r3, [sp, #4]
 8006df2:	2303      	movs	r3, #3
 8006df4:	9300      	str	r3, [sp, #0]
 8006df6:	2301      	movs	r3, #1
 8006df8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006dfc:	495d      	ldr	r1, [pc, #372]	; (8006f74 <Initilialise_App+0x1b0>)
 8006dfe:	485e      	ldr	r0, [pc, #376]	; (8006f78 <Initilialise_App+0x1b4>)
 8006e00:	f7fd ff92 	bl	8004d28 <xTaskCreateStatic>
 8006e04:	4603      	mov	r3, r0
 8006e06:	4a58      	ldr	r2, [pc, #352]	; (8006f68 <Initilialise_App+0x1a4>)
 8006e08:	6053      	str	r3, [r2, #4]
#endif


#ifdef BSP_PROCESS_CAN
    /* Create Static can Task	*/
    xHandle.Process_CAN = xTaskCreateStatic(
 8006e0a:	4b5c      	ldr	r3, [pc, #368]	; (8006f7c <Initilialise_App+0x1b8>)
 8006e0c:	9302      	str	r3, [sp, #8]
 8006e0e:	4b5c      	ldr	r3, [pc, #368]	; (8006f80 <Initilialise_App+0x1bc>)
 8006e10:	9301      	str	r3, [sp, #4]
 8006e12:	2302      	movs	r3, #2
 8006e14:	9300      	str	r3, [sp, #0]
 8006e16:	2301      	movs	r3, #1
 8006e18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006e1c:	4959      	ldr	r1, [pc, #356]	; (8006f84 <Initilialise_App+0x1c0>)
 8006e1e:	485a      	ldr	r0, [pc, #360]	; (8006f88 <Initilialise_App+0x1c4>)
 8006e20:	f7fd ff82 	bl	8004d28 <xTaskCreateStatic>
 8006e24:	4603      	mov	r3, r0
 8006e26:	4a50      	ldr	r2, [pc, #320]	; (8006f68 <Initilialise_App+0x1a4>)
 8006e28:	6093      	str	r3, [r2, #8]
#endif


#ifdef BSP_PROCESS_RTC
    /* Create Static RTC Task	*/
    xHandle.Process_RTC = xTaskCreateStatic(
 8006e2a:	4b58      	ldr	r3, [pc, #352]	; (8006f8c <Initilialise_App+0x1c8>)
 8006e2c:	9302      	str	r3, [sp, #8]
 8006e2e:	4b58      	ldr	r3, [pc, #352]	; (8006f90 <Initilialise_App+0x1cc>)
 8006e30:	9301      	str	r3, [sp, #4]
 8006e32:	2304      	movs	r3, #4
 8006e34:	9300      	str	r3, [sp, #0]
 8006e36:	2301      	movs	r3, #1
 8006e38:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006e3c:	4955      	ldr	r1, [pc, #340]	; (8006f94 <Initilialise_App+0x1d0>)
 8006e3e:	4856      	ldr	r0, [pc, #344]	; (8006f98 <Initilialise_App+0x1d4>)
 8006e40:	f7fd ff72 	bl	8004d28 <xTaskCreateStatic>
 8006e44:	4603      	mov	r3, r0
 8006e46:	4a48      	ldr	r2, [pc, #288]	; (8006f68 <Initilialise_App+0x1a4>)
 8006e48:	60d3      	str	r3, [r2, #12]

#endif

#ifdef BSP_PROCESS_SDCARD
    /* Create Static sdcard Task	*/
    xHandle.Process_SDCARD = xTaskCreateStatic(
 8006e4a:	4b54      	ldr	r3, [pc, #336]	; (8006f9c <Initilialise_App+0x1d8>)
 8006e4c:	9302      	str	r3, [sp, #8]
 8006e4e:	4b54      	ldr	r3, [pc, #336]	; (8006fa0 <Initilialise_App+0x1dc>)
 8006e50:	9301      	str	r3, [sp, #4]
 8006e52:	2307      	movs	r3, #7
 8006e54:	9300      	str	r3, [sp, #0]
 8006e56:	2301      	movs	r3, #1
 8006e58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006e5c:	4951      	ldr	r1, [pc, #324]	; (8006fa4 <Initilialise_App+0x1e0>)
 8006e5e:	4852      	ldr	r0, [pc, #328]	; (8006fa8 <Initilialise_App+0x1e4>)
 8006e60:	f7fd ff62 	bl	8004d28 <xTaskCreateStatic>
 8006e64:	4603      	mov	r3, r0
 8006e66:	4a40      	ldr	r2, [pc, #256]	; (8006f68 <Initilialise_App+0x1a4>)
 8006e68:	6113      	str	r3, [r2, #16]

#endif

#ifdef BSP_PROCESS_WIFI
    /* Create Static wifi Task	*/
    xHandle.Process_WIFI = xTaskCreateStatic(
 8006e6a:	4b50      	ldr	r3, [pc, #320]	; (8006fac <Initilialise_App+0x1e8>)
 8006e6c:	9302      	str	r3, [sp, #8]
 8006e6e:	4b50      	ldr	r3, [pc, #320]	; (8006fb0 <Initilialise_App+0x1ec>)
 8006e70:	9301      	str	r3, [sp, #4]
 8006e72:	2306      	movs	r3, #6
 8006e74:	9300      	str	r3, [sp, #0]
 8006e76:	2301      	movs	r3, #1
 8006e78:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006e7c:	494d      	ldr	r1, [pc, #308]	; (8006fb4 <Initilialise_App+0x1f0>)
 8006e7e:	484e      	ldr	r0, [pc, #312]	; (8006fb8 <Initilialise_App+0x1f4>)
 8006e80:	f7fd ff52 	bl	8004d28 <xTaskCreateStatic>
 8006e84:	4603      	mov	r3, r0
 8006e86:	4a38      	ldr	r2, [pc, #224]	; (8006f68 <Initilialise_App+0x1a4>)
 8006e88:	6153      	str	r3, [r2, #20]

#endif

#ifdef BSP_PROCESS_NEXTION
    /* Create Static nextion Task	*/
    xHandle.Process_NEXTION = xTaskCreateStatic(
 8006e8a:	4b4c      	ldr	r3, [pc, #304]	; (8006fbc <Initilialise_App+0x1f8>)
 8006e8c:	9302      	str	r3, [sp, #8]
 8006e8e:	4b4c      	ldr	r3, [pc, #304]	; (8006fc0 <Initilialise_App+0x1fc>)
 8006e90:	9301      	str	r3, [sp, #4]
 8006e92:	2305      	movs	r3, #5
 8006e94:	9300      	str	r3, [sp, #0]
 8006e96:	2301      	movs	r3, #1
 8006e98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006e9c:	4949      	ldr	r1, [pc, #292]	; (8006fc4 <Initilialise_App+0x200>)
 8006e9e:	484a      	ldr	r0, [pc, #296]	; (8006fc8 <Initilialise_App+0x204>)
 8006ea0:	f7fd ff42 	bl	8004d28 <xTaskCreateStatic>
 8006ea4:	4603      	mov	r3, r0
 8006ea6:	4a30      	ldr	r2, [pc, #192]	; (8006f68 <Initilialise_App+0x1a4>)
 8006ea8:	6193      	str	r3, [r2, #24]

/********************* Binary Semaphore Create **********************/

#ifdef BSP_PROCESS_FLASH
	/* Create Static Flash Semaphore	*/
	xSemHandle.Process_Flash 	 = xSemaphoreCreateBinaryStatic(&xSemaphore.Process_Flash		);
 8006eaa:	2303      	movs	r3, #3
 8006eac:	9300      	str	r3, [sp, #0]
 8006eae:	4b47      	ldr	r3, [pc, #284]	; (8006fcc <Initilialise_App+0x208>)
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	2100      	movs	r1, #0
 8006eb4:	2001      	movs	r0, #1
 8006eb6:	f7fd f98f 	bl	80041d8 <xQueueGenericCreateStatic>
 8006eba:	4603      	mov	r3, r0
 8006ebc:	4a44      	ldr	r2, [pc, #272]	; (8006fd0 <Initilialise_App+0x20c>)
 8006ebe:	6013      	str	r3, [r2, #0]
#endif


#ifdef BSP_PROCESS_CAN
    /* Create Static can Semaphore	*/
	xSemHandle.Process_CAN 		  = xSemaphoreCreateBinaryStatic(&xSemaphore.Process_CAN		);
 8006ec0:	2303      	movs	r3, #3
 8006ec2:	9300      	str	r3, [sp, #0]
 8006ec4:	4b43      	ldr	r3, [pc, #268]	; (8006fd4 <Initilialise_App+0x210>)
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	2100      	movs	r1, #0
 8006eca:	2001      	movs	r0, #1
 8006ecc:	f7fd f984 	bl	80041d8 <xQueueGenericCreateStatic>
 8006ed0:	4603      	mov	r3, r0
 8006ed2:	4a3f      	ldr	r2, [pc, #252]	; (8006fd0 <Initilialise_App+0x20c>)
 8006ed4:	6053      	str	r3, [r2, #4]
#endif


#ifdef BSP_PROCESS_RTC
    /* Create Static RTC Semaphore	*/
	xSemHandle.Process_RTC 		  = xSemaphoreCreateBinaryStatic(&xSemaphore.Process_RTC		);
 8006ed6:	2303      	movs	r3, #3
 8006ed8:	9300      	str	r3, [sp, #0]
 8006eda:	4b3f      	ldr	r3, [pc, #252]	; (8006fd8 <Initilialise_App+0x214>)
 8006edc:	2200      	movs	r2, #0
 8006ede:	2100      	movs	r1, #0
 8006ee0:	2001      	movs	r0, #1
 8006ee2:	f7fd f979 	bl	80041d8 <xQueueGenericCreateStatic>
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	4a39      	ldr	r2, [pc, #228]	; (8006fd0 <Initilialise_App+0x20c>)
 8006eea:	6093      	str	r3, [r2, #8]
#endif

#ifdef BSP_PROCESS_SDCARD
    /* Create Static sdcard Semaphore	*/
	xSemHandle.Process_SDCARD 	  = xSemaphoreCreateBinaryStatic(&xSemaphore.Process_SDCARD		);
 8006eec:	2303      	movs	r3, #3
 8006eee:	9300      	str	r3, [sp, #0]
 8006ef0:	4b3a      	ldr	r3, [pc, #232]	; (8006fdc <Initilialise_App+0x218>)
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	2100      	movs	r1, #0
 8006ef6:	2001      	movs	r0, #1
 8006ef8:	f7fd f96e 	bl	80041d8 <xQueueGenericCreateStatic>
 8006efc:	4603      	mov	r3, r0
 8006efe:	4a34      	ldr	r2, [pc, #208]	; (8006fd0 <Initilialise_App+0x20c>)
 8006f00:	60d3      	str	r3, [r2, #12]
#endif

#ifdef BSP_PROCESS_WIFI
    /* Create Static wifi Semaphore	*/
	xSemHandle.Process_WIFI 	  = xSemaphoreCreateBinaryStatic(&xSemaphore.Process_WIFI		);
 8006f02:	2303      	movs	r3, #3
 8006f04:	9300      	str	r3, [sp, #0]
 8006f06:	4b36      	ldr	r3, [pc, #216]	; (8006fe0 <Initilialise_App+0x21c>)
 8006f08:	2200      	movs	r2, #0
 8006f0a:	2100      	movs	r1, #0
 8006f0c:	2001      	movs	r0, #1
 8006f0e:	f7fd f963 	bl	80041d8 <xQueueGenericCreateStatic>
 8006f12:	4603      	mov	r3, r0
 8006f14:	4a2e      	ldr	r2, [pc, #184]	; (8006fd0 <Initilialise_App+0x20c>)
 8006f16:	6113      	str	r3, [r2, #16]
#endif

#ifdef BSP_PROCESS_NEXTION
    /* Create Static nextion Semaphore	*/
	xSemHandle.Process_NEXTION 	  = xSemaphoreCreateBinaryStatic(&xSemaphore.Process_NEXTION	);
 8006f18:	2303      	movs	r3, #3
 8006f1a:	9300      	str	r3, [sp, #0]
 8006f1c:	4b31      	ldr	r3, [pc, #196]	; (8006fe4 <Initilialise_App+0x220>)
 8006f1e:	2200      	movs	r2, #0
 8006f20:	2100      	movs	r1, #0
 8006f22:	2001      	movs	r0, #1
 8006f24:	f7fd f958 	bl	80041d8 <xQueueGenericCreateStatic>
 8006f28:	4603      	mov	r3, r0
 8006f2a:	4a29      	ldr	r2, [pc, #164]	; (8006fd0 <Initilialise_App+0x20c>)
 8006f2c:	6153      	str	r3, [r2, #20]
#endif

	/************************ Create  Software Timers ***********************************/

    xTimerID.periodic = 	osTimerNew( APP_periodicTimerIRQHandler			,
 8006f2e:	4b2e      	ldr	r3, [pc, #184]	; (8006fe8 <Initilialise_App+0x224>)
 8006f30:	2200      	movs	r2, #0
 8006f32:	2101      	movs	r1, #1
 8006f34:	482d      	ldr	r0, [pc, #180]	; (8006fec <Initilialise_App+0x228>)
 8006f36:	f7fc ff83 	bl	8003e40 <osTimerNew>
 8006f3a:	4603      	mov	r3, r0
 8006f3c:	4a2c      	ldr	r2, [pc, #176]	; (8006ff0 <Initilialise_App+0x22c>)
 8006f3e:	6013      	str	r3, [r2, #0]
    									osTimerPeriodic						,
										NULL								,
										&APP_periodic_attributes			);

    xTimerID.timeout  = 	osTimerNew( APP_timeoutTimerIRQHandler			,
 8006f40:	4b2c      	ldr	r3, [pc, #176]	; (8006ff4 <Initilialise_App+0x230>)
 8006f42:	2200      	movs	r2, #0
 8006f44:	2100      	movs	r1, #0
 8006f46:	482c      	ldr	r0, [pc, #176]	; (8006ff8 <Initilialise_App+0x234>)
 8006f48:	f7fc ff7a 	bl	8003e40 <osTimerNew>
 8006f4c:	4603      	mov	r3, r0
 8006f4e:	4a28      	ldr	r2, [pc, #160]	; (8006ff0 <Initilialise_App+0x22c>)
 8006f50:	6053      	str	r3, [r2, #4]

#ifdef DEBUG_MODE
    HAL_UART_Receive_DMA(&huart1, (U8 *)&__GL.DEBUG_Buffer[0], (U8)DEBUG_MSG_SIZE);
#endif

}
 8006f52:	bf00      	nop
 8006f54:	46bd      	mov	sp, r7
 8006f56:	bd80      	pop	{r7, pc}
 8006f58:	20004d54 	.word	0x20004d54
 8006f5c:	20004fd8 	.word	0x20004fd8
 8006f60:	0800773c 	.word	0x0800773c
 8006f64:	0800700d 	.word	0x0800700d
 8006f68:	200093d8 	.word	0x200093d8
 8006f6c:	20004db0 	.word	0x20004db0
 8006f70:	20005fd8 	.word	0x20005fd8
 8006f74:	08007758 	.word	0x08007758
 8006f78:	08007025 	.word	0x08007025
 8006f7c:	20004e0c 	.word	0x20004e0c
 8006f80:	200067d8 	.word	0x200067d8
 8006f84:	0800776c 	.word	0x0800776c
 8006f88:	0800707d 	.word	0x0800707d
 8006f8c:	20004e68 	.word	0x20004e68
 8006f90:	20006fd8 	.word	0x20006fd8
 8006f94:	08007780 	.word	0x08007780
 8006f98:	080070d5 	.word	0x080070d5
 8006f9c:	20004ec4 	.word	0x20004ec4
 8006fa0:	200073d8 	.word	0x200073d8
 8006fa4:	08007794 	.word	0x08007794
 8006fa8:	0800712d 	.word	0x0800712d
 8006fac:	20004f20 	.word	0x20004f20
 8006fb0:	20007bd8 	.word	0x20007bd8
 8006fb4:	080077a8 	.word	0x080077a8
 8006fb8:	08007185 	.word	0x08007185
 8006fbc:	20004f7c 	.word	0x20004f7c
 8006fc0:	20008bd8 	.word	0x20008bd8
 8006fc4:	080077bc 	.word	0x080077bc
 8006fc8:	080071dd 	.word	0x080071dd
 8006fcc:	200093f4 	.word	0x200093f4
 8006fd0:	200095d4 	.word	0x200095d4
 8006fd4:	20009444 	.word	0x20009444
 8006fd8:	20009494 	.word	0x20009494
 8006fdc:	200094e4 	.word	0x200094e4
 8006fe0:	20009534 	.word	0x20009534
 8006fe4:	20009584 	.word	0x20009584
 8006fe8:	08007810 	.word	0x08007810
 8006fec:	08006db1 	.word	0x08006db1
 8006ff0:	20009604 	.word	0x20009604
 8006ff4:	08007820 	.word	0x08007820
 8006ff8:	08006d9d 	.word	0x08006d9d

08006ffc <MAIN_App>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void MAIN_App(void)
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	af00      	add	r7, sp, #0
	/* Create Threads, Semph, SW Timers */
    Initilialise_App();
 8007000:	f7ff fee0 	bl	8006dc4 <Initilialise_App>
    /* Start Scheduler */
    vTaskStartScheduler();
 8007004:	f7fe f866 	bl	80050d4 <vTaskStartScheduler>

}
 8007008:	bf00      	nop
 800700a:	bd80      	pop	{r7, pc}

0800700c <Process_TelemetryMAIN_TaskHandler>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void Process_TelemetryMAIN_TaskHandler(void* param)
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b082      	sub	sp, #8
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]

	TelemetryMain_StartUP();
 8007014:	f000 fae6 	bl	80075e4 <TelemetryMain_StartUP>
#ifdef DEBUG_THREAD
        DEBUG_printThread((char *)PROCESS_TELEMETRYMAIN_THREADNAME, "STARTED");
#endif
        // [[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[

        TelemetyMain_MAIN(); /* Main Application */
 8007018:	f000 fafa 	bl	8007610 <TelemetyMain_MAIN>

		vTaskDelay(10);  /* Main Thread Checkout every 10ms tick */
 800701c:	200a      	movs	r0, #10
 800701e:	f7fe f825 	bl	800506c <vTaskDelay>
        TelemetyMain_MAIN(); /* Main Application */
 8007022:	e7f9      	b.n	8007018 <Process_TelemetryMAIN_TaskHandler+0xc>

08007024 <Process_Flash_TaskHandler>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void Process_Flash_TaskHandler(void* param)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b084      	sub	sp, #16
 8007028:	af02      	add	r7, sp, #8
 800702a:	6078      	str	r0, [r7, #4]

	ModuleFlash_StartUP();
 800702c:	f000 f95e 	bl	80072ec <ModuleFlash_StartUP>

	/* Semaphore Wait */
	xSemResult.Process_Flash = xQueueSemaphoreTake(xSemHandle.Process_Flash, osWaitForever);
 8007030:	4b0f      	ldr	r3, [pc, #60]	; (8007070 <Process_Flash_TaskHandler+0x4c>)
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f04f 31ff 	mov.w	r1, #4294967295
 8007038:	4618      	mov	r0, r3
 800703a:	f7fd fbe3 	bl	8004804 <xQueueSemaphoreTake>
 800703e:	4603      	mov	r3, r0
 8007040:	4a0c      	ldr	r2, [pc, #48]	; (8007074 <Process_Flash_TaskHandler+0x50>)
 8007042:	6013      	str	r3, [r2, #0]
	if (pdTRUE == xSemResult.Process_Flash)
 8007044:	4b0b      	ldr	r3, [pc, #44]	; (8007074 <Process_Flash_TaskHandler+0x50>)
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	2b01      	cmp	r3, #1
 800704a:	d102      	bne.n	8007052 <Process_Flash_TaskHandler+0x2e>
#ifdef DEBUG_THREAD
        DEBUG_printThread((char *)PROCESS_FLASH_THREADNAME, "STARTED");
#endif
        // [[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[

        ModuleFlash_MAIN(); /* Main Application */
 800704c:	f000 f964 	bl	8007318 <ModuleFlash_MAIN>
 8007050:	e7fc      	b.n	800704c <Process_Flash_TaskHandler+0x28>

	}
	else
	{
		/* Semaphore fail / Create Again                                                             */
		xSemHandle.Process_Flash = xSemaphoreCreateBinaryStatic(&xSemaphore.Process_Flash);
 8007052:	2303      	movs	r3, #3
 8007054:	9300      	str	r3, [sp, #0]
 8007056:	4b08      	ldr	r3, [pc, #32]	; (8007078 <Process_Flash_TaskHandler+0x54>)
 8007058:	2200      	movs	r2, #0
 800705a:	2100      	movs	r1, #0
 800705c:	2001      	movs	r0, #1
 800705e:	f7fd f8bb 	bl	80041d8 <xQueueGenericCreateStatic>
 8007062:	4603      	mov	r3, r0
 8007064:	4a02      	ldr	r2, [pc, #8]	; (8007070 <Process_Flash_TaskHandler+0x4c>)
 8007066:	6013      	str	r3, [r2, #0]
	}


}
 8007068:	bf00      	nop
 800706a:	3708      	adds	r7, #8
 800706c:	46bd      	mov	sp, r7
 800706e:	bd80      	pop	{r7, pc}
 8007070:	200095d4 	.word	0x200095d4
 8007074:	200095ec 	.word	0x200095ec
 8007078:	200093f4 	.word	0x200093f4

0800707c <Process_CAN_TaskHandler>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void Process_CAN_TaskHandler(void* param)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b084      	sub	sp, #16
 8007080:	af02      	add	r7, sp, #8
 8007082:	6078      	str	r0, [r7, #4]
	ModuleCAN_StartUP();
 8007084:	f000 f8e4 	bl	8007250 <ModuleCAN_StartUP>

	/* Semaphore Wait */
	xSemResult.Process_CAN = xQueueSemaphoreTake(xSemHandle.Process_CAN, osWaitForever);
 8007088:	4b0f      	ldr	r3, [pc, #60]	; (80070c8 <Process_CAN_TaskHandler+0x4c>)
 800708a:	685b      	ldr	r3, [r3, #4]
 800708c:	f04f 31ff 	mov.w	r1, #4294967295
 8007090:	4618      	mov	r0, r3
 8007092:	f7fd fbb7 	bl	8004804 <xQueueSemaphoreTake>
 8007096:	4603      	mov	r3, r0
 8007098:	4a0c      	ldr	r2, [pc, #48]	; (80070cc <Process_CAN_TaskHandler+0x50>)
 800709a:	6053      	str	r3, [r2, #4]
	if (pdTRUE == xSemResult.Process_CAN)
 800709c:	4b0b      	ldr	r3, [pc, #44]	; (80070cc <Process_CAN_TaskHandler+0x50>)
 800709e:	685b      	ldr	r3, [r3, #4]
 80070a0:	2b01      	cmp	r3, #1
 80070a2:	d102      	bne.n	80070aa <Process_CAN_TaskHandler+0x2e>
#ifdef DEBUG_THREAD
        DEBUG_printThread((char *)PROCESS_CAN_THREADNAME, "STARTED");
#endif
        // [[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[

        ModuleCAN_MAIN(); /* Main Application */
 80070a4:	f000 f8ea 	bl	800727c <ModuleCAN_MAIN>
 80070a8:	e7fc      	b.n	80070a4 <Process_CAN_TaskHandler+0x28>

	}
	else
	{
		/* Semaphore fail / Create Again                                                             */
		xSemHandle.Process_CAN = xSemaphoreCreateBinaryStatic(&xSemaphore.Process_CAN);
 80070aa:	2303      	movs	r3, #3
 80070ac:	9300      	str	r3, [sp, #0]
 80070ae:	4b08      	ldr	r3, [pc, #32]	; (80070d0 <Process_CAN_TaskHandler+0x54>)
 80070b0:	2200      	movs	r2, #0
 80070b2:	2100      	movs	r1, #0
 80070b4:	2001      	movs	r0, #1
 80070b6:	f7fd f88f 	bl	80041d8 <xQueueGenericCreateStatic>
 80070ba:	4603      	mov	r3, r0
 80070bc:	4a02      	ldr	r2, [pc, #8]	; (80070c8 <Process_CAN_TaskHandler+0x4c>)
 80070be:	6053      	str	r3, [r2, #4]
	}
}
 80070c0:	bf00      	nop
 80070c2:	3708      	adds	r7, #8
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bd80      	pop	{r7, pc}
 80070c8:	200095d4 	.word	0x200095d4
 80070cc:	200095ec 	.word	0x200095ec
 80070d0:	20009444 	.word	0x20009444

080070d4 <Process_RTC_TaskHandler>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void Process_RTC_TaskHandler(void* param)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b084      	sub	sp, #16
 80070d8:	af02      	add	r7, sp, #8
 80070da:	6078      	str	r0, [r7, #4]
	ModuleRTC_StartUP();
 80070dc:	f000 f99e 	bl	800741c <ModuleRTC_StartUP>

	/* Semaphore Wait */
	xSemResult.Process_RTC = xQueueSemaphoreTake(xSemHandle.Process_RTC, osWaitForever);
 80070e0:	4b0f      	ldr	r3, [pc, #60]	; (8007120 <Process_RTC_TaskHandler+0x4c>)
 80070e2:	689b      	ldr	r3, [r3, #8]
 80070e4:	f04f 31ff 	mov.w	r1, #4294967295
 80070e8:	4618      	mov	r0, r3
 80070ea:	f7fd fb8b 	bl	8004804 <xQueueSemaphoreTake>
 80070ee:	4603      	mov	r3, r0
 80070f0:	4a0c      	ldr	r2, [pc, #48]	; (8007124 <Process_RTC_TaskHandler+0x50>)
 80070f2:	6093      	str	r3, [r2, #8]
	if (pdTRUE == xSemResult.Process_RTC)
 80070f4:	4b0b      	ldr	r3, [pc, #44]	; (8007124 <Process_RTC_TaskHandler+0x50>)
 80070f6:	689b      	ldr	r3, [r3, #8]
 80070f8:	2b01      	cmp	r3, #1
 80070fa:	d102      	bne.n	8007102 <Process_RTC_TaskHandler+0x2e>
#ifdef DEBUG_THREAD
        DEBUG_printThread((char *)PROCESS_RTC_THREADNAME, "STARTED");
#endif
        // [[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[

        ModuleRTC_MAIN(); /* Main Application */
 80070fc:	f000 f9a4 	bl	8007448 <ModuleRTC_MAIN>
 8007100:	e7fc      	b.n	80070fc <Process_RTC_TaskHandler+0x28>

	}
	else
	{
		/* Semaphore fail / Create Again  */
		xSemHandle.Process_RTC = xSemaphoreCreateBinaryStatic(&xSemaphore.Process_RTC);
 8007102:	2303      	movs	r3, #3
 8007104:	9300      	str	r3, [sp, #0]
 8007106:	4b08      	ldr	r3, [pc, #32]	; (8007128 <Process_RTC_TaskHandler+0x54>)
 8007108:	2200      	movs	r2, #0
 800710a:	2100      	movs	r1, #0
 800710c:	2001      	movs	r0, #1
 800710e:	f7fd f863 	bl	80041d8 <xQueueGenericCreateStatic>
 8007112:	4603      	mov	r3, r0
 8007114:	4a02      	ldr	r2, [pc, #8]	; (8007120 <Process_RTC_TaskHandler+0x4c>)
 8007116:	6093      	str	r3, [r2, #8]
	}

}
 8007118:	bf00      	nop
 800711a:	3708      	adds	r7, #8
 800711c:	46bd      	mov	sp, r7
 800711e:	bd80      	pop	{r7, pc}
 8007120:	200095d4 	.word	0x200095d4
 8007124:	200095ec 	.word	0x200095ec
 8007128:	20009494 	.word	0x20009494

0800712c <Process_SDCARD_TaskHandler>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void Process_SDCARD_TaskHandler(void* param)
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b084      	sub	sp, #16
 8007130:	af02      	add	r7, sp, #8
 8007132:	6078      	str	r0, [r7, #4]
	ModuleSDCard_StartUP();
 8007134:	f000 f9be 	bl	80074b4 <ModuleSDCard_StartUP>

	/* Semaphore Wait */
	xSemResult.Process_SDCARD = xQueueSemaphoreTake(xSemHandle.Process_SDCARD, osWaitForever);
 8007138:	4b0f      	ldr	r3, [pc, #60]	; (8007178 <Process_SDCARD_TaskHandler+0x4c>)
 800713a:	68db      	ldr	r3, [r3, #12]
 800713c:	f04f 31ff 	mov.w	r1, #4294967295
 8007140:	4618      	mov	r0, r3
 8007142:	f7fd fb5f 	bl	8004804 <xQueueSemaphoreTake>
 8007146:	4603      	mov	r3, r0
 8007148:	4a0c      	ldr	r2, [pc, #48]	; (800717c <Process_SDCARD_TaskHandler+0x50>)
 800714a:	60d3      	str	r3, [r2, #12]
	if (pdTRUE == xSemResult.Process_SDCARD)
 800714c:	4b0b      	ldr	r3, [pc, #44]	; (800717c <Process_SDCARD_TaskHandler+0x50>)
 800714e:	68db      	ldr	r3, [r3, #12]
 8007150:	2b01      	cmp	r3, #1
 8007152:	d102      	bne.n	800715a <Process_SDCARD_TaskHandler+0x2e>
#ifdef DEBUG_THREAD
        DEBUG_printThread((char *)PROCESS_SDCARD_THREADNAME, "STARTED");
#endif
        // [[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[

        ModuleSDCard_MAIN(); /* Main Application */
 8007154:	f000 f9c4 	bl	80074e0 <ModuleSDCard_MAIN>
 8007158:	e7fc      	b.n	8007154 <Process_SDCARD_TaskHandler+0x28>

	}
	else
	{
		/* Semaphore fail / Create Again  */
		xSemHandle.Process_SDCARD = xSemaphoreCreateBinaryStatic(&xSemaphore.Process_SDCARD);
 800715a:	2303      	movs	r3, #3
 800715c:	9300      	str	r3, [sp, #0]
 800715e:	4b08      	ldr	r3, [pc, #32]	; (8007180 <Process_SDCARD_TaskHandler+0x54>)
 8007160:	2200      	movs	r2, #0
 8007162:	2100      	movs	r1, #0
 8007164:	2001      	movs	r0, #1
 8007166:	f7fd f837 	bl	80041d8 <xQueueGenericCreateStatic>
 800716a:	4603      	mov	r3, r0
 800716c:	4a02      	ldr	r2, [pc, #8]	; (8007178 <Process_SDCARD_TaskHandler+0x4c>)
 800716e:	60d3      	str	r3, [r2, #12]
	}
}
 8007170:	bf00      	nop
 8007172:	3708      	adds	r7, #8
 8007174:	46bd      	mov	sp, r7
 8007176:	bd80      	pop	{r7, pc}
 8007178:	200095d4 	.word	0x200095d4
 800717c:	200095ec 	.word	0x200095ec
 8007180:	200094e4 	.word	0x200094e4

08007184 <Process_WIFI_TaskHandler>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void Process_WIFI_TaskHandler(void* param)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b084      	sub	sp, #16
 8007188:	af02      	add	r7, sp, #8
 800718a:	6078      	str	r0, [r7, #4]
	ModuleWIFI_StartUP();
 800718c:	f000 f9de 	bl	800754c <ModuleWIFI_StartUP>

	/* Semaphore Wait */
	xSemResult.Process_WIFI = xQueueSemaphoreTake(xSemHandle.Process_WIFI, osWaitForever);
 8007190:	4b0f      	ldr	r3, [pc, #60]	; (80071d0 <Process_WIFI_TaskHandler+0x4c>)
 8007192:	691b      	ldr	r3, [r3, #16]
 8007194:	f04f 31ff 	mov.w	r1, #4294967295
 8007198:	4618      	mov	r0, r3
 800719a:	f7fd fb33 	bl	8004804 <xQueueSemaphoreTake>
 800719e:	4603      	mov	r3, r0
 80071a0:	4a0c      	ldr	r2, [pc, #48]	; (80071d4 <Process_WIFI_TaskHandler+0x50>)
 80071a2:	6113      	str	r3, [r2, #16]
	if (pdTRUE == xSemResult.Process_WIFI)
 80071a4:	4b0b      	ldr	r3, [pc, #44]	; (80071d4 <Process_WIFI_TaskHandler+0x50>)
 80071a6:	691b      	ldr	r3, [r3, #16]
 80071a8:	2b01      	cmp	r3, #1
 80071aa:	d102      	bne.n	80071b2 <Process_WIFI_TaskHandler+0x2e>
#ifdef DEBUG_THREAD
        DEBUG_printThread((char *)PROCESS_WIFI_THREADNAME, "STARTED");
#endif
        // [[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[

        ModuleWIFI_MAIN(); /* Main Application */
 80071ac:	f000 f9e4 	bl	8007578 <ModuleWIFI_MAIN>
 80071b0:	e7fc      	b.n	80071ac <Process_WIFI_TaskHandler+0x28>

	}
	else
	{
		/* Semaphore fail / Create Again  */
		xSemHandle.Process_WIFI = xSemaphoreCreateBinaryStatic(&xSemaphore.Process_WIFI);
 80071b2:	2303      	movs	r3, #3
 80071b4:	9300      	str	r3, [sp, #0]
 80071b6:	4b08      	ldr	r3, [pc, #32]	; (80071d8 <Process_WIFI_TaskHandler+0x54>)
 80071b8:	2200      	movs	r2, #0
 80071ba:	2100      	movs	r1, #0
 80071bc:	2001      	movs	r0, #1
 80071be:	f7fd f80b 	bl	80041d8 <xQueueGenericCreateStatic>
 80071c2:	4603      	mov	r3, r0
 80071c4:	4a02      	ldr	r2, [pc, #8]	; (80071d0 <Process_WIFI_TaskHandler+0x4c>)
 80071c6:	6113      	str	r3, [r2, #16]
	}

}
 80071c8:	bf00      	nop
 80071ca:	3708      	adds	r7, #8
 80071cc:	46bd      	mov	sp, r7
 80071ce:	bd80      	pop	{r7, pc}
 80071d0:	200095d4 	.word	0x200095d4
 80071d4:	200095ec 	.word	0x200095ec
 80071d8:	20009534 	.word	0x20009534

080071dc <Process_NEXTION_TaskHandler>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void Process_NEXTION_TaskHandler(void* param)
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b084      	sub	sp, #16
 80071e0:	af02      	add	r7, sp, #8
 80071e2:	6078      	str	r0, [r7, #4]
	ModuleNEXTION_StartUP();
 80071e4:	f000 f8ce 	bl	8007384 <ModuleNEXTION_StartUP>

	/* Semaphore Wait */
	xSemResult.Process_NEXTION = xQueueSemaphoreTake(xSemHandle.Process_NEXTION, osWaitForever);
 80071e8:	4b0f      	ldr	r3, [pc, #60]	; (8007228 <Process_NEXTION_TaskHandler+0x4c>)
 80071ea:	695b      	ldr	r3, [r3, #20]
 80071ec:	f04f 31ff 	mov.w	r1, #4294967295
 80071f0:	4618      	mov	r0, r3
 80071f2:	f7fd fb07 	bl	8004804 <xQueueSemaphoreTake>
 80071f6:	4603      	mov	r3, r0
 80071f8:	4a0c      	ldr	r2, [pc, #48]	; (800722c <Process_NEXTION_TaskHandler+0x50>)
 80071fa:	6153      	str	r3, [r2, #20]
	if (pdTRUE == xSemResult.Process_NEXTION)
 80071fc:	4b0b      	ldr	r3, [pc, #44]	; (800722c <Process_NEXTION_TaskHandler+0x50>)
 80071fe:	695b      	ldr	r3, [r3, #20]
 8007200:	2b01      	cmp	r3, #1
 8007202:	d102      	bne.n	800720a <Process_NEXTION_TaskHandler+0x2e>
#ifdef DEBUG_THREAD
        DEBUG_printThread((char *)PROCESS_NEXTION_THREADNAME, "STARTED");
#endif
        // [[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[

        ModuleNEXTION_MAIN(); /* Main Application */
 8007204:	f000 f8d4 	bl	80073b0 <ModuleNEXTION_MAIN>
 8007208:	e7fc      	b.n	8007204 <Process_NEXTION_TaskHandler+0x28>
		}
	}
	else
	{
		/* Semaphore fail / Create Again  */
		xSemHandle.Process_NEXTION = xSemaphoreCreateBinaryStatic(&xSemaphore.Process_NEXTION);
 800720a:	2303      	movs	r3, #3
 800720c:	9300      	str	r3, [sp, #0]
 800720e:	4b08      	ldr	r3, [pc, #32]	; (8007230 <Process_NEXTION_TaskHandler+0x54>)
 8007210:	2200      	movs	r2, #0
 8007212:	2100      	movs	r1, #0
 8007214:	2001      	movs	r0, #1
 8007216:	f7fc ffdf 	bl	80041d8 <xQueueGenericCreateStatic>
 800721a:	4603      	mov	r3, r0
 800721c:	4a02      	ldr	r2, [pc, #8]	; (8007228 <Process_NEXTION_TaskHandler+0x4c>)
 800721e:	6153      	str	r3, [r2, #20]
	}


}
 8007220:	bf00      	nop
 8007222:	3708      	adds	r7, #8
 8007224:	46bd      	mov	sp, r7
 8007226:	bd80      	pop	{r7, pc}
 8007228:	200095d4 	.word	0x200095d4
 800722c:	200095ec 	.word	0x200095ec
 8007230:	20009584 	.word	0x20009584

08007234 <ModuleCAN_HWInit>:
	 @return  : 
	 @date	  : 
	 @INFO		:	
********************************************************************************/
void ModuleCAN_HWInit(void)
{
 8007234:	b480      	push	{r7}
 8007236:	af00      	add	r7, sp, #0
	//@INFO: WIFI thread'ine ait donanımsal init fonksiyonları
}
 8007238:	bf00      	nop
 800723a:	46bd      	mov	sp, r7
 800723c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007240:	4770      	bx	lr

08007242 <ModuleCAN_SWInit>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModuleCAN_SWInit(void)
{
 8007242:	b480      	push	{r7}
 8007244:	af00      	add	r7, sp, #0
	//@INFO: WIFI thread'ine ait yazilimsal init fonksiyonları
}
 8007246:	bf00      	nop
 8007248:	46bd      	mov	sp, r7
 800724a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724e:	4770      	bx	lr

08007250 <ModuleCAN_StartUP>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModuleCAN_StartUP(void)
{
 8007250:	b580      	push	{r7, lr}
 8007252:	af00      	add	r7, sp, #0
	ModuleCAN_HWInit();
 8007254:	f7ff ffee 	bl	8007234 <ModuleCAN_HWInit>
	ModuleCAN_SWInit();
 8007258:	f7ff fff3 	bl	8007242 <ModuleCAN_SWInit>
}
 800725c:	bf00      	nop
 800725e:	bd80      	pop	{r7, pc}

08007260 <ModuleCAN_MAIN_Routine>:
	 @date	  :
	 @INFO		:
********************************************************************************/

void ModuleCAN_MAIN_Routine(void)
{
 8007260:	b480      	push	{r7}
 8007262:	af00      	add	r7, sp, #0

}
 8007264:	bf00      	nop
 8007266:	46bd      	mov	sp, r7
 8007268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726c:	4770      	bx	lr

0800726e <ModuleCAN_MAIN_Process>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModuleCAN_MAIN_Process(void)
{
 800726e:	b480      	push	{r7}
 8007270:	af00      	add	r7, sp, #0

}
 8007272:	bf00      	nop
 8007274:	46bd      	mov	sp, r7
 8007276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727a:	4770      	bx	lr

0800727c <ModuleCAN_MAIN>:
	 @date	  :
	 @INFO		:
********************************************************************************/

void ModuleCAN_MAIN(void)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	af00      	add	r7, sp, #0
	ModuleCAN_StartUP();
 8007280:	f7ff ffe6 	bl	8007250 <ModuleCAN_StartUP>

	while(1)
	{
		switch(ModuleCAN_MAIN_State)
 8007284:	4b11      	ldr	r3, [pc, #68]	; (80072cc <ModuleCAN_MAIN+0x50>)
 8007286:	781b      	ldrb	r3, [r3, #0]
 8007288:	2b03      	cmp	r3, #3
 800728a:	d819      	bhi.n	80072c0 <ModuleCAN_MAIN+0x44>
 800728c:	a201      	add	r2, pc, #4	; (adr r2, 8007294 <ModuleCAN_MAIN+0x18>)
 800728e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007292:	bf00      	nop
 8007294:	080072a5 	.word	0x080072a5
 8007298:	080072ad 	.word	0x080072ad
 800729c:	080072b3 	.word	0x080072b3
 80072a0:	080072b9 	.word	0x080072b9
		{
		    case ModuleCAN_MAIN_State_IDLE:
		    	//@INFO: IDLE Operations ..
		    	ModuleCAN_MAIN_State = ModuleCAN_MAIN_State_ROUTINE;
 80072a4:	4b09      	ldr	r3, [pc, #36]	; (80072cc <ModuleCAN_MAIN+0x50>)
 80072a6:	2201      	movs	r2, #1
 80072a8:	701a      	strb	r2, [r3, #0]
		    break;
 80072aa:	e00d      	b.n	80072c8 <ModuleCAN_MAIN+0x4c>

		    case ModuleCAN_MAIN_State_ROUTINE:

		    	ModuleCAN_MAIN_Routine();
 80072ac:	f7ff ffd8 	bl	8007260 <ModuleCAN_MAIN_Routine>
		    break;
 80072b0:	e00a      	b.n	80072c8 <ModuleCAN_MAIN+0x4c>

		    case ModuleCAN_MAIN_State_PROCESS:

		    	ModuleCAN_MAIN_Process();
 80072b2:	f7ff ffdc 	bl	800726e <ModuleCAN_MAIN_Process>

		    break;
 80072b6:	e007      	b.n	80072c8 <ModuleCAN_MAIN+0x4c>

		    case ModuleCAN_MAIN_State_SUSPEND:
		    	ModuleCAN_MAIN_State = ModuleCAN_MAIN_State_IDLE;
 80072b8:	4b04      	ldr	r3, [pc, #16]	; (80072cc <ModuleCAN_MAIN+0x50>)
 80072ba:	2200      	movs	r2, #0
 80072bc:	701a      	strb	r2, [r3, #0]
		    break;
 80072be:	e003      	b.n	80072c8 <ModuleCAN_MAIN+0x4c>

		    default:
		    	ModuleCAN_MAIN_State = ModuleCAN_MAIN_State_SUSPEND;
 80072c0:	4b02      	ldr	r3, [pc, #8]	; (80072cc <ModuleCAN_MAIN+0x50>)
 80072c2:	2203      	movs	r2, #3
 80072c4:	701a      	strb	r2, [r3, #0]
		    break;
 80072c6:	bf00      	nop
		switch(ModuleCAN_MAIN_State)
 80072c8:	e7dc      	b.n	8007284 <ModuleCAN_MAIN+0x8>
 80072ca:	bf00      	nop
 80072cc:	20009664 	.word	0x20009664

080072d0 <ModuleFlash_HWInit>:
	 @return  : 
	 @date	  : 
	 @INFO		:	
********************************************************************************/
void ModuleFlash_HWInit(void)
{
 80072d0:	b480      	push	{r7}
 80072d2:	af00      	add	r7, sp, #0
	//@INFO: WIFI thread'ine ait donanımsal init fonksiyonları
}
 80072d4:	bf00      	nop
 80072d6:	46bd      	mov	sp, r7
 80072d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072dc:	4770      	bx	lr

080072de <ModuleFlash_SWInit>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModuleFlash_SWInit(void)
{
 80072de:	b480      	push	{r7}
 80072e0:	af00      	add	r7, sp, #0
	//@INFO: WIFI thread'ine ait yazilimsal init fonksiyonları
}
 80072e2:	bf00      	nop
 80072e4:	46bd      	mov	sp, r7
 80072e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ea:	4770      	bx	lr

080072ec <ModuleFlash_StartUP>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModuleFlash_StartUP(void)
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	af00      	add	r7, sp, #0
	ModuleFlash_HWInit();
 80072f0:	f7ff ffee 	bl	80072d0 <ModuleFlash_HWInit>
	ModuleFlash_SWInit();
 80072f4:	f7ff fff3 	bl	80072de <ModuleFlash_SWInit>
}
 80072f8:	bf00      	nop
 80072fa:	bd80      	pop	{r7, pc}

080072fc <ModuleFlash_MAIN_Routine>:
	 @date	  :
	 @INFO		:
********************************************************************************/

void ModuleFlash_MAIN_Routine(void)
{
 80072fc:	b480      	push	{r7}
 80072fe:	af00      	add	r7, sp, #0

}
 8007300:	bf00      	nop
 8007302:	46bd      	mov	sp, r7
 8007304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007308:	4770      	bx	lr

0800730a <ModuleFlash_MAIN_Process>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModuleFlash_MAIN_Process(void)
{
 800730a:	b480      	push	{r7}
 800730c:	af00      	add	r7, sp, #0

}
 800730e:	bf00      	nop
 8007310:	46bd      	mov	sp, r7
 8007312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007316:	4770      	bx	lr

08007318 <ModuleFlash_MAIN>:
	 @date	  :
	 @INFO		:
********************************************************************************/

void ModuleFlash_MAIN(void)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	af00      	add	r7, sp, #0

	switch(ModuleFlash_MAIN_State)
 800731c:	4b11      	ldr	r3, [pc, #68]	; (8007364 <ModuleFlash_MAIN+0x4c>)
 800731e:	781b      	ldrb	r3, [r3, #0]
 8007320:	2b03      	cmp	r3, #3
 8007322:	d819      	bhi.n	8007358 <ModuleFlash_MAIN+0x40>
 8007324:	a201      	add	r2, pc, #4	; (adr r2, 800732c <ModuleFlash_MAIN+0x14>)
 8007326:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800732a:	bf00      	nop
 800732c:	0800733d 	.word	0x0800733d
 8007330:	08007345 	.word	0x08007345
 8007334:	0800734b 	.word	0x0800734b
 8007338:	08007351 	.word	0x08007351
	{
	    case ModuleFlash_MAIN_State_IDLE:
	    	//@INFO: IDLE Operations ..
	    	ModuleFlash_MAIN_State = ModuleFlash_MAIN_State_ROUTINE;
 800733c:	4b09      	ldr	r3, [pc, #36]	; (8007364 <ModuleFlash_MAIN+0x4c>)
 800733e:	2201      	movs	r2, #1
 8007340:	701a      	strb	r2, [r3, #0]
	    break;
 8007342:	e00d      	b.n	8007360 <ModuleFlash_MAIN+0x48>

	    case ModuleFlash_MAIN_State_ROUTINE:

	    	ModuleFlash_MAIN_Routine();
 8007344:	f7ff ffda 	bl	80072fc <ModuleFlash_MAIN_Routine>
	    break;
 8007348:	e00a      	b.n	8007360 <ModuleFlash_MAIN+0x48>

	    case ModuleFlash_MAIN_State_PROCESS:

	    	ModuleFlash_MAIN_Process();
 800734a:	f7ff ffde 	bl	800730a <ModuleFlash_MAIN_Process>

	    break;
 800734e:	e007      	b.n	8007360 <ModuleFlash_MAIN+0x48>

	    case ModuleFlash_MAIN_State_SUSPEND:
	    	ModuleFlash_MAIN_State = ModuleFlash_MAIN_State_IDLE;
 8007350:	4b04      	ldr	r3, [pc, #16]	; (8007364 <ModuleFlash_MAIN+0x4c>)
 8007352:	2200      	movs	r2, #0
 8007354:	701a      	strb	r2, [r3, #0]
	    break;
 8007356:	e003      	b.n	8007360 <ModuleFlash_MAIN+0x48>

	    default:
	    	ModuleFlash_MAIN_State = ModuleFlash_MAIN_State_SUSPEND;
 8007358:	4b02      	ldr	r3, [pc, #8]	; (8007364 <ModuleFlash_MAIN+0x4c>)
 800735a:	2203      	movs	r2, #3
 800735c:	701a      	strb	r2, [r3, #0]
	    break;
 800735e:	bf00      	nop

	}

}
 8007360:	bf00      	nop
 8007362:	bd80      	pop	{r7, pc}
 8007364:	20009665 	.word	0x20009665

08007368 <ModuleNEXTION_HWInit>:
	 @return  : 
	 @date	  : 
	 @INFO		:	
********************************************************************************/
void ModuleNEXTION_HWInit(void)
{
 8007368:	b480      	push	{r7}
 800736a:	af00      	add	r7, sp, #0
	//@INFO: WIFI thread'ine ait donanımsal init fonksiyonları
}
 800736c:	bf00      	nop
 800736e:	46bd      	mov	sp, r7
 8007370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007374:	4770      	bx	lr

08007376 <ModuleNEXTION_SWInit>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModuleNEXTION_SWInit(void)
{
 8007376:	b480      	push	{r7}
 8007378:	af00      	add	r7, sp, #0
	//@INFO: WIFI thread'ine ait yazilimsal init fonksiyonları
}
 800737a:	bf00      	nop
 800737c:	46bd      	mov	sp, r7
 800737e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007382:	4770      	bx	lr

08007384 <ModuleNEXTION_StartUP>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModuleNEXTION_StartUP(void)
{
 8007384:	b580      	push	{r7, lr}
 8007386:	af00      	add	r7, sp, #0
	ModuleNEXTION_HWInit();
 8007388:	f7ff ffee 	bl	8007368 <ModuleNEXTION_HWInit>
	ModuleNEXTION_SWInit();
 800738c:	f7ff fff3 	bl	8007376 <ModuleNEXTION_SWInit>
}
 8007390:	bf00      	nop
 8007392:	bd80      	pop	{r7, pc}

08007394 <ModuleNEXTION_MAIN_Routine>:
	 @date	  :
	 @INFO		:
********************************************************************************/

void ModuleNEXTION_MAIN_Routine(void)
{
 8007394:	b480      	push	{r7}
 8007396:	af00      	add	r7, sp, #0

}
 8007398:	bf00      	nop
 800739a:	46bd      	mov	sp, r7
 800739c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a0:	4770      	bx	lr

080073a2 <ModuleNEXTION_MAIN_Process>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModuleNEXTION_MAIN_Process(void)
{
 80073a2:	b480      	push	{r7}
 80073a4:	af00      	add	r7, sp, #0

}
 80073a6:	bf00      	nop
 80073a8:	46bd      	mov	sp, r7
 80073aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ae:	4770      	bx	lr

080073b0 <ModuleNEXTION_MAIN>:
	 @date	  :
	 @INFO		:
********************************************************************************/

void ModuleNEXTION_MAIN(void)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	af00      	add	r7, sp, #0
	switch(ModuleNEXTION_MAIN_State)
 80073b4:	4b11      	ldr	r3, [pc, #68]	; (80073fc <ModuleNEXTION_MAIN+0x4c>)
 80073b6:	781b      	ldrb	r3, [r3, #0]
 80073b8:	2b03      	cmp	r3, #3
 80073ba:	d819      	bhi.n	80073f0 <ModuleNEXTION_MAIN+0x40>
 80073bc:	a201      	add	r2, pc, #4	; (adr r2, 80073c4 <ModuleNEXTION_MAIN+0x14>)
 80073be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073c2:	bf00      	nop
 80073c4:	080073d5 	.word	0x080073d5
 80073c8:	080073dd 	.word	0x080073dd
 80073cc:	080073e3 	.word	0x080073e3
 80073d0:	080073e9 	.word	0x080073e9
	{
	    case ModuleNEXTION_MAIN_State_IDLE:
	    	//@INFO: IDLE Operations ..
	    	ModuleNEXTION_MAIN_State = ModuleNEXTION_MAIN_State_ROUTINE;
 80073d4:	4b09      	ldr	r3, [pc, #36]	; (80073fc <ModuleNEXTION_MAIN+0x4c>)
 80073d6:	2201      	movs	r2, #1
 80073d8:	701a      	strb	r2, [r3, #0]
	    break;
 80073da:	e00d      	b.n	80073f8 <ModuleNEXTION_MAIN+0x48>

	    case ModuleNEXTION_MAIN_State_ROUTINE:

	    	ModuleNEXTION_MAIN_Routine();
 80073dc:	f7ff ffda 	bl	8007394 <ModuleNEXTION_MAIN_Routine>
	    break;
 80073e0:	e00a      	b.n	80073f8 <ModuleNEXTION_MAIN+0x48>

	    case ModuleNEXTION_MAIN_State_PROCESS:

	    	ModuleNEXTION_MAIN_Process();
 80073e2:	f7ff ffde 	bl	80073a2 <ModuleNEXTION_MAIN_Process>

	    break;
 80073e6:	e007      	b.n	80073f8 <ModuleNEXTION_MAIN+0x48>

	    case ModuleNEXTION_MAIN_State_SUSPEND:
	    	ModuleNEXTION_MAIN_State = ModuleNEXTION_MAIN_State_IDLE;
 80073e8:	4b04      	ldr	r3, [pc, #16]	; (80073fc <ModuleNEXTION_MAIN+0x4c>)
 80073ea:	2200      	movs	r2, #0
 80073ec:	701a      	strb	r2, [r3, #0]
	    break;
 80073ee:	e003      	b.n	80073f8 <ModuleNEXTION_MAIN+0x48>

	    default:
	    	ModuleNEXTION_MAIN_State = ModuleNEXTION_MAIN_State_SUSPEND;
 80073f0:	4b02      	ldr	r3, [pc, #8]	; (80073fc <ModuleNEXTION_MAIN+0x4c>)
 80073f2:	2203      	movs	r2, #3
 80073f4:	701a      	strb	r2, [r3, #0]
	    break;
 80073f6:	bf00      	nop

	}

}
 80073f8:	bf00      	nop
 80073fa:	bd80      	pop	{r7, pc}
 80073fc:	20009666 	.word	0x20009666

08007400 <ModuleRTC_HWInit>:
	 @return  : 
	 @date	  : 
	 @INFO		:	
********************************************************************************/
void ModuleRTC_HWInit(void)
{
 8007400:	b480      	push	{r7}
 8007402:	af00      	add	r7, sp, #0
	//@INFO: WIFI thread'ine ait donanımsal init fonksiyonları
}
 8007404:	bf00      	nop
 8007406:	46bd      	mov	sp, r7
 8007408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740c:	4770      	bx	lr

0800740e <ModuleRTC_SWInit>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModuleRTC_SWInit(void)
{
 800740e:	b480      	push	{r7}
 8007410:	af00      	add	r7, sp, #0
	//@INFO: WIFI thread'ine ait yazilimsal init fonksiyonları
}
 8007412:	bf00      	nop
 8007414:	46bd      	mov	sp, r7
 8007416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741a:	4770      	bx	lr

0800741c <ModuleRTC_StartUP>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModuleRTC_StartUP(void)
{
 800741c:	b580      	push	{r7, lr}
 800741e:	af00      	add	r7, sp, #0
	ModuleRTC_HWInit();
 8007420:	f7ff ffee 	bl	8007400 <ModuleRTC_HWInit>
	ModuleRTC_SWInit();
 8007424:	f7ff fff3 	bl	800740e <ModuleRTC_SWInit>
}
 8007428:	bf00      	nop
 800742a:	bd80      	pop	{r7, pc}

0800742c <ModuleRTC_MAIN_Routine>:
	 @date	  :
	 @INFO		:
********************************************************************************/

void ModuleRTC_MAIN_Routine(void)
{
 800742c:	b480      	push	{r7}
 800742e:	af00      	add	r7, sp, #0

}
 8007430:	bf00      	nop
 8007432:	46bd      	mov	sp, r7
 8007434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007438:	4770      	bx	lr

0800743a <ModuleRTC_MAIN_Process>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModuleRTC_MAIN_Process(void)
{
 800743a:	b480      	push	{r7}
 800743c:	af00      	add	r7, sp, #0

}
 800743e:	bf00      	nop
 8007440:	46bd      	mov	sp, r7
 8007442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007446:	4770      	bx	lr

08007448 <ModuleRTC_MAIN>:
	 @date	  :
	 @INFO		:
********************************************************************************/

void ModuleRTC_MAIN(void)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	af00      	add	r7, sp, #0
	switch(ModuleRTC_MAIN_State)
 800744c:	4b11      	ldr	r3, [pc, #68]	; (8007494 <ModuleRTC_MAIN+0x4c>)
 800744e:	781b      	ldrb	r3, [r3, #0]
 8007450:	2b03      	cmp	r3, #3
 8007452:	d819      	bhi.n	8007488 <ModuleRTC_MAIN+0x40>
 8007454:	a201      	add	r2, pc, #4	; (adr r2, 800745c <ModuleRTC_MAIN+0x14>)
 8007456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800745a:	bf00      	nop
 800745c:	0800746d 	.word	0x0800746d
 8007460:	08007475 	.word	0x08007475
 8007464:	0800747b 	.word	0x0800747b
 8007468:	08007481 	.word	0x08007481
	{
	    case ModuleRTC_MAIN_State_IDLE:
	    	//@INFO: IDLE Operations ..
	    	ModuleRTC_MAIN_State = ModuleRTC_MAIN_State_ROUTINE;
 800746c:	4b09      	ldr	r3, [pc, #36]	; (8007494 <ModuleRTC_MAIN+0x4c>)
 800746e:	2201      	movs	r2, #1
 8007470:	701a      	strb	r2, [r3, #0]
	    break;
 8007472:	e00d      	b.n	8007490 <ModuleRTC_MAIN+0x48>

	    case ModuleRTC_MAIN_State_ROUTINE:

	    	ModuleRTC_MAIN_Routine();
 8007474:	f7ff ffda 	bl	800742c <ModuleRTC_MAIN_Routine>
	    break;
 8007478:	e00a      	b.n	8007490 <ModuleRTC_MAIN+0x48>

	    case ModuleRTC_MAIN_State_PROCESS:

	    	ModuleRTC_MAIN_Process();
 800747a:	f7ff ffde 	bl	800743a <ModuleRTC_MAIN_Process>

	    break;
 800747e:	e007      	b.n	8007490 <ModuleRTC_MAIN+0x48>

	    case ModuleRTC_MAIN_State_SUSPEND:
	    	ModuleRTC_MAIN_State = ModuleRTC_MAIN_State_IDLE;
 8007480:	4b04      	ldr	r3, [pc, #16]	; (8007494 <ModuleRTC_MAIN+0x4c>)
 8007482:	2200      	movs	r2, #0
 8007484:	701a      	strb	r2, [r3, #0]
	    break;
 8007486:	e003      	b.n	8007490 <ModuleRTC_MAIN+0x48>

	    default:
	    	ModuleRTC_MAIN_State = ModuleRTC_MAIN_State_SUSPEND;
 8007488:	4b02      	ldr	r3, [pc, #8]	; (8007494 <ModuleRTC_MAIN+0x4c>)
 800748a:	2203      	movs	r2, #3
 800748c:	701a      	strb	r2, [r3, #0]
	    break;
 800748e:	bf00      	nop

	}
}
 8007490:	bf00      	nop
 8007492:	bd80      	pop	{r7, pc}
 8007494:	20009667 	.word	0x20009667

08007498 <ModuleSDCard_HWInit>:
	 @return  : 
	 @date	  : 
	 @INFO		:	
********************************************************************************/
void ModuleSDCard_HWInit(void)
{
 8007498:	b480      	push	{r7}
 800749a:	af00      	add	r7, sp, #0
	//@INFO: WIFI thread'ine ait donanımsal init fonksiyonları
}
 800749c:	bf00      	nop
 800749e:	46bd      	mov	sp, r7
 80074a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a4:	4770      	bx	lr

080074a6 <ModuleSDCard_SWInit>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModuleSDCard_SWInit(void)
{
 80074a6:	b480      	push	{r7}
 80074a8:	af00      	add	r7, sp, #0
	//@INFO: WIFI thread'ine ait yazilimsal init fonksiyonları
}
 80074aa:	bf00      	nop
 80074ac:	46bd      	mov	sp, r7
 80074ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b2:	4770      	bx	lr

080074b4 <ModuleSDCard_StartUP>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModuleSDCard_StartUP(void)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	af00      	add	r7, sp, #0
	ModuleSDCard_HWInit();
 80074b8:	f7ff ffee 	bl	8007498 <ModuleSDCard_HWInit>
	ModuleSDCard_SWInit();
 80074bc:	f7ff fff3 	bl	80074a6 <ModuleSDCard_SWInit>
}
 80074c0:	bf00      	nop
 80074c2:	bd80      	pop	{r7, pc}

080074c4 <ModuleSDCard_MAIN_Routine>:
	 @date	  :
	 @INFO		:
********************************************************************************/

void ModuleSDCard_MAIN_Routine(void)
{
 80074c4:	b480      	push	{r7}
 80074c6:	af00      	add	r7, sp, #0

}
 80074c8:	bf00      	nop
 80074ca:	46bd      	mov	sp, r7
 80074cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d0:	4770      	bx	lr

080074d2 <ModuleSDCard_MAIN_Process>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModuleSDCard_MAIN_Process(void)
{
 80074d2:	b480      	push	{r7}
 80074d4:	af00      	add	r7, sp, #0

}
 80074d6:	bf00      	nop
 80074d8:	46bd      	mov	sp, r7
 80074da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074de:	4770      	bx	lr

080074e0 <ModuleSDCard_MAIN>:
	 @date	  :
	 @INFO		:
********************************************************************************/

void ModuleSDCard_MAIN(void)
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	af00      	add	r7, sp, #0
	switch(ModuleSDCard_MAIN_State)
 80074e4:	4b11      	ldr	r3, [pc, #68]	; (800752c <ModuleSDCard_MAIN+0x4c>)
 80074e6:	781b      	ldrb	r3, [r3, #0]
 80074e8:	2b03      	cmp	r3, #3
 80074ea:	d819      	bhi.n	8007520 <ModuleSDCard_MAIN+0x40>
 80074ec:	a201      	add	r2, pc, #4	; (adr r2, 80074f4 <ModuleSDCard_MAIN+0x14>)
 80074ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074f2:	bf00      	nop
 80074f4:	08007505 	.word	0x08007505
 80074f8:	0800750d 	.word	0x0800750d
 80074fc:	08007513 	.word	0x08007513
 8007500:	08007519 	.word	0x08007519
	{
	    case ModuleSDCard_MAIN_State_IDLE:
	    	//@INFO: IDLE Operations ..
	    	ModuleSDCard_MAIN_State = ModuleSDCard_MAIN_State_ROUTINE;
 8007504:	4b09      	ldr	r3, [pc, #36]	; (800752c <ModuleSDCard_MAIN+0x4c>)
 8007506:	2201      	movs	r2, #1
 8007508:	701a      	strb	r2, [r3, #0]
	    break;
 800750a:	e00d      	b.n	8007528 <ModuleSDCard_MAIN+0x48>

	    case ModuleSDCard_MAIN_State_ROUTINE:

	    	ModuleSDCard_MAIN_Routine();
 800750c:	f7ff ffda 	bl	80074c4 <ModuleSDCard_MAIN_Routine>
	    break;
 8007510:	e00a      	b.n	8007528 <ModuleSDCard_MAIN+0x48>

	    case ModuleSDCard_MAIN_State_PROCESS:

	    	ModuleSDCard_MAIN_Process();
 8007512:	f7ff ffde 	bl	80074d2 <ModuleSDCard_MAIN_Process>

	    break;
 8007516:	e007      	b.n	8007528 <ModuleSDCard_MAIN+0x48>

	    case ModuleSDCard_MAIN_State_SUSPEND:
	    	ModuleSDCard_MAIN_State = ModuleSDCard_MAIN_State_IDLE;
 8007518:	4b04      	ldr	r3, [pc, #16]	; (800752c <ModuleSDCard_MAIN+0x4c>)
 800751a:	2200      	movs	r2, #0
 800751c:	701a      	strb	r2, [r3, #0]
	    break;
 800751e:	e003      	b.n	8007528 <ModuleSDCard_MAIN+0x48>

	    default:
	    	ModuleSDCard_MAIN_State = ModuleSDCard_MAIN_State_SUSPEND;
 8007520:	4b02      	ldr	r3, [pc, #8]	; (800752c <ModuleSDCard_MAIN+0x4c>)
 8007522:	2203      	movs	r2, #3
 8007524:	701a      	strb	r2, [r3, #0]
	    break;
 8007526:	bf00      	nop

	}

}
 8007528:	bf00      	nop
 800752a:	bd80      	pop	{r7, pc}
 800752c:	20009668 	.word	0x20009668

08007530 <ModuleWIFI_HWInit>:
	 @return  : 
	 @date	  : 
	 @INFO		:	
********************************************************************************/
void ModuleWIFI_HWInit(void)
{
 8007530:	b480      	push	{r7}
 8007532:	af00      	add	r7, sp, #0
	//@INFO: WIFI thread'ine ait donanımsal init fonksiyonları
}
 8007534:	bf00      	nop
 8007536:	46bd      	mov	sp, r7
 8007538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753c:	4770      	bx	lr

0800753e <ModuleWIFI_SWInit>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModuleWIFI_SWInit(void)
{
 800753e:	b480      	push	{r7}
 8007540:	af00      	add	r7, sp, #0
	//@INFO: WIFI thread'ine ait yazilimsal init fonksiyonları
}
 8007542:	bf00      	nop
 8007544:	46bd      	mov	sp, r7
 8007546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754a:	4770      	bx	lr

0800754c <ModuleWIFI_StartUP>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModuleWIFI_StartUP(void)
{
 800754c:	b580      	push	{r7, lr}
 800754e:	af00      	add	r7, sp, #0
	ModuleWIFI_HWInit();
 8007550:	f7ff ffee 	bl	8007530 <ModuleWIFI_HWInit>
	ModuleWIFI_SWInit();
 8007554:	f7ff fff3 	bl	800753e <ModuleWIFI_SWInit>
}
 8007558:	bf00      	nop
 800755a:	bd80      	pop	{r7, pc}

0800755c <ModuleWIFI_MAIN_Routine>:
	 @date	  :
	 @INFO		:
********************************************************************************/

void ModuleWIFI_MAIN_Routine(void)
{
 800755c:	b480      	push	{r7}
 800755e:	af00      	add	r7, sp, #0

}
 8007560:	bf00      	nop
 8007562:	46bd      	mov	sp, r7
 8007564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007568:	4770      	bx	lr

0800756a <ModuleWIFI_MAIN_Process>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void ModuleWIFI_MAIN_Process(void)
{
 800756a:	b480      	push	{r7}
 800756c:	af00      	add	r7, sp, #0

}
 800756e:	bf00      	nop
 8007570:	46bd      	mov	sp, r7
 8007572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007576:	4770      	bx	lr

08007578 <ModuleWIFI_MAIN>:
	 @date	  :
	 @INFO		:
********************************************************************************/

void ModuleWIFI_MAIN(void)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	af00      	add	r7, sp, #0
	switch(ModuleWIFI_MAIN_State)
 800757c:	4b11      	ldr	r3, [pc, #68]	; (80075c4 <ModuleWIFI_MAIN+0x4c>)
 800757e:	781b      	ldrb	r3, [r3, #0]
 8007580:	2b03      	cmp	r3, #3
 8007582:	d819      	bhi.n	80075b8 <ModuleWIFI_MAIN+0x40>
 8007584:	a201      	add	r2, pc, #4	; (adr r2, 800758c <ModuleWIFI_MAIN+0x14>)
 8007586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800758a:	bf00      	nop
 800758c:	0800759d 	.word	0x0800759d
 8007590:	080075a5 	.word	0x080075a5
 8007594:	080075ab 	.word	0x080075ab
 8007598:	080075b1 	.word	0x080075b1
	{
	    case ModuleWIFI_MAIN_State_IDLE:
	    	//@INFO: IDLE Operations ..
	    	ModuleWIFI_MAIN_State = ModuleWIFI_MAIN_State_ROUTINE;
 800759c:	4b09      	ldr	r3, [pc, #36]	; (80075c4 <ModuleWIFI_MAIN+0x4c>)
 800759e:	2201      	movs	r2, #1
 80075a0:	701a      	strb	r2, [r3, #0]
	    break;
 80075a2:	e00d      	b.n	80075c0 <ModuleWIFI_MAIN+0x48>

	    case ModuleWIFI_MAIN_State_ROUTINE:

	    	ModuleWIFI_MAIN_Routine();
 80075a4:	f7ff ffda 	bl	800755c <ModuleWIFI_MAIN_Routine>
	    break;
 80075a8:	e00a      	b.n	80075c0 <ModuleWIFI_MAIN+0x48>

	    case ModuleWIFI_MAIN_State_PROCESS:

	    	ModuleWIFI_MAIN_Process();
 80075aa:	f7ff ffde 	bl	800756a <ModuleWIFI_MAIN_Process>

	    break;
 80075ae:	e007      	b.n	80075c0 <ModuleWIFI_MAIN+0x48>

	    case ModuleWIFI_MAIN_State_SUSPEND:
	    	ModuleWIFI_MAIN_State = ModuleWIFI_MAIN_State_IDLE;
 80075b0:	4b04      	ldr	r3, [pc, #16]	; (80075c4 <ModuleWIFI_MAIN+0x4c>)
 80075b2:	2200      	movs	r2, #0
 80075b4:	701a      	strb	r2, [r3, #0]
	    break;
 80075b6:	e003      	b.n	80075c0 <ModuleWIFI_MAIN+0x48>

	    default:
	    	ModuleWIFI_MAIN_State = ModuleWIFI_MAIN_State_SUSPEND;
 80075b8:	4b02      	ldr	r3, [pc, #8]	; (80075c4 <ModuleWIFI_MAIN+0x4c>)
 80075ba:	2203      	movs	r2, #3
 80075bc:	701a      	strb	r2, [r3, #0]
	    break;
 80075be:	bf00      	nop

	}
}
 80075c0:	bf00      	nop
 80075c2:	bd80      	pop	{r7, pc}
 80075c4:	20009669 	.word	0x20009669

080075c8 <TelemetryMain_HWInit>:
	 @return  : 
	 @date	  : 
	 @INFO		:	
********************************************************************************/
void TelemetryMain_HWInit(void)
{
 80075c8:	b480      	push	{r7}
 80075ca:	af00      	add	r7, sp, #0
	//@INFO: Telemetry thread'ine ait donanımsal init fonksiyonları
}
 80075cc:	bf00      	nop
 80075ce:	46bd      	mov	sp, r7
 80075d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d4:	4770      	bx	lr

080075d6 <TelemetryMain_SWInit>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void TelemetryMain_SWInit(void)
{
 80075d6:	b480      	push	{r7}
 80075d8:	af00      	add	r7, sp, #0
	//@INFO: Telemetry thread'ine ait yazilimsal init fonksiyonları
}
 80075da:	bf00      	nop
 80075dc:	46bd      	mov	sp, r7
 80075de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e2:	4770      	bx	lr

080075e4 <TelemetryMain_StartUP>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void TelemetryMain_StartUP(void)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	af00      	add	r7, sp, #0
	TelemetryMain_HWInit();
 80075e8:	f7ff ffee 	bl	80075c8 <TelemetryMain_HWInit>
	TelemetryMain_SWInit();
 80075ec:	f7ff fff3 	bl	80075d6 <TelemetryMain_SWInit>
}
 80075f0:	bf00      	nop
 80075f2:	bd80      	pop	{r7, pc}

080075f4 <TelemetryMain_MAIN_Routine>:
	 @date	  :
	 @INFO		:
********************************************************************************/

void TelemetryMain_MAIN_Routine(void)
{
 80075f4:	b480      	push	{r7}
 80075f6:	af00      	add	r7, sp, #0

}
 80075f8:	bf00      	nop
 80075fa:	46bd      	mov	sp, r7
 80075fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007600:	4770      	bx	lr

08007602 <TelemetryMain_MAIN_Process>:
	 @return  :
	 @date	  :
	 @INFO		:
********************************************************************************/
void TelemetryMain_MAIN_Process(void)
{
 8007602:	b480      	push	{r7}
 8007604:	af00      	add	r7, sp, #0

}
 8007606:	bf00      	nop
 8007608:	46bd      	mov	sp, r7
 800760a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760e:	4770      	bx	lr

08007610 <TelemetyMain_MAIN>:
	 @date	  :
	 @INFO		:
********************************************************************************/

void TelemetyMain_MAIN(void)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	af00      	add	r7, sp, #0

	switch(TelemetryMain_MAIN_State)
 8007614:	4b11      	ldr	r3, [pc, #68]	; (800765c <TelemetyMain_MAIN+0x4c>)
 8007616:	781b      	ldrb	r3, [r3, #0]
 8007618:	2b03      	cmp	r3, #3
 800761a:	d819      	bhi.n	8007650 <TelemetyMain_MAIN+0x40>
 800761c:	a201      	add	r2, pc, #4	; (adr r2, 8007624 <TelemetyMain_MAIN+0x14>)
 800761e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007622:	bf00      	nop
 8007624:	08007635 	.word	0x08007635
 8007628:	0800763d 	.word	0x0800763d
 800762c:	08007643 	.word	0x08007643
 8007630:	08007649 	.word	0x08007649
	{
	    case TelemetryMain_MAIN_State_IDLE:
	    	//@INFO: IDLE Operations ..
	    	TelemetryMain_MAIN_State = TelemetryMain_MAIN_State_ROUTINE;
 8007634:	4b09      	ldr	r3, [pc, #36]	; (800765c <TelemetyMain_MAIN+0x4c>)
 8007636:	2201      	movs	r2, #1
 8007638:	701a      	strb	r2, [r3, #0]
	    break;
 800763a:	e00d      	b.n	8007658 <TelemetyMain_MAIN+0x48>

	    case TelemetryMain_MAIN_State_ROUTINE:

	    	TelemetryMain_MAIN_Routine();
 800763c:	f7ff ffda 	bl	80075f4 <TelemetryMain_MAIN_Routine>

	    break;
 8007640:	e00a      	b.n	8007658 <TelemetyMain_MAIN+0x48>

	    case TelemetryMain_MAIN_State_PROCESS:

	    	TelemetryMain_MAIN_Process();
 8007642:	f7ff ffde 	bl	8007602 <TelemetryMain_MAIN_Process>

	    break;
 8007646:	e007      	b.n	8007658 <TelemetyMain_MAIN+0x48>

	    case TelemetryMain_MAIN_State_SUSPEND:
	    	TelemetryMain_MAIN_State = TelemetryMain_MAIN_State_IDLE;
 8007648:	4b04      	ldr	r3, [pc, #16]	; (800765c <TelemetyMain_MAIN+0x4c>)
 800764a:	2200      	movs	r2, #0
 800764c:	701a      	strb	r2, [r3, #0]
	    break;
 800764e:	e003      	b.n	8007658 <TelemetyMain_MAIN+0x48>

	    default:
	    	TelemetryMain_MAIN_State = TelemetryMain_MAIN_State_SUSPEND;
 8007650:	4b02      	ldr	r3, [pc, #8]	; (800765c <TelemetyMain_MAIN+0x4c>)
 8007652:	2203      	movs	r2, #3
 8007654:	701a      	strb	r2, [r3, #0]
	    break;
 8007656:	bf00      	nop

	}

}
 8007658:	bf00      	nop
 800765a:	bd80      	pop	{r7, pc}
 800765c:	2000966a 	.word	0x2000966a

08007660 <__libc_init_array>:
 8007660:	b570      	push	{r4, r5, r6, lr}
 8007662:	4d0d      	ldr	r5, [pc, #52]	; (8007698 <__libc_init_array+0x38>)
 8007664:	4c0d      	ldr	r4, [pc, #52]	; (800769c <__libc_init_array+0x3c>)
 8007666:	1b64      	subs	r4, r4, r5
 8007668:	10a4      	asrs	r4, r4, #2
 800766a:	2600      	movs	r6, #0
 800766c:	42a6      	cmp	r6, r4
 800766e:	d109      	bne.n	8007684 <__libc_init_array+0x24>
 8007670:	4d0b      	ldr	r5, [pc, #44]	; (80076a0 <__libc_init_array+0x40>)
 8007672:	4c0c      	ldr	r4, [pc, #48]	; (80076a4 <__libc_init_array+0x44>)
 8007674:	f000 f82e 	bl	80076d4 <_init>
 8007678:	1b64      	subs	r4, r4, r5
 800767a:	10a4      	asrs	r4, r4, #2
 800767c:	2600      	movs	r6, #0
 800767e:	42a6      	cmp	r6, r4
 8007680:	d105      	bne.n	800768e <__libc_init_array+0x2e>
 8007682:	bd70      	pop	{r4, r5, r6, pc}
 8007684:	f855 3b04 	ldr.w	r3, [r5], #4
 8007688:	4798      	blx	r3
 800768a:	3601      	adds	r6, #1
 800768c:	e7ee      	b.n	800766c <__libc_init_array+0xc>
 800768e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007692:	4798      	blx	r3
 8007694:	3601      	adds	r6, #1
 8007696:	e7f2      	b.n	800767e <__libc_init_array+0x1e>
 8007698:	08007838 	.word	0x08007838
 800769c:	08007838 	.word	0x08007838
 80076a0:	08007838 	.word	0x08007838
 80076a4:	0800783c 	.word	0x0800783c

080076a8 <memcpy>:
 80076a8:	440a      	add	r2, r1
 80076aa:	4291      	cmp	r1, r2
 80076ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80076b0:	d100      	bne.n	80076b4 <memcpy+0xc>
 80076b2:	4770      	bx	lr
 80076b4:	b510      	push	{r4, lr}
 80076b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80076ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 80076be:	4291      	cmp	r1, r2
 80076c0:	d1f9      	bne.n	80076b6 <memcpy+0xe>
 80076c2:	bd10      	pop	{r4, pc}

080076c4 <memset>:
 80076c4:	4402      	add	r2, r0
 80076c6:	4603      	mov	r3, r0
 80076c8:	4293      	cmp	r3, r2
 80076ca:	d100      	bne.n	80076ce <memset+0xa>
 80076cc:	4770      	bx	lr
 80076ce:	f803 1b01 	strb.w	r1, [r3], #1
 80076d2:	e7f9      	b.n	80076c8 <memset+0x4>

080076d4 <_init>:
 80076d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076d6:	bf00      	nop
 80076d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076da:	bc08      	pop	{r3}
 80076dc:	469e      	mov	lr, r3
 80076de:	4770      	bx	lr

080076e0 <_fini>:
 80076e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076e2:	bf00      	nop
 80076e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076e6:	bc08      	pop	{r3}
 80076e8:	469e      	mov	lr, r3
 80076ea:	4770      	bx	lr
